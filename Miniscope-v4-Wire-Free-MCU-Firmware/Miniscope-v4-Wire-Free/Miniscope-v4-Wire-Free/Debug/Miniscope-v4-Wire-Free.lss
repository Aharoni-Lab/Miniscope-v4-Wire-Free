
Miniscope-v4-Wire-Free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004958  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004958  00004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000003c  20000000  00004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002003c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002003c  2**0
                  CONTENTS
  5 .bss          000293b4  20000040  000049a0  0002003c  2**4
                  ALLOC
  6 .stack        00010004  200293f4  0002dd54  0002003c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003afcc  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005110  00000000  00000000  0005b08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010264  00000000  00000000  0006019f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc0  00000000  00000000  00070403  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  000711c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000317cb  00000000  00000000  00071f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001a92c  00000000  00000000  000a36ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000fb2d3  00000000  00000000  000bdffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000021f8  00000000  00000000  001b92d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 93 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 15 1b 00 00     ................
      8c:	21 1b 00 00 e5 02 00 00 2d 1b 00 00 e5 02 00 00     !.......-.......
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 39 1b 00 00     ............9...
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	b5 18 00 00 c1 18 00 00 cd 18 00 00 d9 18 00 00     ................
      cc:	e5 18 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	91 1d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 29 29 00 00     ............))..
     1f0:	3d 29 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     =)..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 65 1d 00 00 e5 02 00 00 e5 02 00 00     ....e...........
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	00004960 	.word	0x00004960

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004960 	.word	0x00004960
     2c4:	20000044 	.word	0x20000044
     2c8:	00004960 	.word	0x00004960
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000941 	.word	0x00000941
     2e0:	00004339 	.word	0x00004339

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00004960 	.word	0x00004960
     348:	2000003c 	.word	0x2000003c
     34c:	20000040 	.word	0x20000040
     350:	200293f4 	.word	0x200293f4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	00004665 	.word	0x00004665
     360:	00003bcd 	.word	0x00003bcd

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	000028e5 	.word	0x000028e5
     394:	40003c00 	.word	0x40003c00
     398:	200006e8 	.word	0x200006e8
     39c:	000011b5 	.word	0x000011b5

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000b99 	.word	0x00000b99

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000d91 	.word	0x00000d91

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000cbd 	.word	0x00000cbd
     6e8:	0000054d 	.word	0x0000054d

000006ec <IO_BUS_PORT_init>:
{
     6ec:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6ee:	4b5b      	ldr	r3, [pc, #364]	; (85c <IO_BUS_PORT_init+0x170>)
     6f0:	f44f 6500 	mov.w	r5, #2048	; 0x800
     6f4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6f8:	4e59      	ldr	r6, [pc, #356]	; (860 <IO_BUS_PORT_init+0x174>)
     6fa:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     6fe:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     702:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     706:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     70a:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     70e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     712:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     716:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     71a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     722:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     726:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     72a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     72e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     732:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     736:	f44f 7180 	mov.w	r1, #256	; 0x100
     73a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     73c:	4849      	ldr	r0, [pc, #292]	; (864 <IO_BUS_PORT_init+0x178>)
     73e:	6298      	str	r0, [r3, #40]	; 0x28
     740:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     742:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     744:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     748:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     74c:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     750:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     754:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     758:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75c:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     764:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     768:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     770:	f44f 7100 	mov.w	r1, #512	; 0x200
     774:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     776:	f500 7080 	add.w	r0, r0, #256	; 0x100
     77a:	6298      	str	r0, [r3, #40]	; 0x28
     77c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     77e:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     780:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     784:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     788:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78c:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     790:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     794:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     798:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     79c:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7a0:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a8:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
     7b0:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7b2:	4c2d      	ldr	r4, [pc, #180]	; (868 <IO_BUS_PORT_init+0x17c>)
     7b4:	629c      	str	r4, [r3, #40]	; 0x28
     7b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7b8:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ba:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     7be:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7c2:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7c6:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7d2:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7d6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7da:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7de:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7e6:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e8:	629e      	str	r6, [r3, #40]	; 0x28
     7ea:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ec:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ee:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     7f2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f6:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7fa:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     802:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     806:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     80a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     80e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     812:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     816:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     81a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81e:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     822:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     826:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     82a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     82e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     832:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     836:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     83a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     83e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     842:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     846:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     84a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     84e:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     852:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     856:	bc70      	pop	{r4, r5, r6}
     858:	4770      	bx	lr
     85a:	bf00      	nop
     85c:	41008000 	.word	0x41008000
     860:	40000800 	.word	0x40000800
     864:	40000100 	.word	0x40000100
     868:	40000400 	.word	0x40000400

0000086c <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     86c:	4a05      	ldr	r2, [pc, #20]	; (884 <IO_BUS_CLOCK_init+0x18>)
     86e:	6913      	ldr	r3, [r2, #16]
     870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     874:	6113      	str	r3, [r2, #16]
     876:	4b04      	ldr	r3, [pc, #16]	; (888 <IO_BUS_CLOCK_init+0x1c>)
     878:	2240      	movs	r2, #64	; 0x40
     87a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     87e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     882:	4770      	bx	lr
     884:	40000800 	.word	0x40000800
     888:	40001c00 	.word	0x40001c00

0000088c <IO_BUS_init>:
{
     88c:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <IO_BUS_init+0x18>)
     890:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     892:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     896:	4804      	ldr	r0, [pc, #16]	; (8a8 <IO_BUS_init+0x1c>)
     898:	4b04      	ldr	r3, [pc, #16]	; (8ac <IO_BUS_init+0x20>)
     89a:	4798      	blx	r3
	IO_BUS_PORT_init();
     89c:	4b04      	ldr	r3, [pc, #16]	; (8b0 <IO_BUS_init+0x24>)
     89e:	4798      	blx	r3
     8a0:	bd08      	pop	{r3, pc}
     8a2:	bf00      	nop
     8a4:	0000086d 	.word	0x0000086d
     8a8:	200006d0 	.word	0x200006d0
     8ac:	00000e95 	.word	0x00000e95
     8b0:	000006ed 	.word	0x000006ed

000008b4 <delay_driver_init>:
{
     8b4:	b508      	push	{r3, lr}
	delay_init(SysTick);
     8b6:	4802      	ldr	r0, [pc, #8]	; (8c0 <delay_driver_init+0xc>)
     8b8:	4b02      	ldr	r3, [pc, #8]	; (8c4 <delay_driver_init+0x10>)
     8ba:	4798      	blx	r3
     8bc:	bd08      	pop	{r3, pc}
     8be:	bf00      	nop
     8c0:	e000e010 	.word	0xe000e010
     8c4:	00000cf9 	.word	0x00000cf9

000008c8 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8c8:	4a08      	ldr	r2, [pc, #32]	; (8ec <PWM_0_PORT_init+0x24>)
     8ca:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8d2:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8d6:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8da:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8e2:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8e6:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     8ea:	4770      	bx	lr
     8ec:	41008000 	.word	0x41008000

000008f0 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     8f0:	4a04      	ldr	r2, [pc, #16]	; (904 <PWM_0_CLOCK_init+0x14>)
     8f2:	6953      	ldr	r3, [r2, #20]
     8f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8f8:	6153      	str	r3, [r2, #20]
     8fa:	2240      	movs	r2, #64	; 0x40
     8fc:	4b02      	ldr	r3, [pc, #8]	; (908 <PWM_0_CLOCK_init+0x18>)
     8fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     902:	4770      	bx	lr
     904:	40000800 	.word	0x40000800
     908:	40001c00 	.word	0x40001c00

0000090c <PWM_0_init>:
{
     90c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     90e:	4b06      	ldr	r3, [pc, #24]	; (928 <PWM_0_init+0x1c>)
     910:	4798      	blx	r3
	PWM_0_PORT_init();
     912:	4b06      	ldr	r3, [pc, #24]	; (92c <PWM_0_init+0x20>)
     914:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     916:	4b06      	ldr	r3, [pc, #24]	; (930 <PWM_0_init+0x24>)
     918:	4798      	blx	r3
     91a:	4602      	mov	r2, r0
     91c:	4905      	ldr	r1, [pc, #20]	; (934 <PWM_0_init+0x28>)
     91e:	4806      	ldr	r0, [pc, #24]	; (938 <PWM_0_init+0x2c>)
     920:	4b06      	ldr	r3, [pc, #24]	; (93c <PWM_0_init+0x30>)
     922:	4798      	blx	r3
     924:	bd08      	pop	{r3, pc}
     926:	bf00      	nop
     928:	000008f1 	.word	0x000008f1
     92c:	000008c9 	.word	0x000008c9
     930:	000028e9 	.word	0x000028e9
     934:	40003800 	.word	0x40003800
     938:	20000698 	.word	0x20000698
     93c:	0000104d 	.word	0x0000104d

00000940 <system_init>:
}

void system_init(void)
{
     940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     942:	4b87      	ldr	r3, [pc, #540]	; (b60 <system_init+0x220>)
     944:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     946:	4b87      	ldr	r3, [pc, #540]	; (b64 <system_init+0x224>)
     948:	2210      	movs	r2, #16
     94a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     94c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     952:	629a      	str	r2, [r3, #40]	; 0x28
     954:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     958:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     95a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     95e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     962:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     966:	2520      	movs	r5, #32
     968:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     96a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     96c:	497e      	ldr	r1, [pc, #504]	; (b68 <system_init+0x228>)
     96e:	6299      	str	r1, [r3, #40]	; 0x28
     970:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     972:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     976:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     97e:	2140      	movs	r1, #64	; 0x40
     980:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     982:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     986:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     98a:	6299      	str	r1, [r3, #40]	; 0x28
     98c:	4877      	ldr	r0, [pc, #476]	; (b6c <system_init+0x22c>)
     98e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     990:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     994:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     998:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     99c:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     9a0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9a4:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9a8:	2180      	movs	r1, #128	; 0x80
     9aa:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9b0:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     9b4:	6299      	str	r1, [r3, #40]	; 0x28
     9b6:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9b8:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     9bc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     9c0:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c4:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     9c8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9cc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     9d4:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9d6:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9d8:	4c65      	ldr	r4, [pc, #404]	; (b70 <system_init+0x230>)
     9da:	629c      	str	r4, [r3, #40]	; 0x28
     9dc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9de:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9e6:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     9ee:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
     9f6:	629f      	str	r7, [r3, #40]	; 0x28
     9f8:	4e5e      	ldr	r6, [pc, #376]	; (b74 <system_init+0x234>)
     9fa:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fc:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     a00:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a04:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a08:	2601      	movs	r6, #1
     a0a:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a12:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     a16:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     a1a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a1e:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     a22:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a26:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a2a:	2602      	movs	r6, #2
     a2c:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a30:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a34:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     a38:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     a3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a4c:	2604      	movs	r6, #4
     a4e:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a52:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a56:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     a5a:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     a5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a62:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     a66:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a6a:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a6e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a72:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     a76:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     a7a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     a7e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a82:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     a86:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     a8a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a8e:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     a92:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a96:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a9a:	f44f 7000 	mov.w	r0, #512	; 0x200
     a9e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aa2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     aaa:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     aae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab2:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     ab6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aba:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     abe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     ac2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ac6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aca:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     ace:	482a      	ldr	r0, [pc, #168]	; (b78 <system_init+0x238>)
     ad0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad4:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     adc:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     ae4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ae8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     af0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     af4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af8:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     afc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b00:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b04:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b08:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     b0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b10:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b14:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     b18:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b1c:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b20:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b28:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2c:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b30:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b34:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b38:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b3c:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     b40:	4b0e      	ldr	r3, [pc, #56]	; (b7c <system_init+0x23c>)
     b42:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     b44:	4b0e      	ldr	r3, [pc, #56]	; (b80 <system_init+0x240>)
     b46:	4798      	blx	r3

	CAMERA_0_init();
     b48:	4b0e      	ldr	r3, [pc, #56]	; (b84 <system_init+0x244>)
     b4a:	4798      	blx	r3

	IO_BUS_init();
     b4c:	4b0e      	ldr	r3, [pc, #56]	; (b88 <system_init+0x248>)
     b4e:	4798      	blx	r3

	delay_driver_init();
     b50:	4b0e      	ldr	r3, [pc, #56]	; (b8c <system_init+0x24c>)
     b52:	4798      	blx	r3

	PWM_0_init();
     b54:	4b0e      	ldr	r3, [pc, #56]	; (b90 <system_init+0x250>)
     b56:	4798      	blx	r3

	TIMER_0_init();
     b58:	4b0e      	ldr	r3, [pc, #56]	; (b94 <system_init+0x254>)
     b5a:	4798      	blx	r3
     b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b5e:	bf00      	nop
     b60:	000015f5 	.word	0x000015f5
     b64:	41008000 	.word	0x41008000
     b68:	40000020 	.word	0x40000020
     b6c:	c0020000 	.word	0xc0020000
     b70:	40008000 	.word	0x40008000
     b74:	c0000100 	.word	0xc0000100
     b78:	c0000001 	.word	0xc0000001
     b7c:	000003f5 	.word	0x000003f5
     b80:	00000421 	.word	0x00000421
     b84:	000006c5 	.word	0x000006c5
     b88:	0000088d 	.word	0x0000088d
     b8c:	000008b5 	.word	0x000008b5
     b90:	0000090d 	.word	0x0000090d
     b94:	00000365 	.word	0x00000365

00000b98 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     b98:	b538      	push	{r3, r4, r5, lr}
     b9a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     b9c:	4605      	mov	r5, r0
     b9e:	b160      	cbz	r0, bba <adc_sync_init+0x22>
     ba0:	b149      	cbz	r1, bb6 <adc_sync_init+0x1e>
     ba2:	2001      	movs	r0, #1
     ba4:	2239      	movs	r2, #57	; 0x39
     ba6:	4906      	ldr	r1, [pc, #24]	; (bc0 <adc_sync_init+0x28>)
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <adc_sync_init+0x2c>)
     baa:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     bac:	4621      	mov	r1, r4
     bae:	4628      	mov	r0, r5
     bb0:	4b05      	ldr	r3, [pc, #20]	; (bc8 <adc_sync_init+0x30>)
     bb2:	4798      	blx	r3
}
     bb4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     bb6:	2000      	movs	r0, #0
     bb8:	e7f4      	b.n	ba4 <adc_sync_init+0xc>
     bba:	2000      	movs	r0, #0
     bbc:	e7f2      	b.n	ba4 <adc_sync_init+0xc>
     bbe:	bf00      	nop
     bc0:	000046ac 	.word	0x000046ac
     bc4:	000012dd 	.word	0x000012dd
     bc8:	0000151d 	.word	0x0000151d

00000bcc <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     bcc:	b538      	push	{r3, r4, r5, lr}
     bce:	460d      	mov	r5, r1
	ASSERT(descr);
     bd0:	4604      	mov	r4, r0
     bd2:	224e      	movs	r2, #78	; 0x4e
     bd4:	4905      	ldr	r1, [pc, #20]	; (bec <adc_sync_enable_channel+0x20>)
     bd6:	3000      	adds	r0, #0
     bd8:	bf18      	it	ne
     bda:	2001      	movne	r0, #1
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <adc_sync_enable_channel+0x24>)
     bde:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     be0:	4629      	mov	r1, r5
     be2:	4620      	mov	r0, r4
     be4:	4b03      	ldr	r3, [pc, #12]	; (bf4 <adc_sync_enable_channel+0x28>)
     be6:	4798      	blx	r3

	return ERR_NONE;
}
     be8:	2000      	movs	r0, #0
     bea:	bd38      	pop	{r3, r4, r5, pc}
     bec:	000046ac 	.word	0x000046ac
     bf0:	000012dd 	.word	0x000012dd
     bf4:	00001555 	.word	0x00001555

00000bf8 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     bfc:	460d      	mov	r5, r1
     bfe:	4690      	mov	r8, r2
     c00:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     c02:	4607      	mov	r7, r0
     c04:	b1c8      	cbz	r0, c3a <adc_sync_read_channel+0x42>
     c06:	b1d2      	cbz	r2, c3e <adc_sync_read_channel+0x46>
     c08:	b9db      	cbnz	r3, c42 <adc_sync_read_channel+0x4a>
     c0a:	2000      	movs	r0, #0
     c0c:	f8df a084 	ldr.w	sl, [pc, #132]	; c94 <adc_sync_read_channel+0x9c>
     c10:	2267      	movs	r2, #103	; 0x67
     c12:	4651      	mov	r1, sl
     c14:	4e1a      	ldr	r6, [pc, #104]	; (c80 <adc_sync_read_channel+0x88>)
     c16:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     c18:	463c      	mov	r4, r7
     c1a:	4638      	mov	r0, r7
     c1c:	4b19      	ldr	r3, [pc, #100]	; (c84 <adc_sync_read_channel+0x8c>)
     c1e:	4798      	blx	r3
     c20:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     c22:	fb99 f0f0 	sdiv	r0, r9, r0
     c26:	fb07 9010 	mls	r0, r7, r0, r9
     c2a:	2269      	movs	r2, #105	; 0x69
     c2c:	4651      	mov	r1, sl
     c2e:	fab0 f080 	clz	r0, r0
     c32:	0940      	lsrs	r0, r0, #5
     c34:	47b0      	blx	r6
	uint16_t offset = 0;
     c36:	2600      	movs	r6, #0
     c38:	e009      	b.n	c4e <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     c3a:	2000      	movs	r0, #0
     c3c:	e7e6      	b.n	c0c <adc_sync_read_channel+0x14>
     c3e:	2000      	movs	r0, #0
     c40:	e7e4      	b.n	c0c <adc_sync_read_channel+0x14>
     c42:	2001      	movs	r0, #1
     c44:	e7e2      	b.n	c0c <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     c46:	443e      	add	r6, r7
     c48:	b2b6      	uxth	r6, r6
	} while (offset < length);
     c4a:	45b1      	cmp	r9, r6
     c4c:	d915      	bls.n	c7a <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     c4e:	4620      	mov	r0, r4
     c50:	4b0d      	ldr	r3, [pc, #52]	; (c88 <adc_sync_read_channel+0x90>)
     c52:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     c54:	4629      	mov	r1, r5
     c56:	4620      	mov	r0, r4
     c58:	4b0c      	ldr	r3, [pc, #48]	; (c8c <adc_sync_read_channel+0x94>)
     c5a:	4798      	blx	r3
     c5c:	2800      	cmp	r0, #0
     c5e:	d0f9      	beq.n	c54 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     c60:	4629      	mov	r1, r5
     c62:	4620      	mov	r0, r4
     c64:	4b0a      	ldr	r3, [pc, #40]	; (c90 <adc_sync_read_channel+0x98>)
     c66:	4798      	blx	r3
		buffer[offset] = result;
     c68:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     c6c:	2f01      	cmp	r7, #1
     c6e:	d9ea      	bls.n	c46 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     c70:	1c73      	adds	r3, r6, #1
     c72:	0a00      	lsrs	r0, r0, #8
     c74:	f808 0003 	strb.w	r0, [r8, r3]
     c78:	e7e5      	b.n	c46 <adc_sync_read_channel+0x4e>

	return offset;
}
     c7a:	4630      	mov	r0, r6
     c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c80:	000012dd 	.word	0x000012dd
     c84:	0000156b 	.word	0x0000156b
     c88:	0000158b 	.word	0x0000158b
     c8c:	0000157f 	.word	0x0000157f
     c90:	000015a1 	.word	0x000015a1
     c94:	000046ac 	.word	0x000046ac

00000c98 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c98:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     c9c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c9e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ca0:	f3bf 8f5f 	dmb	sy
     ca4:	4770      	bx	lr

00000ca6 <atomic_leave_critical>:
     ca6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     caa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     cac:	f383 8810 	msr	PRIMASK, r3
     cb0:	4770      	bx	lr

00000cb2 <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     cb2:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     cb4:	6903      	ldr	r3, [r0, #16]
     cb6:	b103      	cbz	r3, cba <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     cb8:	4798      	blx	r3
     cba:	bd08      	pop	{r3, pc}

00000cbc <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     cbc:	b538      	push	{r3, r4, r5, lr}
     cbe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cc0:	4604      	mov	r4, r0
     cc2:	b178      	cbz	r0, ce4 <camera_async_init+0x28>
     cc4:	b161      	cbz	r1, ce0 <camera_async_init+0x24>
     cc6:	2001      	movs	r0, #1
     cc8:	2232      	movs	r2, #50	; 0x32
     cca:	4907      	ldr	r1, [pc, #28]	; (ce8 <camera_async_init+0x2c>)
     ccc:	4b07      	ldr	r3, [pc, #28]	; (cec <camera_async_init+0x30>)
     cce:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     cd0:	4629      	mov	r1, r5
     cd2:	4620      	mov	r0, r4
     cd4:	4b06      	ldr	r3, [pc, #24]	; (cf0 <camera_async_init+0x34>)
     cd6:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     cd8:	4b06      	ldr	r3, [pc, #24]	; (cf4 <camera_async_init+0x38>)
     cda:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     cdc:	2000      	movs	r0, #0
     cde:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     ce0:	2000      	movs	r0, #0
     ce2:	e7f1      	b.n	cc8 <camera_async_init+0xc>
     ce4:	2000      	movs	r0, #0
     ce6:	e7ef      	b.n	cc8 <camera_async_init+0xc>
     ce8:	000046c8 	.word	0x000046c8
     cec:	000012dd 	.word	0x000012dd
     cf0:	00001d2d 	.word	0x00001d2d
     cf4:	00000cb3 	.word	0x00000cb3

00000cf8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     cf8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     cfa:	4b02      	ldr	r3, [pc, #8]	; (d04 <delay_init+0xc>)
     cfc:	6018      	str	r0, [r3, #0]
     cfe:	4b02      	ldr	r3, [pc, #8]	; (d08 <delay_init+0x10>)
     d00:	4798      	blx	r3
     d02:	bd08      	pop	{r3, pc}
     d04:	2000005c 	.word	0x2000005c
     d08:	00002391 	.word	0x00002391

00000d0c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     d0c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     d0e:	4b04      	ldr	r3, [pc, #16]	; (d20 <delay_us+0x14>)
     d10:	681c      	ldr	r4, [r3, #0]
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <delay_us+0x18>)
     d14:	4798      	blx	r3
     d16:	4601      	mov	r1, r0
     d18:	4620      	mov	r0, r4
     d1a:	4b03      	ldr	r3, [pc, #12]	; (d28 <delay_us+0x1c>)
     d1c:	4798      	blx	r3
     d1e:	bd10      	pop	{r4, pc}
     d20:	2000005c 	.word	0x2000005c
     d24:	000015c9 	.word	0x000015c9
     d28:	0000239d 	.word	0x0000239d

00000d2c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d2c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d2e:	4b04      	ldr	r3, [pc, #16]	; (d40 <delay_ms+0x14>)
     d30:	681c      	ldr	r4, [r3, #0]
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <delay_ms+0x18>)
     d34:	4798      	blx	r3
     d36:	4601      	mov	r1, r0
     d38:	4620      	mov	r0, r4
     d3a:	4b03      	ldr	r3, [pc, #12]	; (d48 <delay_ms+0x1c>)
     d3c:	4798      	blx	r3
     d3e:	bd10      	pop	{r4, pc}
     d40:	2000005c 	.word	0x2000005c
     d44:	000015e5 	.word	0x000015e5
     d48:	0000239d 	.word	0x0000239d

00000d4c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     d4c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     d4e:	2504      	movs	r5, #4
     d50:	2400      	movs	r4, #0

	while (upper >= lower) {
     d52:	e007      	b.n	d64 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     d54:	4a0d      	ldr	r2, [pc, #52]	; (d8c <process_ext_irq+0x40>)
     d56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     d5a:	b1b3      	cbz	r3, d8a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     d5c:	4798      	blx	r3
     d5e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     d60:	3a01      	subs	r2, #1
     d62:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     d64:	42ac      	cmp	r4, r5
     d66:	d810      	bhi.n	d8a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     d68:	192b      	adds	r3, r5, r4
     d6a:	105b      	asrs	r3, r3, #1
     d6c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     d6e:	2a03      	cmp	r2, #3
     d70:	d80b      	bhi.n	d8a <process_ext_irq+0x3e>
     d72:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     d74:	4905      	ldr	r1, [pc, #20]	; (d8c <process_ext_irq+0x40>)
     d76:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     d7a:	6849      	ldr	r1, [r1, #4]
     d7c:	4281      	cmp	r1, r0
     d7e:	d0e9      	beq.n	d54 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     d80:	4281      	cmp	r1, r0
     d82:	d2ed      	bcs.n	d60 <process_ext_irq+0x14>
			lower = middle + 1;
     d84:	3201      	adds	r2, #1
     d86:	b2d4      	uxtb	r4, r2
     d88:	e7ec      	b.n	d64 <process_ext_irq+0x18>
     d8a:	bd38      	pop	{r3, r4, r5, pc}
     d8c:	20000060 	.word	0x20000060

00000d90 <ext_irq_init>:
{
     d90:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d92:	2300      	movs	r3, #0
     d94:	e00a      	b.n	dac <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     d96:	4a08      	ldr	r2, [pc, #32]	; (db8 <ext_irq_init+0x28>)
     d98:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     d9c:	f04f 30ff 	mov.w	r0, #4294967295
     da0:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     da2:	2100      	movs	r1, #0
     da4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     da8:	3301      	adds	r3, #1
     daa:	b29b      	uxth	r3, r3
     dac:	2b03      	cmp	r3, #3
     dae:	d9f2      	bls.n	d96 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     db0:	4802      	ldr	r0, [pc, #8]	; (dbc <ext_irq_init+0x2c>)
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <ext_irq_init+0x30>)
     db4:	4798      	blx	r3
}
     db6:	bd08      	pop	{r3, pc}
     db8:	20000060 	.word	0x20000060
     dbc:	00000d4d 	.word	0x00000d4d
     dc0:	000019b5 	.word	0x000019b5

00000dc4 <ext_irq_register>:
{
     dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc6:	b083      	sub	sp, #12
     dc8:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     dca:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     dcc:	2b03      	cmp	r3, #3
     dce:	d80e      	bhi.n	dee <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     dd0:	4618      	mov	r0, r3
     dd2:	4a2e      	ldr	r2, [pc, #184]	; (e8c <ext_irq_register+0xc8>)
     dd4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     dd8:	6852      	ldr	r2, [r2, #4]
     dda:	42a2      	cmp	r2, r4
     ddc:	d002      	beq.n	de4 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     dde:	3301      	adds	r3, #1
     de0:	b2db      	uxtb	r3, r3
     de2:	e7f3      	b.n	dcc <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     de4:	4b29      	ldr	r3, [pc, #164]	; (e8c <ext_irq_register+0xc8>)
     de6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     dea:	2701      	movs	r7, #1
			break;
     dec:	e000      	b.n	df0 <ext_irq_register+0x2c>
	bool    found = false;
     dee:	2700      	movs	r7, #0
	if (NULL == cb) {
     df0:	b159      	cbz	r1, e0a <ext_irq_register+0x46>
	if (!found) {
     df2:	2f00      	cmp	r7, #0
     df4:	d13d      	bne.n	e72 <ext_irq_register+0xae>
     df6:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     df8:	2b03      	cmp	r3, #3
     dfa:	d813      	bhi.n	e24 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     dfc:	4a23      	ldr	r2, [pc, #140]	; (e8c <ext_irq_register+0xc8>)
     dfe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     e02:	b142      	cbz	r2, e16 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e04:	3301      	adds	r3, #1
     e06:	b2db      	uxtb	r3, r3
     e08:	e7f6      	b.n	df8 <ext_irq_register+0x34>
		if (!found) {
     e0a:	2f00      	cmp	r7, #0
     e0c:	d038      	beq.n	e80 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     e0e:	4620      	mov	r0, r4
     e10:	4b1f      	ldr	r3, [pc, #124]	; (e90 <ext_irq_register+0xcc>)
     e12:	4798      	blx	r3
     e14:	e032      	b.n	e7c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     e16:	4a1d      	ldr	r2, [pc, #116]	; (e8c <ext_irq_register+0xc8>)
     e18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     e1c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e20:	6054      	str	r4, [r2, #4]
				found           = true;
     e22:	2701      	movs	r7, #1
     e24:	2200      	movs	r2, #0
     e26:	e001      	b.n	e2c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     e28:	3201      	adds	r2, #1
     e2a:	b2d2      	uxtb	r2, r2
     e2c:	2a03      	cmp	r2, #3
     e2e:	d820      	bhi.n	e72 <ext_irq_register+0xae>
     e30:	2b03      	cmp	r3, #3
     e32:	d81e      	bhi.n	e72 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     e34:	469e      	mov	lr, r3
     e36:	4915      	ldr	r1, [pc, #84]	; (e8c <ext_irq_register+0xc8>)
     e38:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     e3c:	6840      	ldr	r0, [r0, #4]
     e3e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e42:	6849      	ldr	r1, [r1, #4]
     e44:	4288      	cmp	r0, r1
     e46:	d2ef      	bcs.n	e28 <ext_irq_register+0x64>
     e48:	f1b1 3fff 	cmp.w	r1, #4294967295
     e4c:	d0ec      	beq.n	e28 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     e4e:	4e0f      	ldr	r6, [pc, #60]	; (e8c <ext_irq_register+0xc8>)
     e50:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     e54:	e895 0003 	ldmia.w	r5, {r0, r1}
     e58:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     e5c:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     e60:	e896 0003 	ldmia.w	r6, {r0, r1}
     e64:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     e68:	e89d 0003 	ldmia.w	sp, {r0, r1}
     e6c:	e886 0003 	stmia.w	r6, {r0, r1}
     e70:	e7da      	b.n	e28 <ext_irq_register+0x64>
	if (!found) {
     e72:	b147      	cbz	r7, e86 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     e74:	2101      	movs	r1, #1
     e76:	4620      	mov	r0, r4
     e78:	4b05      	ldr	r3, [pc, #20]	; (e90 <ext_irq_register+0xcc>)
     e7a:	4798      	blx	r3
}
     e7c:	b003      	add	sp, #12
     e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     e80:	f06f 000c 	mvn.w	r0, #12
     e84:	e7fa      	b.n	e7c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     e86:	f06f 000c 	mvn.w	r0, #12
     e8a:	e7f7      	b.n	e7c <ext_irq_register+0xb8>
     e8c:	20000060 	.word	0x20000060
     e90:	00001abd 	.word	0x00001abd

00000e94 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     e94:	b538      	push	{r3, r4, r5, lr}
     e96:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     e98:	4605      	mov	r5, r0
     e9a:	b160      	cbz	r0, eb6 <mci_sync_init+0x22>
     e9c:	b149      	cbz	r1, eb2 <mci_sync_init+0x1e>
     e9e:	2001      	movs	r0, #1
     ea0:	2231      	movs	r2, #49	; 0x31
     ea2:	4906      	ldr	r1, [pc, #24]	; (ebc <mci_sync_init+0x28>)
     ea4:	4b06      	ldr	r3, [pc, #24]	; (ec0 <mci_sync_init+0x2c>)
     ea6:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     ea8:	4621      	mov	r1, r4
     eaa:	4628      	mov	r0, r5
     eac:	4b05      	ldr	r3, [pc, #20]	; (ec4 <mci_sync_init+0x30>)
     eae:	4798      	blx	r3
}
     eb0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     eb2:	2000      	movs	r0, #0
     eb4:	e7f4      	b.n	ea0 <mci_sync_init+0xc>
     eb6:	2000      	movs	r0, #0
     eb8:	e7f2      	b.n	ea0 <mci_sync_init+0xc>
     eba:	bf00      	nop
     ebc:	000046e8 	.word	0x000046e8
     ec0:	000012dd 	.word	0x000012dd
     ec4:	00001fe9 	.word	0x00001fe9

00000ec8 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	b083      	sub	sp, #12
     ecc:	460d      	mov	r5, r1
     ece:	4616      	mov	r6, r2
     ed0:	461f      	mov	r7, r3
	ASSERT(mci);
     ed2:	4604      	mov	r4, r0
     ed4:	2244      	movs	r2, #68	; 0x44
     ed6:	4908      	ldr	r1, [pc, #32]	; (ef8 <mci_sync_select_device+0x30>)
     ed8:	3000      	adds	r0, #0
     eda:	bf18      	it	ne
     edc:	2001      	movne	r0, #1
     ede:	4b07      	ldr	r3, [pc, #28]	; (efc <mci_sync_select_device+0x34>)
     ee0:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     ee2:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ee6:	9300      	str	r3, [sp, #0]
     ee8:	463b      	mov	r3, r7
     eea:	4632      	mov	r2, r6
     eec:	4629      	mov	r1, r5
     eee:	4620      	mov	r0, r4
     ef0:	4c03      	ldr	r4, [pc, #12]	; (f00 <mci_sync_select_device+0x38>)
     ef2:	47a0      	blx	r4
}
     ef4:	b003      	add	sp, #12
     ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef8:	000046e8 	.word	0x000046e8
     efc:	000012dd 	.word	0x000012dd
     f00:	00002051 	.word	0x00002051

00000f04 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     f04:	b538      	push	{r3, r4, r5, lr}
     f06:	460d      	mov	r5, r1
	ASSERT(mci);
     f08:	4604      	mov	r4, r0
     f0a:	224d      	movs	r2, #77	; 0x4d
     f0c:	4905      	ldr	r1, [pc, #20]	; (f24 <mci_sync_deselect_device+0x20>)
     f0e:	3000      	adds	r0, #0
     f10:	bf18      	it	ne
     f12:	2001      	movne	r0, #1
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <mci_sync_deselect_device+0x24>)
     f16:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     f18:	4629      	mov	r1, r5
     f1a:	4620      	mov	r0, r4
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <mci_sync_deselect_device+0x28>)
     f1e:	4798      	blx	r3
}
     f20:	bd38      	pop	{r3, r4, r5, pc}
     f22:	bf00      	nop
     f24:	000046e8 	.word	0x000046e8
     f28:	000012dd 	.word	0x000012dd
     f2c:	000020e5 	.word	0x000020e5

00000f30 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
     f30:	b570      	push	{r4, r5, r6, lr}
     f32:	460d      	mov	r5, r1
     f34:	4616      	mov	r6, r2
	ASSERT(mci);
     f36:	4604      	mov	r4, r0
     f38:	2272      	movs	r2, #114	; 0x72
     f3a:	4906      	ldr	r1, [pc, #24]	; (f54 <mci_sync_send_cmd+0x24>)
     f3c:	3000      	adds	r0, #0
     f3e:	bf18      	it	ne
     f40:	2001      	movne	r0, #1
     f42:	4b05      	ldr	r3, [pc, #20]	; (f58 <mci_sync_send_cmd+0x28>)
     f44:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
     f46:	4632      	mov	r2, r6
     f48:	4629      	mov	r1, r5
     f4a:	4620      	mov	r0, r4
     f4c:	4b03      	ldr	r3, [pc, #12]	; (f5c <mci_sync_send_cmd+0x2c>)
     f4e:	4798      	blx	r3
}
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	bf00      	nop
     f54:	000046e8 	.word	0x000046e8
     f58:	000012dd 	.word	0x000012dd
     f5c:	000020e9 	.word	0x000020e9

00000f60 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
     f60:	b510      	push	{r4, lr}
	ASSERT(mci);
     f62:	4604      	mov	r4, r0
     f64:	227b      	movs	r2, #123	; 0x7b
     f66:	4905      	ldr	r1, [pc, #20]	; (f7c <mci_sync_get_response+0x1c>)
     f68:	3000      	adds	r0, #0
     f6a:	bf18      	it	ne
     f6c:	2001      	movne	r0, #1
     f6e:	4b04      	ldr	r3, [pc, #16]	; (f80 <mci_sync_get_response+0x20>)
     f70:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
     f72:	4620      	mov	r0, r4
     f74:	4b03      	ldr	r3, [pc, #12]	; (f84 <mci_sync_get_response+0x24>)
     f76:	4798      	blx	r3
}
     f78:	bd10      	pop	{r4, pc}
     f7a:	bf00      	nop
     f7c:	000046e8 	.word	0x000046e8
     f80:	000012dd 	.word	0x000012dd
     f84:	00002141 	.word	0x00002141

00000f88 <mci_send_cmd_execute>:
	ASSERT(mci && response);
	_mci_sync_get_response_128(&mci->device, response);
}

bool mci_send_cmd_execute(Sdhc *mci, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
     f88:	b510      	push	{r4, lr}
	return _mci_send_cmd_execute(mci, cmdr, cmd, arg);
     f8a:	4c01      	ldr	r4, [pc, #4]	; (f90 <mci_send_cmd_execute+0x8>)
     f8c:	47a0      	blx	r4
}
     f8e:	bd10      	pop	{r4, pc}
     f90:	00001ef9 	.word	0x00001ef9

00000f94 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
     f94:	b5f0      	push	{r4, r5, r6, r7, lr}
     f96:	b083      	sub	sp, #12
     f98:	460d      	mov	r5, r1
     f9a:	4616      	mov	r6, r2
     f9c:	461f      	mov	r7, r3
	ASSERT(mci);
     f9e:	4604      	mov	r4, r0
     fa0:	2295      	movs	r2, #149	; 0x95
     fa2:	490a      	ldr	r1, [pc, #40]	; (fcc <mci_sync_adtc_start+0x38>)
     fa4:	3000      	adds	r0, #0
     fa6:	bf18      	it	ne
     fa8:	2001      	movne	r0, #1
     faa:	4b09      	ldr	r3, [pc, #36]	; (fd0 <mci_sync_adtc_start+0x3c>)
     fac:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
     fae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
     fb2:	9301      	str	r3, [sp, #4]
     fb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
     fb8:	9300      	str	r3, [sp, #0]
     fba:	463b      	mov	r3, r7
     fbc:	4632      	mov	r2, r6
     fbe:	4629      	mov	r1, r5
     fc0:	4620      	mov	r0, r4
     fc2:	4c04      	ldr	r4, [pc, #16]	; (fd4 <mci_sync_adtc_start+0x40>)
     fc4:	47a0      	blx	r4
}
     fc6:	b003      	add	sp, #12
     fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fca:	bf00      	nop
     fcc:	000046e8 	.word	0x000046e8
     fd0:	000012dd 	.word	0x000012dd
     fd4:	0000216d 	.word	0x0000216d

00000fd8 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
     fd8:	b570      	push	{r4, r5, r6, lr}
     fda:	460c      	mov	r4, r1
     fdc:	4616      	mov	r6, r2
	ASSERT(mci && src);
     fde:	4605      	mov	r5, r0
     fe0:	b168      	cbz	r0, ffe <mci_sync_start_write_blocks+0x26>
     fe2:	b151      	cbz	r1, ffa <mci_sync_start_write_blocks+0x22>
     fe4:	2001      	movs	r0, #1
     fe6:	22c3      	movs	r2, #195	; 0xc3
     fe8:	4906      	ldr	r1, [pc, #24]	; (1004 <mci_sync_start_write_blocks+0x2c>)
     fea:	4b07      	ldr	r3, [pc, #28]	; (1008 <mci_sync_start_write_blocks+0x30>)
     fec:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
     fee:	4632      	mov	r2, r6
     ff0:	4621      	mov	r1, r4
     ff2:	4628      	mov	r0, r5
     ff4:	4b05      	ldr	r3, [pc, #20]	; (100c <mci_sync_start_write_blocks+0x34>)
     ff6:	4798      	blx	r3
}
     ff8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
     ffa:	2000      	movs	r0, #0
     ffc:	e7f3      	b.n	fe6 <mci_sync_start_write_blocks+0xe>
     ffe:	2000      	movs	r0, #0
    1000:	e7f1      	b.n	fe6 <mci_sync_start_write_blocks+0xe>
    1002:	bf00      	nop
    1004:	000046e8 	.word	0x000046e8
    1008:	000012dd 	.word	0x000012dd
    100c:	000022d5 	.word	0x000022d5

00001010 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    1010:	b510      	push	{r4, lr}
	ASSERT(mci);
    1012:	4604      	mov	r4, r0
    1014:	22d5      	movs	r2, #213	; 0xd5
    1016:	4905      	ldr	r1, [pc, #20]	; (102c <mci_sync_wait_end_of_write_blocks+0x1c>)
    1018:	3000      	adds	r0, #0
    101a:	bf18      	it	ne
    101c:	2001      	movne	r0, #1
    101e:	4b04      	ldr	r3, [pc, #16]	; (1030 <mci_sync_wait_end_of_write_blocks+0x20>)
    1020:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    1022:	4620      	mov	r0, r4
    1024:	4b03      	ldr	r3, [pc, #12]	; (1034 <mci_sync_wait_end_of_write_blocks+0x24>)
    1026:	4798      	blx	r3
}
    1028:	bd10      	pop	{r4, pc}
    102a:	bf00      	nop
    102c:	000046e8 	.word	0x000046e8
    1030:	000012dd 	.word	0x000012dd
    1034:	00002355 	.word	0x00002355

00001038 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1038:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    103a:	6943      	ldr	r3, [r0, #20]
    103c:	b103      	cbz	r3, 1040 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    103e:	4798      	blx	r3
    1040:	bd08      	pop	{r3, pc}

00001042 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1042:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1044:	6983      	ldr	r3, [r0, #24]
    1046:	b103      	cbz	r3, 104a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1048:	4798      	blx	r3
    104a:	bd08      	pop	{r3, pc}

0000104c <pwm_init>:
{
    104c:	b538      	push	{r3, r4, r5, lr}
    104e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1050:	4604      	mov	r4, r0
    1052:	b188      	cbz	r0, 1078 <pwm_init+0x2c>
    1054:	b171      	cbz	r1, 1074 <pwm_init+0x28>
    1056:	2001      	movs	r0, #1
    1058:	2233      	movs	r2, #51	; 0x33
    105a:	4908      	ldr	r1, [pc, #32]	; (107c <pwm_init+0x30>)
    105c:	4b08      	ldr	r3, [pc, #32]	; (1080 <pwm_init+0x34>)
    105e:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1060:	4629      	mov	r1, r5
    1062:	4620      	mov	r0, r4
    1064:	4b07      	ldr	r3, [pc, #28]	; (1084 <pwm_init+0x38>)
    1066:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1068:	4b07      	ldr	r3, [pc, #28]	; (1088 <pwm_init+0x3c>)
    106a:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    106c:	4b07      	ldr	r3, [pc, #28]	; (108c <pwm_init+0x40>)
    106e:	6063      	str	r3, [r4, #4]
}
    1070:	2000      	movs	r0, #0
    1072:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1074:	2000      	movs	r0, #0
    1076:	e7ef      	b.n	1058 <pwm_init+0xc>
    1078:	2000      	movs	r0, #0
    107a:	e7ed      	b.n	1058 <pwm_init+0xc>
    107c:	00004704 	.word	0x00004704
    1080:	000012dd 	.word	0x000012dd
    1084:	00002699 	.word	0x00002699
    1088:	00001039 	.word	0x00001039
    108c:	00001043 	.word	0x00001043

00001090 <pwm_enable>:
{
    1090:	b510      	push	{r4, lr}
	ASSERT(descr);
    1092:	4604      	mov	r4, r0
    1094:	224a      	movs	r2, #74	; 0x4a
    1096:	4909      	ldr	r1, [pc, #36]	; (10bc <pwm_enable+0x2c>)
    1098:	3000      	adds	r0, #0
    109a:	bf18      	it	ne
    109c:	2001      	movne	r0, #1
    109e:	4b08      	ldr	r3, [pc, #32]	; (10c0 <pwm_enable+0x30>)
    10a0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    10a2:	4620      	mov	r0, r4
    10a4:	4b07      	ldr	r3, [pc, #28]	; (10c4 <pwm_enable+0x34>)
    10a6:	4798      	blx	r3
    10a8:	b920      	cbnz	r0, 10b4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    10aa:	4620      	mov	r0, r4
    10ac:	4b06      	ldr	r3, [pc, #24]	; (10c8 <pwm_enable+0x38>)
    10ae:	4798      	blx	r3
	return ERR_NONE;
    10b0:	2000      	movs	r0, #0
    10b2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    10b4:	f06f 0010 	mvn.w	r0, #16
}
    10b8:	bd10      	pop	{r4, pc}
    10ba:	bf00      	nop
    10bc:	00004704 	.word	0x00004704
    10c0:	000012dd 	.word	0x000012dd
    10c4:	000028d3 	.word	0x000028d3
    10c8:	0000282d 	.word	0x0000282d

000010cc <pwm_set_parameters>:
{
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	460d      	mov	r5, r1
    10d0:	4616      	mov	r6, r2
	ASSERT(descr);
    10d2:	4604      	mov	r4, r0
    10d4:	227c      	movs	r2, #124	; 0x7c
    10d6:	4906      	ldr	r1, [pc, #24]	; (10f0 <pwm_set_parameters+0x24>)
    10d8:	3000      	adds	r0, #0
    10da:	bf18      	it	ne
    10dc:	2001      	movne	r0, #1
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <pwm_set_parameters+0x28>)
    10e0:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    10e2:	4632      	mov	r2, r6
    10e4:	4629      	mov	r1, r5
    10e6:	4620      	mov	r0, r4
    10e8:	4b03      	ldr	r3, [pc, #12]	; (10f8 <pwm_set_parameters+0x2c>)
    10ea:	4798      	blx	r3
}
    10ec:	2000      	movs	r0, #0
    10ee:	bd70      	pop	{r4, r5, r6, pc}
    10f0:	00004704 	.word	0x00004704
    10f4:	000012dd 	.word	0x000012dd
    10f8:	00002841 	.word	0x00002841

000010fc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    10fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    10fe:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1100:	b117      	cbz	r7, 1108 <timer_add_timer_task+0xc>
    1102:	463c      	mov	r4, r7
    1104:	2600      	movs	r6, #0
    1106:	e00b      	b.n	1120 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    1108:	4b0e      	ldr	r3, [pc, #56]	; (1144 <timer_add_timer_task+0x48>)
    110a:	4798      	blx	r3
		return;
    110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    110e:	68a5      	ldr	r5, [r4, #8]
    1110:	442b      	add	r3, r5
    1112:	1a9b      	subs	r3, r3, r2
    1114:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    1116:	688d      	ldr	r5, [r1, #8]
    1118:	42ab      	cmp	r3, r5
    111a:	d209      	bcs.n	1130 <timer_add_timer_task+0x34>
			break;
		prev = it;
    111c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    111e:	6824      	ldr	r4, [r4, #0]
    1120:	b134      	cbz	r4, 1130 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    1122:	6863      	ldr	r3, [r4, #4]
    1124:	4293      	cmp	r3, r2
    1126:	d8f2      	bhi.n	110e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    1128:	68a5      	ldr	r5, [r4, #8]
    112a:	1a9b      	subs	r3, r3, r2
    112c:	442b      	add	r3, r5
    112e:	e7f2      	b.n	1116 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    1130:	42bc      	cmp	r4, r7
    1132:	d003      	beq.n	113c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1134:	4630      	mov	r0, r6
    1136:	4b04      	ldr	r3, [pc, #16]	; (1148 <timer_add_timer_task+0x4c>)
    1138:	4798      	blx	r3
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    113c:	4b01      	ldr	r3, [pc, #4]	; (1144 <timer_add_timer_task+0x48>)
    113e:	4798      	blx	r3
    1140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1142:	bf00      	nop
    1144:	000012f9 	.word	0x000012f9
    1148:	00001325 	.word	0x00001325

0000114c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1150:	6906      	ldr	r6, [r0, #16]
    1152:	3601      	adds	r6, #1
    1154:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1156:	7e03      	ldrb	r3, [r0, #24]
    1158:	f013 0f01 	tst.w	r3, #1
    115c:	d105      	bne.n	116a <timer_process_counted+0x1e>
    115e:	7e03      	ldrb	r3, [r0, #24]
    1160:	f013 0f02 	tst.w	r3, #2
    1164:	d101      	bne.n	116a <timer_process_counted+0x1e>
    1166:	4605      	mov	r5, r0
    1168:	e009      	b.n	117e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    116a:	7e03      	ldrb	r3, [r0, #24]
    116c:	f043 0302 	orr.w	r3, r3, #2
    1170:	7603      	strb	r3, [r0, #24]
		return;
    1172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1174:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1176:	68e3      	ldr	r3, [r4, #12]
    1178:	4620      	mov	r0, r4
    117a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    117c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    117e:	b19c      	cbz	r4, 11a8 <timer_process_counted+0x5c>
    1180:	6863      	ldr	r3, [r4, #4]
    1182:	1af3      	subs	r3, r6, r3
    1184:	68a2      	ldr	r2, [r4, #8]
    1186:	4293      	cmp	r3, r2
    1188:	d30e      	bcc.n	11a8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    118a:	f105 0714 	add.w	r7, r5, #20
    118e:	4638      	mov	r0, r7
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <timer_process_counted+0x60>)
    1192:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1194:	7c23      	ldrb	r3, [r4, #16]
    1196:	2b01      	cmp	r3, #1
    1198:	d1ec      	bne.n	1174 <timer_process_counted+0x28>
			tmp->time_label = time;
    119a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    119c:	4632      	mov	r2, r6
    119e:	4621      	mov	r1, r4
    11a0:	4638      	mov	r0, r7
    11a2:	4b03      	ldr	r3, [pc, #12]	; (11b0 <timer_process_counted+0x64>)
    11a4:	4798      	blx	r3
    11a6:	e7e5      	b.n	1174 <timer_process_counted+0x28>
    11a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11aa:	bf00      	nop
    11ac:	0000132d 	.word	0x0000132d
    11b0:	000010fd 	.word	0x000010fd

000011b4 <timer_init>:
{
    11b4:	b538      	push	{r3, r4, r5, lr}
    11b6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11b8:	4604      	mov	r4, r0
    11ba:	b180      	cbz	r0, 11de <timer_init+0x2a>
    11bc:	b169      	cbz	r1, 11da <timer_init+0x26>
    11be:	2001      	movs	r0, #1
    11c0:	223b      	movs	r2, #59	; 0x3b
    11c2:	4908      	ldr	r1, [pc, #32]	; (11e4 <timer_init+0x30>)
    11c4:	4b08      	ldr	r3, [pc, #32]	; (11e8 <timer_init+0x34>)
    11c6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    11c8:	4629      	mov	r1, r5
    11ca:	4620      	mov	r0, r4
    11cc:	4b07      	ldr	r3, [pc, #28]	; (11ec <timer_init+0x38>)
    11ce:	4798      	blx	r3
	descr->time                           = 0;
    11d0:	2000      	movs	r0, #0
    11d2:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <timer_init+0x3c>)
    11d6:	6023      	str	r3, [r4, #0]
}
    11d8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    11da:	2000      	movs	r0, #0
    11dc:	e7f0      	b.n	11c0 <timer_init+0xc>
    11de:	2000      	movs	r0, #0
    11e0:	e7ee      	b.n	11c0 <timer_init+0xc>
    11e2:	bf00      	nop
    11e4:	0000471c 	.word	0x0000471c
    11e8:	000012dd 	.word	0x000012dd
    11ec:	000024c5 	.word	0x000024c5
    11f0:	0000114d 	.word	0x0000114d

000011f4 <timer_start>:
{
    11f4:	b510      	push	{r4, lr}
	ASSERT(descr);
    11f6:	4604      	mov	r4, r0
    11f8:	2253      	movs	r2, #83	; 0x53
    11fa:	4909      	ldr	r1, [pc, #36]	; (1220 <timer_start+0x2c>)
    11fc:	3000      	adds	r0, #0
    11fe:	bf18      	it	ne
    1200:	2001      	movne	r0, #1
    1202:	4b08      	ldr	r3, [pc, #32]	; (1224 <timer_start+0x30>)
    1204:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1206:	4620      	mov	r0, r4
    1208:	4b07      	ldr	r3, [pc, #28]	; (1228 <timer_start+0x34>)
    120a:	4798      	blx	r3
    120c:	b920      	cbnz	r0, 1218 <timer_start+0x24>
	_timer_start(&descr->device);
    120e:	4620      	mov	r0, r4
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <timer_start+0x38>)
    1212:	4798      	blx	r3
	return ERR_NONE;
    1214:	2000      	movs	r0, #0
    1216:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1218:	f06f 0010 	mvn.w	r0, #16
}
    121c:	bd10      	pop	{r4, pc}
    121e:	bf00      	nop
    1220:	0000471c 	.word	0x0000471c
    1224:	000012dd 	.word	0x000012dd
    1228:	000028c1 	.word	0x000028c1
    122c:	00002819 	.word	0x00002819

00001230 <timer_add_task>:
{
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	b082      	sub	sp, #8
    1234:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1236:	4604      	mov	r4, r0
    1238:	b320      	cbz	r0, 1284 <timer_add_task+0x54>
    123a:	b309      	cbz	r1, 1280 <timer_add_task+0x50>
    123c:	2001      	movs	r0, #1
    123e:	227a      	movs	r2, #122	; 0x7a
    1240:	491f      	ldr	r1, [pc, #124]	; (12c0 <timer_add_task+0x90>)
    1242:	4b20      	ldr	r3, [pc, #128]	; (12c4 <timer_add_task+0x94>)
    1244:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1246:	7e23      	ldrb	r3, [r4, #24]
    1248:	f043 0301 	orr.w	r3, r3, #1
    124c:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    124e:	f104 0614 	add.w	r6, r4, #20
    1252:	4629      	mov	r1, r5
    1254:	4630      	mov	r0, r6
    1256:	4b1c      	ldr	r3, [pc, #112]	; (12c8 <timer_add_task+0x98>)
    1258:	4798      	blx	r3
    125a:	b9a8      	cbnz	r0, 1288 <timer_add_task+0x58>
	task->time_label = descr->time;
    125c:	6923      	ldr	r3, [r4, #16]
    125e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1260:	6922      	ldr	r2, [r4, #16]
    1262:	4629      	mov	r1, r5
    1264:	4630      	mov	r0, r6
    1266:	4b19      	ldr	r3, [pc, #100]	; (12cc <timer_add_task+0x9c>)
    1268:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    126a:	7e23      	ldrb	r3, [r4, #24]
    126c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1270:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1272:	7e23      	ldrb	r3, [r4, #24]
    1274:	f013 0f02 	tst.w	r3, #2
    1278:	d112      	bne.n	12a0 <timer_add_task+0x70>
	return ERR_NONE;
    127a:	2000      	movs	r0, #0
}
    127c:	b002      	add	sp, #8
    127e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1280:	2000      	movs	r0, #0
    1282:	e7dc      	b.n	123e <timer_add_task+0xe>
    1284:	2000      	movs	r0, #0
    1286:	e7da      	b.n	123e <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1288:	7e23      	ldrb	r3, [r4, #24]
    128a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    128e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1290:	227f      	movs	r2, #127	; 0x7f
    1292:	490b      	ldr	r1, [pc, #44]	; (12c0 <timer_add_task+0x90>)
    1294:	2000      	movs	r0, #0
    1296:	4b0b      	ldr	r3, [pc, #44]	; (12c4 <timer_add_task+0x94>)
    1298:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    129a:	f06f 0011 	mvn.w	r0, #17
    129e:	e7ed      	b.n	127c <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    12a0:	a801      	add	r0, sp, #4
    12a2:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <timer_add_task+0xa0>)
    12a4:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    12a6:	7e23      	ldrb	r3, [r4, #24]
    12a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    12ac:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    12ae:	4620      	mov	r0, r4
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <timer_add_task+0xa4>)
    12b2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    12b4:	a801      	add	r0, sp, #4
    12b6:	4b08      	ldr	r3, [pc, #32]	; (12d8 <timer_add_task+0xa8>)
    12b8:	4798      	blx	r3
	return ERR_NONE;
    12ba:	2000      	movs	r0, #0
    12bc:	e7de      	b.n	127c <timer_add_task+0x4c>
    12be:	bf00      	nop
    12c0:	0000471c 	.word	0x0000471c
    12c4:	000012dd 	.word	0x000012dd
    12c8:	000012e3 	.word	0x000012e3
    12cc:	000010fd 	.word	0x000010fd
    12d0:	00000c99 	.word	0x00000c99
    12d4:	000028ed 	.word	0x000028ed
    12d8:	00000ca7 	.word	0x00000ca7

000012dc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    12dc:	b900      	cbnz	r0, 12e0 <assert+0x4>
		__asm("BKPT #0");
    12de:	be00      	bkpt	0x0000
    12e0:	4770      	bx	lr

000012e2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    12e2:	6803      	ldr	r3, [r0, #0]
    12e4:	b11b      	cbz	r3, 12ee <is_list_element+0xc>
		if (it == element) {
    12e6:	428b      	cmp	r3, r1
    12e8:	d003      	beq.n	12f2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	e7fa      	b.n	12e4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    12ee:	2000      	movs	r0, #0
    12f0:	4770      	bx	lr
			return true;
    12f2:	2001      	movs	r0, #1
}
    12f4:	4770      	bx	lr
	...

000012f8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    12f8:	b538      	push	{r3, r4, r5, lr}
    12fa:	4604      	mov	r4, r0
    12fc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    12fe:	4b06      	ldr	r3, [pc, #24]	; (1318 <list_insert_as_head+0x20>)
    1300:	4798      	blx	r3
    1302:	f080 0001 	eor.w	r0, r0, #1
    1306:	2239      	movs	r2, #57	; 0x39
    1308:	4904      	ldr	r1, [pc, #16]	; (131c <list_insert_as_head+0x24>)
    130a:	b2c0      	uxtb	r0, r0
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <list_insert_as_head+0x28>)
    130e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1310:	6823      	ldr	r3, [r4, #0]
    1312:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1314:	6025      	str	r5, [r4, #0]
    1316:	bd38      	pop	{r3, r4, r5, pc}
    1318:	000012e3 	.word	0x000012e3
    131c:	00004734 	.word	0x00004734
    1320:	000012dd 	.word	0x000012dd

00001324 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1324:	6803      	ldr	r3, [r0, #0]
    1326:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1328:	6001      	str	r1, [r0, #0]
    132a:	4770      	bx	lr

0000132c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    132c:	6803      	ldr	r3, [r0, #0]
    132e:	b11b      	cbz	r3, 1338 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1330:	681a      	ldr	r2, [r3, #0]
    1332:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1334:	4618      	mov	r0, r3
    1336:	4770      	bx	lr
	}

	return NULL;
    1338:	2000      	movs	r0, #0
}
    133a:	4770      	bx	lr

0000133c <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    133c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1340:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    1344:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1348:	4770      	bx	lr
	...

0000134c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    134c:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    134e:	4b60      	ldr	r3, [pc, #384]	; (14d0 <_adc_init+0x184>)
    1350:	4298      	cmp	r0, r3
    1352:	f000 809c 	beq.w	148e <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    1356:	4b5f      	ldr	r3, [pc, #380]	; (14d4 <_adc_init+0x188>)
    1358:	4298      	cmp	r0, r3
    135a:	f000 80a8 	beq.w	14ae <_adc_init+0x162>
	uint16_t calib_reg = 0;
    135e:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1360:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1362:	f013 0f01 	tst.w	r3, #1
    1366:	d11b      	bne.n	13a0 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1368:	6b03      	ldr	r3, [r0, #48]	; 0x30
    136a:	f013 0f03 	tst.w	r3, #3
    136e:	d1fb      	bne.n	1368 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1370:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1372:	f013 0f02 	tst.w	r3, #2
    1376:	d00d      	beq.n	1394 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1378:	8803      	ldrh	r3, [r0, #0]
    137a:	b29b      	uxth	r3, r3
    137c:	f023 0302 	bic.w	r3, r3, #2
    1380:	b29b      	uxth	r3, r3
    1382:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1384:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1386:	f013 0f03 	tst.w	r3, #3
    138a:	d1fb      	bne.n	1384 <_adc_init+0x38>
    138c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    138e:	f013 0f02 	tst.w	r3, #2
    1392:	d1fb      	bne.n	138c <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1394:	2301      	movs	r3, #1
    1396:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1398:	6b03      	ldr	r3, [r0, #48]	; 0x30
    139a:	f013 0f03 	tst.w	r3, #3
    139e:	d1fb      	bne.n	1398 <_adc_init+0x4c>
    13a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13a2:	f013 0f01 	tst.w	r3, #1
    13a6:	d1fb      	bne.n	13a0 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    13a8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    13ac:	2316      	movs	r3, #22
    13ae:	4a4a      	ldr	r2, [pc, #296]	; (14d8 <_adc_init+0x18c>)
    13b0:	fb03 2301 	mla	r3, r3, r1, r2
    13b4:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    13b6:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13be:	2b00      	cmp	r3, #0
    13c0:	d1fa      	bne.n	13b8 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    13c2:	2316      	movs	r3, #22
    13c4:	4a44      	ldr	r2, [pc, #272]	; (14d8 <_adc_init+0x18c>)
    13c6:	fb03 2301 	mla	r3, r3, r1, r2
    13ca:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    13cc:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13d4:	2b00      	cmp	r3, #0
    13d6:	d1fa      	bne.n	13ce <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    13d8:	2316      	movs	r3, #22
    13da:	4a3f      	ldr	r2, [pc, #252]	; (14d8 <_adc_init+0x18c>)
    13dc:	fb03 2301 	mla	r3, r3, r1, r2
    13e0:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    13e2:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    13e4:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    13e6:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    13ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    13ee:	2b00      	cmp	r3, #0
    13f0:	d1fa      	bne.n	13e8 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    13f2:	2316      	movs	r3, #22
    13f4:	4a38      	ldr	r2, [pc, #224]	; (14d8 <_adc_init+0x18c>)
    13f6:	fb03 2301 	mla	r3, r3, r1, r2
    13fa:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    13fc:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    13fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1400:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1404:	2b00      	cmp	r3, #0
    1406:	d1fa      	bne.n	13fe <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1408:	2316      	movs	r3, #22
    140a:	4a33      	ldr	r2, [pc, #204]	; (14d8 <_adc_init+0x18c>)
    140c:	fb03 2301 	mla	r3, r3, r1, r2
    1410:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    1412:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1414:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1416:	f3c3 030b 	ubfx	r3, r3, #0, #12
    141a:	2b00      	cmp	r3, #0
    141c:	d1fa      	bne.n	1414 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    141e:	2316      	movs	r3, #22
    1420:	4a2d      	ldr	r2, [pc, #180]	; (14d8 <_adc_init+0x18c>)
    1422:	fb03 2301 	mla	r3, r3, r1, r2
    1426:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    1428:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    142a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    142c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1430:	d1fb      	bne.n	142a <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1432:	2316      	movs	r3, #22
    1434:	4a28      	ldr	r2, [pc, #160]	; (14d8 <_adc_init+0x18c>)
    1436:	fb03 2301 	mla	r3, r3, r1, r2
    143a:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    143c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    143e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1440:	f413 7f80 	tst.w	r3, #256	; 0x100
    1444:	d1fb      	bne.n	143e <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1446:	2316      	movs	r3, #22
    1448:	4a23      	ldr	r2, [pc, #140]	; (14d8 <_adc_init+0x18c>)
    144a:	fb03 2301 	mla	r3, r3, r1, r2
    144e:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    1450:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1452:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1454:	f413 7f00 	tst.w	r3, #512	; 0x200
    1458:	d1fb      	bne.n	1452 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    145a:	2316      	movs	r3, #22
    145c:	4a1e      	ldr	r2, [pc, #120]	; (14d8 <_adc_init+0x18c>)
    145e:	fb03 2301 	mla	r3, r3, r1, r2
    1462:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1464:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1466:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1468:	f413 6f80 	tst.w	r3, #1024	; 0x400
    146c:	d1fb      	bne.n	1466 <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    146e:	2216      	movs	r2, #22
    1470:	4b19      	ldr	r3, [pc, #100]	; (14d8 <_adc_init+0x18c>)
    1472:	fb02 3101 	mla	r1, r2, r1, r3
    1476:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1478:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    147a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    147c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    147e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1480:	f013 0f03 	tst.w	r3, #3
    1484:	d1fb      	bne.n	147e <_adc_init+0x132>

	return ERR_NONE;
}
    1486:	2000      	movs	r0, #0
    1488:	f85d 4b04 	ldr.w	r4, [sp], #4
    148c:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    148e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1492:	681b      	ldr	r3, [r3, #0]
    1494:	095a      	lsrs	r2, r3, #5
    1496:	0212      	lsls	r2, r2, #8
    1498:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    149c:	0a1c      	lsrs	r4, r3, #8
    149e:	0124      	lsls	r4, r4, #4
    14a0:	f004 0470 	and.w	r4, r4, #112	; 0x70
    14a4:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    14a6:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    14aa:	431a      	orrs	r2, r3
    14ac:	e758      	b.n	1360 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    14ae:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	0cda      	lsrs	r2, r3, #19
    14b6:	0212      	lsls	r2, r2, #8
    14b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    14bc:	0d9c      	lsrs	r4, r3, #22
    14be:	0124      	lsls	r4, r4, #4
    14c0:	f004 0470 	and.w	r4, r4, #112	; 0x70
    14c4:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    14c6:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    14ca:	431a      	orrs	r2, r3
    14cc:	e748      	b.n	1360 <_adc_init+0x14>
    14ce:	bf00      	nop
    14d0:	43001c00 	.word	0x43001c00
    14d4:	43002000 	.word	0x43002000
    14d8:	00004754 	.word	0x00004754

000014dc <_adc_get_regs>:
{
    14dc:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    14de:	4b0b      	ldr	r3, [pc, #44]	; (150c <_adc_get_regs+0x30>)
    14e0:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    14e2:	2300      	movs	r3, #0
    14e4:	b13b      	cbz	r3, 14f6 <_adc_get_regs+0x1a>
	ASSERT(false);
    14e6:	2288      	movs	r2, #136	; 0x88
    14e8:	4909      	ldr	r1, [pc, #36]	; (1510 <_adc_get_regs+0x34>)
    14ea:	2000      	movs	r0, #0
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <_adc_get_regs+0x38>)
    14ee:	4798      	blx	r3
	return 0;
    14f0:	2300      	movs	r3, #0
}
    14f2:	4618      	mov	r0, r3
    14f4:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    14f6:	2216      	movs	r2, #22
    14f8:	fb02 f203 	mul.w	r2, r2, r3
    14fc:	4906      	ldr	r1, [pc, #24]	; (1518 <_adc_get_regs+0x3c>)
    14fe:	5c8a      	ldrb	r2, [r1, r2]
    1500:	4290      	cmp	r0, r2
    1502:	d0f6      	beq.n	14f2 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1504:	3301      	adds	r3, #1
    1506:	b2db      	uxtb	r3, r3
    1508:	e7ec      	b.n	14e4 <_adc_get_regs+0x8>
    150a:	bf00      	nop
    150c:	0000133d 	.word	0x0000133d
    1510:	0000476c 	.word	0x0000476c
    1514:	000012dd 	.word	0x000012dd
    1518:	00004754 	.word	0x00004754

0000151c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    151c:	b538      	push	{r3, r4, r5, lr}
    151e:	460c      	mov	r4, r1
	ASSERT(device);
    1520:	4605      	mov	r5, r0
    1522:	22d9      	movs	r2, #217	; 0xd9
    1524:	4907      	ldr	r1, [pc, #28]	; (1544 <_adc_sync_init+0x28>)
    1526:	3000      	adds	r0, #0
    1528:	bf18      	it	ne
    152a:	2001      	movne	r0, #1
    152c:	4b06      	ldr	r3, [pc, #24]	; (1548 <_adc_sync_init+0x2c>)
    152e:	4798      	blx	r3

	device->hw = hw;
    1530:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1532:	4620      	mov	r0, r4
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <_adc_sync_init+0x30>)
    1536:	4798      	blx	r3
    1538:	4601      	mov	r1, r0
    153a:	4620      	mov	r0, r4
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <_adc_sync_init+0x34>)
    153e:	4798      	blx	r3
}
    1540:	bd38      	pop	{r3, r4, r5, pc}
    1542:	bf00      	nop
    1544:	0000476c 	.word	0x0000476c
    1548:	000012dd 	.word	0x000012dd
    154c:	000014dd 	.word	0x000014dd
    1550:	0000134d 	.word	0x0000134d

00001554 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1554:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1556:	8813      	ldrh	r3, [r2, #0]
    1558:	b29b      	uxth	r3, r3
    155a:	f043 0302 	orr.w	r3, r3, #2
    155e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1560:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1562:	f013 0f03 	tst.w	r3, #3
    1566:	d1fb      	bne.n	1560 <_adc_sync_enable_channel+0xc>
}
    1568:	4770      	bx	lr

0000156a <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    156a:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    156c:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    156e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1572:	2b03      	cmp	r3, #3
    1574:	d001      	beq.n	157a <_adc_sync_get_data_size+0x10>
    1576:	2002      	movs	r0, #2
}
    1578:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr

0000157e <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    157e:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1580:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    1584:	f000 0001 	and.w	r0, r0, #1
    1588:	4770      	bx	lr

0000158a <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    158a:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    158c:	7d13      	ldrb	r3, [r2, #20]
    158e:	f043 0302 	orr.w	r3, r3, #2
    1592:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1594:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1596:	f3c3 030b 	ubfx	r3, r3, #0, #12
    159a:	2b00      	cmp	r3, #0
    159c:	d1fa      	bne.n	1594 <_adc_sync_convert+0xa>
}
    159e:	4770      	bx	lr

000015a0 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    15a0:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    15a2:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    15a6:	b280      	uxth	r0, r0
    15a8:	4770      	bx	lr
	...

000015ac <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15ac:	0943      	lsrs	r3, r0, #5
    15ae:	f000 001f 	and.w	r0, r0, #31
    15b2:	2201      	movs	r2, #1
    15b4:	fa02 f000 	lsl.w	r0, r2, r0
    15b8:	3340      	adds	r3, #64	; 0x40
    15ba:	4a02      	ldr	r2, [pc, #8]	; (15c4 <_irq_set+0x18>)
    15bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    15c0:	4770      	bx	lr
    15c2:	bf00      	nop
    15c4:	e000e100 	.word	0xe000e100

000015c8 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    15c8:	f44f 7316 	mov.w	r3, #600	; 0x258
    15cc:	fb03 f000 	mul.w	r0, r3, r0
    15d0:	3801      	subs	r0, #1
    15d2:	4b03      	ldr	r3, [pc, #12]	; (15e0 <_get_cycles_for_us+0x18>)
    15d4:	fba3 3000 	umull	r3, r0, r3, r0
    15d8:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    15da:	3001      	adds	r0, #1
    15dc:	4770      	bx	lr
    15de:	bf00      	nop
    15e0:	cccccccd 	.word	0xcccccccd

000015e4 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    15e4:	f44f 7316 	mov.w	r3, #600	; 0x258
    15e8:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    15ec:	2364      	movs	r3, #100	; 0x64
    15ee:	fb03 f000 	mul.w	r0, r3, r0
    15f2:	4770      	bx	lr

000015f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    15f4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    15f6:	4a0d      	ldr	r2, [pc, #52]	; (162c <_init_chip+0x38>)
    15f8:	8813      	ldrh	r3, [r2, #0]
    15fa:	b29b      	uxth	r3, r3
    15fc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    15fe:	4b0c      	ldr	r3, [pc, #48]	; (1630 <_init_chip+0x3c>)
    1600:	4798      	blx	r3
	_oscctrl_init_sources();
    1602:	4b0c      	ldr	r3, [pc, #48]	; (1634 <_init_chip+0x40>)
    1604:	4798      	blx	r3
	_mclk_init();
    1606:	4b0c      	ldr	r3, [pc, #48]	; (1638 <_init_chip+0x44>)
    1608:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    160a:	200c      	movs	r0, #12
    160c:	4c0b      	ldr	r4, [pc, #44]	; (163c <_init_chip+0x48>)
    160e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1610:	4b0b      	ldr	r3, [pc, #44]	; (1640 <_init_chip+0x4c>)
    1612:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1614:	f640 70f3 	movw	r0, #4083	; 0xff3
    1618:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    161a:	4a0a      	ldr	r2, [pc, #40]	; (1644 <_init_chip+0x50>)
    161c:	6913      	ldr	r3, [r2, #16]
    161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1622:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <_init_chip+0x54>)
    1626:	4798      	blx	r3
    1628:	bd10      	pop	{r4, pc}
    162a:	bf00      	nop
    162c:	41004000 	.word	0x41004000
    1630:	00001bc9 	.word	0x00001bc9
    1634:	00001be9 	.word	0x00001be9
    1638:	00001bbd 	.word	0x00001bbd
    163c:	00001b45 	.word	0x00001b45
    1640:	00001bed 	.word	0x00001bed
    1644:	40000800 	.word	0x40000800
    1648:	000016b5 	.word	0x000016b5

0000164c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    164c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    164e:	4a17      	ldr	r2, [pc, #92]	; (16ac <_dmac_handler+0x60>)
    1650:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1652:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1656:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    165a:	0088      	lsls	r0, r1, #2
    165c:	4914      	ldr	r1, [pc, #80]	; (16b0 <_dmac_handler+0x64>)
    165e:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1660:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1662:	f412 7f80 	tst.w	r2, #256	; 0x100
    1666:	d105      	bne.n	1674 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1668:	4a10      	ldr	r2, [pc, #64]	; (16ac <_dmac_handler+0x60>)
    166a:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    166c:	f412 7f00 	tst.w	r2, #512	; 0x200
    1670:	d10b      	bne.n	168a <_dmac_handler+0x3e>
    1672:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1674:	011a      	lsls	r2, r3, #4
    1676:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    167a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    167e:	2101      	movs	r1, #1
    1680:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1684:	6843      	ldr	r3, [r0, #4]
    1686:	4798      	blx	r3
    1688:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    168a:	011a      	lsls	r2, r3, #4
    168c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1690:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1694:	2102      	movs	r1, #2
    1696:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    169a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    169e:	fa03 f201 	lsl.w	r2, r3, r1
    16a2:	4b03      	ldr	r3, [pc, #12]	; (16b0 <_dmac_handler+0x64>)
    16a4:	589b      	ldr	r3, [r3, r2]
    16a6:	4798      	blx	r3
	}
}
    16a8:	e7e3      	b.n	1672 <_dmac_handler+0x26>
    16aa:	bf00      	nop
    16ac:	4100a000 	.word	0x4100a000
    16b0:	20000080 	.word	0x20000080

000016b4 <_dma_init>:
{
    16b4:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    16b6:	4a3c      	ldr	r2, [pc, #240]	; (17a8 <_dma_init+0xf4>)
    16b8:	8813      	ldrh	r3, [r2, #0]
    16ba:	b29b      	uxth	r3, r3
    16bc:	f023 0302 	bic.w	r3, r3, #2
    16c0:	b29b      	uxth	r3, r3
    16c2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    16c4:	8853      	ldrh	r3, [r2, #2]
    16c6:	b29b      	uxth	r3, r3
    16c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    16cc:	b29b      	uxth	r3, r3
    16ce:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    16d0:	8813      	ldrh	r3, [r2, #0]
    16d2:	b29b      	uxth	r3, r3
    16d4:	f043 0301 	orr.w	r3, r3, #1
    16d8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    16da:	4b33      	ldr	r3, [pc, #204]	; (17a8 <_dma_init+0xf4>)
    16dc:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    16de:	f013 0f01 	tst.w	r3, #1
    16e2:	d1fa      	bne.n	16da <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    16e4:	4a30      	ldr	r2, [pc, #192]	; (17a8 <_dma_init+0xf4>)
    16e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    16ea:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    16ec:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    16ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    16f2:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    16f4:	2300      	movs	r3, #0
    16f6:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    16f8:	492c      	ldr	r1, [pc, #176]	; (17ac <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    16fa:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    16fc:	492c      	ldr	r1, [pc, #176]	; (17b0 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    16fe:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1700:	e016      	b.n	1730 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1702:	4a2c      	ldr	r2, [pc, #176]	; (17b4 <_dma_init+0x100>)
    1704:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1708:	4c27      	ldr	r4, [pc, #156]	; (17a8 <_dma_init+0xf4>)
    170a:	1d19      	adds	r1, r3, #4
    170c:	0109      	lsls	r1, r1, #4
    170e:	1860      	adds	r0, r4, r1
    1710:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1712:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1716:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1718:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    171a:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    171c:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    171e:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1720:	4922      	ldr	r1, [pc, #136]	; (17ac <_dma_init+0xf8>)
    1722:	011a      	lsls	r2, r3, #4
    1724:	1888      	adds	r0, r1, r2
    1726:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1728:	2200      	movs	r2, #0
    172a:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    172c:	3301      	adds	r3, #1
    172e:	b2db      	uxtb	r3, r3
    1730:	2b1f      	cmp	r3, #31
    1732:	d9e6      	bls.n	1702 <_dma_init+0x4e>
    1734:	2300      	movs	r3, #0
    1736:	e00a      	b.n	174e <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1738:	f103 011f 	add.w	r1, r3, #31
    173c:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    173e:	2a00      	cmp	r2, #0
    1740:	da10      	bge.n	1764 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1742:	2a00      	cmp	r2, #0
    1744:	da1c      	bge.n	1780 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1746:	2a00      	cmp	r2, #0
    1748:	da24      	bge.n	1794 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    174a:	3301      	adds	r3, #1
    174c:	b2db      	uxtb	r3, r3
    174e:	2b04      	cmp	r3, #4
    1750:	d9f2      	bls.n	1738 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1752:	4a15      	ldr	r2, [pc, #84]	; (17a8 <_dma_init+0xf4>)
    1754:	8813      	ldrh	r3, [r2, #0]
    1756:	b29b      	uxth	r3, r3
    1758:	f043 0302 	orr.w	r3, r3, #2
    175c:	8013      	strh	r3, [r2, #0]
}
    175e:	2000      	movs	r0, #0
    1760:	bc30      	pop	{r4, r5}
    1762:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1764:	0950      	lsrs	r0, r2, #5
    1766:	f001 051f 	and.w	r5, r1, #31
    176a:	2401      	movs	r4, #1
    176c:	40ac      	lsls	r4, r5
    176e:	3020      	adds	r0, #32
    1770:	4d11      	ldr	r5, [pc, #68]	; (17b8 <_dma_init+0x104>)
    1772:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    177a:	f3bf 8f6f 	isb	sy
    177e:	e7e0      	b.n	1742 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1780:	0950      	lsrs	r0, r2, #5
    1782:	f001 051f 	and.w	r5, r1, #31
    1786:	2401      	movs	r4, #1
    1788:	40ac      	lsls	r4, r5
    178a:	3060      	adds	r0, #96	; 0x60
    178c:	4d0a      	ldr	r5, [pc, #40]	; (17b8 <_dma_init+0x104>)
    178e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1792:	e7d8      	b.n	1746 <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1794:	0952      	lsrs	r2, r2, #5
    1796:	f001 011f 	and.w	r1, r1, #31
    179a:	2001      	movs	r0, #1
    179c:	fa00 f101 	lsl.w	r1, r0, r1
    17a0:	4805      	ldr	r0, [pc, #20]	; (17b8 <_dma_init+0x104>)
    17a2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    17a6:	e7d0      	b.n	174a <_dma_init+0x96>
    17a8:	4100a000 	.word	0x4100a000
    17ac:	20000710 	.word	0x20000710
    17b0:	20000910 	.word	0x20000910
    17b4:	00004784 	.word	0x00004784
    17b8:	e000e100 	.word	0xe000e100

000017bc <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    17bc:	4b02      	ldr	r3, [pc, #8]	; (17c8 <_dma_set_destination_address+0xc>)
    17be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    17c2:	6081      	str	r1, [r0, #8]
}
    17c4:	2000      	movs	r0, #0
    17c6:	4770      	bx	lr
    17c8:	20000710 	.word	0x20000710

000017cc <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    17cc:	4b02      	ldr	r3, [pc, #8]	; (17d8 <_dma_set_source_address+0xc>)
    17ce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    17d2:	6041      	str	r1, [r0, #4]
}
    17d4:	2000      	movs	r0, #0
    17d6:	4770      	bx	lr
    17d8:	20000710 	.word	0x20000710

000017dc <_dma_set_BTCTRL>:
	_descriptor_section[channel].BTCTRL.reg = src;
    17dc:	b289      	uxth	r1, r1
    17de:	0100      	lsls	r0, r0, #4
    17e0:	4b01      	ldr	r3, [pc, #4]	; (17e8 <_dma_set_BTCTRL+0xc>)
    17e2:	5219      	strh	r1, [r3, r0]
}
    17e4:	2000      	movs	r0, #0
    17e6:	4770      	bx	lr
    17e8:	20000710 	.word	0x20000710

000017ec <_dma_set_DESCADDR>:
	_descriptor_section[channel].DESCADDR.reg = src;
    17ec:	4b02      	ldr	r3, [pc, #8]	; (17f8 <_dma_set_DESCADDR+0xc>)
    17ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    17f2:	60c1      	str	r1, [r0, #12]
}
    17f4:	2000      	movs	r0, #0
    17f6:	4770      	bx	lr
    17f8:	20000710 	.word	0x20000710

000017fc <_dma_get_WRB_data>:
	return _write_back_section[channel].BTCNT.reg;
    17fc:	4b02      	ldr	r3, [pc, #8]	; (1808 <_dma_get_WRB_data+0xc>)
    17fe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1802:	8840      	ldrh	r0, [r0, #2]
}
    1804:	b280      	uxth	r0, r0
    1806:	4770      	bx	lr
    1808:	20000910 	.word	0x20000910

0000180c <_dma_set_data_amount>:
{
    180c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    180e:	4c14      	ldr	r4, [pc, #80]	; (1860 <_dma_set_data_amount+0x54>)
    1810:	0102      	lsls	r2, r0, #4
    1812:	18a3      	adds	r3, r4, r2
    1814:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1816:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1818:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    181c:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    181e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1822:	d006      	beq.n	1832 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1824:	fa01 f403 	lsl.w	r4, r1, r3
    1828:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    182a:	4a0d      	ldr	r2, [pc, #52]	; (1860 <_dma_set_data_amount+0x54>)
    182c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1830:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1832:	4c0b      	ldr	r4, [pc, #44]	; (1860 <_dma_set_data_amount+0x54>)
    1834:	0102      	lsls	r2, r0, #4
    1836:	18a5      	adds	r5, r4, r2
    1838:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    183a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    183c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1840:	d005      	beq.n	184e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1842:	fa01 f303 	lsl.w	r3, r1, r3
    1846:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1848:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    184c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    184e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <_dma_set_data_amount+0x54>)
    1852:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1856:	8041      	strh	r1, [r0, #2]
}
    1858:	2000      	movs	r0, #0
    185a:	bc30      	pop	{r4, r5}
    185c:	4770      	bx	lr
    185e:	bf00      	nop
    1860:	20000710 	.word	0x20000710

00001864 <_dma_enable_transaction>:
{
    1864:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1866:	4c0c      	ldr	r4, [pc, #48]	; (1898 <_dma_enable_transaction+0x34>)
    1868:	0102      	lsls	r2, r0, #4
    186a:	5aa3      	ldrh	r3, [r4, r2]
    186c:	b29b      	uxth	r3, r3
    186e:	f043 0301 	orr.w	r3, r3, #1
    1872:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1874:	4c09      	ldr	r4, [pc, #36]	; (189c <_dma_enable_transaction+0x38>)
    1876:	1d03      	adds	r3, r0, #4
    1878:	011b      	lsls	r3, r3, #4
    187a:	58e2      	ldr	r2, [r4, r3]
    187c:	f042 0202 	orr.w	r2, r2, #2
    1880:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1882:	b129      	cbz	r1, 1890 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1884:	2301      	movs	r3, #1
    1886:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    188a:	6922      	ldr	r2, [r4, #16]
    188c:	4310      	orrs	r0, r2
    188e:	6120      	str	r0, [r4, #16]
}
    1890:	2000      	movs	r0, #0
    1892:	f85d 4b04 	ldr.w	r4, [sp], #4
    1896:	4770      	bx	lr
    1898:	20000710 	.word	0x20000710
    189c:	4100a000 	.word	0x4100a000

000018a0 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    18a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18a4:	008a      	lsls	r2, r1, #2
    18a6:	4b02      	ldr	r3, [pc, #8]	; (18b0 <_dma_get_channel_resource+0x10>)
    18a8:	4413      	add	r3, r2
    18aa:	6003      	str	r3, [r0, #0]
}
    18ac:	2000      	movs	r0, #0
    18ae:	4770      	bx	lr
    18b0:	20000080 	.word	0x20000080

000018b4 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    18b4:	b508      	push	{r3, lr}
	_dmac_handler();
    18b6:	4b01      	ldr	r3, [pc, #4]	; (18bc <DMAC_0_Handler+0x8>)
    18b8:	4798      	blx	r3
    18ba:	bd08      	pop	{r3, pc}
    18bc:	0000164d 	.word	0x0000164d

000018c0 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    18c0:	b508      	push	{r3, lr}
	_dmac_handler();
    18c2:	4b01      	ldr	r3, [pc, #4]	; (18c8 <DMAC_1_Handler+0x8>)
    18c4:	4798      	blx	r3
    18c6:	bd08      	pop	{r3, pc}
    18c8:	0000164d 	.word	0x0000164d

000018cc <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    18cc:	b508      	push	{r3, lr}
	_dmac_handler();
    18ce:	4b01      	ldr	r3, [pc, #4]	; (18d4 <DMAC_2_Handler+0x8>)
    18d0:	4798      	blx	r3
    18d2:	bd08      	pop	{r3, pc}
    18d4:	0000164d 	.word	0x0000164d

000018d8 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    18d8:	b508      	push	{r3, lr}
	_dmac_handler();
    18da:	4b01      	ldr	r3, [pc, #4]	; (18e0 <DMAC_3_Handler+0x8>)
    18dc:	4798      	blx	r3
    18de:	bd08      	pop	{r3, pc}
    18e0:	0000164d 	.word	0x0000164d

000018e4 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    18e4:	b508      	push	{r3, lr}
	_dmac_handler();
    18e6:	4b01      	ldr	r3, [pc, #4]	; (18ec <DMAC_4_Handler+0x8>)
    18e8:	4798      	blx	r3
    18ea:	bd08      	pop	{r3, pc}
    18ec:	0000164d 	.word	0x0000164d

000018f0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    18f0:	b570      	push	{r4, r5, r6, lr}
    18f2:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    18f4:	4b2a      	ldr	r3, [pc, #168]	; (19a0 <_ext_irq_handler+0xb0>)
    18f6:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    18f8:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    18fa:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    18fc:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    18fe:	4b29      	ldr	r3, [pc, #164]	; (19a4 <_ext_irq_handler+0xb4>)
    1900:	6818      	ldr	r0, [r3, #0]
    1902:	22f4      	movs	r2, #244	; 0xf4
    1904:	4928      	ldr	r1, [pc, #160]	; (19a8 <_ext_irq_handler+0xb8>)
    1906:	3000      	adds	r0, #0
    1908:	bf18      	it	ne
    190a:	2001      	movne	r0, #1
    190c:	4b27      	ldr	r3, [pc, #156]	; (19ac <_ext_irq_handler+0xbc>)
    190e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1910:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1914:	e035      	b.n	1982 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1916:	4b26      	ldr	r3, [pc, #152]	; (19b0 <_ext_irq_handler+0xc0>)
    1918:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    191c:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    191e:	f1b5 3fff 	cmp.w	r5, #4294967295
    1922:	d003      	beq.n	192c <_ext_irq_handler+0x3c>
				callback(pin);
    1924:	4b1f      	ldr	r3, [pc, #124]	; (19a4 <_ext_irq_handler+0xb4>)
    1926:	681b      	ldr	r3, [r3, #0]
    1928:	4628      	mov	r0, r5
    192a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    192c:	2301      	movs	r3, #1
    192e:	40a3      	lsls	r3, r4
    1930:	9c01      	ldr	r4, [sp, #4]
    1932:	ea24 0403 	bic.w	r4, r4, r3
    1936:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1938:	9b01      	ldr	r3, [sp, #4]
    193a:	fa93 f4a3 	rbit	r4, r3
    193e:	fab4 f484 	clz	r4, r4
    1942:	b90b      	cbnz	r3, 1948 <_ext_irq_handler+0x58>
    1944:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1948:	f1b4 3fff 	cmp.w	r4, #4294967295
    194c:	d014      	beq.n	1978 <_ext_irq_handler+0x88>
    194e:	2004      	movs	r0, #4
    1950:	2100      	movs	r1, #0
    1952:	e001      	b.n	1958 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1954:	3b01      	subs	r3, #1
    1956:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1958:	4281      	cmp	r1, r0
    195a:	d8e0      	bhi.n	191e <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    195c:	1843      	adds	r3, r0, r1
    195e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1962:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1964:	4a12      	ldr	r2, [pc, #72]	; (19b0 <_ext_irq_handler+0xc0>)
    1966:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    196a:	42a2      	cmp	r2, r4
    196c:	d0d3      	beq.n	1916 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    196e:	42a2      	cmp	r2, r4
    1970:	daf0      	bge.n	1954 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1972:	3301      	adds	r3, #1
    1974:	b2d9      	uxtb	r1, r3
    1976:	e7ef      	b.n	1958 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1978:	4b09      	ldr	r3, [pc, #36]	; (19a0 <_ext_irq_handler+0xb0>)
    197a:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    197c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    197e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1980:	615a      	str	r2, [r3, #20]
	while (flags) {
    1982:	9b01      	ldr	r3, [sp, #4]
    1984:	b14b      	cbz	r3, 199a <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1986:	9b01      	ldr	r3, [sp, #4]
    1988:	fa93 f4a3 	rbit	r4, r3
    198c:	fab4 f484 	clz	r4, r4
    1990:	2b00      	cmp	r3, #0
    1992:	d1d9      	bne.n	1948 <_ext_irq_handler+0x58>
    1994:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1998:	e7d6      	b.n	1948 <_ext_irq_handler+0x58>
	}
}
    199a:	b002      	add	sp, #8
    199c:	bd70      	pop	{r4, r5, r6, pc}
    199e:	bf00      	nop
    19a0:	40002800 	.word	0x40002800
    19a4:	20000200 	.word	0x20000200
    19a8:	000048a4 	.word	0x000048a4
    19ac:	000012dd 	.word	0x000012dd
    19b0:	00004884 	.word	0x00004884

000019b4 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    19b4:	4b3d      	ldr	r3, [pc, #244]	; (1aac <_ext_irq_init+0xf8>)
    19b6:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    19b8:	f013 0f01 	tst.w	r3, #1
    19bc:	d120      	bne.n	1a00 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19be:	4b3b      	ldr	r3, [pc, #236]	; (1aac <_ext_irq_init+0xf8>)
    19c0:	685b      	ldr	r3, [r3, #4]
    19c2:	f013 0f03 	tst.w	r3, #3
    19c6:	d1fa      	bne.n	19be <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    19c8:	4b38      	ldr	r3, [pc, #224]	; (1aac <_ext_irq_init+0xf8>)
    19ca:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    19cc:	f013 0f02 	tst.w	r3, #2
    19d0:	d00e      	beq.n	19f0 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    19d2:	4a36      	ldr	r2, [pc, #216]	; (1aac <_ext_irq_init+0xf8>)
    19d4:	7813      	ldrb	r3, [r2, #0]
    19d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    19da:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19dc:	4b33      	ldr	r3, [pc, #204]	; (1aac <_ext_irq_init+0xf8>)
    19de:	685b      	ldr	r3, [r3, #4]
    19e0:	f013 0f03 	tst.w	r3, #3
    19e4:	d1fa      	bne.n	19dc <_ext_irq_init+0x28>
    19e6:	4b31      	ldr	r3, [pc, #196]	; (1aac <_ext_irq_init+0xf8>)
    19e8:	685b      	ldr	r3, [r3, #4]
    19ea:	f013 0f02 	tst.w	r3, #2
    19ee:	d1fa      	bne.n	19e6 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    19f0:	2201      	movs	r2, #1
    19f2:	4b2e      	ldr	r3, [pc, #184]	; (1aac <_ext_irq_init+0xf8>)
    19f4:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19f6:	4b2d      	ldr	r3, [pc, #180]	; (1aac <_ext_irq_init+0xf8>)
    19f8:	685b      	ldr	r3, [r3, #4]
    19fa:	f013 0f03 	tst.w	r3, #3
    19fe:	d1fa      	bne.n	19f6 <_ext_irq_init+0x42>
    1a00:	4b2a      	ldr	r3, [pc, #168]	; (1aac <_ext_irq_init+0xf8>)
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	f013 0f01 	tst.w	r3, #1
    1a08:	d1fa      	bne.n	1a00 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1a0a:	4a28      	ldr	r2, [pc, #160]	; (1aac <_ext_irq_init+0xf8>)
    1a0c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1a0e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1a12:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a14:	4b25      	ldr	r3, [pc, #148]	; (1aac <_ext_irq_init+0xf8>)
    1a16:	685b      	ldr	r3, [r3, #4]
    1a18:	f013 0f03 	tst.w	r3, #3
    1a1c:	d1fa      	bne.n	1a14 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1a1e:	4b23      	ldr	r3, [pc, #140]	; (1aac <_ext_irq_init+0xf8>)
    1a20:	2200      	movs	r2, #0
    1a22:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1a24:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1a26:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1a28:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1a2a:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1a2c:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1a30:	61da      	str	r2, [r3, #28]
    1a32:	4a1f      	ldr	r2, [pc, #124]	; (1ab0 <_ext_irq_init+0xfc>)
    1a34:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1a36:	781a      	ldrb	r2, [r3, #0]
    1a38:	f042 0202 	orr.w	r2, r2, #2
    1a3c:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a3e:	4b1b      	ldr	r3, [pc, #108]	; (1aac <_ext_irq_init+0xf8>)
    1a40:	685b      	ldr	r3, [r3, #4]
    1a42:	f013 0f03 	tst.w	r3, #3
    1a46:	d1fa      	bne.n	1a3e <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a48:	4b1a      	ldr	r3, [pc, #104]	; (1ab4 <_ext_irq_init+0x100>)
    1a4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a56:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a5e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a6c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a74:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1a94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a98:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aa0:	601a      	str	r2, [r3, #0]
	callback = cb;
    1aa2:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <_ext_irq_init+0x104>)
    1aa4:	6018      	str	r0, [r3, #0]
}
    1aa6:	2000      	movs	r0, #0
    1aa8:	4770      	bx	lr
    1aaa:	bf00      	nop
    1aac:	40002800 	.word	0x40002800
    1ab0:	0a0000b0 	.word	0x0a0000b0
    1ab4:	e000e100 	.word	0xe000e100
    1ab8:	20000200 	.word	0x20000200

00001abc <_ext_irq_enable>:
{
    1abc:	b410      	push	{r4}
	uint8_t i      = 0;
    1abe:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1ac0:	2b03      	cmp	r3, #3
    1ac2:	d80d      	bhi.n	1ae0 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1ac4:	461c      	mov	r4, r3
    1ac6:	4a11      	ldr	r2, [pc, #68]	; (1b0c <_ext_irq_enable+0x50>)
    1ac8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1acc:	6852      	ldr	r2, [r2, #4]
    1ace:	4282      	cmp	r2, r0
    1ad0:	d002      	beq.n	1ad8 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1ad2:	3301      	adds	r3, #1
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	e7f3      	b.n	1ac0 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1ad8:	4b0c      	ldr	r3, [pc, #48]	; (1b0c <_ext_irq_enable+0x50>)
    1ada:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1ade:	e000      	b.n	1ae2 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1ae0:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1ae2:	2aff      	cmp	r2, #255	; 0xff
    1ae4:	d00f      	beq.n	1b06 <_ext_irq_enable+0x4a>
	if (enable) {
    1ae6:	b941      	cbnz	r1, 1afa <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1ae8:	2301      	movs	r3, #1
    1aea:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1aec:	4a08      	ldr	r2, [pc, #32]	; (1b10 <_ext_irq_enable+0x54>)
    1aee:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1af0:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1af2:	2000      	movs	r0, #0
}
    1af4:	f85d 4b04 	ldr.w	r4, [sp], #4
    1af8:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1afa:	2301      	movs	r3, #1
    1afc:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1afe:	4a04      	ldr	r2, [pc, #16]	; (1b10 <_ext_irq_enable+0x54>)
    1b00:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1b02:	2000      	movs	r0, #0
    1b04:	e7f6      	b.n	1af4 <_ext_irq_enable+0x38>
		return -1;
    1b06:	f04f 30ff 	mov.w	r0, #4294967295
    1b0a:	e7f3      	b.n	1af4 <_ext_irq_enable+0x38>
    1b0c:	00004884 	.word	0x00004884
    1b10:	40002800 	.word	0x40002800

00001b14 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1b14:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b16:	4b01      	ldr	r3, [pc, #4]	; (1b1c <EIC_6_Handler+0x8>)
    1b18:	4798      	blx	r3
    1b1a:	bd08      	pop	{r3, pc}
    1b1c:	000018f1 	.word	0x000018f1

00001b20 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1b20:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b22:	4b01      	ldr	r3, [pc, #4]	; (1b28 <EIC_7_Handler+0x8>)
    1b24:	4798      	blx	r3
    1b26:	bd08      	pop	{r3, pc}
    1b28:	000018f1 	.word	0x000018f1

00001b2c <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1b2c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b2e:	4b01      	ldr	r3, [pc, #4]	; (1b34 <EIC_9_Handler+0x8>)
    1b30:	4798      	blx	r3
    1b32:	bd08      	pop	{r3, pc}
    1b34:	000018f1 	.word	0x000018f1

00001b38 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1b38:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b3a:	4b01      	ldr	r3, [pc, #4]	; (1b40 <EIC_14_Handler+0x8>)
    1b3c:	4798      	blx	r3
    1b3e:	bd08      	pop	{r3, pc}
    1b40:	000018f1 	.word	0x000018f1

00001b44 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b44:	f010 0f01 	tst.w	r0, #1
    1b48:	d008      	beq.n	1b5c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b4a:	4a17      	ldr	r2, [pc, #92]	; (1ba8 <_gclk_init_generators_by_fref+0x64>)
    1b4c:	4b17      	ldr	r3, [pc, #92]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b4e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b50:	4b16      	ldr	r3, [pc, #88]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b52:	685a      	ldr	r2, [r3, #4]
    1b54:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1b58:	421a      	tst	r2, r3
    1b5a:	d1f9      	bne.n	1b50 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1b5c:	f010 0f02 	tst.w	r0, #2
    1b60:	d008      	beq.n	1b74 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b62:	4a13      	ldr	r2, [pc, #76]	; (1bb0 <_gclk_init_generators_by_fref+0x6c>)
    1b64:	4b11      	ldr	r3, [pc, #68]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b66:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b68:	4b10      	ldr	r3, [pc, #64]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b6a:	685a      	ldr	r2, [r3, #4]
    1b6c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1b70:	421a      	tst	r2, r3
    1b72:	d1f9      	bne.n	1b68 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1b74:	f010 0f04 	tst.w	r0, #4
    1b78:	d008      	beq.n	1b8c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b7a:	4a0e      	ldr	r2, [pc, #56]	; (1bb4 <_gclk_init_generators_by_fref+0x70>)
    1b7c:	4b0b      	ldr	r3, [pc, #44]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b7e:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b80:	4b0a      	ldr	r3, [pc, #40]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b82:	685a      	ldr	r2, [r3, #4]
    1b84:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1b88:	421a      	tst	r2, r3
    1b8a:	d1f9      	bne.n	1b80 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1b8c:	f010 0f08 	tst.w	r0, #8
    1b90:	d008      	beq.n	1ba4 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b92:	4a09      	ldr	r2, [pc, #36]	; (1bb8 <_gclk_init_generators_by_fref+0x74>)
    1b94:	4b05      	ldr	r3, [pc, #20]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b96:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b98:	4b04      	ldr	r3, [pc, #16]	; (1bac <_gclk_init_generators_by_fref+0x68>)
    1b9a:	685a      	ldr	r2, [r3, #4]
    1b9c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ba0:	421a      	tst	r2, r3
    1ba2:	d1f9      	bne.n	1b98 <_gclk_init_generators_by_fref+0x54>
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	00020107 	.word	0x00020107
    1bac:	40001c00 	.word	0x40001c00
    1bb0:	00060b07 	.word	0x00060b07
    1bb4:	00010105 	.word	0x00010105
    1bb8:	00100106 	.word	0x00100106

00001bbc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1bbc:	2201      	movs	r2, #1
    1bbe:	4b01      	ldr	r3, [pc, #4]	; (1bc4 <_mclk_init+0x8>)
    1bc0:	715a      	strb	r2, [r3, #5]
    1bc2:	4770      	bx	lr
    1bc4:	40000800 	.word	0x40000800

00001bc8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1bc8:	4b06      	ldr	r3, [pc, #24]	; (1be4 <_osc32kctrl_init_sources+0x1c>)
    1bca:	f242 228e 	movw	r2, #8846	; 0x228e
    1bce:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1bd0:	2200      	movs	r2, #0
    1bd2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1bd4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1bd6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1bd8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1bdc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1bde:	2201      	movs	r2, #1
    1be0:	741a      	strb	r2, [r3, #16]
    1be2:	4770      	bx	lr
    1be4:	40001400 	.word	0x40001400

00001be8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1be8:	4770      	bx	lr
	...

00001bec <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bec:	4a49      	ldr	r2, [pc, #292]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1bee:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bf0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bf4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bf8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bfa:	4b46      	ldr	r3, [pc, #280]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1bfc:	685a      	ldr	r2, [r3, #4]
    1bfe:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1c02:	421a      	tst	r2, r3
    1c04:	d1f9      	bne.n	1bfa <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c06:	4b43      	ldr	r3, [pc, #268]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1c08:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c0a:	f013 0f04 	tst.w	r3, #4
    1c0e:	d1fa      	bne.n	1c06 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c10:	4b41      	ldr	r3, [pc, #260]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c12:	2200      	movs	r2, #0
    1c14:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1c16:	2142      	movs	r1, #66	; 0x42
    1c18:	4a3e      	ldr	r2, [pc, #248]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1c1a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1c1e:	4a3f      	ldr	r2, [pc, #252]	; (1d1c <_oscctrl_init_referenced_generators+0x130>)
    1c20:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c22:	4b3d      	ldr	r3, [pc, #244]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1c28:	f013 0f10 	tst.w	r3, #16
    1c2c:	d1f9      	bne.n	1c22 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c2e:	2200      	movs	r2, #0
    1c30:	4b39      	ldr	r3, [pc, #228]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c32:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c36:	4b38      	ldr	r3, [pc, #224]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c3c:	f013 0f04 	tst.w	r3, #4
    1c40:	d1f9      	bne.n	1c36 <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c42:	2202      	movs	r2, #2
    1c44:	4b34      	ldr	r3, [pc, #208]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c46:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c48:	4b33      	ldr	r3, [pc, #204]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1c4e:	f013 0f02 	tst.w	r3, #2
    1c52:	d1f9      	bne.n	1c48 <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1c54:	4b30      	ldr	r3, [pc, #192]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1c58:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c5a:	4b2f      	ldr	r3, [pc, #188]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1c60:	f013 0f08 	tst.w	r3, #8
    1c64:	d1f9      	bne.n	1c5a <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c66:	2281      	movs	r2, #129	; 0x81
    1c68:	4b2b      	ldr	r3, [pc, #172]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c6a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c6e:	4b2a      	ldr	r3, [pc, #168]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c74:	f013 0f04 	tst.w	r3, #4
    1c78:	d1f9      	bne.n	1c6e <_oscctrl_init_referenced_generators+0x82>
    1c7a:	2243      	movs	r2, #67	; 0x43
    1c7c:	4b25      	ldr	r3, [pc, #148]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1c82:	2227      	movs	r2, #39	; 0x27
    1c84:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1c88:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1c8a:	4b23      	ldr	r3, [pc, #140]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1c8e:	f013 0f06 	tst.w	r3, #6
    1c92:	d1fa      	bne.n	1c8a <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1c94:	4b20      	ldr	r3, [pc, #128]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1c96:	2200      	movs	r2, #0
    1c98:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1c9a:	2202      	movs	r2, #2
    1c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1ca0:	4b1d      	ldr	r3, [pc, #116]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1ca4:	f013 0f02 	tst.w	r3, #2
    1ca8:	d1fa      	bne.n	1ca0 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1caa:	4b1b      	ldr	r3, [pc, #108]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1cac:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1cb0:	f013 0f01 	tst.w	r3, #1
    1cb4:	d027      	beq.n	1d06 <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1cb6:	4b18      	ldr	r3, [pc, #96]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1cb8:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    1cba:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1cbe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1cc2:	d1f8      	bne.n	1cb6 <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1cc4:	4b14      	ldr	r3, [pc, #80]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1cc8:	f013 0f01 	tst.w	r3, #1
    1ccc:	d104      	bne.n	1cd8 <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1cce:	4b12      	ldr	r3, [pc, #72]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1cd2:	f013 0f02 	tst.w	r3, #2
    1cd6:	d0f5      	beq.n	1cc4 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1cd8:	4b0e      	ldr	r3, [pc, #56]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1cda:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d1fb      	bne.n	1cd8 <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1ce0:	4a0c      	ldr	r2, [pc, #48]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1ce2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1ce4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1ce8:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1cec:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1cee:	4b09      	ldr	r3, [pc, #36]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1cf0:	685a      	ldr	r2, [r3, #4]
    1cf2:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1cf6:	421a      	tst	r2, r3
    1cf8:	d1f9      	bne.n	1cee <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1cfa:	4b06      	ldr	r3, [pc, #24]	; (1d14 <_oscctrl_init_referenced_generators+0x128>)
    1cfc:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1cfe:	f013 0f04 	tst.w	r3, #4
    1d02:	d1fa      	bne.n	1cfa <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    1d04:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d06:	4b04      	ldr	r3, [pc, #16]	; (1d18 <_oscctrl_init_referenced_generators+0x12c>)
    1d08:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d0a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d0e:	d0fa      	beq.n	1d06 <_oscctrl_init_referenced_generators+0x11a>
    1d10:	e7d8      	b.n	1cc4 <_oscctrl_init_referenced_generators+0xd8>
    1d12:	bf00      	nop
    1d14:	40001c00 	.word	0x40001c00
    1d18:	40001000 	.word	0x40001000
    1d1c:	7c7f05b9 	.word	0x7c7f05b9

00001d20 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1d20:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1d22:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1d24:	6803      	ldr	r3, [r0, #0]
    1d26:	2100      	movs	r1, #0
    1d28:	4798      	blx	r3
    1d2a:	bd08      	pop	{r3, pc}

00001d2c <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1d2c:	b538      	push	{r3, r4, r5, lr}
    1d2e:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1d30:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1d32:	4b07      	ldr	r3, [pc, #28]	; (1d50 <_camera_async_init+0x24>)
    1d34:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <_camera_async_init+0x28>)
    1d38:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    1d3a:	4d07      	ldr	r5, [pc, #28]	; (1d58 <_camera_async_init+0x2c>)
    1d3c:	2100      	movs	r1, #0
    1d3e:	4628      	mov	r0, r5
    1d40:	4b06      	ldr	r3, [pc, #24]	; (1d5c <_camera_async_init+0x30>)
    1d42:	4798      	blx	r3
	resource->back                 = device;
    1d44:	682b      	ldr	r3, [r5, #0]
    1d46:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    1d48:	4a05      	ldr	r2, [pc, #20]	; (1d60 <_camera_async_init+0x34>)
    1d4a:	601a      	str	r2, [r3, #0]
    1d4c:	bd38      	pop	{r3, r4, r5, pc}
    1d4e:	bf00      	nop
    1d50:	c0000020 	.word	0xc0000020
    1d54:	20000204 	.word	0x20000204
    1d58:	20000b10 	.word	0x20000b10
    1d5c:	000018a1 	.word	0x000018a1
    1d60:	00001d21 	.word	0x00001d21

00001d64 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    1d64:	b500      	push	{lr}
    1d66:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    1d68:	4b08      	ldr	r3, [pc, #32]	; (1d8c <PCC_Handler+0x28>)
    1d6a:	6818      	ldr	r0, [r3, #0]
    1d6c:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1d6e:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1d70:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    1d72:	2201      	movs	r2, #1
    1d74:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    1d76:	9b01      	ldr	r3, [sp, #4]
    1d78:	f013 0f01 	tst.w	r3, #1
    1d7c:	d003      	beq.n	1d86 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1d7e:	6803      	ldr	r3, [r0, #0]
    1d80:	b10b      	cbz	r3, 1d86 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1d82:	2100      	movs	r1, #0
    1d84:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    1d86:	b003      	add	sp, #12
    1d88:	f85d fb04 	ldr.w	pc, [sp], #4
    1d8c:	20000204 	.word	0x20000204

00001d90 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d90:	b500      	push	{lr}
    1d92:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d94:	4b0d      	ldr	r3, [pc, #52]	; (1dcc <RAMECC_Handler+0x3c>)
    1d96:	789b      	ldrb	r3, [r3, #2]
    1d98:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d9a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d9c:	9b01      	ldr	r3, [sp, #4]
    1d9e:	f013 0f02 	tst.w	r3, #2
    1da2:	d006      	beq.n	1db2 <RAMECC_Handler+0x22>
    1da4:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <RAMECC_Handler+0x40>)
    1da6:	681b      	ldr	r3, [r3, #0]
    1da8:	b11b      	cbz	r3, 1db2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1daa:	4a08      	ldr	r2, [pc, #32]	; (1dcc <RAMECC_Handler+0x3c>)
    1dac:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1dae:	4798      	blx	r3
    1db0:	e009      	b.n	1dc6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1db2:	9b01      	ldr	r3, [sp, #4]
    1db4:	f013 0f01 	tst.w	r3, #1
    1db8:	d005      	beq.n	1dc6 <RAMECC_Handler+0x36>
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <RAMECC_Handler+0x40>)
    1dbc:	685b      	ldr	r3, [r3, #4]
    1dbe:	b113      	cbz	r3, 1dc6 <RAMECC_Handler+0x36>
    1dc0:	4a02      	ldr	r2, [pc, #8]	; (1dcc <RAMECC_Handler+0x3c>)
    1dc2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1dc4:	4798      	blx	r3
	} else {
		return;
	}
}
    1dc6:	b003      	add	sp, #12
    1dc8:	f85d fb04 	ldr.w	pc, [sp], #4
    1dcc:	41020000 	.word	0x41020000
    1dd0:	20000b14 	.word	0x20000b14

00001dd4 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    1dd4:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    1dd6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    1dd8:	f013 0f04 	tst.w	r3, #4
    1ddc:	d009      	beq.n	1df2 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    1dde:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    1de0:	f014 0f03 	tst.w	r4, #3
    1de4:	d1fb      	bne.n	1dde <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    1de6:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    1de8:	b2a4      	uxth	r4, r4
    1dea:	f024 0404 	bic.w	r4, r4, #4
    1dee:	b2a4      	uxth	r4, r4
    1df0:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    1df2:	6c44      	ldr	r4, [r0, #68]	; 0x44
    1df4:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    1df8:	2c00      	cmp	r4, #0
    1dfa:	d135      	bne.n	1e68 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    1dfc:	4b22      	ldr	r3, [pc, #136]	; (1e88 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    1dfe:	2a00      	cmp	r2, #0
    1e00:	d134      	bne.n	1e6c <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    1e02:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1e04:	b292      	uxth	r2, r2
    1e06:	f022 0220 	bic.w	r2, r2, #32
    1e0a:	b292      	uxth	r2, r2
    1e0c:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    1e0e:	fbb3 f1f1 	udiv	r1, r3, r1
    1e12:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    1e14:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    1e18:	f013 0f04 	tst.w	r3, #4
    1e1c:	d001      	beq.n	1e22 <_mci_set_speed+0x4e>
    1e1e:	b901      	cbnz	r1, 1e22 <_mci_set_speed+0x4e>
		div = 1;
    1e20:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    1e22:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e24:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    1e26:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    1e28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1e2c:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    1e2e:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    1e30:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e34:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1e36:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    1e38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    1e3c:	0189      	lsls	r1, r1, #6
    1e3e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1e42:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    1e44:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    1e46:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 0301 	orr.w	r3, r3, #1
    1e4e:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e50:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    1e52:	f013 0f02 	tst.w	r3, #2
    1e56:	d0fb      	beq.n	1e50 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    1e58:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1e5a:	b29b      	uxth	r3, r3
    1e5c:	f043 0304 	orr.w	r3, r3, #4
    1e60:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    1e62:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e66:	4770      	bx	lr
		clkbase = clkbase / 2;
    1e68:	4b08      	ldr	r3, [pc, #32]	; (1e8c <_mci_set_speed+0xb8>)
    1e6a:	e7c8      	b.n	1dfe <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    1e6c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1e6e:	b292      	uxth	r2, r2
    1e70:	f042 0220 	orr.w	r2, r2, #32
    1e74:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    1e76:	fb04 3303 	mla	r3, r4, r3, r3
    1e7a:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    1e7e:	2900      	cmp	r1, #0
    1e80:	d0c8      	beq.n	1e14 <_mci_set_speed+0x40>
			div = div - 1;
    1e82:	3901      	subs	r1, #1
    1e84:	e7c6      	b.n	1e14 <_mci_set_speed+0x40>
    1e86:	bf00      	nop
    1e88:	0393a000 	.word	0x0393a000
    1e8c:	01c9d000 	.word	0x01c9d000

00001e90 <_mci_reset>:
{
    1e90:	b510      	push	{r4, lr}
	ASSERT(hw);
    1e92:	4604      	mov	r4, r0
    1e94:	2234      	movs	r2, #52	; 0x34
    1e96:	4906      	ldr	r1, [pc, #24]	; (1eb0 <_mci_reset+0x20>)
    1e98:	3000      	adds	r0, #0
    1e9a:	bf18      	it	ne
    1e9c:	2001      	movne	r0, #1
    1e9e:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <_mci_reset+0x24>)
    1ea0:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    1ea2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    1ea6:	f043 0302 	orr.w	r3, r3, #2
    1eaa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    1eae:	bd10      	pop	{r4, pc}
    1eb0:	000048bc 	.word	0x000048bc
    1eb4:	000012dd 	.word	0x000012dd

00001eb8 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    1eb8:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    1eba:	4604      	mov	r4, r0
    1ebc:	227f      	movs	r2, #127	; 0x7f
    1ebe:	490b      	ldr	r1, [pc, #44]	; (1eec <_mci_wait_busy+0x34>)
    1ec0:	3000      	adds	r0, #0
    1ec2:	bf18      	it	ne
    1ec4:	2001      	movne	r0, #1
    1ec6:	4b0a      	ldr	r3, [pc, #40]	; (1ef0 <_mci_wait_busy+0x38>)
    1ec8:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    1eca:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    1ece:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    1ed0:	1e59      	subs	r1, r3, #1
    1ed2:	b12b      	cbz	r3, 1ee0 <_mci_wait_busy+0x28>
    1ed4:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    1ed6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    1eda:	d0f8      	beq.n	1ece <_mci_wait_busy+0x16>
	return true;
    1edc:	2001      	movs	r0, #1
}
    1ede:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    1ee0:	4620      	mov	r0, r4
    1ee2:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <_mci_wait_busy+0x3c>)
    1ee4:	4798      	blx	r3
			return false;
    1ee6:	2000      	movs	r0, #0
    1ee8:	bd10      	pop	{r4, pc}
    1eea:	bf00      	nop
    1eec:	000048bc 	.word	0x000048bc
    1ef0:	000012dd 	.word	0x000012dd
    1ef4:	00001e91 	.word	0x00001e91

00001ef8 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    1ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1efa:	460f      	mov	r7, r1
    1efc:	4615      	mov	r5, r2
    1efe:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    1f00:	4604      	mov	r4, r0
    1f02:	2299      	movs	r2, #153	; 0x99
    1f04:	4934      	ldr	r1, [pc, #208]	; (1fd8 <_mci_send_cmd_execute+0xe0>)
    1f06:	3000      	adds	r0, #0
    1f08:	bf18      	it	ne
    1f0a:	2001      	movne	r0, #1
    1f0c:	4b33      	ldr	r3, [pc, #204]	; (1fdc <_mci_send_cmd_execute+0xe4>)
    1f0e:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    1f10:	0229      	lsls	r1, r5, #8
    1f12:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    1f16:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    1f18:	f415 7f80 	tst.w	r5, #256	; 0x100
    1f1c:	d004      	beq.n	1f28 <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    1f1e:	f415 6f00 	tst.w	r5, #2048	; 0x800
    1f22:	d00e      	beq.n	1f42 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    1f24:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    1f28:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    1f2c:	d012      	beq.n	1f54 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    1f2e:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    1f32:	f043 0310 	orr.w	r3, r3, #16
    1f36:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    1f3a:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    1f3c:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    1f3e:	81e3      	strh	r3, [r4, #14]
    1f40:	e017      	b.n	1f72 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    1f42:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    1f46:	d002      	beq.n	1f4e <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    1f48:	f041 0103 	orr.w	r1, r1, #3
    1f4c:	e7ec      	b.n	1f28 <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    1f4e:	f041 0102 	orr.w	r1, r1, #2
    1f52:	e7e9      	b.n	1f28 <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    1f54:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    1f58:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1f5c:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    1f60:	e7eb      	b.n	1f3a <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    1f62:	f240 227f 	movw	r2, #639	; 0x27f
    1f66:	4213      	tst	r3, r2
    1f68:	d118      	bne.n	1f9c <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    1f6a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    1f6c:	f013 0f01 	tst.w	r3, #1
    1f70:	d120      	bne.n	1fb4 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    1f72:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1f74:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    1f76:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    1f7a:	d0f2      	beq.n	1f62 <_mci_send_cmd_execute+0x6a>
			if (sr
    1f7c:	f240 225d 	movw	r2, #605	; 0x25d
    1f80:	4213      	tst	r3, r2
    1f82:	d0f2      	beq.n	1f6a <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    1f84:	4620      	mov	r0, r4
    1f86:	4b16      	ldr	r3, [pc, #88]	; (1fe0 <_mci_send_cmd_execute+0xe8>)
    1f88:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    1f8a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1f8c:	b29b      	uxth	r3, r3
    1f8e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    1f92:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    1f96:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    1f98:	2000      	movs	r0, #0
    1f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    1f9c:	4620      	mov	r0, r4
    1f9e:	4b10      	ldr	r3, [pc, #64]	; (1fe0 <_mci_send_cmd_execute+0xe8>)
    1fa0:	4798      	blx	r3
    1fa2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1fa4:	b29b      	uxth	r3, r3
    1fa6:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    1faa:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    1fae:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    1fb0:	2000      	movs	r0, #0
    1fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    1fb4:	f011 0f20 	tst.w	r1, #32
    1fb8:	d104      	bne.n	1fc4 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    1fba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1fbc:	b29b      	uxth	r3, r3
    1fbe:	f043 0301 	orr.w	r3, r3, #1
    1fc2:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    1fc4:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    1fc8:	d101      	bne.n	1fce <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    1fca:	2001      	movs	r0, #1
}
    1fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    1fce:	4620      	mov	r0, r4
    1fd0:	4b04      	ldr	r3, [pc, #16]	; (1fe4 <_mci_send_cmd_execute+0xec>)
    1fd2:	4798      	blx	r3
    1fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd6:	bf00      	nop
    1fd8:	000048bc 	.word	0x000048bc
    1fdc:	000012dd 	.word	0x000012dd
    1fe0:	00001e91 	.word	0x00001e91
    1fe4:	00001eb9 	.word	0x00001eb9

00001fe8 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    1fe8:	b538      	push	{r3, r4, r5, lr}
    1fea:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    1fec:	4605      	mov	r5, r0
    1fee:	b348      	cbz	r0, 2044 <_mci_sync_init+0x5c>
    1ff0:	b331      	cbz	r1, 2040 <_mci_sync_init+0x58>
    1ff2:	2001      	movs	r0, #1
    1ff4:	22d8      	movs	r2, #216	; 0xd8
    1ff6:	4914      	ldr	r1, [pc, #80]	; (2048 <_mci_sync_init+0x60>)
    1ff8:	4b14      	ldr	r3, [pc, #80]	; (204c <_mci_sync_init+0x64>)
    1ffa:	4798      	blx	r3

	mci_dev->hw = hw;
    1ffc:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    1ffe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2002:	f043 0301 	orr.w	r3, r3, #1
    2006:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    200a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    200e:	f013 0f01 	tst.w	r3, #1
    2012:	d1fa      	bne.n	200a <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2014:	230e      	movs	r3, #14
    2016:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    201a:	230f      	movs	r3, #15
    201c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2020:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2022:	b29b      	uxth	r3, r3
    2024:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2028:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    202c:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    202e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2030:	b29b      	uxth	r3, r3
    2032:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2036:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    203a:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    203c:	2000      	movs	r0, #0
    203e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    2040:	2000      	movs	r0, #0
    2042:	e7d7      	b.n	1ff4 <_mci_sync_init+0xc>
    2044:	2000      	movs	r0, #0
    2046:	e7d5      	b.n	1ff4 <_mci_sync_init+0xc>
    2048:	000048bc 	.word	0x000048bc
    204c:	000012dd 	.word	0x000012dd

00002050 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2052:	4616      	mov	r6, r2
    2054:	461d      	mov	r5, r3
    2056:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    205a:	4604      	mov	r4, r0
    205c:	b1e0      	cbz	r0, 2098 <_mci_sync_select_device+0x48>
    205e:	6803      	ldr	r3, [r0, #0]
    2060:	b1c3      	cbz	r3, 2094 <_mci_sync_select_device+0x44>
    2062:	2001      	movs	r0, #1
    2064:	f44f 7280 	mov.w	r2, #256	; 0x100
    2068:	491b      	ldr	r1, [pc, #108]	; (20d8 <_mci_sync_select_device+0x88>)
    206a:	4b1c      	ldr	r3, [pc, #112]	; (20dc <_mci_sync_select_device+0x8c>)
    206c:	4798      	blx	r3
	hw = mci_dev->hw;
    206e:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    2070:	b1a7      	cbz	r7, 209c <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2072:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2076:	f043 0304 	orr.w	r3, r3, #4
    207a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    207e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2080:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2084:	d011      	beq.n	20aa <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2086:	2d01      	cmp	r5, #1
    2088:	d015      	beq.n	20b6 <_mci_sync_select_device+0x66>
    208a:	2d04      	cmp	r5, #4
    208c:	d01b      	beq.n	20c6 <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    208e:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2094:	2000      	movs	r0, #0
    2096:	e7e5      	b.n	2064 <_mci_sync_select_device+0x14>
    2098:	2000      	movs	r0, #0
    209a:	e7e3      	b.n	2064 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    209c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    20a0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    20a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    20a8:	e7e9      	b.n	207e <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    20aa:	2200      	movs	r2, #0
    20ac:	4631      	mov	r1, r6
    20ae:	4620      	mov	r0, r4
    20b0:	4b0b      	ldr	r3, [pc, #44]	; (20e0 <_mci_sync_select_device+0x90>)
    20b2:	4798      	blx	r3
    20b4:	e7e7      	b.n	2086 <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    20b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    20ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    20be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    20c2:	2000      	movs	r0, #0
    20c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    20c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    20ca:	f043 0302 	orr.w	r3, r3, #2
    20ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    20d2:	2000      	movs	r0, #0
    20d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20d6:	bf00      	nop
    20d8:	000048bc 	.word	0x000048bc
    20dc:	000012dd 	.word	0x000012dd
    20e0:	00001dd5 	.word	0x00001dd5

000020e4 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    20e4:	2000      	movs	r0, #0
    20e6:	4770      	bx	lr

000020e8 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    20e8:	b570      	push	{r4, r5, r6, lr}
    20ea:	460d      	mov	r5, r1
    20ec:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    20ee:	4604      	mov	r4, r0
    20f0:	b180      	cbz	r0, 2114 <_mci_sync_send_cmd+0x2c>
    20f2:	6803      	ldr	r3, [r0, #0]
    20f4:	b163      	cbz	r3, 2110 <_mci_sync_send_cmd+0x28>
    20f6:	2001      	movs	r0, #1
    20f8:	f44f 72ab 	mov.w	r2, #342	; 0x156
    20fc:	490d      	ldr	r1, [pc, #52]	; (2134 <_mci_sync_send_cmd+0x4c>)
    20fe:	4b0e      	ldr	r3, [pc, #56]	; (2138 <_mci_sync_send_cmd+0x50>)
    2100:	4798      	blx	r3
	hw = mci_dev->hw;
    2102:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2104:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2106:	f013 0f01 	tst.w	r3, #1
    210a:	d005      	beq.n	2118 <_mci_sync_send_cmd+0x30>
		return false;
    210c:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    210e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2110:	2000      	movs	r0, #0
    2112:	e7f1      	b.n	20f8 <_mci_sync_send_cmd+0x10>
    2114:	2000      	movs	r0, #0
    2116:	e7ef      	b.n	20f8 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2118:	8983      	ldrh	r3, [r0, #12]
    211a:	b29b      	uxth	r3, r3
    211c:	f023 0301 	bic.w	r3, r3, #1
    2120:	b29b      	uxth	r3, r3
    2122:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2124:	2100      	movs	r1, #0
    2126:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2128:	4633      	mov	r3, r6
    212a:	462a      	mov	r2, r5
    212c:	4c03      	ldr	r4, [pc, #12]	; (213c <_mci_sync_send_cmd+0x54>)
    212e:	47a0      	blx	r4
    2130:	bd70      	pop	{r4, r5, r6, pc}
    2132:	bf00      	nop
    2134:	000048bc 	.word	0x000048bc
    2138:	000012dd 	.word	0x000012dd
    213c:	00001ef9 	.word	0x00001ef9

00002140 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    2140:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2142:	4604      	mov	r4, r0
    2144:	b160      	cbz	r0, 2160 <_mci_sync_get_response+0x20>
    2146:	6803      	ldr	r3, [r0, #0]
    2148:	b143      	cbz	r3, 215c <_mci_sync_get_response+0x1c>
    214a:	2001      	movs	r0, #1
    214c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    2150:	4904      	ldr	r1, [pc, #16]	; (2164 <_mci_sync_get_response+0x24>)
    2152:	4b05      	ldr	r3, [pc, #20]	; (2168 <_mci_sync_get_response+0x28>)
    2154:	4798      	blx	r3
	hw = mci_dev->hw;
    2156:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2158:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    215a:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    215c:	2000      	movs	r0, #0
    215e:	e7f5      	b.n	214c <_mci_sync_get_response+0xc>
    2160:	2000      	movs	r0, #0
    2162:	e7f3      	b.n	214c <_mci_sync_get_response+0xc>
    2164:	000048bc 	.word	0x000048bc
    2168:	000012dd 	.word	0x000012dd

0000216c <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    216c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2170:	460d      	mov	r5, r1
    2172:	4690      	mov	r8, r2
    2174:	461f      	mov	r7, r3
    2176:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    217a:	4604      	mov	r4, r0
    217c:	2800      	cmp	r0, #0
    217e:	d031      	beq.n	21e4 <_mci_sync_adtc_start+0x78>
    2180:	6803      	ldr	r3, [r0, #0]
    2182:	b36b      	cbz	r3, 21e0 <_mci_sync_adtc_start+0x74>
    2184:	2001      	movs	r0, #1
    2186:	f240 1293 	movw	r2, #403	; 0x193
    218a:	4921      	ldr	r1, [pc, #132]	; (2210 <_mci_sync_adtc_start+0xa4>)
    218c:	4b21      	ldr	r3, [pc, #132]	; (2214 <_mci_sync_adtc_start+0xa8>)
    218e:	4798      	blx	r3
	hw = mci_dev->hw;
    2190:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2192:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    2194:	f013 0f01 	tst.w	r3, #1
    2198:	d131      	bne.n	21fe <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    219a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    219c:	f013 0f02 	tst.w	r3, #2
    21a0:	d130      	bne.n	2204 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    21a2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    21a6:	d01f      	beq.n	21e8 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    21a8:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    21aa:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    21ae:	d104      	bne.n	21ba <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    21b0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    21b4:	d01a      	beq.n	21ec <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    21b6:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    21ba:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    21bc:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    21be:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    21c2:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    21c4:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    21c6:	2200      	movs	r2, #0
    21c8:	2300      	movs	r3, #0
    21ca:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    21ce:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    21d0:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    21d2:	4643      	mov	r3, r8
    21d4:	462a      	mov	r2, r5
    21d6:	2120      	movs	r1, #32
    21d8:	4c0f      	ldr	r4, [pc, #60]	; (2218 <_mci_sync_adtc_start+0xac>)
    21da:	47a0      	blx	r4
    21dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    21e0:	2000      	movs	r0, #0
    21e2:	e7d0      	b.n	2186 <_mci_sync_adtc_start+0x1a>
    21e4:	2000      	movs	r0, #0
    21e6:	e7ce      	b.n	2186 <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    21e8:	2310      	movs	r3, #16
    21ea:	e7de      	b.n	21aa <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    21ec:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    21f0:	d1e3      	bne.n	21ba <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    21f2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    21f6:	d008      	beq.n	220a <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    21f8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    21fc:	e7dd      	b.n	21ba <_mci_sync_adtc_start+0x4e>
		return false;
    21fe:	2000      	movs	r0, #0
    2200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2204:	2000      	movs	r0, #0
    2206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    220a:	2000      	movs	r0, #0
}
    220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2210:	000048bc 	.word	0x000048bc
    2214:	000012dd 	.word	0x000012dd
    2218:	00001ef9 	.word	0x00001ef9

0000221c <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    221e:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2220:	4605      	mov	r5, r0
    2222:	2800      	cmp	r0, #0
    2224:	d03f      	beq.n	22a6 <_mci_sync_write_word+0x8a>
    2226:	6803      	ldr	r3, [r0, #0]
    2228:	2b00      	cmp	r3, #0
    222a:	d03a      	beq.n	22a2 <_mci_sync_write_word+0x86>
    222c:	2001      	movs	r0, #1
    222e:	f240 220f 	movw	r2, #527	; 0x20f
    2232:	4924      	ldr	r1, [pc, #144]	; (22c4 <_mci_sync_write_word+0xa8>)
    2234:	4b24      	ldr	r3, [pc, #144]	; (22c8 <_mci_sync_write_word+0xac>)
    2236:	4798      	blx	r3
	hw = mci_dev->hw;
    2238:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    223a:	8a2a      	ldrh	r2, [r5, #16]
    223c:	2300      	movs	r3, #0
    223e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2242:	4e22      	ldr	r6, [pc, #136]	; (22cc <_mci_sync_write_word+0xb0>)
    2244:	47b0      	blx	r6
    2246:	4313      	orrs	r3, r2
    2248:	d10c      	bne.n	2264 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    224a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    224c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2250:	bb5b      	cbnz	r3, 22aa <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2252:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    2254:	f013 0f10 	tst.w	r3, #16
    2258:	d0f7      	beq.n	224a <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    225a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    225c:	b29b      	uxth	r3, r3
    225e:	f043 0310 	orr.w	r3, r3, #16
    2262:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    2264:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    2266:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    226a:	3204      	adds	r2, #4
    226c:	f143 0300 	adc.w	r3, r3, #0
    2270:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2274:	8a28      	ldrh	r0, [r5, #16]
    2276:	8a6e      	ldrh	r6, [r5, #18]
    2278:	fba0 0106 	umull	r0, r1, r0, r6
    227c:	428b      	cmp	r3, r1
    227e:	bf08      	it	eq
    2280:	4282      	cmpeq	r2, r0
    2282:	d31c      	bcc.n	22be <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    2284:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2286:	f003 0370 	and.w	r3, r3, #112	; 0x70
    228a:	b99b      	cbnz	r3, 22b4 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    228c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    228e:	f013 0f02 	tst.w	r3, #2
    2292:	d0f7      	beq.n	2284 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2294:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2296:	b29b      	uxth	r3, r3
    2298:	f043 0302 	orr.w	r3, r3, #2
    229c:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    229e:	2001      	movs	r0, #1
    22a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    22a2:	2000      	movs	r0, #0
    22a4:	e7c3      	b.n	222e <_mci_sync_write_word+0x12>
    22a6:	2000      	movs	r0, #0
    22a8:	e7c1      	b.n	222e <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    22aa:	4620      	mov	r0, r4
    22ac:	4b08      	ldr	r3, [pc, #32]	; (22d0 <_mci_sync_write_word+0xb4>)
    22ae:	4798      	blx	r3
				return false;
    22b0:	2000      	movs	r0, #0
    22b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    22b4:	4620      	mov	r0, r4
    22b6:	4b06      	ldr	r3, [pc, #24]	; (22d0 <_mci_sync_write_word+0xb4>)
    22b8:	4798      	blx	r3
			return false;
    22ba:	2000      	movs	r0, #0
    22bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    22be:	2001      	movs	r0, #1
}
    22c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22c2:	bf00      	nop
    22c4:	000048bc 	.word	0x000048bc
    22c8:	000012dd 	.word	0x000012dd
    22cc:	00004355 	.word	0x00004355
    22d0:	00001e91 	.word	0x00001e91

000022d4 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    22d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22d8:	460e      	mov	r6, r1
    22da:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    22dc:	4607      	mov	r7, r0
    22de:	b1f0      	cbz	r0, 231e <_mci_sync_start_write_blocks+0x4a>
    22e0:	6803      	ldr	r3, [r0, #0]
    22e2:	b1d3      	cbz	r3, 231a <_mci_sync_start_write_blocks+0x46>
    22e4:	2001      	movs	r0, #1
    22e6:	4d18      	ldr	r5, [pc, #96]	; (2348 <_mci_sync_start_write_blocks+0x74>)
    22e8:	f240 225a 	movw	r2, #602	; 0x25a
    22ec:	4629      	mov	r1, r5
    22ee:	4c17      	ldr	r4, [pc, #92]	; (234c <_mci_sync_start_write_blocks+0x78>)
    22f0:	47a0      	blx	r4
	ASSERT(nb_block);
    22f2:	f240 225b 	movw	r2, #603	; 0x25b
    22f6:	4629      	mov	r1, r5
    22f8:	f118 0000 	adds.w	r0, r8, #0
    22fc:	bf18      	it	ne
    22fe:	2001      	movne	r0, #1
    2300:	47a0      	blx	r4
	ASSERT(src);
    2302:	f44f 7217 	mov.w	r2, #604	; 0x25c
    2306:	4629      	mov	r1, r5
    2308:	1c30      	adds	r0, r6, #0
    230a:	bf18      	it	ne
    230c:	2001      	movne	r0, #1
    230e:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    2310:	8a3d      	ldrh	r5, [r7, #16]
    2312:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    2316:	2404      	movs	r4, #4

	while (nb_data) {
    2318:	e005      	b.n	2326 <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    231a:	2000      	movs	r0, #0
    231c:	e7e3      	b.n	22e6 <_mci_sync_start_write_blocks+0x12>
    231e:	2000      	movs	r0, #0
    2320:	e7e1      	b.n	22e6 <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    2322:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2324:	4426      	add	r6, r4
	while (nb_data) {
    2326:	b165      	cbz	r5, 2342 <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    2328:	6831      	ldr	r1, [r6, #0]
    232a:	4638      	mov	r0, r7
    232c:	4b08      	ldr	r3, [pc, #32]	; (2350 <_mci_sync_start_write_blocks+0x7c>)
    232e:	4798      	blx	r3
		if (nb_data < nbytes) {
    2330:	42a5      	cmp	r5, r4
    2332:	d2f6      	bcs.n	2322 <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2334:	8a3b      	ldrh	r3, [r7, #16]
    2336:	fb93 f2f4 	sdiv	r2, r3, r4
    233a:	fb04 3412 	mls	r4, r4, r2, r3
    233e:	b2e4      	uxtb	r4, r4
    2340:	e7ef      	b.n	2322 <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    2342:	2001      	movs	r0, #1
    2344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2348:	000048bc 	.word	0x000048bc
    234c:	000012dd 	.word	0x000012dd
    2350:	0000221d 	.word	0x0000221d

00002354 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    2354:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    2356:	b158      	cbz	r0, 2370 <_mci_sync_wait_end_of_write_blocks+0x1c>
    2358:	6803      	ldr	r3, [r0, #0]
    235a:	b13b      	cbz	r3, 236c <_mci_sync_wait_end_of_write_blocks+0x18>
    235c:	2001      	movs	r0, #1
    235e:	f44f 721f 	mov.w	r2, #636	; 0x27c
    2362:	4904      	ldr	r1, [pc, #16]	; (2374 <_mci_sync_wait_end_of_write_blocks+0x20>)
    2364:	4b04      	ldr	r3, [pc, #16]	; (2378 <_mci_sync_wait_end_of_write_blocks+0x24>)
    2366:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    2368:	2001      	movs	r0, #1
    236a:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    236c:	2000      	movs	r0, #0
    236e:	e7f6      	b.n	235e <_mci_sync_wait_end_of_write_blocks+0xa>
    2370:	2000      	movs	r0, #0
    2372:	e7f4      	b.n	235e <_mci_sync_wait_end_of_write_blocks+0xa>
    2374:	000048bc 	.word	0x000048bc
    2378:	000012dd 	.word	0x000012dd

0000237c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    237c:	4b03      	ldr	r3, [pc, #12]	; (238c <_system_time_init+0x10>)
    237e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2382:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2384:	2205      	movs	r2, #5
    2386:	601a      	str	r2, [r3, #0]
    2388:	4770      	bx	lr
    238a:	bf00      	nop
    238c:	e000e010 	.word	0xe000e010

00002390 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2390:	b508      	push	{r3, lr}
	_system_time_init(hw);
    2392:	4b01      	ldr	r3, [pc, #4]	; (2398 <_delay_init+0x8>)
    2394:	4798      	blx	r3
    2396:	bd08      	pop	{r3, pc}
    2398:	0000237d 	.word	0x0000237d

0000239c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    239c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    239e:	e00d      	b.n	23bc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    23a0:	4b0d      	ldr	r3, [pc, #52]	; (23d8 <_delay_cycles+0x3c>)
    23a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    23a6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    23a8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    23aa:	4b0b      	ldr	r3, [pc, #44]	; (23d8 <_delay_cycles+0x3c>)
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    23b2:	d0fa      	beq.n	23aa <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    23b4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    23b8:	3101      	adds	r1, #1
	while (n--) {
    23ba:	4610      	mov	r0, r2
    23bc:	1e43      	subs	r3, r0, #1
    23be:	b2da      	uxtb	r2, r3
    23c0:	2800      	cmp	r0, #0
    23c2:	d1ed      	bne.n	23a0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    23c4:	4b04      	ldr	r3, [pc, #16]	; (23d8 <_delay_cycles+0x3c>)
    23c6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    23c8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    23ca:	4b03      	ldr	r3, [pc, #12]	; (23d8 <_delay_cycles+0x3c>)
    23cc:	681b      	ldr	r3, [r3, #0]
    23ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    23d2:	d0fa      	beq.n	23ca <_delay_cycles+0x2e>
		;
}
    23d4:	4770      	bx	lr
    23d6:	bf00      	nop
    23d8:	e000e010 	.word	0xe000e010

000023dc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    23dc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    23de:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    23e0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    23e2:	f012 0f01 	tst.w	r2, #1
    23e6:	d100      	bne.n	23ea <tc_interrupt_handler+0xe>
    23e8:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    23ea:	2201      	movs	r2, #1
    23ec:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    23ee:	6803      	ldr	r3, [r0, #0]
    23f0:	4798      	blx	r3
	}
}
    23f2:	e7f9      	b.n	23e8 <tc_interrupt_handler+0xc>

000023f4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    23f4:	b538      	push	{r3, r4, r5, lr}
    23f6:	4605      	mov	r5, r0
	void *const hw = device->hw;
    23f8:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    23fa:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    23fc:	f013 0f01 	tst.w	r3, #1
    2400:	d004      	beq.n	240c <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2402:	2301      	movs	r3, #1
    2404:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2406:	6803      	ldr	r3, [r0, #0]
    2408:	b103      	cbz	r3, 240c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    240a:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    240c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    240e:	f013 0f02 	tst.w	r3, #2
    2412:	d005      	beq.n	2420 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2414:	2302      	movs	r3, #2
    2416:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2418:	686b      	ldr	r3, [r5, #4]
    241a:	b10b      	cbz	r3, 2420 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    241c:	4628      	mov	r0, r5
    241e:	4798      	blx	r3
    2420:	bd38      	pop	{r3, r4, r5, pc}
	...

00002424 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <_tc_init_irq_param+0x1c>)
    2426:	4298      	cmp	r0, r3
    2428:	d003      	beq.n	2432 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    242a:	4b06      	ldr	r3, [pc, #24]	; (2444 <_tc_init_irq_param+0x20>)
    242c:	4298      	cmp	r0, r3
    242e:	d003      	beq.n	2438 <_tc_init_irq_param+0x14>
    2430:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <_tc_init_irq_param+0x24>)
    2434:	6019      	str	r1, [r3, #0]
    2436:	e7f8      	b.n	242a <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2438:	4b03      	ldr	r3, [pc, #12]	; (2448 <_tc_init_irq_param+0x24>)
    243a:	6059      	str	r1, [r3, #4]
	}
}
    243c:	e7f8      	b.n	2430 <_tc_init_irq_param+0xc>
    243e:	bf00      	nop
    2440:	40003800 	.word	0x40003800
    2444:	40003c00 	.word	0x40003c00
    2448:	20000208 	.word	0x20000208

0000244c <get_tc_index>:
{
    244c:	b570      	push	{r4, r5, r6, lr}
    244e:	b086      	sub	sp, #24
    2450:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2452:	466c      	mov	r4, sp
    2454:	4d17      	ldr	r5, [pc, #92]	; (24b4 <get_tc_index+0x68>)
    2456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    245a:	e895 0003 	ldmia.w	r5, {r0, r1}
    245e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2462:	2300      	movs	r3, #0
    2464:	2b05      	cmp	r3, #5
    2466:	d80a      	bhi.n	247e <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2468:	aa06      	add	r2, sp, #24
    246a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    246e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2472:	42b2      	cmp	r2, r6
    2474:	d001      	beq.n	247a <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2476:	3301      	adds	r3, #1
    2478:	e7f4      	b.n	2464 <get_tc_index+0x18>
			return i;
    247a:	b2db      	uxtb	r3, r3
    247c:	e000      	b.n	2480 <get_tc_index+0x34>
		}
	}
	return 0;
    247e:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2480:	2200      	movs	r2, #0
    2482:	2a01      	cmp	r2, #1
    2484:	d80b      	bhi.n	249e <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2486:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    248a:	0081      	lsls	r1, r0, #2
    248c:	480a      	ldr	r0, [pc, #40]	; (24b8 <get_tc_index+0x6c>)
    248e:	5c41      	ldrb	r1, [r0, r1]
    2490:	4299      	cmp	r1, r3
    2492:	d002      	beq.n	249a <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2494:	3201      	adds	r2, #1
    2496:	b2d2      	uxtb	r2, r2
    2498:	e7f3      	b.n	2482 <get_tc_index+0x36>
			return i;
    249a:	b250      	sxtb	r0, r2
    249c:	e007      	b.n	24ae <get_tc_index+0x62>
	ASSERT(false);
    249e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    24a2:	4906      	ldr	r1, [pc, #24]	; (24bc <get_tc_index+0x70>)
    24a4:	2000      	movs	r0, #0
    24a6:	4b06      	ldr	r3, [pc, #24]	; (24c0 <get_tc_index+0x74>)
    24a8:	4798      	blx	r3
	return -1;
    24aa:	f04f 30ff 	mov.w	r0, #4294967295
}
    24ae:	b006      	add	sp, #24
    24b0:	bd70      	pop	{r4, r5, r6, pc}
    24b2:	bf00      	nop
    24b4:	000048d4 	.word	0x000048d4
    24b8:	20000000 	.word	0x20000000
    24bc:	000048ec 	.word	0x000048ec
    24c0:	000012dd 	.word	0x000012dd

000024c4 <_timer_init>:
{
    24c4:	b570      	push	{r4, r5, r6, lr}
    24c6:	4606      	mov	r6, r0
    24c8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    24ca:	4608      	mov	r0, r1
    24cc:	4b6c      	ldr	r3, [pc, #432]	; (2680 <_timer_init+0x1bc>)
    24ce:	4798      	blx	r3
    24d0:	4605      	mov	r5, r0
	device->hw = hw;
    24d2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    24d4:	228f      	movs	r2, #143	; 0x8f
    24d6:	496b      	ldr	r1, [pc, #428]	; (2684 <_timer_init+0x1c0>)
    24d8:	2001      	movs	r0, #1
    24da:	4b6b      	ldr	r3, [pc, #428]	; (2688 <_timer_init+0x1c4>)
    24dc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    24de:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    24e0:	f013 0f01 	tst.w	r3, #1
    24e4:	d119      	bne.n	251a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    24e6:	6923      	ldr	r3, [r4, #16]
    24e8:	f013 0f03 	tst.w	r3, #3
    24ec:	d1fb      	bne.n	24e6 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    24ee:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    24f0:	f013 0f02 	tst.w	r3, #2
    24f4:	d00b      	beq.n	250e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    24f6:	6823      	ldr	r3, [r4, #0]
    24f8:	f023 0302 	bic.w	r3, r3, #2
    24fc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    24fe:	6923      	ldr	r3, [r4, #16]
    2500:	f013 0f03 	tst.w	r3, #3
    2504:	d1fb      	bne.n	24fe <_timer_init+0x3a>
    2506:	6923      	ldr	r3, [r4, #16]
    2508:	f013 0f02 	tst.w	r3, #2
    250c:	d1fb      	bne.n	2506 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    250e:	2301      	movs	r3, #1
    2510:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2512:	6923      	ldr	r3, [r4, #16]
    2514:	f013 0f03 	tst.w	r3, #3
    2518:	d1fb      	bne.n	2512 <_timer_init+0x4e>
    251a:	6923      	ldr	r3, [r4, #16]
    251c:	f013 0f01 	tst.w	r3, #1
    2520:	d1fb      	bne.n	251a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2522:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2526:	009a      	lsls	r2, r3, #2
    2528:	4b58      	ldr	r3, [pc, #352]	; (268c <_timer_init+0x1c8>)
    252a:	4413      	add	r3, r2
    252c:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    252e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2530:	6923      	ldr	r3, [r4, #16]
    2532:	f013 0f03 	tst.w	r3, #3
    2536:	d1fb      	bne.n	2530 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2538:	00aa      	lsls	r2, r5, #2
    253a:	442a      	add	r2, r5
    253c:	0091      	lsls	r1, r2, #2
    253e:	4b53      	ldr	r3, [pc, #332]	; (268c <_timer_init+0x1c8>)
    2540:	440b      	add	r3, r1
    2542:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2544:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2546:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2548:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    254a:	2201      	movs	r2, #1
    254c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    254e:	685b      	ldr	r3, [r3, #4]
    2550:	f003 030c 	and.w	r3, r3, #12
    2554:	2b08      	cmp	r3, #8
    2556:	d05b      	beq.n	2610 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2558:	2b00      	cmp	r3, #0
    255a:	d16d      	bne.n	2638 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    255c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2560:	009a      	lsls	r2, r3, #2
    2562:	4b4a      	ldr	r3, [pc, #296]	; (268c <_timer_init+0x1c8>)
    2564:	4413      	add	r3, r2
    2566:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2568:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    256a:	6923      	ldr	r3, [r4, #16]
    256c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2570:	d1fb      	bne.n	256a <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2572:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2576:	009a      	lsls	r2, r3, #2
    2578:	4b44      	ldr	r3, [pc, #272]	; (268c <_timer_init+0x1c8>)
    257a:	4413      	add	r3, r2
    257c:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    257e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2580:	6923      	ldr	r3, [r4, #16]
    2582:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2586:	d1fb      	bne.n	2580 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2588:	2301      	movs	r3, #1
    258a:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    258c:	4631      	mov	r1, r6
    258e:	4620      	mov	r0, r4
    2590:	4b3f      	ldr	r3, [pc, #252]	; (2690 <_timer_init+0x1cc>)
    2592:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2594:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2598:	009a      	lsls	r2, r3, #2
    259a:	4b3c      	ldr	r3, [pc, #240]	; (268c <_timer_init+0x1c8>)
    259c:	4413      	add	r3, r2
    259e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    25a2:	2b00      	cmp	r3, #0
    25a4:	db0d      	blt.n	25c2 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25a6:	095a      	lsrs	r2, r3, #5
    25a8:	f003 031f 	and.w	r3, r3, #31
    25ac:	2101      	movs	r1, #1
    25ae:	fa01 f303 	lsl.w	r3, r1, r3
    25b2:	3220      	adds	r2, #32
    25b4:	4937      	ldr	r1, [pc, #220]	; (2694 <_timer_init+0x1d0>)
    25b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25be:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    25c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25c6:	009a      	lsls	r2, r3, #2
    25c8:	4b30      	ldr	r3, [pc, #192]	; (268c <_timer_init+0x1c8>)
    25ca:	4413      	add	r3, r2
    25cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    25d0:	2b00      	cmp	r3, #0
    25d2:	db09      	blt.n	25e8 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25d4:	095a      	lsrs	r2, r3, #5
    25d6:	f003 031f 	and.w	r3, r3, #31
    25da:	2101      	movs	r1, #1
    25dc:	fa01 f303 	lsl.w	r3, r1, r3
    25e0:	3260      	adds	r2, #96	; 0x60
    25e2:	492c      	ldr	r1, [pc, #176]	; (2694 <_timer_init+0x1d0>)
    25e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    25e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    25ec:	00aa      	lsls	r2, r5, #2
    25ee:	4b27      	ldr	r3, [pc, #156]	; (268c <_timer_init+0x1c8>)
    25f0:	4413      	add	r3, r2
    25f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    25f6:	2b00      	cmp	r3, #0
    25f8:	db08      	blt.n	260c <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25fa:	0959      	lsrs	r1, r3, #5
    25fc:	f003 031f 	and.w	r3, r3, #31
    2600:	2201      	movs	r2, #1
    2602:	fa02 f303 	lsl.w	r3, r2, r3
    2606:	4a23      	ldr	r2, [pc, #140]	; (2694 <_timer_init+0x1d0>)
    2608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    260c:	2000      	movs	r0, #0
    260e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2610:	4b1e      	ldr	r3, [pc, #120]	; (268c <_timer_init+0x1c8>)
    2612:	440b      	add	r3, r1
    2614:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2616:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2618:	6923      	ldr	r3, [r4, #16]
    261a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    261e:	d1fb      	bne.n	2618 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2620:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2624:	009a      	lsls	r2, r3, #2
    2626:	4b19      	ldr	r3, [pc, #100]	; (268c <_timer_init+0x1c8>)
    2628:	4413      	add	r3, r2
    262a:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    262c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    262e:	6923      	ldr	r3, [r4, #16]
    2630:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2634:	d1fb      	bne.n	262e <_timer_init+0x16a>
    2636:	e7a7      	b.n	2588 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2638:	2b04      	cmp	r3, #4
    263a:	d1a5      	bne.n	2588 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    263c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2640:	009a      	lsls	r2, r3, #2
    2642:	4b12      	ldr	r3, [pc, #72]	; (268c <_timer_init+0x1c8>)
    2644:	4413      	add	r3, r2
    2646:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2648:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    264a:	6923      	ldr	r3, [r4, #16]
    264c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2650:	d1fb      	bne.n	264a <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2652:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2656:	009a      	lsls	r2, r3, #2
    2658:	4b0c      	ldr	r3, [pc, #48]	; (268c <_timer_init+0x1c8>)
    265a:	4413      	add	r3, r2
    265c:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    265e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2660:	6923      	ldr	r3, [r4, #16]
    2662:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2666:	d1fb      	bne.n	2660 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2668:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    266c:	009a      	lsls	r2, r3, #2
    266e:	4b07      	ldr	r3, [pc, #28]	; (268c <_timer_init+0x1c8>)
    2670:	4413      	add	r3, r2
    2672:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2674:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2676:	6923      	ldr	r3, [r4, #16]
    2678:	f013 0f20 	tst.w	r3, #32
    267c:	d1fb      	bne.n	2676 <_timer_init+0x1b2>
    267e:	e783      	b.n	2588 <_timer_init+0xc4>
    2680:	0000244d 	.word	0x0000244d
    2684:	000048ec 	.word	0x000048ec
    2688:	000012dd 	.word	0x000012dd
    268c:	20000000 	.word	0x20000000
    2690:	00002425 	.word	0x00002425
    2694:	e000e100 	.word	0xe000e100

00002698 <_pwm_init>:
{
    2698:	b570      	push	{r4, r5, r6, lr}
    269a:	4606      	mov	r6, r0
    269c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    269e:	4608      	mov	r0, r1
    26a0:	4b59      	ldr	r3, [pc, #356]	; (2808 <_pwm_init+0x170>)
    26a2:	4798      	blx	r3
    26a4:	4605      	mov	r5, r0
	device->hw = hw;
    26a6:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    26a8:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    26aa:	f013 0f01 	tst.w	r3, #1
    26ae:	d119      	bne.n	26e4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26b0:	6923      	ldr	r3, [r4, #16]
    26b2:	f013 0f03 	tst.w	r3, #3
    26b6:	d1fb      	bne.n	26b0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    26b8:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    26ba:	f013 0f02 	tst.w	r3, #2
    26be:	d00b      	beq.n	26d8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    26c0:	6823      	ldr	r3, [r4, #0]
    26c2:	f023 0302 	bic.w	r3, r3, #2
    26c6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26c8:	6923      	ldr	r3, [r4, #16]
    26ca:	f013 0f03 	tst.w	r3, #3
    26ce:	d1fb      	bne.n	26c8 <_pwm_init+0x30>
    26d0:	6923      	ldr	r3, [r4, #16]
    26d2:	f013 0f02 	tst.w	r3, #2
    26d6:	d1fb      	bne.n	26d0 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26d8:	2301      	movs	r3, #1
    26da:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26dc:	6923      	ldr	r3, [r4, #16]
    26de:	f013 0f03 	tst.w	r3, #3
    26e2:	d1fb      	bne.n	26dc <_pwm_init+0x44>
    26e4:	6923      	ldr	r3, [r4, #16]
    26e6:	f013 0f01 	tst.w	r3, #1
    26ea:	d1fb      	bne.n	26e4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    26ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26f0:	009a      	lsls	r2, r3, #2
    26f2:	4b46      	ldr	r3, [pc, #280]	; (280c <_pwm_init+0x174>)
    26f4:	4413      	add	r3, r2
    26f6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26f8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26fa:	6923      	ldr	r3, [r4, #16]
    26fc:	f013 0f03 	tst.w	r3, #3
    2700:	d1fb      	bne.n	26fa <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2702:	00aa      	lsls	r2, r5, #2
    2704:	442a      	add	r2, r5
    2706:	0091      	lsls	r1, r2, #2
    2708:	4b40      	ldr	r3, [pc, #256]	; (280c <_pwm_init+0x174>)
    270a:	440b      	add	r3, r1
    270c:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    270e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2710:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2712:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2714:	2203      	movs	r2, #3
    2716:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2718:	685b      	ldr	r3, [r3, #4]
    271a:	f003 030c 	and.w	r3, r3, #12
    271e:	2b08      	cmp	r3, #8
    2720:	d059      	beq.n	27d6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2722:	2b00      	cmp	r3, #0
    2724:	d16b      	bne.n	27fe <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2726:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    272a:	009a      	lsls	r2, r3, #2
    272c:	4b37      	ldr	r3, [pc, #220]	; (280c <_pwm_init+0x174>)
    272e:	4413      	add	r3, r2
    2730:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2732:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2734:	6923      	ldr	r3, [r4, #16]
    2736:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    273a:	d1fb      	bne.n	2734 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    273c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2740:	009a      	lsls	r2, r3, #2
    2742:	4b32      	ldr	r3, [pc, #200]	; (280c <_pwm_init+0x174>)
    2744:	4413      	add	r3, r2
    2746:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2748:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    274a:	6923      	ldr	r3, [r4, #16]
    274c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2750:	d1fb      	bne.n	274a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2752:	4631      	mov	r1, r6
    2754:	4620      	mov	r0, r4
    2756:	4b2e      	ldr	r3, [pc, #184]	; (2810 <_pwm_init+0x178>)
    2758:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    275a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    275e:	009a      	lsls	r2, r3, #2
    2760:	4b2a      	ldr	r3, [pc, #168]	; (280c <_pwm_init+0x174>)
    2762:	4413      	add	r3, r2
    2764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2768:	2b00      	cmp	r3, #0
    276a:	db0d      	blt.n	2788 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    276c:	095a      	lsrs	r2, r3, #5
    276e:	f003 031f 	and.w	r3, r3, #31
    2772:	2101      	movs	r1, #1
    2774:	fa01 f303 	lsl.w	r3, r1, r3
    2778:	3220      	adds	r2, #32
    277a:	4926      	ldr	r1, [pc, #152]	; (2814 <_pwm_init+0x17c>)
    277c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2784:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2788:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    278c:	009a      	lsls	r2, r3, #2
    278e:	4b1f      	ldr	r3, [pc, #124]	; (280c <_pwm_init+0x174>)
    2790:	4413      	add	r3, r2
    2792:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2796:	2b00      	cmp	r3, #0
    2798:	db09      	blt.n	27ae <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    279a:	095a      	lsrs	r2, r3, #5
    279c:	f003 031f 	and.w	r3, r3, #31
    27a0:	2101      	movs	r1, #1
    27a2:	fa01 f303 	lsl.w	r3, r1, r3
    27a6:	3260      	adds	r2, #96	; 0x60
    27a8:	491a      	ldr	r1, [pc, #104]	; (2814 <_pwm_init+0x17c>)
    27aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    27ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    27b2:	00aa      	lsls	r2, r5, #2
    27b4:	4b15      	ldr	r3, [pc, #84]	; (280c <_pwm_init+0x174>)
    27b6:	4413      	add	r3, r2
    27b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    27bc:	2b00      	cmp	r3, #0
    27be:	db21      	blt.n	2804 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27c0:	0959      	lsrs	r1, r3, #5
    27c2:	f003 031f 	and.w	r3, r3, #31
    27c6:	2201      	movs	r2, #1
    27c8:	fa02 f303 	lsl.w	r3, r2, r3
    27cc:	4a11      	ldr	r2, [pc, #68]	; (2814 <_pwm_init+0x17c>)
    27ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    27d2:	2000      	movs	r0, #0
    27d4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    27d6:	4b0d      	ldr	r3, [pc, #52]	; (280c <_pwm_init+0x174>)
    27d8:	440b      	add	r3, r1
    27da:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27dc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27de:	6923      	ldr	r3, [r4, #16]
    27e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27e4:	d1fb      	bne.n	27de <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    27e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27ea:	009a      	lsls	r2, r3, #2
    27ec:	4b07      	ldr	r3, [pc, #28]	; (280c <_pwm_init+0x174>)
    27ee:	4413      	add	r3, r2
    27f0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27f2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27f4:	6923      	ldr	r3, [r4, #16]
    27f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27fa:	d1fb      	bne.n	27f4 <_pwm_init+0x15c>
    27fc:	e7a9      	b.n	2752 <_pwm_init+0xba>
		return -1;
    27fe:	f04f 30ff 	mov.w	r0, #4294967295
    2802:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2804:	2000      	movs	r0, #0
}
    2806:	bd70      	pop	{r4, r5, r6, pc}
    2808:	0000244d 	.word	0x0000244d
    280c:	20000000 	.word	0x20000000
    2810:	00002425 	.word	0x00002425
    2814:	e000e100 	.word	0xe000e100

00002818 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2818:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    281a:	6813      	ldr	r3, [r2, #0]
    281c:	f043 0302 	orr.w	r3, r3, #2
    2820:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2822:	6913      	ldr	r3, [r2, #16]
    2824:	f013 0f03 	tst.w	r3, #3
    2828:	d1fb      	bne.n	2822 <_timer_start+0xa>
}
    282a:	4770      	bx	lr

0000282c <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    282c:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    282e:	6813      	ldr	r3, [r2, #0]
    2830:	f043 0302 	orr.w	r3, r3, #2
    2834:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2836:	6913      	ldr	r3, [r2, #16]
    2838:	f013 0f03 	tst.w	r3, #3
    283c:	d1fb      	bne.n	2836 <_pwm_enable+0xa>
}
    283e:	4770      	bx	lr

00002840 <_pwm_set_param>:
{
    2840:	b570      	push	{r4, r5, r6, lr}
    2842:	460e      	mov	r6, r1
    2844:	4615      	mov	r5, r2
	void *const hw = device->hw;
    2846:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    2848:	4620      	mov	r0, r4
    284a:	4b1b      	ldr	r3, [pc, #108]	; (28b8 <_pwm_set_param+0x78>)
    284c:	4798      	blx	r3
	_tcs[i].cc0 = period;
    284e:	0082      	lsls	r2, r0, #2
    2850:	4402      	add	r2, r0
    2852:	0091      	lsls	r1, r2, #2
    2854:	4b19      	ldr	r3, [pc, #100]	; (28bc <_pwm_set_param+0x7c>)
    2856:	440b      	add	r3, r1
    2858:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    285a:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    285c:	685b      	ldr	r3, [r3, #4]
    285e:	f003 030c 	and.w	r3, r3, #12
    2862:	2b08      	cmp	r3, #8
    2864:	d016      	beq.n	2894 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    2866:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    286a:	009a      	lsls	r2, r3, #2
    286c:	4b13      	ldr	r3, [pc, #76]	; (28bc <_pwm_set_param+0x7c>)
    286e:	4413      	add	r3, r2
    2870:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2872:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2874:	6923      	ldr	r3, [r4, #16]
    2876:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    287a:	d1fb      	bne.n	2874 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    287c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2880:	0082      	lsls	r2, r0, #2
    2882:	4b0e      	ldr	r3, [pc, #56]	; (28bc <_pwm_set_param+0x7c>)
    2884:	4413      	add	r3, r2
    2886:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2888:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    288a:	6923      	ldr	r3, [r4, #16]
    288c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2890:	d1fb      	bne.n	288a <_pwm_set_param+0x4a>
    2892:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2894:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2896:	6923      	ldr	r3, [r4, #16]
    2898:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    289c:	d1fb      	bne.n	2896 <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    289e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    28a2:	0082      	lsls	r2, r0, #2
    28a4:	4b05      	ldr	r3, [pc, #20]	; (28bc <_pwm_set_param+0x7c>)
    28a6:	4413      	add	r3, r2
    28a8:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    28aa:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28ac:	6923      	ldr	r3, [r4, #16]
    28ae:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    28b2:	d1fb      	bne.n	28ac <_pwm_set_param+0x6c>
    28b4:	bd70      	pop	{r4, r5, r6, pc}
    28b6:	bf00      	nop
    28b8:	0000244d 	.word	0x0000244d
    28bc:	20000000 	.word	0x20000000

000028c0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    28c0:	68c2      	ldr	r2, [r0, #12]
    28c2:	6913      	ldr	r3, [r2, #16]
    28c4:	f013 0f03 	tst.w	r3, #3
    28c8:	d1fb      	bne.n	28c2 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28ca:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    28cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    28d0:	4770      	bx	lr

000028d2 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    28d2:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    28d4:	6913      	ldr	r3, [r2, #16]
    28d6:	f013 0f03 	tst.w	r3, #3
    28da:	d1fb      	bne.n	28d4 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28dc:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    28de:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    28e2:	4770      	bx	lr

000028e4 <_tc_get_timer>:
}
    28e4:	2000      	movs	r0, #0
    28e6:	4770      	bx	lr

000028e8 <_tc_get_pwm>:
}
    28e8:	2000      	movs	r0, #0
    28ea:	4770      	bx	lr

000028ec <_timer_set_irq>:
{
    28ec:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    28ee:	68c0      	ldr	r0, [r0, #12]
    28f0:	4b08      	ldr	r3, [pc, #32]	; (2914 <_timer_set_irq+0x28>)
    28f2:	4798      	blx	r3
    28f4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    28f6:	f240 129d 	movw	r2, #413	; 0x19d
    28fa:	4907      	ldr	r1, [pc, #28]	; (2918 <_timer_set_irq+0x2c>)
    28fc:	2001      	movs	r0, #1
    28fe:	4b07      	ldr	r3, [pc, #28]	; (291c <_timer_set_irq+0x30>)
    2900:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2902:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2906:	00a2      	lsls	r2, r4, #2
    2908:	4b05      	ldr	r3, [pc, #20]	; (2920 <_timer_set_irq+0x34>)
    290a:	4413      	add	r3, r2
    290c:	7898      	ldrb	r0, [r3, #2]
    290e:	4b05      	ldr	r3, [pc, #20]	; (2924 <_timer_set_irq+0x38>)
    2910:	4798      	blx	r3
    2912:	bd10      	pop	{r4, pc}
    2914:	0000244d 	.word	0x0000244d
    2918:	000048ec 	.word	0x000048ec
    291c:	000012dd 	.word	0x000012dd
    2920:	20000000 	.word	0x20000000
    2924:	000015ad 	.word	0x000015ad

00002928 <TC0_Handler>:
{
    2928:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    292a:	4b02      	ldr	r3, [pc, #8]	; (2934 <TC0_Handler+0xc>)
    292c:	6818      	ldr	r0, [r3, #0]
    292e:	4b02      	ldr	r3, [pc, #8]	; (2938 <TC0_Handler+0x10>)
    2930:	4798      	blx	r3
    2932:	bd08      	pop	{r3, pc}
    2934:	20000208 	.word	0x20000208
    2938:	000023f5 	.word	0x000023f5

0000293c <TC1_Handler>:
{
    293c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    293e:	4b02      	ldr	r3, [pc, #8]	; (2948 <TC1_Handler+0xc>)
    2940:	6858      	ldr	r0, [r3, #4]
    2942:	4b02      	ldr	r3, [pc, #8]	; (294c <TC1_Handler+0x10>)
    2944:	4798      	blx	r3
    2946:	bd08      	pop	{r3, pc}
    2948:	20000208 	.word	0x20000208
    294c:	000023dd 	.word	0x000023dd

00002950 <SDA_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2950:	4b06      	ldr	r3, [pc, #24]	; (296c <SDA_low+0x1c>)
    2952:	2201      	movs	r2, #1
    2954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2958:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    295c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2960:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2964:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2968:	4770      	bx	lr
    296a:	bf00      	nop
    296c:	41008000 	.word	0x41008000

00002970 <SDA_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2970:	4b06      	ldr	r3, [pc, #24]	; (298c <SDA_high+0x1c>)
    2972:	2201      	movs	r2, #1
    2974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2978:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    297c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2980:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2984:	4a02      	ldr	r2, [pc, #8]	; (2990 <SDA_high+0x20>)
    2986:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    298a:	4770      	bx	lr
    298c:	41008000 	.word	0x41008000
    2990:	c0020000 	.word	0xc0020000

00002994 <SDA_read>:
void SDA_high()
{
	gpio_set_pin_direction(I2C_BB_SDA, GPIO_DIRECTION_IN);
}
uint8_t SDA_read()
{
    2994:	b510      	push	{r4, lr}
    2996:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2998:	a801      	add	r0, sp, #4
    299a:	4b09      	ldr	r3, [pc, #36]	; (29c0 <SDA_read+0x2c>)
    299c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    299e:	4b09      	ldr	r3, [pc, #36]	; (29c4 <SDA_read+0x30>)
    29a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    29a4:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    29a8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    29ac:	4060      	eors	r0, r4
    29ae:	4010      	ands	r0, r2
    29b0:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    29b2:	a801      	add	r0, sp, #4
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <SDA_read+0x34>)
    29b6:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    29b8:	f004 0001 	and.w	r0, r4, #1
	return gpio_get_pin_level(I2C_BB_SDA);
}
    29bc:	b002      	add	sp, #8
    29be:	bd10      	pop	{r4, pc}
    29c0:	00000c99 	.word	0x00000c99
    29c4:	41008000 	.word	0x41008000
    29c8:	00000ca7 	.word	0x00000ca7

000029cc <SCL_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29cc:	4b06      	ldr	r3, [pc, #24]	; (29e8 <SCL_low+0x1c>)
    29ce:	2204      	movs	r2, #4
    29d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    29d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    29dc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    29e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop
    29e8:	41008000 	.word	0x41008000

000029ec <SCL_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    29ec:	4b06      	ldr	r3, [pc, #24]	; (2a08 <SCL_high+0x1c>)
    29ee:	2204      	movs	r2, #4
    29f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    29f8:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    29fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2a00:	4a02      	ldr	r2, [pc, #8]	; (2a0c <SCL_high+0x20>)
    2a02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2a06:	4770      	bx	lr
    2a08:	41008000 	.word	0x41008000
    2a0c:	c0020000 	.word	0xc0020000

00002a10 <I2C_BB_sleep>:
{
	gpio_set_pin_direction(I2C_BB_SCL, GPIO_DIRECTION_IN);
}

void I2C_BB_sleep(void)
{
    2a10:	b508      	push	{r3, lr}
	delay_us(SLEEP_LENGTH);
    2a12:	2064      	movs	r0, #100	; 0x64
    2a14:	4b01      	ldr	r3, [pc, #4]	; (2a1c <I2C_BB_sleep+0xc>)
    2a16:	4798      	blx	r3
    2a18:	bd08      	pop	{r3, pc}
    2a1a:	bf00      	nop
    2a1c:	00000d0d 	.word	0x00000d0d

00002a20 <I2C_BB_end>:
}


void I2C_BB_end()
{
    2a20:	b510      	push	{r4, lr}
	SDA_low();
    2a22:	4b05      	ldr	r3, [pc, #20]	; (2a38 <I2C_BB_end+0x18>)
    2a24:	4798      	blx	r3
	I2C_BB_sleep();
    2a26:	4c05      	ldr	r4, [pc, #20]	; (2a3c <I2C_BB_end+0x1c>)
    2a28:	47a0      	blx	r4
	SCL_high();
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <I2C_BB_end+0x20>)
    2a2c:	4798      	blx	r3
	I2C_BB_sleep();
    2a2e:	47a0      	blx	r4
	SDA_high();
    2a30:	4b04      	ldr	r3, [pc, #16]	; (2a44 <I2C_BB_end+0x24>)
    2a32:	4798      	blx	r3
	I2C_BB_sleep();
    2a34:	47a0      	blx	r4
    2a36:	bd10      	pop	{r4, pc}
    2a38:	00002951 	.word	0x00002951
    2a3c:	00002a11 	.word	0x00002a11
    2a40:	000029ed 	.word	0x000029ed
    2a44:	00002971 	.word	0x00002971

00002a48 <I2C_BB_byte_out>:
		
	return I2C_BB_byte_out(addr);	//should receive a bool?
}

bool I2C_BB_byte_out(uint8_t byte)
{
    2a48:	b570      	push	{r4, r5, r6, lr}
    2a4a:	4605      	mov	r5, r0
	uint8_t i, ack;

	// send byte	
	for (i = 0; i < 8; i++) {
    2a4c:	2400      	movs	r4, #0
    2a4e:	e00c      	b.n	2a6a <I2C_BB_byte_out+0x22>
		if (byte & 0x80)
			SDA_high();
    2a50:	4b13      	ldr	r3, [pc, #76]	; (2aa0 <I2C_BB_byte_out+0x58>)
    2a52:	4798      	blx	r3
		else
			SDA_low();
		SCL_high();
    2a54:	4b13      	ldr	r3, [pc, #76]	; (2aa4 <I2C_BB_byte_out+0x5c>)
    2a56:	4798      	blx	r3
		I2C_BB_sleep();
    2a58:	4e13      	ldr	r6, [pc, #76]	; (2aa8 <I2C_BB_byte_out+0x60>)
    2a5a:	47b0      	blx	r6
		SCL_low();
    2a5c:	4b13      	ldr	r3, [pc, #76]	; (2aac <I2C_BB_byte_out+0x64>)
    2a5e:	4798      	blx	r3
		byte <<= 1;
    2a60:	006d      	lsls	r5, r5, #1
    2a62:	b2ed      	uxtb	r5, r5
		I2C_BB_sleep();
    2a64:	47b0      	blx	r6
	for (i = 0; i < 8; i++) {
    2a66:	3401      	adds	r4, #1
    2a68:	b2e4      	uxtb	r4, r4
    2a6a:	2c07      	cmp	r4, #7
    2a6c:	d805      	bhi.n	2a7a <I2C_BB_byte_out+0x32>
		if (byte & 0x80)
    2a6e:	f015 0f80 	tst.w	r5, #128	; 0x80
    2a72:	d1ed      	bne.n	2a50 <I2C_BB_byte_out+0x8>
			SDA_low();
    2a74:	4b0e      	ldr	r3, [pc, #56]	; (2ab0 <I2C_BB_byte_out+0x68>)
    2a76:	4798      	blx	r3
    2a78:	e7ec      	b.n	2a54 <I2C_BB_byte_out+0xc>
	}
	// read ack bit
	SDA_high();
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <I2C_BB_byte_out+0x58>)
    2a7c:	4798      	blx	r3
	SCL_high();
    2a7e:	4b09      	ldr	r3, [pc, #36]	; (2aa4 <I2C_BB_byte_out+0x5c>)
    2a80:	4798      	blx	r3
	I2C_BB_sleep();
    2a82:	4c09      	ldr	r4, [pc, #36]	; (2aa8 <I2C_BB_byte_out+0x60>)
    2a84:	47a0      	blx	r4
	ack = SDA_read();
    2a86:	4b0b      	ldr	r3, [pc, #44]	; (2ab4 <I2C_BB_byte_out+0x6c>)
    2a88:	4798      	blx	r3
    2a8a:	4605      	mov	r5, r0
	SCL_low();
    2a8c:	4b07      	ldr	r3, [pc, #28]	; (2aac <I2C_BB_byte_out+0x64>)
    2a8e:	4798      	blx	r3
	I2C_BB_sleep();
    2a90:	47a0      	blx	r4
	SDA_low();
    2a92:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <I2C_BB_byte_out+0x68>)
    2a94:	4798      	blx	r3
	return (ack == 0) ? 1:0;   //
}
    2a96:	fab5 f085 	clz	r0, r5
    2a9a:	0940      	lsrs	r0, r0, #5
    2a9c:	bd70      	pop	{r4, r5, r6, pc}
    2a9e:	bf00      	nop
    2aa0:	00002971 	.word	0x00002971
    2aa4:	000029ed 	.word	0x000029ed
    2aa8:	00002a11 	.word	0x00002a11
    2aac:	000029cd 	.word	0x000029cd
    2ab0:	00002951 	.word	0x00002951
    2ab4:	00002995 	.word	0x00002995

00002ab8 <I2C_BB_begin>:
{
    2ab8:	b538      	push	{r3, r4, r5, lr}
    2aba:	4604      	mov	r4, r0
    2abc:	460d      	mov	r5, r1
	SDA_low();
    2abe:	4b07      	ldr	r3, [pc, #28]	; (2adc <I2C_BB_begin+0x24>)
    2ac0:	4798      	blx	r3
	I2C_BB_sleep();
    2ac2:	4b07      	ldr	r3, [pc, #28]	; (2ae0 <I2C_BB_begin+0x28>)
    2ac4:	4798      	blx	r3
	SCL_low();
    2ac6:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <I2C_BB_begin+0x2c>)
    2ac8:	4798      	blx	r3
	addr=addr<<1;		//7 bit address shifted one bit to make room for the RW bit
    2aca:	0060      	lsls	r0, r4, #1
    2acc:	b2c0      	uxtb	r0, r0
	if (read)
    2ace:	b10d      	cbz	r5, 2ad4 <I2C_BB_begin+0x1c>
		addr++;		
    2ad0:	3001      	adds	r0, #1
    2ad2:	b2c0      	uxtb	r0, r0
	return I2C_BB_byte_out(addr);	//should receive a bool?
    2ad4:	4b04      	ldr	r3, [pc, #16]	; (2ae8 <I2C_BB_begin+0x30>)
    2ad6:	4798      	blx	r3
}
    2ad8:	bd38      	pop	{r3, r4, r5, pc}
    2ada:	bf00      	nop
    2adc:	00002951 	.word	0x00002951
    2ae0:	00002a11 	.word	0x00002a11
    2ae4:	000029cd 	.word	0x000029cd
    2ae8:	00002a49 	.word	0x00002a49

00002aec <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2aec:	4b14      	ldr	r3, [pc, #80]	; (2b40 <I2C_BB_init+0x54>)
    2aee:	2201      	movs	r2, #1
    2af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2af8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2afc:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2b00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2b04:	490f      	ldr	r1, [pc, #60]	; (2b44 <I2C_BB_init+0x58>)
    2b06:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b0a:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b12:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b16:	2204      	movs	r2, #4
    2b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b20:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b24:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2b28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2b2c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b30:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b38:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    2b3c:	4770      	bx	lr
    2b3e:	bf00      	nop
    2b40:	41008000 	.word	0x41008000
    2b44:	c0020000 	.word	0xc0020000

00002b48 <I2C_BB_write>:
	// The HV892 is write only. 
	return 0;
}

uint8_t I2C_BB_write(uint8_t addr, uint8_t value)
{
    2b48:	b510      	push	{r4, lr}
    2b4a:	460c      	mov	r4, r1
	uint8_t rc = 0;

	rc = I2C_BB_begin(addr, 0);    //read ack
    2b4c:	2100      	movs	r1, #0
    2b4e:	4b05      	ldr	r3, [pc, #20]	; (2b64 <I2C_BB_write+0x1c>)
    2b50:	4798      	blx	r3
	if (rc == 1) { // ack was received
    2b52:	b918      	cbnz	r0, 2b5c <I2C_BB_write+0x14>
		I2C_BB_byte_out(value);
	}

	I2C_BB_end();
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <I2C_BB_write+0x20>)
    2b56:	4798      	blx	r3
	return 0;
}
    2b58:	2000      	movs	r0, #0
    2b5a:	bd10      	pop	{r4, pc}
		I2C_BB_byte_out(value);
    2b5c:	4620      	mov	r0, r4
    2b5e:	4b03      	ldr	r3, [pc, #12]	; (2b6c <I2C_BB_write+0x24>)
    2b60:	4798      	blx	r3
    2b62:	e7f7      	b.n	2b54 <I2C_BB_write+0xc>
    2b64:	00002ab9 	.word	0x00002ab9
    2b68:	00002a21 	.word	0x00002a21
    2b6c:	00002a49 	.word	0x00002a49

00002b70 <millisecondTimer_cb>:
	SDTransferDescriptor = (temp)|attribute|SD_DESCRIPTOR_LENGTH(length);
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    2b70:	4a02      	ldr	r2, [pc, #8]	; (2b7c <millisecondTimer_cb+0xc>)
    2b72:	6813      	ldr	r3, [r2, #0]
    2b74:	3301      	adds	r3, #1
    2b76:	6013      	str	r3, [r2, #0]
    2b78:	4770      	bx	lr
    2b7a:	bf00      	nop
    2b7c:	20000210 	.word	0x20000210

00002b80 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    2b80:	b510      	push	{r4, lr}
    2b82:	b082      	sub	sp, #8
	uint8_t i;
	uint16_t sum = 0;
	uint16_t num[8];
	
	// Uses ADC0 to check battery voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue,1);
    2b84:	2301      	movs	r3, #1
    2b86:	f10d 0207 	add.w	r2, sp, #7
    2b8a:	2100      	movs	r1, #0
    2b8c:	4804      	ldr	r0, [pc, #16]	; (2ba0 <checkBattVoltage_cb+0x20>)
    2b8e:	4c05      	ldr	r4, [pc, #20]	; (2ba4 <checkBattVoltage_cb+0x24>)
    2b90:	47a0      	blx	r4
	battVolt = adcValue;
    2b92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    2b96:	4b04      	ldr	r3, [pc, #16]	; (2ba8 <checkBattVoltage_cb+0x28>)
    2b98:	701a      	strb	r2, [r3, #0]
	if (adcValue < 0) {   //140
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
		deviceState |= DEVICE_STATE_STOP_RECORDING;
	}
}
    2b9a:	b002      	add	sp, #8
    2b9c:	bd10      	pop	{r4, pc}
    2b9e:	bf00      	nop
    2ba0:	200006c8 	.word	0x200006c8
    2ba4:	00000bf9 	.word	0x00000bf9
    2ba8:	20000b38 	.word	0x20000b38

00002bac <pushButton_cb>:
		
	}	
}

static void pushButton_cb(void)
{
    2bac:	b500      	push	{lr}
    2bae:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2bb0:	a801      	add	r0, sp, #4
    2bb2:	4b06      	ldr	r3, [pc, #24]	; (2bcc <pushButton_cb+0x20>)
    2bb4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2bb6:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <pushButton_cb+0x24>)
    2bb8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2bba:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bbc:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    2bbe:	a801      	add	r0, sp, #4
    2bc0:	4b04      	ldr	r3, [pc, #16]	; (2bd4 <pushButton_cb+0x28>)
    2bc2:	4798      	blx	r3
		
	}
	else {
		
	}
}
    2bc4:	b003      	add	sp, #12
    2bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    2bca:	bf00      	nop
    2bcc:	00000c99 	.word	0x00000c99
    2bd0:	41008000 	.word	0x41008000
    2bd4:	00000ca7 	.word	0x00000ca7

00002bd8 <battCharging_cb>:
{
    2bd8:	b510      	push	{r4, lr}
    2bda:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    2bdc:	a801      	add	r0, sp, #4
    2bde:	4b19      	ldr	r3, [pc, #100]	; (2c44 <battCharging_cb+0x6c>)
    2be0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2be2:	4b19      	ldr	r3, [pc, #100]	; (2c48 <battCharging_cb+0x70>)
    2be4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2be8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2bec:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2bf0:	4054      	eors	r4, r2
    2bf2:	400c      	ands	r4, r1
    2bf4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2bf6:	a801      	add	r0, sp, #4
    2bf8:	4b14      	ldr	r3, [pc, #80]	; (2c4c <battCharging_cb+0x74>)
    2bfa:	4798      	blx	r3
	if (pinState == true) {
    2bfc:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    2c00:	d116      	bne.n	2c30 <battCharging_cb+0x58>
		while(deviceState |= DEVICE_STATE_CHARGING){
    2c02:	4a13      	ldr	r2, [pc, #76]	; (2c50 <battCharging_cb+0x78>)
    2c04:	6813      	ldr	r3, [r2, #0]
    2c06:	f043 0320 	orr.w	r3, r3, #32
    2c0a:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c10:	4b0d      	ldr	r3, [pc, #52]	; (2c48 <battCharging_cb+0x70>)
    2c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		delay_ms(250);
    2c16:	20fa      	movs	r0, #250	; 0xfa
    2c18:	4b0e      	ldr	r3, [pc, #56]	; (2c54 <battCharging_cb+0x7c>)
    2c1a:	4798      	blx	r3
    2c1c:	e7f1      	b.n	2c02 <battCharging_cb+0x2a>
    2c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c22:	4b09      	ldr	r3, [pc, #36]	; (2c48 <battCharging_cb+0x70>)
    2c24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					delay_ms(5000);
    2c28:	f241 3088 	movw	r0, #5000	; 0x1388
    2c2c:	4b09      	ldr	r3, [pc, #36]	; (2c54 <battCharging_cb+0x7c>)
    2c2e:	4798      	blx	r3
		while(deviceState &= ~(DEVICE_STATE_CHARGING)){
    2c30:	4a07      	ldr	r2, [pc, #28]	; (2c50 <battCharging_cb+0x78>)
    2c32:	6813      	ldr	r3, [r2, #0]
    2c34:	f023 0320 	bic.w	r3, r3, #32
    2c38:	6013      	str	r3, [r2, #0]
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d1ef      	bne.n	2c1e <battCharging_cb+0x46>
}
    2c3e:	b002      	add	sp, #8
    2c40:	bd10      	pop	{r4, pc}
    2c42:	bf00      	nop
    2c44:	00000c99 	.word	0x00000c99
    2c48:	41008000 	.word	0x41008000
    2c4c:	00000ca7 	.word	0x00000ca7
    2c50:	20000028 	.word	0x20000028
    2c54:	00000d2d 	.word	0x00000d2d

00002c58 <irReceive_cb>:
{
    2c58:	b510      	push	{r4, lr}
    2c5a:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    2c5c:	4668      	mov	r0, sp
    2c5e:	4b1f      	ldr	r3, [pc, #124]	; (2cdc <irReceive_cb+0x84>)
    2c60:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c62:	4b1f      	ldr	r3, [pc, #124]	; (2ce0 <irReceive_cb+0x88>)
    2c64:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c6c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2c70:	4054      	eors	r4, r2
    2c72:	400c      	ands	r4, r1
    2c74:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2c76:	4668      	mov	r0, sp
    2c78:	4b1a      	ldr	r3, [pc, #104]	; (2ce4 <irReceive_cb+0x8c>)
    2c7a:	4798      	blx	r3
	if (pinState == true) {
    2c7c:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
    2c80:	d101      	bne.n	2c86 <irReceive_cb+0x2e>
}
    2c82:	b002      	add	sp, #8
    2c84:	bd10      	pop	{r4, pc}
		delay_ms(13); //13 ms after the pin gets high we check if there is a 0
    2c86:	200d      	movs	r0, #13
    2c88:	4b17      	ldr	r3, [pc, #92]	; (2ce8 <irReceive_cb+0x90>)
    2c8a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    2c8c:	a801      	add	r0, sp, #4
    2c8e:	4b13      	ldr	r3, [pc, #76]	; (2cdc <irReceive_cb+0x84>)
    2c90:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2c92:	4b13      	ldr	r3, [pc, #76]	; (2ce0 <irReceive_cb+0x88>)
    2c94:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2c98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2c9c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2ca0:	4054      	eors	r4, r2
    2ca2:	400c      	ands	r4, r1
    2ca4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2ca6:	a801      	add	r0, sp, #4
    2ca8:	4b0e      	ldr	r3, [pc, #56]	; (2ce4 <irReceive_cb+0x8c>)
    2caa:	4798      	blx	r3
		if (gpio_get_pin_level(IR_REC) == false) {
    2cac:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
    2cb0:	d1e7      	bne.n	2c82 <irReceive_cb+0x2a>
    2cb2:	2400      	movs	r4, #0
    2cb4:	e00a      	b.n	2ccc <irReceive_cb+0x74>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
    2cba:	4b09      	ldr	r3, [pc, #36]	; (2ce0 <irReceive_cb+0x88>)
    2cbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					delay_ms(1000);
    2cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cc4:	4b08      	ldr	r3, [pc, #32]	; (2ce8 <irReceive_cb+0x90>)
    2cc6:	4798      	blx	r3
			   for( uint8_t i = 0; i < delayvalue; i++ ){
    2cc8:	3401      	adds	r4, #1
    2cca:	b2e4      	uxtb	r4, r4
    2ccc:	4b07      	ldr	r3, [pc, #28]	; (2cec <irReceive_cb+0x94>)
    2cce:	681b      	ldr	r3, [r3, #0]
    2cd0:	429c      	cmp	r4, r3
    2cd2:	d3f0      	bcc.n	2cb6 <irReceive_cb+0x5e>
		deviceState = DEVICE_STATE_START_RECORDING;		
    2cd4:	2204      	movs	r2, #4
    2cd6:	4b06      	ldr	r3, [pc, #24]	; (2cf0 <irReceive_cb+0x98>)
    2cd8:	601a      	str	r2, [r3, #0]
}
    2cda:	e7d2      	b.n	2c82 <irReceive_cb+0x2a>
    2cdc:	00000c99 	.word	0x00000c99
    2ce0:	41008000 	.word	0x41008000
    2ce4:	00000ca7 	.word	0x00000ca7
    2ce8:	00000d2d 	.word	0x00000d2d
    2cec:	20029258 	.word	0x20029258
    2cf0:	20000028 	.word	0x20000028

00002cf4 <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
    2cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cf8:	4607      	mov	r7, r0
    2cfa:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cfc:	4d2f      	ldr	r5, [pc, #188]	; (2dbc <spi_BB_Write+0xc8>)
    2cfe:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    2d02:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    2d06:	200a      	movs	r0, #10
    2d08:	4c2d      	ldr	r4, [pc, #180]	; (2dc0 <spi_BB_Write+0xcc>)
    2d0a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d0c:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    2d10:	200a      	movs	r0, #10
    2d12:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2d14:	2408      	movs	r4, #8
    2d16:	e00c      	b.n	2d32 <spi_BB_Write+0x3e>
    2d18:	2210      	movs	r2, #16
    2d1a:	4b28      	ldr	r3, [pc, #160]	; (2dbc <spi_BB_Write+0xc8>)
    2d1c:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    2d1e:	200a      	movs	r0, #10
    2d20:	4d27      	ldr	r5, [pc, #156]	; (2dc0 <spi_BB_Write+0xcc>)
    2d22:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d24:	2220      	movs	r2, #32
    2d26:	4b25      	ldr	r3, [pc, #148]	; (2dbc <spi_BB_Write+0xc8>)
    2d28:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2d2a:	200a      	movs	r0, #10
    2d2c:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2d2e:	3c01      	subs	r4, #1
    2d30:	b264      	sxtb	r4, r4
    2d32:	2c00      	cmp	r4, #0
    2d34:	db0b      	blt.n	2d4e <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d36:	2220      	movs	r2, #32
    2d38:	4b20      	ldr	r3, [pc, #128]	; (2dbc <spi_BB_Write+0xc8>)
    2d3a:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    2d3c:	fa47 f304 	asr.w	r3, r7, r4
    2d40:	f013 0f01 	tst.w	r3, #1
    2d44:	d0e8      	beq.n	2d18 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d46:	2210      	movs	r2, #16
    2d48:	4b1c      	ldr	r3, [pc, #112]	; (2dbc <spi_BB_Write+0xc8>)
    2d4a:	619a      	str	r2, [r3, #24]
    2d4c:	e7e7      	b.n	2d1e <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d4e:	4c1b      	ldr	r4, [pc, #108]	; (2dbc <spi_BB_Write+0xc8>)
    2d50:	2720      	movs	r7, #32
    2d52:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d54:	2310      	movs	r3, #16
    2d56:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    2d58:	200a      	movs	r0, #10
    2d5a:	4d19      	ldr	r5, [pc, #100]	; (2dc0 <spi_BB_Write+0xcc>)
    2d5c:	47a8      	blx	r5
    2d5e:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    2d60:	200a      	movs	r0, #10
    2d62:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    2d64:	240f      	movs	r4, #15
    2d66:	e00c      	b.n	2d82 <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d68:	2210      	movs	r2, #16
    2d6a:	4b14      	ldr	r3, [pc, #80]	; (2dbc <spi_BB_Write+0xc8>)
    2d6c:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    2d6e:	200a      	movs	r0, #10
    2d70:	4d13      	ldr	r5, [pc, #76]	; (2dc0 <spi_BB_Write+0xcc>)
    2d72:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d74:	2220      	movs	r2, #32
    2d76:	4b11      	ldr	r3, [pc, #68]	; (2dbc <spi_BB_Write+0xc8>)
    2d78:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2d7a:	200a      	movs	r0, #10
    2d7c:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    2d7e:	3c01      	subs	r4, #1
    2d80:	b264      	sxtb	r4, r4
    2d82:	2c00      	cmp	r4, #0
    2d84:	db0b      	blt.n	2d9e <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d86:	2220      	movs	r2, #32
    2d88:	4b0c      	ldr	r3, [pc, #48]	; (2dbc <spi_BB_Write+0xc8>)
    2d8a:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    2d8c:	fa46 f304 	asr.w	r3, r6, r4
    2d90:	f013 0f01 	tst.w	r3, #1
    2d94:	d0e8      	beq.n	2d68 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d96:	2210      	movs	r2, #16
    2d98:	4b08      	ldr	r3, [pc, #32]	; (2dbc <spi_BB_Write+0xc8>)
    2d9a:	619a      	str	r2, [r3, #24]
    2d9c:	e7e7      	b.n	2d6e <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d9e:	4c07      	ldr	r4, [pc, #28]	; (2dbc <spi_BB_Write+0xc8>)
    2da0:	2320      	movs	r3, #32
    2da2:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    2da4:	200a      	movs	r0, #10
    2da6:	4d06      	ldr	r5, [pc, #24]	; (2dc0 <spi_BB_Write+0xcc>)
    2da8:	47a8      	blx	r5
	delay_us(10);
    2daa:	200a      	movs	r0, #10
    2dac:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2db2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    2db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dba:	bf00      	nop
    2dbc:	41008000 	.word	0x41008000
    2dc0:	00000d0d 	.word	0x00000d0d

00002dc4 <python480SetGain>:
{
    2dc4:	b508      	push	{r3, lr}
	switch (value)
    2dc6:	2802      	cmp	r0, #2
    2dc8:	d00d      	beq.n	2de6 <python480SetGain+0x22>
    2dca:	2804      	cmp	r0, #4
    2dcc:	d010      	beq.n	2df0 <python480SetGain+0x2c>
    2dce:	2801      	cmp	r0, #1
    2dd0:	d004      	beq.n	2ddc <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    2dd2:	21e1      	movs	r1, #225	; 0xe1
    2dd4:	20cc      	movs	r0, #204	; 0xcc
    2dd6:	4b09      	ldr	r3, [pc, #36]	; (2dfc <python480SetGain+0x38>)
    2dd8:	4798      	blx	r3
    2dda:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    2ddc:	21e1      	movs	r1, #225	; 0xe1
    2dde:	20cc      	movs	r0, #204	; 0xcc
    2de0:	4b06      	ldr	r3, [pc, #24]	; (2dfc <python480SetGain+0x38>)
    2de2:	4798      	blx	r3
		break;
    2de4:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    2de6:	21e4      	movs	r1, #228	; 0xe4
    2de8:	20cc      	movs	r0, #204	; 0xcc
    2dea:	4b04      	ldr	r3, [pc, #16]	; (2dfc <python480SetGain+0x38>)
    2dec:	4798      	blx	r3
		break;
    2dee:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    2df0:	2124      	movs	r1, #36	; 0x24
    2df2:	20cc      	movs	r0, #204	; 0xcc
    2df4:	4b01      	ldr	r3, [pc, #4]	; (2dfc <python480SetGain+0x38>)
    2df6:	4798      	blx	r3
		break;
    2df8:	bd08      	pop	{r3, pc}
    2dfa:	bf00      	nop
    2dfc:	00002cf5 	.word	0x00002cf5

00002e00 <python480SetFPS>:
{
    2e00:	b508      	push	{r3, lr}
	switch (value)
    2e02:	3805      	subs	r0, #5
    2e04:	280f      	cmp	r0, #15
    2e06:	d820      	bhi.n	2e4a <python480SetFPS+0x4a>
    2e08:	e8df f000 	tbb	[pc, r0]
    2e0c:	1f1f1f08 	.word	0x1f1f1f08
    2e10:	1f1f0e1f 	.word	0x1f1f0e1f
    2e14:	1f141f1f 	.word	0x1f141f1f
    2e18:	1a1f1f1f 	.word	0x1a1f1f1f
		spi_BB_Write(0xC9, 20000);
    2e1c:	f644 6120 	movw	r1, #20000	; 0x4e20
    2e20:	20c9      	movs	r0, #201	; 0xc9
    2e22:	4b0a      	ldr	r3, [pc, #40]	; (2e4c <python480SetFPS+0x4c>)
    2e24:	4798      	blx	r3
		break;
    2e26:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    2e28:	f242 7110 	movw	r1, #10000	; 0x2710
    2e2c:	20c9      	movs	r0, #201	; 0xc9
    2e2e:	4b07      	ldr	r3, [pc, #28]	; (2e4c <python480SetFPS+0x4c>)
    2e30:	4798      	blx	r3
		break;
    2e32:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    2e34:	f641 210b 	movw	r1, #6667	; 0x1a0b
    2e38:	20c9      	movs	r0, #201	; 0xc9
    2e3a:	4b04      	ldr	r3, [pc, #16]	; (2e4c <python480SetFPS+0x4c>)
    2e3c:	4798      	blx	r3
		break;
    2e3e:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 5000);
    2e40:	f241 3188 	movw	r1, #5000	; 0x1388
    2e44:	20c9      	movs	r0, #201	; 0xc9
    2e46:	4b01      	ldr	r3, [pc, #4]	; (2e4c <python480SetFPS+0x4c>)
    2e48:	4798      	blx	r3
    2e4a:	bd08      	pop	{r3, pc}
    2e4c:	00002cf5 	.word	0x00002cf5

00002e50 <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
    2e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e54:	b082      	sub	sp, #8
    2e56:	4606      	mov	r6, r0
    2e58:	4d33      	ldr	r5, [pc, #204]	; (2f28 <spi_BB_Read+0xd8>)
    2e5a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    2e5e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    2e62:	200a      	movs	r0, #10
    2e64:	4c31      	ldr	r4, [pc, #196]	; (2f2c <spi_BB_Read+0xdc>)
    2e66:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e68:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    2e6c:	200a      	movs	r0, #10
    2e6e:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2e70:	2408      	movs	r4, #8
    2e72:	e00c      	b.n	2e8e <spi_BB_Read+0x3e>
    2e74:	2210      	movs	r2, #16
    2e76:	4b2c      	ldr	r3, [pc, #176]	; (2f28 <spi_BB_Read+0xd8>)
    2e78:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    2e7a:	200a      	movs	r0, #10
    2e7c:	4d2b      	ldr	r5, [pc, #172]	; (2f2c <spi_BB_Read+0xdc>)
    2e7e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e80:	2220      	movs	r2, #32
    2e82:	4b29      	ldr	r3, [pc, #164]	; (2f28 <spi_BB_Read+0xd8>)
    2e84:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2e86:	200a      	movs	r0, #10
    2e88:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2e8a:	3c01      	subs	r4, #1
    2e8c:	b264      	sxtb	r4, r4
    2e8e:	2c00      	cmp	r4, #0
    2e90:	db0b      	blt.n	2eaa <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e92:	2220      	movs	r2, #32
    2e94:	4b24      	ldr	r3, [pc, #144]	; (2f28 <spi_BB_Read+0xd8>)
    2e96:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    2e98:	fa46 f304 	asr.w	r3, r6, r4
    2e9c:	f013 0f01 	tst.w	r3, #1
    2ea0:	d0e8      	beq.n	2e74 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ea2:	2210      	movs	r2, #16
    2ea4:	4b20      	ldr	r3, [pc, #128]	; (2f28 <spi_BB_Read+0xd8>)
    2ea6:	619a      	str	r2, [r3, #24]
    2ea8:	e7e7      	b.n	2e7a <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eaa:	4c1f      	ldr	r4, [pc, #124]	; (2f28 <spi_BB_Read+0xd8>)
    2eac:	2620      	movs	r6, #32
    2eae:	6166      	str	r6, [r4, #20]
    2eb0:	2310      	movs	r3, #16
    2eb2:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    2eb4:	200a      	movs	r0, #10
    2eb6:	4d1d      	ldr	r5, [pc, #116]	; (2f2c <spi_BB_Read+0xdc>)
    2eb8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2eba:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    2ebc:	200a      	movs	r0, #10
    2ebe:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ec0:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    2ec2:	200a      	movs	r0, #10
    2ec4:	47a8      	blx	r5
	uint16_t value = 0;
    2ec6:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    2ec8:	250f      	movs	r5, #15
    2eca:	e01e      	b.n	2f0a <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ecc:	4c16      	ldr	r4, [pc, #88]	; (2f28 <spi_BB_Read+0xd8>)
    2ece:	f04f 0820 	mov.w	r8, #32
    2ed2:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2ed6:	200a      	movs	r0, #10
    2ed8:	4e14      	ldr	r6, [pc, #80]	; (2f2c <spi_BB_Read+0xdc>)
    2eda:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2edc:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    2ee0:	a801      	add	r0, sp, #4
    2ee2:	4b13      	ldr	r3, [pc, #76]	; (2f30 <spi_BB_Read+0xe0>)
    2ee4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2ee6:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ee8:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2eea:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2eec:	405c      	eors	r4, r3
    2eee:	4014      	ands	r4, r2
    2ef0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    2ef2:	a801      	add	r0, sp, #4
    2ef4:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <spi_BB_Read+0xe4>)
    2ef6:	4798      	blx	r3
    2ef8:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    2efc:	40ac      	lsls	r4, r5
    2efe:	433c      	orrs	r4, r7
    2f00:	b2a7      	uxth	r7, r4
		delay_us(10);	
    2f02:	200a      	movs	r0, #10
    2f04:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    2f06:	3d01      	subs	r5, #1
    2f08:	b26d      	sxtb	r5, r5
    2f0a:	2d00      	cmp	r5, #0
    2f0c:	dade      	bge.n	2ecc <spi_BB_Read+0x7c>
	}
	delay_us(10);
    2f0e:	200a      	movs	r0, #10
    2f10:	4b06      	ldr	r3, [pc, #24]	; (2f2c <spi_BB_Read+0xdc>)
    2f12:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2f18:	4b03      	ldr	r3, [pc, #12]	; (2f28 <spi_BB_Read+0xd8>)
    2f1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    2f1e:	4638      	mov	r0, r7
    2f20:	b002      	add	sp, #8
    2f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f26:	bf00      	nop
    2f28:	41008000 	.word	0x41008000
    2f2c:	00000d0d 	.word	0x00000d0d
    2f30:	00000c99 	.word	0x00000c99
    2f34:	00000ca7 	.word	0x00000ca7

00002f38 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    2f38:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    2f3a:	2100      	movs	r1, #0
    2f3c:	2002      	movs	r0, #2
    2f3e:	4c0e      	ldr	r4, [pc, #56]	; (2f78 <EnableClockMngmnt1+0x40>)
    2f40:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    2f42:	f242 1113 	movw	r1, #8467	; 0x2113
    2f46:	2011      	movs	r0, #17
    2f48:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    2f4a:	2100      	movs	r1, #0
    2f4c:	2014      	movs	r0, #20
    2f4e:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    2f50:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    2f54:	201a      	movs	r0, #26
    2f56:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    2f58:	f643 512d 	movw	r1, #15661	; 0x3d2d
    2f5c:	201b      	movs	r0, #27
    2f5e:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    2f60:	f247 011c 	movw	r1, #28700	; 0x701c
    2f64:	2020      	movs	r0, #32
    2f66:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    2f68:	2100      	movs	r1, #0
    2f6a:	2008      	movs	r0, #8
    2f6c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    2f6e:	2107      	movs	r1, #7
    2f70:	2010      	movs	r0, #16
    2f72:	47a0      	blx	r4
    2f74:	bd10      	pop	{r4, pc}
    2f76:	bf00      	nop
    2f78:	00002cf5 	.word	0x00002cf5

00002f7c <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    2f7c:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    2f7e:	2100      	movs	r1, #0
    2f80:	2009      	movs	r0, #9
    2f82:	4c05      	ldr	r4, [pc, #20]	; (2f98 <EnableClockMngmnt2+0x1c>)
    2f84:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    2f86:	f247 010e 	movw	r1, #28686	; 0x700e
    2f8a:	2020      	movs	r0, #32
    2f8c:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    2f8e:	2101      	movs	r1, #1
    2f90:	2022      	movs	r0, #34	; 0x22
    2f92:	47a0      	blx	r4
    2f94:	bd10      	pop	{r4, pc}
    2f96:	bf00      	nop
    2f98:	00002cf5 	.word	0x00002cf5

00002f9c <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    2f9c:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    2f9e:	2100      	movs	r1, #0
    2fa0:	2002      	movs	r0, #2
    2fa2:	4ccd      	ldr	r4, [pc, #820]	; (32d8 <RequiredUploads+0x33c>)
    2fa4:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    2fa6:	2100      	movs	r1, #0
    2fa8:	2008      	movs	r0, #8
    2faa:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    2fac:	2100      	movs	r1, #0
    2fae:	2009      	movs	r0, #9
    2fb0:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    2fb2:	2100      	movs	r1, #0
    2fb4:	200a      	movs	r0, #10
    2fb6:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    2fb8:	2100      	movs	r1, #0
    2fba:	2014      	movs	r0, #20
    2fbc:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    2fbe:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    2fc2:	201a      	movs	r0, #26
    2fc4:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    2fc6:	f643 512d 	movw	r1, #15661	; 0x3d2d
    2fca:	201b      	movs	r0, #27
    2fcc:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    2fce:	f247 010f 	movw	r1, #28687	; 0x700f
    2fd2:	2020      	movs	r0, #32
    2fd4:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    2fd6:	2101      	movs	r1, #1
    2fd8:	2022      	movs	r0, #34	; 0x22
    2fda:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    2fdc:	2107      	movs	r1, #7
    2fde:	2028      	movs	r0, #40	; 0x28
    2fe0:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    2fe2:	f640 015f 	movw	r1, #2143	; 0x85f
    2fe6:	2029      	movs	r0, #41	; 0x29
    2fe8:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    2fea:	f244 1103 	movw	r1, #16643	; 0x4103
    2fee:	202a      	movs	r0, #42	; 0x2a
    2ff0:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    2ff2:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    2ff6:	202b      	movs	r0, #43	; 0x2b
    2ff8:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    2ffa:	2101      	movs	r1, #1
    2ffc:	2030      	movs	r0, #48	; 0x30
    2ffe:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3000:	2101      	movs	r1, #1
    3002:	2040      	movs	r0, #64	; 0x40
    3004:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3006:	f643 012a 	movw	r1, #14378	; 0x382a
    300a:	2041      	movs	r0, #65	; 0x41
    300c:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    300e:	f245 31c8 	movw	r1, #21448	; 0x53c8
    3012:	2042      	movs	r0, #66	; 0x42
    3014:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    3016:	f240 6165 	movw	r1, #1637	; 0x665
    301a:	2043      	movs	r0, #67	; 0x43
    301c:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    301e:	2185      	movs	r1, #133	; 0x85
    3020:	2044      	movs	r0, #68	; 0x44
    3022:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    3024:	f640 0188 	movw	r1, #2184	; 0x888
    3028:	2045      	movs	r0, #69	; 0x45
    302a:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    302c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    3030:	2046      	movs	r0, #70	; 0x46
    3032:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    3034:	f648 0188 	movw	r1, #34952	; 0x8888
    3038:	2047      	movs	r0, #71	; 0x47
    303a:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    303c:	f240 1117 	movw	r1, #279	; 0x117
    3040:	2048      	movs	r0, #72	; 0x48
    3042:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    3044:	2100      	movs	r1, #0
    3046:	2070      	movs	r0, #112	; 0x70
    3048:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    304a:	f244 710a 	movw	r1, #18186	; 0x470a
    304e:	2080      	movs	r0, #128	; 0x80
    3050:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    3052:	f248 0101 	movw	r1, #32769	; 0x8001
    3056:	2081      	movs	r0, #129	; 0x81
    3058:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    305a:	2115      	movs	r1, #21
    305c:	2082      	movs	r0, #130	; 0x82
    305e:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function. Sets subsampling too
    3060:	f640 0101 	movw	r1, #2049	; 0x801
    3064:	20c0      	movs	r0, #192	; 0xc0
    3066:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    3068:	21e4      	movs	r1, #228	; 0xe4
    306a:	20c2      	movs	r0, #194	; 0xc2
    306c:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    306e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3072:	20c5      	movs	r0, #197	; 0xc5
    3074:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	//spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(199, 50); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    3076:	2132      	movs	r1, #50	; 0x32
    3078:	20c7      	movs	r0, #199	; 0xc7
    307a:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    307c:	f640 41e4 	movw	r1, #3300	; 0xce4
    3080:	20c8      	movs	r0, #200	; 0xc8
    3082:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    3084:	f640 41e4 	movw	r1, #3300	; 0xce4
    3088:	20c9      	movs	r0, #201	; 0xc9
    308a:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    308c:	21e4      	movs	r1, #228	; 0xe4
    308e:	20cc      	movs	r0, #204	; 0xcc
    3090:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    3092:	2114      	movs	r1, #20
    3094:	20cf      	movs	r0, #207	; 0xcf
    3096:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3098:	f44f 7180 	mov.w	r1, #256	; 0x100
    309c:	20d6      	movs	r0, #214	; 0xd6
    309e:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    30a0:	f241 011f 	movw	r1, #4127	; 0x101f
    30a4:	20d7      	movs	r0, #215	; 0xd7
    30a6:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    30a8:	2100      	movs	r1, #0
    30aa:	20d8      	movs	r0, #216	; 0xd8
    30ac:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    30ae:	2123      	movs	r1, #35	; 0x23
    30b0:	20db      	movs	r0, #219	; 0xdb
    30b2:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    30b4:	f643 412b 	movw	r1, #15403	; 0x3c2b
    30b8:	20dc      	movs	r0, #220	; 0xdc
    30ba:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    30bc:	f642 314d 	movw	r1, #11085	; 0x2b4d
    30c0:	20dd      	movs	r0, #221	; 0xdd
    30c2:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    30c4:	f643 615e 	movw	r1, #15966	; 0x3e5e
    30c8:	20e0      	movs	r0, #224	; 0xe0
    30ca:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    30cc:	2149      	movs	r1, #73	; 0x49
    30ce:	20d3      	movs	r0, #211	; 0xd3
    30d0:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    30d2:	2100      	movs	r1, #0
    30d4:	20d8      	movs	r0, #216	; 0xd8
    30d6:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    30d8:	2123      	movs	r1, #35	; 0x23
    30da:	20db      	movs	r0, #219	; 0xdb
    30dc:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    30de:	f643 412b 	movw	r1, #15403	; 0x3c2b
    30e2:	20dc      	movs	r0, #220	; 0xdc
    30e4:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    30e6:	f642 314d 	movw	r1, #11085	; 0x2b4d
    30ea:	20dd      	movs	r0, #221	; 0xdd
    30ec:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    30ee:	f240 2199 	movw	r1, #665	; 0x299
    30f2:	20e6      	movs	r0, #230	; 0xe6
    30f4:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    30f6:	f44f 7154 	mov.w	r1, #848	; 0x350
    30fa:	20e7      	movs	r0, #231	; 0xe7
    30fc:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    30fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3102:	20e8      	movs	r0, #232	; 0xe8
    3104:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3106:	21e1      	movs	r1, #225	; 0xe1
    3108:	20eb      	movs	r0, #235	; 0xeb
    310a:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    310c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3110:	f44f 7080 	mov.w	r0, #256	; 0x100
    3114:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    3116:	f24b 0119 	movw	r1, #45081	; 0xb019
    311a:	f44f 7081 	mov.w	r0, #258	; 0x102
    311e:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    3120:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3124:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3128:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    312a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    312e:	f240 1081 	movw	r0, #385	; 0x181
    3132:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3134:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3138:	f44f 70c1 	mov.w	r0, #386	; 0x182
    313c:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    313e:	f64f 3112 	movw	r1, #64274	; 0xfb12
    3142:	f240 1083 	movw	r0, #387	; 0x183
    3146:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3148:	f64f 1112 	movw	r1, #63762	; 0xf912
    314c:	f44f 70c2 	mov.w	r0, #388	; 0x184
    3150:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    3152:	f64f 1103 	movw	r1, #63747	; 0xf903
    3156:	f240 1085 	movw	r0, #389	; 0x185
    315a:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    315c:	f64f 0102 	movw	r1, #63490	; 0xf802
    3160:	f44f 70c3 	mov.w	r0, #390	; 0x186
    3164:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    3166:	f24f 310f 	movw	r1, #62223	; 0xf30f
    316a:	f240 1087 	movw	r0, #391	; 0x187
    316e:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    3170:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3174:	f44f 70c4 	mov.w	r0, #392	; 0x188
    3178:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    317a:	f24f 310f 	movw	r1, #62223	; 0xf30f
    317e:	f240 1089 	movw	r0, #393	; 0x189
    3182:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3184:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3188:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    318c:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    318e:	f24f 1101 	movw	r1, #61697	; 0xf101
    3192:	f240 108b 	movw	r0, #395	; 0x18b
    3196:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3198:	f24f 010a 	movw	r1, #61450	; 0xf00a
    319c:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    31a0:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    31a2:	f24f 214b 	movw	r1, #62027	; 0xf24b
    31a6:	f240 108d 	movw	r0, #397	; 0x18d
    31aa:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    31ac:	f24f 2101 	movw	r1, #61953	; 0xf201
    31b0:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    31b4:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    31b6:	f24f 2126 	movw	r1, #61990	; 0xf226
    31ba:	f240 108f 	movw	r0, #399	; 0x18f
    31be:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    31c0:	f24f 0121 	movw	r1, #61473	; 0xf021
    31c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    31c8:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    31ca:	f24f 0101 	movw	r1, #61441	; 0xf001
    31ce:	f240 1091 	movw	r0, #401	; 0x191
    31d2:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    31d4:	f24f 4102 	movw	r1, #62466	; 0xf402
    31d8:	f44f 70c9 	mov.w	r0, #402	; 0x192
    31dc:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    31de:	f24f 0107 	movw	r1, #61447	; 0xf007
    31e2:	f240 1093 	movw	r0, #403	; 0x193
    31e6:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    31e8:	f24f 210f 	movw	r1, #61967	; 0xf20f
    31ec:	f44f 70ca 	mov.w	r0, #404	; 0x194
    31f0:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    31f2:	f24f 210f 	movw	r1, #61967	; 0xf20f
    31f6:	f240 1095 	movw	r0, #405	; 0x195
    31fa:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    31fc:	f24f 2102 	movw	r1, #61954	; 0xf202
    3200:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3204:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3206:	f24f 0106 	movw	r1, #61446	; 0xf006
    320a:	f240 1097 	movw	r0, #407	; 0x197
    320e:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3210:	f64e 4108 	movw	r1, #60424	; 0xec08
    3214:	f44f 70cc 	mov.w	r0, #408	; 0x198
    3218:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    321a:	f64c 0101 	movw	r1, #51201	; 0xc801
    321e:	f240 1099 	movw	r0, #409	; 0x199
    3222:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3224:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3228:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    322c:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    322e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3232:	f240 10a3 	movw	r0, #419	; 0x1a3
    3236:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3238:	f64c 4102 	movw	r1, #52226	; 0xcc02
    323c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    3240:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    3242:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3246:	f240 10a5 	movw	r0, #421	; 0x1a5
    324a:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    324c:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3250:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    3254:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    3256:	f64c 4101 	movw	r1, #52225	; 0xcc01
    325a:	f240 10a7 	movw	r0, #423	; 0x1a7
    325e:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    3260:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3264:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    3268:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    326a:	f64c 0105 	movw	r1, #51205	; 0xc805
    326e:	f240 10a9 	movw	r0, #425	; 0x1a9
    3272:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3274:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3278:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    327c:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    327e:	2130      	movs	r1, #48	; 0x30
    3280:	f240 10ab 	movw	r0, #427	; 0x1ab
    3284:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3286:	f242 017b 	movw	r1, #8315	; 0x207b
    328a:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    328e:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    3290:	f242 0171 	movw	r1, #8305	; 0x2071
    3294:	f240 10ad 	movw	r0, #429	; 0x1ad
    3298:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    329a:	2171      	movs	r1, #113	; 0x71
    329c:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    32a0:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    32a2:	f241 017f 	movw	r1, #4223	; 0x107f
    32a6:	f240 10af 	movw	r0, #431	; 0x1af
    32aa:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    32ac:	f241 0172 	movw	r1, #4210	; 0x1072
    32b0:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    32b4:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    32b6:	f241 0174 	movw	r1, #4212	; 0x1074
    32ba:	f240 10b1 	movw	r0, #433	; 0x1b1
    32be:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    32c0:	2171      	movs	r1, #113	; 0x71
    32c2:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    32c6:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    32c8:	2131      	movs	r1, #49	; 0x31
    32ca:	f240 10b3 	movw	r0, #435	; 0x1b3
    32ce:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    32d0:	f242 11bb 	movw	r1, #8635	; 0x21bb
    32d4:	e002      	b.n	32dc <RequiredUploads+0x340>
    32d6:	bf00      	nop
    32d8:	00002cf5 	.word	0x00002cf5
    32dc:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    32e0:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    32e2:	f242 01b1 	movw	r1, #8369	; 0x20b1
    32e6:	f240 10b5 	movw	r0, #437	; 0x1b5
    32ea:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    32ec:	21b1      	movs	r1, #177	; 0xb1
    32ee:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    32f2:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    32f4:	f241 01bf 	movw	r1, #4287	; 0x10bf
    32f8:	f240 10b7 	movw	r0, #439	; 0x1b7
    32fc:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    32fe:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3302:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3306:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3308:	f241 01b4 	movw	r1, #4276	; 0x10b4
    330c:	f240 10b9 	movw	r0, #441	; 0x1b9
    3310:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    3312:	21b1      	movs	r1, #177	; 0xb1
    3314:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    3318:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    331a:	2130      	movs	r1, #48	; 0x30
    331c:	f240 10bb 	movw	r0, #443	; 0x1bb
    3320:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    3322:	2130      	movs	r1, #48	; 0x30
    3324:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    3328:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    332a:	f242 117b 	movw	r1, #8571	; 0x217b
    332e:	f240 10bd 	movw	r0, #445	; 0x1bd
    3332:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3334:	f242 0171 	movw	r1, #8305	; 0x2071
    3338:	f44f 70df 	mov.w	r0, #446	; 0x1be
    333c:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    333e:	2171      	movs	r1, #113	; 0x71
    3340:	f240 10bf 	movw	r0, #447	; 0x1bf
    3344:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3346:	f241 017f 	movw	r1, #4223	; 0x107f
    334a:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    334e:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3350:	f241 0172 	movw	r1, #4210	; 0x1072
    3354:	f240 10c1 	movw	r0, #449	; 0x1c1
    3358:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    335a:	f241 0174 	movw	r1, #4212	; 0x1074
    335e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    3362:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3364:	2171      	movs	r1, #113	; 0x71
    3366:	f240 10c3 	movw	r0, #451	; 0x1c3
    336a:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    336c:	2131      	movs	r1, #49	; 0x31
    336e:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    3372:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3374:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3378:	f240 10c5 	movw	r0, #453	; 0x1c5
    337c:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    337e:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3382:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3386:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3388:	21b1      	movs	r1, #177	; 0xb1
    338a:	f240 10c7 	movw	r0, #455	; 0x1c7
    338e:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    3390:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3394:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3398:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    339a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    339e:	f240 10c9 	movw	r0, #457	; 0x1c9
    33a2:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    33a4:	f241 01b4 	movw	r1, #4276	; 0x10b4
    33a8:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    33ac:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    33ae:	21b1      	movs	r1, #177	; 0xb1
    33b0:	f240 10cb 	movw	r0, #459	; 0x1cb
    33b4:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    33b6:	2130      	movs	r1, #48	; 0x30
    33b8:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    33bc:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    33be:	2130      	movs	r1, #48	; 0x30
    33c0:	f240 10cd 	movw	r0, #461	; 0x1cd
    33c4:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    33c6:	f242 117b 	movw	r1, #8571	; 0x217b
    33ca:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    33ce:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    33d0:	f242 0171 	movw	r1, #8305	; 0x2071
    33d4:	f240 10cf 	movw	r0, #463	; 0x1cf
    33d8:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    33da:	2171      	movs	r1, #113	; 0x71
    33dc:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    33e0:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    33e2:	f241 0171 	movw	r1, #4209	; 0x1071
    33e6:	f240 10d1 	movw	r0, #465	; 0x1d1
    33ea:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    33ec:	2171      	movs	r1, #113	; 0x71
    33ee:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    33f2:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    33f4:	2131      	movs	r1, #49	; 0x31
    33f6:	f240 10d3 	movw	r0, #467	; 0x1d3
    33fa:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    33fc:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3400:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3404:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3406:	f242 01b1 	movw	r1, #8369	; 0x20b1
    340a:	f240 10d5 	movw	r0, #469	; 0x1d5
    340e:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3410:	21b1      	movs	r1, #177	; 0xb1
    3412:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    3416:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    3418:	f241 01b3 	movw	r1, #4275	; 0x10b3
    341c:	f240 10d7 	movw	r0, #471	; 0x1d7
    3420:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    3422:	f241 01b1 	movw	r1, #4273	; 0x10b1
    3426:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    342a:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    342c:	21b1      	movs	r1, #177	; 0xb1
    342e:	f240 10d9 	movw	r0, #473	; 0x1d9
    3432:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3434:	213f      	movs	r1, #63	; 0x3f
    3436:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    343a:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    343c:	2132      	movs	r1, #50	; 0x32
    343e:	f240 10db 	movw	r0, #475	; 0x1db
    3442:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3444:	2130      	movs	r1, #48	; 0x30
    3446:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    344a:	47a0      	blx	r4
    344c:	bd10      	pop	{r4, pc}
    344e:	bf00      	nop

00003450 <SoftPowerUp>:
}

void SoftPowerUp() {
    3450:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3452:	2100      	movs	r1, #0
    3454:	200a      	movs	r0, #10
    3456:	4c0d      	ldr	r4, [pc, #52]	; (348c <SoftPowerUp+0x3c>)
    3458:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    345a:	f247 010f 	movw	r1, #28687	; 0x700f
    345e:	2020      	movs	r0, #32
    3460:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    3462:	2107      	movs	r1, #7
    3464:	2028      	movs	r0, #40	; 0x28
    3466:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3468:	f244 1113 	movw	r1, #16659	; 0x4113
    346c:	202a      	movs	r0, #42	; 0x2a
    346e:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    3470:	2101      	movs	r1, #1
    3472:	2030      	movs	r0, #48	; 0x30
    3474:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3476:	2101      	movs	r1, #1
    3478:	2040      	movs	r0, #64	; 0x40
    347a:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    347c:	f240 1127 	movw	r1, #295	; 0x127
    3480:	2048      	movs	r0, #72	; 0x48
    3482:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3484:	2100      	movs	r1, #0
    3486:	2070      	movs	r0, #112	; 0x70
    3488:	47a0      	blx	r4
    348a:	bd10      	pop	{r4, pc}
    348c:	00002cf5 	.word	0x00002cf5

00003490 <python480Init>:
{
    3490:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    3492:	4b06      	ldr	r3, [pc, #24]	; (34ac <python480Init+0x1c>)
    3494:	4798      	blx	r3
	delay_ms(100);
    3496:	2064      	movs	r0, #100	; 0x64
    3498:	4b05      	ldr	r3, [pc, #20]	; (34b0 <python480Init+0x20>)
    349a:	4798      	blx	r3
	EnableClockMngmnt2();
    349c:	4b05      	ldr	r3, [pc, #20]	; (34b4 <python480Init+0x24>)
    349e:	4798      	blx	r3
	RequiredUploads();
    34a0:	4b05      	ldr	r3, [pc, #20]	; (34b8 <python480Init+0x28>)
    34a2:	4798      	blx	r3
	SoftPowerUp();
    34a4:	4b05      	ldr	r3, [pc, #20]	; (34bc <python480Init+0x2c>)
    34a6:	4798      	blx	r3
    34a8:	bd08      	pop	{r3, pc}
    34aa:	bf00      	nop
    34ac:	00002f39 	.word	0x00002f39
    34b0:	00000d2d 	.word	0x00000d2d
    34b4:	00002f7d 	.word	0x00002f7d
    34b8:	00002f9d 	.word	0x00002f9d
    34bc:	00003451 	.word	0x00003451

000034c0 <Enable_Subsample>:
	spi_BB_Write(220, 0x3C4D);
}

void Enable_Subsample()
// Taken from Raymonds wirefree code. Need to make sure it fit correctly here
{
    34c0:	b510      	push	{r4, lr}
	spi_BB_Write(192, 0x0803 | 0x0080);	// Subsampling
    34c2:	f640 0183 	movw	r1, #2179	; 0x883
    34c6:	20c0      	movs	r0, #192	; 0xc0
    34c8:	4c03      	ldr	r4, [pc, #12]	; (34d8 <Enable_Subsample+0x18>)
    34ca:	47a0      	blx	r4
	spi_BB_Write(194, 0x03E4 | 0x0C00);	// Subsampling mode in both x and y (Check VITA-compatibility)
    34cc:	f640 71e4 	movw	r1, #4068	; 0xfe4
    34d0:	20c2      	movs	r0, #194	; 0xc2
    34d2:	47a0      	blx	r4
    34d4:	bd10      	pop	{r4, pc}
    34d6:	bf00      	nop
    34d8:	00002cf5 	.word	0x00002cf5

000034dc <getCurrentTimeMS>:
	return timeMS;
    34dc:	4b01      	ldr	r3, [pc, #4]	; (34e4 <getCurrentTimeMS+0x8>)
    34de:	6818      	ldr	r0, [r3, #0]
}
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	20000210 	.word	0x20000210

000034e8 <getPropFromHeader>:
	return header32bit[headerPos];
    34e8:	4b02      	ldr	r3, [pc, #8]	; (34f4 <getPropFromHeader+0xc>)
    34ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    34ee:	6840      	ldr	r0, [r0, #4]
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	20000210 	.word	0x20000210

000034f8 <setConfigBlockProp>:
	configBlock32bit[position] = value;
    34f8:	4b01      	ldr	r3, [pc, #4]	; (3500 <setConfigBlockProp+0x8>)
    34fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    34fe:	4770      	bx	lr
    3500:	20000414 	.word	0x20000414

00003504 <setBufferHeader>:
void setBufferHeader(uint32_t dataWordLength) {
    3504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3508:	4680      	mov	r8, r0
	uint32_t numBuffer = bufferCount % NUM_BUFFERS;
    350a:	4b19      	ldr	r3, [pc, #100]	; (3570 <setBufferHeader+0x6c>)
    350c:	f8d3 7404 	ldr.w	r7, [r3, #1028]	; 0x404
    3510:	f007 0707 	and.w	r7, r7, #7
	dataBuffer[numBuffer][BUFFER_HEADER_HEADER_LENGTH_POS] = BUFFER_HEADER_LENGTH;
    3514:	4d17      	ldr	r5, [pc, #92]	; (3574 <setBufferHeader+0x70>)
    3516:	00be      	lsls	r6, r7, #2
    3518:	19f1      	adds	r1, r6, r7
    351a:	030a      	lsls	r2, r1, #12
    351c:	18ac      	adds	r4, r5, r2
    351e:	210c      	movs	r1, #12
    3520:	50a9      	str	r1, [r5, r2]
	dataBuffer[numBuffer][BUFFER_HEADER_LINKED_LIST_POS] = bufferCount % NUM_BUFFERS;
    3522:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3526:	f002 0207 	and.w	r2, r2, #7
    352a:	6062      	str	r2, [r4, #4]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_NUM_POS] = frameNum;
    352c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    3530:	60a2      	str	r2, [r4, #8]
	dataBuffer[numBuffer][BUFFER_HEADER_BUFFER_COUNT_POS] = bufferCount;
    3532:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3536:	60e2      	str	r2, [r4, #12]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_BUFFER_COUNT_POS] = frameBufferCount;
    3538:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    353c:	6123      	str	r3, [r4, #16]
	dataBuffer[numBuffer][BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;   
    353e:	4b0e      	ldr	r3, [pc, #56]	; (3578 <setBufferHeader+0x74>)
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	6163      	str	r3, [r4, #20]
	dataBuffer[numBuffer][BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount; 
    3544:	4b0d      	ldr	r3, [pc, #52]	; (357c <setBufferHeader+0x78>)
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	61a3      	str	r3, [r4, #24]
	dataBuffer[numBuffer][BUFFER_HEADER_TIMESTAMP_POS] = getCurrentTimeMS() - startTimeMS;
    354a:	4b0d      	ldr	r3, [pc, #52]	; (3580 <setBufferHeader+0x7c>)
    354c:	4798      	blx	r3
    354e:	4b0d      	ldr	r3, [pc, #52]	; (3584 <setBufferHeader+0x80>)
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	1ac0      	subs	r0, r0, r3
    3554:	61e0      	str	r0, [r4, #28]
	dataBuffer[numBuffer][BUFFER_HEADER_BATTERY_POS] = battVolt; 
    3556:	4b0c      	ldr	r3, [pc, #48]	; (3588 <setBufferHeader+0x84>)
    3558:	781b      	ldrb	r3, [r3, #0]
    355a:	b2db      	uxtb	r3, r3
    355c:	62a3      	str	r3, [r4, #40]	; 0x28
	dataBuffer[numBuffer][BUFFER_HEADER_EWL_POS] = ewlvalue;
    355e:	4b0b      	ldr	r3, [pc, #44]	; (358c <setBufferHeader+0x88>)
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	62e3      	str	r3, [r4, #44]	; 0x2c
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
    3564:	ea4f 0388 	mov.w	r3, r8, lsl #2
    3568:	6223      	str	r3, [r4, #32]
    356a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    356e:	bf00      	nop
    3570:	20000210 	.word	0x20000210
    3574:	20000bf8 	.word	0x20000bf8
    3578:	20000bec 	.word	0x20000bec
    357c:	20000b44 	.word	0x20000b44
    3580:	000034dd 	.word	0x000034dd
    3584:	20000bd4 	.word	0x20000bd4
    3588:	20000b38 	.word	0x20000b38
    358c:	20029260 	.word	0x20029260

00003590 <pcc_dma_cb>:
	}
}

static void pcc_dma_cb(struct camera_async_descriptor *const descr, uint32_t ch)
{
	if (ch == CONF_PCC_DMA_CHANNEL) {
    3590:	b101      	cbz	r1, 3594 <pcc_dma_cb+0x4>
    3592:	4770      	bx	lr
{
    3594:	b508      	push	{r3, lr}
		//tempHeader[tempCount][2] = 4 * _dma_get_WRB_data(CONF_PCC_DMA_CHANNEL);
		//tempHeader[tempCount][3] = PCC->ISR.reg;
		//if (tempCount < 99)
			//tempCount++;
			
		setBufferHeader(BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH);
    3596:	f241 30f4 	movw	r0, #5108	; 0x13f4
    359a:	4b07      	ldr	r3, [pc, #28]	; (35b8 <pcc_dma_cb+0x28>)
    359c:	4798      	blx	r3
		bufferCount++;// increment counters
    359e:	4b07      	ldr	r3, [pc, #28]	; (35bc <pcc_dma_cb+0x2c>)
    35a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    35a4:	3201      	adds	r2, #1
    35a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		frameBufferCount++;
    35aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
    35ae:	3201      	adds	r2, #1
    35b0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    35b4:	bd08      	pop	{r3, pc}
    35b6:	bf00      	nop
    35b8:	00003505 	.word	0x00003505
    35bc:	20000210 	.word	0x20000210

000035c0 <setSDDescriptor>:
{
    35c0:	b430      	push	{r4, r5}
	temp = temp<<32;
    35c2:	2400      	movs	r4, #0
	SDTransferDescriptor = (temp)|attribute|SD_DESCRIPTOR_LENGTH(length);
    35c4:	b2d2      	uxtb	r2, r2
    35c6:	2300      	movs	r3, #0
    35c8:	4322      	orrs	r2, r4
    35ca:	4303      	orrs	r3, r0
    35cc:	0409      	lsls	r1, r1, #16
    35ce:	430a      	orrs	r2, r1
    35d0:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
    35d4:	4902      	ldr	r1, [pc, #8]	; (35e0 <setSDDescriptor+0x20>)
    35d6:	e9c1 2300 	strd	r2, r3, [r1]
}
    35da:	bc30      	pop	{r4, r5}
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	20029250 	.word	0x20029250

000035e4 <setExcitationLED>:
	}
}

void setExcitationLED(uint32_t value, bool enable)
{
    35e4:	b538      	push	{r3, r4, r5, lr}
    35e6:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    35e8:	2864      	cmp	r0, #100	; 0x64
    35ea:	d900      	bls.n	35ee <setExcitationLED+0xa>
		value = 100;
    35ec:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    35ee:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    35f2:	490b      	ldr	r1, [pc, #44]	; (3620 <setExcitationLED+0x3c>)
    35f4:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // value sets duty cycle out of 2^16. We aren't using CC1 so just send it 0
    35f8:	4c0a      	ldr	r4, [pc, #40]	; (3624 <setExcitationLED+0x40>)
    35fa:	2200      	movs	r2, #0
    35fc:	0949      	lsrs	r1, r1, #5
    35fe:	4620      	mov	r0, r4
    3600:	4b09      	ldr	r3, [pc, #36]	; (3628 <setExcitationLED+0x44>)
    3602:	4798      	blx	r3
	pwm_enable(&PWM_0); //Only actually needs to be done once. Consider moving to init stuff at top of main()
    3604:	4620      	mov	r0, r4
    3606:	4b09      	ldr	r3, [pc, #36]	; (362c <setExcitationLED+0x48>)
    3608:	4798      	blx	r3
	if (level) {
    360a:	b925      	cbnz	r5, 3616 <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    360c:	2202      	movs	r2, #2
    360e:	4b08      	ldr	r3, [pc, #32]	; (3630 <setExcitationLED+0x4c>)
    3610:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3614:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3616:	2202      	movs	r2, #2
    3618:	4b05      	ldr	r3, [pc, #20]	; (3630 <setExcitationLED+0x4c>)
    361a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    361e:	bd38      	pop	{r3, r4, r5, pc}
    3620:	51eb851f 	.word	0x51eb851f
    3624:	20000698 	.word	0x20000698
    3628:	000010cd 	.word	0x000010cd
    362c:	00001091 	.word	0x00001091
    3630:	41008000 	.word	0x41008000

00003634 <setEWL>:
	
	gpio_set_pin_level(ENT_LED, enable);
}

void setEWL(uint32_t value)
{
    3634:	b508      	push	{r3, lr}
	I2C_BB_write(EWL_I2C_ADDR,value);
    3636:	b2c1      	uxtb	r1, r0
    3638:	2023      	movs	r0, #35	; 0x23
    363a:	4b01      	ldr	r3, [pc, #4]	; (3640 <setEWL+0xc>)
    363c:	4798      	blx	r3
    363e:	bd08      	pop	{r3, pc}
    3640:	00002b49 	.word	0x00002b49

00003644 <setStatusLED>:
    3644:	b928      	cbnz	r0, 3652 <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3646:	f44f 7200 	mov.w	r2, #512	; 0x200
    364a:	4b05      	ldr	r3, [pc, #20]	; (3660 <setStatusLED+0x1c>)
    364c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3650:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3652:	f44f 7200 	mov.w	r2, #512	; 0x200
    3656:	4b02      	ldr	r3, [pc, #8]	; (3660 <setStatusLED+0x1c>)
    3658:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    365c:	4770      	bx	lr
    365e:	bf00      	nop
    3660:	41008000 	.word	0x41008000

00003664 <linkedListInit>:
	gpio_set_pin_level(LED_STATUS, value);
}

void linkedListInit(void)
{
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3664:	2300      	movs	r3, #0
    3666:	2b07      	cmp	r3, #7
    3668:	d82b      	bhi.n	36c2 <linkedListInit+0x5e>
{
    366a:	b410      	push	{r4}
		if (i == (NUM_BUFFERS - 1))
    366c:	2b07      	cmp	r3, #7
    366e:	d023      	beq.n	36b8 <linkedListInit+0x54>
			// Last buffer in list. Need to loop back
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
		else
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
    3670:	1c5a      	adds	r2, r3, #1
    3672:	4914      	ldr	r1, [pc, #80]	; (36c4 <linkedListInit+0x60>)
    3674:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    3678:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    367c:	60ca      	str	r2, [r1, #12]
			
		linkedList[i].BTCNT.reg = (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH);
    367e:	4811      	ldr	r0, [pc, #68]	; (36c4 <linkedListInit+0x60>)
    3680:	011a      	lsls	r2, r3, #4
    3682:	1881      	adds	r1, r0, r2
    3684:	f241 34f4 	movw	r4, #5108	; 0x13f4
    3688:	804c      	strh	r4, [r1, #2]
		// We aren't actually using the STEPSIZE part of incrementing the destination address. 
		linkedList[i].BTCTRL.reg = DMAC_BTCTRL_STEPSIZE(0) | (CONF_DMAC_STEPSEL_0 << DMAC_BTCTRL_STEPSEL_Pos)						\
    368a:	f640 2409 	movw	r4, #2569	; 0xa09
    368e:	5284      	strh	r4, [r0, r2]
								| (CONF_DMAC_DSTINC_0 << DMAC_BTCTRL_DSTINC_Pos) | (CONF_DMAC_SRCINC_0 << DMAC_BTCTRL_SRCINC_Pos)	\
								| DMAC_BTCTRL_BEATSIZE(CONF_DMAC_BEATSIZE_0) | DMAC_BTCTRL_BLOCKACT(CONF_DMAC_BLOCKACT_0 | 0x01)            \
								| DMAC_BTCTRL_EVOSEL(CONF_DMAC_EVOSEL_0) | DMAC_BTCTRL_VALID;
	
		linkedList[i].SRCADDR.reg = (uint32_t)(&PCC->RHR.reg); //(void *)&(((Pcc *)device->hw)->RHR.reg)
    3690:	4a0d      	ldr	r2, [pc, #52]	; (36c8 <linkedListInit+0x64>)
    3692:	604a      	str	r2, [r1, #4]
		
		// Destination address when incrementing address needs to be the end address and not the start address.
		// I think the last scale multiplication needs to be either 3 or 5 but _dma_set_data_amount() uses a 4.
		linkedList[i].DSTADDR.reg = (uint32_t)(&dataBuffer[i][BUFFER_HEADER_LENGTH]) + linkedList[i].BTCNT.reg * 4;
    3694:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    3698:	0302      	lsls	r2, r0, #12
    369a:	3230      	adds	r2, #48	; 0x30
    369c:	480b      	ldr	r0, [pc, #44]	; (36cc <linkedListInit+0x68>)
    369e:	4402      	add	r2, r0
    36a0:	8848      	ldrh	r0, [r1, #2]
    36a2:	b280      	uxth	r0, r0
    36a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    36a8:	608a      	str	r2, [r1, #8]
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    36aa:	3301      	adds	r3, #1
    36ac:	b2db      	uxtb	r3, r3
    36ae:	2b07      	cmp	r3, #7
    36b0:	d9dc      	bls.n	366c <linkedListInit+0x8>
	}
	//setPCCCurrentLinkedListPosition(0);
}
    36b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    36b6:	4770      	bx	lr
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
    36b8:	4a02      	ldr	r2, [pc, #8]	; (36c4 <linkedListInit+0x60>)
    36ba:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    36be:	60ca      	str	r2, [r1, #12]
    36c0:	e7dd      	b.n	367e <linkedListInit+0x1a>
    36c2:	4770      	bx	lr
    36c4:	20000b50 	.word	0x20000b50
    36c8:	43002c14 	.word	0x43002c14
    36cc:	20000bf8 	.word	0x20000bf8

000036d0 <setPCCCurrentLinkedListPosition>:
void setPCCCurrentLinkedListPosition(uint8_t pos)
{
    36d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Set up initial DMA descriptor for DMA channel handling PCC. BTCNT is already setup in DMA init step
	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].SRCADDR.reg);
    36d2:	4f0e      	ldr	r7, [pc, #56]	; (370c <setPCCCurrentLinkedListPosition+0x3c>)
    36d4:	0106      	lsls	r6, r0, #4
    36d6:	19bc      	adds	r4, r7, r6
    36d8:	6861      	ldr	r1, [r4, #4]
    36da:	2000      	movs	r0, #0
    36dc:	4b0c      	ldr	r3, [pc, #48]	; (3710 <setPCCCurrentLinkedListPosition+0x40>)
    36de:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg);
    36e0:	68a1      	ldr	r1, [r4, #8]
    36e2:	2000      	movs	r0, #0
    36e4:	4d0b      	ldr	r5, [pc, #44]	; (3714 <setPCCCurrentLinkedListPosition+0x44>)
    36e6:	47a8      	blx	r5
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].BTCNT.reg);
    36e8:	8861      	ldrh	r1, [r4, #2]
    36ea:	b289      	uxth	r1, r1
    36ec:	2000      	movs	r0, #0
    36ee:	4b0a      	ldr	r3, [pc, #40]	; (3718 <setPCCCurrentLinkedListPosition+0x48>)
    36f0:	4798      	blx	r3
	_dma_set_BTCTRL(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].BTCTRL.reg);
    36f2:	5bb9      	ldrh	r1, [r7, r6]
    36f4:	b289      	uxth	r1, r1
    36f6:	2000      	movs	r0, #0
    36f8:	4b08      	ldr	r3, [pc, #32]	; (371c <setPCCCurrentLinkedListPosition+0x4c>)
    36fa:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg); // Overwrite destination address since set_data_amount function modifies this
    36fc:	68a1      	ldr	r1, [r4, #8]
    36fe:	2000      	movs	r0, #0
    3700:	47a8      	blx	r5

	_dma_set_DESCADDR(CONF_PCC_DMA_CHANNEL, linkedList[pos].DESCADDR.reg);
    3702:	68e1      	ldr	r1, [r4, #12]
    3704:	2000      	movs	r0, #0
    3706:	4b06      	ldr	r3, [pc, #24]	; (3720 <setPCCCurrentLinkedListPosition+0x50>)
    3708:	4798      	blx	r3
    370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    370c:	20000b50 	.word	0x20000b50
    3710:	000017cd 	.word	0x000017cd
    3714:	000017bd 	.word	0x000017bd
    3718:	0000180d 	.word	0x0000180d
    371c:	000017dd 	.word	0x000017dd
    3720:	000017ed 	.word	0x000017ed

00003724 <frameValid_cb>:
{
    3724:	b5f0      	push	{r4, r5, r6, r7, lr}
    3726:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3728:	a801      	add	r0, sp, #4
    372a:	4d47      	ldr	r5, [pc, #284]	; (3848 <frameValid_cb+0x124>)
    372c:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    372e:	4e47      	ldr	r6, [pc, #284]	; (384c <frameValid_cb+0x128>)
    3730:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3734:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3738:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    373c:	405c      	eors	r4, r3
    373e:	4014      	ands	r4, r2
    3740:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3742:	a801      	add	r0, sp, #4
    3744:	4f42      	ldr	r7, [pc, #264]	; (3850 <frameValid_cb+0x12c>)
    3746:	47b8      	blx	r7
    3748:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
	CRITICAL_SECTION_ENTER();
    374c:	4668      	mov	r0, sp
    374e:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3750:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3754:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3758:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    375c:	405d      	eors	r5, r3
    375e:	4015      	ands	r5, r2
    3760:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    3762:	4668      	mov	r0, sp
    3764:	47b8      	blx	r7
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    3766:	f415 7f00 	tst.w	r5, #512	; 0x200
    376a:	d00f      	beq.n	378c <frameValid_cb+0x68>
		setStatusLED(0);
    376c:	2000      	movs	r0, #0
    376e:	4b39      	ldr	r3, [pc, #228]	; (3854 <frameValid_cb+0x130>)
    3770:	4798      	blx	r3
	if (pinState == true) {
    3772:	b94c      	cbnz	r4, 3788 <frameValid_cb+0x64>
		if (deviceState & (DEVICE_STATE_RECORDING | DEVICE_STATE_STOP_RECORDING)) {
    3774:	4b38      	ldr	r3, [pc, #224]	; (3858 <frameValid_cb+0x134>)
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	f013 0f18 	tst.w	r3, #24
    377c:	d10a      	bne.n	3794 <frameValid_cb+0x70>
		else if (deviceState & DEVICE_STATE_START_RECORDING_WAITING) {
    377e:	4b36      	ldr	r3, [pc, #216]	; (3858 <frameValid_cb+0x134>)
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	f413 7f00 	tst.w	r3, #512	; 0x200
    3786:	d13e      	bne.n	3806 <frameValid_cb+0xe2>
}
    3788:	b003      	add	sp, #12
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setStatusLED(1);
    378c:	2001      	movs	r0, #1
    378e:	4b31      	ldr	r3, [pc, #196]	; (3854 <frameValid_cb+0x130>)
    3790:	4798      	blx	r3
    3792:	e7ee      	b.n	3772 <frameValid_cb+0x4e>
			PCC->MR.reg &= ~(PCC_MR_PCEN); // Disables PCC
    3794:	4a31      	ldr	r2, [pc, #196]	; (385c <frameValid_cb+0x138>)
    3796:	6813      	ldr	r3, [r2, #0]
    3798:	f023 0301 	bic.w	r3, r3, #1
    379c:	6013      	str	r3, [r2, #0]
			DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHCTRLA.reg &= ~(DMAC_CHCTRLA_ENABLE); // Disables PCC DMA
    379e:	4a30      	ldr	r2, [pc, #192]	; (3860 <frameValid_cb+0x13c>)
    37a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    37a2:	f023 0302 	bic.w	r3, r3, #2
    37a6:	6413      	str	r3, [r2, #64]	; 0x40
			setBufferHeader((BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH) - _dma_get_WRB_data(CONF_PCC_DMA_CHANNEL)); // This should get total beats transferred through DMA
    37a8:	2000      	movs	r0, #0
    37aa:	4b2e      	ldr	r3, [pc, #184]	; (3864 <frameValid_cb+0x140>)
    37ac:	4798      	blx	r3
    37ae:	f5c0 509f 	rsb	r0, r0, #5088	; 0x13e0
    37b2:	3014      	adds	r0, #20
    37b4:	4b2c      	ldr	r3, [pc, #176]	; (3868 <frameValid_cb+0x144>)
    37b6:	4798      	blx	r3
			frameBufferCount = 0;
    37b8:	4b2c      	ldr	r3, [pc, #176]	; (386c <frameValid_cb+0x148>)
    37ba:	2200      	movs	r2, #0
    37bc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			bufferCount++; // A buffer has been filled (likely partially) and is ready for writing to SD card
    37c0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    37c4:	3201      	adds	r2, #1
    37c6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			frameNum++; // Zero-Indexed
    37ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    37ce:	3201      	adds	r2, #1
    37d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (deviceState & DEVICE_STATE_RECORDING) { // Keep recording
    37d4:	4b20      	ldr	r3, [pc, #128]	; (3858 <frameValid_cb+0x134>)
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	f013 0f08 	tst.w	r3, #8
    37dc:	d102      	bne.n	37e4 <frameValid_cb+0xc0>
			if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    37de:	4b1e      	ldr	r3, [pc, #120]	; (3858 <frameValid_cb+0x134>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	e7d1      	b.n	3788 <frameValid_cb+0x64>
				setPCCCurrentLinkedListPosition(bufferCount % NUM_BUFFERS); // Moves to next buffer/linked list element
    37e4:	4b21      	ldr	r3, [pc, #132]	; (386c <frameValid_cb+0x148>)
    37e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    37ea:	f000 0007 	and.w	r0, r0, #7
    37ee:	4b20      	ldr	r3, [pc, #128]	; (3870 <frameValid_cb+0x14c>)
    37f0:	4798      	blx	r3
				_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    37f2:	2100      	movs	r1, #0
    37f4:	4608      	mov	r0, r1
    37f6:	4b1f      	ldr	r3, [pc, #124]	; (3874 <frameValid_cb+0x150>)
    37f8:	4798      	blx	r3
				PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    37fa:	4a18      	ldr	r2, [pc, #96]	; (385c <frameValid_cb+0x138>)
    37fc:	6813      	ldr	r3, [r2, #0]
    37fe:	f043 0301 	orr.w	r3, r3, #1
    3802:	6013      	str	r3, [r2, #0]
    3804:	e7eb      	b.n	37de <frameValid_cb+0xba>
			frameNum = 0;
    3806:	4b19      	ldr	r3, [pc, #100]	; (386c <frameValid_cb+0x148>)
    3808:	2400      	movs	r4, #0
    380a:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
			bufferCount = 0;
    380e:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
			frameBufferCount = 0;
    3812:	f8c3 440c 	str.w	r4, [r3, #1036]	; 0x40c
			linkedListInit();
    3816:	4b18      	ldr	r3, [pc, #96]	; (3878 <frameValid_cb+0x154>)
    3818:	4798      	blx	r3
			setPCCCurrentLinkedListPosition(0); // Moves to next buffer/linked list element
    381a:	4620      	mov	r0, r4
    381c:	4b14      	ldr	r3, [pc, #80]	; (3870 <frameValid_cb+0x14c>)
    381e:	4798      	blx	r3
			_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    3820:	4621      	mov	r1, r4
    3822:	4620      	mov	r0, r4
    3824:	4b13      	ldr	r3, [pc, #76]	; (3874 <frameValid_cb+0x150>)
    3826:	4798      	blx	r3
			PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    3828:	4a0c      	ldr	r2, [pc, #48]	; (385c <frameValid_cb+0x138>)
    382a:	6813      	ldr	r3, [r2, #0]
    382c:	f043 0301 	orr.w	r3, r3, #1
    3830:	6013      	str	r3, [r2, #0]
			deviceState &= ~(DEVICE_STATE_START_RECORDING_WAITING);
    3832:	4b09      	ldr	r3, [pc, #36]	; (3858 <frameValid_cb+0x134>)
    3834:	681a      	ldr	r2, [r3, #0]
    3836:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    383a:	601a      	str	r2, [r3, #0]
			deviceState |= DEVICE_STATE_RECORDING;
    383c:	681a      	ldr	r2, [r3, #0]
    383e:	f042 0208 	orr.w	r2, r2, #8
    3842:	601a      	str	r2, [r3, #0]
}
    3844:	e7a0      	b.n	3788 <frameValid_cb+0x64>
    3846:	bf00      	nop
    3848:	00000c99 	.word	0x00000c99
    384c:	41008000 	.word	0x41008000
    3850:	00000ca7 	.word	0x00000ca7
    3854:	00003645 	.word	0x00003645
    3858:	20000028 	.word	0x20000028
    385c:	43002c00 	.word	0x43002c00
    3860:	4100a000 	.word	0x4100a000
    3864:	000017fd 	.word	0x000017fd
    3868:	00003505 	.word	0x00003505
    386c:	20000210 	.word	0x20000210
    3870:	000036d1 	.word	0x000036d1
    3874:	00001865 	.word	0x00001865
    3878:	00003665 	.word	0x00003665

0000387c <startRecording>:
}

void startRecording()
{
    387c:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    387e:	2300      	movs	r3, #0
    3880:	4a18      	ldr	r2, [pc, #96]	; (38e4 <startRecording+0x68>)
    3882:	6013      	str	r3, [r2, #0]
	writeBufferCount = 0;
    3884:	4a18      	ldr	r2, [pc, #96]	; (38e8 <startRecording+0x6c>)
    3886:	6013      	str	r3, [r2, #0]
	droppedBufferCount = 0;
    3888:	4a18      	ldr	r2, [pc, #96]	; (38ec <startRecording+0x70>)
    388a:	6013      	str	r3, [r2, #0]
	droppedFrameCount = 0;
    388c:	4a18      	ldr	r2, [pc, #96]	; (38f0 <startRecording+0x74>)
    388e:	6013      	str	r3, [r2, #0]
	framesToDrop = 0;
    3890:	4a18      	ldr	r2, [pc, #96]	; (38f4 <startRecording+0x78>)
    3892:	6013      	str	r3, [r2, #0]
	#ifndef ADMA_ENABLE
	sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK); 
	initBlocksRemaining = BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK;
	#endif // not ADMA_ENABLE
		
	startTimeMS = getCurrentTimeMS();
    3894:	4b18      	ldr	r3, [pc, #96]	; (38f8 <startRecording+0x7c>)
    3896:	4798      	blx	r3
    3898:	4b18      	ldr	r3, [pc, #96]	; (38fc <startRecording+0x80>)
    389a:	6018      	str	r0, [r3, #0]
	
	setEWL(getPropFromHeader(HEADER_EWL_POS));
    389c:	2006      	movs	r0, #6
    389e:	4c18      	ldr	r4, [pc, #96]	; (3900 <startRecording+0x84>)
    38a0:	47a0      	blx	r4
    38a2:	4b18      	ldr	r3, [pc, #96]	; (3904 <startRecording+0x88>)
    38a4:	4798      	blx	r3
	setExcitationLED(getPropFromHeader(HEADER_LED_POS), 1);	
    38a6:	2005      	movs	r0, #5
    38a8:	47a0      	blx	r4
    38aa:	2101      	movs	r1, #1
    38ac:	4b16      	ldr	r3, [pc, #88]	; (3908 <startRecording+0x8c>)
    38ae:	4798      	blx	r3
	python480SetGain(getPropFromHeader(HEADER_GAIN_POS));
    38b0:	2004      	movs	r0, #4
    38b2:	47a0      	blx	r4
    38b4:	4b15      	ldr	r3, [pc, #84]	; (390c <startRecording+0x90>)
    38b6:	4798      	blx	r3
	python480SetFPS(getPropFromHeader(HEADER_FRAME_RATE_POS));
    38b8:	2008      	movs	r0, #8
    38ba:	47a0      	blx	r4
    38bc:	4b14      	ldr	r3, [pc, #80]	; (3910 <startRecording+0x94>)
    38be:	4798      	blx	r3
	setStatusLED(1);
    38c0:	2001      	movs	r0, #1
    38c2:	4b14      	ldr	r3, [pc, #80]	; (3914 <startRecording+0x98>)
    38c4:	4798      	blx	r3
	
	deviceState &= ~(DEVICE_STATE_IDLE);
    38c6:	4b14      	ldr	r3, [pc, #80]	; (3918 <startRecording+0x9c>)
    38c8:	681a      	ldr	r2, [r3, #0]
    38ca:	f022 0202 	bic.w	r2, r2, #2
    38ce:	601a      	str	r2, [r3, #0]
	deviceState &= ~(DEVICE_STATE_START_RECORDING);
    38d0:	681a      	ldr	r2, [r3, #0]
    38d2:	f022 0204 	bic.w	r2, r2, #4
    38d6:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    38d8:	681a      	ldr	r2, [r3, #0]
    38da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    38de:	601a      	str	r2, [r3, #0]
    38e0:	bd10      	pop	{r4, pc}
    38e2:	bf00      	nop
    38e4:	20000bf4 	.word	0x20000bf4
    38e8:	20000bec 	.word	0x20000bec
    38ec:	20000b44 	.word	0x20000b44
    38f0:	20000be4 	.word	0x20000be4
    38f4:	20000b40 	.word	0x20000b40
    38f8:	000034dd 	.word	0x000034dd
    38fc:	20000bd4 	.word	0x20000bd4
    3900:	000034e9 	.word	0x000034e9
    3904:	00003635 	.word	0x00003635
    3908:	000035e5 	.word	0x000035e5
    390c:	00002dc5 	.word	0x00002dc5
    3910:	00002e01 	.word	0x00002e01
    3914:	00003645 	.word	0x00003645
    3918:	20000028 	.word	0x20000028

0000391c <stopRecording>:
	
	
}

void stopRecording()
{
    391c:	b510      	push	{r4, lr}
	
	deviceState &= ~(DEVICE_STATE_STOP_RECORDING);
    391e:	4b17      	ldr	r3, [pc, #92]	; (397c <stopRecording+0x60>)
    3920:	681a      	ldr	r2, [r3, #0]
    3922:	f022 0210 	bic.w	r2, r2, #16
    3926:	601a      	str	r2, [r3, #0]
	deviceState &= ~(DEVICE_STATE_RECORDING);
    3928:	681a      	ldr	r2, [r3, #0]
    392a:	f022 0208 	bic.w	r2, r2, #8
    392e:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_IDLE;
    3930:	681a      	ldr	r2, [r3, #0]
    3932:	f042 0202 	orr.w	r2, r2, #2
    3936:	601a      	str	r2, [r3, #0]
	
	// TODO: Update currentBlock maybe to get ready for next recording??
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS, writeBufferCount);
    3938:	4b11      	ldr	r3, [pc, #68]	; (3980 <stopRecording+0x64>)
    393a:	6819      	ldr	r1, [r3, #0]
    393c:	2004      	movs	r0, #4
    393e:	4c11      	ldr	r4, [pc, #68]	; (3984 <stopRecording+0x68>)
    3940:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS, droppedBufferCount);
    3942:	4b11      	ldr	r3, [pc, #68]	; (3988 <stopRecording+0x6c>)
    3944:	6819      	ldr	r1, [r3, #0]
    3946:	2005      	movs	r0, #5
    3948:	47a0      	blx	r4
	
	// Currently not using ADMA. Might consider switching everything over to ADMA to be consistent
	sd_mmc_init_write_blocks(0,CONFIG_BLOCK, 1);
    394a:	2201      	movs	r2, #1
    394c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3950:	2000      	movs	r0, #0
    3952:	4b0e      	ldr	r3, [pc, #56]	; (398c <stopRecording+0x70>)
    3954:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3956:	2101      	movs	r1, #1
    3958:	480d      	ldr	r0, [pc, #52]	; (3990 <stopRecording+0x74>)
    395a:	4b0e      	ldr	r3, [pc, #56]	; (3994 <stopRecording+0x78>)
    395c:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    395e:	2000      	movs	r0, #0
    3960:	4b0d      	ldr	r3, [pc, #52]	; (3998 <stopRecording+0x7c>)
    3962:	4798      	blx	r3
	
	setExcitationLED(0, false);
    3964:	2100      	movs	r1, #0
    3966:	4608      	mov	r0, r1
    3968:	4b0c      	ldr	r3, [pc, #48]	; (399c <stopRecording+0x80>)
    396a:	4798      	blx	r3
	setEWL(0x00);	//Sets the EWL to standby mode
    396c:	2000      	movs	r0, #0
    396e:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <stopRecording+0x84>)
    3970:	4798      	blx	r3
	setStatusLED(0);	
    3972:	2000      	movs	r0, #0
    3974:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <stopRecording+0x88>)
    3976:	4798      	blx	r3
    3978:	bd10      	pop	{r4, pc}
    397a:	bf00      	nop
    397c:	20000028 	.word	0x20000028
    3980:	20000bec 	.word	0x20000bec
    3984:	000034f9 	.word	0x000034f9
    3988:	20000b44 	.word	0x20000b44
    398c:	000041e5 	.word	0x000041e5
    3990:	20000414 	.word	0x20000414
    3994:	00004285 	.word	0x00004285
    3998:	000042d1 	.word	0x000042d1
    399c:	000035e5 	.word	0x000035e5
    39a0:	00003635 	.word	0x00003635
    39a4:	00003645 	.word	0x00003645

000039a8 <recording>:
	
}

void recording()
{
    39a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	setStatusLED(1);
    39ac:	2001      	movs	r0, #1
    39ae:	4b71      	ldr	r3, [pc, #452]	; (3b74 <recording+0x1cc>)
    39b0:	4798      	blx	r3
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    39b2:	4b71      	ldr	r3, [pc, #452]	; (3b78 <recording+0x1d0>)
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	4a71      	ldr	r2, [pc, #452]	; (3b7c <recording+0x1d4>)
    39b8:	6812      	ldr	r2, [r2, #0]
    39ba:	4413      	add	r3, r2
    39bc:	4a70      	ldr	r2, [pc, #448]	; (3b80 <recording+0x1d8>)
    39be:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    39c2:	4293      	cmp	r3, r2
    39c4:	d244      	bcs.n	3a50 <recording+0xa8>
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    39c6:	4b6c      	ldr	r3, [pc, #432]	; (3b78 <recording+0x1d0>)
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	4a6c      	ldr	r2, [pc, #432]	; (3b7c <recording+0x1d4>)
    39cc:	6812      	ldr	r2, [r2, #0]
    39ce:	4413      	add	r3, r2
    39d0:	3308      	adds	r3, #8
    39d2:	4a6b      	ldr	r2, [pc, #428]	; (3b80 <recording+0x1d8>)
    39d4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    39d8:	4293      	cmp	r3, r2
    39da:	d23b      	bcs.n	3a54 <recording+0xac>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			// TODO: I think NUM_BUFFERS here should actually be number_of_buffers_per_frame
			droppedBufferCount += (numBuffersPerFrame - (writeBufferCount + droppedBufferCount) % numBuffersPerFrame);
    39dc:	4868      	ldr	r0, [pc, #416]	; (3b80 <recording+0x1d8>)
    39de:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
    39e2:	4a65      	ldr	r2, [pc, #404]	; (3b78 <recording+0x1d0>)
    39e4:	6812      	ldr	r2, [r2, #0]
    39e6:	4965      	ldr	r1, [pc, #404]	; (3b7c <recording+0x1d4>)
    39e8:	680c      	ldr	r4, [r1, #0]
    39ea:	4422      	add	r2, r4
    39ec:	f8d0 4410 	ldr.w	r4, [r0, #1040]	; 0x410
    39f0:	fbb2 f0f4 	udiv	r0, r2, r4
    39f4:	fb04 2210 	mls	r2, r4, r0, r2
    39f8:	1a9b      	subs	r3, r3, r2
    39fa:	680a      	ldr	r2, [r1, #0]
    39fc:	4413      	add	r3, r2
    39fe:	600b      	str	r3, [r1, #0]
			//{
				//setExcitationLED(4,1);
				//
			//}
		//}				
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) && (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    3a00:	4b60      	ldr	r3, [pc, #384]	; (3b84 <recording+0x1dc>)
    3a02:	4798      	blx	r3
    3a04:	4b60      	ldr	r3, [pc, #384]	; (3b88 <recording+0x1e0>)
    3a06:	681c      	ldr	r4, [r3, #0]
    3a08:	1b04      	subs	r4, r0, r4
    3a0a:	2007      	movs	r0, #7
    3a0c:	4b5f      	ldr	r3, [pc, #380]	; (3b8c <recording+0x1e4>)
    3a0e:	4798      	blx	r3
    3a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3a14:	fb03 f300 	mul.w	r3, r3, r0
    3a18:	429c      	cmp	r4, r3
    3a1a:	d305      	bcc.n	3a28 <recording+0x80>
    3a1c:	b120      	cbz	r0, 3a28 <recording+0x80>
		// Recording time has elapsed	
			deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording	
    3a1e:	4a5c      	ldr	r2, [pc, #368]	; (3b90 <recording+0x1e8>)
    3a20:	6813      	ldr	r3, [r2, #0]
    3a22:	f043 0310 	orr.w	r3, r3, #16
    3a26:	6013      	str	r3, [r2, #0]
		}
		
		if (((getCurrentTimeMS() - startTimeMS) <= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) && (getPropFromHeader(HEADER_ewlSCan_Mode_POS) == 1) && (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    3a28:	4b56      	ldr	r3, [pc, #344]	; (3b84 <recording+0x1dc>)
    3a2a:	4798      	blx	r3
    3a2c:	4b56      	ldr	r3, [pc, #344]	; (3b88 <recording+0x1e0>)
    3a2e:	681c      	ldr	r4, [r3, #0]
    3a30:	1b04      	subs	r4, r0, r4
    3a32:	2007      	movs	r0, #7
    3a34:	4b55      	ldr	r3, [pc, #340]	; (3b8c <recording+0x1e4>)
    3a36:	4798      	blx	r3
    3a38:	4605      	mov	r5, r0
    3a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3a3e:	fb03 f300 	mul.w	r3, r3, r0
    3a42:	429c      	cmp	r4, r3
    3a44:	d804      	bhi.n	3a50 <recording+0xa8>
    3a46:	200b      	movs	r0, #11
    3a48:	4b50      	ldr	r3, [pc, #320]	; (3b8c <recording+0x1e4>)
    3a4a:	4798      	blx	r3
    3a4c:	2801      	cmp	r0, #1
    3a4e:	d055      	beq.n	3afc <recording+0x154>
    3a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    3a54:	4b48      	ldr	r3, [pc, #288]	; (3b78 <recording+0x1d0>)
    3a56:	681b      	ldr	r3, [r3, #0]
    3a58:	4a48      	ldr	r2, [pc, #288]	; (3b7c <recording+0x1d4>)
    3a5a:	6812      	ldr	r2, [r2, #0]
    3a5c:	4413      	add	r3, r2
    3a5e:	f003 0307 	and.w	r3, r3, #7
    3a62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a66:	031c      	lsls	r4, r3, #12
    3a68:	4b4a      	ldr	r3, [pc, #296]	; (3b94 <recording+0x1ec>)
    3a6a:	441c      	add	r4, r3
    3a6c:	4b4a      	ldr	r3, [pc, #296]	; (3b98 <recording+0x1f0>)
    3a6e:	601c      	str	r4, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3a70:	6a23      	ldr	r3, [r4, #32]
    3a72:	f203 232f 	addw	r3, r3, #559	; 0x22f
    3a76:	0a5b      	lsrs	r3, r3, #9
    3a78:	4a45      	ldr	r2, [pc, #276]	; (3b90 <recording+0x1e8>)
    3a7a:	6053      	str	r3, [r2, #4]
			if (numBlocks > BUFFER_BLOCK_LENGTH)
    3a7c:	6853      	ldr	r3, [r2, #4]
    3a7e:	2b28      	cmp	r3, #40	; 0x28
    3a80:	d902      	bls.n	3a88 <recording+0xe0>
				numBlocks = BUFFER_BLOCK_LENGTH;
    3a82:	2228      	movs	r2, #40	; 0x28
    3a84:	4b42      	ldr	r3, [pc, #264]	; (3b90 <recording+0x1e8>)
    3a86:	605a      	str	r2, [r3, #4]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3a88:	4d3b      	ldr	r5, [pc, #236]	; (3b78 <recording+0x1d0>)
    3a8a:	682b      	ldr	r3, [r5, #0]
    3a8c:	6163      	str	r3, [r4, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3a8e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3b7c <recording+0x1d4>
    3a92:	f8d8 3000 	ldr.w	r3, [r8]
    3a96:	61a3      	str	r3, [r4, #24]
			bufferToWrite[BUFFER_HEADER_WRITE_TIMESTAMP_POS] = getCurrentTimeMS() - startTimeMS;
    3a98:	4f3a      	ldr	r7, [pc, #232]	; (3b84 <recording+0x1dc>)
    3a9a:	47b8      	blx	r7
    3a9c:	4e3a      	ldr	r6, [pc, #232]	; (3b88 <recording+0x1e0>)
    3a9e:	6833      	ldr	r3, [r6, #0]
    3aa0:	1ac0      	subs	r0, r0, r3
    3aa2:	6260      	str	r0, [r4, #36]	; 0x24
			tempTimestamp[(writeBufferCount + droppedBufferCount) % 100] = getCurrentTimeMS() - startTimeMS;
    3aa4:	682b      	ldr	r3, [r5, #0]
    3aa6:	f8d8 2000 	ldr.w	r2, [r8]
    3aaa:	4413      	add	r3, r2
    3aac:	4c3b      	ldr	r4, [pc, #236]	; (3b9c <recording+0x1f4>)
    3aae:	fba4 2403 	umull	r2, r4, r4, r3
    3ab2:	0964      	lsrs	r4, r4, #5
    3ab4:	2264      	movs	r2, #100	; 0x64
    3ab6:	fb02 3414 	mls	r4, r2, r4, r3
    3aba:	47b8      	blx	r7
    3abc:	6833      	ldr	r3, [r6, #0]
    3abe:	1ac0      	subs	r0, r0, r3
    3ac0:	4b37      	ldr	r3, [pc, #220]	; (3ba0 <recording+0x1f8>)
    3ac2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
			setSDDescriptor(bufferToWrite, numBlocks * SD_BLOCK_SIZE, 
    3ac6:	4c32      	ldr	r4, [pc, #200]	; (3b90 <recording+0x1e8>)
    3ac8:	6861      	ldr	r1, [r4, #4]
    3aca:	0249      	lsls	r1, r1, #9
    3acc:	2223      	movs	r2, #35	; 0x23
    3ace:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    3ad2:	4b31      	ldr	r3, [pc, #196]	; (3b98 <recording+0x1f0>)
    3ad4:	6818      	ldr	r0, [r3, #0]
    3ad6:	4b33      	ldr	r3, [pc, #204]	; (3ba4 <recording+0x1fc>)
    3ad8:	4798      	blx	r3
			sd_mmc_write_with_ADMA(0, currentBlock, (uint32_t)&SDTransferDescriptor, numBlocks);
    3ada:	68a1      	ldr	r1, [r4, #8]
    3adc:	6863      	ldr	r3, [r4, #4]
    3ade:	4a32      	ldr	r2, [pc, #200]	; (3ba8 <recording+0x200>)
    3ae0:	2000      	movs	r0, #0
    3ae2:	4e32      	ldr	r6, [pc, #200]	; (3bac <recording+0x204>)
    3ae4:	47b0      	blx	r6
			sd_mmc_wait_end_of_ADMA_write(false);
    3ae6:	2000      	movs	r0, #0
    3ae8:	4b31      	ldr	r3, [pc, #196]	; (3bb0 <recording+0x208>)
    3aea:	4798      	blx	r3
			currentBlock += numBlocks;
    3aec:	6863      	ldr	r3, [r4, #4]
    3aee:	68a2      	ldr	r2, [r4, #8]
    3af0:	4413      	add	r3, r2
    3af2:	60a3      	str	r3, [r4, #8]
			writeBufferCount++;	
    3af4:	682b      	ldr	r3, [r5, #0]
    3af6:	3301      	adds	r3, #1
    3af8:	602b      	str	r3, [r5, #0]
    3afa:	e781      	b.n	3a00 <recording+0x58>
		if (((getCurrentTimeMS() - startTimeMS) <= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) && (getPropFromHeader(HEADER_ewlSCan_Mode_POS) == 1) && (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    3afc:	2d00      	cmp	r5, #0
    3afe:	d0a7      	beq.n	3a50 <recording+0xa8>
			//We set a new plane
			if(ewlvalue > 0 && ewlvalue<= 255 && ewlvalue <= ewlStop){  //We make sure that we don't take invalid EWL planes and that we stop at the last value of EWL
    3b00:	4b2c      	ldr	r3, [pc, #176]	; (3bb4 <recording+0x20c>)
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d0a3      	beq.n	3a50 <recording+0xa8>
    3b08:	4b2a      	ldr	r3, [pc, #168]	; (3bb4 <recording+0x20c>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2bff      	cmp	r3, #255	; 0xff
    3b0e:	d89f      	bhi.n	3a50 <recording+0xa8>
    3b10:	4b29      	ldr	r3, [pc, #164]	; (3bb8 <recording+0x210>)
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	b29b      	uxth	r3, r3
    3b16:	4a27      	ldr	r2, [pc, #156]	; (3bb4 <recording+0x20c>)
    3b18:	6812      	ldr	r2, [r2, #0]
    3b1a:	4293      	cmp	r3, r2
    3b1c:	d398      	bcc.n	3a50 <recording+0xa8>
					if ((getCurrentTimeMS() - startTimeMS) >= ewlStepTime*1000 *(ewlCount+1)){
    3b1e:	4b19      	ldr	r3, [pc, #100]	; (3b84 <recording+0x1dc>)
    3b20:	4798      	blx	r3
    3b22:	4b19      	ldr	r3, [pc, #100]	; (3b88 <recording+0x1e0>)
    3b24:	681b      	ldr	r3, [r3, #0]
    3b26:	1ac0      	subs	r0, r0, r3
    3b28:	4b24      	ldr	r3, [pc, #144]	; (3bbc <recording+0x214>)
    3b2a:	881b      	ldrh	r3, [r3, #0]
    3b2c:	b29b      	uxth	r3, r3
    3b2e:	4a14      	ldr	r2, [pc, #80]	; (3b80 <recording+0x1d8>)
    3b30:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
    3b34:	fb02 3303 	mla	r3, r2, r3, r3
    3b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b3c:	fb02 f303 	mul.w	r3, r2, r3
    3b40:	4298      	cmp	r0, r3
    3b42:	d385      	bcc.n	3a50 <recording+0xa8>
					ewlvalue = ewlStart + (ewlCount+1)*ewlStep;
    3b44:	4b1e      	ldr	r3, [pc, #120]	; (3bc0 <recording+0x218>)
    3b46:	881a      	ldrh	r2, [r3, #0]
    3b48:	4c0d      	ldr	r4, [pc, #52]	; (3b80 <recording+0x1d8>)
    3b4a:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
    3b4e:	4b1d      	ldr	r3, [pc, #116]	; (3bc4 <recording+0x21c>)
    3b50:	881b      	ldrh	r3, [r3, #0]
    3b52:	b29b      	uxth	r3, r3
    3b54:	fb01 3303 	mla	r3, r1, r3, r3
    3b58:	fa13 f382 	uxtah	r3, r3, r2
    3b5c:	4a15      	ldr	r2, [pc, #84]	; (3bb4 <recording+0x20c>)
    3b5e:	6013      	str	r3, [r2, #0]
					setEWL(ewlvalue);
    3b60:	6810      	ldr	r0, [r2, #0]
    3b62:	4b19      	ldr	r3, [pc, #100]	; (3bc8 <recording+0x220>)
    3b64:	4798      	blx	r3
					ewlCount++;
    3b66:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
    3b6a:	3301      	adds	r3, #1
    3b6c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
		//	deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording			
		//}
		
	}
	
}
    3b70:	e76e      	b.n	3a50 <recording+0xa8>
    3b72:	bf00      	nop
    3b74:	00003645 	.word	0x00003645
    3b78:	20000bec 	.word	0x20000bec
    3b7c:	20000b44 	.word	0x20000b44
    3b80:	20000210 	.word	0x20000210
    3b84:	000034dd 	.word	0x000034dd
    3b88:	20000bd4 	.word	0x20000bd4
    3b8c:	000034e9 	.word	0x000034e9
    3b90:	20000028 	.word	0x20000028
    3b94:	20000bf8 	.word	0x20000bf8
    3b98:	20000bd0 	.word	0x20000bd0
    3b9c:	51eb851f 	.word	0x51eb851f
    3ba0:	20029264 	.word	0x20029264
    3ba4:	000035c1 	.word	0x000035c1
    3ba8:	20029250 	.word	0x20029250
    3bac:	000040c1 	.word	0x000040c1
    3bb0:	000041b1 	.word	0x000041b1
    3bb4:	20029260 	.word	0x20029260
    3bb8:	20000bd8 	.word	0x20000bd8
    3bbc:	2002925e 	.word	0x2002925e
    3bc0:	20000be8 	.word	0x20000be8
    3bc4:	2002925c 	.word	0x2002925c
    3bc8:	00003635 	.word	0x00003635

00003bcc <main>:

// Check SD card write speed by directly measuring the clock pin with oscilloscope. Potentially it needs to be sped up: TODO

// ================================================================
int main(void)
{
    3bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	
	// Probably should put this somewhere else or as a define
	numBuffersPerFrame = (WIDTH * HEIGHT) / (BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE - (BUFFER_HEADER_LENGTH * 4));
    3bd0:	4c7a      	ldr	r4, [pc, #488]	; (3dbc <main+0x1f0>)
    3bd2:	2312      	movs	r3, #18
    3bd4:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
	if ((WIDTH * HEIGHT) % (BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE - (BUFFER_HEADER_LENGTH * 4)) != 0)
	// Need to add 1 to account for partially filled buffer
		numBuffersPerFrame += 1;
    3bd8:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    3bdc:	3301      	adds	r3, #1
    3bde:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
		
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    3be2:	4b77      	ldr	r3, [pc, #476]	; (3dc0 <main+0x1f4>)
    3be4:	4798      	blx	r3
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3be6:	f04f 0802 	mov.w	r8, #2
    3bea:	4b76      	ldr	r3, [pc, #472]	; (3dc4 <main+0x1f8>)
    3bec:	f883 800c 	strb.w	r8, [r3, #12]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bf0:	4f75      	ldr	r7, [pc, #468]	; (3dc8 <main+0x1fc>)
    3bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3bf6:	61bb      	str	r3, [r7, #24]
	// We need to change the PWM mode from MPWM to NPWM because we are using WO[0] as waveform output
	hri_tc_write_WAVE_reg(TC0, TC_WAVE_WAVEGEN_NPWM_Val);	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3bf8:	2100      	movs	r1, #0
    3bfa:	4874      	ldr	r0, [pc, #464]	; (3dcc <main+0x200>)
    3bfc:	4b74      	ldr	r3, [pc, #464]	; (3dd0 <main+0x204>)
    3bfe:	4798      	blx	r3
	//setStatusLED(1);
	
	//setStatusLED(0);	
	
	I2C_BB_init();
    3c00:	4b74      	ldr	r3, [pc, #464]	; (3dd4 <main+0x208>)
    3c02:	4798      	blx	r3
	//setEWL(0xFE);
	//setExcitationLED(2,1);
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    3c04:	2601      	movs	r6, #1
    3c06:	f8c4 6420 	str.w	r6, [r4, #1056]	; 0x420
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3c0a:	4b73      	ldr	r3, [pc, #460]	; (3dd8 <main+0x20c>)
    3c0c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    3c10:	f884 6428 	strb.w	r6, [r4, #1064]	; 0x428
	
	TIMER_0_task2.interval = 500; // Units are in ms so 1000 should check every 1 second
    3c14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3c18:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3c1c:	4b6f      	ldr	r3, [pc, #444]	; (3ddc <main+0x210>)
    3c1e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3c22:	f884 643c 	strb.w	r6, [r4, #1084]	; 0x43c
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3c26:	4d6e      	ldr	r5, [pc, #440]	; (3de0 <main+0x214>)
    3c28:	f504 6183 	add.w	r1, r4, #1048	; 0x418
    3c2c:	4628      	mov	r0, r5
    3c2e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 3e88 <main+0x2bc>
    3c32:	47c8      	blx	r9
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3c34:	f204 412c 	addw	r1, r4, #1068	; 0x42c
    3c38:	4628      	mov	r0, r5
    3c3a:	47c8      	blx	r9
	timer_start(&TIMER_0);
    3c3c:	4628      	mov	r0, r5
    3c3e:	4b69      	ldr	r3, [pc, #420]	; (3de4 <main+0x218>)
    3c40:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    3c42:	4969      	ldr	r1, [pc, #420]	; (3de8 <main+0x21c>)
    3c44:	2036      	movs	r0, #54	; 0x36
    3c46:	4d69      	ldr	r5, [pc, #420]	; (3dec <main+0x220>)
    3c48:	47a8      	blx	r5
	ext_irq_register(PIN_PB23, battCharging_cb);
    3c4a:	4969      	ldr	r1, [pc, #420]	; (3df0 <main+0x224>)
    3c4c:	2037      	movs	r0, #55	; 0x37
    3c4e:	47a8      	blx	r5
	ext_irq_register(PIN_PB14, frameValid_cb);
    3c50:	4968      	ldr	r1, [pc, #416]	; (3df4 <main+0x228>)
    3c52:	202e      	movs	r0, #46	; 0x2e
    3c54:	47a8      	blx	r5
	ext_irq_register(PIN_PA25, pushButton_cb);
    3c56:	4968      	ldr	r1, [pc, #416]	; (3df8 <main+0x22c>)
    3c58:	2019      	movs	r0, #25
    3c5a:	47a8      	blx	r5
	
	
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
    3c5c:	4b67      	ldr	r3, [pc, #412]	; (3dfc <main+0x230>)
    3c5e:	4798      	blx	r3
	
	setStatusLED(0);
    3c60:	2000      	movs	r0, #0
    3c62:	4b67      	ldr	r3, [pc, #412]	; (3e00 <main+0x234>)
    3c64:	4798      	blx	r3
			
	//delay_ms(5000);
	//setStatusLED(0);
	
	// Give capabilities info of sd card
	tempPCC[0] = SDHC0->CA0R.reg;
    3c66:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    3c6a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    3c6c:	4a65      	ldr	r2, [pc, #404]	; (3e04 <main+0x238>)
    3c6e:	6011      	str	r1, [r2, #0]
	tempPCC[1] = SDHC0->CA1R.reg;
    3c70:	6c59      	ldr	r1, [r3, #68]	; 0x44
    3c72:	6051      	str	r1, [r2, #4]
	tempPCC[2] = SDHC0->HC1R.reg;
    3c74:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
    3c78:	b2c9      	uxtb	r1, r1
    3c7a:	6091      	str	r1, [r2, #8]
	
	// Select ADMA as the DMA to use. This should be moved to where other bits of HC1R get set.
	SDHC0->HC1R.reg |= 1<<4;
    3c7c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    3c80:	f042 0210 	orr.w	r2, r2, #16
    3c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3c88:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    3c8c:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(1000);
    3c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3c94:	4b5c      	ldr	r3, [pc, #368]	; (3e08 <main+0x23c>)
    3c96:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c98:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(1000); // minimum delay is 10us
    3c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3ca0:	4b5a      	ldr	r3, [pc, #360]	; (3e0c <main+0x240>)
    3ca2:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    3ca4:	2000      	movs	r0, #0
    3ca6:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 3e8c <main+0x2c0>
    3caa:	47c8      	blx	r9
    3cac:	4f58      	ldr	r7, [pc, #352]	; (3e10 <main+0x244>)
    3cae:	8038      	strh	r0, [r7, #0]
	ewlvalue = getPropFromHeader(HEADER_EWL_POS);
    3cb0:	2006      	movs	r0, #6
    3cb2:	4d58      	ldr	r5, [pc, #352]	; (3e14 <main+0x248>)
    3cb4:	47a8      	blx	r5
    3cb6:	4b58      	ldr	r3, [pc, #352]	; (3e18 <main+0x24c>)
    3cb8:	6018      	str	r0, [r3, #0]
	batteryvalue = getPropFromHeader(HEADER_BATT_CUTOFF_POS);
    3cba:	200a      	movs	r0, #10
    3cbc:	47a8      	blx	r5
    3cbe:	4b57      	ldr	r3, [pc, #348]	; (3e1c <main+0x250>)
    3cc0:	6018      	str	r0, [r3, #0]
	ledvalue = getPropFromHeader(HEADER_LED_POS);
    3cc2:	2005      	movs	r0, #5
    3cc4:	47a8      	blx	r5
    3cc6:	4b56      	ldr	r3, [pc, #344]	; (3e20 <main+0x254>)
    3cc8:	6018      	str	r0, [r3, #0]
	frameratevalue = getPropFromHeader(HEADER_FRAME_RATE_POS);
    3cca:	2008      	movs	r0, #8
    3ccc:	47a8      	blx	r5
    3cce:	4b55      	ldr	r3, [pc, #340]	; (3e24 <main+0x258>)
    3cd0:	6018      	str	r0, [r3, #0]
	delayvalue = getPropFromHeader(HEADER_DELAY_START_POS);
    3cd2:	2009      	movs	r0, #9
    3cd4:	47a8      	blx	r5
    3cd6:	4b54      	ldr	r3, [pc, #336]	; (3e28 <main+0x25c>)
    3cd8:	6018      	str	r0, [r3, #0]
	reclengthvalue = getPropFromHeader(HEADER_RECORD_LENGTH_POS);
    3cda:	2007      	movs	r0, #7
    3cdc:	47a8      	blx	r5
    3cde:	4b53      	ldr	r3, [pc, #332]	; (3e2c <main+0x260>)
    3ce0:	6018      	str	r0, [r3, #0]
	
	//EWL Scan variables 
	
	ewlSCan_Mode = getPropFromHeader(HEADER_ewlSCan_Mode_POS);
    3ce2:	200b      	movs	r0, #11
    3ce4:	47a8      	blx	r5
    3ce6:	b280      	uxth	r0, r0
    3ce8:	4b51      	ldr	r3, [pc, #324]	; (3e30 <main+0x264>)
    3cea:	8018      	strh	r0, [r3, #0]
	ewlStart = getPropFromHeader(HEADER_ewlStart_POS);
    3cec:	200c      	movs	r0, #12
    3cee:	47a8      	blx	r5
    3cf0:	b280      	uxth	r0, r0
    3cf2:	4b50      	ldr	r3, [pc, #320]	; (3e34 <main+0x268>)
    3cf4:	8018      	strh	r0, [r3, #0]
	ewlStop = getPropFromHeader(HEADER_ewlStop_POS);
    3cf6:	200d      	movs	r0, #13
    3cf8:	47a8      	blx	r5
    3cfa:	b280      	uxth	r0, r0
    3cfc:	4b4e      	ldr	r3, [pc, #312]	; (3e38 <main+0x26c>)
    3cfe:	8018      	strh	r0, [r3, #0]
	ewlStep = getPropFromHeader(HEADER_ewlStep_POS);
    3d00:	200e      	movs	r0, #14
    3d02:	47a8      	blx	r5
    3d04:	b280      	uxth	r0, r0
    3d06:	4b4d      	ldr	r3, [pc, #308]	; (3e3c <main+0x270>)
    3d08:	8018      	strh	r0, [r3, #0]
	ewlStepTime = getPropFromHeader(HEADER_ewlStepTime_POS);
    3d0a:	200f      	movs	r0, #15
    3d0c:	47a8      	blx	r5
    3d0e:	b280      	uxth	r0, r0
    3d10:	4b4b      	ldr	r3, [pc, #300]	; (3e40 <main+0x274>)
    3d12:	8018      	strh	r0, [r3, #0]
	
	
	
	python480Init();
    3d14:	4b4b      	ldr	r3, [pc, #300]	; (3e44 <main+0x278>)
    3d16:	4798      	blx	r3
	Enable_Subsample();
    3d18:	4b4b      	ldr	r3, [pc, #300]	; (3e48 <main+0x27c>)
    3d1a:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00);
    3d1c:	2000      	movs	r0, #0
    3d1e:	47c8      	blx	r9
    3d20:	8038      	strh	r0, [r7, #0]
	//python480SetFPS(getPropFromHeader(HEADER_FRAME_RATE_POS));
	//python480SetFPS(FRAME_RATE);
	
	// Set some parameters in config buffer to be written to SD card at end of recording
	// TODO: Add additional info in the config block to cover everything needed for offline processing
	setConfigBlockProp(CONFIG_BLOCK_WIDTH_POS, WIDTH / BINNING);
    3d22:	f44f 7198 	mov.w	r1, #304	; 0x130
    3d26:	2000      	movs	r0, #0
    3d28:	4f48      	ldr	r7, [pc, #288]	; (3e4c <main+0x280>)
    3d2a:	47b8      	blx	r7
	setConfigBlockProp(CONFIG_BLOCK_HEIGHT_POS, HEIGHT / BINNING);
    3d2c:	f44f 7198 	mov.w	r1, #304	; 0x130
    3d30:	4630      	mov	r0, r6
    3d32:	47b8      	blx	r7
	setConfigBlockProp(CONFIG_BLOCK_FRAME_RATE_POS, getPropFromHeader(HEADER_FRAME_RATE_POS));
    3d34:	2008      	movs	r0, #8
    3d36:	47a8      	blx	r5
    3d38:	4601      	mov	r1, r0
    3d3a:	4640      	mov	r0, r8
    3d3c:	47b8      	blx	r7
	setConfigBlockProp(CONFIG_BLOCK_BUFFER_SIZE_POS, BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE);
    3d3e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    3d42:	2003      	movs	r0, #3
    3d44:	47b8      	blx	r7
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS, 0);
    3d46:	2100      	movs	r1, #0
    3d48:	2004      	movs	r0, #4
    3d4a:	47b8      	blx	r7
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS,0);
    3d4c:	2100      	movs	r1, #0
    3d4e:	2005      	movs	r0, #5
    3d50:	47b8      	blx	r7
	
	sd_mmc_init_write_blocks(0, CONFIG_BLOCK, 1);
    3d52:	4632      	mov	r2, r6
    3d54:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3d58:	2000      	movs	r0, #0
    3d5a:	4b3d      	ldr	r3, [pc, #244]	; (3e50 <main+0x284>)
    3d5c:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
    3d5e:	4631      	mov	r1, r6
    3d60:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3d64:	4b3b      	ldr	r3, [pc, #236]	; (3e54 <main+0x288>)
    3d66:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    3d68:	2000      	movs	r0, #0
    3d6a:	4b3b      	ldr	r3, [pc, #236]	; (3e58 <main+0x28c>)
    3d6c:	4798      	blx	r3
	
	
	//setEWL(0x33);  //test value. Should we map the 0x01 to 0xFF as a 0-100 scale?
	
	// Enables DMA Transfer complete interrupt. Should be put in better place
	DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    3d6e:	4b3b      	ldr	r3, [pc, #236]	; (3e5c <main+0x290>)
    3d70:	f883 804d 	strb.w	r8, [r3, #77]	; 0x4d
 *  \retval ERR_NONE A callback is registered successfully
 *  \retval -1 Passed parameters were invalid
 */
static inline int32_t camera_async_register_callback(struct camera_async_descriptor *const descr, camera_async_cb_t cb)
{
	ASSERT(descr);
    3d74:	22a2      	movs	r2, #162	; 0xa2
    3d76:	493a      	ldr	r1, [pc, #232]	; (3e60 <main+0x294>)
    3d78:	4630      	mov	r0, r6
    3d7a:	4b3a      	ldr	r3, [pc, #232]	; (3e64 <main+0x298>)
    3d7c:	4798      	blx	r3

	descr->capture_done = cb;
    3d7e:	4a3a      	ldr	r2, [pc, #232]	; (3e68 <main+0x29c>)
    3d80:	4b3a      	ldr	r3, [pc, #232]	; (3e6c <main+0x2a0>)
    3d82:	611a      	str	r2, [r3, #16]
	
	// Sets the callback for when each DMA buffer is full
	camera_async_register_callback(&CAMERA_0, pcc_dma_cb);
	
	// This should already be done in init but trying here as well
	PCC->MR.reg = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
    3d84:	4a3a      	ldr	r2, [pc, #232]	; (3e70 <main+0x2a4>)
    3d86:	4b3b      	ldr	r3, [pc, #236]	; (3e74 <main+0x2a8>)
    3d88:	601a      	str	r2, [r3, #0]
    3d8a:	e007      	b.n	3d9c <main+0x1d0>
	//PCC->IER.reg = 3;
	
	//deviceState = DEVICE_STATE_START_RECORDING;
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING) {
			startRecording();
    3d8c:	4b3a      	ldr	r3, [pc, #232]	; (3e78 <main+0x2ac>)
    3d8e:	4798      	blx	r3
    3d90:	e009      	b.n	3da6 <main+0x1da>
			//tempPCC[2] = SDHC0->HC1R.reg;
			//tempPCC[0] = PCC->MR.reg;
			//tempPCC[1] = PCC->ISR.reg;
			//tempPCC[2] = PCC->RHR.reg;	
		}
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    3d92:	4b3a      	ldr	r3, [pc, #232]	; (3e7c <main+0x2b0>)
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	f013 0f10 	tst.w	r3, #16
    3d9a:	d10c      	bne.n	3db6 <main+0x1ea>
		if (deviceState & DEVICE_STATE_START_RECORDING) {
    3d9c:	4b37      	ldr	r3, [pc, #220]	; (3e7c <main+0x2b0>)
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	f013 0f04 	tst.w	r3, #4
    3da4:	d1f2      	bne.n	3d8c <main+0x1c0>
		if (deviceState & DEVICE_STATE_RECORDING) {
    3da6:	4b35      	ldr	r3, [pc, #212]	; (3e7c <main+0x2b0>)
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	f013 0f08 	tst.w	r3, #8
    3dae:	d0f0      	beq.n	3d92 <main+0x1c6>
			recording();
    3db0:	4b33      	ldr	r3, [pc, #204]	; (3e80 <main+0x2b4>)
    3db2:	4798      	blx	r3
    3db4:	e7ed      	b.n	3d92 <main+0x1c6>
			stopRecording();
    3db6:	4b33      	ldr	r3, [pc, #204]	; (3e84 <main+0x2b8>)
    3db8:	4798      	blx	r3
    3dba:	e7ef      	b.n	3d9c <main+0x1d0>
    3dbc:	20000210 	.word	0x20000210
    3dc0:	000002d1 	.word	0x000002d1
    3dc4:	40003800 	.word	0x40003800
    3dc8:	41008000 	.word	0x41008000
    3dcc:	200006c8 	.word	0x200006c8
    3dd0:	00000bcd 	.word	0x00000bcd
    3dd4:	00002aed 	.word	0x00002aed
    3dd8:	00002b71 	.word	0x00002b71
    3ddc:	00002b81 	.word	0x00002b81
    3de0:	200006e8 	.word	0x200006e8
    3de4:	000011f5 	.word	0x000011f5
    3de8:	00002c59 	.word	0x00002c59
    3dec:	00000dc5 	.word	0x00000dc5
    3df0:	00002bd9 	.word	0x00002bd9
    3df4:	00003725 	.word	0x00003725
    3df8:	00002bad 	.word	0x00002bad
    3dfc:	00003665 	.word	0x00003665
    3e00:	00003645 	.word	0x00003645
    3e04:	20028bf8 	.word	0x20028bf8
    3e08:	00000d2d 	.word	0x00000d2d
    3e0c:	00000d0d 	.word	0x00000d0d
    3e10:	20000b30 	.word	0x20000b30
    3e14:	000034e9 	.word	0x000034e9
    3e18:	20029260 	.word	0x20029260
    3e1c:	20000b34 	.word	0x20000b34
    3e20:	20000bdc 	.word	0x20000bdc
    3e24:	20000be0 	.word	0x20000be0
    3e28:	20029258 	.word	0x20029258
    3e2c:	20000bf0 	.word	0x20000bf0
    3e30:	20029248 	.word	0x20029248
    3e34:	20000be8 	.word	0x20000be8
    3e38:	20000bd8 	.word	0x20000bd8
    3e3c:	2002925c 	.word	0x2002925c
    3e40:	2002925e 	.word	0x2002925e
    3e44:	00003491 	.word	0x00003491
    3e48:	000034c1 	.word	0x000034c1
    3e4c:	000034f9 	.word	0x000034f9
    3e50:	000041e5 	.word	0x000041e5
    3e54:	00004285 	.word	0x00004285
    3e58:	000042d1 	.word	0x000042d1
    3e5c:	4100a000 	.word	0x4100a000
    3e60:	00004900 	.word	0x00004900
    3e64:	000012dd 	.word	0x000012dd
    3e68:	00003591 	.word	0x00003591
    3e6c:	200006b4 	.word	0x200006b4
    3e70:	c0000020 	.word	0xc0000020
    3e74:	43002c00 	.word	0x43002c00
    3e78:	0000387d 	.word	0x0000387d
    3e7c:	20000028 	.word	0x20000028
    3e80:	000039a9 	.word	0x000039a9
    3e84:	0000391d 	.word	0x0000391d
    3e88:	00001231 	.word	0x00001231
    3e8c:	00002e51 	.word	0x00002e51

00003e90 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3e90:	b510      	push	{r4, lr}
    3e92:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    3e94:	4807      	ldr	r0, [pc, #28]	; (3eb4 <sd_mmc_configure_slot+0x24>)
    3e96:	6802      	ldr	r2, [r0, #0]
    3e98:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    3e9a:	7b53      	ldrb	r3, [r2, #13]
    3e9c:	6812      	ldr	r2, [r2, #0]
    3e9e:	7901      	ldrb	r1, [r0, #4]
    3ea0:	6880      	ldr	r0, [r0, #8]
    3ea2:	3400      	adds	r4, #0
    3ea4:	bf18      	it	ne
    3ea6:	2401      	movne	r4, #1
    3ea8:	9400      	str	r4, [sp, #0]
    3eaa:	4c03      	ldr	r4, [pc, #12]	; (3eb8 <sd_mmc_configure_slot+0x28>)
    3eac:	47a0      	blx	r4
}
    3eae:	b002      	add	sp, #8
    3eb0:	bd10      	pop	{r4, pc}
    3eb2:	bf00      	nop
    3eb4:	2000065c 	.word	0x2000065c
    3eb8:	00000ec9 	.word	0x00000ec9

00003ebc <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    3ebc:	b108      	cbz	r0, 3ec2 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    3ebe:	2004      	movs	r0, #4
    3ec0:	4770      	bx	lr
{
    3ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ec4:	b083      	sub	sp, #12
    3ec6:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    3ec8:	4b45      	ldr	r3, [pc, #276]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3eca:	68db      	ldr	r3, [r3, #12]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d050      	beq.n	3f72 <sd_mmc_select_slot+0xb6>
    3ed0:	0087      	lsls	r7, r0, #2
    3ed2:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3ed6:	f1b5 3fff 	cmp.w	r5, #4294967295
    3eda:	d04a      	beq.n	3f72 <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    3edc:	b2ed      	uxtb	r5, r5
    3ede:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    3ee0:	a801      	add	r0, sp, #4
    3ee2:	4b40      	ldr	r3, [pc, #256]	; (3fe4 <sd_mmc_select_slot+0x128>)
    3ee4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3ee6:	4940      	ldr	r1, [pc, #256]	; (3fe8 <sd_mmc_select_slot+0x12c>)
    3ee8:	01f3      	lsls	r3, r6, #7
    3eea:	18ca      	adds	r2, r1, r3
    3eec:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3eee:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3ef0:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3ef2:	405e      	eors	r6, r3
    3ef4:	400e      	ands	r6, r1
    3ef6:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    3ef8:	a801      	add	r0, sp, #4
    3efa:	4b3c      	ldr	r3, [pc, #240]	; (3fec <sd_mmc_select_slot+0x130>)
    3efc:	4798      	blx	r3
    3efe:	f005 051f 	and.w	r5, r5, #31
    3f02:	2301      	movs	r3, #1
    3f04:	fa03 f505 	lsl.w	r5, r3, r5
    3f08:	4235      	tst	r5, r6
    3f0a:	bf14      	ite	ne
    3f0c:	461a      	movne	r2, r3
    3f0e:	2200      	moveq	r2, #0
    3f10:	4b33      	ldr	r3, [pc, #204]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f12:	68db      	ldr	r3, [r3, #12]
    3f14:	441f      	add	r7, r3
    3f16:	887b      	ldrh	r3, [r7, #2]
    3f18:	429a      	cmp	r2, r3
    3f1a:	d006      	beq.n	3f2a <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3f1c:	4b30      	ldr	r3, [pc, #192]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f1e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3f22:	2304      	movs	r3, #4
    3f24:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3f26:	2002      	movs	r0, #2
    3f28:	e047      	b.n	3fba <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    3f2a:	4b2d      	ldr	r3, [pc, #180]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f2c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f30:	7e9b      	ldrb	r3, [r3, #26]
    3f32:	2b04      	cmp	r3, #4
    3f34:	d009      	beq.n	3f4a <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    3f36:	2b01      	cmp	r3, #1
    3f38:	d00e      	beq.n	3f58 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    3f3a:	4b29      	ldr	r3, [pc, #164]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f3c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f40:	7e9b      	ldrb	r3, [r3, #26]
    3f42:	2b03      	cmp	r3, #3
    3f44:	d11d      	bne.n	3f82 <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3f46:	2003      	movs	r0, #3
    3f48:	e037      	b.n	3fba <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    3f4a:	4b25      	ldr	r3, [pc, #148]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f4c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3f50:	2301      	movs	r3, #1
    3f52:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3f54:	2002      	movs	r0, #2
    3f56:	e030      	b.n	3fba <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3f58:	4b21      	ldr	r3, [pc, #132]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f5a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f5e:	2202      	movs	r2, #2
    3f60:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3f62:	4a23      	ldr	r2, [pc, #140]	; (3ff0 <sd_mmc_select_slot+0x134>)
    3f64:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3f66:	2201      	movs	r2, #1
    3f68:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3f6a:	2200      	movs	r2, #0
    3f6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f70:	e7e3      	b.n	3f3a <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3f72:	4b1b      	ldr	r3, [pc, #108]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f74:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f78:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    3f7a:	3b03      	subs	r3, #3
    3f7c:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3f7e:	2b01      	cmp	r3, #1
    3f80:	d91d      	bls.n	3fbe <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3f82:	4b17      	ldr	r3, [pc, #92]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f84:	791b      	ldrb	r3, [r3, #4]
    3f86:	429c      	cmp	r4, r3
    3f88:	d026      	beq.n	3fd8 <sd_mmc_select_slot+0x11c>
    3f8a:	4b15      	ldr	r3, [pc, #84]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3f8e:	bb2b      	cbnz	r3, 3fdc <sd_mmc_select_slot+0x120>
    3f90:	2001      	movs	r0, #1
    3f92:	f240 422c 	movw	r2, #1068	; 0x42c
    3f96:	4917      	ldr	r1, [pc, #92]	; (3ff4 <sd_mmc_select_slot+0x138>)
    3f98:	4b17      	ldr	r3, [pc, #92]	; (3ff8 <sd_mmc_select_slot+0x13c>)
    3f9a:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    3f9c:	4d10      	ldr	r5, [pc, #64]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3f9e:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    3fa0:	f105 0310 	add.w	r3, r5, #16
    3fa4:	0164      	lsls	r4, r4, #5
    3fa6:	4423      	add	r3, r4
    3fa8:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    3faa:	4b14      	ldr	r3, [pc, #80]	; (3ffc <sd_mmc_select_slot+0x140>)
    3fac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    3fae:	442c      	add	r4, r5
    3fb0:	7ea0      	ldrb	r0, [r4, #26]
    3fb2:	2802      	cmp	r0, #2
    3fb4:	bf14      	ite	ne
    3fb6:	2000      	movne	r0, #0
    3fb8:	2001      	moveq	r0, #1
}
    3fba:	b003      	add	sp, #12
    3fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3fbe:	4b08      	ldr	r3, [pc, #32]	; (3fe0 <sd_mmc_select_slot+0x124>)
    3fc0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3fc4:	2202      	movs	r2, #2
    3fc6:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3fc8:	4a09      	ldr	r2, [pc, #36]	; (3ff0 <sd_mmc_select_slot+0x134>)
    3fca:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3fcc:	2201      	movs	r2, #1
    3fce:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3fd0:	2200      	movs	r2, #0
    3fd2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3fd6:	e7d4      	b.n	3f82 <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3fd8:	2001      	movs	r0, #1
    3fda:	e7da      	b.n	3f92 <sd_mmc_select_slot+0xd6>
    3fdc:	2000      	movs	r0, #0
    3fde:	e7d8      	b.n	3f92 <sd_mmc_select_slot+0xd6>
    3fe0:	2000065c 	.word	0x2000065c
    3fe4:	00000c99 	.word	0x00000c99
    3fe8:	41008000 	.word	0x41008000
    3fec:	00000ca7 	.word	0x00000ca7
    3ff0:	00061a80 	.word	0x00061a80
    3ff4:	00004924 	.word	0x00004924
    3ff8:	000012dd 	.word	0x000012dd
    3ffc:	00003e91 	.word	0x00003e91

00004000 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    4000:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4002:	4b04      	ldr	r3, [pc, #16]	; (4014 <sd_mmc_deselect_slot+0x14>)
    4004:	7919      	ldrb	r1, [r3, #4]
    4006:	b101      	cbz	r1, 400a <sd_mmc_deselect_slot+0xa>
    4008:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    400a:	6898      	ldr	r0, [r3, #8]
    400c:	4b02      	ldr	r3, [pc, #8]	; (4018 <sd_mmc_deselect_slot+0x18>)
    400e:	4798      	blx	r3
	}
}
    4010:	e7fa      	b.n	4008 <sd_mmc_deselect_slot+0x8>
    4012:	bf00      	nop
    4014:	2000065c 	.word	0x2000065c
    4018:	00000f05 	.word	0x00000f05

0000401c <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    401c:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    401e:	2300      	movs	r3, #0
    4020:	b13b      	cbz	r3, 4032 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4022:	4b08      	ldr	r3, [pc, #32]	; (4044 <sd_mmc_init+0x28>)
    4024:	24ff      	movs	r4, #255	; 0xff
    4026:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4028:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    402a:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    402c:	635a      	str	r2, [r3, #52]	; 0x34
}
    402e:	bc30      	pop	{r4, r5}
    4030:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4032:	4c04      	ldr	r4, [pc, #16]	; (4044 <sd_mmc_init+0x28>)
    4034:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    4038:	2504      	movs	r5, #4
    403a:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    403c:	3301      	adds	r3, #1
    403e:	b2db      	uxtb	r3, r3
    4040:	e7ee      	b.n	4020 <sd_mmc_init+0x4>
    4042:	bf00      	nop
    4044:	2000065c 	.word	0x2000065c

00004048 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    4048:	4b19      	ldr	r3, [pc, #100]	; (40b0 <sd_mmc_is_write_protected+0x68>)
    404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    404c:	b35b      	cbz	r3, 40a6 <sd_mmc_is_write_protected+0x5e>
{
    404e:	b570      	push	{r4, r5, r6, lr}
    4050:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    4052:	0085      	lsls	r5, r0, #2
    4054:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4058:	f1b3 3fff 	cmp.w	r3, #4294967295
    405c:	d025      	beq.n	40aa <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    405e:	b2de      	uxtb	r6, r3
    4060:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    4062:	a801      	add	r0, sp, #4
    4064:	4b13      	ldr	r3, [pc, #76]	; (40b4 <sd_mmc_is_write_protected+0x6c>)
    4066:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4068:	4913      	ldr	r1, [pc, #76]	; (40b8 <sd_mmc_is_write_protected+0x70>)
    406a:	01e3      	lsls	r3, r4, #7
    406c:	18ca      	adds	r2, r1, r3
    406e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4070:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4072:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4074:	405c      	eors	r4, r3
    4076:	400c      	ands	r4, r1
    4078:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    407a:	a801      	add	r0, sp, #4
    407c:	4b0f      	ldr	r3, [pc, #60]	; (40bc <sd_mmc_is_write_protected+0x74>)
    407e:	4798      	blx	r3
    4080:	f006 031f 	and.w	r3, r6, #31
    4084:	2201      	movs	r2, #1
    4086:	fa02 f303 	lsl.w	r3, r2, r3
    408a:	4223      	tst	r3, r4
    408c:	bf08      	it	eq
    408e:	2200      	moveq	r2, #0
    4090:	4b07      	ldr	r3, [pc, #28]	; (40b0 <sd_mmc_is_write_protected+0x68>)
    4092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4094:	441d      	add	r5, r3
    4096:	886b      	ldrh	r3, [r5, #2]
    4098:	429a      	cmp	r2, r3
    409a:	d002      	beq.n	40a2 <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    409c:	2000      	movs	r0, #0
}
    409e:	b002      	add	sp, #8
    40a0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    40a2:	2001      	movs	r0, #1
    40a4:	e7fb      	b.n	409e <sd_mmc_is_write_protected+0x56>
		return false;
    40a6:	2000      	movs	r0, #0
    40a8:	4770      	bx	lr
    40aa:	2000      	movs	r0, #0
    40ac:	e7f7      	b.n	409e <sd_mmc_is_write_protected+0x56>
    40ae:	bf00      	nop
    40b0:	2000065c 	.word	0x2000065c
    40b4:	00000c99 	.word	0x00000c99
    40b8:	41008000 	.word	0x41008000
    40bc:	00000ca7 	.word	0x00000ca7

000040c0 <sd_mmc_write_with_ADMA>:
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_write_with_ADMA(uint8_t slot, uint32_t start, uint32_t *descAdd, uint16_t nb_block)
{
    40c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40c4:	4606      	mov	r6, r0
    40c6:	460f      	mov	r7, r1
    40c8:	4690      	mov	r8, r2
    40ca:	461d      	mov	r5, r3
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp, tmr;
	
	sd_mmc_err = sd_mmc_select_slot(slot);
    40cc:	4b2f      	ldr	r3, [pc, #188]	; (418c <sd_mmc_write_with_ADMA+0xcc>)
    40ce:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    40d0:	4604      	mov	r4, r0
    40d2:	b110      	cbz	r0, 40da <sd_mmc_write_with_ADMA+0x1a>
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
	}
	
	return SD_MMC_OK;
}
    40d4:	4620      	mov	r0, r4
    40d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd_mmc_is_write_protected(slot)) {
    40da:	4630      	mov	r0, r6
    40dc:	4b2c      	ldr	r3, [pc, #176]	; (4190 <sd_mmc_write_with_ADMA+0xd0>)
    40de:	4798      	blx	r3
    40e0:	2800      	cmp	r0, #0
    40e2:	d136      	bne.n	4152 <sd_mmc_write_with_ADMA+0x92>
	if (nb_block > 1) {
    40e4:	2d01      	cmp	r5, #1
    40e6:	d938      	bls.n	415a <sd_mmc_write_with_ADMA+0x9a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    40e8:	4a2a      	ldr	r2, [pc, #168]	; (4194 <sd_mmc_write_with_ADMA+0xd4>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    40ea:	4b2b      	ldr	r3, [pc, #172]	; (4198 <sd_mmc_write_with_ADMA+0xd8>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	7adb      	ldrb	r3, [r3, #11]
    40f0:	f013 0f08 	tst.w	r3, #8
    40f4:	d100      	bne.n	40f8 <sd_mmc_write_with_ADMA+0x38>
		arg = (start * SD_MMC_BLOCK_SIZE);
    40f6:	027f      	lsls	r7, r7, #9
	SDHC0->ASAR[0].reg = (uint32_t)descAdd;
    40f8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    40fc:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	((Sdhc *)hw)->BSR.reg = data;
    4100:	f44f 7100 	mov.w	r1, #512	; 0x200
    4104:	8099      	strh	r1, [r3, #4]
	((Sdhc *)hw)->BCR.reg = data;
    4106:	80dd      	strh	r5, [r3, #6]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    4108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (hri_sdhc_get_PSR_CMDINHC_bit(SDHC0) || hri_sdhc_get_PSR_CMDINHD_bit(SDHC0)) {
    410a:	f013 0f01 	tst.w	r3, #1
    410e:	d1e1      	bne.n	40d4 <sd_mmc_write_with_ADMA+0x14>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    4110:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    4114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4116:	f013 0f02 	tst.w	r3, #2
    411a:	d1db      	bne.n	40d4 <sd_mmc_write_with_ADMA+0x14>
	if (cmd & MCI_CMD_WRITE) {
    411c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    4120:	d01d      	beq.n	415e <sd_mmc_write_with_ADMA+0x9e>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    4122:	2300      	movs	r3, #0
	if (cmd & MCI_CMD_SDIO_BYTE) {
    4124:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
    4128:	b921      	cbnz	r1, 4134 <sd_mmc_write_with_ADMA+0x74>
		} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    412a:	f402 3100 	and.w	r1, r2, #131072	; 0x20000
    412e:	b1c1      	cbz	r1, 4162 <sd_mmc_write_with_ADMA+0xa2>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    4130:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	hri_sdhc_write_TMR_reg(SDHC0, tmr|SDHC_TMR_ACMDEN_CMD12|SDHC_TMR_DMAEN);
    4134:	f043 0305 	orr.w	r3, r3, #5
    4138:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    413a:	f04f 408a 	mov.w	r0, #1157627904	; 0x45000000
    413e:	8183      	strh	r3, [r0, #12]
	if (mci_send_cmd_execute(SDHC0, SDHC_CR_DPSEL_DATA, cmd, arg) == false) {
    4140:	463b      	mov	r3, r7
    4142:	2120      	movs	r1, #32
    4144:	4d15      	ldr	r5, [pc, #84]	; (419c <sd_mmc_write_with_ADMA+0xdc>)
    4146:	47a8      	blx	r5
    4148:	b9a0      	cbnz	r0, 4174 <sd_mmc_write_with_ADMA+0xb4>
		sd_mmc_deselect_slot();
    414a:	4b15      	ldr	r3, [pc, #84]	; (41a0 <sd_mmc_write_with_ADMA+0xe0>)
    414c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    414e:	2405      	movs	r4, #5
    4150:	e7c0      	b.n	40d4 <sd_mmc_write_with_ADMA+0x14>
		sd_mmc_deselect_slot();
    4152:	4b13      	ldr	r3, [pc, #76]	; (41a0 <sd_mmc_write_with_ADMA+0xe0>)
    4154:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    4156:	2407      	movs	r4, #7
    4158:	e7bc      	b.n	40d4 <sd_mmc_write_with_ADMA+0x14>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    415a:	4a12      	ldr	r2, [pc, #72]	; (41a4 <sd_mmc_write_with_ADMA+0xe4>)
    415c:	e7c5      	b.n	40ea <sd_mmc_write_with_ADMA+0x2a>
		tmr = SDHC_TMR_DTDSEL_READ;
    415e:	2310      	movs	r3, #16
    4160:	e7e0      	b.n	4124 <sd_mmc_write_with_ADMA+0x64>
		} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    4162:	f412 2f00 	tst.w	r2, #524288	; 0x80000
    4166:	d1e5      	bne.n	4134 <sd_mmc_write_with_ADMA+0x74>
		} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    4168:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    416c:	d0b2      	beq.n	40d4 <sd_mmc_write_with_ADMA+0x14>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    416e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    4172:	e7df      	b.n	4134 <sd_mmc_write_with_ADMA+0x74>
	resp = driver_get_response(sd_mmc_hal);
    4174:	4b08      	ldr	r3, [pc, #32]	; (4198 <sd_mmc_write_with_ADMA+0xd8>)
    4176:	6898      	ldr	r0, [r3, #8]
    4178:	4b0b      	ldr	r3, [pc, #44]	; (41a8 <sd_mmc_write_with_ADMA+0xe8>)
    417a:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    417c:	4b0b      	ldr	r3, [pc, #44]	; (41ac <sd_mmc_write_with_ADMA+0xec>)
    417e:	4003      	ands	r3, r0
    4180:	2b00      	cmp	r3, #0
    4182:	d0a7      	beq.n	40d4 <sd_mmc_write_with_ADMA+0x14>
		sd_mmc_deselect_slot();
    4184:	4b06      	ldr	r3, [pc, #24]	; (41a0 <sd_mmc_write_with_ADMA+0xe0>)
    4186:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4188:	2405      	movs	r4, #5
    418a:	e7a3      	b.n	40d4 <sd_mmc_write_with_ADMA+0x14>
    418c:	00003ebd 	.word	0x00003ebd
    4190:	00004049 	.word	0x00004049
    4194:	00109119 	.word	0x00109119
    4198:	2000065c 	.word	0x2000065c
    419c:	00000f89 	.word	0x00000f89
    41a0:	00004001 	.word	0x00004001
    41a4:	00089118 	.word	0x00089118
    41a8:	00000f61 	.word	0x00000f61
    41ac:	e4580000 	.word	0xe4580000

000041b0 <sd_mmc_wait_end_of_ADMA_write>:

sd_mmc_err_t sd_mmc_wait_end_of_ADMA_write(bool abort)
{
    41b0:	b508      	push	{r3, lr}
	return ((Sdhc *)hw)->EISTR.reg;
    41b2:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    41b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	uint32_t sr;
	
	do {
		sr = hri_sdhc_read_EISTR_reg(SDHC0);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    41b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    41bc:	b973      	cbnz	r3, 41dc <sd_mmc_wait_end_of_ADMA_write+0x2c>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    41be:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    41c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
			// TODO: We should reset here but I got lazy and didn't want to make mci_reset to access _mci_reset
			//_mci_reset(SDHC0);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(SDHC0));
    41c4:	f013 0f02 	tst.w	r3, #2
    41c8:	d0f3      	beq.n	41b2 <sd_mmc_wait_end_of_ADMA_write+0x2>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    41ca:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
    41ce:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    41d0:	b29b      	uxth	r3, r3
    41d2:	f043 0302 	orr.w	r3, r3, #2
    41d6:	8613      	strh	r3, [r2, #48]	; 0x30
	//if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		//sd_mmc_deselect_slot();
		//return SD_MMC_ERR_COMM;
	//}
	
	sd_mmc_deselect_slot();
    41d8:	4b01      	ldr	r3, [pc, #4]	; (41e0 <sd_mmc_wait_end_of_ADMA_write+0x30>)
    41da:	4798      	blx	r3
	
	return SD_MMC_OK;
}
    41dc:	2000      	movs	r0, #0
    41de:	bd08      	pop	{r3, pc}
    41e0:	00004001 	.word	0x00004001

000041e4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    41e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41e6:	b083      	sub	sp, #12
    41e8:	4607      	mov	r7, r0
    41ea:	460e      	mov	r6, r1
    41ec:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    41ee:	4b1c      	ldr	r3, [pc, #112]	; (4260 <sd_mmc_init_write_blocks+0x7c>)
    41f0:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    41f2:	4604      	mov	r4, r0
    41f4:	b110      	cbz	r0, 41fc <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    41f6:	4620      	mov	r0, r4
    41f8:	b003      	add	sp, #12
    41fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    41fc:	4638      	mov	r0, r7
    41fe:	4b19      	ldr	r3, [pc, #100]	; (4264 <sd_mmc_init_write_blocks+0x80>)
    4200:	4798      	blx	r3
    4202:	b9c0      	cbnz	r0, 4236 <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    4204:	2d01      	cmp	r5, #1
    4206:	d91a      	bls.n	423e <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    4208:	4917      	ldr	r1, [pc, #92]	; (4268 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    420a:	4b18      	ldr	r3, [pc, #96]	; (426c <sd_mmc_init_write_blocks+0x88>)
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	7adb      	ldrb	r3, [r3, #11]
    4210:	f013 0f08 	tst.w	r3, #8
    4214:	d100      	bne.n	4218 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4216:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4218:	4b14      	ldr	r3, [pc, #80]	; (426c <sd_mmc_init_write_blocks+0x88>)
    421a:	6898      	ldr	r0, [r3, #8]
    421c:	2301      	movs	r3, #1
    421e:	9301      	str	r3, [sp, #4]
    4220:	9500      	str	r5, [sp, #0]
    4222:	f44f 7300 	mov.w	r3, #512	; 0x200
    4226:	4632      	mov	r2, r6
    4228:	4e11      	ldr	r6, [pc, #68]	; (4270 <sd_mmc_init_write_blocks+0x8c>)
    422a:	47b0      	blx	r6
    422c:	b948      	cbnz	r0, 4242 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    422e:	4b11      	ldr	r3, [pc, #68]	; (4274 <sd_mmc_init_write_blocks+0x90>)
    4230:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4232:	2405      	movs	r4, #5
    4234:	e7df      	b.n	41f6 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4236:	4b0f      	ldr	r3, [pc, #60]	; (4274 <sd_mmc_init_write_blocks+0x90>)
    4238:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    423a:	2407      	movs	r4, #7
    423c:	e7db      	b.n	41f6 <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    423e:	490e      	ldr	r1, [pc, #56]	; (4278 <sd_mmc_init_write_blocks+0x94>)
    4240:	e7e3      	b.n	420a <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    4242:	4b0a      	ldr	r3, [pc, #40]	; (426c <sd_mmc_init_write_blocks+0x88>)
    4244:	6898      	ldr	r0, [r3, #8]
    4246:	4b0d      	ldr	r3, [pc, #52]	; (427c <sd_mmc_init_write_blocks+0x98>)
    4248:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    424a:	4b0d      	ldr	r3, [pc, #52]	; (4280 <sd_mmc_init_write_blocks+0x9c>)
    424c:	4003      	ands	r3, r0
    424e:	b91b      	cbnz	r3, 4258 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    4250:	4b06      	ldr	r3, [pc, #24]	; (426c <sd_mmc_init_write_blocks+0x88>)
    4252:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4254:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4256:	e7ce      	b.n	41f6 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4258:	4b06      	ldr	r3, [pc, #24]	; (4274 <sd_mmc_init_write_blocks+0x90>)
    425a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    425c:	2405      	movs	r4, #5
    425e:	e7ca      	b.n	41f6 <sd_mmc_init_write_blocks+0x12>
    4260:	00003ebd 	.word	0x00003ebd
    4264:	00004049 	.word	0x00004049
    4268:	00109119 	.word	0x00109119
    426c:	2000065c 	.word	0x2000065c
    4270:	00000f95 	.word	0x00000f95
    4274:	00004001 	.word	0x00004001
    4278:	00089118 	.word	0x00089118
    427c:	00000f61 	.word	0x00000f61
    4280:	e4580000 	.word	0xe4580000

00004284 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    4284:	b570      	push	{r4, r5, r6, lr}
    4286:	4606      	mov	r6, r0
    4288:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    428a:	4d0d      	ldr	r5, [pc, #52]	; (42c0 <sd_mmc_start_write_blocks+0x3c>)
    428c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    428e:	f240 626b 	movw	r2, #1643	; 0x66b
    4292:	490c      	ldr	r1, [pc, #48]	; (42c4 <sd_mmc_start_write_blocks+0x40>)
    4294:	42a0      	cmp	r0, r4
    4296:	bf34      	ite	cc
    4298:	2000      	movcc	r0, #0
    429a:	2001      	movcs	r0, #1
    429c:	4b0a      	ldr	r3, [pc, #40]	; (42c8 <sd_mmc_start_write_blocks+0x44>)
    429e:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    42a0:	4622      	mov	r2, r4
    42a2:	4631      	mov	r1, r6
    42a4:	68a8      	ldr	r0, [r5, #8]
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <sd_mmc_start_write_blocks+0x48>)
    42a8:	4798      	blx	r3
    42aa:	b918      	cbnz	r0, 42b4 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    42ac:	2200      	movs	r2, #0
    42ae:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    42b0:	2005      	movs	r0, #5
    42b2:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    42b4:	4a02      	ldr	r2, [pc, #8]	; (42c0 <sd_mmc_start_write_blocks+0x3c>)
    42b6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    42b8:	1b1c      	subs	r4, r3, r4
    42ba:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    42bc:	2000      	movs	r0, #0
}
    42be:	bd70      	pop	{r4, r5, r6, pc}
    42c0:	2000065c 	.word	0x2000065c
    42c4:	00004924 	.word	0x00004924
    42c8:	000012dd 	.word	0x000012dd
    42cc:	00000fd9 	.word	0x00000fd9

000042d0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    42d0:	b510      	push	{r4, lr}
    42d2:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    42d4:	4b14      	ldr	r3, [pc, #80]	; (4328 <sd_mmc_wait_end_of_write_blocks+0x58>)
    42d6:	6898      	ldr	r0, [r3, #8]
    42d8:	4b14      	ldr	r3, [pc, #80]	; (432c <sd_mmc_wait_end_of_write_blocks+0x5c>)
    42da:	4798      	blx	r3
    42dc:	b908      	cbnz	r0, 42e2 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    42de:	2005      	movs	r0, #5
    42e0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    42e2:	b194      	cbz	r4, 430a <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    42e4:	2200      	movs	r2, #0
    42e6:	4b10      	ldr	r3, [pc, #64]	; (4328 <sd_mmc_wait_end_of_write_blocks+0x58>)
    42e8:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    42ea:	4b0f      	ldr	r3, [pc, #60]	; (4328 <sd_mmc_wait_end_of_write_blocks+0x58>)
    42ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    42ee:	2b01      	cmp	r3, #1
    42f0:	d011      	beq.n	4316 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    42f2:	2200      	movs	r2, #0
    42f4:	f243 110c 	movw	r1, #12556	; 0x310c
    42f8:	4b0b      	ldr	r3, [pc, #44]	; (4328 <sd_mmc_wait_end_of_write_blocks+0x58>)
    42fa:	6898      	ldr	r0, [r3, #8]
    42fc:	4b0c      	ldr	r3, [pc, #48]	; (4330 <sd_mmc_wait_end_of_write_blocks+0x60>)
    42fe:	4798      	blx	r3
    4300:	b968      	cbnz	r0, 431e <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    4302:	4b0c      	ldr	r3, [pc, #48]	; (4334 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4304:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4306:	2005      	movs	r0, #5
    4308:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    430a:	4b07      	ldr	r3, [pc, #28]	; (4328 <sd_mmc_wait_end_of_write_blocks+0x58>)
    430c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    430e:	2b00      	cmp	r3, #0
    4310:	d0eb      	beq.n	42ea <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    4312:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    4314:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4316:	4b07      	ldr	r3, [pc, #28]	; (4334 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4318:	4798      	blx	r3
		return SD_MMC_OK;
    431a:	2000      	movs	r0, #0
    431c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    431e:	4b05      	ldr	r3, [pc, #20]	; (4334 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4320:	4798      	blx	r3
	return SD_MMC_OK;
    4322:	2000      	movs	r0, #0
    4324:	bd10      	pop	{r4, pc}
    4326:	bf00      	nop
    4328:	2000065c 	.word	0x2000065c
    432c:	00001011 	.word	0x00001011
    4330:	00000f31 	.word	0x00000f31
    4334:	00004001 	.word	0x00004001

00004338 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    4338:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    433a:	4903      	ldr	r1, [pc, #12]	; (4348 <sd_mmc_stack_init+0x10>)
    433c:	460a      	mov	r2, r1
    433e:	3104      	adds	r1, #4
    4340:	4802      	ldr	r0, [pc, #8]	; (434c <sd_mmc_stack_init+0x14>)
    4342:	4b03      	ldr	r3, [pc, #12]	; (4350 <sd_mmc_stack_init+0x18>)
    4344:	4798      	blx	r3
    4346:	bd08      	pop	{r3, pc}
    4348:	20000034 	.word	0x20000034
    434c:	200006d0 	.word	0x200006d0
    4350:	0000401d 	.word	0x0000401d

00004354 <__aeabi_uldivmod>:
    4354:	b953      	cbnz	r3, 436c <__aeabi_uldivmod+0x18>
    4356:	b94a      	cbnz	r2, 436c <__aeabi_uldivmod+0x18>
    4358:	2900      	cmp	r1, #0
    435a:	bf08      	it	eq
    435c:	2800      	cmpeq	r0, #0
    435e:	bf1c      	itt	ne
    4360:	f04f 31ff 	movne.w	r1, #4294967295
    4364:	f04f 30ff 	movne.w	r0, #4294967295
    4368:	f000 b97a 	b.w	4660 <__aeabi_idiv0>
    436c:	f1ad 0c08 	sub.w	ip, sp, #8
    4370:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4374:	f000 f806 	bl	4384 <__udivmoddi4>
    4378:	f8dd e004 	ldr.w	lr, [sp, #4]
    437c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4380:	b004      	add	sp, #16
    4382:	4770      	bx	lr

00004384 <__udivmoddi4>:
    4384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4388:	468c      	mov	ip, r1
    438a:	460d      	mov	r5, r1
    438c:	4604      	mov	r4, r0
    438e:	9e08      	ldr	r6, [sp, #32]
    4390:	2b00      	cmp	r3, #0
    4392:	d151      	bne.n	4438 <__udivmoddi4+0xb4>
    4394:	428a      	cmp	r2, r1
    4396:	4617      	mov	r7, r2
    4398:	d96d      	bls.n	4476 <__udivmoddi4+0xf2>
    439a:	fab2 fe82 	clz	lr, r2
    439e:	f1be 0f00 	cmp.w	lr, #0
    43a2:	d00b      	beq.n	43bc <__udivmoddi4+0x38>
    43a4:	f1ce 0c20 	rsb	ip, lr, #32
    43a8:	fa01 f50e 	lsl.w	r5, r1, lr
    43ac:	fa20 fc0c 	lsr.w	ip, r0, ip
    43b0:	fa02 f70e 	lsl.w	r7, r2, lr
    43b4:	ea4c 0c05 	orr.w	ip, ip, r5
    43b8:	fa00 f40e 	lsl.w	r4, r0, lr
    43bc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    43c0:	0c25      	lsrs	r5, r4, #16
    43c2:	fbbc f8fa 	udiv	r8, ip, sl
    43c6:	fa1f f987 	uxth.w	r9, r7
    43ca:	fb0a cc18 	mls	ip, sl, r8, ip
    43ce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    43d2:	fb08 f309 	mul.w	r3, r8, r9
    43d6:	42ab      	cmp	r3, r5
    43d8:	d90a      	bls.n	43f0 <__udivmoddi4+0x6c>
    43da:	19ed      	adds	r5, r5, r7
    43dc:	f108 32ff 	add.w	r2, r8, #4294967295
    43e0:	f080 8123 	bcs.w	462a <__udivmoddi4+0x2a6>
    43e4:	42ab      	cmp	r3, r5
    43e6:	f240 8120 	bls.w	462a <__udivmoddi4+0x2a6>
    43ea:	f1a8 0802 	sub.w	r8, r8, #2
    43ee:	443d      	add	r5, r7
    43f0:	1aed      	subs	r5, r5, r3
    43f2:	b2a4      	uxth	r4, r4
    43f4:	fbb5 f0fa 	udiv	r0, r5, sl
    43f8:	fb0a 5510 	mls	r5, sl, r0, r5
    43fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4400:	fb00 f909 	mul.w	r9, r0, r9
    4404:	45a1      	cmp	r9, r4
    4406:	d909      	bls.n	441c <__udivmoddi4+0x98>
    4408:	19e4      	adds	r4, r4, r7
    440a:	f100 33ff 	add.w	r3, r0, #4294967295
    440e:	f080 810a 	bcs.w	4626 <__udivmoddi4+0x2a2>
    4412:	45a1      	cmp	r9, r4
    4414:	f240 8107 	bls.w	4626 <__udivmoddi4+0x2a2>
    4418:	3802      	subs	r0, #2
    441a:	443c      	add	r4, r7
    441c:	eba4 0409 	sub.w	r4, r4, r9
    4420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4424:	2100      	movs	r1, #0
    4426:	2e00      	cmp	r6, #0
    4428:	d061      	beq.n	44ee <__udivmoddi4+0x16a>
    442a:	fa24 f40e 	lsr.w	r4, r4, lr
    442e:	2300      	movs	r3, #0
    4430:	6034      	str	r4, [r6, #0]
    4432:	6073      	str	r3, [r6, #4]
    4434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4438:	428b      	cmp	r3, r1
    443a:	d907      	bls.n	444c <__udivmoddi4+0xc8>
    443c:	2e00      	cmp	r6, #0
    443e:	d054      	beq.n	44ea <__udivmoddi4+0x166>
    4440:	2100      	movs	r1, #0
    4442:	e886 0021 	stmia.w	r6, {r0, r5}
    4446:	4608      	mov	r0, r1
    4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    444c:	fab3 f183 	clz	r1, r3
    4450:	2900      	cmp	r1, #0
    4452:	f040 808e 	bne.w	4572 <__udivmoddi4+0x1ee>
    4456:	42ab      	cmp	r3, r5
    4458:	d302      	bcc.n	4460 <__udivmoddi4+0xdc>
    445a:	4282      	cmp	r2, r0
    445c:	f200 80fa 	bhi.w	4654 <__udivmoddi4+0x2d0>
    4460:	1a84      	subs	r4, r0, r2
    4462:	eb65 0503 	sbc.w	r5, r5, r3
    4466:	2001      	movs	r0, #1
    4468:	46ac      	mov	ip, r5
    446a:	2e00      	cmp	r6, #0
    446c:	d03f      	beq.n	44ee <__udivmoddi4+0x16a>
    446e:	e886 1010 	stmia.w	r6, {r4, ip}
    4472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4476:	b912      	cbnz	r2, 447e <__udivmoddi4+0xfa>
    4478:	2701      	movs	r7, #1
    447a:	fbb7 f7f2 	udiv	r7, r7, r2
    447e:	fab7 fe87 	clz	lr, r7
    4482:	f1be 0f00 	cmp.w	lr, #0
    4486:	d134      	bne.n	44f2 <__udivmoddi4+0x16e>
    4488:	1beb      	subs	r3, r5, r7
    448a:	0c3a      	lsrs	r2, r7, #16
    448c:	fa1f fc87 	uxth.w	ip, r7
    4490:	2101      	movs	r1, #1
    4492:	fbb3 f8f2 	udiv	r8, r3, r2
    4496:	0c25      	lsrs	r5, r4, #16
    4498:	fb02 3318 	mls	r3, r2, r8, r3
    449c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    44a0:	fb0c f308 	mul.w	r3, ip, r8
    44a4:	42ab      	cmp	r3, r5
    44a6:	d907      	bls.n	44b8 <__udivmoddi4+0x134>
    44a8:	19ed      	adds	r5, r5, r7
    44aa:	f108 30ff 	add.w	r0, r8, #4294967295
    44ae:	d202      	bcs.n	44b6 <__udivmoddi4+0x132>
    44b0:	42ab      	cmp	r3, r5
    44b2:	f200 80d1 	bhi.w	4658 <__udivmoddi4+0x2d4>
    44b6:	4680      	mov	r8, r0
    44b8:	1aed      	subs	r5, r5, r3
    44ba:	b2a3      	uxth	r3, r4
    44bc:	fbb5 f0f2 	udiv	r0, r5, r2
    44c0:	fb02 5510 	mls	r5, r2, r0, r5
    44c4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    44c8:	fb0c fc00 	mul.w	ip, ip, r0
    44cc:	45a4      	cmp	ip, r4
    44ce:	d907      	bls.n	44e0 <__udivmoddi4+0x15c>
    44d0:	19e4      	adds	r4, r4, r7
    44d2:	f100 33ff 	add.w	r3, r0, #4294967295
    44d6:	d202      	bcs.n	44de <__udivmoddi4+0x15a>
    44d8:	45a4      	cmp	ip, r4
    44da:	f200 80b8 	bhi.w	464e <__udivmoddi4+0x2ca>
    44de:	4618      	mov	r0, r3
    44e0:	eba4 040c 	sub.w	r4, r4, ip
    44e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    44e8:	e79d      	b.n	4426 <__udivmoddi4+0xa2>
    44ea:	4631      	mov	r1, r6
    44ec:	4630      	mov	r0, r6
    44ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44f2:	f1ce 0420 	rsb	r4, lr, #32
    44f6:	fa05 f30e 	lsl.w	r3, r5, lr
    44fa:	fa07 f70e 	lsl.w	r7, r7, lr
    44fe:	fa20 f804 	lsr.w	r8, r0, r4
    4502:	0c3a      	lsrs	r2, r7, #16
    4504:	fa25 f404 	lsr.w	r4, r5, r4
    4508:	ea48 0803 	orr.w	r8, r8, r3
    450c:	fbb4 f1f2 	udiv	r1, r4, r2
    4510:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4514:	fb02 4411 	mls	r4, r2, r1, r4
    4518:	fa1f fc87 	uxth.w	ip, r7
    451c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4520:	fb01 f30c 	mul.w	r3, r1, ip
    4524:	42ab      	cmp	r3, r5
    4526:	fa00 f40e 	lsl.w	r4, r0, lr
    452a:	d909      	bls.n	4540 <__udivmoddi4+0x1bc>
    452c:	19ed      	adds	r5, r5, r7
    452e:	f101 30ff 	add.w	r0, r1, #4294967295
    4532:	f080 808a 	bcs.w	464a <__udivmoddi4+0x2c6>
    4536:	42ab      	cmp	r3, r5
    4538:	f240 8087 	bls.w	464a <__udivmoddi4+0x2c6>
    453c:	3902      	subs	r1, #2
    453e:	443d      	add	r5, r7
    4540:	1aeb      	subs	r3, r5, r3
    4542:	fa1f f588 	uxth.w	r5, r8
    4546:	fbb3 f0f2 	udiv	r0, r3, r2
    454a:	fb02 3310 	mls	r3, r2, r0, r3
    454e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4552:	fb00 f30c 	mul.w	r3, r0, ip
    4556:	42ab      	cmp	r3, r5
    4558:	d907      	bls.n	456a <__udivmoddi4+0x1e6>
    455a:	19ed      	adds	r5, r5, r7
    455c:	f100 38ff 	add.w	r8, r0, #4294967295
    4560:	d26f      	bcs.n	4642 <__udivmoddi4+0x2be>
    4562:	42ab      	cmp	r3, r5
    4564:	d96d      	bls.n	4642 <__udivmoddi4+0x2be>
    4566:	3802      	subs	r0, #2
    4568:	443d      	add	r5, r7
    456a:	1aeb      	subs	r3, r5, r3
    456c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4570:	e78f      	b.n	4492 <__udivmoddi4+0x10e>
    4572:	f1c1 0720 	rsb	r7, r1, #32
    4576:	fa22 f807 	lsr.w	r8, r2, r7
    457a:	408b      	lsls	r3, r1
    457c:	fa05 f401 	lsl.w	r4, r5, r1
    4580:	ea48 0303 	orr.w	r3, r8, r3
    4584:	fa20 fe07 	lsr.w	lr, r0, r7
    4588:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    458c:	40fd      	lsrs	r5, r7
    458e:	ea4e 0e04 	orr.w	lr, lr, r4
    4592:	fbb5 f9fc 	udiv	r9, r5, ip
    4596:	ea4f 441e 	mov.w	r4, lr, lsr #16
    459a:	fb0c 5519 	mls	r5, ip, r9, r5
    459e:	fa1f f883 	uxth.w	r8, r3
    45a2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    45a6:	fb09 f408 	mul.w	r4, r9, r8
    45aa:	42ac      	cmp	r4, r5
    45ac:	fa02 f201 	lsl.w	r2, r2, r1
    45b0:	fa00 fa01 	lsl.w	sl, r0, r1
    45b4:	d908      	bls.n	45c8 <__udivmoddi4+0x244>
    45b6:	18ed      	adds	r5, r5, r3
    45b8:	f109 30ff 	add.w	r0, r9, #4294967295
    45bc:	d243      	bcs.n	4646 <__udivmoddi4+0x2c2>
    45be:	42ac      	cmp	r4, r5
    45c0:	d941      	bls.n	4646 <__udivmoddi4+0x2c2>
    45c2:	f1a9 0902 	sub.w	r9, r9, #2
    45c6:	441d      	add	r5, r3
    45c8:	1b2d      	subs	r5, r5, r4
    45ca:	fa1f fe8e 	uxth.w	lr, lr
    45ce:	fbb5 f0fc 	udiv	r0, r5, ip
    45d2:	fb0c 5510 	mls	r5, ip, r0, r5
    45d6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    45da:	fb00 f808 	mul.w	r8, r0, r8
    45de:	45a0      	cmp	r8, r4
    45e0:	d907      	bls.n	45f2 <__udivmoddi4+0x26e>
    45e2:	18e4      	adds	r4, r4, r3
    45e4:	f100 35ff 	add.w	r5, r0, #4294967295
    45e8:	d229      	bcs.n	463e <__udivmoddi4+0x2ba>
    45ea:	45a0      	cmp	r8, r4
    45ec:	d927      	bls.n	463e <__udivmoddi4+0x2ba>
    45ee:	3802      	subs	r0, #2
    45f0:	441c      	add	r4, r3
    45f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    45f6:	eba4 0408 	sub.w	r4, r4, r8
    45fa:	fba0 8902 	umull	r8, r9, r0, r2
    45fe:	454c      	cmp	r4, r9
    4600:	46c6      	mov	lr, r8
    4602:	464d      	mov	r5, r9
    4604:	d315      	bcc.n	4632 <__udivmoddi4+0x2ae>
    4606:	d012      	beq.n	462e <__udivmoddi4+0x2aa>
    4608:	b156      	cbz	r6, 4620 <__udivmoddi4+0x29c>
    460a:	ebba 030e 	subs.w	r3, sl, lr
    460e:	eb64 0405 	sbc.w	r4, r4, r5
    4612:	fa04 f707 	lsl.w	r7, r4, r7
    4616:	40cb      	lsrs	r3, r1
    4618:	431f      	orrs	r7, r3
    461a:	40cc      	lsrs	r4, r1
    461c:	6037      	str	r7, [r6, #0]
    461e:	6074      	str	r4, [r6, #4]
    4620:	2100      	movs	r1, #0
    4622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4626:	4618      	mov	r0, r3
    4628:	e6f8      	b.n	441c <__udivmoddi4+0x98>
    462a:	4690      	mov	r8, r2
    462c:	e6e0      	b.n	43f0 <__udivmoddi4+0x6c>
    462e:	45c2      	cmp	sl, r8
    4630:	d2ea      	bcs.n	4608 <__udivmoddi4+0x284>
    4632:	ebb8 0e02 	subs.w	lr, r8, r2
    4636:	eb69 0503 	sbc.w	r5, r9, r3
    463a:	3801      	subs	r0, #1
    463c:	e7e4      	b.n	4608 <__udivmoddi4+0x284>
    463e:	4628      	mov	r0, r5
    4640:	e7d7      	b.n	45f2 <__udivmoddi4+0x26e>
    4642:	4640      	mov	r0, r8
    4644:	e791      	b.n	456a <__udivmoddi4+0x1e6>
    4646:	4681      	mov	r9, r0
    4648:	e7be      	b.n	45c8 <__udivmoddi4+0x244>
    464a:	4601      	mov	r1, r0
    464c:	e778      	b.n	4540 <__udivmoddi4+0x1bc>
    464e:	3802      	subs	r0, #2
    4650:	443c      	add	r4, r7
    4652:	e745      	b.n	44e0 <__udivmoddi4+0x15c>
    4654:	4608      	mov	r0, r1
    4656:	e708      	b.n	446a <__udivmoddi4+0xe6>
    4658:	f1a8 0802 	sub.w	r8, r8, #2
    465c:	443d      	add	r5, r7
    465e:	e72b      	b.n	44b8 <__udivmoddi4+0x134>

00004660 <__aeabi_idiv0>:
    4660:	4770      	bx	lr
    4662:	bf00      	nop

00004664 <__libc_init_array>:
    4664:	b570      	push	{r4, r5, r6, lr}
    4666:	4e0d      	ldr	r6, [pc, #52]	; (469c <__libc_init_array+0x38>)
    4668:	4c0d      	ldr	r4, [pc, #52]	; (46a0 <__libc_init_array+0x3c>)
    466a:	1ba4      	subs	r4, r4, r6
    466c:	10a4      	asrs	r4, r4, #2
    466e:	2500      	movs	r5, #0
    4670:	42a5      	cmp	r5, r4
    4672:	d109      	bne.n	4688 <__libc_init_array+0x24>
    4674:	4e0b      	ldr	r6, [pc, #44]	; (46a4 <__libc_init_array+0x40>)
    4676:	4c0c      	ldr	r4, [pc, #48]	; (46a8 <__libc_init_array+0x44>)
    4678:	f000 f95e 	bl	4938 <_init>
    467c:	1ba4      	subs	r4, r4, r6
    467e:	10a4      	asrs	r4, r4, #2
    4680:	2500      	movs	r5, #0
    4682:	42a5      	cmp	r5, r4
    4684:	d105      	bne.n	4692 <__libc_init_array+0x2e>
    4686:	bd70      	pop	{r4, r5, r6, pc}
    4688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    468c:	4798      	blx	r3
    468e:	3501      	adds	r5, #1
    4690:	e7ee      	b.n	4670 <__libc_init_array+0xc>
    4692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4696:	4798      	blx	r3
    4698:	3501      	adds	r5, #1
    469a:	e7f2      	b.n	4682 <__libc_init_array+0x1e>
    469c:	00004944 	.word	0x00004944
    46a0:	00004944 	.word	0x00004944
    46a4:	00004944 	.word	0x00004944
    46a8:	00004948 	.word	0x00004948
    46ac:	682f2e2e 	.word	0x682f2e2e
    46b0:	732f6c61 	.word	0x732f6c61
    46b4:	682f6372 	.word	0x682f6372
    46b8:	615f6c61 	.word	0x615f6c61
    46bc:	735f6364 	.word	0x735f6364
    46c0:	2e636e79 	.word	0x2e636e79
    46c4:	00000063 	.word	0x00000063
    46c8:	682f2e2e 	.word	0x682f2e2e
    46cc:	732f6c61 	.word	0x732f6c61
    46d0:	682f6372 	.word	0x682f6372
    46d4:	635f6c61 	.word	0x635f6c61
    46d8:	72656d61 	.word	0x72656d61
    46dc:	73615f61 	.word	0x73615f61
    46e0:	2e636e79 	.word	0x2e636e79
    46e4:	00000063 	.word	0x00000063
    46e8:	682f2e2e 	.word	0x682f2e2e
    46ec:	732f6c61 	.word	0x732f6c61
    46f0:	682f6372 	.word	0x682f6372
    46f4:	6d5f6c61 	.word	0x6d5f6c61
    46f8:	735f6963 	.word	0x735f6963
    46fc:	2e636e79 	.word	0x2e636e79
    4700:	00000063 	.word	0x00000063
    4704:	682f2e2e 	.word	0x682f2e2e
    4708:	732f6c61 	.word	0x732f6c61
    470c:	682f6372 	.word	0x682f6372
    4710:	705f6c61 	.word	0x705f6c61
    4714:	632e6d77 	.word	0x632e6d77
    4718:	00000000 	.word	0x00000000
    471c:	682f2e2e 	.word	0x682f2e2e
    4720:	732f6c61 	.word	0x732f6c61
    4724:	682f6372 	.word	0x682f6372
    4728:	745f6c61 	.word	0x745f6c61
    472c:	72656d69 	.word	0x72656d69
    4730:	0000632e 	.word	0x0000632e
    4734:	682f2e2e 	.word	0x682f2e2e
    4738:	752f6c61 	.word	0x752f6c61
    473c:	736c6974 	.word	0x736c6974
    4740:	6372732f 	.word	0x6372732f
    4744:	6974752f 	.word	0x6974752f
    4748:	6c5f736c 	.word	0x6c5f736c
    474c:	2e747369 	.word	0x2e747369
    4750:	00000063 	.word	0x00000063

00004754 <_adcs>:
    4754:	00000000 00000018 00001800 00000000     ................
	...
    476c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    477c:	632e6364 00000000                       dc.c....

00004784 <_cfgs>:
    4784:	00205000 0a000000 00000000 00000000     .P .............
	...

00004884 <_map>:
    4884:	00000006 00000036 00000007 00000037     ....6.......7...
    4894:	00000009 00000019 0000000e 0000002e     ................
    48a4:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    48b4:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    48c4:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    48d4:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    48e4:	42001400 42001800 682f2e2e 742f6c70     ...B...B../hpl/t
    48f4:	70682f63 63745f6c 0000632e 682f2e2e     c/hpl_tc.c..../h
    4904:	692f6c61 756c636e 682f6564 635f6c61     al/include/hal_c
    4914:	72656d61 73615f61 2e636e79 00000068     amera_async.h...
    4924:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    4934:	0000632e                                .c..

00004938 <_init>:
    4938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    493a:	bf00      	nop
    493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    493e:	bc08      	pop	{r3}
    4940:	469e      	mov	lr, r3
    4942:	4770      	bx	lr

00004944 <__init_array_start>:
    4944:	00000289 	.word	0x00000289

00004948 <_fini>:
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494a:	bf00      	nop
    494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    494e:	bc08      	pop	{r3}
    4950:	469e      	mov	lr, r3
    4952:	4770      	bx	lr

00004954 <__fini_array_start>:
    4954:	00000265 	.word	0x00000265
