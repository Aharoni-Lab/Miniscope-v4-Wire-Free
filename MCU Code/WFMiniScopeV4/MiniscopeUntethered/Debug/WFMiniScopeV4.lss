
WFMiniScopeV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004df8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404df8  00404df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00404e00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00052bb4  204009c0  004057c0  000209c0  2**3
                  ALLOC
  4 .stack        00002004  20453574  00458374  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20455578  0045a378  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ad18  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000036b3  00000000  00000000  0003b75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006523  00000000  00000000  0003ee12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a88  00000000  00000000  00045335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c80  00000000  00000000  00045dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001fc62  00000000  00000000  00046a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e51d  00000000  00000000  0006669f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008a5c9  00000000  00000000  00074bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002338  00000000  00000000  000ff188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 55 45 20 dd 15 40 00 d9 15 40 00 d9 15 40 00     xUE ..@...@...@.
  400010:	d9 15 40 00 d9 15 40 00 d9 15 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 15 40 00 d9 15 40 00 00 00 00 00 d9 15 40 00     ..@...@.......@.
  40003c:	89 12 40 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ..@...@...@...@.
  40004c:	d9 15 40 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ..@...@...@...@.
  40005c:	d9 15 40 00 d9 15 40 00 00 00 00 00 bd 1a 40 00     ..@...@.......@.
  40006c:	39 10 40 00 00 00 00 00 d9 15 40 00 d9 15 40 00     9.@.......@...@.
  40007c:	d9 15 40 00 4d 10 40 00 00 00 00 00 d9 15 40 00     ..@.M.@.......@.
  40008c:	d9 15 40 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ..@...@...@...@.
  40009c:	d9 15 40 00 d9 15 40 00 d9 15 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	d9 15 40 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ..@...@...@...@.
  4000c4:	d9 15 40 00 d9 15 40 00 d9 15 40 00 00 00 00 00     ..@...@...@.....
  4000d4:	d9 15 40 00 00 00 00 00 d9 15 40 00 d9 15 40 00     ..@.......@...@.
  4000e4:	d9 15 40 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ..@...@...@...@.
  4000f4:	d9 15 40 00 d9 15 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400104:	00 00 00 00 d9 15 40 00 d9 15 40 00 d9 15 40 00     ......@...@...@.
	...
  400120:	d9 15 40 00 d9 15 40 00 fd 1a 40 00 d9 15 40 00     ..@...@...@...@.
  400130:	d9 15 40 00 00 00 00 00 00 00 00 00 d9 15 40 00     ..@...........@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00404e00 	.word	0x00404e00

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00404e00 	.word	0x00404e00
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00404e00 	.word	0x00404e00
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	204009dc 	.word	0x204009dc
  4001cc:	20400a04 	.word	0x20400a04
  4001d0:	00400bf1 	.word	0x00400bf1

004001d4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	204009e0 	.word	0x204009e0
  40021c:	20400a04 	.word	0x20400a04
  400220:	204009dc 	.word	0x204009dc
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
{
  40022c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
}
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
	return true;
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	204009dc 	.word	0x204009dc
  400258:	00400c85 	.word	0x00400c85
  40025c:	00400cb1 	.word	0x00400cb1

00400260 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400260:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
	}
}
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	20400a04 	.word	0x20400a04
  400278:	00400c61 	.word	0x00400c61

0040027c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40027c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
	driver_init();
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	204009e0 	.word	0x204009e0
  400294:	20400a04 	.word	0x20400a04
  400298:	00400bb5 	.word	0x00400bb5

0040029c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4002a2:	4b8a      	ldr	r3, [pc, #552]	; (4004cc <sd_mmc_check+0x230>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4002ac:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <sd_mmc_check+0x234>)
  4002ae:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b8:	4b86      	ldr	r3, [pc, #536]	; (4004d4 <sd_mmc_check+0x238>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002c4:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4002c6:	4b84      	ldr	r3, [pc, #528]	; (4004d8 <sd_mmc_check+0x23c>)
  4002c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002ca:	4629      	mov	r1, r5
  4002cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d0:	4b82      	ldr	r3, [pc, #520]	; (4004dc <sd_mmc_check+0x240>)
  4002d2:	4798      	blx	r3
  4002d4:	b930      	cbnz	r0, 4002e4 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002d6:	4b7f      	ldr	r3, [pc, #508]	; (4004d4 <sd_mmc_check+0x238>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	2403      	movs	r4, #3
  4002dc:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002de:	4b7c      	ldr	r3, [pc, #496]	; (4004d0 <sd_mmc_check+0x234>)
  4002e0:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002e2:	e7e5      	b.n	4002b0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002e8:	f245 5008 	movw	r0, #21768	; 0x5508
  4002ec:	4b7b      	ldr	r3, [pc, #492]	; (4004dc <sd_mmc_check+0x240>)
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	f040 8090 	bne.w	400416 <sd_mmc_check+0x17a>
	*v2 = 0;
  4002f6:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4002f8:	4b76      	ldr	r3, [pc, #472]	; (4004d4 <sd_mmc_check+0x238>)
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	7adb      	ldrb	r3, [r3, #11]
  4002fe:	f013 0f01 	tst.w	r3, #1
  400302:	f040 82a7 	bne.w	400854 <sd_mmc_check+0x5b8>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400306:	2100      	movs	r1, #0
  400308:	f245 1003 	movw	r0, #20739	; 0x5103
  40030c:	4b73      	ldr	r3, [pc, #460]	; (4004dc <sd_mmc_check+0x240>)
  40030e:	4798      	blx	r3
  400310:	2800      	cmp	r0, #0
  400312:	d0e0      	beq.n	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400314:	4d6f      	ldr	r5, [pc, #444]	; (4004d4 <sd_mmc_check+0x238>)
  400316:	682e      	ldr	r6, [r5, #0]
  400318:	4b71      	ldr	r3, [pc, #452]	; (4004e0 <sd_mmc_check+0x244>)
  40031a:	4798      	blx	r3
  40031c:	0c00      	lsrs	r0, r0, #16
  40031e:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400320:	682b      	ldr	r3, [r5, #0]
  400322:	7adb      	ldrb	r3, [r3, #11]
  400324:	f013 0f01 	tst.w	r3, #1
  400328:	d034      	beq.n	400394 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40032a:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <sd_mmc_check+0x248>)
  40032c:	4798      	blx	r3
  40032e:	2800      	cmp	r0, #0
  400330:	d0d1      	beq.n	4002d6 <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400332:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400334:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400336:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40033a:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40033e:	496a      	ldr	r1, [pc, #424]	; (4004e8 <sd_mmc_check+0x24c>)
  400340:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f201 	mul.w	r2, r2, r1
  40034c:	4967      	ldr	r1, [pc, #412]	; (4004ec <sd_mmc_check+0x250>)
  40034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400352:	fb02 f201 	mul.w	r2, r2, r1
  400356:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400358:	7b9a      	ldrb	r2, [r3, #14]
  40035a:	0992      	lsrs	r2, r2, #6
  40035c:	f040 81b3 	bne.w	4006c6 <sd_mmc_check+0x42a>
  400360:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400362:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400364:	7d1a      	ldrb	r2, [r3, #20]
  400366:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400368:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40036c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400370:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400372:	7dd9      	ldrb	r1, [r3, #23]
  400374:	0049      	lsls	r1, r1, #1
  400376:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40037e:	3201      	adds	r2, #1
  400380:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400384:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400386:	408a      	lsls	r2, r1
  400388:	7cd9      	ldrb	r1, [r3, #19]
  40038a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40038e:	408a      	lsls	r2, r1
				/ 1024;
  400390:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400392:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400394:	4b4f      	ldr	r3, [pc, #316]	; (4004d4 <sd_mmc_check+0x238>)
  400396:	681b      	ldr	r3, [r3, #0]
  400398:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40039a:	0409      	lsls	r1, r1, #16
  40039c:	f243 1007 	movw	r0, #12551	; 0x3107
  4003a0:	4b4e      	ldr	r3, [pc, #312]	; (4004dc <sd_mmc_check+0x240>)
  4003a2:	4798      	blx	r3
  4003a4:	2800      	cmp	r0, #0
  4003a6:	d096      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003a8:	4b4a      	ldr	r3, [pc, #296]	; (4004d4 <sd_mmc_check+0x238>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	7ada      	ldrb	r2, [r3, #11]
  4003ae:	f012 0f01 	tst.w	r2, #1
  4003b2:	f000 8199 	beq.w	4006e8 <sd_mmc_check+0x44c>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4003b6:	8919      	ldrh	r1, [r3, #8]
  4003b8:	0409      	lsls	r1, r1, #16
  4003ba:	f241 1037 	movw	r0, #4407	; 0x1137
  4003be:	4b47      	ldr	r3, [pc, #284]	; (4004dc <sd_mmc_check+0x240>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d087      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4003c6:	2301      	movs	r3, #1
  4003c8:	9300      	str	r3, [sp, #0]
  4003ca:	2208      	movs	r2, #8
  4003cc:	2100      	movs	r1, #0
  4003ce:	4848      	ldr	r0, [pc, #288]	; (4004f0 <sd_mmc_check+0x254>)
  4003d0:	4d48      	ldr	r5, [pc, #288]	; (4004f4 <sd_mmc_check+0x258>)
  4003d2:	47a8      	blx	r5
  4003d4:	2800      	cmp	r0, #0
  4003d6:	f43f af7e 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  4003da:	2101      	movs	r1, #1
  4003dc:	a804      	add	r0, sp, #16
  4003de:	4b46      	ldr	r3, [pc, #280]	; (4004f8 <sd_mmc_check+0x25c>)
  4003e0:	4798      	blx	r3
  4003e2:	2800      	cmp	r0, #0
  4003e4:	f43f af77 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  4003e8:	4b44      	ldr	r3, [pc, #272]	; (4004fc <sd_mmc_check+0x260>)
  4003ea:	4798      	blx	r3
  4003ec:	2800      	cmp	r0, #0
  4003ee:	f43f af72 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  4003f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4003f6:	f003 030f 	and.w	r3, r3, #15
  4003fa:	2b01      	cmp	r3, #1
  4003fc:	f000 81bb 	beq.w	400776 <sd_mmc_check+0x4da>
  400400:	2b00      	cmp	r3, #0
  400402:	f000 816d 	beq.w	4006e0 <sd_mmc_check+0x444>
  400406:	2b02      	cmp	r3, #2
  400408:	f000 81ba 	beq.w	400780 <sd_mmc_check+0x4e4>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40040c:	4b31      	ldr	r3, [pc, #196]	; (4004d4 <sd_mmc_check+0x238>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	2210      	movs	r2, #16
  400412:	731a      	strb	r2, [r3, #12]
  400414:	e168      	b.n	4006e8 <sd_mmc_check+0x44c>
	resp = driver_get_response();
  400416:	4b32      	ldr	r3, [pc, #200]	; (4004e0 <sd_mmc_check+0x244>)
  400418:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40041a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40041e:	f000 8217 	beq.w	400850 <sd_mmc_check+0x5b4>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400422:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400426:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40042a:	f47f af54 	bne.w	4002d6 <sd_mmc_check+0x3a>
	*v2 = 1;
  40042e:	2201      	movs	r2, #1
  400430:	e762      	b.n	4002f8 <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  400432:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400438:	4b26      	ldr	r3, [pc, #152]	; (4004d4 <sd_mmc_check+0x238>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	7ad3      	ldrb	r3, [r2, #11]
  40043e:	f043 0308 	orr.w	r3, r3, #8
  400442:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400444:	4b23      	ldr	r3, [pc, #140]	; (4004d4 <sd_mmc_check+0x238>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	7adb      	ldrb	r3, [r3, #11]
  40044a:	f013 0f01 	tst.w	r3, #1
  40044e:	f43f af5a 	beq.w	400306 <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400452:	2100      	movs	r1, #0
  400454:	f645 3002 	movw	r0, #23298	; 0x5b02
  400458:	4b20      	ldr	r3, [pc, #128]	; (4004dc <sd_mmc_check+0x240>)
  40045a:	4798      	blx	r3
  40045c:	2800      	cmp	r0, #0
  40045e:	f47f af52 	bne.w	400306 <sd_mmc_check+0x6a>
  400462:	e738      	b.n	4002d6 <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  400464:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40046c:	d027      	beq.n	4004be <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40046e:	2100      	movs	r1, #0
  400470:	f645 3002 	movw	r0, #23298	; 0x5b02
  400474:	4b19      	ldr	r3, [pc, #100]	; (4004dc <sd_mmc_check+0x240>)
  400476:	4798      	blx	r3
  400478:	2800      	cmp	r0, #0
  40047a:	f43f af2c 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <sd_mmc_check+0x238>)
  400480:	681b      	ldr	r3, [r3, #0]
  400482:	2201      	movs	r2, #1
  400484:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40048a:	f241 1003 	movw	r0, #4355	; 0x1103
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <sd_mmc_check+0x240>)
  400490:	4798      	blx	r3
  400492:	2800      	cmp	r0, #0
  400494:	f43f af1f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  400498:	4b12      	ldr	r3, [pc, #72]	; (4004e4 <sd_mmc_check+0x248>)
  40049a:	4798      	blx	r3
  40049c:	2800      	cmp	r0, #0
  40049e:	f43f af1a 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <sd_mmc_check+0x238>)
  4004a4:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004a6:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4004a8:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004ac:	3b01      	subs	r3, #1
  4004ae:	2b03      	cmp	r3, #3
  4004b0:	d826      	bhi.n	400500 <sd_mmc_check+0x264>
  4004b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4004b6:	00ef      	.short	0x00ef
  4004b8:	00f500f2 	.word	0x00f500f2
  4004bc:	00f8      	.short	0x00f8
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <sd_mmc_check+0x238>)
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	7ad3      	ldrb	r3, [r2, #11]
  4004c4:	f043 0308 	orr.w	r3, r3, #8
  4004c8:	72d3      	strb	r3, [r2, #11]
  4004ca:	e7d0      	b.n	40046e <sd_mmc_check+0x1d2>
  4004cc:	004001d5 	.word	0x004001d5
  4004d0:	00400261 	.word	0x00400261
  4004d4:	204009dc 	.word	0x204009dc
  4004d8:	00400c63 	.word	0x00400c63
  4004dc:	00400c85 	.word	0x00400c85
  4004e0:	00400ca9 	.word	0x00400ca9
  4004e4:	0040022d 	.word	0x0040022d
  4004e8:	00404bc8 	.word	0x00404bc8
  4004ec:	00404be4 	.word	0x00404be4
  4004f0:	00081133 	.word	0x00081133
  4004f4:	00400ce1 	.word	0x00400ce1
  4004f8:	00400e1d 	.word	0x00400e1d
  4004fc:	00400e81 	.word	0x00400e81
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400500:	2312      	movs	r3, #18
  400502:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400504:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400506:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40050a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40050e:	49a1      	ldr	r1, [pc, #644]	; (400794 <sd_mmc_check+0x4f8>)
  400510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400518:	fb03 f301 	mul.w	r3, r3, r1
  40051c:	499e      	ldr	r1, [pc, #632]	; (400798 <sd_mmc_check+0x4fc>)
  40051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400522:	fb03 f301 	mul.w	r3, r3, r1
  400526:	6013      	str	r3, [r2, #0]
  400528:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40052a:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40052c:	7d13      	ldrb	r3, [r2, #20]
  40052e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400530:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400534:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400538:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40053c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400540:	428b      	cmp	r3, r1
  400542:	d00f      	beq.n	400564 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400544:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400546:	7dd1      	ldrb	r1, [r2, #23]
  400548:	0049      	lsls	r1, r1, #1
  40054a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40054e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400550:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400554:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400556:	408b      	lsls	r3, r1
  400558:	7cd1      	ldrb	r1, [r2, #19]
  40055a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40055e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400560:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400562:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400564:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400566:	0409      	lsls	r1, r1, #16
  400568:	f243 1007 	movw	r0, #12551	; 0x3107
  40056c:	4b8b      	ldr	r3, [pc, #556]	; (40079c <sd_mmc_check+0x500>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb0 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400576:	4b8a      	ldr	r3, [pc, #552]	; (4007a0 <sd_mmc_check+0x504>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	7b1b      	ldrb	r3, [r3, #12]
  40057c:	2b3f      	cmp	r3, #63	; 0x3f
  40057e:	f240 809f 	bls.w	4006c0 <sd_mmc_check+0x424>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400582:	2100      	movs	r1, #0
  400584:	9100      	str	r1, [sp, #0]
  400586:	2301      	movs	r3, #1
  400588:	f44f 7200 	mov.w	r2, #512	; 0x200
  40058c:	4885      	ldr	r0, [pc, #532]	; (4007a4 <sd_mmc_check+0x508>)
  40058e:	4d86      	ldr	r5, [pc, #536]	; (4007a8 <sd_mmc_check+0x50c>)
  400590:	47a8      	blx	r5
  400592:	2800      	cmp	r0, #0
  400594:	f43f ae9f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400598:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40059a:	4e84      	ldr	r6, [pc, #528]	; (4007ac <sd_mmc_check+0x510>)
  40059c:	a803      	add	r0, sp, #12
  40059e:	47b0      	blx	r6
  4005a0:	2800      	cmp	r0, #0
  4005a2:	f43f ae98 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005a6:	3501      	adds	r5, #1
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	2d32      	cmp	r5, #50	; 0x32
  4005ac:	d1f6      	bne.n	40059c <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  4005ae:	9e03      	ldr	r6, [sp, #12]
  4005b0:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005b4:	4b7a      	ldr	r3, [pc, #488]	; (4007a0 <sd_mmc_check+0x504>)
  4005b6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005b8:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ba:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005bc:	7d1b      	ldrb	r3, [r3, #20]
  4005be:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4005c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4005c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005d0:	4293      	cmp	r3, r2
  4005d2:	d10e      	bne.n	4005f2 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  4005d4:	4f75      	ldr	r7, [pc, #468]	; (4007ac <sd_mmc_check+0x510>)
  4005d6:	a804      	add	r0, sp, #16
  4005d8:	47b8      	blx	r7
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7b 	beq.w	4002d6 <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005e0:	3501      	adds	r5, #1
  4005e2:	b2ad      	uxth	r5, r5
  4005e4:	2d35      	cmp	r5, #53	; 0x35
  4005e6:	d9f6      	bls.n	4005d6 <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  4005e8:	4b6d      	ldr	r3, [pc, #436]	; (4007a0 <sd_mmc_check+0x504>)
  4005ea:	681a      	ldr	r2, [r3, #0]
  4005ec:	9b04      	ldr	r3, [sp, #16]
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4005f2:	4f6e      	ldr	r7, [pc, #440]	; (4007ac <sd_mmc_check+0x510>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4005f4:	2d7f      	cmp	r5, #127	; 0x7f
  4005f6:	d959      	bls.n	4006ac <sd_mmc_check+0x410>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4005f8:	4b6d      	ldr	r3, [pc, #436]	; (4007b0 <sd_mmc_check+0x514>)
  4005fa:	7818      	ldrb	r0, [r3, #0]
  4005fc:	4b6d      	ldr	r3, [pc, #436]	; (4007b4 <sd_mmc_check+0x518>)
  4005fe:	4798      	blx	r3
  400600:	2803      	cmp	r0, #3
  400602:	d91d      	bls.n	400640 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400604:	4b6a      	ldr	r3, [pc, #424]	; (4007b0 <sd_mmc_check+0x514>)
  400606:	7818      	ldrb	r0, [r3, #0]
  400608:	4b6a      	ldr	r3, [pc, #424]	; (4007b4 <sd_mmc_check+0x518>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
	switch (bus_width) {
  40060e:	2804      	cmp	r0, #4
  400610:	d054      	beq.n	4006bc <sd_mmc_check+0x420>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400612:	4b69      	ldr	r3, [pc, #420]	; (4007b8 <sd_mmc_check+0x51c>)
  400614:	4969      	ldr	r1, [pc, #420]	; (4007bc <sd_mmc_check+0x520>)
  400616:	2808      	cmp	r0, #8
  400618:	bf18      	it	ne
  40061a:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40061c:	f243 1006 	movw	r0, #12550	; 0x3106
  400620:	4b5e      	ldr	r3, [pc, #376]	; (40079c <sd_mmc_check+0x500>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f43f ae56 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40062a:	4b65      	ldr	r3, [pc, #404]	; (4007c0 <sd_mmc_check+0x524>)
  40062c:	4798      	blx	r3
  40062e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400632:	f47f ae50 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  400636:	4b5a      	ldr	r3, [pc, #360]	; (4007a0 <sd_mmc_check+0x504>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  40063c:	4b61      	ldr	r3, [pc, #388]	; (4007c4 <sd_mmc_check+0x528>)
  40063e:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400640:	4b61      	ldr	r3, [pc, #388]	; (4007c8 <sd_mmc_check+0x52c>)
  400642:	4798      	blx	r3
  400644:	b1b6      	cbz	r6, 400674 <sd_mmc_check+0x3d8>
  400646:	b1a8      	cbz	r0, 400674 <sd_mmc_check+0x3d8>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400648:	4960      	ldr	r1, [pc, #384]	; (4007cc <sd_mmc_check+0x530>)
  40064a:	f243 1006 	movw	r0, #12550	; 0x3106
  40064e:	4b53      	ldr	r3, [pc, #332]	; (40079c <sd_mmc_check+0x500>)
  400650:	4798      	blx	r3
  400652:	2800      	cmp	r0, #0
  400654:	f43f ae3f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400658:	4b59      	ldr	r3, [pc, #356]	; (4007c0 <sd_mmc_check+0x524>)
  40065a:	4798      	blx	r3
  40065c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400660:	f47f ae39 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  400664:	4b4e      	ldr	r3, [pc, #312]	; (4007a0 <sd_mmc_check+0x504>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2201      	movs	r2, #1
  40066a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40066c:	4a58      	ldr	r2, [pc, #352]	; (4007d0 <sd_mmc_check+0x534>)
  40066e:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400670:	4b54      	ldr	r3, [pc, #336]	; (4007c4 <sd_mmc_check+0x528>)
  400672:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400674:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400676:	f44f 7800 	mov.w	r8, #512	; 0x200
  40067a:	f241 1710 	movw	r7, #4368	; 0x1110
  40067e:	4e47      	ldr	r6, [pc, #284]	; (40079c <sd_mmc_check+0x500>)
  400680:	4641      	mov	r1, r8
  400682:	4638      	mov	r0, r7
  400684:	47b0      	blx	r6
  400686:	2800      	cmp	r0, #0
  400688:	d16e      	bne.n	400768 <sd_mmc_check+0x4cc>
  40068a:	3d01      	subs	r5, #1
	while (retry--) {
  40068c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400690:	d1f6      	bne.n	400680 <sd_mmc_check+0x3e4>
  400692:	e620      	b.n	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400694:	2314      	movs	r3, #20
  400696:	7313      	strb	r3, [r2, #12]
  400698:	e734      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40069a:	2322      	movs	r3, #34	; 0x22
  40069c:	7313      	strb	r3, [r2, #12]
  40069e:	e731      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  4006a0:	2330      	movs	r3, #48	; 0x30
  4006a2:	7313      	strb	r3, [r2, #12]
  4006a4:	e72e      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  4006a6:	2340      	movs	r3, #64	; 0x40
  4006a8:	7313      	strb	r3, [r2, #12]
  4006aa:	e72b      	b.n	400504 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  4006ac:	a804      	add	r0, sp, #16
  4006ae:	47b8      	blx	r7
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae10 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	e79b      	b.n	4005f4 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006bc:	4945      	ldr	r1, [pc, #276]	; (4007d4 <sd_mmc_check+0x538>)
  4006be:	e7ad      	b.n	40061c <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  4006c0:	4b40      	ldr	r3, [pc, #256]	; (4007c4 <sd_mmc_check+0x528>)
  4006c2:	4798      	blx	r3
  4006c4:	e7d6      	b.n	400674 <sd_mmc_check+0x3d8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c6:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006c8:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ca:	7d5a      	ldrb	r2, [r3, #21]
  4006cc:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4006d2:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4006d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4006d8:	3201      	adds	r2, #1
  4006da:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4006dc:	605a      	str	r2, [r3, #4]
  4006de:	e659      	b.n	400394 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4006e0:	4b2f      	ldr	r3, [pc, #188]	; (4007a0 <sd_mmc_check+0x504>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2210      	movs	r2, #16
  4006e6:	731a      	strb	r2, [r3, #12]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4006e8:	4b31      	ldr	r3, [pc, #196]	; (4007b0 <sd_mmc_check+0x514>)
  4006ea:	7818      	ldrb	r0, [r3, #0]
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <sd_mmc_check+0x518>)
  4006ee:	4798      	blx	r3
  4006f0:	2803      	cmp	r0, #3
  4006f2:	d91c      	bls.n	40072e <sd_mmc_check+0x492>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4006f4:	4b2a      	ldr	r3, [pc, #168]	; (4007a0 <sd_mmc_check+0x504>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7ada      	ldrb	r2, [r3, #11]
  4006fa:	f012 0f01 	tst.w	r2, #1
  4006fe:	d014      	beq.n	40072a <sd_mmc_check+0x48e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400700:	8919      	ldrh	r1, [r3, #8]
  400702:	0409      	lsls	r1, r1, #16
  400704:	f241 1037 	movw	r0, #4407	; 0x1137
  400708:	4b24      	ldr	r3, [pc, #144]	; (40079c <sd_mmc_check+0x500>)
  40070a:	4798      	blx	r3
  40070c:	2800      	cmp	r0, #0
  40070e:	f43f ade2 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400712:	2102      	movs	r1, #2
  400714:	f241 1006 	movw	r0, #4358	; 0x1106
  400718:	4b20      	ldr	r3, [pc, #128]	; (40079c <sd_mmc_check+0x500>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f adda 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  400722:	4b1f      	ldr	r3, [pc, #124]	; (4007a0 <sd_mmc_check+0x504>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2204      	movs	r2, #4
  400728:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  40072a:	4b26      	ldr	r3, [pc, #152]	; (4007c4 <sd_mmc_check+0x528>)
  40072c:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  40072e:	4b26      	ldr	r3, [pc, #152]	; (4007c8 <sd_mmc_check+0x52c>)
  400730:	4798      	blx	r3
  400732:	b150      	cbz	r0, 40074a <sd_mmc_check+0x4ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400734:	4b1a      	ldr	r3, [pc, #104]	; (4007a0 <sd_mmc_check+0x504>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	7ada      	ldrb	r2, [r3, #11]
  40073a:	f012 0f01 	tst.w	r2, #1
  40073e:	d002      	beq.n	400746 <sd_mmc_check+0x4aa>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400740:	7b1b      	ldrb	r3, [r3, #12]
  400742:	2b10      	cmp	r3, #16
  400744:	d84a      	bhi.n	4007dc <sd_mmc_check+0x540>
		sd_mmc_configure_slot();
  400746:	4b1f      	ldr	r3, [pc, #124]	; (4007c4 <sd_mmc_check+0x528>)
  400748:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <sd_mmc_check+0x504>)
  40074c:	681b      	ldr	r3, [r3, #0]
  40074e:	7adb      	ldrb	r3, [r3, #11]
  400750:	f013 0f01 	tst.w	r3, #1
  400754:	d008      	beq.n	400768 <sd_mmc_check+0x4cc>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400756:	f44f 7100 	mov.w	r1, #512	; 0x200
  40075a:	f241 1010 	movw	r0, #4368	; 0x1110
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <sd_mmc_check+0x500>)
  400760:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400762:	2800      	cmp	r0, #0
  400764:	f43f adb7 	beq.w	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400768:	4b0d      	ldr	r3, [pc, #52]	; (4007a0 <sd_mmc_check+0x504>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2200      	movs	r2, #0
  40076e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400770:	4b19      	ldr	r3, [pc, #100]	; (4007d8 <sd_mmc_check+0x53c>)
  400772:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400774:	e59c      	b.n	4002b0 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <sd_mmc_check+0x504>)
  400778:	681b      	ldr	r3, [r3, #0]
  40077a:	221a      	movs	r2, #26
  40077c:	731a      	strb	r2, [r3, #12]
  40077e:	e7b3      	b.n	4006e8 <sd_mmc_check+0x44c>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400780:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400784:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <sd_mmc_check+0x504>)
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	bf14      	ite	ne
  40078c:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40078e:	2220      	moveq	r2, #32
  400790:	731a      	strb	r2, [r3, #12]
  400792:	e7a9      	b.n	4006e8 <sd_mmc_check+0x44c>
  400794:	00404bc8 	.word	0x00404bc8
  400798:	00404b88 	.word	0x00404b88
  40079c:	00400c85 	.word	0x00400c85
  4007a0:	204009dc 	.word	0x204009dc
  4007a4:	00081108 	.word	0x00081108
  4007a8:	00400ce1 	.word	0x00400ce1
  4007ac:	00400da9 	.word	0x00400da9
  4007b0:	20400a04 	.word	0x20400a04
  4007b4:	00400be1 	.word	0x00400be1
  4007b8:	01b70000 	.word	0x01b70000
  4007bc:	01b70200 	.word	0x01b70200
  4007c0:	00400ca9 	.word	0x00400ca9
  4007c4:	004001ad 	.word	0x004001ad
  4007c8:	00400beb 	.word	0x00400beb
  4007cc:	03b90100 	.word	0x03b90100
  4007d0:	03197500 	.word	0x03197500
  4007d4:	01b70100 	.word	0x01b70100
  4007d8:	00400261 	.word	0x00400261
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4007dc:	2540      	movs	r5, #64	; 0x40
  4007de:	462a      	mov	r2, r5
  4007e0:	2100      	movs	r1, #0
  4007e2:	a804      	add	r0, sp, #16
  4007e4:	4b39      	ldr	r3, [pc, #228]	; (4008cc <sd_mmc_check+0x630>)
  4007e6:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4007e8:	2301      	movs	r3, #1
  4007ea:	9300      	str	r3, [sp, #0]
  4007ec:	462a      	mov	r2, r5
  4007ee:	4938      	ldr	r1, [pc, #224]	; (4008d0 <sd_mmc_check+0x634>)
  4007f0:	4838      	ldr	r0, [pc, #224]	; (4008d4 <sd_mmc_check+0x638>)
  4007f2:	4d39      	ldr	r5, [pc, #228]	; (4008d8 <sd_mmc_check+0x63c>)
  4007f4:	47a8      	blx	r5
  4007f6:	2800      	cmp	r0, #0
  4007f8:	f43f ad6d 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  4007fc:	2101      	movs	r1, #1
  4007fe:	a804      	add	r0, sp, #16
  400800:	4b36      	ldr	r3, [pc, #216]	; (4008dc <sd_mmc_check+0x640>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f43f ad66 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40080a:	4b35      	ldr	r3, [pc, #212]	; (4008e0 <sd_mmc_check+0x644>)
  40080c:	4798      	blx	r3
  40080e:	2800      	cmp	r0, #0
  400810:	f43f ad61 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400814:	4b33      	ldr	r3, [pc, #204]	; (4008e4 <sd_mmc_check+0x648>)
  400816:	4798      	blx	r3
  400818:	f010 0f80 	tst.w	r0, #128	; 0x80
  40081c:	f47f ad5b 	bne.w	4002d6 <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400820:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400824:	f003 030f 	and.w	r3, r3, #15
  400828:	2b0f      	cmp	r3, #15
  40082a:	d08c      	beq.n	400746 <sd_mmc_check+0x4aa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40082c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400830:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400834:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400838:	f47f ad4d 	bne.w	4002d6 <sd_mmc_check+0x3a>
	driver_send_clock();
  40083c:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <sd_mmc_check+0x64c>)
  40083e:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <sd_mmc_check+0x650>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	2201      	movs	r2, #1
  400846:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	0052      	lsls	r2, r2, #1
  40084c:	601a      	str	r2, [r3, #0]
  40084e:	e77a      	b.n	400746 <sd_mmc_check+0x4aa>
	*v2 = 0;
  400850:	2200      	movs	r2, #0
  400852:	e551      	b.n	4002f8 <sd_mmc_check+0x5c>
  400854:	2a00      	cmp	r2, #0
  400856:	4f26      	ldr	r7, [pc, #152]	; (4008f0 <sd_mmc_check+0x654>)
  400858:	bf08      	it	eq
  40085a:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40085e:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400862:	f04f 0800 	mov.w	r8, #0
  400866:	4e23      	ldr	r6, [pc, #140]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  400868:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4008e4 <sd_mmc_check+0x648>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40086c:	4641      	mov	r1, r8
  40086e:	f241 1037 	movw	r0, #4407	; 0x1137
  400872:	47b0      	blx	r6
  400874:	b150      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400876:	4639      	mov	r1, r7
  400878:	f244 5029 	movw	r0, #17705	; 0x4529
  40087c:	47b0      	blx	r6
  40087e:	b128      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		resp = driver_get_response();
  400880:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400882:	2800      	cmp	r0, #0
  400884:	f6ff add5 	blt.w	400432 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  400888:	3d01      	subs	r5, #1
  40088a:	d1ef      	bne.n	40086c <sd_mmc_check+0x5d0>
			sd_mmc_card->type = CARD_TYPE_MMC;
  40088c:	4b17      	ldr	r3, [pc, #92]	; (4008ec <sd_mmc_check+0x650>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2202      	movs	r2, #2
  400892:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400894:	2100      	movs	r1, #0
  400896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x658>)
  40089c:	4798      	blx	r3
  40089e:	2800      	cmp	r0, #0
  4008a0:	f43f ad19 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008a4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4008f0 <sd_mmc_check+0x654>
  4008ac:	4f11      	ldr	r7, [pc, #68]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  4008ae:	4e0d      	ldr	r6, [pc, #52]	; (4008e4 <sd_mmc_check+0x648>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008b0:	4641      	mov	r1, r8
  4008b2:	f244 5001 	movw	r0, #17665	; 0x4501
  4008b6:	47b8      	blx	r7
  4008b8:	2800      	cmp	r0, #0
  4008ba:	f43f ad0c 	beq.w	4002d6 <sd_mmc_check+0x3a>
		resp = driver_get_response();
  4008be:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  4008c0:	2800      	cmp	r0, #0
  4008c2:	f6ff adcf 	blt.w	400464 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  4008c6:	3d01      	subs	r5, #1
  4008c8:	d1f2      	bne.n	4008b0 <sd_mmc_check+0x614>
  4008ca:	e504      	b.n	4002d6 <sd_mmc_check+0x3a>
  4008cc:	00401f75 	.word	0x00401f75
  4008d0:	80ffff01 	.word	0x80ffff01
  4008d4:	00081106 	.word	0x00081106
  4008d8:	00400ce1 	.word	0x00400ce1
  4008dc:	00400e1d 	.word	0x00400e1d
  4008e0:	00400e81 	.word	0x00400e81
  4008e4:	00400ca9 	.word	0x00400ca9
  4008e8:	00400c63 	.word	0x00400c63
  4008ec:	204009dc 	.word	0x204009dc
  4008f0:	401f8000 	.word	0x401f8000
  4008f4:	00400c85 	.word	0x00400c85

004008f8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4008f8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <sd_mmc_get_type+0x18>)
  4008fc:	4798      	blx	r3
  4008fe:	b108      	cbz	r0, 400904 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400900:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400902:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400904:	4b03      	ldr	r3, [pc, #12]	; (400914 <sd_mmc_get_type+0x1c>)
  400906:	4798      	blx	r3
	return sd_mmc_card->type;
  400908:	4b03      	ldr	r3, [pc, #12]	; (400918 <sd_mmc_get_type+0x20>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	7ad8      	ldrb	r0, [r3, #11]
  40090e:	bd08      	pop	{r3, pc}
  400910:	004001d5 	.word	0x004001d5
  400914:	00400261 	.word	0x00400261
  400918:	204009dc 	.word	0x204009dc

0040091c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40091c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <sd_mmc_get_capacity+0x18>)
  400920:	4798      	blx	r3
  400922:	b108      	cbz	r0, 400928 <sd_mmc_get_capacity+0xc>
		return 0;
  400924:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400926:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400928:	4b03      	ldr	r3, [pc, #12]	; (400938 <sd_mmc_get_capacity+0x1c>)
  40092a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <sd_mmc_get_capacity+0x20>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6858      	ldr	r0, [r3, #4]
  400932:	bd08      	pop	{r3, pc}
  400934:	004001d5 	.word	0x004001d5
  400938:	00400261 	.word	0x00400261
  40093c:	204009dc 	.word	0x204009dc

00400940 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400940:	2000      	movs	r0, #0
  400942:	4770      	bx	lr

00400944 <sd_mmc_init_write_blocks>:
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400944:	b570      	push	{r4, r5, r6, lr}
  400946:	b082      	sub	sp, #8
  400948:	460e      	mov	r6, r1
  40094a:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40094c:	4b16      	ldr	r3, [pc, #88]	; (4009a8 <sd_mmc_init_write_blocks+0x64>)
  40094e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400950:	4604      	mov	r4, r0
  400952:	b9b8      	cbnz	r0, 400984 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400954:	4b15      	ldr	r3, [pc, #84]	; (4009ac <sd_mmc_init_write_blocks+0x68>)
  400956:	4816      	ldr	r0, [pc, #88]	; (4009b0 <sd_mmc_init_write_blocks+0x6c>)
  400958:	2d01      	cmp	r5, #1
  40095a:	bf98      	it	ls
  40095c:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40095e:	4b15      	ldr	r3, [pc, #84]	; (4009b4 <sd_mmc_init_write_blocks+0x70>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	7adb      	ldrb	r3, [r3, #11]
  400964:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400968:	bf08      	it	eq
  40096a:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40096c:	2301      	movs	r3, #1
  40096e:	9300      	str	r3, [sp, #0]
  400970:	462b      	mov	r3, r5
  400972:	f44f 7200 	mov.w	r2, #512	; 0x200
  400976:	4631      	mov	r1, r6
  400978:	4e0f      	ldr	r6, [pc, #60]	; (4009b8 <sd_mmc_init_write_blocks+0x74>)
  40097a:	47b0      	blx	r6
  40097c:	b928      	cbnz	r0, 40098a <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  40097e:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <sd_mmc_init_write_blocks+0x78>)
  400980:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400982:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400984:	4620      	mov	r0, r4
  400986:	b002      	add	sp, #8
  400988:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  40098a:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <sd_mmc_init_write_blocks+0x7c>)
  40098c:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40098e:	4b0d      	ldr	r3, [pc, #52]	; (4009c4 <sd_mmc_init_write_blocks+0x80>)
  400990:	4003      	ands	r3, r0
  400992:	b923      	cbnz	r3, 40099e <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400994:	4b0c      	ldr	r3, [pc, #48]	; (4009c8 <sd_mmc_init_write_blocks+0x84>)
  400996:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400998:	4b0c      	ldr	r3, [pc, #48]	; (4009cc <sd_mmc_init_write_blocks+0x88>)
  40099a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  40099c:	e7f2      	b.n	400984 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  40099e:	4b07      	ldr	r3, [pc, #28]	; (4009bc <sd_mmc_init_write_blocks+0x78>)
  4009a0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4009a2:	2405      	movs	r4, #5
  4009a4:	e7ee      	b.n	400984 <sd_mmc_init_write_blocks+0x40>
  4009a6:	bf00      	nop
  4009a8:	004001d5 	.word	0x004001d5
  4009ac:	00089118 	.word	0x00089118
  4009b0:	00109119 	.word	0x00109119
  4009b4:	204009dc 	.word	0x204009dc
  4009b8:	00400ce1 	.word	0x00400ce1
  4009bc:	00400261 	.word	0x00400261
  4009c0:	00400ca9 	.word	0x00400ca9
  4009c4:	e4580000 	.word	0xe4580000
  4009c8:	20400a00 	.word	0x20400a00
  4009cc:	20400a02 	.word	0x20400a02

004009d0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4009d0:	b510      	push	{r4, lr}
  4009d2:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  4009d4:	4b06      	ldr	r3, [pc, #24]	; (4009f0 <sd_mmc_start_write_blocks+0x20>)
  4009d6:	4798      	blx	r3
  4009d8:	b920      	cbnz	r0, 4009e4 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4009da:	2200      	movs	r2, #0
  4009dc:	4b05      	ldr	r3, [pc, #20]	; (4009f4 <sd_mmc_start_write_blocks+0x24>)
  4009de:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4009e0:	2005      	movs	r0, #5
  4009e2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4009e4:	4a03      	ldr	r2, [pc, #12]	; (4009f4 <sd_mmc_start_write_blocks+0x24>)
  4009e6:	8813      	ldrh	r3, [r2, #0]
  4009e8:	1b1c      	subs	r4, r3, r4
  4009ea:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4009ec:	2000      	movs	r0, #0
}
  4009ee:	bd10      	pop	{r4, pc}
  4009f0:	00400ee5 	.word	0x00400ee5
  4009f4:	20400a00 	.word	0x20400a00

004009f8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  4009f8:	b510      	push	{r4, lr}
  4009fa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  4009fc:	4b12      	ldr	r3, [pc, #72]	; (400a48 <sd_mmc_wait_end_of_write_blocks+0x50>)
  4009fe:	4798      	blx	r3
  400a00:	b908      	cbnz	r0, 400a06 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400a02:	2005      	movs	r0, #5
  400a04:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400a06:	b184      	cbz	r4, 400a2a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400a08:	2200      	movs	r2, #0
  400a0a:	4b10      	ldr	r3, [pc, #64]	; (400a4c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400a0c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400a0e:	4b10      	ldr	r3, [pc, #64]	; (400a50 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400a10:	881b      	ldrh	r3, [r3, #0]
  400a12:	2b01      	cmp	r3, #1
  400a14:	d00f      	beq.n	400a36 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400a16:	2100      	movs	r1, #0
  400a18:	f243 100c 	movw	r0, #12556	; 0x310c
  400a1c:	4b0d      	ldr	r3, [pc, #52]	; (400a54 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400a1e:	4798      	blx	r3
  400a20:	b968      	cbnz	r0, 400a3e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400a22:	4b0d      	ldr	r3, [pc, #52]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a24:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400a26:	2005      	movs	r0, #5
  400a28:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400a2a:	4b08      	ldr	r3, [pc, #32]	; (400a4c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400a2c:	881b      	ldrh	r3, [r3, #0]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d0ed      	beq.n	400a0e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400a32:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400a34:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400a36:	4b08      	ldr	r3, [pc, #32]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a38:	4798      	blx	r3
		return SD_MMC_OK;
  400a3a:	2000      	movs	r0, #0
  400a3c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400a3e:	4b06      	ldr	r3, [pc, #24]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a40:	4798      	blx	r3
	return SD_MMC_OK;
  400a42:	2000      	movs	r0, #0
  400a44:	bd10      	pop	{r4, pc}
  400a46:	bf00      	nop
  400a48:	00400f49 	.word	0x00400f49
  400a4c:	20400a00 	.word	0x20400a00
  400a50:	20400a02 	.word	0x20400a02
  400a54:	00400c85 	.word	0x00400c85
  400a58:	00400261 	.word	0x00400261

00400a5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400a60:	b980      	cbnz	r0, 400a84 <_read+0x28>
  400a62:	460c      	mov	r4, r1
  400a64:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400a66:	2a00      	cmp	r2, #0
  400a68:	dd0f      	ble.n	400a8a <_read+0x2e>
  400a6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400a6c:	4e08      	ldr	r6, [pc, #32]	; (400a90 <_read+0x34>)
  400a6e:	4d09      	ldr	r5, [pc, #36]	; (400a94 <_read+0x38>)
  400a70:	6830      	ldr	r0, [r6, #0]
  400a72:	4621      	mov	r1, r4
  400a74:	682b      	ldr	r3, [r5, #0]
  400a76:	4798      	blx	r3
		ptr++;
  400a78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400a7a:	42bc      	cmp	r4, r7
  400a7c:	d1f8      	bne.n	400a70 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400a7e:	4640      	mov	r0, r8
  400a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a84:	f04f 38ff 	mov.w	r8, #4294967295
  400a88:	e7f9      	b.n	400a7e <_read+0x22>
	for (; len > 0; --len) {
  400a8a:	4680      	mov	r8, r0
  400a8c:	e7f7      	b.n	400a7e <_read+0x22>
  400a8e:	bf00      	nop
  400a90:	204532e8 	.word	0x204532e8
  400a94:	204532e0 	.word	0x204532e0

00400a98 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400a98:	3801      	subs	r0, #1
  400a9a:	2802      	cmp	r0, #2
  400a9c:	d815      	bhi.n	400aca <_write+0x32>
{
  400a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400aa2:	460e      	mov	r6, r1
  400aa4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400aa6:	b19a      	cbz	r2, 400ad0 <_write+0x38>
  400aa8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400aaa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400ae4 <_write+0x4c>
  400aae:	4f0c      	ldr	r7, [pc, #48]	; (400ae0 <_write+0x48>)
  400ab0:	f8d8 0000 	ldr.w	r0, [r8]
  400ab4:	f815 1b01 	ldrb.w	r1, [r5], #1
  400ab8:	683b      	ldr	r3, [r7, #0]
  400aba:	4798      	blx	r3
  400abc:	2800      	cmp	r0, #0
  400abe:	db0a      	blt.n	400ad6 <_write+0x3e>
  400ac0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400ac2:	3c01      	subs	r4, #1
  400ac4:	d1f4      	bne.n	400ab0 <_write+0x18>
  400ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400aca:	f04f 30ff 	mov.w	r0, #4294967295
  400ace:	4770      	bx	lr
	for (; len != 0; --len) {
  400ad0:	4610      	mov	r0, r2
  400ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400ad6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ade:	bf00      	nop
  400ae0:	204532e4 	.word	0x204532e4
  400ae4:	204532e8 	.word	0x204532e8

00400ae8 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400ae8:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400aee:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400af0:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400af2:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400af4:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400af6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400af8:	2680      	movs	r6, #128	; 0x80
  400afa:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400afc:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400afe:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400b00:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400b02:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400b04:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400b06:	2200      	movs	r2, #0
  400b08:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400b0a:	2205      	movs	r2, #5
  400b0c:	601a      	str	r2, [r3, #0]
}
  400b0e:	bc70      	pop	{r4, r5, r6}
  400b10:	4770      	bx	lr
	...

00400b14 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400b14:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400b16:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400b1a:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400b1c:	f411 7f80 	tst.w	r1, #256	; 0x100
  400b20:	d004      	beq.n	400b2c <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400b22:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400b26:	d00e      	beq.n	400b46 <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400b28:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400b2c:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400b30:	bf18      	it	ne
  400b32:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400b3a:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400b3c:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400b3e:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400b40:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400b44:	e00d      	b.n	400b62 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400b46:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400b4a:	bf14      	ite	ne
  400b4c:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400b50:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400b54:	e7ea      	b.n	400b2c <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400b56:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400b5a:	d10c      	bne.n	400b76 <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400b5c:	f013 0f01 	tst.w	r3, #1
  400b60:	d10d      	bne.n	400b7e <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  400b62:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400b64:	2a00      	cmp	r2, #0
  400b66:	d0f6      	beq.n	400b56 <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400b68:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400b6c:	d0f6      	beq.n	400b5c <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  400b6e:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <hsmci_send_cmd_execute+0x9c>)
  400b70:	4798      	blx	r3
				return false;
  400b72:	2000      	movs	r0, #0
  400b74:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400b76:	4b0e      	ldr	r3, [pc, #56]	; (400bb0 <hsmci_send_cmd_execute+0x9c>)
  400b78:	4798      	blx	r3
				return false;
  400b7a:	2000      	movs	r0, #0
  400b7c:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400b7e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400b82:	d103      	bne.n	400b8c <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400b84:	2001      	movs	r0, #1
  400b86:	bd08      	pop	{r3, pc}
	return true;
  400b88:	2001      	movs	r0, #1
  400b8a:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400b92:	f04f 32ff 	mov.w	r2, #4294967295
  400b96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400b9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400b9e:	2b20      	cmp	r3, #32
  400ba0:	d0f2      	beq.n	400b88 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  400ba2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400ba4:	3a01      	subs	r2, #1
  400ba6:	d1f8      	bne.n	400b9a <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  400ba8:	4b01      	ldr	r3, [pc, #4]	; (400bb0 <hsmci_send_cmd_execute+0x9c>)
  400baa:	4798      	blx	r3
			return false;
  400bac:	2000      	movs	r0, #0
  400bae:	bd08      	pop	{r3, pc}
  400bb0:	00400ae9 	.word	0x00400ae9

00400bb4 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400bb4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400bb6:	2012      	movs	r0, #18
  400bb8:	4c08      	ldr	r4, [pc, #32]	; (400bdc <hsmci_init+0x28>)
  400bba:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400bbc:	203a      	movs	r0, #58	; 0x3a
  400bbe:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc4:	2272      	movs	r2, #114	; 0x72
  400bc6:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400bc8:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400bca:	2211      	movs	r2, #17
  400bcc:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400bce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400bd2:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400bd4:	2205      	movs	r2, #5
  400bd6:	601a      	str	r2, [r3, #0]
  400bd8:	bd10      	pop	{r4, pc}
  400bda:	bf00      	nop
  400bdc:	00401475 	.word	0x00401475

00400be0 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400be0:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400be2:	bf0c      	ite	eq
  400be4:	2004      	moveq	r0, #4
  400be6:	2000      	movne	r0, #0
  400be8:	4770      	bx	lr

00400bea <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400bea:	2001      	movs	r0, #1
  400bec:	4770      	bx	lr
	...

00400bf0 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400bf0:	b19b      	cbz	r3, 400c1a <hsmci_select_device+0x2a>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400bf2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400bf6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400bfc:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400bfe:	0049      	lsls	r1, r1, #1
  400c00:	4b15      	ldr	r3, [pc, #84]	; (400c58 <hsmci_select_device+0x68>)
  400c02:	4299      	cmp	r1, r3
  400c04:	d810      	bhi.n	400c28 <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  400c06:	4815      	ldr	r0, [pc, #84]	; (400c5c <hsmci_select_device+0x6c>)
  400c08:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
  400c0c:	fb01 0113 	mls	r1, r1, r3, r0
		if (rest > 0) {
  400c10:	b101      	cbz	r1, 400c14 <hsmci_select_device+0x24>
			clkdiv++;
  400c12:	3301      	adds	r3, #1
		if (clkdiv > 0) {
  400c14:	b14b      	cbz	r3, 400c2a <hsmci_select_device+0x3a>
			clkdiv -= 1;
  400c16:	3b01      	subs	r3, #1
  400c18:	e007      	b.n	400c2a <hsmci_select_device+0x3a>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400c1e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400c24:	6543      	str	r3, [r0, #84]	; 0x54
  400c26:	e7ea      	b.n	400bfe <hsmci_select_device+0xe>
		clkdiv = 0;
  400c28:	2300      	movs	r3, #0
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400c2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c2e:	6848      	ldr	r0, [r1, #4]
  400c30:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400c34:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400c36:	6848      	ldr	r0, [r1, #4]
  400c38:	b2db      	uxtb	r3, r3
  400c3a:	4303      	orrs	r3, r0
  400c3c:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400c3e:	2a04      	cmp	r2, #4
  400c40:	d007      	beq.n	400c52 <hsmci_select_device+0x62>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400c42:	2a08      	cmp	r2, #8
  400c44:	bf0c      	ite	eq
  400c46:	22c0      	moveq	r2, #192	; 0xc0
  400c48:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c4e:	60da      	str	r2, [r3, #12]
  400c50:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400c52:	2280      	movs	r2, #128	; 0x80
  400c54:	e7f9      	b.n	400c4a <hsmci_select_device+0x5a>
  400c56:	bf00      	nop
  400c58:	089543ff 	.word	0x089543ff
  400c5c:	08954400 	.word	0x08954400

00400c60 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  400c60:	4770      	bx	lr

00400c62 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c66:	685a      	ldr	r2, [r3, #4]
  400c68:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400c6c:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400c6e:	2200      	movs	r2, #0
  400c70:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400c72:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400c76:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400c78:	461a      	mov	r2, r3
  400c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400c7c:	f013 0f01 	tst.w	r3, #1
  400c80:	d0fb      	beq.n	400c7a <hsmci_send_clock+0x18>
}
  400c82:	4770      	bx	lr

00400c84 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400c84:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c8a:	685a      	ldr	r2, [r3, #4]
  400c8c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400c90:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400c92:	2400      	movs	r4, #0
  400c94:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400c96:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400c98:	460a      	mov	r2, r1
  400c9a:	4601      	mov	r1, r0
  400c9c:	4620      	mov	r0, r4
  400c9e:	4b01      	ldr	r3, [pc, #4]	; (400ca4 <hsmci_send_cmd+0x20>)
  400ca0:	4798      	blx	r3
}
  400ca2:	bd10      	pop	{r4, pc}
  400ca4:	00400b15 	.word	0x00400b15

00400ca8 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400cac:	6a18      	ldr	r0, [r3, #32]
}
  400cae:	4770      	bx	lr

00400cb0 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400cb0:	b410      	push	{r4}
  400cb2:	1d03      	adds	r3, r0, #4
  400cb4:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400cb6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400cba:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400cbc:	0e11      	lsrs	r1, r2, #24
  400cbe:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400cc2:	0c11      	lsrs	r1, r2, #16
  400cc4:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400cc8:	0a11      	lsrs	r1, r2, #8
  400cca:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400cce:	f803 2c01 	strb.w	r2, [r3, #-1]
  400cd2:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  400cd4:	4283      	cmp	r3, r0
  400cd6:	d1f0      	bne.n	400cba <hsmci_get_response_128+0xa>
		response++;
	}
}
  400cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cdc:	4770      	bx	lr
	...

00400ce0 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400ce0:	b570      	push	{r4, r5, r6, lr}
  400ce2:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400ce6:	b384      	cbz	r4, 400d4a <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400ce8:	f44f 7580 	mov.w	r5, #256	; 0x100
  400cec:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400cf0:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400cf2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400cf6:	686c      	ldr	r4, [r5, #4]
  400cf8:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400cfc:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400cfe:	f012 0f03 	tst.w	r2, #3
  400d02:	d027      	beq.n	400d54 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400d04:	686c      	ldr	r4, [r5, #4]
  400d06:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400d0a:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400d0c:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400d10:	2c00      	cmp	r4, #0
  400d12:	bf14      	ite	ne
  400d14:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400d18:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400d1c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400d20:	d11f      	bne.n	400d62 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400d22:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400d26:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400d2a:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400d2c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400d30:	d12b      	bne.n	400d8a <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  400d32:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400d36:	d12b      	bne.n	400d90 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400d38:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400d3c:	d118      	bne.n	400d70 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400d3e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400d42:	bf18      	it	ne
  400d44:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400d48:	e012      	b.n	400d70 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  400d4a:	2500      	movs	r5, #0
  400d4c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400d50:	6525      	str	r5, [r4, #80]	; 0x50
  400d52:	e7ce      	b.n	400cf2 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400d54:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400d58:	686c      	ldr	r4, [r5, #4]
  400d5a:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400d5e:	606c      	str	r4, [r5, #4]
  400d60:	e7d4      	b.n	400d0c <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400d62:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400d66:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400d6a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400d6e:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400d70:	2600      	movs	r6, #0
  400d72:	4d09      	ldr	r5, [pc, #36]	; (400d98 <hsmci_adtc_start+0xb8>)
  400d74:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400d76:	4d09      	ldr	r5, [pc, #36]	; (400d9c <hsmci_adtc_start+0xbc>)
  400d78:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400d7a:	4a09      	ldr	r2, [pc, #36]	; (400da0 <hsmci_adtc_start+0xc0>)
  400d7c:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400d7e:	460a      	mov	r2, r1
  400d80:	4601      	mov	r1, r0
  400d82:	4620      	mov	r0, r4
  400d84:	4b07      	ldr	r3, [pc, #28]	; (400da4 <hsmci_adtc_start+0xc4>)
  400d86:	4798      	blx	r3
}
  400d88:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400d8a:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400d8e:	e7ef      	b.n	400d70 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400d90:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400d94:	e7ec      	b.n	400d70 <hsmci_adtc_start+0x90>
  400d96:	bf00      	nop
  400d98:	20400a0c 	.word	0x20400a0c
  400d9c:	20400a06 	.word	0x20400a06
  400da0:	20400a08 	.word	0x20400a08
  400da4:	00400b15 	.word	0x00400b15

00400da8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400da8:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400daa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400dae:	4a16      	ldr	r2, [pc, #88]	; (400e08 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400db2:	4213      	tst	r3, r2
  400db4:	d11d      	bne.n	400df2 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400db6:	f013 0f02 	tst.w	r3, #2
  400dba:	d0f9      	beq.n	400db0 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dc2:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400dc4:	4a11      	ldr	r2, [pc, #68]	; (400e0c <hsmci_read_word+0x64>)
  400dc6:	6813      	ldr	r3, [r2, #0]
  400dc8:	3304      	adds	r3, #4
  400dca:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400dcc:	4a10      	ldr	r2, [pc, #64]	; (400e10 <hsmci_read_word+0x68>)
  400dce:	8811      	ldrh	r1, [r2, #0]
  400dd0:	4a10      	ldr	r2, [pc, #64]	; (400e14 <hsmci_read_word+0x6c>)
  400dd2:	8812      	ldrh	r2, [r2, #0]
  400dd4:	fb02 f201 	mul.w	r2, r2, r1
  400dd8:	4293      	cmp	r3, r2
  400dda:	d312      	bcc.n	400e02 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400ddc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400de0:	4a09      	ldr	r2, [pc, #36]	; (400e08 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400de2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400de4:	4213      	tst	r3, r2
  400de6:	d108      	bne.n	400dfa <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400de8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400dec:	d0f9      	beq.n	400de2 <hsmci_read_word+0x3a>
	return true;
  400dee:	2001      	movs	r0, #1
  400df0:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400df2:	4b09      	ldr	r3, [pc, #36]	; (400e18 <hsmci_read_word+0x70>)
  400df4:	4798      	blx	r3
			return false;
  400df6:	2000      	movs	r0, #0
  400df8:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400dfa:	4b07      	ldr	r3, [pc, #28]	; (400e18 <hsmci_read_word+0x70>)
  400dfc:	4798      	blx	r3
			return false;
  400dfe:	2000      	movs	r0, #0
  400e00:	bd08      	pop	{r3, pc}
		return true;
  400e02:	2001      	movs	r0, #1
}
  400e04:	bd08      	pop	{r3, pc}
  400e06:	bf00      	nop
  400e08:	c0600000 	.word	0xc0600000
  400e0c:	20400a0c 	.word	0x20400a0c
  400e10:	20400a06 	.word	0x20400a06
  400e14:	20400a08 	.word	0x20400a08
  400e18:	00400ae9 	.word	0x00400ae9

00400e1c <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e1e:	b089      	sub	sp, #36	; 0x24
  400e20:	4607      	mov	r7, r0
  400e22:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400e24:	2220      	movs	r2, #32
  400e26:	2100      	movs	r1, #0
  400e28:	4668      	mov	r0, sp
  400e2a:	4b0e      	ldr	r3, [pc, #56]	; (400e64 <hsmci_start_read_blocks+0x48>)
  400e2c:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400e2e:	4e0e      	ldr	r6, [pc, #56]	; (400e68 <hsmci_start_read_blocks+0x4c>)
  400e30:	2501      	movs	r5, #1
  400e32:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400e34:	4b0d      	ldr	r3, [pc, #52]	; (400e6c <hsmci_start_read_blocks+0x50>)
  400e36:	881b      	ldrh	r3, [r3, #0]
  400e38:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400e3c:	4b0c      	ldr	r3, [pc, #48]	; (400e70 <hsmci_start_read_blocks+0x54>)
  400e3e:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400e40:	08a3      	lsrs	r3, r4, #2
  400e42:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400e44:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <hsmci_start_read_blocks+0x58>)
  400e46:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  400e48:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400e4a:	466a      	mov	r2, sp
  400e4c:	2100      	movs	r1, #0
  400e4e:	4630      	mov	r0, r6
  400e50:	4b09      	ldr	r3, [pc, #36]	; (400e78 <hsmci_start_read_blocks+0x5c>)
  400e52:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400e54:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400e56:	4a09      	ldr	r2, [pc, #36]	; (400e7c <hsmci_start_read_blocks+0x60>)
  400e58:	6813      	ldr	r3, [r2, #0]
  400e5a:	441c      	add	r4, r3
  400e5c:	6014      	str	r4, [r2, #0]
	return true;
}
  400e5e:	4628      	mov	r0, r5
  400e60:	b009      	add	sp, #36	; 0x24
  400e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e64:	00401f75 	.word	0x00401f75
  400e68:	40078000 	.word	0x40078000
  400e6c:	20400a06 	.word	0x20400a06
  400e70:	00043001 	.word	0x00043001
  400e74:	40000200 	.word	0x40000200
  400e78:	004014c9 	.word	0x004014c9
  400e7c:	20400a0c 	.word	0x20400a0c

00400e80 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  400e80:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400e82:	4b12      	ldr	r3, [pc, #72]	; (400ecc <hsmci_wait_end_of_read_blocks+0x4c>)
  400e84:	881b      	ldrh	r3, [r3, #0]
  400e86:	4a12      	ldr	r2, [pc, #72]	; (400ed0 <hsmci_wait_end_of_read_blocks+0x50>)
  400e88:	8812      	ldrh	r2, [r2, #0]
  400e8a:	fb02 f203 	mul.w	r2, r2, r3
  400e8e:	4b11      	ldr	r3, [pc, #68]	; (400ed4 <hsmci_wait_end_of_read_blocks+0x54>)
  400e90:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400e92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e96:	4910      	ldr	r1, [pc, #64]	; (400ed8 <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400e98:	4e10      	ldr	r6, [pc, #64]	; (400edc <hsmci_wait_end_of_read_blocks+0x5c>)
  400e9a:	e009      	b.n	400eb0 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  400e9c:	4b10      	ldr	r3, [pc, #64]	; (400ee0 <hsmci_wait_end_of_read_blocks+0x60>)
  400e9e:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400ea0:	2201      	movs	r2, #1
  400ea2:	4b0e      	ldr	r3, [pc, #56]	; (400edc <hsmci_wait_end_of_read_blocks+0x5c>)
  400ea4:	621a      	str	r2, [r3, #32]
			return false;
  400ea6:	2000      	movs	r0, #0
  400ea8:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400eaa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400eae:	d10a      	bne.n	400ec6 <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400eb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eb2:	420b      	tst	r3, r1
  400eb4:	d1f2      	bne.n	400e9c <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400eb6:	42a2      	cmp	r2, r4
  400eb8:	d9f7      	bls.n	400eaa <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400eba:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400ebc:	f015 0f01 	tst.w	r5, #1
  400ec0:	d0f3      	beq.n	400eaa <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  400ec2:	2001      	movs	r0, #1
	return true;
}
  400ec4:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400ec6:	2001      	movs	r0, #1
  400ec8:	bd70      	pop	{r4, r5, r6, pc}
  400eca:	bf00      	nop
  400ecc:	20400a06 	.word	0x20400a06
  400ed0:	20400a08 	.word	0x20400a08
  400ed4:	20400a0c 	.word	0x20400a0c
  400ed8:	c0600000 	.word	0xc0600000
  400edc:	40078000 	.word	0x40078000
  400ee0:	00400ae9 	.word	0x00400ae9

00400ee4 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  400ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ee6:	b089      	sub	sp, #36	; 0x24
  400ee8:	4607      	mov	r7, r0
  400eea:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400eec:	2220      	movs	r2, #32
  400eee:	2100      	movs	r1, #0
  400ef0:	4668      	mov	r0, sp
  400ef2:	4b0e      	ldr	r3, [pc, #56]	; (400f2c <hsmci_start_write_blocks+0x48>)
  400ef4:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400ef6:	4e0e      	ldr	r6, [pc, #56]	; (400f30 <hsmci_start_write_blocks+0x4c>)
  400ef8:	2501      	movs	r5, #1
  400efa:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400efc:	4b0d      	ldr	r3, [pc, #52]	; (400f34 <hsmci_start_write_blocks+0x50>)
  400efe:	881b      	ldrh	r3, [r3, #0]
  400f00:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400f04:	4b0c      	ldr	r3, [pc, #48]	; (400f38 <hsmci_start_write_blocks+0x54>)
  400f06:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400f08:	08a3      	lsrs	r3, r4, #2
  400f0a:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  400f0c:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400f0e:	4b0b      	ldr	r3, [pc, #44]	; (400f3c <hsmci_start_write_blocks+0x58>)
  400f10:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400f12:	466a      	mov	r2, sp
  400f14:	2100      	movs	r1, #0
  400f16:	4630      	mov	r0, r6
  400f18:	4b09      	ldr	r3, [pc, #36]	; (400f40 <hsmci_start_write_blocks+0x5c>)
  400f1a:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400f1c:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400f1e:	4a09      	ldr	r2, [pc, #36]	; (400f44 <hsmci_start_write_blocks+0x60>)
  400f20:	6813      	ldr	r3, [r2, #0]
  400f22:	441c      	add	r4, r3
  400f24:	6014      	str	r4, [r2, #0]
	return true;
}
  400f26:	4628      	mov	r0, r5
  400f28:	b009      	add	sp, #36	; 0x24
  400f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f2c:	00401f75 	.word	0x00401f75
  400f30:	40078000 	.word	0x40078000
  400f34:	20400a06 	.word	0x20400a06
  400f38:	00015011 	.word	0x00015011
  400f3c:	40000200 	.word	0x40000200
  400f40:	004014c9 	.word	0x004014c9
  400f44:	20400a0c 	.word	0x20400a0c

00400f48 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  400f48:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f4a:	4b12      	ldr	r3, [pc, #72]	; (400f94 <hsmci_wait_end_of_write_blocks+0x4c>)
  400f4c:	881b      	ldrh	r3, [r3, #0]
  400f4e:	4a12      	ldr	r2, [pc, #72]	; (400f98 <hsmci_wait_end_of_write_blocks+0x50>)
  400f50:	8812      	ldrh	r2, [r2, #0]
  400f52:	fb02 f203 	mul.w	r2, r2, r3
  400f56:	4b11      	ldr	r3, [pc, #68]	; (400f9c <hsmci_wait_end_of_write_blocks+0x54>)
  400f58:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400f5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f5e:	4910      	ldr	r1, [pc, #64]	; (400fa0 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f60:	4e10      	ldr	r6, [pc, #64]	; (400fa4 <hsmci_wait_end_of_write_blocks+0x5c>)
  400f62:	e009      	b.n	400f78 <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  400f64:	4b10      	ldr	r3, [pc, #64]	; (400fa8 <hsmci_wait_end_of_write_blocks+0x60>)
  400f66:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f68:	2201      	movs	r2, #1
  400f6a:	4b0e      	ldr	r3, [pc, #56]	; (400fa4 <hsmci_wait_end_of_write_blocks+0x5c>)
  400f6c:	621a      	str	r2, [r3, #32]
			return false;
  400f6e:	2000      	movs	r0, #0
  400f70:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400f72:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400f76:	d10a      	bne.n	400f8e <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400f78:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f7a:	420b      	tst	r3, r1
  400f7c:	d1f2      	bne.n	400f64 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f7e:	42a2      	cmp	r2, r4
  400f80:	d9f7      	bls.n	400f72 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f82:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400f84:	f015 0f01 	tst.w	r5, #1
  400f88:	d0f3      	beq.n	400f72 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  400f8a:	2001      	movs	r0, #1

	return true;
}
  400f8c:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400f8e:	2001      	movs	r0, #1
  400f90:	bd70      	pop	{r4, r5, r6, pc}
  400f92:	bf00      	nop
  400f94:	20400a06 	.word	0x20400a06
  400f98:	20400a08 	.word	0x20400a08
  400f9c:	20400a0c 	.word	0x20400a0c
  400fa0:	c0600000 	.word	0xc0600000
  400fa4:	40078000 	.word	0x40078000
  400fa8:	00400ae9 	.word	0x00400ae9

00400fac <matrix_set_system_io>:

	p_matrix->MATRIX_SYSIO = ul_io;

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)
	
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
  400fac:	4b06      	ldr	r3, [pc, #24]	; (400fc8 <matrix_set_system_io+0x1c>)
  400fae:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  400fb2:	4a06      	ldr	r2, [pc, #24]	; (400fcc <matrix_set_system_io+0x20>)
  400fb4:	400a      	ands	r2, r1
  400fb6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);
  400fba:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400fbe:	b280      	uxth	r0, r0
  400fc0:	4310      	orrs	r0, r2
  400fc2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  400fc6:	4770      	bx	lr
  400fc8:	40088000 	.word	0x40088000
  400fcc:	ffff0000 	.word	0xffff0000

00400fd0 <matrix_get_system_io>:

	return (p_matrix->MATRIX_SYSIO);

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)

	return (p_matrix->CCFG_SYSIO & 0xFFFF);
  400fd0:	4b02      	ldr	r3, [pc, #8]	; (400fdc <matrix_get_system_io+0xc>)
  400fd2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
#else

	return (p_matrix->CCFG_SYSIO);

#endif
}
  400fd6:	b280      	uxth	r0, r0
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	40088000 	.word	0x40088000

00400fe0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400fe0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400fe2:	4770      	bx	lr

00400fe4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400fe4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400fe6:	4770      	bx	lr

00400fe8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fec:	4604      	mov	r4, r0
  400fee:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ff0:	4b0e      	ldr	r3, [pc, #56]	; (40102c <pio_handler_process+0x44>)
  400ff2:	4798      	blx	r3
  400ff4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ff6:	4620      	mov	r0, r4
  400ff8:	4b0d      	ldr	r3, [pc, #52]	; (401030 <pio_handler_process+0x48>)
  400ffa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ffc:	4005      	ands	r5, r0
  400ffe:	d013      	beq.n	401028 <pio_handler_process+0x40>
  401000:	4c0c      	ldr	r4, [pc, #48]	; (401034 <pio_handler_process+0x4c>)
  401002:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401006:	e003      	b.n	401010 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401008:	42b4      	cmp	r4, r6
  40100a:	d00d      	beq.n	401028 <pio_handler_process+0x40>
  40100c:	3410      	adds	r4, #16
		while (status != 0) {
  40100e:	b15d      	cbz	r5, 401028 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401010:	6820      	ldr	r0, [r4, #0]
  401012:	4540      	cmp	r0, r8
  401014:	d1f8      	bne.n	401008 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401016:	6861      	ldr	r1, [r4, #4]
  401018:	4229      	tst	r1, r5
  40101a:	d0f5      	beq.n	401008 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40101c:	68e3      	ldr	r3, [r4, #12]
  40101e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401020:	6863      	ldr	r3, [r4, #4]
  401022:	ea25 0503 	bic.w	r5, r5, r3
  401026:	e7ef      	b.n	401008 <pio_handler_process+0x20>
  401028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40102c:	00400fe1 	.word	0x00400fe1
  401030:	00400fe5 	.word	0x00400fe5
  401034:	20400a10 	.word	0x20400a10

00401038 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401038:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40103a:	210b      	movs	r1, #11
  40103c:	4801      	ldr	r0, [pc, #4]	; (401044 <PIOB_Handler+0xc>)
  40103e:	4b02      	ldr	r3, [pc, #8]	; (401048 <PIOB_Handler+0x10>)
  401040:	4798      	blx	r3
  401042:	bd08      	pop	{r3, pc}
  401044:	400e1000 	.word	0x400e1000
  401048:	00400fe9 	.word	0x00400fe9

0040104c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40104c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40104e:	2110      	movs	r1, #16
  401050:	4801      	ldr	r0, [pc, #4]	; (401058 <PIOD_Handler+0xc>)
  401052:	4b02      	ldr	r3, [pc, #8]	; (40105c <PIOD_Handler+0x10>)
  401054:	4798      	blx	r3
  401056:	bd08      	pop	{r3, pc}
  401058:	400e1400 	.word	0x400e1400
  40105c:	00400fe9 	.word	0x00400fe9

00401060 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401060:	b4f0      	push	{r4, r5, r6, r7}
  401062:	b08c      	sub	sp, #48	; 0x30
  401064:	4607      	mov	r7, r0
  401066:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401068:	ac01      	add	r4, sp, #4
  40106a:	4d11      	ldr	r5, [pc, #68]	; (4010b0 <pwm_clocks_generate+0x50>)
  40106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40107c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40107e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401080:	f852 0b04 	ldr.w	r0, [r2], #4
  401084:	fbb6 f0f0 	udiv	r0, r6, r0
  401088:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40108c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  401090:	d907      	bls.n	4010a2 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  401092:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401094:	2b0b      	cmp	r3, #11
  401096:	d1f3      	bne.n	401080 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401098:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  40109c:	b00c      	add	sp, #48	; 0x30
  40109e:	bcf0      	pop	{r4, r5, r6, r7}
  4010a0:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4010a2:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4010a4:	bf94      	ite	ls
  4010a6:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4010aa:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  4010ae:	e7f5      	b.n	40109c <pwm_clocks_generate+0x3c>
  4010b0:	00404c24 	.word	0x00404c24

004010b4 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4010b4:	b570      	push	{r4, r5, r6, lr}
  4010b6:	4606      	mov	r6, r0
  4010b8:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4010ba:	680c      	ldr	r4, [r1, #0]
  4010bc:	b144      	cbz	r4, 4010d0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4010be:	6889      	ldr	r1, [r1, #8]
  4010c0:	4620      	mov	r0, r4
  4010c2:	4b0c      	ldr	r3, [pc, #48]	; (4010f4 <pwm_init+0x40>)
  4010c4:	4798      	blx	r3
  4010c6:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4010c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4010cc:	4298      	cmp	r0, r3
  4010ce:	d00c      	beq.n	4010ea <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4010d0:	6868      	ldr	r0, [r5, #4]
  4010d2:	b140      	cbz	r0, 4010e6 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4010d4:	68a9      	ldr	r1, [r5, #8]
  4010d6:	4b07      	ldr	r3, [pc, #28]	; (4010f4 <pwm_init+0x40>)
  4010d8:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  4010da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4010de:	4298      	cmp	r0, r3
  4010e0:	d005      	beq.n	4010ee <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  4010e2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4010e6:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  4010e8:	2400      	movs	r4, #0
}
  4010ea:	4620      	mov	r0, r4
  4010ec:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  4010ee:	4604      	mov	r4, r0
  4010f0:	e7fb      	b.n	4010ea <pwm_init+0x36>
  4010f2:	bf00      	nop
  4010f4:	00401061 	.word	0x00401061

004010f8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4010f8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4010fa:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4010fc:	684b      	ldr	r3, [r1, #4]
  4010fe:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401102:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401104:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401106:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401108:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  40110a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40110c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  401110:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401112:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  401116:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401118:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  40111c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40111e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401122:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401126:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40112a:	68cb      	ldr	r3, [r1, #12]
  40112c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401130:	690b      	ldr	r3, [r1, #16]
  401132:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401136:	7d8b      	ldrb	r3, [r1, #22]
  401138:	b13b      	cbz	r3, 40114a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  40113a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40113c:	8b4b      	ldrh	r3, [r1, #26]
  40113e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401142:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  401146:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40114a:	6c85      	ldr	r5, [r0, #72]	; 0x48
  40114c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  401150:	4093      	lsls	r3, r2
  401152:	43db      	mvns	r3, r3
  401154:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  401156:	7fcc      	ldrb	r4, [r1, #31]
  401158:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  40115c:	7f8c      	ldrb	r4, [r1, #30]
  40115e:	4094      	lsls	r4, r2
  401160:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  401164:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401166:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401168:	6c44      	ldr	r4, [r0, #68]	; 0x44
  40116a:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  40116c:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401170:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401174:	f891 4020 	ldrb.w	r4, [r1, #32]
  401178:	4094      	lsls	r4, r2
  40117a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40117e:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401180:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401182:	2301      	movs	r3, #1
  401184:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  401186:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  40118a:	2c00      	cmp	r4, #0
  40118c:	d04f      	beq.n	40122e <pwm_channel_init+0x136>
		p_pwm->PWM_SCM |= channel;
  40118e:	6a04      	ldr	r4, [r0, #32]
  401190:	431c      	orrs	r4, r3
  401192:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  401194:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401198:	2c02      	cmp	r4, #2
  40119a:	d04d      	beq.n	401238 <pwm_channel_init+0x140>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  40119c:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  4011a0:	43dc      	mvns	r4, r3
  4011a2:	4025      	ands	r5, r4
  4011a4:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4011a8:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  4011ac:	2d01      	cmp	r5, #1
  4011ae:	d049      	beq.n	401244 <pwm_channel_init+0x14c>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  4011b0:	6e85      	ldr	r5, [r0, #104]	; 0x68
  4011b2:	402c      	ands	r4, r5
  4011b4:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  4011b6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4011ba:	2c02      	cmp	r4, #2
  4011bc:	d046      	beq.n	40124c <pwm_channel_init+0x154>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  4011be:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  4011c2:	041b      	lsls	r3, r3, #16
  4011c4:	43dc      	mvns	r4, r3
  4011c6:	4025      	ands	r5, r4
  4011c8:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4011cc:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  4011d0:	2d01      	cmp	r5, #1
  4011d2:	d042      	beq.n	40125a <pwm_channel_init+0x162>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  4011d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  4011d6:	401c      	ands	r4, r3
  4011d8:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4011da:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4011dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4011de:	24ff      	movs	r4, #255	; 0xff
  4011e0:	4094      	lsls	r4, r2
  4011e2:	ea23 0404 	bic.w	r4, r3, r4
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4011e6:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4011ea:	4093      	lsls	r3, r2
  4011ec:	4323      	orrs	r3, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4011ee:	66c3      	str	r3, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  4011f0:	b952      	cbnz	r2, 401208 <pwm_channel_init+0x110>
		if (p_channel->spread_spectrum_mode ==
  4011f2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  4011f6:	2b01      	cmp	r3, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  4011f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4011fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4011fe:	bf08      	it	eq
  401200:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401204:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  401208:	eb00 1042 	add.w	r0, r0, r2, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  40120c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  401210:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  401214:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  401218:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  40121c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  40121e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401222:	4313      	orrs	r3, r2
  401224:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  401228:	2000      	movs	r0, #0
  40122a:	bc70      	pop	{r4, r5, r6}
  40122c:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40122e:	6a04      	ldr	r4, [r0, #32]
  401230:	ea24 0403 	bic.w	r4, r4, r3
  401234:	6204      	str	r4, [r0, #32]
  401236:	e7ad      	b.n	401194 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  401238:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40123c:	431c      	orrs	r4, r3
  40123e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  401242:	e7b8      	b.n	4011b6 <pwm_channel_init+0xbe>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  401244:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401246:	431c      	orrs	r4, r3
  401248:	6684      	str	r4, [r0, #104]	; 0x68
  40124a:	e7b4      	b.n	4011b6 <pwm_channel_init+0xbe>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  40124c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401250:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  401254:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  401258:	e7bf      	b.n	4011da <pwm_channel_init+0xe2>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  40125a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40125c:	4323      	orrs	r3, r4
  40125e:	6683      	str	r3, [r0, #104]	; 0x68
  401260:	e7bb      	b.n	4011da <pwm_channel_init+0xe2>

00401262 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  401262:	2301      	movs	r3, #1
  401264:	fa03 f101 	lsl.w	r1, r3, r1
  401268:	6041      	str	r1, [r0, #4]
  40126a:	4770      	bx	lr

0040126c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  40126c:	2301      	movs	r3, #1
  40126e:	fa03 f101 	lsl.w	r1, r3, r1
  401272:	6081      	str	r1, [r0, #8]
  401274:	4770      	bx	lr

00401276 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  401276:	3210      	adds	r2, #16
  401278:	2301      	movs	r3, #1
  40127a:	fa03 f202 	lsl.w	r2, r3, r2
  40127e:	fa03 f101 	lsl.w	r1, r3, r1
  401282:	430a      	orrs	r2, r1
  401284:	6142      	str	r2, [r0, #20]
  401286:	4770      	bx	lr

00401288 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
  401288:	4a02      	ldr	r2, [pc, #8]	; (401294 <SysTick_Handler+0xc>)
  40128a:	6813      	ldr	r3, [r2, #0]
  40128c:	3301      	adds	r3, #1
  40128e:	6013      	str	r3, [r2, #0]
  401290:	4770      	bx	lr
  401292:	bf00      	nop
  401294:	20400a80 	.word	0x20400a80

00401298 <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  401298:	2200      	movs	r2, #0
  40129a:	4b06      	ldr	r3, [pc, #24]	; (4012b4 <time_tick_init+0x1c>)
  40129c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40129e:	4b06      	ldr	r3, [pc, #24]	; (4012b8 <time_tick_init+0x20>)
  4012a0:	4906      	ldr	r1, [pc, #24]	; (4012bc <time_tick_init+0x24>)
  4012a2:	6059      	str	r1, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4012a4:	20e0      	movs	r0, #224	; 0xe0
  4012a6:	4906      	ldr	r1, [pc, #24]	; (4012c0 <time_tick_init+0x28>)
  4012a8:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4012ae:	2207      	movs	r2, #7
  4012b0:	601a      	str	r2, [r3, #0]
  4012b2:	4770      	bx	lr
  4012b4:	20400a80 	.word	0x20400a80
  4012b8:	e000e010 	.word	0xe000e010
  4012bc:	0002327f 	.word	0x0002327f
  4012c0:	e000ed00 	.word	0xe000ed00

004012c4 <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  4012c4:	4b01      	ldr	r3, [pc, #4]	; (4012cc <time_tick_get+0x8>)
  4012c6:	6818      	ldr	r0, [r3, #0]
}
  4012c8:	4770      	bx	lr
  4012ca:	bf00      	nop
  4012cc:	20400a80 	.word	0x20400a80

004012d0 <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
  4012d0:	4281      	cmp	r1, r0
  4012d2:	d202      	bcs.n	4012da <time_tick_calc_delay+0xa>
		return (tick_end - tick_start) * (1000 / TICK_US);
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  4012d4:	1a09      	subs	r1, r1, r0
  4012d6:	1e48      	subs	r0, r1, #1
	}
}
  4012d8:	4770      	bx	lr
		return (tick_end - tick_start) * (1000 / TICK_US);
  4012da:	1a08      	subs	r0, r1, r0
  4012dc:	4770      	bx	lr
	...

004012e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4012e0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4012e2:	4810      	ldr	r0, [pc, #64]	; (401324 <sysclk_init+0x44>)
  4012e4:	4b10      	ldr	r3, [pc, #64]	; (401328 <sysclk_init+0x48>)
  4012e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4012e8:	213e      	movs	r1, #62	; 0x3e
  4012ea:	2000      	movs	r0, #0
  4012ec:	4b0f      	ldr	r3, [pc, #60]	; (40132c <sysclk_init+0x4c>)
  4012ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4012f0:	4c0f      	ldr	r4, [pc, #60]	; (401330 <sysclk_init+0x50>)
  4012f2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4012f4:	2800      	cmp	r0, #0
  4012f6:	d0fc      	beq.n	4012f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4012f8:	4b0e      	ldr	r3, [pc, #56]	; (401334 <sysclk_init+0x54>)
  4012fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4012fc:	4a0e      	ldr	r2, [pc, #56]	; (401338 <sysclk_init+0x58>)
  4012fe:	4b0f      	ldr	r3, [pc, #60]	; (40133c <sysclk_init+0x5c>)
  401300:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401302:	4c0f      	ldr	r4, [pc, #60]	; (401340 <sysclk_init+0x60>)
  401304:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401306:	2800      	cmp	r0, #0
  401308:	d0fc      	beq.n	401304 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40130a:	2002      	movs	r0, #2
  40130c:	4b0d      	ldr	r3, [pc, #52]	; (401344 <sysclk_init+0x64>)
  40130e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401310:	2000      	movs	r0, #0
  401312:	4b0d      	ldr	r3, [pc, #52]	; (401348 <sysclk_init+0x68>)
  401314:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401316:	4b0d      	ldr	r3, [pc, #52]	; (40134c <sysclk_init+0x6c>)
  401318:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40131a:	480d      	ldr	r0, [pc, #52]	; (401350 <sysclk_init+0x70>)
  40131c:	4b02      	ldr	r3, [pc, #8]	; (401328 <sysclk_init+0x48>)
  40131e:	4798      	blx	r3
  401320:	bd10      	pop	{r4, pc}
  401322:	bf00      	nop
  401324:	11e1a300 	.word	0x11e1a300
  401328:	004017a5 	.word	0x004017a5
  40132c:	004013f1 	.word	0x004013f1
  401330:	00401445 	.word	0x00401445
  401334:	00401455 	.word	0x00401455
  401338:	200b3f01 	.word	0x200b3f01
  40133c:	400e0600 	.word	0x400e0600
  401340:	00401465 	.word	0x00401465
  401344:	00401355 	.word	0x00401355
  401348:	0040138d 	.word	0x0040138d
  40134c:	00401699 	.word	0x00401699
  401350:	08954400 	.word	0x08954400

00401354 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401354:	2803      	cmp	r0, #3
  401356:	d011      	beq.n	40137c <pmc_mck_set_division+0x28>
  401358:	2804      	cmp	r0, #4
  40135a:	d012      	beq.n	401382 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40135c:	2802      	cmp	r0, #2
  40135e:	bf0c      	ite	eq
  401360:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401364:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401366:	4a08      	ldr	r2, [pc, #32]	; (401388 <pmc_mck_set_division+0x34>)
  401368:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40136a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40136e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401370:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401372:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401374:	f013 0f08 	tst.w	r3, #8
  401378:	d0fb      	beq.n	401372 <pmc_mck_set_division+0x1e>
}
  40137a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40137c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401380:	e7f1      	b.n	401366 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401382:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401386:	e7ee      	b.n	401366 <pmc_mck_set_division+0x12>
  401388:	400e0600 	.word	0x400e0600

0040138c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40138c:	4a17      	ldr	r2, [pc, #92]	; (4013ec <pmc_switch_mck_to_pllack+0x60>)
  40138e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401394:	4318      	orrs	r0, r3
  401396:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401398:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40139a:	f013 0f08 	tst.w	r3, #8
  40139e:	d10a      	bne.n	4013b6 <pmc_switch_mck_to_pllack+0x2a>
  4013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013a4:	4911      	ldr	r1, [pc, #68]	; (4013ec <pmc_switch_mck_to_pllack+0x60>)
  4013a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013a8:	f012 0f08 	tst.w	r2, #8
  4013ac:	d103      	bne.n	4013b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013ae:	3b01      	subs	r3, #1
  4013b0:	d1f9      	bne.n	4013a6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4013b2:	2001      	movs	r0, #1
  4013b4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013b6:	4a0d      	ldr	r2, [pc, #52]	; (4013ec <pmc_switch_mck_to_pllack+0x60>)
  4013b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ba:	f023 0303 	bic.w	r3, r3, #3
  4013be:	f043 0302 	orr.w	r3, r3, #2
  4013c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013c6:	f013 0f08 	tst.w	r3, #8
  4013ca:	d10a      	bne.n	4013e2 <pmc_switch_mck_to_pllack+0x56>
  4013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013d0:	4906      	ldr	r1, [pc, #24]	; (4013ec <pmc_switch_mck_to_pllack+0x60>)
  4013d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013d4:	f012 0f08 	tst.w	r2, #8
  4013d8:	d105      	bne.n	4013e6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013da:	3b01      	subs	r3, #1
  4013dc:	d1f9      	bne.n	4013d2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4013de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4013e0:	4770      	bx	lr
	return 0;
  4013e2:	2000      	movs	r0, #0
  4013e4:	4770      	bx	lr
  4013e6:	2000      	movs	r0, #0
  4013e8:	4770      	bx	lr
  4013ea:	bf00      	nop
  4013ec:	400e0600 	.word	0x400e0600

004013f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4013f0:	b9a0      	cbnz	r0, 40141c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4013f2:	480e      	ldr	r0, [pc, #56]	; (40142c <pmc_switch_mainck_to_xtal+0x3c>)
  4013f4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4013f6:	0209      	lsls	r1, r1, #8
  4013f8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4013fa:	4a0d      	ldr	r2, [pc, #52]	; (401430 <pmc_switch_mainck_to_xtal+0x40>)
  4013fc:	401a      	ands	r2, r3
  4013fe:	4b0d      	ldr	r3, [pc, #52]	; (401434 <pmc_switch_mainck_to_xtal+0x44>)
  401400:	4313      	orrs	r3, r2
  401402:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401404:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401406:	4602      	mov	r2, r0
  401408:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40140a:	f013 0f01 	tst.w	r3, #1
  40140e:	d0fb      	beq.n	401408 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401410:	4a06      	ldr	r2, [pc, #24]	; (40142c <pmc_switch_mainck_to_xtal+0x3c>)
  401412:	6a11      	ldr	r1, [r2, #32]
  401414:	4b08      	ldr	r3, [pc, #32]	; (401438 <pmc_switch_mainck_to_xtal+0x48>)
  401416:	430b      	orrs	r3, r1
  401418:	6213      	str	r3, [r2, #32]
  40141a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40141c:	4903      	ldr	r1, [pc, #12]	; (40142c <pmc_switch_mainck_to_xtal+0x3c>)
  40141e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401420:	4a06      	ldr	r2, [pc, #24]	; (40143c <pmc_switch_mainck_to_xtal+0x4c>)
  401422:	401a      	ands	r2, r3
  401424:	4b06      	ldr	r3, [pc, #24]	; (401440 <pmc_switch_mainck_to_xtal+0x50>)
  401426:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401428:	620b      	str	r3, [r1, #32]
  40142a:	4770      	bx	lr
  40142c:	400e0600 	.word	0x400e0600
  401430:	ffc8fffc 	.word	0xffc8fffc
  401434:	00370001 	.word	0x00370001
  401438:	01370000 	.word	0x01370000
  40143c:	fec8fffc 	.word	0xfec8fffc
  401440:	01370002 	.word	0x01370002

00401444 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401444:	4b02      	ldr	r3, [pc, #8]	; (401450 <pmc_osc_is_ready_mainck+0xc>)
  401446:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401448:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40144c:	4770      	bx	lr
  40144e:	bf00      	nop
  401450:	400e0600 	.word	0x400e0600

00401454 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401454:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401458:	4b01      	ldr	r3, [pc, #4]	; (401460 <pmc_disable_pllack+0xc>)
  40145a:	629a      	str	r2, [r3, #40]	; 0x28
  40145c:	4770      	bx	lr
  40145e:	bf00      	nop
  401460:	400e0600 	.word	0x400e0600

00401464 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401464:	4b02      	ldr	r3, [pc, #8]	; (401470 <pmc_is_locked_pllack+0xc>)
  401466:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401468:	f000 0002 	and.w	r0, r0, #2
  40146c:	4770      	bx	lr
  40146e:	bf00      	nop
  401470:	400e0600 	.word	0x400e0600

00401474 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401474:	283f      	cmp	r0, #63	; 0x3f
  401476:	d81e      	bhi.n	4014b6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401478:	281f      	cmp	r0, #31
  40147a:	d80c      	bhi.n	401496 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40147c:	4b11      	ldr	r3, [pc, #68]	; (4014c4 <pmc_enable_periph_clk+0x50>)
  40147e:	699a      	ldr	r2, [r3, #24]
  401480:	2301      	movs	r3, #1
  401482:	4083      	lsls	r3, r0
  401484:	4393      	bics	r3, r2
  401486:	d018      	beq.n	4014ba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401488:	2301      	movs	r3, #1
  40148a:	fa03 f000 	lsl.w	r0, r3, r0
  40148e:	4b0d      	ldr	r3, [pc, #52]	; (4014c4 <pmc_enable_periph_clk+0x50>)
  401490:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401492:	2000      	movs	r0, #0
  401494:	4770      	bx	lr
		ul_id -= 32;
  401496:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401498:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <pmc_enable_periph_clk+0x50>)
  40149a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40149e:	2301      	movs	r3, #1
  4014a0:	4083      	lsls	r3, r0
  4014a2:	4393      	bics	r3, r2
  4014a4:	d00b      	beq.n	4014be <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4014a6:	2301      	movs	r3, #1
  4014a8:	fa03 f000 	lsl.w	r0, r3, r0
  4014ac:	4b05      	ldr	r3, [pc, #20]	; (4014c4 <pmc_enable_periph_clk+0x50>)
  4014ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4014b2:	2000      	movs	r0, #0
  4014b4:	4770      	bx	lr
		return 1;
  4014b6:	2001      	movs	r0, #1
  4014b8:	4770      	bx	lr
	return 0;
  4014ba:	2000      	movs	r0, #0
  4014bc:	4770      	bx	lr
  4014be:	2000      	movs	r0, #0
}
  4014c0:	4770      	bx	lr
  4014c2:	bf00      	nop
  4014c4:	400e0600 	.word	0x400e0600

004014c8 <xdmac_configure_transfer>:
  4014c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4014cc:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  4014ce:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  4014d0:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  4014d2:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  4014d4:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  4014d6:	6813      	ldr	r3, [r2, #0]
  4014d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4014dc:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  4014de:	6913      	ldr	r3, [r2, #16]
  4014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4014e4:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  4014e6:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4014e8:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4014ea:	6993      	ldr	r3, [r2, #24]
  4014ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4014f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4014f4:	69d3      	ldr	r3, [r2, #28]
  4014f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4014fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4014fe:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401500:	678b      	str	r3, [r1, #120]	; 0x78
  401502:	4770      	bx	lr

00401504 <board_init>:
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401504:	4b33      	ldr	r3, [pc, #204]	; (4015d4 <board_init+0xd0>)
  401506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40150a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40150c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401510:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401512:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401518:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40151a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  40151e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  401520:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401522:	4311      	orrs	r1, r2
  401524:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401526:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40152c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40152e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401532:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401534:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40153a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40153c:	4311      	orrs	r1, r2
  40153e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401540:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401542:	4311      	orrs	r1, r2
  401544:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401546:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40154c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40154e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401552:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401554:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40155a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40155c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  401560:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401562:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401564:	4311      	orrs	r1, r2
  401566:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401568:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40156a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40156e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401574:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401576:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40157c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40157e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401582:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401584:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401586:	4311      	orrs	r1, r2
  401588:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40158a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40158c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401590:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401596:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401598:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40159a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40159e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4015a0:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  4015a4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4015a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4015a8:	4311      	orrs	r1, r2
  4015aa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015ac:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4015ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4015b2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4015b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4015b8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015ba:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4015c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4015c2:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4015c6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4015c8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4015ca:	4311      	orrs	r1, r2
  4015cc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4015ce:	605a      	str	r2, [r3, #4]
  4015d0:	4770      	bx	lr
  4015d2:	bf00      	nop
  4015d4:	400e0e00 	.word	0x400e0e00

004015d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015d8:	e7fe      	b.n	4015d8 <Dummy_Handler>
	...

004015dc <Reset_Handler>:
{
  4015dc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4015de:	4b23      	ldr	r3, [pc, #140]	; (40166c <Reset_Handler+0x90>)
  4015e0:	4a23      	ldr	r2, [pc, #140]	; (401670 <Reset_Handler+0x94>)
  4015e2:	429a      	cmp	r2, r3
  4015e4:	d010      	beq.n	401608 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4015e6:	4b23      	ldr	r3, [pc, #140]	; (401674 <Reset_Handler+0x98>)
  4015e8:	4a20      	ldr	r2, [pc, #128]	; (40166c <Reset_Handler+0x90>)
  4015ea:	429a      	cmp	r2, r3
  4015ec:	d20c      	bcs.n	401608 <Reset_Handler+0x2c>
  4015ee:	3b01      	subs	r3, #1
  4015f0:	1a9b      	subs	r3, r3, r2
  4015f2:	f023 0303 	bic.w	r3, r3, #3
  4015f6:	3304      	adds	r3, #4
  4015f8:	4413      	add	r3, r2
  4015fa:	491d      	ldr	r1, [pc, #116]	; (401670 <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
  4015fc:	f851 0b04 	ldr.w	r0, [r1], #4
  401600:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401604:	429a      	cmp	r2, r3
  401606:	d1f9      	bne.n	4015fc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  401608:	4b1b      	ldr	r3, [pc, #108]	; (401678 <Reset_Handler+0x9c>)
  40160a:	4a1c      	ldr	r2, [pc, #112]	; (40167c <Reset_Handler+0xa0>)
  40160c:	429a      	cmp	r2, r3
  40160e:	d20a      	bcs.n	401626 <Reset_Handler+0x4a>
  401610:	3b01      	subs	r3, #1
  401612:	1a9b      	subs	r3, r3, r2
  401614:	f023 0303 	bic.w	r3, r3, #3
  401618:	3304      	adds	r3, #4
  40161a:	4413      	add	r3, r2
                *pDest++ = 0;
  40161c:	2100      	movs	r1, #0
  40161e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401622:	4293      	cmp	r3, r2
  401624:	d1fb      	bne.n	40161e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401626:	4a16      	ldr	r2, [pc, #88]	; (401680 <Reset_Handler+0xa4>)
  401628:	4b16      	ldr	r3, [pc, #88]	; (401684 <Reset_Handler+0xa8>)
  40162a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40162e:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401630:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  401634:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401636:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40163a:	2100      	movs	r1, #0
  40163c:	4a12      	ldr	r2, [pc, #72]	; (401688 <Reset_Handler+0xac>)
  40163e:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401640:	4912      	ldr	r1, [pc, #72]	; (40168c <Reset_Handler+0xb0>)
  401642:	680a      	ldr	r2, [r1, #0]
  401644:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  401648:	600a      	str	r2, [r1, #0]
  __ASM volatile ("dsb");
  40164a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40164e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401652:	b92b      	cbnz	r3, 401660 <Reset_Handler+0x84>
		cpu_irq_enable();
  401654:	2201      	movs	r2, #1
  401656:	4b0c      	ldr	r3, [pc, #48]	; (401688 <Reset_Handler+0xac>)
  401658:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40165a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40165e:	b662      	cpsie	i
        __libc_init_array();
  401660:	4b0b      	ldr	r3, [pc, #44]	; (401690 <Reset_Handler+0xb4>)
  401662:	4798      	blx	r3
        main();
  401664:	4b0b      	ldr	r3, [pc, #44]	; (401694 <Reset_Handler+0xb8>)
  401666:	4798      	blx	r3
  401668:	e7fe      	b.n	401668 <Reset_Handler+0x8c>
  40166a:	bf00      	nop
  40166c:	20400000 	.word	0x20400000
  401670:	00404e00 	.word	0x00404e00
  401674:	204009c0 	.word	0x204009c0
  401678:	20453574 	.word	0x20453574
  40167c:	204009c0 	.word	0x204009c0
  401680:	e000ed00 	.word	0xe000ed00
  401684:	00400000 	.word	0x00400000
  401688:	2040000a 	.word	0x2040000a
  40168c:	e000ed88 	.word	0xe000ed88
  401690:	00401dc9 	.word	0x00401dc9
  401694:	00401c11 	.word	0x00401c11

00401698 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401698:	4b3b      	ldr	r3, [pc, #236]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40169c:	f003 0303 	and.w	r3, r3, #3
  4016a0:	2b01      	cmp	r3, #1
  4016a2:	d01d      	beq.n	4016e0 <SystemCoreClockUpdate+0x48>
  4016a4:	b183      	cbz	r3, 4016c8 <SystemCoreClockUpdate+0x30>
  4016a6:	2b02      	cmp	r3, #2
  4016a8:	d036      	beq.n	401718 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4016aa:	4b37      	ldr	r3, [pc, #220]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016b2:	2b70      	cmp	r3, #112	; 0x70
  4016b4:	d05f      	beq.n	401776 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016b6:	4b34      	ldr	r3, [pc, #208]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4016ba:	4934      	ldr	r1, [pc, #208]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016bc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4016c0:	680b      	ldr	r3, [r1, #0]
  4016c2:	40d3      	lsrs	r3, r2
  4016c4:	600b      	str	r3, [r1, #0]
  4016c6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4016c8:	4b31      	ldr	r3, [pc, #196]	; (401790 <SystemCoreClockUpdate+0xf8>)
  4016ca:	695b      	ldr	r3, [r3, #20]
  4016cc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016d0:	bf14      	ite	ne
  4016d2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016d6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4016da:	4b2c      	ldr	r3, [pc, #176]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016dc:	601a      	str	r2, [r3, #0]
  4016de:	e7e4      	b.n	4016aa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016e0:	4b29      	ldr	r3, [pc, #164]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016e2:	6a1b      	ldr	r3, [r3, #32]
  4016e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016e8:	d003      	beq.n	4016f2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4016ea:	4a2a      	ldr	r2, [pc, #168]	; (401794 <SystemCoreClockUpdate+0xfc>)
  4016ec:	4b27      	ldr	r3, [pc, #156]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016ee:	601a      	str	r2, [r3, #0]
  4016f0:	e7db      	b.n	4016aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016f2:	4a29      	ldr	r2, [pc, #164]	; (401798 <SystemCoreClockUpdate+0x100>)
  4016f4:	4b25      	ldr	r3, [pc, #148]	; (40178c <SystemCoreClockUpdate+0xf4>)
  4016f6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016f8:	4b23      	ldr	r3, [pc, #140]	; (401788 <SystemCoreClockUpdate+0xf0>)
  4016fa:	6a1b      	ldr	r3, [r3, #32]
  4016fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401700:	2b10      	cmp	r3, #16
  401702:	d005      	beq.n	401710 <SystemCoreClockUpdate+0x78>
  401704:	2b20      	cmp	r3, #32
  401706:	d1d0      	bne.n	4016aa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401708:	4a22      	ldr	r2, [pc, #136]	; (401794 <SystemCoreClockUpdate+0xfc>)
  40170a:	4b20      	ldr	r3, [pc, #128]	; (40178c <SystemCoreClockUpdate+0xf4>)
  40170c:	601a      	str	r2, [r3, #0]
          break;
  40170e:	e7cc      	b.n	4016aa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401710:	4a22      	ldr	r2, [pc, #136]	; (40179c <SystemCoreClockUpdate+0x104>)
  401712:	4b1e      	ldr	r3, [pc, #120]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401714:	601a      	str	r2, [r3, #0]
          break;
  401716:	e7c8      	b.n	4016aa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401718:	4b1b      	ldr	r3, [pc, #108]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40171a:	6a1b      	ldr	r3, [r3, #32]
  40171c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401720:	d016      	beq.n	401750 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401722:	4a1c      	ldr	r2, [pc, #112]	; (401794 <SystemCoreClockUpdate+0xfc>)
  401724:	4b19      	ldr	r3, [pc, #100]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401726:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401728:	4b17      	ldr	r3, [pc, #92]	; (401788 <SystemCoreClockUpdate+0xf0>)
  40172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40172c:	f003 0303 	and.w	r3, r3, #3
  401730:	2b02      	cmp	r3, #2
  401732:	d1ba      	bne.n	4016aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401734:	4a14      	ldr	r2, [pc, #80]	; (401788 <SystemCoreClockUpdate+0xf0>)
  401736:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401738:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40173a:	4814      	ldr	r0, [pc, #80]	; (40178c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40173c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401740:	6803      	ldr	r3, [r0, #0]
  401742:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401746:	b2d2      	uxtb	r2, r2
  401748:	fbb3 f3f2 	udiv	r3, r3, r2
  40174c:	6003      	str	r3, [r0, #0]
  40174e:	e7ac      	b.n	4016aa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401750:	4a11      	ldr	r2, [pc, #68]	; (401798 <SystemCoreClockUpdate+0x100>)
  401752:	4b0e      	ldr	r3, [pc, #56]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401754:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401756:	4b0c      	ldr	r3, [pc, #48]	; (401788 <SystemCoreClockUpdate+0xf0>)
  401758:	6a1b      	ldr	r3, [r3, #32]
  40175a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40175e:	2b10      	cmp	r3, #16
  401760:	d005      	beq.n	40176e <SystemCoreClockUpdate+0xd6>
  401762:	2b20      	cmp	r3, #32
  401764:	d1e0      	bne.n	401728 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401766:	4a0b      	ldr	r2, [pc, #44]	; (401794 <SystemCoreClockUpdate+0xfc>)
  401768:	4b08      	ldr	r3, [pc, #32]	; (40178c <SystemCoreClockUpdate+0xf4>)
  40176a:	601a      	str	r2, [r3, #0]
          break;
  40176c:	e7dc      	b.n	401728 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40176e:	4a0b      	ldr	r2, [pc, #44]	; (40179c <SystemCoreClockUpdate+0x104>)
  401770:	4b06      	ldr	r3, [pc, #24]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401772:	601a      	str	r2, [r3, #0]
          break;
  401774:	e7d8      	b.n	401728 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401776:	4a05      	ldr	r2, [pc, #20]	; (40178c <SystemCoreClockUpdate+0xf4>)
  401778:	6813      	ldr	r3, [r2, #0]
  40177a:	4909      	ldr	r1, [pc, #36]	; (4017a0 <SystemCoreClockUpdate+0x108>)
  40177c:	fba1 1303 	umull	r1, r3, r1, r3
  401780:	085b      	lsrs	r3, r3, #1
  401782:	6013      	str	r3, [r2, #0]
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0600 	.word	0x400e0600
  40178c:	2040000c 	.word	0x2040000c
  401790:	400e1810 	.word	0x400e1810
  401794:	00b71b00 	.word	0x00b71b00
  401798:	003d0900 	.word	0x003d0900
  40179c:	007a1200 	.word	0x007a1200
  4017a0:	aaaaaaab 	.word	0xaaaaaaab

004017a4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4017a4:	4b12      	ldr	r3, [pc, #72]	; (4017f0 <system_init_flash+0x4c>)
  4017a6:	4298      	cmp	r0, r3
  4017a8:	d911      	bls.n	4017ce <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4017aa:	4b12      	ldr	r3, [pc, #72]	; (4017f4 <system_init_flash+0x50>)
  4017ac:	4298      	cmp	r0, r3
  4017ae:	d913      	bls.n	4017d8 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4017b0:	4b11      	ldr	r3, [pc, #68]	; (4017f8 <system_init_flash+0x54>)
  4017b2:	4298      	cmp	r0, r3
  4017b4:	d914      	bls.n	4017e0 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4017b6:	4b11      	ldr	r3, [pc, #68]	; (4017fc <system_init_flash+0x58>)
  4017b8:	4298      	cmp	r0, r3
  4017ba:	d915      	bls.n	4017e8 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4017bc:	4b10      	ldr	r3, [pc, #64]	; (401800 <system_init_flash+0x5c>)
  4017be:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017c0:	bf94      	ite	ls
  4017c2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017c6:	4a0f      	ldrhi	r2, [pc, #60]	; (401804 <system_init_flash+0x60>)
  4017c8:	4b0f      	ldr	r3, [pc, #60]	; (401808 <system_init_flash+0x64>)
  4017ca:	601a      	str	r2, [r3, #0]
  4017cc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017d2:	4b0d      	ldr	r3, [pc, #52]	; (401808 <system_init_flash+0x64>)
  4017d4:	601a      	str	r2, [r3, #0]
  4017d6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4017d8:	4a0c      	ldr	r2, [pc, #48]	; (40180c <system_init_flash+0x68>)
  4017da:	4b0b      	ldr	r3, [pc, #44]	; (401808 <system_init_flash+0x64>)
  4017dc:	601a      	str	r2, [r3, #0]
  4017de:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017e0:	4a0b      	ldr	r2, [pc, #44]	; (401810 <system_init_flash+0x6c>)
  4017e2:	4b09      	ldr	r3, [pc, #36]	; (401808 <system_init_flash+0x64>)
  4017e4:	601a      	str	r2, [r3, #0]
  4017e6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017e8:	4a0a      	ldr	r2, [pc, #40]	; (401814 <system_init_flash+0x70>)
  4017ea:	4b07      	ldr	r3, [pc, #28]	; (401808 <system_init_flash+0x64>)
  4017ec:	601a      	str	r2, [r3, #0]
  4017ee:	4770      	bx	lr
  4017f0:	01312cff 	.word	0x01312cff
  4017f4:	026259ff 	.word	0x026259ff
  4017f8:	039386ff 	.word	0x039386ff
  4017fc:	04c4b3ff 	.word	0x04c4b3ff
  401800:	05f5e0ff 	.word	0x05f5e0ff
  401804:	04000500 	.word	0x04000500
  401808:	400e0c00 	.word	0x400e0c00
  40180c:	04000100 	.word	0x04000100
  401810:	04000200 	.word	0x04000200
  401814:	04000300 	.word	0x04000300

00401818 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401818:	4b0a      	ldr	r3, [pc, #40]	; (401844 <_sbrk+0x2c>)
  40181a:	681b      	ldr	r3, [r3, #0]
  40181c:	b153      	cbz	r3, 401834 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40181e:	4b09      	ldr	r3, [pc, #36]	; (401844 <_sbrk+0x2c>)
  401820:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401822:	181a      	adds	r2, r3, r0
  401824:	4908      	ldr	r1, [pc, #32]	; (401848 <_sbrk+0x30>)
  401826:	4291      	cmp	r1, r2
  401828:	db08      	blt.n	40183c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40182a:	4610      	mov	r0, r2
  40182c:	4a05      	ldr	r2, [pc, #20]	; (401844 <_sbrk+0x2c>)
  40182e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401830:	4618      	mov	r0, r3
  401832:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401834:	4a05      	ldr	r2, [pc, #20]	; (40184c <_sbrk+0x34>)
  401836:	4b03      	ldr	r3, [pc, #12]	; (401844 <_sbrk+0x2c>)
  401838:	601a      	str	r2, [r3, #0]
  40183a:	e7f0      	b.n	40181e <_sbrk+0x6>
		return (caddr_t) -1;	
  40183c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401840:	4770      	bx	lr
  401842:	bf00      	nop
  401844:	20400a84 	.word	0x20400a84
  401848:	2045fffc 	.word	0x2045fffc
  40184c:	20455778 	.word	0x20455778

00401850 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401850:	f04f 30ff 	mov.w	r0, #4294967295
  401854:	4770      	bx	lr

00401856 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40185a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40185c:	2000      	movs	r0, #0
  40185e:	4770      	bx	lr

00401860 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401860:	2001      	movs	r0, #1
  401862:	4770      	bx	lr

00401864 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401864:	2000      	movs	r0, #0
  401866:	4770      	bx	lr

00401868 <enableSourceClk>:
		base->PIO_PUDR = mask;
  401868:	4b0e      	ldr	r3, [pc, #56]	; (4018a4 <enableSourceClk+0x3c>)
  40186a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40186e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401874:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401876:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40187c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40187e:	4311      	orrs	r1, r2
  401880:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401882:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401884:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  401888:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40188a:	605a      	str	r2, [r3, #4]
	//Sets PCK1 as clock output using Main Clocks
	//pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);//Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  40188c:	4a06      	ldr	r2, [pc, #24]	; (4018a8 <enableSourceClk+0x40>)
  40188e:	f44f 7300 	mov.w	r3, #512	; 0x200
  401892:	6013      	str	r3, [r2, #0]
	#endif
	#ifdef EV76C454_SUBSAMP //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(2); //Should make output = 48MHz
	#endif
	#ifdef EV76C541 //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 24MHz. Sensor divids by 4
  401894:	6c53      	ldr	r3, [r2, #68]	; 0x44
  401896:	f023 0357 	bic.w	r3, r3, #87	; 0x57
  40189a:	f043 0352 	orr.w	r3, r3, #82	; 0x52
  40189e:	6453      	str	r3, [r2, #68]	; 0x44
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	400e0e00 	.word	0x400e0e00
  4018a8:	400e0600 	.word	0x400e0600

004018ac <imagingSensorStartDMA>:

void imagingSensorStartDMA() {
	
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  4018ac:	4b23      	ldr	r3, [pc, #140]	; (40193c <imagingSensorStartDMA+0x90>)
  4018ae:	2202      	movs	r2, #2
  4018b0:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  4018b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  4018b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  4018b8:	4a21      	ldr	r2, [pc, #132]	; (401940 <imagingSensorStartDMA+0x94>)
  4018ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			break;
	}
	#endif

	#ifdef EV76C541
	switch(frameNumber%3){
  4018be:	4b21      	ldr	r3, [pc, #132]	; (401944 <imagingSensorStartDMA+0x98>)
  4018c0:	681a      	ldr	r2, [r3, #0]
  4018c2:	4b21      	ldr	r3, [pc, #132]	; (401948 <imagingSensorStartDMA+0x9c>)
  4018c4:	fba3 1302 	umull	r1, r3, r3, r2
  4018c8:	085b      	lsrs	r3, r3, #1
  4018ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4018ce:	1ad3      	subs	r3, r2, r3
  4018d0:	2b01      	cmp	r3, #1
  4018d2:	d029      	beq.n	401928 <imagingSensorStartDMA+0x7c>
  4018d4:	b31b      	cbz	r3, 40191e <imagingSensorStartDMA+0x72>
  4018d6:	2b02      	cmp	r3, #2
  4018d8:	d02b      	beq.n	401932 <imagingSensorStartDMA+0x86>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
		break;
	}
	#endif

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  4018da:	4b18      	ldr	r3, [pc, #96]	; (40193c <imagingSensorStartDMA+0x90>)
  4018dc:	f44f 42a5 	mov.w	r2, #21120	; 0x5280
  4018e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  4018e4:	4a19      	ldr	r2, [pc, #100]	; (40194c <imagingSensorStartDMA+0xa0>)
  4018e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  4018ea:	2200      	movs	r2, #0
  4018ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  4018f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  4018f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  4018f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  4018fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  401900:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  401904:	f042 0201 	orr.w	r2, r2, #1
  401908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  40190c:	68da      	ldr	r2, [r3, #12]
  40190e:	f042 0202 	orr.w	r2, r2, #2
  401912:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  401914:	69da      	ldr	r2, [r3, #28]
  401916:	f042 0202 	orr.w	r2, r2, #2
  40191a:	61da      	str	r2, [r3, #28]
  40191c:	4770      	bx	lr
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer0;
  40191e:	4b07      	ldr	r3, [pc, #28]	; (40193c <imagingSensorStartDMA+0x90>)
  401920:	4a0b      	ldr	r2, [pc, #44]	; (401950 <imagingSensorStartDMA+0xa4>)
  401922:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  401926:	e7d8      	b.n	4018da <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer1;
  401928:	4b04      	ldr	r3, [pc, #16]	; (40193c <imagingSensorStartDMA+0x90>)
  40192a:	4a0a      	ldr	r2, [pc, #40]	; (401954 <imagingSensorStartDMA+0xa8>)
  40192c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  401930:	e7d3      	b.n	4018da <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
  401932:	4b02      	ldr	r3, [pc, #8]	; (40193c <imagingSensorStartDMA+0x90>)
  401934:	4a08      	ldr	r2, [pc, #32]	; (401958 <imagingSensorStartDMA+0xac>)
  401936:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  40193a:	e7ce      	b.n	4018da <imagingSensorStartDMA+0x2e>
  40193c:	40078000 	.word	0x40078000
  401940:	400e0f68 	.word	0x400e0f68
  401944:	20400a8c 	.word	0x20400a8c
  401948:	aaaaaaab 	.word	0xaaaaaaab
  40194c:	22043001 	.word	0x22043001
  401950:	20415490 	.word	0x20415490
  401954:	20429e90 	.word	0x20429e90
  401958:	2043e890 	.word	0x2043e890

0040195c <imagingSensorCaptureEnable>:
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];


}
void imagingSensorCaptureEnable() {
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN ;
  40195c:	4a03      	ldr	r2, [pc, #12]	; (40196c <imagingSensorCaptureEnable+0x10>)
  40195e:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
  401962:	f043 0301 	orr.w	r3, r3, #1
  401966:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  40196a:	4770      	bx	lr
  40196c:	400e0e00 	.word	0x400e0e00

00401970 <imagingSensorCaptureDisable>:
	
}

void imagingSensorCaptureDisable() {
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
  401970:	4a03      	ldr	r2, [pc, #12]	; (401980 <imagingSensorCaptureDisable+0x10>)
  401972:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
  401976:	f023 0301 	bic.w	r3, r3, #1
  40197a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  40197e:	4770      	bx	lr
  401980:	400e0e00 	.word	0x400e0e00

00401984 <checkVSync>:
}

void checkVSync() {
  401984:	b508      	push	{r3, lr}
	if (pcISR & VSYNC_MASK) { //VSync signal is detected. End of frame capture
  401986:	4b3b      	ldr	r3, [pc, #236]	; (401a74 <checkVSync+0xf0>)
  401988:	681b      	ldr	r3, [r3, #0]
  40198a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40198e:	d009      	beq.n	4019a4 <checkVSync+0x20>
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) {
  401990:	4b39      	ldr	r3, [pc, #228]	; (401a78 <checkVSync+0xf4>)
  401992:	781b      	ldrb	r3, [r3, #0]
  401994:	b113      	cbz	r3, 40199c <checkVSync+0x18>
  401996:	4b39      	ldr	r3, [pc, #228]	; (401a7c <checkVSync+0xf8>)
  401998:	781b      	ldrb	r3, [r3, #0]
  40199a:	b923      	cbnz	r3, 4019a6 <checkVSync+0x22>

			#endif
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) { //waits for the first VSync to start capture. This makes sure we capture a full first frame
  40199c:	4b37      	ldr	r3, [pc, #220]	; (401a7c <checkVSync+0xf8>)
  40199e:	781b      	ldrb	r3, [r3, #0]
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	d15a      	bne.n	401a5a <checkVSync+0xd6>
  4019a4:	bd08      	pop	{r3, pc}
			captureEnabled = 0;
  4019a6:	2300      	movs	r3, #0
  4019a8:	4a33      	ldr	r2, [pc, #204]	; (401a78 <checkVSync+0xf4>)
  4019aa:	7013      	strb	r3, [r2, #0]
			startRecording = 0;
  4019ac:	4a33      	ldr	r2, [pc, #204]	; (401a7c <checkVSync+0xf8>)
  4019ae:	7013      	strb	r3, [r2, #0]
			imagingSensorCaptureDisable();
  4019b0:	4b33      	ldr	r3, [pc, #204]	; (401a80 <checkVSync+0xfc>)
  4019b2:	4798      	blx	r3
			switch (frameNumber%3)
  4019b4:	4b33      	ldr	r3, [pc, #204]	; (401a84 <checkVSync+0x100>)
  4019b6:	681a      	ldr	r2, [r3, #0]
  4019b8:	4b33      	ldr	r3, [pc, #204]	; (401a88 <checkVSync+0x104>)
  4019ba:	fba3 1302 	umull	r1, r3, r3, r2
  4019be:	085b      	lsrs	r3, r3, #1
  4019c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4019c4:	1ad3      	subs	r3, r2, r3
  4019c6:	2b01      	cmp	r3, #1
  4019c8:	d02b      	beq.n	401a22 <checkVSync+0x9e>
  4019ca:	b1e3      	cbz	r3, 401a06 <checkVSync+0x82>
  4019cc:	2b02      	cmp	r3, #2
  4019ce:	d036      	beq.n	401a3e <checkVSync+0xba>
			lineCount = 0;
  4019d0:	2300      	movs	r3, #0
  4019d2:	4a2e      	ldr	r2, [pc, #184]	; (401a8c <checkVSync+0x108>)
  4019d4:	6013      	str	r3, [r2, #0]
			frameNumber++;
  4019d6:	4a2b      	ldr	r2, [pc, #172]	; (401a84 <checkVSync+0x100>)
  4019d8:	6811      	ldr	r1, [r2, #0]
  4019da:	3101      	adds	r1, #1
  4019dc:	6011      	str	r1, [r2, #0]
			overflowCount = 0;
  4019de:	492c      	ldr	r1, [pc, #176]	; (401a90 <checkVSync+0x10c>)
  4019e0:	600b      	str	r3, [r1, #0]
			xferDMAComplete = 0;
  4019e2:	492c      	ldr	r1, [pc, #176]	; (401a94 <checkVSync+0x110>)
  4019e4:	600b      	str	r3, [r1, #0]
			if (frameNumber<=sdImageWriteFrameNum +2) {
  4019e6:	4b2c      	ldr	r3, [pc, #176]	; (401a98 <checkVSync+0x114>)
  4019e8:	681b      	ldr	r3, [r3, #0]
  4019ea:	6812      	ldr	r2, [r2, #0]
  4019ec:	3302      	adds	r3, #2
  4019ee:	4293      	cmp	r3, r2
  4019f0:	d3d8      	bcc.n	4019a4 <checkVSync+0x20>
				startRecording = 1;
  4019f2:	2301      	movs	r3, #1
  4019f4:	4a21      	ldr	r2, [pc, #132]	; (401a7c <checkVSync+0xf8>)
  4019f6:	7013      	strb	r3, [r2, #0]
				captureEnabled = 1;
  4019f8:	4a1f      	ldr	r2, [pc, #124]	; (401a78 <checkVSync+0xf4>)
  4019fa:	7013      	strb	r3, [r2, #0]
				imagingSensorStartDMA();
  4019fc:	4b27      	ldr	r3, [pc, #156]	; (401a9c <checkVSync+0x118>)
  4019fe:	4798      	blx	r3
				imagingSensorCaptureEnable();
  401a00:	4b27      	ldr	r3, [pc, #156]	; (401aa0 <checkVSync+0x11c>)
  401a02:	4798      	blx	r3
  401a04:	bd08      	pop	{r3, pc}
				imageBuffer0[buffSize-1] = frameNumber;
  401a06:	4b1f      	ldr	r3, [pc, #124]	; (401a84 <checkVSync+0x100>)
  401a08:	6819      	ldr	r1, [r3, #0]
  401a0a:	4b26      	ldr	r3, [pc, #152]	; (401aa4 <checkVSync+0x120>)
  401a0c:	4a26      	ldr	r2, [pc, #152]	; (401aa8 <checkVSync+0x124>)
  401a0e:	5099      	str	r1, [r3, r2]
				imageBuffer0[buffSize-3] = lineCount;
  401a10:	4a1e      	ldr	r2, [pc, #120]	; (401a8c <checkVSync+0x108>)
  401a12:	6811      	ldr	r1, [r2, #0]
  401a14:	4a25      	ldr	r2, [pc, #148]	; (401aac <checkVSync+0x128>)
  401a16:	5099      	str	r1, [r3, r2]
				imageBuffer0[buffSize-4] = xferDMAComplete; //Overflow flag
  401a18:	4a1e      	ldr	r2, [pc, #120]	; (401a94 <checkVSync+0x110>)
  401a1a:	6811      	ldr	r1, [r2, #0]
  401a1c:	4a24      	ldr	r2, [pc, #144]	; (401ab0 <checkVSync+0x12c>)
  401a1e:	5099      	str	r1, [r3, r2]
				break;
  401a20:	e7d6      	b.n	4019d0 <checkVSync+0x4c>
				imageBuffer1[buffSize-1] = frameNumber;
  401a22:	4b18      	ldr	r3, [pc, #96]	; (401a84 <checkVSync+0x100>)
  401a24:	6819      	ldr	r1, [r3, #0]
  401a26:	4b23      	ldr	r3, [pc, #140]	; (401ab4 <checkVSync+0x130>)
  401a28:	4a1f      	ldr	r2, [pc, #124]	; (401aa8 <checkVSync+0x124>)
  401a2a:	5099      	str	r1, [r3, r2]
				imageBuffer1[buffSize-3] = lineCount;
  401a2c:	4a17      	ldr	r2, [pc, #92]	; (401a8c <checkVSync+0x108>)
  401a2e:	6811      	ldr	r1, [r2, #0]
  401a30:	4a1e      	ldr	r2, [pc, #120]	; (401aac <checkVSync+0x128>)
  401a32:	5099      	str	r1, [r3, r2]
				imageBuffer1[buffSize-4] = xferDMAComplete; //Overflow flag
  401a34:	4a17      	ldr	r2, [pc, #92]	; (401a94 <checkVSync+0x110>)
  401a36:	6811      	ldr	r1, [r2, #0]
  401a38:	4a1d      	ldr	r2, [pc, #116]	; (401ab0 <checkVSync+0x12c>)
  401a3a:	5099      	str	r1, [r3, r2]
				break;
  401a3c:	e7c8      	b.n	4019d0 <checkVSync+0x4c>
				imageBuffer2[buffSize-1] = frameNumber;
  401a3e:	4b11      	ldr	r3, [pc, #68]	; (401a84 <checkVSync+0x100>)
  401a40:	6819      	ldr	r1, [r3, #0]
  401a42:	4b1d      	ldr	r3, [pc, #116]	; (401ab8 <checkVSync+0x134>)
  401a44:	4a18      	ldr	r2, [pc, #96]	; (401aa8 <checkVSync+0x124>)
  401a46:	5099      	str	r1, [r3, r2]
				imageBuffer2[buffSize-3] = lineCount;
  401a48:	4a10      	ldr	r2, [pc, #64]	; (401a8c <checkVSync+0x108>)
  401a4a:	6811      	ldr	r1, [r2, #0]
  401a4c:	4a17      	ldr	r2, [pc, #92]	; (401aac <checkVSync+0x128>)
  401a4e:	5099      	str	r1, [r3, r2]
				imageBuffer2[buffSize-4] = xferDMAComplete; //Overflow flag
  401a50:	4a10      	ldr	r2, [pc, #64]	; (401a94 <checkVSync+0x110>)
  401a52:	6811      	ldr	r1, [r2, #0]
  401a54:	4a16      	ldr	r2, [pc, #88]	; (401ab0 <checkVSync+0x12c>)
  401a56:	5099      	str	r1, [r3, r2]
				break;
  401a58:	e7ba      	b.n	4019d0 <checkVSync+0x4c>
			captureEnabled = 1;
  401a5a:	2201      	movs	r2, #1
  401a5c:	4b06      	ldr	r3, [pc, #24]	; (401a78 <checkVSync+0xf4>)
  401a5e:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  401a60:	2300      	movs	r3, #0
  401a62:	4a0a      	ldr	r2, [pc, #40]	; (401a8c <checkVSync+0x108>)
  401a64:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  401a66:	4a0a      	ldr	r2, [pc, #40]	; (401a90 <checkVSync+0x10c>)
  401a68:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  401a6a:	4b0c      	ldr	r3, [pc, #48]	; (401a9c <checkVSync+0x118>)
  401a6c:	4798      	blx	r3
			imagingSensorCaptureEnable();
  401a6e:	4b0c      	ldr	r3, [pc, #48]	; (401aa0 <checkVSync+0x11c>)
  401a70:	4798      	blx	r3

		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
  401a72:	e797      	b.n	4019a4 <checkVSync+0x20>
  401a74:	20453298 	.word	0x20453298
  401a78:	20400a88 	.word	0x20400a88
  401a7c:	204532a0 	.word	0x204532a0
  401a80:	00401971 	.word	0x00401971
  401a84:	20400a8c 	.word	0x20400a8c
  401a88:	aaaaaaab 	.word	0xaaaaaaab
  401a8c:	20453290 	.word	0x20453290
  401a90:	20453294 	.word	0x20453294
  401a94:	204532a8 	.word	0x204532a8
  401a98:	2045329c 	.word	0x2045329c
  401a9c:	004018ad 	.word	0x004018ad
  401aa0:	0040195d 	.word	0x0040195d
  401aa4:	20415490 	.word	0x20415490
  401aa8:	000149fc 	.word	0x000149fc
  401aac:	000149f4 	.word	0x000149f4
  401ab0:	000149f0 	.word	0x000149f0
  401ab4:	20429e90 	.word	0x20429e90
  401ab8:	2043e890 	.word	0x2043e890

00401abc <PIOA_Handler>:
/************************************************************************/
/*	         Conflicts with a Same Name Func. in pio_handler.h          */
/************************************************************************/
void PIOA_Handler(void) {
  401abc:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  401abe:	4b0a      	ldr	r3, [pc, #40]	; (401ae8 <PIOA_Handler+0x2c>)
  401ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  401ac2:	4b0a      	ldr	r3, [pc, #40]	; (401aec <PIOA_Handler+0x30>)
  401ac4:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK) {
  401ac6:	681b      	ldr	r3, [r3, #0]
  401ac8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  401acc:	d004      	beq.n	401ad8 <PIOA_Handler+0x1c>
		if (captureEnabled == 1)
  401ace:	4b08      	ldr	r3, [pc, #32]	; (401af0 <PIOA_Handler+0x34>)
  401ad0:	781b      	ldrb	r3, [r3, #0]
  401ad2:	b2db      	uxtb	r3, r3
  401ad4:	2b01      	cmp	r3, #1
  401ad6:	d002      	beq.n	401ade <PIOA_Handler+0x22>
			lineCount++;
	}
	checkVSync();
  401ad8:	4b06      	ldr	r3, [pc, #24]	; (401af4 <PIOA_Handler+0x38>)
  401ada:	4798      	blx	r3
  401adc:	bd08      	pop	{r3, pc}
			lineCount++;
  401ade:	4a06      	ldr	r2, [pc, #24]	; (401af8 <PIOA_Handler+0x3c>)
  401ae0:	6813      	ldr	r3, [r2, #0]
  401ae2:	3301      	adds	r3, #1
  401ae4:	6013      	str	r3, [r2, #0]
  401ae6:	e7f7      	b.n	401ad8 <PIOA_Handler+0x1c>
  401ae8:	400e0e00 	.word	0x400e0e00
  401aec:	20453298 	.word	0x20453298
  401af0:	20400a88 	.word	0x20400a88
  401af4:	00401985 	.word	0x00401985
  401af8:	20453290 	.word	0x20453290

00401afc <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  401afc:	4b04      	ldr	r3, [pc, #16]	; (401b10 <XDMAC_Handler+0x14>)
  401afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) {
  401b02:	f013 0f01 	tst.w	r3, #1
  401b06:	d002      	beq.n	401b0e <XDMAC_Handler+0x12>
		xferDMAComplete = 1;
  401b08:	2201      	movs	r2, #1
  401b0a:	4b02      	ldr	r3, [pc, #8]	; (401b14 <XDMAC_Handler+0x18>)
  401b0c:	601a      	str	r2, [r3, #0]
  401b0e:	4770      	bx	lr
  401b10:	40078000 	.word	0x40078000
  401b14:	204532a8 	.word	0x204532a8

00401b18 <PWM_Init>:
volatile uint32_t test[128];

//Holds PWM channel information
pwm_channel_t g_pwm_channel_led;

void PWM_Init() {
  401b18:	b570      	push	{r4, r5, r6, lr}
  401b1a:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM0);
  401b1c:	201f      	movs	r0, #31
  401b1e:	4b20      	ldr	r3, [pc, #128]	; (401ba0 <PWM_Init+0x88>)
  401b20:	4798      	blx	r3

	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO12);
  401b22:	4b20      	ldr	r3, [pc, #128]	; (401ba4 <PWM_Init+0x8c>)
  401b24:	4798      	blx	r3
  401b26:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  401b2a:	4b1f      	ldr	r3, [pc, #124]	; (401ba8 <PWM_Init+0x90>)
  401b2c:	4798      	blx	r3
		base->PIO_PUDR = mask;
  401b2e:	4b1f      	ldr	r3, [pc, #124]	; (401bac <PWM_Init+0x94>)
  401b30:	2401      	movs	r4, #1
  401b32:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401b34:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401b38:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401b3a:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401b3c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401b40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b42:	f022 0201 	bic.w	r2, r2, #1
  401b46:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401b48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b4a:	f022 0201 	bic.w	r2, r2, #1
  401b4e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401b50:	605c      	str	r4, [r3, #4]
	ioport_set_pin_mode(PWM_LED_PIN,PWM_LED_MODE); //Sets GPIO PIN to PWM Peripheral
	ioport_disable_pin(PWM_LED_PIN);

	pwm_channel_disable(PWM0, PWM_LED_CHANNEL);
  401b52:	4e17      	ldr	r6, [pc, #92]	; (401bb0 <PWM_Init+0x98>)
  401b54:	2100      	movs	r1, #0
  401b56:	4630      	mov	r0, r6
  401b58:	4b16      	ldr	r3, [pc, #88]	; (401bb4 <PWM_Init+0x9c>)
  401b5a:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
  401b5c:	4b16      	ldr	r3, [pc, #88]	; (401bb8 <PWM_Init+0xa0>)
  401b5e:	9301      	str	r3, [sp, #4]
  401b60:	2500      	movs	r5, #0
  401b62:	9502      	str	r5, [sp, #8]
  401b64:	4b15      	ldr	r3, [pc, #84]	; (401bbc <PWM_Init+0xa4>)
  401b66:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()/2 //Might need or not need to divide by 2 to get the correct clock
	};

	pwm_init(PWM0, &clock_setting);
  401b68:	a901      	add	r1, sp, #4
  401b6a:	4630      	mov	r0, r6
  401b6c:	4b14      	ldr	r3, [pc, #80]	; (401bc0 <PWM_Init+0xa8>)
  401b6e:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  401b70:	4914      	ldr	r1, [pc, #80]	; (401bc4 <PWM_Init+0xac>)
  401b72:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  401b74:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401b76:	230b      	movs	r3, #11
  401b78:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PWM_PERIOD_VALUE;
  401b7a:	23ff      	movs	r3, #255	; 0xff
  401b7c:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  401b7e:	2305      	movs	r3, #5
  401b80:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_led.channel = PWM_LED_CHANNEL;
  401b82:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  401b84:	4630      	mov	r0, r6
  401b86:	4b10      	ldr	r3, [pc, #64]	; (401bc8 <PWM_Init+0xb0>)
  401b88:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PWM_LED_CHANNEL, 0);
  401b8a:	462a      	mov	r2, r5
  401b8c:	4629      	mov	r1, r5
  401b8e:	4630      	mov	r0, r6
  401b90:	4b0e      	ldr	r3, [pc, #56]	; (401bcc <PWM_Init+0xb4>)
  401b92:	4798      	blx	r3
	//Enable PWM output
	pwm_channel_enable(PWM0,PWM_LED_CHANNEL);
  401b94:	4629      	mov	r1, r5
  401b96:	4630      	mov	r0, r6
  401b98:	4b0d      	ldr	r3, [pc, #52]	; (401bd0 <PWM_Init+0xb8>)
  401b9a:	4798      	blx	r3
	
}
  401b9c:	b004      	add	sp, #16
  401b9e:	bd70      	pop	{r4, r5, r6, pc}
  401ba0:	00401475 	.word	0x00401475
  401ba4:	00400fd1 	.word	0x00400fd1
  401ba8:	00400fad 	.word	0x00400fad
  401bac:	400e0e00 	.word	0x400e0e00
  401bb0:	40020000 	.word	0x40020000
  401bb4:	0040126d 	.word	0x0040126d
  401bb8:	0003e418 	.word	0x0003e418
  401bbc:	044aa200 	.word	0x044aa200
  401bc0:	004010b5 	.word	0x004010b5
  401bc4:	204532ec 	.word	0x204532ec
  401bc8:	004010f9 	.word	0x004010f9
  401bcc:	00401277 	.word	0x00401277
  401bd0:	00401263 	.word	0x00401263

00401bd4 <SPI_BitBag_init>:

	twihs_master_init(TWIHS1,&twihsOpt);
	//twihs_enable_master_mode(TWIHS1);
}

void SPI_BitBag_init() {
  401bd4:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_PIOB);
  401bd6:	200b      	movs	r0, #11
  401bd8:	4b09      	ldr	r3, [pc, #36]	; (401c00 <SPI_BitBag_init+0x2c>)
  401bda:	4798      	blx	r3
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  401bdc:	4b09      	ldr	r3, [pc, #36]	; (401c04 <SPI_BitBag_init+0x30>)
  401bde:	4798      	blx	r3
  401be0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  401be4:	4b08      	ldr	r3, [pc, #32]	; (401c08 <SPI_BitBag_init+0x34>)
  401be6:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401be8:	4b08      	ldr	r3, [pc, #32]	; (401c0c <SPI_BitBag_init+0x38>)
  401bea:	2210      	movs	r2, #16
  401bec:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401bee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401bf2:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401bf4:	2220      	movs	r2, #32
  401bf6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401bfc:	635a      	str	r2, [r3, #52]	; 0x34
  401bfe:	bd08      	pop	{r3, pc}
  401c00:	00401475 	.word	0x00401475
  401c04:	00400fd1 	.word	0x00400fd1
  401c08:	00400fad 	.word	0x00400fad
  401c0c:	400e1000 	.word	0x400e1000

00401c10 <main>:
#define TEST_PIN_8	PIO_PB7_IDX
// **************** Test Pins ******************//


int main (void)
{
  401c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	printf("Let's test if this will work.");
  401c14:	4850      	ldr	r0, [pc, #320]	; (401d58 <main+0x148>)
  401c16:	4b51      	ldr	r3, [pc, #324]	; (401d5c <main+0x14c>)
  401c18:	4798      	blx	r3
	*
	* This must be called prior to \ref irq_register_handler.
	*/
	
	irq_initialize_vectors();
	cpu_irq_enable();
  401c1a:	2201      	movs	r2, #1
  401c1c:	4b50      	ldr	r3, [pc, #320]	; (401d60 <main+0x150>)
  401c1e:	701a      	strb	r2, [r3, #0]
  401c20:	f3bf 8f5f 	dmb	sy
  401c24:	b662      	cpsie	i

	sysclk_init();
  401c26:	4b4f      	ldr	r3, [pc, #316]	; (401d64 <main+0x154>)
  401c28:	4798      	blx	r3
	board_init(); //Sets up sd card slot pins
  401c2a:	4b4f      	ldr	r3, [pc, #316]	; (401d68 <main+0x158>)
  401c2c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401c2e:	200a      	movs	r0, #10
  401c30:	4c4e      	ldr	r4, [pc, #312]	; (401d6c <main+0x15c>)
  401c32:	47a0      	blx	r4
  401c34:	200b      	movs	r0, #11
  401c36:	47a0      	blx	r4
  401c38:	2010      	movs	r0, #16
  401c3a:	47a0      	blx	r4
	ioport_init(); //turns on all peripheral clocks. could remove this to save power

	//----- CMOS Sensor Stuff
	enableSourceClk(); //Turns on SCK1 from MCU to drive CMOS sensor
  401c3c:	4b4c      	ldr	r3, [pc, #304]	; (401d70 <main+0x160>)
  401c3e:	4798      	blx	r3
	//

	time_tick_init();
  401c40:	4b4c      	ldr	r3, [pc, #304]	; (401d74 <main+0x164>)
  401c42:	4798      	blx	r3
	PWM_Init(); // Not sure what this is for
  401c44:	4b4c      	ldr	r3, [pc, #304]	; (401d78 <main+0x168>)
  401c46:	4798      	blx	r3
	
	//DACC_init(); //The DAC cannot run at 1.8V. This needs to be replaced with PWM to drive the LED current source
	//DACC_updateOutput(0x0FFF,1);
	
	#ifdef EV76C541
		SPI_BitBag_init(); // When did this get defined??
  401c48:	4b4c      	ldr	r3, [pc, #304]	; (401d7c <main+0x16c>)
  401c4a:	4798      	blx	r3
	#else
		TWIHS_init();
	#endif
	
	tick_start = time_tick_get();
  401c4c:	4d4c      	ldr	r5, [pc, #304]	; (401d80 <main+0x170>)
  401c4e:	47a8      	blx	r5
  401c50:	4b4c      	ldr	r3, [pc, #304]	; (401d84 <main+0x174>)
  401c52:	6018      	str	r0, [r3, #0]
	time_ms = time_tick_calc_delay(tick_start, time_tick_get());
  401c54:	681e      	ldr	r6, [r3, #0]
  401c56:	47a8      	blx	r5
  401c58:	4601      	mov	r1, r0
  401c5a:	4630      	mov	r0, r6
  401c5c:	4b4a      	ldr	r3, [pc, #296]	; (401d88 <main+0x178>)
  401c5e:	4798      	blx	r3
  401c60:	4b4a      	ldr	r3, [pc, #296]	; (401d8c <main+0x17c>)
  401c62:	6018      	str	r0, [r3, #0]

	//----- Enable control of LED
	pmc_enable_periph_clk(ID_PIOD);
  401c64:	2010      	movs	r0, #16
  401c66:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c68:	4b49      	ldr	r3, [pc, #292]	; (401d90 <main+0x180>)
  401c6a:	2202      	movs	r2, #2
  401c6c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c72:	631a      	str	r2, [r3, #48]	; 0x30
	//******************************************//

	//******************************************//
	//                 SD Card                  //
	
	sd_mmc_init(); // Initiate SD card slot
  401c74:	4b47      	ldr	r3, [pc, #284]	; (401d94 <main+0x184>)
  401c76:	4798      	blx	r3
	*/
	// **** End SD Card Error Check ****
	
	// Continue with SD Card...
	// Check if connection is okay
	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK) {} // while the SD connection is NOT okay.. wait
  401c78:	2500      	movs	r5, #0
  401c7a:	4c47      	ldr	r4, [pc, #284]	; (401d98 <main+0x188>)
  401c7c:	4628      	mov	r0, r5
  401c7e:	47a0      	blx	r4
  401c80:	2800      	cmp	r0, #0
  401c82:	d1fb      	bne.n	401c7c <main+0x6c>
	
	// Check SD Card Type
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC)) // Bitwise OR --> 9 = 8 + 1
  401c84:	4b45      	ldr	r3, [pc, #276]	; (401d9c <main+0x18c>)
  401c86:	4798      	blx	r3
  401c88:	2809      	cmp	r0, #9
  401c8a:	d134      	bne.n	401cf6 <main+0xe6>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401c8c:	4b40      	ldr	r3, [pc, #256]	; (401d90 <main+0x180>)
  401c8e:	2202      	movs	r2, #2
  401c90:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c92:	631a      	str	r2, [r3, #48]	; 0x30
		ioport_set_pin_level(LED_PIN, 0); // if not SDHC, turn off LED
		// set MCU = 1 and SD = 0. Do the MCU thing.
	}
	// If SD = 1....
	// Get SD card capacity
	uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB); //in KB
  401c94:	2000      	movs	r0, #0
  401c96:	4b42      	ldr	r3, [pc, #264]	; (401da0 <main+0x190>)
  401c98:	4798      	blx	r3
	
	if (sdCapacity == 0x00ed6600){ // 16GB
  401c9a:	4b42      	ldr	r3, [pc, #264]	; (401da4 <main+0x194>)
  401c9c:	4298      	cmp	r0, r3
  401c9e:	d103      	bne.n	401ca8 <main+0x98>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401ca0:	4b3b      	ldr	r3, [pc, #236]	; (401d90 <main+0x180>)
  401ca2:	2202      	movs	r2, #2
  401ca4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ca6:	631a      	str	r2, [r3, #48]	; 0x30
		ioport_set_pin_level(LED_PIN, 0);
		ioport_set_pin_level(LED_PIN, 1);
	}
	
	tick_start = time_tick_get();
  401ca8:	4b35      	ldr	r3, [pc, #212]	; (401d80 <main+0x170>)
  401caa:	4798      	blx	r3
  401cac:	4b35      	ldr	r3, [pc, #212]	; (401d84 <main+0x174>)
  401cae:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) < 5000) {
  401cb0:	461e      	mov	r6, r3
  401cb2:	4d33      	ldr	r5, [pc, #204]	; (401d80 <main+0x170>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401cb4:	4c36      	ldr	r4, [pc, #216]	; (401d90 <main+0x180>)
  401cb6:	6837      	ldr	r7, [r6, #0]
  401cb8:	47a8      	blx	r5
  401cba:	4601      	mov	r1, r0
  401cbc:	4638      	mov	r0, r7
  401cbe:	4b32      	ldr	r3, [pc, #200]	; (401d88 <main+0x178>)
  401cc0:	4798      	blx	r3
  401cc2:	f241 3387 	movw	r3, #4999	; 0x1387
  401cc6:	4298      	cmp	r0, r3
  401cc8:	d919      	bls.n	401cfe <main+0xee>
		ioport_toggle_pin_level(LED_PIN);
		delay_ms(100);
	}

	// Let's see if this is it
	if (sd_mmc_is_write_protected(SD_SLOT_NB) == true){
  401cca:	2000      	movs	r0, #0
  401ccc:	4b36      	ldr	r3, [pc, #216]	; (401da8 <main+0x198>)
  401cce:	4798      	blx	r3
	/*
	@SD_Slot_NB: Slot number to use
	@Starting_Block: Start block number to be written = 1024(why??), 
	@NB_Blocks_Per_Frame: Total number of blocks to be written. = (total # pixels/subsample) / 512 (Number of bytes in a single block (sector))
	*/
	sd_mmc_init_write_blocks(SD_SLOT_NB,STARTING_BLOCK,NB_BLOCKS_PER_FRAME);
  401cd0:	22a5      	movs	r2, #165	; 0xa5
  401cd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401cd6:	2000      	movs	r0, #0
  401cd8:	4b34      	ldr	r3, [pc, #208]	; (401dac <main+0x19c>)
  401cda:	4798      	blx	r3
	/*params
	@imageBuffer: pointer to write buffer 
	@NB_Blocks_..: # of blocks to be written
	*/
	static uint32_t imageBuffer[NUM_PIXEL_WORDS+FRAME_FOOTER_LENGTH];
	sd_mmc_start_write_blocks(&imageBuffer[0],NB_BLOCKS_PER_FRAME);
  401cdc:	21a5      	movs	r1, #165	; 0xa5
  401cde:	4834      	ldr	r0, [pc, #208]	; (401db0 <main+0x1a0>)
  401ce0:	4b34      	ldr	r3, [pc, #208]	; (401db4 <main+0x1a4>)
  401ce2:	4798      	blx	r3
	
	// Wait the end of write blocks of data (?)
	sd_mmc_wait_end_of_write_blocks(true);
  401ce4:	2001      	movs	r0, #1
  401ce6:	4b34      	ldr	r3, [pc, #208]	; (401db8 <main+0x1a8>)
  401ce8:	4798      	blx	r3
  401cea:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401d90 <main+0x180>
	//-------------
	
	// What does this do..?
	while (1) {
		ioport_toggle_pin_level(LED_PIN);
		testPoint++;
  401cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 401dc4 <main+0x1b4>
		testPoint++;
		// delay_ms(1000);
		while (time_tick_calc_delay(tick_start, time_tick_get()) < 1000) {}
  401cf2:	4f24      	ldr	r7, [pc, #144]	; (401d84 <main+0x174>)
  401cf4:	e027      	b.n	401d46 <main+0x136>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401cf6:	2202      	movs	r2, #2
  401cf8:	4b25      	ldr	r3, [pc, #148]	; (401d90 <main+0x180>)
  401cfa:	635a      	str	r2, [r3, #52]	; 0x34
  401cfc:	e7ca      	b.n	401c94 <main+0x84>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d00:	f013 0f02 	tst.w	r3, #2
  401d04:	d005      	beq.n	401d12 <main+0x102>
		port->PIO_CODR = mask;
  401d06:	2302      	movs	r3, #2
  401d08:	6363      	str	r3, [r4, #52]	; 0x34
		delay_ms(100);
  401d0a:	482c      	ldr	r0, [pc, #176]	; (401dbc <main+0x1ac>)
  401d0c:	4b2c      	ldr	r3, [pc, #176]	; (401dc0 <main+0x1b0>)
  401d0e:	4798      	blx	r3
  401d10:	e7d1      	b.n	401cb6 <main+0xa6>
	} else {
		port->PIO_SODR = mask;
  401d12:	2302      	movs	r3, #2
  401d14:	6323      	str	r3, [r4, #48]	; 0x30
  401d16:	e7f8      	b.n	401d0a <main+0xfa>
  401d18:	2302      	movs	r3, #2
  401d1a:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
		testPoint++;
  401d1e:	f8d8 3000 	ldr.w	r3, [r8]
  401d22:	3301      	adds	r3, #1
  401d24:	f8c8 3000 	str.w	r3, [r8]
		testPoint++;
  401d28:	f8d8 3000 	ldr.w	r3, [r8]
  401d2c:	3301      	adds	r3, #1
  401d2e:	f8c8 3000 	str.w	r3, [r8]
		while (time_tick_calc_delay(tick_start, time_tick_get()) < 1000) {}
  401d32:	4e13      	ldr	r6, [pc, #76]	; (401d80 <main+0x170>)
  401d34:	4d14      	ldr	r5, [pc, #80]	; (401d88 <main+0x178>)
  401d36:	683c      	ldr	r4, [r7, #0]
  401d38:	47b0      	blx	r6
  401d3a:	4601      	mov	r1, r0
  401d3c:	4620      	mov	r0, r4
  401d3e:	47a8      	blx	r5
  401d40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  401d44:	d3f7      	bcc.n	401d36 <main+0x126>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401d46:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
  401d4a:	f013 0f02 	tst.w	r3, #2
  401d4e:	d0e3      	beq.n	401d18 <main+0x108>
		port->PIO_CODR = mask;
  401d50:	2302      	movs	r3, #2
  401d52:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
  401d56:	e7e2      	b.n	401d1e <main+0x10e>
  401d58:	00404c50 	.word	0x00404c50
  401d5c:	00401e19 	.word	0x00401e19
  401d60:	2040000a 	.word	0x2040000a
  401d64:	004012e1 	.word	0x004012e1
  401d68:	00401505 	.word	0x00401505
  401d6c:	00401475 	.word	0x00401475
  401d70:	00401869 	.word	0x00401869
  401d74:	00401299 	.word	0x00401299
  401d78:	00401b19 	.word	0x00401b19
  401d7c:	00401bd5 	.word	0x00401bd5
  401d80:	004012c5 	.word	0x004012c5
  401d84:	20453340 	.word	0x20453340
  401d88:	004012d1 	.word	0x004012d1
  401d8c:	20453548 	.word	0x20453548
  401d90:	400e1400 	.word	0x400e1400
  401d94:	0040027d 	.word	0x0040027d
  401d98:	0040029d 	.word	0x0040029d
  401d9c:	004008f9 	.word	0x004008f9
  401da0:	0040091d 	.word	0x0040091d
  401da4:	00ed6600 	.word	0x00ed6600
  401da8:	00400941 	.word	0x00400941
  401dac:	00400945 	.word	0x00400945
  401db0:	20400a90 	.word	0x20400a90
  401db4:	004009d1 	.word	0x004009d1
  401db8:	004009f9 	.word	0x004009f9
  401dbc:	00250a78 	.word	0x00250a78
  401dc0:	20400001 	.word	0x20400001
  401dc4:	204532a4 	.word	0x204532a4

00401dc8 <__libc_init_array>:
  401dc8:	b570      	push	{r4, r5, r6, lr}
  401dca:	4e0f      	ldr	r6, [pc, #60]	; (401e08 <__libc_init_array+0x40>)
  401dcc:	4d0f      	ldr	r5, [pc, #60]	; (401e0c <__libc_init_array+0x44>)
  401dce:	1b76      	subs	r6, r6, r5
  401dd0:	10b6      	asrs	r6, r6, #2
  401dd2:	bf18      	it	ne
  401dd4:	2400      	movne	r4, #0
  401dd6:	d005      	beq.n	401de4 <__libc_init_array+0x1c>
  401dd8:	3401      	adds	r4, #1
  401dda:	f855 3b04 	ldr.w	r3, [r5], #4
  401dde:	4798      	blx	r3
  401de0:	42a6      	cmp	r6, r4
  401de2:	d1f9      	bne.n	401dd8 <__libc_init_array+0x10>
  401de4:	4e0a      	ldr	r6, [pc, #40]	; (401e10 <__libc_init_array+0x48>)
  401de6:	4d0b      	ldr	r5, [pc, #44]	; (401e14 <__libc_init_array+0x4c>)
  401de8:	1b76      	subs	r6, r6, r5
  401dea:	f002 fff3 	bl	404dd4 <_init>
  401dee:	10b6      	asrs	r6, r6, #2
  401df0:	bf18      	it	ne
  401df2:	2400      	movne	r4, #0
  401df4:	d006      	beq.n	401e04 <__libc_init_array+0x3c>
  401df6:	3401      	adds	r4, #1
  401df8:	f855 3b04 	ldr.w	r3, [r5], #4
  401dfc:	4798      	blx	r3
  401dfe:	42a6      	cmp	r6, r4
  401e00:	d1f9      	bne.n	401df6 <__libc_init_array+0x2e>
  401e02:	bd70      	pop	{r4, r5, r6, pc}
  401e04:	bd70      	pop	{r4, r5, r6, pc}
  401e06:	bf00      	nop
  401e08:	00404de0 	.word	0x00404de0
  401e0c:	00404de0 	.word	0x00404de0
  401e10:	00404de8 	.word	0x00404de8
  401e14:	00404de0 	.word	0x00404de0

00401e18 <iprintf>:
  401e18:	b40f      	push	{r0, r1, r2, r3}
  401e1a:	b500      	push	{lr}
  401e1c:	4907      	ldr	r1, [pc, #28]	; (401e3c <iprintf+0x24>)
  401e1e:	b083      	sub	sp, #12
  401e20:	ab04      	add	r3, sp, #16
  401e22:	6808      	ldr	r0, [r1, #0]
  401e24:	f853 2b04 	ldr.w	r2, [r3], #4
  401e28:	6881      	ldr	r1, [r0, #8]
  401e2a:	9301      	str	r3, [sp, #4]
  401e2c:	f000 f930 	bl	402090 <_vfiprintf_r>
  401e30:	b003      	add	sp, #12
  401e32:	f85d eb04 	ldr.w	lr, [sp], #4
  401e36:	b004      	add	sp, #16
  401e38:	4770      	bx	lr
  401e3a:	bf00      	nop
  401e3c:	20400010 	.word	0x20400010

00401e40 <memcpy>:
  401e40:	4684      	mov	ip, r0
  401e42:	ea41 0300 	orr.w	r3, r1, r0
  401e46:	f013 0303 	ands.w	r3, r3, #3
  401e4a:	d16d      	bne.n	401f28 <memcpy+0xe8>
  401e4c:	3a40      	subs	r2, #64	; 0x40
  401e4e:	d341      	bcc.n	401ed4 <memcpy+0x94>
  401e50:	f851 3b04 	ldr.w	r3, [r1], #4
  401e54:	f840 3b04 	str.w	r3, [r0], #4
  401e58:	f851 3b04 	ldr.w	r3, [r1], #4
  401e5c:	f840 3b04 	str.w	r3, [r0], #4
  401e60:	f851 3b04 	ldr.w	r3, [r1], #4
  401e64:	f840 3b04 	str.w	r3, [r0], #4
  401e68:	f851 3b04 	ldr.w	r3, [r1], #4
  401e6c:	f840 3b04 	str.w	r3, [r0], #4
  401e70:	f851 3b04 	ldr.w	r3, [r1], #4
  401e74:	f840 3b04 	str.w	r3, [r0], #4
  401e78:	f851 3b04 	ldr.w	r3, [r1], #4
  401e7c:	f840 3b04 	str.w	r3, [r0], #4
  401e80:	f851 3b04 	ldr.w	r3, [r1], #4
  401e84:	f840 3b04 	str.w	r3, [r0], #4
  401e88:	f851 3b04 	ldr.w	r3, [r1], #4
  401e8c:	f840 3b04 	str.w	r3, [r0], #4
  401e90:	f851 3b04 	ldr.w	r3, [r1], #4
  401e94:	f840 3b04 	str.w	r3, [r0], #4
  401e98:	f851 3b04 	ldr.w	r3, [r1], #4
  401e9c:	f840 3b04 	str.w	r3, [r0], #4
  401ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ea4:	f840 3b04 	str.w	r3, [r0], #4
  401ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  401eac:	f840 3b04 	str.w	r3, [r0], #4
  401eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  401eb4:	f840 3b04 	str.w	r3, [r0], #4
  401eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  401ebc:	f840 3b04 	str.w	r3, [r0], #4
  401ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ec4:	f840 3b04 	str.w	r3, [r0], #4
  401ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  401ecc:	f840 3b04 	str.w	r3, [r0], #4
  401ed0:	3a40      	subs	r2, #64	; 0x40
  401ed2:	d2bd      	bcs.n	401e50 <memcpy+0x10>
  401ed4:	3230      	adds	r2, #48	; 0x30
  401ed6:	d311      	bcc.n	401efc <memcpy+0xbc>
  401ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  401edc:	f840 3b04 	str.w	r3, [r0], #4
  401ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ee4:	f840 3b04 	str.w	r3, [r0], #4
  401ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  401eec:	f840 3b04 	str.w	r3, [r0], #4
  401ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ef4:	f840 3b04 	str.w	r3, [r0], #4
  401ef8:	3a10      	subs	r2, #16
  401efa:	d2ed      	bcs.n	401ed8 <memcpy+0x98>
  401efc:	320c      	adds	r2, #12
  401efe:	d305      	bcc.n	401f0c <memcpy+0xcc>
  401f00:	f851 3b04 	ldr.w	r3, [r1], #4
  401f04:	f840 3b04 	str.w	r3, [r0], #4
  401f08:	3a04      	subs	r2, #4
  401f0a:	d2f9      	bcs.n	401f00 <memcpy+0xc0>
  401f0c:	3204      	adds	r2, #4
  401f0e:	d008      	beq.n	401f22 <memcpy+0xe2>
  401f10:	07d2      	lsls	r2, r2, #31
  401f12:	bf1c      	itt	ne
  401f14:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401f18:	f800 3b01 	strbne.w	r3, [r0], #1
  401f1c:	d301      	bcc.n	401f22 <memcpy+0xe2>
  401f1e:	880b      	ldrh	r3, [r1, #0]
  401f20:	8003      	strh	r3, [r0, #0]
  401f22:	4660      	mov	r0, ip
  401f24:	4770      	bx	lr
  401f26:	bf00      	nop
  401f28:	2a08      	cmp	r2, #8
  401f2a:	d313      	bcc.n	401f54 <memcpy+0x114>
  401f2c:	078b      	lsls	r3, r1, #30
  401f2e:	d08d      	beq.n	401e4c <memcpy+0xc>
  401f30:	f010 0303 	ands.w	r3, r0, #3
  401f34:	d08a      	beq.n	401e4c <memcpy+0xc>
  401f36:	f1c3 0304 	rsb	r3, r3, #4
  401f3a:	1ad2      	subs	r2, r2, r3
  401f3c:	07db      	lsls	r3, r3, #31
  401f3e:	bf1c      	itt	ne
  401f40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  401f44:	f800 3b01 	strbne.w	r3, [r0], #1
  401f48:	d380      	bcc.n	401e4c <memcpy+0xc>
  401f4a:	f831 3b02 	ldrh.w	r3, [r1], #2
  401f4e:	f820 3b02 	strh.w	r3, [r0], #2
  401f52:	e77b      	b.n	401e4c <memcpy+0xc>
  401f54:	3a04      	subs	r2, #4
  401f56:	d3d9      	bcc.n	401f0c <memcpy+0xcc>
  401f58:	3a01      	subs	r2, #1
  401f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
  401f5e:	f800 3b01 	strb.w	r3, [r0], #1
  401f62:	d2f9      	bcs.n	401f58 <memcpy+0x118>
  401f64:	780b      	ldrb	r3, [r1, #0]
  401f66:	7003      	strb	r3, [r0, #0]
  401f68:	784b      	ldrb	r3, [r1, #1]
  401f6a:	7043      	strb	r3, [r0, #1]
  401f6c:	788b      	ldrb	r3, [r1, #2]
  401f6e:	7083      	strb	r3, [r0, #2]
  401f70:	4660      	mov	r0, ip
  401f72:	4770      	bx	lr

00401f74 <memset>:
  401f74:	b470      	push	{r4, r5, r6}
  401f76:	0786      	lsls	r6, r0, #30
  401f78:	d046      	beq.n	402008 <memset+0x94>
  401f7a:	1e54      	subs	r4, r2, #1
  401f7c:	2a00      	cmp	r2, #0
  401f7e:	d041      	beq.n	402004 <memset+0x90>
  401f80:	b2ca      	uxtb	r2, r1
  401f82:	4603      	mov	r3, r0
  401f84:	e002      	b.n	401f8c <memset+0x18>
  401f86:	f114 34ff 	adds.w	r4, r4, #4294967295
  401f8a:	d33b      	bcc.n	402004 <memset+0x90>
  401f8c:	f803 2b01 	strb.w	r2, [r3], #1
  401f90:	079d      	lsls	r5, r3, #30
  401f92:	d1f8      	bne.n	401f86 <memset+0x12>
  401f94:	2c03      	cmp	r4, #3
  401f96:	d92e      	bls.n	401ff6 <memset+0x82>
  401f98:	b2cd      	uxtb	r5, r1
  401f9a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401f9e:	2c0f      	cmp	r4, #15
  401fa0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401fa4:	d919      	bls.n	401fda <memset+0x66>
  401fa6:	f103 0210 	add.w	r2, r3, #16
  401faa:	4626      	mov	r6, r4
  401fac:	3e10      	subs	r6, #16
  401fae:	2e0f      	cmp	r6, #15
  401fb0:	f842 5c10 	str.w	r5, [r2, #-16]
  401fb4:	f842 5c0c 	str.w	r5, [r2, #-12]
  401fb8:	f842 5c08 	str.w	r5, [r2, #-8]
  401fbc:	f842 5c04 	str.w	r5, [r2, #-4]
  401fc0:	f102 0210 	add.w	r2, r2, #16
  401fc4:	d8f2      	bhi.n	401fac <memset+0x38>
  401fc6:	f1a4 0210 	sub.w	r2, r4, #16
  401fca:	f022 020f 	bic.w	r2, r2, #15
  401fce:	f004 040f 	and.w	r4, r4, #15
  401fd2:	3210      	adds	r2, #16
  401fd4:	2c03      	cmp	r4, #3
  401fd6:	4413      	add	r3, r2
  401fd8:	d90d      	bls.n	401ff6 <memset+0x82>
  401fda:	461e      	mov	r6, r3
  401fdc:	4622      	mov	r2, r4
  401fde:	3a04      	subs	r2, #4
  401fe0:	2a03      	cmp	r2, #3
  401fe2:	f846 5b04 	str.w	r5, [r6], #4
  401fe6:	d8fa      	bhi.n	401fde <memset+0x6a>
  401fe8:	1f22      	subs	r2, r4, #4
  401fea:	f022 0203 	bic.w	r2, r2, #3
  401fee:	3204      	adds	r2, #4
  401ff0:	4413      	add	r3, r2
  401ff2:	f004 0403 	and.w	r4, r4, #3
  401ff6:	b12c      	cbz	r4, 402004 <memset+0x90>
  401ff8:	b2c9      	uxtb	r1, r1
  401ffa:	441c      	add	r4, r3
  401ffc:	f803 1b01 	strb.w	r1, [r3], #1
  402000:	429c      	cmp	r4, r3
  402002:	d1fb      	bne.n	401ffc <memset+0x88>
  402004:	bc70      	pop	{r4, r5, r6}
  402006:	4770      	bx	lr
  402008:	4614      	mov	r4, r2
  40200a:	4603      	mov	r3, r0
  40200c:	e7c2      	b.n	401f94 <memset+0x20>
  40200e:	bf00      	nop

00402010 <__sprint_r.part.0>:
  402010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402014:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402016:	049c      	lsls	r4, r3, #18
  402018:	4693      	mov	fp, r2
  40201a:	d52f      	bpl.n	40207c <__sprint_r.part.0+0x6c>
  40201c:	6893      	ldr	r3, [r2, #8]
  40201e:	6812      	ldr	r2, [r2, #0]
  402020:	b353      	cbz	r3, 402078 <__sprint_r.part.0+0x68>
  402022:	460e      	mov	r6, r1
  402024:	4607      	mov	r7, r0
  402026:	f102 0908 	add.w	r9, r2, #8
  40202a:	e919 0420 	ldmdb	r9, {r5, sl}
  40202e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402032:	d017      	beq.n	402064 <__sprint_r.part.0+0x54>
  402034:	3d04      	subs	r5, #4
  402036:	2400      	movs	r4, #0
  402038:	e001      	b.n	40203e <__sprint_r.part.0+0x2e>
  40203a:	45a0      	cmp	r8, r4
  40203c:	d010      	beq.n	402060 <__sprint_r.part.0+0x50>
  40203e:	4632      	mov	r2, r6
  402040:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402044:	4638      	mov	r0, r7
  402046:	f001 f8bb 	bl	4031c0 <_fputwc_r>
  40204a:	1c43      	adds	r3, r0, #1
  40204c:	f104 0401 	add.w	r4, r4, #1
  402050:	d1f3      	bne.n	40203a <__sprint_r.part.0+0x2a>
  402052:	2300      	movs	r3, #0
  402054:	f8cb 3008 	str.w	r3, [fp, #8]
  402058:	f8cb 3004 	str.w	r3, [fp, #4]
  40205c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402060:	f8db 3008 	ldr.w	r3, [fp, #8]
  402064:	f02a 0a03 	bic.w	sl, sl, #3
  402068:	eba3 030a 	sub.w	r3, r3, sl
  40206c:	f8cb 3008 	str.w	r3, [fp, #8]
  402070:	f109 0908 	add.w	r9, r9, #8
  402074:	2b00      	cmp	r3, #0
  402076:	d1d8      	bne.n	40202a <__sprint_r.part.0+0x1a>
  402078:	2000      	movs	r0, #0
  40207a:	e7ea      	b.n	402052 <__sprint_r.part.0+0x42>
  40207c:	f001 fa0a 	bl	403494 <__sfvwrite_r>
  402080:	2300      	movs	r3, #0
  402082:	f8cb 3008 	str.w	r3, [fp, #8]
  402086:	f8cb 3004 	str.w	r3, [fp, #4]
  40208a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40208e:	bf00      	nop

00402090 <_vfiprintf_r>:
  402090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402094:	b0ad      	sub	sp, #180	; 0xb4
  402096:	461d      	mov	r5, r3
  402098:	468b      	mov	fp, r1
  40209a:	4690      	mov	r8, r2
  40209c:	9307      	str	r3, [sp, #28]
  40209e:	9006      	str	r0, [sp, #24]
  4020a0:	b118      	cbz	r0, 4020aa <_vfiprintf_r+0x1a>
  4020a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	f000 80f3 	beq.w	402290 <_vfiprintf_r+0x200>
  4020aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4020b2:	07df      	lsls	r7, r3, #31
  4020b4:	b281      	uxth	r1, r0
  4020b6:	d402      	bmi.n	4020be <_vfiprintf_r+0x2e>
  4020b8:	058e      	lsls	r6, r1, #22
  4020ba:	f140 80fc 	bpl.w	4022b6 <_vfiprintf_r+0x226>
  4020be:	048c      	lsls	r4, r1, #18
  4020c0:	d40a      	bmi.n	4020d8 <_vfiprintf_r+0x48>
  4020c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4020c6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4020ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4020ce:	f8ab 100c 	strh.w	r1, [fp, #12]
  4020d2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4020d6:	b289      	uxth	r1, r1
  4020d8:	0708      	lsls	r0, r1, #28
  4020da:	f140 80b3 	bpl.w	402244 <_vfiprintf_r+0x1b4>
  4020de:	f8db 3010 	ldr.w	r3, [fp, #16]
  4020e2:	2b00      	cmp	r3, #0
  4020e4:	f000 80ae 	beq.w	402244 <_vfiprintf_r+0x1b4>
  4020e8:	f001 031a 	and.w	r3, r1, #26
  4020ec:	2b0a      	cmp	r3, #10
  4020ee:	f000 80b5 	beq.w	40225c <_vfiprintf_r+0x1cc>
  4020f2:	2300      	movs	r3, #0
  4020f4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4020f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4020fa:	9311      	str	r3, [sp, #68]	; 0x44
  4020fc:	9310      	str	r3, [sp, #64]	; 0x40
  4020fe:	9303      	str	r3, [sp, #12]
  402100:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402104:	46ca      	mov	sl, r9
  402106:	f8cd b010 	str.w	fp, [sp, #16]
  40210a:	f898 3000 	ldrb.w	r3, [r8]
  40210e:	4644      	mov	r4, r8
  402110:	b1fb      	cbz	r3, 402152 <_vfiprintf_r+0xc2>
  402112:	2b25      	cmp	r3, #37	; 0x25
  402114:	d102      	bne.n	40211c <_vfiprintf_r+0x8c>
  402116:	e01c      	b.n	402152 <_vfiprintf_r+0xc2>
  402118:	2b25      	cmp	r3, #37	; 0x25
  40211a:	d003      	beq.n	402124 <_vfiprintf_r+0x94>
  40211c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402120:	2b00      	cmp	r3, #0
  402122:	d1f9      	bne.n	402118 <_vfiprintf_r+0x88>
  402124:	eba4 0508 	sub.w	r5, r4, r8
  402128:	b19d      	cbz	r5, 402152 <_vfiprintf_r+0xc2>
  40212a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40212c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40212e:	f8ca 8000 	str.w	r8, [sl]
  402132:	3301      	adds	r3, #1
  402134:	442a      	add	r2, r5
  402136:	2b07      	cmp	r3, #7
  402138:	f8ca 5004 	str.w	r5, [sl, #4]
  40213c:	9211      	str	r2, [sp, #68]	; 0x44
  40213e:	9310      	str	r3, [sp, #64]	; 0x40
  402140:	dd7a      	ble.n	402238 <_vfiprintf_r+0x1a8>
  402142:	2a00      	cmp	r2, #0
  402144:	f040 84b0 	bne.w	402aa8 <_vfiprintf_r+0xa18>
  402148:	9b03      	ldr	r3, [sp, #12]
  40214a:	9210      	str	r2, [sp, #64]	; 0x40
  40214c:	442b      	add	r3, r5
  40214e:	46ca      	mov	sl, r9
  402150:	9303      	str	r3, [sp, #12]
  402152:	7823      	ldrb	r3, [r4, #0]
  402154:	2b00      	cmp	r3, #0
  402156:	f000 83e0 	beq.w	40291a <_vfiprintf_r+0x88a>
  40215a:	2000      	movs	r0, #0
  40215c:	f04f 0300 	mov.w	r3, #0
  402160:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402164:	f104 0801 	add.w	r8, r4, #1
  402168:	7862      	ldrb	r2, [r4, #1]
  40216a:	4605      	mov	r5, r0
  40216c:	4606      	mov	r6, r0
  40216e:	4603      	mov	r3, r0
  402170:	f04f 34ff 	mov.w	r4, #4294967295
  402174:	f108 0801 	add.w	r8, r8, #1
  402178:	f1a2 0120 	sub.w	r1, r2, #32
  40217c:	2958      	cmp	r1, #88	; 0x58
  40217e:	f200 82de 	bhi.w	40273e <_vfiprintf_r+0x6ae>
  402182:	e8df f011 	tbh	[pc, r1, lsl #1]
  402186:	0221      	.short	0x0221
  402188:	02dc02dc 	.word	0x02dc02dc
  40218c:	02dc0229 	.word	0x02dc0229
  402190:	02dc02dc 	.word	0x02dc02dc
  402194:	02dc02dc 	.word	0x02dc02dc
  402198:	028902dc 	.word	0x028902dc
  40219c:	02dc0295 	.word	0x02dc0295
  4021a0:	02bd00a2 	.word	0x02bd00a2
  4021a4:	019f02dc 	.word	0x019f02dc
  4021a8:	01a401a4 	.word	0x01a401a4
  4021ac:	01a401a4 	.word	0x01a401a4
  4021b0:	01a401a4 	.word	0x01a401a4
  4021b4:	01a401a4 	.word	0x01a401a4
  4021b8:	02dc01a4 	.word	0x02dc01a4
  4021bc:	02dc02dc 	.word	0x02dc02dc
  4021c0:	02dc02dc 	.word	0x02dc02dc
  4021c4:	02dc02dc 	.word	0x02dc02dc
  4021c8:	02dc02dc 	.word	0x02dc02dc
  4021cc:	01b202dc 	.word	0x01b202dc
  4021d0:	02dc02dc 	.word	0x02dc02dc
  4021d4:	02dc02dc 	.word	0x02dc02dc
  4021d8:	02dc02dc 	.word	0x02dc02dc
  4021dc:	02dc02dc 	.word	0x02dc02dc
  4021e0:	02dc02dc 	.word	0x02dc02dc
  4021e4:	02dc0197 	.word	0x02dc0197
  4021e8:	02dc02dc 	.word	0x02dc02dc
  4021ec:	02dc02dc 	.word	0x02dc02dc
  4021f0:	02dc019b 	.word	0x02dc019b
  4021f4:	025302dc 	.word	0x025302dc
  4021f8:	02dc02dc 	.word	0x02dc02dc
  4021fc:	02dc02dc 	.word	0x02dc02dc
  402200:	02dc02dc 	.word	0x02dc02dc
  402204:	02dc02dc 	.word	0x02dc02dc
  402208:	02dc02dc 	.word	0x02dc02dc
  40220c:	021b025a 	.word	0x021b025a
  402210:	02dc02dc 	.word	0x02dc02dc
  402214:	026e02dc 	.word	0x026e02dc
  402218:	02dc021b 	.word	0x02dc021b
  40221c:	027302dc 	.word	0x027302dc
  402220:	01f502dc 	.word	0x01f502dc
  402224:	02090182 	.word	0x02090182
  402228:	02dc02d7 	.word	0x02dc02d7
  40222c:	02dc029a 	.word	0x02dc029a
  402230:	02dc00a7 	.word	0x02dc00a7
  402234:	022e02dc 	.word	0x022e02dc
  402238:	f10a 0a08 	add.w	sl, sl, #8
  40223c:	9b03      	ldr	r3, [sp, #12]
  40223e:	442b      	add	r3, r5
  402240:	9303      	str	r3, [sp, #12]
  402242:	e786      	b.n	402152 <_vfiprintf_r+0xc2>
  402244:	4659      	mov	r1, fp
  402246:	9806      	ldr	r0, [sp, #24]
  402248:	f000 fdac 	bl	402da4 <__swsetup_r>
  40224c:	bb18      	cbnz	r0, 402296 <_vfiprintf_r+0x206>
  40224e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402252:	f001 031a 	and.w	r3, r1, #26
  402256:	2b0a      	cmp	r3, #10
  402258:	f47f af4b 	bne.w	4020f2 <_vfiprintf_r+0x62>
  40225c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402260:	2b00      	cmp	r3, #0
  402262:	f6ff af46 	blt.w	4020f2 <_vfiprintf_r+0x62>
  402266:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40226a:	07db      	lsls	r3, r3, #31
  40226c:	d405      	bmi.n	40227a <_vfiprintf_r+0x1ea>
  40226e:	058f      	lsls	r7, r1, #22
  402270:	d403      	bmi.n	40227a <_vfiprintf_r+0x1ea>
  402272:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402276:	f001 fac3 	bl	403800 <__retarget_lock_release_recursive>
  40227a:	462b      	mov	r3, r5
  40227c:	4642      	mov	r2, r8
  40227e:	4659      	mov	r1, fp
  402280:	9806      	ldr	r0, [sp, #24]
  402282:	f000 fd4d 	bl	402d20 <__sbprintf>
  402286:	9003      	str	r0, [sp, #12]
  402288:	9803      	ldr	r0, [sp, #12]
  40228a:	b02d      	add	sp, #180	; 0xb4
  40228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402290:	f000 fef4 	bl	40307c <__sinit>
  402294:	e709      	b.n	4020aa <_vfiprintf_r+0x1a>
  402296:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40229a:	07d9      	lsls	r1, r3, #31
  40229c:	d404      	bmi.n	4022a8 <_vfiprintf_r+0x218>
  40229e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4022a2:	059a      	lsls	r2, r3, #22
  4022a4:	f140 84aa 	bpl.w	402bfc <_vfiprintf_r+0xb6c>
  4022a8:	f04f 33ff 	mov.w	r3, #4294967295
  4022ac:	9303      	str	r3, [sp, #12]
  4022ae:	9803      	ldr	r0, [sp, #12]
  4022b0:	b02d      	add	sp, #180	; 0xb4
  4022b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022b6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4022ba:	f001 fa9f 	bl	4037fc <__retarget_lock_acquire_recursive>
  4022be:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4022c2:	b281      	uxth	r1, r0
  4022c4:	e6fb      	b.n	4020be <_vfiprintf_r+0x2e>
  4022c6:	4276      	negs	r6, r6
  4022c8:	9207      	str	r2, [sp, #28]
  4022ca:	f043 0304 	orr.w	r3, r3, #4
  4022ce:	f898 2000 	ldrb.w	r2, [r8]
  4022d2:	e74f      	b.n	402174 <_vfiprintf_r+0xe4>
  4022d4:	9608      	str	r6, [sp, #32]
  4022d6:	069e      	lsls	r6, r3, #26
  4022d8:	f100 8450 	bmi.w	402b7c <_vfiprintf_r+0xaec>
  4022dc:	9907      	ldr	r1, [sp, #28]
  4022de:	06dd      	lsls	r5, r3, #27
  4022e0:	460a      	mov	r2, r1
  4022e2:	f100 83ef 	bmi.w	402ac4 <_vfiprintf_r+0xa34>
  4022e6:	0658      	lsls	r0, r3, #25
  4022e8:	f140 83ec 	bpl.w	402ac4 <_vfiprintf_r+0xa34>
  4022ec:	880e      	ldrh	r6, [r1, #0]
  4022ee:	3104      	adds	r1, #4
  4022f0:	2700      	movs	r7, #0
  4022f2:	2201      	movs	r2, #1
  4022f4:	9107      	str	r1, [sp, #28]
  4022f6:	f04f 0100 	mov.w	r1, #0
  4022fa:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4022fe:	2500      	movs	r5, #0
  402300:	1c61      	adds	r1, r4, #1
  402302:	f000 8116 	beq.w	402532 <_vfiprintf_r+0x4a2>
  402306:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40230a:	9102      	str	r1, [sp, #8]
  40230c:	ea56 0107 	orrs.w	r1, r6, r7
  402310:	f040 8114 	bne.w	40253c <_vfiprintf_r+0x4ac>
  402314:	2c00      	cmp	r4, #0
  402316:	f040 835c 	bne.w	4029d2 <_vfiprintf_r+0x942>
  40231a:	2a00      	cmp	r2, #0
  40231c:	f040 83b7 	bne.w	402a8e <_vfiprintf_r+0x9fe>
  402320:	f013 0301 	ands.w	r3, r3, #1
  402324:	9305      	str	r3, [sp, #20]
  402326:	f000 8457 	beq.w	402bd8 <_vfiprintf_r+0xb48>
  40232a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40232e:	2330      	movs	r3, #48	; 0x30
  402330:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402334:	9b05      	ldr	r3, [sp, #20]
  402336:	42a3      	cmp	r3, r4
  402338:	bfb8      	it	lt
  40233a:	4623      	movlt	r3, r4
  40233c:	9301      	str	r3, [sp, #4]
  40233e:	b10d      	cbz	r5, 402344 <_vfiprintf_r+0x2b4>
  402340:	3301      	adds	r3, #1
  402342:	9301      	str	r3, [sp, #4]
  402344:	9b02      	ldr	r3, [sp, #8]
  402346:	f013 0302 	ands.w	r3, r3, #2
  40234a:	9309      	str	r3, [sp, #36]	; 0x24
  40234c:	d002      	beq.n	402354 <_vfiprintf_r+0x2c4>
  40234e:	9b01      	ldr	r3, [sp, #4]
  402350:	3302      	adds	r3, #2
  402352:	9301      	str	r3, [sp, #4]
  402354:	9b02      	ldr	r3, [sp, #8]
  402356:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40235a:	930a      	str	r3, [sp, #40]	; 0x28
  40235c:	f040 8217 	bne.w	40278e <_vfiprintf_r+0x6fe>
  402360:	9b08      	ldr	r3, [sp, #32]
  402362:	9a01      	ldr	r2, [sp, #4]
  402364:	1a9d      	subs	r5, r3, r2
  402366:	2d00      	cmp	r5, #0
  402368:	f340 8211 	ble.w	40278e <_vfiprintf_r+0x6fe>
  40236c:	2d10      	cmp	r5, #16
  40236e:	f340 8490 	ble.w	402c92 <_vfiprintf_r+0xc02>
  402372:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402374:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402376:	4ec4      	ldr	r6, [pc, #784]	; (402688 <_vfiprintf_r+0x5f8>)
  402378:	46d6      	mov	lr, sl
  40237a:	2710      	movs	r7, #16
  40237c:	46a2      	mov	sl, r4
  40237e:	4619      	mov	r1, r3
  402380:	9c06      	ldr	r4, [sp, #24]
  402382:	e007      	b.n	402394 <_vfiprintf_r+0x304>
  402384:	f101 0c02 	add.w	ip, r1, #2
  402388:	f10e 0e08 	add.w	lr, lr, #8
  40238c:	4601      	mov	r1, r0
  40238e:	3d10      	subs	r5, #16
  402390:	2d10      	cmp	r5, #16
  402392:	dd11      	ble.n	4023b8 <_vfiprintf_r+0x328>
  402394:	1c48      	adds	r0, r1, #1
  402396:	3210      	adds	r2, #16
  402398:	2807      	cmp	r0, #7
  40239a:	9211      	str	r2, [sp, #68]	; 0x44
  40239c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4023a0:	9010      	str	r0, [sp, #64]	; 0x40
  4023a2:	ddef      	ble.n	402384 <_vfiprintf_r+0x2f4>
  4023a4:	2a00      	cmp	r2, #0
  4023a6:	f040 81e4 	bne.w	402772 <_vfiprintf_r+0x6e2>
  4023aa:	3d10      	subs	r5, #16
  4023ac:	2d10      	cmp	r5, #16
  4023ae:	4611      	mov	r1, r2
  4023b0:	f04f 0c01 	mov.w	ip, #1
  4023b4:	46ce      	mov	lr, r9
  4023b6:	dced      	bgt.n	402394 <_vfiprintf_r+0x304>
  4023b8:	4654      	mov	r4, sl
  4023ba:	4661      	mov	r1, ip
  4023bc:	46f2      	mov	sl, lr
  4023be:	442a      	add	r2, r5
  4023c0:	2907      	cmp	r1, #7
  4023c2:	9211      	str	r2, [sp, #68]	; 0x44
  4023c4:	f8ca 6000 	str.w	r6, [sl]
  4023c8:	f8ca 5004 	str.w	r5, [sl, #4]
  4023cc:	9110      	str	r1, [sp, #64]	; 0x40
  4023ce:	f300 82ec 	bgt.w	4029aa <_vfiprintf_r+0x91a>
  4023d2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4023d6:	f10a 0a08 	add.w	sl, sl, #8
  4023da:	1c48      	adds	r0, r1, #1
  4023dc:	2d00      	cmp	r5, #0
  4023de:	f040 81de 	bne.w	40279e <_vfiprintf_r+0x70e>
  4023e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	f000 81f8 	beq.w	4027da <_vfiprintf_r+0x74a>
  4023ea:	3202      	adds	r2, #2
  4023ec:	a90e      	add	r1, sp, #56	; 0x38
  4023ee:	2302      	movs	r3, #2
  4023f0:	2807      	cmp	r0, #7
  4023f2:	9211      	str	r2, [sp, #68]	; 0x44
  4023f4:	9010      	str	r0, [sp, #64]	; 0x40
  4023f6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4023fa:	f340 81ea 	ble.w	4027d2 <_vfiprintf_r+0x742>
  4023fe:	2a00      	cmp	r2, #0
  402400:	f040 838c 	bne.w	402b1c <_vfiprintf_r+0xa8c>
  402404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402406:	2b80      	cmp	r3, #128	; 0x80
  402408:	f04f 0001 	mov.w	r0, #1
  40240c:	4611      	mov	r1, r2
  40240e:	46ca      	mov	sl, r9
  402410:	f040 81e7 	bne.w	4027e2 <_vfiprintf_r+0x752>
  402414:	9b08      	ldr	r3, [sp, #32]
  402416:	9d01      	ldr	r5, [sp, #4]
  402418:	1b5e      	subs	r6, r3, r5
  40241a:	2e00      	cmp	r6, #0
  40241c:	f340 81e1 	ble.w	4027e2 <_vfiprintf_r+0x752>
  402420:	2e10      	cmp	r6, #16
  402422:	4d9a      	ldr	r5, [pc, #616]	; (40268c <_vfiprintf_r+0x5fc>)
  402424:	f340 8450 	ble.w	402cc8 <_vfiprintf_r+0xc38>
  402428:	46d4      	mov	ip, sl
  40242a:	2710      	movs	r7, #16
  40242c:	46a2      	mov	sl, r4
  40242e:	9c06      	ldr	r4, [sp, #24]
  402430:	e007      	b.n	402442 <_vfiprintf_r+0x3b2>
  402432:	f101 0e02 	add.w	lr, r1, #2
  402436:	f10c 0c08 	add.w	ip, ip, #8
  40243a:	4601      	mov	r1, r0
  40243c:	3e10      	subs	r6, #16
  40243e:	2e10      	cmp	r6, #16
  402440:	dd11      	ble.n	402466 <_vfiprintf_r+0x3d6>
  402442:	1c48      	adds	r0, r1, #1
  402444:	3210      	adds	r2, #16
  402446:	2807      	cmp	r0, #7
  402448:	9211      	str	r2, [sp, #68]	; 0x44
  40244a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40244e:	9010      	str	r0, [sp, #64]	; 0x40
  402450:	ddef      	ble.n	402432 <_vfiprintf_r+0x3a2>
  402452:	2a00      	cmp	r2, #0
  402454:	f040 829d 	bne.w	402992 <_vfiprintf_r+0x902>
  402458:	3e10      	subs	r6, #16
  40245a:	2e10      	cmp	r6, #16
  40245c:	f04f 0e01 	mov.w	lr, #1
  402460:	4611      	mov	r1, r2
  402462:	46cc      	mov	ip, r9
  402464:	dced      	bgt.n	402442 <_vfiprintf_r+0x3b2>
  402466:	4654      	mov	r4, sl
  402468:	46e2      	mov	sl, ip
  40246a:	4432      	add	r2, r6
  40246c:	f1be 0f07 	cmp.w	lr, #7
  402470:	9211      	str	r2, [sp, #68]	; 0x44
  402472:	e88a 0060 	stmia.w	sl, {r5, r6}
  402476:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40247a:	f300 8369 	bgt.w	402b50 <_vfiprintf_r+0xac0>
  40247e:	f10a 0a08 	add.w	sl, sl, #8
  402482:	f10e 0001 	add.w	r0, lr, #1
  402486:	4671      	mov	r1, lr
  402488:	e1ab      	b.n	4027e2 <_vfiprintf_r+0x752>
  40248a:	9608      	str	r6, [sp, #32]
  40248c:	f013 0220 	ands.w	r2, r3, #32
  402490:	f040 838c 	bne.w	402bac <_vfiprintf_r+0xb1c>
  402494:	f013 0110 	ands.w	r1, r3, #16
  402498:	f040 831a 	bne.w	402ad0 <_vfiprintf_r+0xa40>
  40249c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4024a0:	f000 8316 	beq.w	402ad0 <_vfiprintf_r+0xa40>
  4024a4:	9807      	ldr	r0, [sp, #28]
  4024a6:	460a      	mov	r2, r1
  4024a8:	4601      	mov	r1, r0
  4024aa:	3104      	adds	r1, #4
  4024ac:	8806      	ldrh	r6, [r0, #0]
  4024ae:	9107      	str	r1, [sp, #28]
  4024b0:	2700      	movs	r7, #0
  4024b2:	e720      	b.n	4022f6 <_vfiprintf_r+0x266>
  4024b4:	9608      	str	r6, [sp, #32]
  4024b6:	f043 0310 	orr.w	r3, r3, #16
  4024ba:	e7e7      	b.n	40248c <_vfiprintf_r+0x3fc>
  4024bc:	9608      	str	r6, [sp, #32]
  4024be:	f043 0310 	orr.w	r3, r3, #16
  4024c2:	e708      	b.n	4022d6 <_vfiprintf_r+0x246>
  4024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4024c8:	f898 2000 	ldrb.w	r2, [r8]
  4024cc:	e652      	b.n	402174 <_vfiprintf_r+0xe4>
  4024ce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024d2:	2600      	movs	r6, #0
  4024d4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4024d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4024dc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4024e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4024e4:	2909      	cmp	r1, #9
  4024e6:	d9f5      	bls.n	4024d4 <_vfiprintf_r+0x444>
  4024e8:	e646      	b.n	402178 <_vfiprintf_r+0xe8>
  4024ea:	9608      	str	r6, [sp, #32]
  4024ec:	2800      	cmp	r0, #0
  4024ee:	f040 8408 	bne.w	402d02 <_vfiprintf_r+0xc72>
  4024f2:	f043 0310 	orr.w	r3, r3, #16
  4024f6:	069e      	lsls	r6, r3, #26
  4024f8:	f100 834c 	bmi.w	402b94 <_vfiprintf_r+0xb04>
  4024fc:	06dd      	lsls	r5, r3, #27
  4024fe:	f100 82f3 	bmi.w	402ae8 <_vfiprintf_r+0xa58>
  402502:	0658      	lsls	r0, r3, #25
  402504:	f140 82f0 	bpl.w	402ae8 <_vfiprintf_r+0xa58>
  402508:	9d07      	ldr	r5, [sp, #28]
  40250a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40250e:	462a      	mov	r2, r5
  402510:	17f7      	asrs	r7, r6, #31
  402512:	3204      	adds	r2, #4
  402514:	4630      	mov	r0, r6
  402516:	4639      	mov	r1, r7
  402518:	9207      	str	r2, [sp, #28]
  40251a:	2800      	cmp	r0, #0
  40251c:	f171 0200 	sbcs.w	r2, r1, #0
  402520:	f2c0 835d 	blt.w	402bde <_vfiprintf_r+0xb4e>
  402524:	1c61      	adds	r1, r4, #1
  402526:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40252a:	f04f 0201 	mov.w	r2, #1
  40252e:	f47f aeea 	bne.w	402306 <_vfiprintf_r+0x276>
  402532:	ea56 0107 	orrs.w	r1, r6, r7
  402536:	f000 824d 	beq.w	4029d4 <_vfiprintf_r+0x944>
  40253a:	9302      	str	r3, [sp, #8]
  40253c:	2a01      	cmp	r2, #1
  40253e:	f000 828c 	beq.w	402a5a <_vfiprintf_r+0x9ca>
  402542:	2a02      	cmp	r2, #2
  402544:	f040 825c 	bne.w	402a00 <_vfiprintf_r+0x970>
  402548:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40254a:	46cb      	mov	fp, r9
  40254c:	0933      	lsrs	r3, r6, #4
  40254e:	f006 010f 	and.w	r1, r6, #15
  402552:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402556:	093a      	lsrs	r2, r7, #4
  402558:	461e      	mov	r6, r3
  40255a:	4617      	mov	r7, r2
  40255c:	5c43      	ldrb	r3, [r0, r1]
  40255e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402562:	ea56 0307 	orrs.w	r3, r6, r7
  402566:	d1f1      	bne.n	40254c <_vfiprintf_r+0x4bc>
  402568:	eba9 030b 	sub.w	r3, r9, fp
  40256c:	9305      	str	r3, [sp, #20]
  40256e:	e6e1      	b.n	402334 <_vfiprintf_r+0x2a4>
  402570:	2800      	cmp	r0, #0
  402572:	f040 83c0 	bne.w	402cf6 <_vfiprintf_r+0xc66>
  402576:	0699      	lsls	r1, r3, #26
  402578:	f100 8367 	bmi.w	402c4a <_vfiprintf_r+0xbba>
  40257c:	06da      	lsls	r2, r3, #27
  40257e:	f100 80f1 	bmi.w	402764 <_vfiprintf_r+0x6d4>
  402582:	065b      	lsls	r3, r3, #25
  402584:	f140 80ee 	bpl.w	402764 <_vfiprintf_r+0x6d4>
  402588:	9a07      	ldr	r2, [sp, #28]
  40258a:	6813      	ldr	r3, [r2, #0]
  40258c:	3204      	adds	r2, #4
  40258e:	9207      	str	r2, [sp, #28]
  402590:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402594:	801a      	strh	r2, [r3, #0]
  402596:	e5b8      	b.n	40210a <_vfiprintf_r+0x7a>
  402598:	9807      	ldr	r0, [sp, #28]
  40259a:	4a3d      	ldr	r2, [pc, #244]	; (402690 <_vfiprintf_r+0x600>)
  40259c:	9608      	str	r6, [sp, #32]
  40259e:	920b      	str	r2, [sp, #44]	; 0x2c
  4025a0:	6806      	ldr	r6, [r0, #0]
  4025a2:	2278      	movs	r2, #120	; 0x78
  4025a4:	2130      	movs	r1, #48	; 0x30
  4025a6:	3004      	adds	r0, #4
  4025a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4025ac:	f043 0302 	orr.w	r3, r3, #2
  4025b0:	9007      	str	r0, [sp, #28]
  4025b2:	2700      	movs	r7, #0
  4025b4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4025b8:	2202      	movs	r2, #2
  4025ba:	e69c      	b.n	4022f6 <_vfiprintf_r+0x266>
  4025bc:	9608      	str	r6, [sp, #32]
  4025be:	2800      	cmp	r0, #0
  4025c0:	d099      	beq.n	4024f6 <_vfiprintf_r+0x466>
  4025c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4025c6:	e796      	b.n	4024f6 <_vfiprintf_r+0x466>
  4025c8:	f898 2000 	ldrb.w	r2, [r8]
  4025cc:	2d00      	cmp	r5, #0
  4025ce:	f47f add1 	bne.w	402174 <_vfiprintf_r+0xe4>
  4025d2:	2001      	movs	r0, #1
  4025d4:	2520      	movs	r5, #32
  4025d6:	e5cd      	b.n	402174 <_vfiprintf_r+0xe4>
  4025d8:	f043 0301 	orr.w	r3, r3, #1
  4025dc:	f898 2000 	ldrb.w	r2, [r8]
  4025e0:	e5c8      	b.n	402174 <_vfiprintf_r+0xe4>
  4025e2:	9608      	str	r6, [sp, #32]
  4025e4:	2800      	cmp	r0, #0
  4025e6:	f040 8393 	bne.w	402d10 <_vfiprintf_r+0xc80>
  4025ea:	4929      	ldr	r1, [pc, #164]	; (402690 <_vfiprintf_r+0x600>)
  4025ec:	910b      	str	r1, [sp, #44]	; 0x2c
  4025ee:	069f      	lsls	r7, r3, #26
  4025f0:	f100 82e8 	bmi.w	402bc4 <_vfiprintf_r+0xb34>
  4025f4:	9807      	ldr	r0, [sp, #28]
  4025f6:	06de      	lsls	r6, r3, #27
  4025f8:	4601      	mov	r1, r0
  4025fa:	f100 8270 	bmi.w	402ade <_vfiprintf_r+0xa4e>
  4025fe:	065d      	lsls	r5, r3, #25
  402600:	f140 826d 	bpl.w	402ade <_vfiprintf_r+0xa4e>
  402604:	3104      	adds	r1, #4
  402606:	8806      	ldrh	r6, [r0, #0]
  402608:	9107      	str	r1, [sp, #28]
  40260a:	2700      	movs	r7, #0
  40260c:	07d8      	lsls	r0, r3, #31
  40260e:	f140 8222 	bpl.w	402a56 <_vfiprintf_r+0x9c6>
  402612:	ea56 0107 	orrs.w	r1, r6, r7
  402616:	f000 821e 	beq.w	402a56 <_vfiprintf_r+0x9c6>
  40261a:	2130      	movs	r1, #48	; 0x30
  40261c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402620:	f043 0302 	orr.w	r3, r3, #2
  402624:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402628:	2202      	movs	r2, #2
  40262a:	e664      	b.n	4022f6 <_vfiprintf_r+0x266>
  40262c:	9608      	str	r6, [sp, #32]
  40262e:	2800      	cmp	r0, #0
  402630:	f040 836b 	bne.w	402d0a <_vfiprintf_r+0xc7a>
  402634:	4917      	ldr	r1, [pc, #92]	; (402694 <_vfiprintf_r+0x604>)
  402636:	910b      	str	r1, [sp, #44]	; 0x2c
  402638:	e7d9      	b.n	4025ee <_vfiprintf_r+0x55e>
  40263a:	9907      	ldr	r1, [sp, #28]
  40263c:	9608      	str	r6, [sp, #32]
  40263e:	680a      	ldr	r2, [r1, #0]
  402640:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402644:	f04f 0000 	mov.w	r0, #0
  402648:	460a      	mov	r2, r1
  40264a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40264e:	3204      	adds	r2, #4
  402650:	2001      	movs	r0, #1
  402652:	9001      	str	r0, [sp, #4]
  402654:	9207      	str	r2, [sp, #28]
  402656:	9005      	str	r0, [sp, #20]
  402658:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40265c:	9302      	str	r3, [sp, #8]
  40265e:	2400      	movs	r4, #0
  402660:	e670      	b.n	402344 <_vfiprintf_r+0x2b4>
  402662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402666:	f898 2000 	ldrb.w	r2, [r8]
  40266a:	e583      	b.n	402174 <_vfiprintf_r+0xe4>
  40266c:	f898 2000 	ldrb.w	r2, [r8]
  402670:	2a6c      	cmp	r2, #108	; 0x6c
  402672:	bf03      	ittte	eq
  402674:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  402678:	f043 0320 	orreq.w	r3, r3, #32
  40267c:	f108 0801 	addeq.w	r8, r8, #1
  402680:	f043 0310 	orrne.w	r3, r3, #16
  402684:	e576      	b.n	402174 <_vfiprintf_r+0xe4>
  402686:	bf00      	nop
  402688:	00404ca4 	.word	0x00404ca4
  40268c:	00404cb4 	.word	0x00404cb4
  402690:	00404c88 	.word	0x00404c88
  402694:	00404c74 	.word	0x00404c74
  402698:	9907      	ldr	r1, [sp, #28]
  40269a:	680e      	ldr	r6, [r1, #0]
  40269c:	460a      	mov	r2, r1
  40269e:	2e00      	cmp	r6, #0
  4026a0:	f102 0204 	add.w	r2, r2, #4
  4026a4:	f6ff ae0f 	blt.w	4022c6 <_vfiprintf_r+0x236>
  4026a8:	9207      	str	r2, [sp, #28]
  4026aa:	f898 2000 	ldrb.w	r2, [r8]
  4026ae:	e561      	b.n	402174 <_vfiprintf_r+0xe4>
  4026b0:	f898 2000 	ldrb.w	r2, [r8]
  4026b4:	2001      	movs	r0, #1
  4026b6:	252b      	movs	r5, #43	; 0x2b
  4026b8:	e55c      	b.n	402174 <_vfiprintf_r+0xe4>
  4026ba:	9907      	ldr	r1, [sp, #28]
  4026bc:	9608      	str	r6, [sp, #32]
  4026be:	f8d1 b000 	ldr.w	fp, [r1]
  4026c2:	f04f 0200 	mov.w	r2, #0
  4026c6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4026ca:	1d0e      	adds	r6, r1, #4
  4026cc:	f1bb 0f00 	cmp.w	fp, #0
  4026d0:	f000 82e5 	beq.w	402c9e <_vfiprintf_r+0xc0e>
  4026d4:	1c67      	adds	r7, r4, #1
  4026d6:	f000 82c4 	beq.w	402c62 <_vfiprintf_r+0xbd2>
  4026da:	4622      	mov	r2, r4
  4026dc:	2100      	movs	r1, #0
  4026de:	4658      	mov	r0, fp
  4026e0:	9301      	str	r3, [sp, #4]
  4026e2:	f001 fbcd 	bl	403e80 <memchr>
  4026e6:	9b01      	ldr	r3, [sp, #4]
  4026e8:	2800      	cmp	r0, #0
  4026ea:	f000 82e5 	beq.w	402cb8 <_vfiprintf_r+0xc28>
  4026ee:	eba0 020b 	sub.w	r2, r0, fp
  4026f2:	9205      	str	r2, [sp, #20]
  4026f4:	9607      	str	r6, [sp, #28]
  4026f6:	9302      	str	r3, [sp, #8]
  4026f8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4026fc:	2400      	movs	r4, #0
  4026fe:	e619      	b.n	402334 <_vfiprintf_r+0x2a4>
  402700:	f898 2000 	ldrb.w	r2, [r8]
  402704:	2a2a      	cmp	r2, #42	; 0x2a
  402706:	f108 0701 	add.w	r7, r8, #1
  40270a:	f000 82e9 	beq.w	402ce0 <_vfiprintf_r+0xc50>
  40270e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402712:	2909      	cmp	r1, #9
  402714:	46b8      	mov	r8, r7
  402716:	f04f 0400 	mov.w	r4, #0
  40271a:	f63f ad2d 	bhi.w	402178 <_vfiprintf_r+0xe8>
  40271e:	f818 2b01 	ldrb.w	r2, [r8], #1
  402722:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402726:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40272a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40272e:	2909      	cmp	r1, #9
  402730:	d9f5      	bls.n	40271e <_vfiprintf_r+0x68e>
  402732:	e521      	b.n	402178 <_vfiprintf_r+0xe8>
  402734:	f043 0320 	orr.w	r3, r3, #32
  402738:	f898 2000 	ldrb.w	r2, [r8]
  40273c:	e51a      	b.n	402174 <_vfiprintf_r+0xe4>
  40273e:	9608      	str	r6, [sp, #32]
  402740:	2800      	cmp	r0, #0
  402742:	f040 82db 	bne.w	402cfc <_vfiprintf_r+0xc6c>
  402746:	2a00      	cmp	r2, #0
  402748:	f000 80e7 	beq.w	40291a <_vfiprintf_r+0x88a>
  40274c:	2101      	movs	r1, #1
  40274e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402752:	f04f 0200 	mov.w	r2, #0
  402756:	9101      	str	r1, [sp, #4]
  402758:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40275c:	9105      	str	r1, [sp, #20]
  40275e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  402762:	e77b      	b.n	40265c <_vfiprintf_r+0x5cc>
  402764:	9a07      	ldr	r2, [sp, #28]
  402766:	6813      	ldr	r3, [r2, #0]
  402768:	3204      	adds	r2, #4
  40276a:	9207      	str	r2, [sp, #28]
  40276c:	9a03      	ldr	r2, [sp, #12]
  40276e:	601a      	str	r2, [r3, #0]
  402770:	e4cb      	b.n	40210a <_vfiprintf_r+0x7a>
  402772:	aa0f      	add	r2, sp, #60	; 0x3c
  402774:	9904      	ldr	r1, [sp, #16]
  402776:	4620      	mov	r0, r4
  402778:	f7ff fc4a 	bl	402010 <__sprint_r.part.0>
  40277c:	2800      	cmp	r0, #0
  40277e:	f040 8139 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402782:	9910      	ldr	r1, [sp, #64]	; 0x40
  402784:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402786:	f101 0c01 	add.w	ip, r1, #1
  40278a:	46ce      	mov	lr, r9
  40278c:	e5ff      	b.n	40238e <_vfiprintf_r+0x2fe>
  40278e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402790:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402792:	1c48      	adds	r0, r1, #1
  402794:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402798:	2d00      	cmp	r5, #0
  40279a:	f43f ae22 	beq.w	4023e2 <_vfiprintf_r+0x352>
  40279e:	3201      	adds	r2, #1
  4027a0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4027a4:	2101      	movs	r1, #1
  4027a6:	2807      	cmp	r0, #7
  4027a8:	9211      	str	r2, [sp, #68]	; 0x44
  4027aa:	9010      	str	r0, [sp, #64]	; 0x40
  4027ac:	f8ca 5000 	str.w	r5, [sl]
  4027b0:	f8ca 1004 	str.w	r1, [sl, #4]
  4027b4:	f340 8108 	ble.w	4029c8 <_vfiprintf_r+0x938>
  4027b8:	2a00      	cmp	r2, #0
  4027ba:	f040 81bc 	bne.w	402b36 <_vfiprintf_r+0xaa6>
  4027be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4027c0:	2b00      	cmp	r3, #0
  4027c2:	f43f ae1f 	beq.w	402404 <_vfiprintf_r+0x374>
  4027c6:	ab0e      	add	r3, sp, #56	; 0x38
  4027c8:	2202      	movs	r2, #2
  4027ca:	4608      	mov	r0, r1
  4027cc:	931c      	str	r3, [sp, #112]	; 0x70
  4027ce:	921d      	str	r2, [sp, #116]	; 0x74
  4027d0:	46ca      	mov	sl, r9
  4027d2:	4601      	mov	r1, r0
  4027d4:	f10a 0a08 	add.w	sl, sl, #8
  4027d8:	3001      	adds	r0, #1
  4027da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027dc:	2b80      	cmp	r3, #128	; 0x80
  4027de:	f43f ae19 	beq.w	402414 <_vfiprintf_r+0x384>
  4027e2:	9b05      	ldr	r3, [sp, #20]
  4027e4:	1ae4      	subs	r4, r4, r3
  4027e6:	2c00      	cmp	r4, #0
  4027e8:	dd2e      	ble.n	402848 <_vfiprintf_r+0x7b8>
  4027ea:	2c10      	cmp	r4, #16
  4027ec:	4db3      	ldr	r5, [pc, #716]	; (402abc <_vfiprintf_r+0xa2c>)
  4027ee:	dd1e      	ble.n	40282e <_vfiprintf_r+0x79e>
  4027f0:	46d6      	mov	lr, sl
  4027f2:	2610      	movs	r6, #16
  4027f4:	9f06      	ldr	r7, [sp, #24]
  4027f6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4027fa:	e006      	b.n	40280a <_vfiprintf_r+0x77a>
  4027fc:	1c88      	adds	r0, r1, #2
  4027fe:	f10e 0e08 	add.w	lr, lr, #8
  402802:	4619      	mov	r1, r3
  402804:	3c10      	subs	r4, #16
  402806:	2c10      	cmp	r4, #16
  402808:	dd10      	ble.n	40282c <_vfiprintf_r+0x79c>
  40280a:	1c4b      	adds	r3, r1, #1
  40280c:	3210      	adds	r2, #16
  40280e:	2b07      	cmp	r3, #7
  402810:	9211      	str	r2, [sp, #68]	; 0x44
  402812:	e88e 0060 	stmia.w	lr, {r5, r6}
  402816:	9310      	str	r3, [sp, #64]	; 0x40
  402818:	ddf0      	ble.n	4027fc <_vfiprintf_r+0x76c>
  40281a:	2a00      	cmp	r2, #0
  40281c:	d165      	bne.n	4028ea <_vfiprintf_r+0x85a>
  40281e:	3c10      	subs	r4, #16
  402820:	2c10      	cmp	r4, #16
  402822:	f04f 0001 	mov.w	r0, #1
  402826:	4611      	mov	r1, r2
  402828:	46ce      	mov	lr, r9
  40282a:	dcee      	bgt.n	40280a <_vfiprintf_r+0x77a>
  40282c:	46f2      	mov	sl, lr
  40282e:	4422      	add	r2, r4
  402830:	2807      	cmp	r0, #7
  402832:	9211      	str	r2, [sp, #68]	; 0x44
  402834:	f8ca 5000 	str.w	r5, [sl]
  402838:	f8ca 4004 	str.w	r4, [sl, #4]
  40283c:	9010      	str	r0, [sp, #64]	; 0x40
  40283e:	f300 8085 	bgt.w	40294c <_vfiprintf_r+0x8bc>
  402842:	f10a 0a08 	add.w	sl, sl, #8
  402846:	3001      	adds	r0, #1
  402848:	9905      	ldr	r1, [sp, #20]
  40284a:	f8ca b000 	str.w	fp, [sl]
  40284e:	440a      	add	r2, r1
  402850:	2807      	cmp	r0, #7
  402852:	9211      	str	r2, [sp, #68]	; 0x44
  402854:	f8ca 1004 	str.w	r1, [sl, #4]
  402858:	9010      	str	r0, [sp, #64]	; 0x40
  40285a:	f340 8082 	ble.w	402962 <_vfiprintf_r+0x8d2>
  40285e:	2a00      	cmp	r2, #0
  402860:	f040 8118 	bne.w	402a94 <_vfiprintf_r+0xa04>
  402864:	9b02      	ldr	r3, [sp, #8]
  402866:	9210      	str	r2, [sp, #64]	; 0x40
  402868:	0758      	lsls	r0, r3, #29
  40286a:	d535      	bpl.n	4028d8 <_vfiprintf_r+0x848>
  40286c:	9b08      	ldr	r3, [sp, #32]
  40286e:	9901      	ldr	r1, [sp, #4]
  402870:	1a5c      	subs	r4, r3, r1
  402872:	2c00      	cmp	r4, #0
  402874:	f340 80e7 	ble.w	402a46 <_vfiprintf_r+0x9b6>
  402878:	46ca      	mov	sl, r9
  40287a:	2c10      	cmp	r4, #16
  40287c:	f340 8218 	ble.w	402cb0 <_vfiprintf_r+0xc20>
  402880:	9910      	ldr	r1, [sp, #64]	; 0x40
  402882:	4e8f      	ldr	r6, [pc, #572]	; (402ac0 <_vfiprintf_r+0xa30>)
  402884:	9f06      	ldr	r7, [sp, #24]
  402886:	f8dd b010 	ldr.w	fp, [sp, #16]
  40288a:	2510      	movs	r5, #16
  40288c:	e006      	b.n	40289c <_vfiprintf_r+0x80c>
  40288e:	1c88      	adds	r0, r1, #2
  402890:	f10a 0a08 	add.w	sl, sl, #8
  402894:	4619      	mov	r1, r3
  402896:	3c10      	subs	r4, #16
  402898:	2c10      	cmp	r4, #16
  40289a:	dd11      	ble.n	4028c0 <_vfiprintf_r+0x830>
  40289c:	1c4b      	adds	r3, r1, #1
  40289e:	3210      	adds	r2, #16
  4028a0:	2b07      	cmp	r3, #7
  4028a2:	9211      	str	r2, [sp, #68]	; 0x44
  4028a4:	f8ca 6000 	str.w	r6, [sl]
  4028a8:	f8ca 5004 	str.w	r5, [sl, #4]
  4028ac:	9310      	str	r3, [sp, #64]	; 0x40
  4028ae:	ddee      	ble.n	40288e <_vfiprintf_r+0x7fe>
  4028b0:	bb42      	cbnz	r2, 402904 <_vfiprintf_r+0x874>
  4028b2:	3c10      	subs	r4, #16
  4028b4:	2c10      	cmp	r4, #16
  4028b6:	f04f 0001 	mov.w	r0, #1
  4028ba:	4611      	mov	r1, r2
  4028bc:	46ca      	mov	sl, r9
  4028be:	dced      	bgt.n	40289c <_vfiprintf_r+0x80c>
  4028c0:	4422      	add	r2, r4
  4028c2:	2807      	cmp	r0, #7
  4028c4:	9211      	str	r2, [sp, #68]	; 0x44
  4028c6:	f8ca 6000 	str.w	r6, [sl]
  4028ca:	f8ca 4004 	str.w	r4, [sl, #4]
  4028ce:	9010      	str	r0, [sp, #64]	; 0x40
  4028d0:	dd51      	ble.n	402976 <_vfiprintf_r+0x8e6>
  4028d2:	2a00      	cmp	r2, #0
  4028d4:	f040 819b 	bne.w	402c0e <_vfiprintf_r+0xb7e>
  4028d8:	9b03      	ldr	r3, [sp, #12]
  4028da:	9a08      	ldr	r2, [sp, #32]
  4028dc:	9901      	ldr	r1, [sp, #4]
  4028de:	428a      	cmp	r2, r1
  4028e0:	bfac      	ite	ge
  4028e2:	189b      	addge	r3, r3, r2
  4028e4:	185b      	addlt	r3, r3, r1
  4028e6:	9303      	str	r3, [sp, #12]
  4028e8:	e04e      	b.n	402988 <_vfiprintf_r+0x8f8>
  4028ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4028ec:	4651      	mov	r1, sl
  4028ee:	4638      	mov	r0, r7
  4028f0:	f7ff fb8e 	bl	402010 <__sprint_r.part.0>
  4028f4:	2800      	cmp	r0, #0
  4028f6:	f040 813f 	bne.w	402b78 <_vfiprintf_r+0xae8>
  4028fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4028fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4028fe:	1c48      	adds	r0, r1, #1
  402900:	46ce      	mov	lr, r9
  402902:	e77f      	b.n	402804 <_vfiprintf_r+0x774>
  402904:	aa0f      	add	r2, sp, #60	; 0x3c
  402906:	4659      	mov	r1, fp
  402908:	4638      	mov	r0, r7
  40290a:	f7ff fb81 	bl	402010 <__sprint_r.part.0>
  40290e:	b960      	cbnz	r0, 40292a <_vfiprintf_r+0x89a>
  402910:	9910      	ldr	r1, [sp, #64]	; 0x40
  402912:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402914:	1c48      	adds	r0, r1, #1
  402916:	46ca      	mov	sl, r9
  402918:	e7bd      	b.n	402896 <_vfiprintf_r+0x806>
  40291a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40291c:	f8dd b010 	ldr.w	fp, [sp, #16]
  402920:	2b00      	cmp	r3, #0
  402922:	f040 81d4 	bne.w	402cce <_vfiprintf_r+0xc3e>
  402926:	2300      	movs	r3, #0
  402928:	9310      	str	r3, [sp, #64]	; 0x40
  40292a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40292e:	f013 0f01 	tst.w	r3, #1
  402932:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402936:	d102      	bne.n	40293e <_vfiprintf_r+0x8ae>
  402938:	059a      	lsls	r2, r3, #22
  40293a:	f140 80de 	bpl.w	402afa <_vfiprintf_r+0xa6a>
  40293e:	065b      	lsls	r3, r3, #25
  402940:	f53f acb2 	bmi.w	4022a8 <_vfiprintf_r+0x218>
  402944:	9803      	ldr	r0, [sp, #12]
  402946:	b02d      	add	sp, #180	; 0xb4
  402948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40294c:	2a00      	cmp	r2, #0
  40294e:	f040 8106 	bne.w	402b5e <_vfiprintf_r+0xace>
  402952:	9a05      	ldr	r2, [sp, #20]
  402954:	921d      	str	r2, [sp, #116]	; 0x74
  402956:	2301      	movs	r3, #1
  402958:	9211      	str	r2, [sp, #68]	; 0x44
  40295a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40295e:	9310      	str	r3, [sp, #64]	; 0x40
  402960:	46ca      	mov	sl, r9
  402962:	f10a 0a08 	add.w	sl, sl, #8
  402966:	9b02      	ldr	r3, [sp, #8]
  402968:	0759      	lsls	r1, r3, #29
  40296a:	d504      	bpl.n	402976 <_vfiprintf_r+0x8e6>
  40296c:	9b08      	ldr	r3, [sp, #32]
  40296e:	9901      	ldr	r1, [sp, #4]
  402970:	1a5c      	subs	r4, r3, r1
  402972:	2c00      	cmp	r4, #0
  402974:	dc81      	bgt.n	40287a <_vfiprintf_r+0x7ea>
  402976:	9b03      	ldr	r3, [sp, #12]
  402978:	9908      	ldr	r1, [sp, #32]
  40297a:	9801      	ldr	r0, [sp, #4]
  40297c:	4281      	cmp	r1, r0
  40297e:	bfac      	ite	ge
  402980:	185b      	addge	r3, r3, r1
  402982:	181b      	addlt	r3, r3, r0
  402984:	9303      	str	r3, [sp, #12]
  402986:	bb72      	cbnz	r2, 4029e6 <_vfiprintf_r+0x956>
  402988:	2300      	movs	r3, #0
  40298a:	9310      	str	r3, [sp, #64]	; 0x40
  40298c:	46ca      	mov	sl, r9
  40298e:	f7ff bbbc 	b.w	40210a <_vfiprintf_r+0x7a>
  402992:	aa0f      	add	r2, sp, #60	; 0x3c
  402994:	9904      	ldr	r1, [sp, #16]
  402996:	4620      	mov	r0, r4
  402998:	f7ff fb3a 	bl	402010 <__sprint_r.part.0>
  40299c:	bb50      	cbnz	r0, 4029f4 <_vfiprintf_r+0x964>
  40299e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4029a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4029a2:	f101 0e01 	add.w	lr, r1, #1
  4029a6:	46cc      	mov	ip, r9
  4029a8:	e548      	b.n	40243c <_vfiprintf_r+0x3ac>
  4029aa:	2a00      	cmp	r2, #0
  4029ac:	f040 8140 	bne.w	402c30 <_vfiprintf_r+0xba0>
  4029b0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4029b4:	2900      	cmp	r1, #0
  4029b6:	f000 811b 	beq.w	402bf0 <_vfiprintf_r+0xb60>
  4029ba:	2201      	movs	r2, #1
  4029bc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4029c0:	4610      	mov	r0, r2
  4029c2:	921d      	str	r2, [sp, #116]	; 0x74
  4029c4:	911c      	str	r1, [sp, #112]	; 0x70
  4029c6:	46ca      	mov	sl, r9
  4029c8:	4601      	mov	r1, r0
  4029ca:	f10a 0a08 	add.w	sl, sl, #8
  4029ce:	3001      	adds	r0, #1
  4029d0:	e507      	b.n	4023e2 <_vfiprintf_r+0x352>
  4029d2:	9b02      	ldr	r3, [sp, #8]
  4029d4:	2a01      	cmp	r2, #1
  4029d6:	f000 8098 	beq.w	402b0a <_vfiprintf_r+0xa7a>
  4029da:	2a02      	cmp	r2, #2
  4029dc:	d10d      	bne.n	4029fa <_vfiprintf_r+0x96a>
  4029de:	9302      	str	r3, [sp, #8]
  4029e0:	2600      	movs	r6, #0
  4029e2:	2700      	movs	r7, #0
  4029e4:	e5b0      	b.n	402548 <_vfiprintf_r+0x4b8>
  4029e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4029e8:	9904      	ldr	r1, [sp, #16]
  4029ea:	9806      	ldr	r0, [sp, #24]
  4029ec:	f7ff fb10 	bl	402010 <__sprint_r.part.0>
  4029f0:	2800      	cmp	r0, #0
  4029f2:	d0c9      	beq.n	402988 <_vfiprintf_r+0x8f8>
  4029f4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4029f8:	e797      	b.n	40292a <_vfiprintf_r+0x89a>
  4029fa:	9302      	str	r3, [sp, #8]
  4029fc:	2600      	movs	r6, #0
  4029fe:	2700      	movs	r7, #0
  402a00:	4649      	mov	r1, r9
  402a02:	e000      	b.n	402a06 <_vfiprintf_r+0x976>
  402a04:	4659      	mov	r1, fp
  402a06:	08f2      	lsrs	r2, r6, #3
  402a08:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  402a0c:	08f8      	lsrs	r0, r7, #3
  402a0e:	f006 0307 	and.w	r3, r6, #7
  402a12:	4607      	mov	r7, r0
  402a14:	4616      	mov	r6, r2
  402a16:	3330      	adds	r3, #48	; 0x30
  402a18:	ea56 0207 	orrs.w	r2, r6, r7
  402a1c:	f801 3c01 	strb.w	r3, [r1, #-1]
  402a20:	f101 3bff 	add.w	fp, r1, #4294967295
  402a24:	d1ee      	bne.n	402a04 <_vfiprintf_r+0x974>
  402a26:	9a02      	ldr	r2, [sp, #8]
  402a28:	07d6      	lsls	r6, r2, #31
  402a2a:	f57f ad9d 	bpl.w	402568 <_vfiprintf_r+0x4d8>
  402a2e:	2b30      	cmp	r3, #48	; 0x30
  402a30:	f43f ad9a 	beq.w	402568 <_vfiprintf_r+0x4d8>
  402a34:	3902      	subs	r1, #2
  402a36:	2330      	movs	r3, #48	; 0x30
  402a38:	f80b 3c01 	strb.w	r3, [fp, #-1]
  402a3c:	eba9 0301 	sub.w	r3, r9, r1
  402a40:	9305      	str	r3, [sp, #20]
  402a42:	468b      	mov	fp, r1
  402a44:	e476      	b.n	402334 <_vfiprintf_r+0x2a4>
  402a46:	9b03      	ldr	r3, [sp, #12]
  402a48:	9a08      	ldr	r2, [sp, #32]
  402a4a:	428a      	cmp	r2, r1
  402a4c:	bfac      	ite	ge
  402a4e:	189b      	addge	r3, r3, r2
  402a50:	185b      	addlt	r3, r3, r1
  402a52:	9303      	str	r3, [sp, #12]
  402a54:	e798      	b.n	402988 <_vfiprintf_r+0x8f8>
  402a56:	2202      	movs	r2, #2
  402a58:	e44d      	b.n	4022f6 <_vfiprintf_r+0x266>
  402a5a:	2f00      	cmp	r7, #0
  402a5c:	bf08      	it	eq
  402a5e:	2e0a      	cmpeq	r6, #10
  402a60:	d352      	bcc.n	402b08 <_vfiprintf_r+0xa78>
  402a62:	46cb      	mov	fp, r9
  402a64:	4630      	mov	r0, r6
  402a66:	4639      	mov	r1, r7
  402a68:	220a      	movs	r2, #10
  402a6a:	2300      	movs	r3, #0
  402a6c:	f001 ff04 	bl	404878 <__aeabi_uldivmod>
  402a70:	3230      	adds	r2, #48	; 0x30
  402a72:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  402a76:	4630      	mov	r0, r6
  402a78:	4639      	mov	r1, r7
  402a7a:	2300      	movs	r3, #0
  402a7c:	220a      	movs	r2, #10
  402a7e:	f001 fefb 	bl	404878 <__aeabi_uldivmod>
  402a82:	4606      	mov	r6, r0
  402a84:	460f      	mov	r7, r1
  402a86:	ea56 0307 	orrs.w	r3, r6, r7
  402a8a:	d1eb      	bne.n	402a64 <_vfiprintf_r+0x9d4>
  402a8c:	e56c      	b.n	402568 <_vfiprintf_r+0x4d8>
  402a8e:	9405      	str	r4, [sp, #20]
  402a90:	46cb      	mov	fp, r9
  402a92:	e44f      	b.n	402334 <_vfiprintf_r+0x2a4>
  402a94:	aa0f      	add	r2, sp, #60	; 0x3c
  402a96:	9904      	ldr	r1, [sp, #16]
  402a98:	9806      	ldr	r0, [sp, #24]
  402a9a:	f7ff fab9 	bl	402010 <__sprint_r.part.0>
  402a9e:	2800      	cmp	r0, #0
  402aa0:	d1a8      	bne.n	4029f4 <_vfiprintf_r+0x964>
  402aa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402aa4:	46ca      	mov	sl, r9
  402aa6:	e75e      	b.n	402966 <_vfiprintf_r+0x8d6>
  402aa8:	aa0f      	add	r2, sp, #60	; 0x3c
  402aaa:	9904      	ldr	r1, [sp, #16]
  402aac:	9806      	ldr	r0, [sp, #24]
  402aae:	f7ff faaf 	bl	402010 <__sprint_r.part.0>
  402ab2:	2800      	cmp	r0, #0
  402ab4:	d19e      	bne.n	4029f4 <_vfiprintf_r+0x964>
  402ab6:	46ca      	mov	sl, r9
  402ab8:	f7ff bbc0 	b.w	40223c <_vfiprintf_r+0x1ac>
  402abc:	00404cb4 	.word	0x00404cb4
  402ac0:	00404ca4 	.word	0x00404ca4
  402ac4:	3104      	adds	r1, #4
  402ac6:	6816      	ldr	r6, [r2, #0]
  402ac8:	9107      	str	r1, [sp, #28]
  402aca:	2201      	movs	r2, #1
  402acc:	2700      	movs	r7, #0
  402ace:	e412      	b.n	4022f6 <_vfiprintf_r+0x266>
  402ad0:	9807      	ldr	r0, [sp, #28]
  402ad2:	4601      	mov	r1, r0
  402ad4:	3104      	adds	r1, #4
  402ad6:	6806      	ldr	r6, [r0, #0]
  402ad8:	9107      	str	r1, [sp, #28]
  402ada:	2700      	movs	r7, #0
  402adc:	e40b      	b.n	4022f6 <_vfiprintf_r+0x266>
  402ade:	680e      	ldr	r6, [r1, #0]
  402ae0:	3104      	adds	r1, #4
  402ae2:	9107      	str	r1, [sp, #28]
  402ae4:	2700      	movs	r7, #0
  402ae6:	e591      	b.n	40260c <_vfiprintf_r+0x57c>
  402ae8:	9907      	ldr	r1, [sp, #28]
  402aea:	680e      	ldr	r6, [r1, #0]
  402aec:	460a      	mov	r2, r1
  402aee:	17f7      	asrs	r7, r6, #31
  402af0:	3204      	adds	r2, #4
  402af2:	9207      	str	r2, [sp, #28]
  402af4:	4630      	mov	r0, r6
  402af6:	4639      	mov	r1, r7
  402af8:	e50f      	b.n	40251a <_vfiprintf_r+0x48a>
  402afa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402afe:	f000 fe7f 	bl	403800 <__retarget_lock_release_recursive>
  402b02:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402b06:	e71a      	b.n	40293e <_vfiprintf_r+0x8ae>
  402b08:	9b02      	ldr	r3, [sp, #8]
  402b0a:	9302      	str	r3, [sp, #8]
  402b0c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402b10:	3630      	adds	r6, #48	; 0x30
  402b12:	2301      	movs	r3, #1
  402b14:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  402b18:	9305      	str	r3, [sp, #20]
  402b1a:	e40b      	b.n	402334 <_vfiprintf_r+0x2a4>
  402b1c:	aa0f      	add	r2, sp, #60	; 0x3c
  402b1e:	9904      	ldr	r1, [sp, #16]
  402b20:	9806      	ldr	r0, [sp, #24]
  402b22:	f7ff fa75 	bl	402010 <__sprint_r.part.0>
  402b26:	2800      	cmp	r0, #0
  402b28:	f47f af64 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402b2c:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b30:	1c48      	adds	r0, r1, #1
  402b32:	46ca      	mov	sl, r9
  402b34:	e651      	b.n	4027da <_vfiprintf_r+0x74a>
  402b36:	aa0f      	add	r2, sp, #60	; 0x3c
  402b38:	9904      	ldr	r1, [sp, #16]
  402b3a:	9806      	ldr	r0, [sp, #24]
  402b3c:	f7ff fa68 	bl	402010 <__sprint_r.part.0>
  402b40:	2800      	cmp	r0, #0
  402b42:	f47f af57 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402b46:	9910      	ldr	r1, [sp, #64]	; 0x40
  402b48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b4a:	1c48      	adds	r0, r1, #1
  402b4c:	46ca      	mov	sl, r9
  402b4e:	e448      	b.n	4023e2 <_vfiprintf_r+0x352>
  402b50:	2a00      	cmp	r2, #0
  402b52:	f040 8091 	bne.w	402c78 <_vfiprintf_r+0xbe8>
  402b56:	2001      	movs	r0, #1
  402b58:	4611      	mov	r1, r2
  402b5a:	46ca      	mov	sl, r9
  402b5c:	e641      	b.n	4027e2 <_vfiprintf_r+0x752>
  402b5e:	aa0f      	add	r2, sp, #60	; 0x3c
  402b60:	9904      	ldr	r1, [sp, #16]
  402b62:	9806      	ldr	r0, [sp, #24]
  402b64:	f7ff fa54 	bl	402010 <__sprint_r.part.0>
  402b68:	2800      	cmp	r0, #0
  402b6a:	f47f af43 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402b6e:	9810      	ldr	r0, [sp, #64]	; 0x40
  402b70:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b72:	3001      	adds	r0, #1
  402b74:	46ca      	mov	sl, r9
  402b76:	e667      	b.n	402848 <_vfiprintf_r+0x7b8>
  402b78:	46d3      	mov	fp, sl
  402b7a:	e6d6      	b.n	40292a <_vfiprintf_r+0x89a>
  402b7c:	9e07      	ldr	r6, [sp, #28]
  402b7e:	3607      	adds	r6, #7
  402b80:	f026 0207 	bic.w	r2, r6, #7
  402b84:	f102 0108 	add.w	r1, r2, #8
  402b88:	e9d2 6700 	ldrd	r6, r7, [r2]
  402b8c:	9107      	str	r1, [sp, #28]
  402b8e:	2201      	movs	r2, #1
  402b90:	f7ff bbb1 	b.w	4022f6 <_vfiprintf_r+0x266>
  402b94:	9e07      	ldr	r6, [sp, #28]
  402b96:	3607      	adds	r6, #7
  402b98:	f026 0607 	bic.w	r6, r6, #7
  402b9c:	e9d6 0100 	ldrd	r0, r1, [r6]
  402ba0:	f106 0208 	add.w	r2, r6, #8
  402ba4:	9207      	str	r2, [sp, #28]
  402ba6:	4606      	mov	r6, r0
  402ba8:	460f      	mov	r7, r1
  402baa:	e4b6      	b.n	40251a <_vfiprintf_r+0x48a>
  402bac:	9e07      	ldr	r6, [sp, #28]
  402bae:	3607      	adds	r6, #7
  402bb0:	f026 0207 	bic.w	r2, r6, #7
  402bb4:	f102 0108 	add.w	r1, r2, #8
  402bb8:	e9d2 6700 	ldrd	r6, r7, [r2]
  402bbc:	9107      	str	r1, [sp, #28]
  402bbe:	2200      	movs	r2, #0
  402bc0:	f7ff bb99 	b.w	4022f6 <_vfiprintf_r+0x266>
  402bc4:	9e07      	ldr	r6, [sp, #28]
  402bc6:	3607      	adds	r6, #7
  402bc8:	f026 0107 	bic.w	r1, r6, #7
  402bcc:	f101 0008 	add.w	r0, r1, #8
  402bd0:	9007      	str	r0, [sp, #28]
  402bd2:	e9d1 6700 	ldrd	r6, r7, [r1]
  402bd6:	e519      	b.n	40260c <_vfiprintf_r+0x57c>
  402bd8:	46cb      	mov	fp, r9
  402bda:	f7ff bbab 	b.w	402334 <_vfiprintf_r+0x2a4>
  402bde:	252d      	movs	r5, #45	; 0x2d
  402be0:	4276      	negs	r6, r6
  402be2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  402be6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402bea:	2201      	movs	r2, #1
  402bec:	f7ff bb88 	b.w	402300 <_vfiprintf_r+0x270>
  402bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402bf2:	b9b3      	cbnz	r3, 402c22 <_vfiprintf_r+0xb92>
  402bf4:	4611      	mov	r1, r2
  402bf6:	2001      	movs	r0, #1
  402bf8:	46ca      	mov	sl, r9
  402bfa:	e5f2      	b.n	4027e2 <_vfiprintf_r+0x752>
  402bfc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c00:	f000 fdfe 	bl	403800 <__retarget_lock_release_recursive>
  402c04:	f04f 33ff 	mov.w	r3, #4294967295
  402c08:	9303      	str	r3, [sp, #12]
  402c0a:	f7ff bb50 	b.w	4022ae <_vfiprintf_r+0x21e>
  402c0e:	aa0f      	add	r2, sp, #60	; 0x3c
  402c10:	9904      	ldr	r1, [sp, #16]
  402c12:	9806      	ldr	r0, [sp, #24]
  402c14:	f7ff f9fc 	bl	402010 <__sprint_r.part.0>
  402c18:	2800      	cmp	r0, #0
  402c1a:	f47f aeeb 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402c1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c20:	e6a9      	b.n	402976 <_vfiprintf_r+0x8e6>
  402c22:	ab0e      	add	r3, sp, #56	; 0x38
  402c24:	2202      	movs	r2, #2
  402c26:	931c      	str	r3, [sp, #112]	; 0x70
  402c28:	921d      	str	r2, [sp, #116]	; 0x74
  402c2a:	2001      	movs	r0, #1
  402c2c:	46ca      	mov	sl, r9
  402c2e:	e5d0      	b.n	4027d2 <_vfiprintf_r+0x742>
  402c30:	aa0f      	add	r2, sp, #60	; 0x3c
  402c32:	9904      	ldr	r1, [sp, #16]
  402c34:	9806      	ldr	r0, [sp, #24]
  402c36:	f7ff f9eb 	bl	402010 <__sprint_r.part.0>
  402c3a:	2800      	cmp	r0, #0
  402c3c:	f47f aeda 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402c40:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c42:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c44:	1c48      	adds	r0, r1, #1
  402c46:	46ca      	mov	sl, r9
  402c48:	e5a4      	b.n	402794 <_vfiprintf_r+0x704>
  402c4a:	9a07      	ldr	r2, [sp, #28]
  402c4c:	9903      	ldr	r1, [sp, #12]
  402c4e:	6813      	ldr	r3, [r2, #0]
  402c50:	17cd      	asrs	r5, r1, #31
  402c52:	4608      	mov	r0, r1
  402c54:	3204      	adds	r2, #4
  402c56:	4629      	mov	r1, r5
  402c58:	9207      	str	r2, [sp, #28]
  402c5a:	e9c3 0100 	strd	r0, r1, [r3]
  402c5e:	f7ff ba54 	b.w	40210a <_vfiprintf_r+0x7a>
  402c62:	4658      	mov	r0, fp
  402c64:	9607      	str	r6, [sp, #28]
  402c66:	9302      	str	r3, [sp, #8]
  402c68:	f001 fbca 	bl	404400 <strlen>
  402c6c:	2400      	movs	r4, #0
  402c6e:	9005      	str	r0, [sp, #20]
  402c70:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402c74:	f7ff bb5e 	b.w	402334 <_vfiprintf_r+0x2a4>
  402c78:	aa0f      	add	r2, sp, #60	; 0x3c
  402c7a:	9904      	ldr	r1, [sp, #16]
  402c7c:	9806      	ldr	r0, [sp, #24]
  402c7e:	f7ff f9c7 	bl	402010 <__sprint_r.part.0>
  402c82:	2800      	cmp	r0, #0
  402c84:	f47f aeb6 	bne.w	4029f4 <_vfiprintf_r+0x964>
  402c88:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c8c:	1c48      	adds	r0, r1, #1
  402c8e:	46ca      	mov	sl, r9
  402c90:	e5a7      	b.n	4027e2 <_vfiprintf_r+0x752>
  402c92:	9910      	ldr	r1, [sp, #64]	; 0x40
  402c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c96:	4e20      	ldr	r6, [pc, #128]	; (402d18 <_vfiprintf_r+0xc88>)
  402c98:	3101      	adds	r1, #1
  402c9a:	f7ff bb90 	b.w	4023be <_vfiprintf_r+0x32e>
  402c9e:	2c06      	cmp	r4, #6
  402ca0:	bf28      	it	cs
  402ca2:	2406      	movcs	r4, #6
  402ca4:	9405      	str	r4, [sp, #20]
  402ca6:	9607      	str	r6, [sp, #28]
  402ca8:	9401      	str	r4, [sp, #4]
  402caa:	f8df b070 	ldr.w	fp, [pc, #112]	; 402d1c <_vfiprintf_r+0xc8c>
  402cae:	e4d5      	b.n	40265c <_vfiprintf_r+0x5cc>
  402cb0:	9810      	ldr	r0, [sp, #64]	; 0x40
  402cb2:	4e19      	ldr	r6, [pc, #100]	; (402d18 <_vfiprintf_r+0xc88>)
  402cb4:	3001      	adds	r0, #1
  402cb6:	e603      	b.n	4028c0 <_vfiprintf_r+0x830>
  402cb8:	9405      	str	r4, [sp, #20]
  402cba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402cbe:	9607      	str	r6, [sp, #28]
  402cc0:	9302      	str	r3, [sp, #8]
  402cc2:	4604      	mov	r4, r0
  402cc4:	f7ff bb36 	b.w	402334 <_vfiprintf_r+0x2a4>
  402cc8:	4686      	mov	lr, r0
  402cca:	f7ff bbce 	b.w	40246a <_vfiprintf_r+0x3da>
  402cce:	9806      	ldr	r0, [sp, #24]
  402cd0:	aa0f      	add	r2, sp, #60	; 0x3c
  402cd2:	4659      	mov	r1, fp
  402cd4:	f7ff f99c 	bl	402010 <__sprint_r.part.0>
  402cd8:	2800      	cmp	r0, #0
  402cda:	f43f ae24 	beq.w	402926 <_vfiprintf_r+0x896>
  402cde:	e624      	b.n	40292a <_vfiprintf_r+0x89a>
  402ce0:	9907      	ldr	r1, [sp, #28]
  402ce2:	f898 2001 	ldrb.w	r2, [r8, #1]
  402ce6:	680c      	ldr	r4, [r1, #0]
  402ce8:	3104      	adds	r1, #4
  402cea:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  402cee:	46b8      	mov	r8, r7
  402cf0:	9107      	str	r1, [sp, #28]
  402cf2:	f7ff ba3f 	b.w	402174 <_vfiprintf_r+0xe4>
  402cf6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402cfa:	e43c      	b.n	402576 <_vfiprintf_r+0x4e6>
  402cfc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402d00:	e521      	b.n	402746 <_vfiprintf_r+0x6b6>
  402d02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402d06:	f7ff bbf4 	b.w	4024f2 <_vfiprintf_r+0x462>
  402d0a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402d0e:	e491      	b.n	402634 <_vfiprintf_r+0x5a4>
  402d10:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402d14:	e469      	b.n	4025ea <_vfiprintf_r+0x55a>
  402d16:	bf00      	nop
  402d18:	00404ca4 	.word	0x00404ca4
  402d1c:	00404c9c 	.word	0x00404c9c

00402d20 <__sbprintf>:
  402d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402d24:	460c      	mov	r4, r1
  402d26:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  402d2a:	8989      	ldrh	r1, [r1, #12]
  402d2c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402d2e:	89e5      	ldrh	r5, [r4, #14]
  402d30:	9619      	str	r6, [sp, #100]	; 0x64
  402d32:	f021 0102 	bic.w	r1, r1, #2
  402d36:	4606      	mov	r6, r0
  402d38:	69e0      	ldr	r0, [r4, #28]
  402d3a:	f8ad 100c 	strh.w	r1, [sp, #12]
  402d3e:	4617      	mov	r7, r2
  402d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402d46:	f8ad 500e 	strh.w	r5, [sp, #14]
  402d4a:	4698      	mov	r8, r3
  402d4c:	ad1a      	add	r5, sp, #104	; 0x68
  402d4e:	2300      	movs	r3, #0
  402d50:	9007      	str	r0, [sp, #28]
  402d52:	a816      	add	r0, sp, #88	; 0x58
  402d54:	9209      	str	r2, [sp, #36]	; 0x24
  402d56:	9306      	str	r3, [sp, #24]
  402d58:	9500      	str	r5, [sp, #0]
  402d5a:	9504      	str	r5, [sp, #16]
  402d5c:	9102      	str	r1, [sp, #8]
  402d5e:	9105      	str	r1, [sp, #20]
  402d60:	f000 fd48 	bl	4037f4 <__retarget_lock_init_recursive>
  402d64:	4643      	mov	r3, r8
  402d66:	463a      	mov	r2, r7
  402d68:	4669      	mov	r1, sp
  402d6a:	4630      	mov	r0, r6
  402d6c:	f7ff f990 	bl	402090 <_vfiprintf_r>
  402d70:	1e05      	subs	r5, r0, #0
  402d72:	db07      	blt.n	402d84 <__sbprintf+0x64>
  402d74:	4630      	mov	r0, r6
  402d76:	4669      	mov	r1, sp
  402d78:	f000 f928 	bl	402fcc <_fflush_r>
  402d7c:	2800      	cmp	r0, #0
  402d7e:	bf18      	it	ne
  402d80:	f04f 35ff 	movne.w	r5, #4294967295
  402d84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402d88:	065b      	lsls	r3, r3, #25
  402d8a:	d503      	bpl.n	402d94 <__sbprintf+0x74>
  402d8c:	89a3      	ldrh	r3, [r4, #12]
  402d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d92:	81a3      	strh	r3, [r4, #12]
  402d94:	9816      	ldr	r0, [sp, #88]	; 0x58
  402d96:	f000 fd2f 	bl	4037f8 <__retarget_lock_close_recursive>
  402d9a:	4628      	mov	r0, r5
  402d9c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402da4 <__swsetup_r>:
  402da4:	b538      	push	{r3, r4, r5, lr}
  402da6:	4b30      	ldr	r3, [pc, #192]	; (402e68 <__swsetup_r+0xc4>)
  402da8:	681b      	ldr	r3, [r3, #0]
  402daa:	4605      	mov	r5, r0
  402dac:	460c      	mov	r4, r1
  402dae:	b113      	cbz	r3, 402db6 <__swsetup_r+0x12>
  402db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402db2:	2a00      	cmp	r2, #0
  402db4:	d038      	beq.n	402e28 <__swsetup_r+0x84>
  402db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402dba:	b293      	uxth	r3, r2
  402dbc:	0718      	lsls	r0, r3, #28
  402dbe:	d50c      	bpl.n	402dda <__swsetup_r+0x36>
  402dc0:	6920      	ldr	r0, [r4, #16]
  402dc2:	b1a8      	cbz	r0, 402df0 <__swsetup_r+0x4c>
  402dc4:	f013 0201 	ands.w	r2, r3, #1
  402dc8:	d01e      	beq.n	402e08 <__swsetup_r+0x64>
  402dca:	6963      	ldr	r3, [r4, #20]
  402dcc:	2200      	movs	r2, #0
  402dce:	425b      	negs	r3, r3
  402dd0:	61a3      	str	r3, [r4, #24]
  402dd2:	60a2      	str	r2, [r4, #8]
  402dd4:	b1f0      	cbz	r0, 402e14 <__swsetup_r+0x70>
  402dd6:	2000      	movs	r0, #0
  402dd8:	bd38      	pop	{r3, r4, r5, pc}
  402dda:	06d9      	lsls	r1, r3, #27
  402ddc:	d53c      	bpl.n	402e58 <__swsetup_r+0xb4>
  402dde:	0758      	lsls	r0, r3, #29
  402de0:	d426      	bmi.n	402e30 <__swsetup_r+0x8c>
  402de2:	6920      	ldr	r0, [r4, #16]
  402de4:	f042 0308 	orr.w	r3, r2, #8
  402de8:	81a3      	strh	r3, [r4, #12]
  402dea:	b29b      	uxth	r3, r3
  402dec:	2800      	cmp	r0, #0
  402dee:	d1e9      	bne.n	402dc4 <__swsetup_r+0x20>
  402df0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402df4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402df8:	d0e4      	beq.n	402dc4 <__swsetup_r+0x20>
  402dfa:	4628      	mov	r0, r5
  402dfc:	4621      	mov	r1, r4
  402dfe:	f000 fd2f 	bl	403860 <__smakebuf_r>
  402e02:	89a3      	ldrh	r3, [r4, #12]
  402e04:	6920      	ldr	r0, [r4, #16]
  402e06:	e7dd      	b.n	402dc4 <__swsetup_r+0x20>
  402e08:	0799      	lsls	r1, r3, #30
  402e0a:	bf58      	it	pl
  402e0c:	6962      	ldrpl	r2, [r4, #20]
  402e0e:	60a2      	str	r2, [r4, #8]
  402e10:	2800      	cmp	r0, #0
  402e12:	d1e0      	bne.n	402dd6 <__swsetup_r+0x32>
  402e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e18:	061a      	lsls	r2, r3, #24
  402e1a:	d5dd      	bpl.n	402dd8 <__swsetup_r+0x34>
  402e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402e20:	81a3      	strh	r3, [r4, #12]
  402e22:	f04f 30ff 	mov.w	r0, #4294967295
  402e26:	bd38      	pop	{r3, r4, r5, pc}
  402e28:	4618      	mov	r0, r3
  402e2a:	f000 f927 	bl	40307c <__sinit>
  402e2e:	e7c2      	b.n	402db6 <__swsetup_r+0x12>
  402e30:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402e32:	b151      	cbz	r1, 402e4a <__swsetup_r+0xa6>
  402e34:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402e38:	4299      	cmp	r1, r3
  402e3a:	d004      	beq.n	402e46 <__swsetup_r+0xa2>
  402e3c:	4628      	mov	r0, r5
  402e3e:	f000 fa43 	bl	4032c8 <_free_r>
  402e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402e46:	2300      	movs	r3, #0
  402e48:	6323      	str	r3, [r4, #48]	; 0x30
  402e4a:	2300      	movs	r3, #0
  402e4c:	6920      	ldr	r0, [r4, #16]
  402e4e:	6063      	str	r3, [r4, #4]
  402e50:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402e54:	6020      	str	r0, [r4, #0]
  402e56:	e7c5      	b.n	402de4 <__swsetup_r+0x40>
  402e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402e5c:	2309      	movs	r3, #9
  402e5e:	602b      	str	r3, [r5, #0]
  402e60:	f04f 30ff 	mov.w	r0, #4294967295
  402e64:	81a2      	strh	r2, [r4, #12]
  402e66:	bd38      	pop	{r3, r4, r5, pc}
  402e68:	20400010 	.word	0x20400010

00402e6c <register_fini>:
  402e6c:	4b02      	ldr	r3, [pc, #8]	; (402e78 <register_fini+0xc>)
  402e6e:	b113      	cbz	r3, 402e76 <register_fini+0xa>
  402e70:	4802      	ldr	r0, [pc, #8]	; (402e7c <register_fini+0x10>)
  402e72:	f000 b805 	b.w	402e80 <atexit>
  402e76:	4770      	bx	lr
  402e78:	00000000 	.word	0x00000000
  402e7c:	004030ed 	.word	0x004030ed

00402e80 <atexit>:
  402e80:	2300      	movs	r3, #0
  402e82:	4601      	mov	r1, r0
  402e84:	461a      	mov	r2, r3
  402e86:	4618      	mov	r0, r3
  402e88:	f001 bbce 	b.w	404628 <__register_exitproc>

00402e8c <__sflush_r>:
  402e8c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402e90:	b29a      	uxth	r2, r3
  402e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e96:	460d      	mov	r5, r1
  402e98:	0711      	lsls	r1, r2, #28
  402e9a:	4680      	mov	r8, r0
  402e9c:	d43a      	bmi.n	402f14 <__sflush_r+0x88>
  402e9e:	686a      	ldr	r2, [r5, #4]
  402ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402ea4:	2a00      	cmp	r2, #0
  402ea6:	81ab      	strh	r3, [r5, #12]
  402ea8:	dd6f      	ble.n	402f8a <__sflush_r+0xfe>
  402eaa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402eac:	2c00      	cmp	r4, #0
  402eae:	d049      	beq.n	402f44 <__sflush_r+0xb8>
  402eb0:	2200      	movs	r2, #0
  402eb2:	b29b      	uxth	r3, r3
  402eb4:	f8d8 6000 	ldr.w	r6, [r8]
  402eb8:	f8c8 2000 	str.w	r2, [r8]
  402ebc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402ec0:	d067      	beq.n	402f92 <__sflush_r+0x106>
  402ec2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402ec4:	075f      	lsls	r7, r3, #29
  402ec6:	d505      	bpl.n	402ed4 <__sflush_r+0x48>
  402ec8:	6869      	ldr	r1, [r5, #4]
  402eca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402ecc:	1a52      	subs	r2, r2, r1
  402ece:	b10b      	cbz	r3, 402ed4 <__sflush_r+0x48>
  402ed0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402ed2:	1ad2      	subs	r2, r2, r3
  402ed4:	2300      	movs	r3, #0
  402ed6:	69e9      	ldr	r1, [r5, #28]
  402ed8:	4640      	mov	r0, r8
  402eda:	47a0      	blx	r4
  402edc:	1c44      	adds	r4, r0, #1
  402ede:	d03c      	beq.n	402f5a <__sflush_r+0xce>
  402ee0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402ee4:	692a      	ldr	r2, [r5, #16]
  402ee6:	602a      	str	r2, [r5, #0]
  402ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402eec:	2200      	movs	r2, #0
  402eee:	81ab      	strh	r3, [r5, #12]
  402ef0:	04db      	lsls	r3, r3, #19
  402ef2:	606a      	str	r2, [r5, #4]
  402ef4:	d447      	bmi.n	402f86 <__sflush_r+0xfa>
  402ef6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402ef8:	f8c8 6000 	str.w	r6, [r8]
  402efc:	b311      	cbz	r1, 402f44 <__sflush_r+0xb8>
  402efe:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402f02:	4299      	cmp	r1, r3
  402f04:	d002      	beq.n	402f0c <__sflush_r+0x80>
  402f06:	4640      	mov	r0, r8
  402f08:	f000 f9de 	bl	4032c8 <_free_r>
  402f0c:	2000      	movs	r0, #0
  402f0e:	6328      	str	r0, [r5, #48]	; 0x30
  402f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f14:	692e      	ldr	r6, [r5, #16]
  402f16:	b1ae      	cbz	r6, 402f44 <__sflush_r+0xb8>
  402f18:	682c      	ldr	r4, [r5, #0]
  402f1a:	602e      	str	r6, [r5, #0]
  402f1c:	0791      	lsls	r1, r2, #30
  402f1e:	bf0c      	ite	eq
  402f20:	696b      	ldreq	r3, [r5, #20]
  402f22:	2300      	movne	r3, #0
  402f24:	1ba4      	subs	r4, r4, r6
  402f26:	60ab      	str	r3, [r5, #8]
  402f28:	e00a      	b.n	402f40 <__sflush_r+0xb4>
  402f2a:	4623      	mov	r3, r4
  402f2c:	4632      	mov	r2, r6
  402f2e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402f30:	69e9      	ldr	r1, [r5, #28]
  402f32:	4640      	mov	r0, r8
  402f34:	47b8      	blx	r7
  402f36:	2800      	cmp	r0, #0
  402f38:	eba4 0400 	sub.w	r4, r4, r0
  402f3c:	4406      	add	r6, r0
  402f3e:	dd04      	ble.n	402f4a <__sflush_r+0xbe>
  402f40:	2c00      	cmp	r4, #0
  402f42:	dcf2      	bgt.n	402f2a <__sflush_r+0x9e>
  402f44:	2000      	movs	r0, #0
  402f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f4a:	89ab      	ldrh	r3, [r5, #12]
  402f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402f50:	81ab      	strh	r3, [r5, #12]
  402f52:	f04f 30ff 	mov.w	r0, #4294967295
  402f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f5a:	f8d8 4000 	ldr.w	r4, [r8]
  402f5e:	2c1d      	cmp	r4, #29
  402f60:	d8f3      	bhi.n	402f4a <__sflush_r+0xbe>
  402f62:	4b19      	ldr	r3, [pc, #100]	; (402fc8 <__sflush_r+0x13c>)
  402f64:	40e3      	lsrs	r3, r4
  402f66:	43db      	mvns	r3, r3
  402f68:	f013 0301 	ands.w	r3, r3, #1
  402f6c:	d1ed      	bne.n	402f4a <__sflush_r+0xbe>
  402f6e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402f72:	606b      	str	r3, [r5, #4]
  402f74:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402f78:	6929      	ldr	r1, [r5, #16]
  402f7a:	81ab      	strh	r3, [r5, #12]
  402f7c:	04da      	lsls	r2, r3, #19
  402f7e:	6029      	str	r1, [r5, #0]
  402f80:	d5b9      	bpl.n	402ef6 <__sflush_r+0x6a>
  402f82:	2c00      	cmp	r4, #0
  402f84:	d1b7      	bne.n	402ef6 <__sflush_r+0x6a>
  402f86:	6528      	str	r0, [r5, #80]	; 0x50
  402f88:	e7b5      	b.n	402ef6 <__sflush_r+0x6a>
  402f8a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402f8c:	2a00      	cmp	r2, #0
  402f8e:	dc8c      	bgt.n	402eaa <__sflush_r+0x1e>
  402f90:	e7d8      	b.n	402f44 <__sflush_r+0xb8>
  402f92:	2301      	movs	r3, #1
  402f94:	69e9      	ldr	r1, [r5, #28]
  402f96:	4640      	mov	r0, r8
  402f98:	47a0      	blx	r4
  402f9a:	1c43      	adds	r3, r0, #1
  402f9c:	4602      	mov	r2, r0
  402f9e:	d002      	beq.n	402fa6 <__sflush_r+0x11a>
  402fa0:	89ab      	ldrh	r3, [r5, #12]
  402fa2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402fa4:	e78e      	b.n	402ec4 <__sflush_r+0x38>
  402fa6:	f8d8 3000 	ldr.w	r3, [r8]
  402faa:	2b00      	cmp	r3, #0
  402fac:	d0f8      	beq.n	402fa0 <__sflush_r+0x114>
  402fae:	2b1d      	cmp	r3, #29
  402fb0:	d001      	beq.n	402fb6 <__sflush_r+0x12a>
  402fb2:	2b16      	cmp	r3, #22
  402fb4:	d102      	bne.n	402fbc <__sflush_r+0x130>
  402fb6:	f8c8 6000 	str.w	r6, [r8]
  402fba:	e7c3      	b.n	402f44 <__sflush_r+0xb8>
  402fbc:	89ab      	ldrh	r3, [r5, #12]
  402fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402fc2:	81ab      	strh	r3, [r5, #12]
  402fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402fc8:	20400001 	.word	0x20400001

00402fcc <_fflush_r>:
  402fcc:	b538      	push	{r3, r4, r5, lr}
  402fce:	460d      	mov	r5, r1
  402fd0:	4604      	mov	r4, r0
  402fd2:	b108      	cbz	r0, 402fd8 <_fflush_r+0xc>
  402fd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402fd6:	b1bb      	cbz	r3, 403008 <_fflush_r+0x3c>
  402fd8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402fdc:	b188      	cbz	r0, 403002 <_fflush_r+0x36>
  402fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402fe0:	07db      	lsls	r3, r3, #31
  402fe2:	d401      	bmi.n	402fe8 <_fflush_r+0x1c>
  402fe4:	0581      	lsls	r1, r0, #22
  402fe6:	d517      	bpl.n	403018 <_fflush_r+0x4c>
  402fe8:	4620      	mov	r0, r4
  402fea:	4629      	mov	r1, r5
  402fec:	f7ff ff4e 	bl	402e8c <__sflush_r>
  402ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  402ff2:	07da      	lsls	r2, r3, #31
  402ff4:	4604      	mov	r4, r0
  402ff6:	d402      	bmi.n	402ffe <_fflush_r+0x32>
  402ff8:	89ab      	ldrh	r3, [r5, #12]
  402ffa:	059b      	lsls	r3, r3, #22
  402ffc:	d507      	bpl.n	40300e <_fflush_r+0x42>
  402ffe:	4620      	mov	r0, r4
  403000:	bd38      	pop	{r3, r4, r5, pc}
  403002:	4604      	mov	r4, r0
  403004:	4620      	mov	r0, r4
  403006:	bd38      	pop	{r3, r4, r5, pc}
  403008:	f000 f838 	bl	40307c <__sinit>
  40300c:	e7e4      	b.n	402fd8 <_fflush_r+0xc>
  40300e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403010:	f000 fbf6 	bl	403800 <__retarget_lock_release_recursive>
  403014:	4620      	mov	r0, r4
  403016:	bd38      	pop	{r3, r4, r5, pc}
  403018:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40301a:	f000 fbef 	bl	4037fc <__retarget_lock_acquire_recursive>
  40301e:	e7e3      	b.n	402fe8 <_fflush_r+0x1c>

00403020 <_cleanup_r>:
  403020:	4901      	ldr	r1, [pc, #4]	; (403028 <_cleanup_r+0x8>)
  403022:	f000 bbaf 	b.w	403784 <_fwalk_reent>
  403026:	bf00      	nop
  403028:	00404711 	.word	0x00404711

0040302c <std.isra.0>:
  40302c:	b510      	push	{r4, lr}
  40302e:	2300      	movs	r3, #0
  403030:	4604      	mov	r4, r0
  403032:	8181      	strh	r1, [r0, #12]
  403034:	81c2      	strh	r2, [r0, #14]
  403036:	6003      	str	r3, [r0, #0]
  403038:	6043      	str	r3, [r0, #4]
  40303a:	6083      	str	r3, [r0, #8]
  40303c:	6643      	str	r3, [r0, #100]	; 0x64
  40303e:	6103      	str	r3, [r0, #16]
  403040:	6143      	str	r3, [r0, #20]
  403042:	6183      	str	r3, [r0, #24]
  403044:	4619      	mov	r1, r3
  403046:	2208      	movs	r2, #8
  403048:	305c      	adds	r0, #92	; 0x5c
  40304a:	f7fe ff93 	bl	401f74 <memset>
  40304e:	4807      	ldr	r0, [pc, #28]	; (40306c <std.isra.0+0x40>)
  403050:	4907      	ldr	r1, [pc, #28]	; (403070 <std.isra.0+0x44>)
  403052:	4a08      	ldr	r2, [pc, #32]	; (403074 <std.isra.0+0x48>)
  403054:	4b08      	ldr	r3, [pc, #32]	; (403078 <std.isra.0+0x4c>)
  403056:	6220      	str	r0, [r4, #32]
  403058:	61e4      	str	r4, [r4, #28]
  40305a:	6261      	str	r1, [r4, #36]	; 0x24
  40305c:	62a2      	str	r2, [r4, #40]	; 0x28
  40305e:	62e3      	str	r3, [r4, #44]	; 0x2c
  403060:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403068:	f000 bbc4 	b.w	4037f4 <__retarget_lock_init_recursive>
  40306c:	00404371 	.word	0x00404371
  403070:	00404395 	.word	0x00404395
  403074:	004043d1 	.word	0x004043d1
  403078:	004043f1 	.word	0x004043f1

0040307c <__sinit>:
  40307c:	b510      	push	{r4, lr}
  40307e:	4604      	mov	r4, r0
  403080:	4812      	ldr	r0, [pc, #72]	; (4030cc <__sinit+0x50>)
  403082:	f000 fbbb 	bl	4037fc <__retarget_lock_acquire_recursive>
  403086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403088:	b9d2      	cbnz	r2, 4030c0 <__sinit+0x44>
  40308a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40308e:	4810      	ldr	r0, [pc, #64]	; (4030d0 <__sinit+0x54>)
  403090:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403094:	2103      	movs	r1, #3
  403096:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40309a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40309c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4030a0:	6860      	ldr	r0, [r4, #4]
  4030a2:	2104      	movs	r1, #4
  4030a4:	f7ff ffc2 	bl	40302c <std.isra.0>
  4030a8:	2201      	movs	r2, #1
  4030aa:	2109      	movs	r1, #9
  4030ac:	68a0      	ldr	r0, [r4, #8]
  4030ae:	f7ff ffbd 	bl	40302c <std.isra.0>
  4030b2:	2202      	movs	r2, #2
  4030b4:	2112      	movs	r1, #18
  4030b6:	68e0      	ldr	r0, [r4, #12]
  4030b8:	f7ff ffb8 	bl	40302c <std.isra.0>
  4030bc:	2301      	movs	r3, #1
  4030be:	63a3      	str	r3, [r4, #56]	; 0x38
  4030c0:	4802      	ldr	r0, [pc, #8]	; (4030cc <__sinit+0x50>)
  4030c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4030c6:	f000 bb9b 	b.w	403800 <__retarget_lock_release_recursive>
  4030ca:	bf00      	nop
  4030cc:	20453558 	.word	0x20453558
  4030d0:	00403021 	.word	0x00403021

004030d4 <__sfp_lock_acquire>:
  4030d4:	4801      	ldr	r0, [pc, #4]	; (4030dc <__sfp_lock_acquire+0x8>)
  4030d6:	f000 bb91 	b.w	4037fc <__retarget_lock_acquire_recursive>
  4030da:	bf00      	nop
  4030dc:	2045356c 	.word	0x2045356c

004030e0 <__sfp_lock_release>:
  4030e0:	4801      	ldr	r0, [pc, #4]	; (4030e8 <__sfp_lock_release+0x8>)
  4030e2:	f000 bb8d 	b.w	403800 <__retarget_lock_release_recursive>
  4030e6:	bf00      	nop
  4030e8:	2045356c 	.word	0x2045356c

004030ec <__libc_fini_array>:
  4030ec:	b538      	push	{r3, r4, r5, lr}
  4030ee:	4c0a      	ldr	r4, [pc, #40]	; (403118 <__libc_fini_array+0x2c>)
  4030f0:	4d0a      	ldr	r5, [pc, #40]	; (40311c <__libc_fini_array+0x30>)
  4030f2:	1b64      	subs	r4, r4, r5
  4030f4:	10a4      	asrs	r4, r4, #2
  4030f6:	d00a      	beq.n	40310e <__libc_fini_array+0x22>
  4030f8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4030fc:	3b01      	subs	r3, #1
  4030fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403102:	3c01      	subs	r4, #1
  403104:	f855 3904 	ldr.w	r3, [r5], #-4
  403108:	4798      	blx	r3
  40310a:	2c00      	cmp	r4, #0
  40310c:	d1f9      	bne.n	403102 <__libc_fini_array+0x16>
  40310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403112:	f001 be69 	b.w	404de8 <_fini>
  403116:	bf00      	nop
  403118:	00404df8 	.word	0x00404df8
  40311c:	00404df4 	.word	0x00404df4

00403120 <__fputwc>:
  403120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403124:	b082      	sub	sp, #8
  403126:	4680      	mov	r8, r0
  403128:	4689      	mov	r9, r1
  40312a:	4614      	mov	r4, r2
  40312c:	f000 fb54 	bl	4037d8 <__locale_mb_cur_max>
  403130:	2801      	cmp	r0, #1
  403132:	d036      	beq.n	4031a2 <__fputwc+0x82>
  403134:	464a      	mov	r2, r9
  403136:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40313a:	a901      	add	r1, sp, #4
  40313c:	4640      	mov	r0, r8
  40313e:	f001 fa25 	bl	40458c <_wcrtomb_r>
  403142:	1c42      	adds	r2, r0, #1
  403144:	4606      	mov	r6, r0
  403146:	d025      	beq.n	403194 <__fputwc+0x74>
  403148:	b3a8      	cbz	r0, 4031b6 <__fputwc+0x96>
  40314a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40314e:	2500      	movs	r5, #0
  403150:	f10d 0a04 	add.w	sl, sp, #4
  403154:	e009      	b.n	40316a <__fputwc+0x4a>
  403156:	6823      	ldr	r3, [r4, #0]
  403158:	1c5a      	adds	r2, r3, #1
  40315a:	6022      	str	r2, [r4, #0]
  40315c:	f883 e000 	strb.w	lr, [r3]
  403160:	3501      	adds	r5, #1
  403162:	42b5      	cmp	r5, r6
  403164:	d227      	bcs.n	4031b6 <__fputwc+0x96>
  403166:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40316a:	68a3      	ldr	r3, [r4, #8]
  40316c:	3b01      	subs	r3, #1
  40316e:	2b00      	cmp	r3, #0
  403170:	60a3      	str	r3, [r4, #8]
  403172:	daf0      	bge.n	403156 <__fputwc+0x36>
  403174:	69a7      	ldr	r7, [r4, #24]
  403176:	42bb      	cmp	r3, r7
  403178:	4671      	mov	r1, lr
  40317a:	4622      	mov	r2, r4
  40317c:	4640      	mov	r0, r8
  40317e:	db02      	blt.n	403186 <__fputwc+0x66>
  403180:	f1be 0f0a 	cmp.w	lr, #10
  403184:	d1e7      	bne.n	403156 <__fputwc+0x36>
  403186:	f001 f9a9 	bl	4044dc <__swbuf_r>
  40318a:	1c43      	adds	r3, r0, #1
  40318c:	d1e8      	bne.n	403160 <__fputwc+0x40>
  40318e:	b002      	add	sp, #8
  403190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403194:	89a3      	ldrh	r3, [r4, #12]
  403196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40319a:	81a3      	strh	r3, [r4, #12]
  40319c:	b002      	add	sp, #8
  40319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031a2:	f109 33ff 	add.w	r3, r9, #4294967295
  4031a6:	2bfe      	cmp	r3, #254	; 0xfe
  4031a8:	d8c4      	bhi.n	403134 <__fputwc+0x14>
  4031aa:	fa5f fe89 	uxtb.w	lr, r9
  4031ae:	4606      	mov	r6, r0
  4031b0:	f88d e004 	strb.w	lr, [sp, #4]
  4031b4:	e7cb      	b.n	40314e <__fputwc+0x2e>
  4031b6:	4648      	mov	r0, r9
  4031b8:	b002      	add	sp, #8
  4031ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031be:	bf00      	nop

004031c0 <_fputwc_r>:
  4031c0:	b530      	push	{r4, r5, lr}
  4031c2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4031c4:	f013 0f01 	tst.w	r3, #1
  4031c8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4031cc:	4614      	mov	r4, r2
  4031ce:	b083      	sub	sp, #12
  4031d0:	4605      	mov	r5, r0
  4031d2:	b29a      	uxth	r2, r3
  4031d4:	d101      	bne.n	4031da <_fputwc_r+0x1a>
  4031d6:	0590      	lsls	r0, r2, #22
  4031d8:	d51c      	bpl.n	403214 <_fputwc_r+0x54>
  4031da:	0490      	lsls	r0, r2, #18
  4031dc:	d406      	bmi.n	4031ec <_fputwc_r+0x2c>
  4031de:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4031e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4031e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4031e8:	81a3      	strh	r3, [r4, #12]
  4031ea:	6662      	str	r2, [r4, #100]	; 0x64
  4031ec:	4628      	mov	r0, r5
  4031ee:	4622      	mov	r2, r4
  4031f0:	f7ff ff96 	bl	403120 <__fputwc>
  4031f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4031f6:	07da      	lsls	r2, r3, #31
  4031f8:	4605      	mov	r5, r0
  4031fa:	d402      	bmi.n	403202 <_fputwc_r+0x42>
  4031fc:	89a3      	ldrh	r3, [r4, #12]
  4031fe:	059b      	lsls	r3, r3, #22
  403200:	d502      	bpl.n	403208 <_fputwc_r+0x48>
  403202:	4628      	mov	r0, r5
  403204:	b003      	add	sp, #12
  403206:	bd30      	pop	{r4, r5, pc}
  403208:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40320a:	f000 faf9 	bl	403800 <__retarget_lock_release_recursive>
  40320e:	4628      	mov	r0, r5
  403210:	b003      	add	sp, #12
  403212:	bd30      	pop	{r4, r5, pc}
  403214:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403216:	9101      	str	r1, [sp, #4]
  403218:	f000 faf0 	bl	4037fc <__retarget_lock_acquire_recursive>
  40321c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403220:	9901      	ldr	r1, [sp, #4]
  403222:	b29a      	uxth	r2, r3
  403224:	e7d9      	b.n	4031da <_fputwc_r+0x1a>
  403226:	bf00      	nop

00403228 <_malloc_trim_r>:
  403228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40322a:	4f24      	ldr	r7, [pc, #144]	; (4032bc <_malloc_trim_r+0x94>)
  40322c:	460c      	mov	r4, r1
  40322e:	4606      	mov	r6, r0
  403230:	f000 feda 	bl	403fe8 <__malloc_lock>
  403234:	68bb      	ldr	r3, [r7, #8]
  403236:	685d      	ldr	r5, [r3, #4]
  403238:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40323c:	310f      	adds	r1, #15
  40323e:	f025 0503 	bic.w	r5, r5, #3
  403242:	4429      	add	r1, r5
  403244:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403248:	f021 010f 	bic.w	r1, r1, #15
  40324c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403250:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403254:	db07      	blt.n	403266 <_malloc_trim_r+0x3e>
  403256:	2100      	movs	r1, #0
  403258:	4630      	mov	r0, r6
  40325a:	f001 f877 	bl	40434c <_sbrk_r>
  40325e:	68bb      	ldr	r3, [r7, #8]
  403260:	442b      	add	r3, r5
  403262:	4298      	cmp	r0, r3
  403264:	d004      	beq.n	403270 <_malloc_trim_r+0x48>
  403266:	4630      	mov	r0, r6
  403268:	f000 fec4 	bl	403ff4 <__malloc_unlock>
  40326c:	2000      	movs	r0, #0
  40326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403270:	4261      	negs	r1, r4
  403272:	4630      	mov	r0, r6
  403274:	f001 f86a 	bl	40434c <_sbrk_r>
  403278:	3001      	adds	r0, #1
  40327a:	d00d      	beq.n	403298 <_malloc_trim_r+0x70>
  40327c:	4b10      	ldr	r3, [pc, #64]	; (4032c0 <_malloc_trim_r+0x98>)
  40327e:	68ba      	ldr	r2, [r7, #8]
  403280:	6819      	ldr	r1, [r3, #0]
  403282:	1b2d      	subs	r5, r5, r4
  403284:	f045 0501 	orr.w	r5, r5, #1
  403288:	4630      	mov	r0, r6
  40328a:	1b09      	subs	r1, r1, r4
  40328c:	6055      	str	r5, [r2, #4]
  40328e:	6019      	str	r1, [r3, #0]
  403290:	f000 feb0 	bl	403ff4 <__malloc_unlock>
  403294:	2001      	movs	r0, #1
  403296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403298:	2100      	movs	r1, #0
  40329a:	4630      	mov	r0, r6
  40329c:	f001 f856 	bl	40434c <_sbrk_r>
  4032a0:	68ba      	ldr	r2, [r7, #8]
  4032a2:	1a83      	subs	r3, r0, r2
  4032a4:	2b0f      	cmp	r3, #15
  4032a6:	ddde      	ble.n	403266 <_malloc_trim_r+0x3e>
  4032a8:	4c06      	ldr	r4, [pc, #24]	; (4032c4 <_malloc_trim_r+0x9c>)
  4032aa:	4905      	ldr	r1, [pc, #20]	; (4032c0 <_malloc_trim_r+0x98>)
  4032ac:	6824      	ldr	r4, [r4, #0]
  4032ae:	f043 0301 	orr.w	r3, r3, #1
  4032b2:	1b00      	subs	r0, r0, r4
  4032b4:	6053      	str	r3, [r2, #4]
  4032b6:	6008      	str	r0, [r1, #0]
  4032b8:	e7d5      	b.n	403266 <_malloc_trim_r+0x3e>
  4032ba:	bf00      	nop
  4032bc:	204005b0 	.word	0x204005b0
  4032c0:	204532ac 	.word	0x204532ac
  4032c4:	204009b8 	.word	0x204009b8

004032c8 <_free_r>:
  4032c8:	2900      	cmp	r1, #0
  4032ca:	d044      	beq.n	403356 <_free_r+0x8e>
  4032cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4032d0:	460d      	mov	r5, r1
  4032d2:	4680      	mov	r8, r0
  4032d4:	f000 fe88 	bl	403fe8 <__malloc_lock>
  4032d8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4032dc:	4969      	ldr	r1, [pc, #420]	; (403484 <_free_r+0x1bc>)
  4032de:	f027 0301 	bic.w	r3, r7, #1
  4032e2:	f1a5 0408 	sub.w	r4, r5, #8
  4032e6:	18e2      	adds	r2, r4, r3
  4032e8:	688e      	ldr	r6, [r1, #8]
  4032ea:	6850      	ldr	r0, [r2, #4]
  4032ec:	42b2      	cmp	r2, r6
  4032ee:	f020 0003 	bic.w	r0, r0, #3
  4032f2:	d05e      	beq.n	4033b2 <_free_r+0xea>
  4032f4:	07fe      	lsls	r6, r7, #31
  4032f6:	6050      	str	r0, [r2, #4]
  4032f8:	d40b      	bmi.n	403312 <_free_r+0x4a>
  4032fa:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4032fe:	1be4      	subs	r4, r4, r7
  403300:	f101 0e08 	add.w	lr, r1, #8
  403304:	68a5      	ldr	r5, [r4, #8]
  403306:	4575      	cmp	r5, lr
  403308:	443b      	add	r3, r7
  40330a:	d06d      	beq.n	4033e8 <_free_r+0x120>
  40330c:	68e7      	ldr	r7, [r4, #12]
  40330e:	60ef      	str	r7, [r5, #12]
  403310:	60bd      	str	r5, [r7, #8]
  403312:	1815      	adds	r5, r2, r0
  403314:	686d      	ldr	r5, [r5, #4]
  403316:	07ed      	lsls	r5, r5, #31
  403318:	d53e      	bpl.n	403398 <_free_r+0xd0>
  40331a:	f043 0201 	orr.w	r2, r3, #1
  40331e:	6062      	str	r2, [r4, #4]
  403320:	50e3      	str	r3, [r4, r3]
  403322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403326:	d217      	bcs.n	403358 <_free_r+0x90>
  403328:	08db      	lsrs	r3, r3, #3
  40332a:	1c58      	adds	r0, r3, #1
  40332c:	109a      	asrs	r2, r3, #2
  40332e:	684d      	ldr	r5, [r1, #4]
  403330:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403334:	60a7      	str	r7, [r4, #8]
  403336:	2301      	movs	r3, #1
  403338:	4093      	lsls	r3, r2
  40333a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40333e:	432b      	orrs	r3, r5
  403340:	3a08      	subs	r2, #8
  403342:	60e2      	str	r2, [r4, #12]
  403344:	604b      	str	r3, [r1, #4]
  403346:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40334a:	60fc      	str	r4, [r7, #12]
  40334c:	4640      	mov	r0, r8
  40334e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403352:	f000 be4f 	b.w	403ff4 <__malloc_unlock>
  403356:	4770      	bx	lr
  403358:	0a5a      	lsrs	r2, r3, #9
  40335a:	2a04      	cmp	r2, #4
  40335c:	d852      	bhi.n	403404 <_free_r+0x13c>
  40335e:	099a      	lsrs	r2, r3, #6
  403360:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403364:	00ff      	lsls	r7, r7, #3
  403366:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40336a:	19c8      	adds	r0, r1, r7
  40336c:	59ca      	ldr	r2, [r1, r7]
  40336e:	3808      	subs	r0, #8
  403370:	4290      	cmp	r0, r2
  403372:	d04f      	beq.n	403414 <_free_r+0x14c>
  403374:	6851      	ldr	r1, [r2, #4]
  403376:	f021 0103 	bic.w	r1, r1, #3
  40337a:	428b      	cmp	r3, r1
  40337c:	d232      	bcs.n	4033e4 <_free_r+0x11c>
  40337e:	6892      	ldr	r2, [r2, #8]
  403380:	4290      	cmp	r0, r2
  403382:	d1f7      	bne.n	403374 <_free_r+0xac>
  403384:	68c3      	ldr	r3, [r0, #12]
  403386:	60a0      	str	r0, [r4, #8]
  403388:	60e3      	str	r3, [r4, #12]
  40338a:	609c      	str	r4, [r3, #8]
  40338c:	60c4      	str	r4, [r0, #12]
  40338e:	4640      	mov	r0, r8
  403390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403394:	f000 be2e 	b.w	403ff4 <__malloc_unlock>
  403398:	6895      	ldr	r5, [r2, #8]
  40339a:	4f3b      	ldr	r7, [pc, #236]	; (403488 <_free_r+0x1c0>)
  40339c:	42bd      	cmp	r5, r7
  40339e:	4403      	add	r3, r0
  4033a0:	d040      	beq.n	403424 <_free_r+0x15c>
  4033a2:	68d0      	ldr	r0, [r2, #12]
  4033a4:	60e8      	str	r0, [r5, #12]
  4033a6:	f043 0201 	orr.w	r2, r3, #1
  4033aa:	6085      	str	r5, [r0, #8]
  4033ac:	6062      	str	r2, [r4, #4]
  4033ae:	50e3      	str	r3, [r4, r3]
  4033b0:	e7b7      	b.n	403322 <_free_r+0x5a>
  4033b2:	07ff      	lsls	r7, r7, #31
  4033b4:	4403      	add	r3, r0
  4033b6:	d407      	bmi.n	4033c8 <_free_r+0x100>
  4033b8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4033bc:	1aa4      	subs	r4, r4, r2
  4033be:	4413      	add	r3, r2
  4033c0:	68a0      	ldr	r0, [r4, #8]
  4033c2:	68e2      	ldr	r2, [r4, #12]
  4033c4:	60c2      	str	r2, [r0, #12]
  4033c6:	6090      	str	r0, [r2, #8]
  4033c8:	4a30      	ldr	r2, [pc, #192]	; (40348c <_free_r+0x1c4>)
  4033ca:	6812      	ldr	r2, [r2, #0]
  4033cc:	f043 0001 	orr.w	r0, r3, #1
  4033d0:	4293      	cmp	r3, r2
  4033d2:	6060      	str	r0, [r4, #4]
  4033d4:	608c      	str	r4, [r1, #8]
  4033d6:	d3b9      	bcc.n	40334c <_free_r+0x84>
  4033d8:	4b2d      	ldr	r3, [pc, #180]	; (403490 <_free_r+0x1c8>)
  4033da:	4640      	mov	r0, r8
  4033dc:	6819      	ldr	r1, [r3, #0]
  4033de:	f7ff ff23 	bl	403228 <_malloc_trim_r>
  4033e2:	e7b3      	b.n	40334c <_free_r+0x84>
  4033e4:	4610      	mov	r0, r2
  4033e6:	e7cd      	b.n	403384 <_free_r+0xbc>
  4033e8:	1811      	adds	r1, r2, r0
  4033ea:	6849      	ldr	r1, [r1, #4]
  4033ec:	07c9      	lsls	r1, r1, #31
  4033ee:	d444      	bmi.n	40347a <_free_r+0x1b2>
  4033f0:	6891      	ldr	r1, [r2, #8]
  4033f2:	68d2      	ldr	r2, [r2, #12]
  4033f4:	60ca      	str	r2, [r1, #12]
  4033f6:	4403      	add	r3, r0
  4033f8:	f043 0001 	orr.w	r0, r3, #1
  4033fc:	6091      	str	r1, [r2, #8]
  4033fe:	6060      	str	r0, [r4, #4]
  403400:	50e3      	str	r3, [r4, r3]
  403402:	e7a3      	b.n	40334c <_free_r+0x84>
  403404:	2a14      	cmp	r2, #20
  403406:	d816      	bhi.n	403436 <_free_r+0x16e>
  403408:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40340c:	00ff      	lsls	r7, r7, #3
  40340e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403412:	e7aa      	b.n	40336a <_free_r+0xa2>
  403414:	10aa      	asrs	r2, r5, #2
  403416:	2301      	movs	r3, #1
  403418:	684d      	ldr	r5, [r1, #4]
  40341a:	4093      	lsls	r3, r2
  40341c:	432b      	orrs	r3, r5
  40341e:	604b      	str	r3, [r1, #4]
  403420:	4603      	mov	r3, r0
  403422:	e7b0      	b.n	403386 <_free_r+0xbe>
  403424:	f043 0201 	orr.w	r2, r3, #1
  403428:	614c      	str	r4, [r1, #20]
  40342a:	610c      	str	r4, [r1, #16]
  40342c:	60e5      	str	r5, [r4, #12]
  40342e:	60a5      	str	r5, [r4, #8]
  403430:	6062      	str	r2, [r4, #4]
  403432:	50e3      	str	r3, [r4, r3]
  403434:	e78a      	b.n	40334c <_free_r+0x84>
  403436:	2a54      	cmp	r2, #84	; 0x54
  403438:	d806      	bhi.n	403448 <_free_r+0x180>
  40343a:	0b1a      	lsrs	r2, r3, #12
  40343c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403440:	00ff      	lsls	r7, r7, #3
  403442:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403446:	e790      	b.n	40336a <_free_r+0xa2>
  403448:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40344c:	d806      	bhi.n	40345c <_free_r+0x194>
  40344e:	0bda      	lsrs	r2, r3, #15
  403450:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403454:	00ff      	lsls	r7, r7, #3
  403456:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40345a:	e786      	b.n	40336a <_free_r+0xa2>
  40345c:	f240 5054 	movw	r0, #1364	; 0x554
  403460:	4282      	cmp	r2, r0
  403462:	d806      	bhi.n	403472 <_free_r+0x1aa>
  403464:	0c9a      	lsrs	r2, r3, #18
  403466:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40346a:	00ff      	lsls	r7, r7, #3
  40346c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403470:	e77b      	b.n	40336a <_free_r+0xa2>
  403472:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403476:	257e      	movs	r5, #126	; 0x7e
  403478:	e777      	b.n	40336a <_free_r+0xa2>
  40347a:	f043 0101 	orr.w	r1, r3, #1
  40347e:	6061      	str	r1, [r4, #4]
  403480:	6013      	str	r3, [r2, #0]
  403482:	e763      	b.n	40334c <_free_r+0x84>
  403484:	204005b0 	.word	0x204005b0
  403488:	204005b8 	.word	0x204005b8
  40348c:	204009bc 	.word	0x204009bc
  403490:	204532dc 	.word	0x204532dc

00403494 <__sfvwrite_r>:
  403494:	6893      	ldr	r3, [r2, #8]
  403496:	2b00      	cmp	r3, #0
  403498:	d073      	beq.n	403582 <__sfvwrite_r+0xee>
  40349a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40349e:	898b      	ldrh	r3, [r1, #12]
  4034a0:	b083      	sub	sp, #12
  4034a2:	460c      	mov	r4, r1
  4034a4:	0719      	lsls	r1, r3, #28
  4034a6:	9000      	str	r0, [sp, #0]
  4034a8:	4616      	mov	r6, r2
  4034aa:	d526      	bpl.n	4034fa <__sfvwrite_r+0x66>
  4034ac:	6922      	ldr	r2, [r4, #16]
  4034ae:	b322      	cbz	r2, 4034fa <__sfvwrite_r+0x66>
  4034b0:	f013 0002 	ands.w	r0, r3, #2
  4034b4:	6835      	ldr	r5, [r6, #0]
  4034b6:	d02c      	beq.n	403512 <__sfvwrite_r+0x7e>
  4034b8:	f04f 0900 	mov.w	r9, #0
  4034bc:	4fb0      	ldr	r7, [pc, #704]	; (403780 <__sfvwrite_r+0x2ec>)
  4034be:	46c8      	mov	r8, r9
  4034c0:	46b2      	mov	sl, r6
  4034c2:	45b8      	cmp	r8, r7
  4034c4:	4643      	mov	r3, r8
  4034c6:	464a      	mov	r2, r9
  4034c8:	bf28      	it	cs
  4034ca:	463b      	movcs	r3, r7
  4034cc:	9800      	ldr	r0, [sp, #0]
  4034ce:	f1b8 0f00 	cmp.w	r8, #0
  4034d2:	d050      	beq.n	403576 <__sfvwrite_r+0xe2>
  4034d4:	69e1      	ldr	r1, [r4, #28]
  4034d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4034d8:	47b0      	blx	r6
  4034da:	2800      	cmp	r0, #0
  4034dc:	dd58      	ble.n	403590 <__sfvwrite_r+0xfc>
  4034de:	f8da 3008 	ldr.w	r3, [sl, #8]
  4034e2:	1a1b      	subs	r3, r3, r0
  4034e4:	4481      	add	r9, r0
  4034e6:	eba8 0800 	sub.w	r8, r8, r0
  4034ea:	f8ca 3008 	str.w	r3, [sl, #8]
  4034ee:	2b00      	cmp	r3, #0
  4034f0:	d1e7      	bne.n	4034c2 <__sfvwrite_r+0x2e>
  4034f2:	2000      	movs	r0, #0
  4034f4:	b003      	add	sp, #12
  4034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034fa:	4621      	mov	r1, r4
  4034fc:	9800      	ldr	r0, [sp, #0]
  4034fe:	f7ff fc51 	bl	402da4 <__swsetup_r>
  403502:	2800      	cmp	r0, #0
  403504:	f040 8133 	bne.w	40376e <__sfvwrite_r+0x2da>
  403508:	89a3      	ldrh	r3, [r4, #12]
  40350a:	6835      	ldr	r5, [r6, #0]
  40350c:	f013 0002 	ands.w	r0, r3, #2
  403510:	d1d2      	bne.n	4034b8 <__sfvwrite_r+0x24>
  403512:	f013 0901 	ands.w	r9, r3, #1
  403516:	d145      	bne.n	4035a4 <__sfvwrite_r+0x110>
  403518:	464f      	mov	r7, r9
  40351a:	9601      	str	r6, [sp, #4]
  40351c:	b337      	cbz	r7, 40356c <__sfvwrite_r+0xd8>
  40351e:	059a      	lsls	r2, r3, #22
  403520:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403524:	f140 8083 	bpl.w	40362e <__sfvwrite_r+0x19a>
  403528:	4547      	cmp	r7, r8
  40352a:	46c3      	mov	fp, r8
  40352c:	f0c0 80ab 	bcc.w	403686 <__sfvwrite_r+0x1f2>
  403530:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403534:	f040 80ac 	bne.w	403690 <__sfvwrite_r+0x1fc>
  403538:	6820      	ldr	r0, [r4, #0]
  40353a:	46ba      	mov	sl, r7
  40353c:	465a      	mov	r2, fp
  40353e:	4649      	mov	r1, r9
  403540:	f000 fcee 	bl	403f20 <memmove>
  403544:	68a2      	ldr	r2, [r4, #8]
  403546:	6823      	ldr	r3, [r4, #0]
  403548:	eba2 0208 	sub.w	r2, r2, r8
  40354c:	445b      	add	r3, fp
  40354e:	60a2      	str	r2, [r4, #8]
  403550:	6023      	str	r3, [r4, #0]
  403552:	9a01      	ldr	r2, [sp, #4]
  403554:	6893      	ldr	r3, [r2, #8]
  403556:	eba3 030a 	sub.w	r3, r3, sl
  40355a:	44d1      	add	r9, sl
  40355c:	eba7 070a 	sub.w	r7, r7, sl
  403560:	6093      	str	r3, [r2, #8]
  403562:	2b00      	cmp	r3, #0
  403564:	d0c5      	beq.n	4034f2 <__sfvwrite_r+0x5e>
  403566:	89a3      	ldrh	r3, [r4, #12]
  403568:	2f00      	cmp	r7, #0
  40356a:	d1d8      	bne.n	40351e <__sfvwrite_r+0x8a>
  40356c:	f8d5 9000 	ldr.w	r9, [r5]
  403570:	686f      	ldr	r7, [r5, #4]
  403572:	3508      	adds	r5, #8
  403574:	e7d2      	b.n	40351c <__sfvwrite_r+0x88>
  403576:	f8d5 9000 	ldr.w	r9, [r5]
  40357a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40357e:	3508      	adds	r5, #8
  403580:	e79f      	b.n	4034c2 <__sfvwrite_r+0x2e>
  403582:	2000      	movs	r0, #0
  403584:	4770      	bx	lr
  403586:	4621      	mov	r1, r4
  403588:	9800      	ldr	r0, [sp, #0]
  40358a:	f7ff fd1f 	bl	402fcc <_fflush_r>
  40358e:	b370      	cbz	r0, 4035ee <__sfvwrite_r+0x15a>
  403590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403598:	f04f 30ff 	mov.w	r0, #4294967295
  40359c:	81a3      	strh	r3, [r4, #12]
  40359e:	b003      	add	sp, #12
  4035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035a4:	4681      	mov	r9, r0
  4035a6:	4633      	mov	r3, r6
  4035a8:	464e      	mov	r6, r9
  4035aa:	46a8      	mov	r8, r5
  4035ac:	469a      	mov	sl, r3
  4035ae:	464d      	mov	r5, r9
  4035b0:	b34e      	cbz	r6, 403606 <__sfvwrite_r+0x172>
  4035b2:	b380      	cbz	r0, 403616 <__sfvwrite_r+0x182>
  4035b4:	6820      	ldr	r0, [r4, #0]
  4035b6:	6923      	ldr	r3, [r4, #16]
  4035b8:	6962      	ldr	r2, [r4, #20]
  4035ba:	45b1      	cmp	r9, r6
  4035bc:	46cb      	mov	fp, r9
  4035be:	bf28      	it	cs
  4035c0:	46b3      	movcs	fp, r6
  4035c2:	4298      	cmp	r0, r3
  4035c4:	465f      	mov	r7, fp
  4035c6:	d904      	bls.n	4035d2 <__sfvwrite_r+0x13e>
  4035c8:	68a3      	ldr	r3, [r4, #8]
  4035ca:	4413      	add	r3, r2
  4035cc:	459b      	cmp	fp, r3
  4035ce:	f300 80a6 	bgt.w	40371e <__sfvwrite_r+0x28a>
  4035d2:	4593      	cmp	fp, r2
  4035d4:	db4b      	blt.n	40366e <__sfvwrite_r+0x1da>
  4035d6:	4613      	mov	r3, r2
  4035d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4035da:	69e1      	ldr	r1, [r4, #28]
  4035dc:	9800      	ldr	r0, [sp, #0]
  4035de:	462a      	mov	r2, r5
  4035e0:	47b8      	blx	r7
  4035e2:	1e07      	subs	r7, r0, #0
  4035e4:	ddd4      	ble.n	403590 <__sfvwrite_r+0xfc>
  4035e6:	ebb9 0907 	subs.w	r9, r9, r7
  4035ea:	d0cc      	beq.n	403586 <__sfvwrite_r+0xf2>
  4035ec:	2001      	movs	r0, #1
  4035ee:	f8da 3008 	ldr.w	r3, [sl, #8]
  4035f2:	1bdb      	subs	r3, r3, r7
  4035f4:	443d      	add	r5, r7
  4035f6:	1bf6      	subs	r6, r6, r7
  4035f8:	f8ca 3008 	str.w	r3, [sl, #8]
  4035fc:	2b00      	cmp	r3, #0
  4035fe:	f43f af78 	beq.w	4034f2 <__sfvwrite_r+0x5e>
  403602:	2e00      	cmp	r6, #0
  403604:	d1d5      	bne.n	4035b2 <__sfvwrite_r+0x11e>
  403606:	f108 0308 	add.w	r3, r8, #8
  40360a:	e913 0060 	ldmdb	r3, {r5, r6}
  40360e:	4698      	mov	r8, r3
  403610:	3308      	adds	r3, #8
  403612:	2e00      	cmp	r6, #0
  403614:	d0f9      	beq.n	40360a <__sfvwrite_r+0x176>
  403616:	4632      	mov	r2, r6
  403618:	210a      	movs	r1, #10
  40361a:	4628      	mov	r0, r5
  40361c:	f000 fc30 	bl	403e80 <memchr>
  403620:	2800      	cmp	r0, #0
  403622:	f000 80a1 	beq.w	403768 <__sfvwrite_r+0x2d4>
  403626:	3001      	adds	r0, #1
  403628:	eba0 0905 	sub.w	r9, r0, r5
  40362c:	e7c2      	b.n	4035b4 <__sfvwrite_r+0x120>
  40362e:	6820      	ldr	r0, [r4, #0]
  403630:	6923      	ldr	r3, [r4, #16]
  403632:	4298      	cmp	r0, r3
  403634:	d802      	bhi.n	40363c <__sfvwrite_r+0x1a8>
  403636:	6963      	ldr	r3, [r4, #20]
  403638:	429f      	cmp	r7, r3
  40363a:	d25d      	bcs.n	4036f8 <__sfvwrite_r+0x264>
  40363c:	45b8      	cmp	r8, r7
  40363e:	bf28      	it	cs
  403640:	46b8      	movcs	r8, r7
  403642:	4642      	mov	r2, r8
  403644:	4649      	mov	r1, r9
  403646:	f000 fc6b 	bl	403f20 <memmove>
  40364a:	68a3      	ldr	r3, [r4, #8]
  40364c:	6822      	ldr	r2, [r4, #0]
  40364e:	eba3 0308 	sub.w	r3, r3, r8
  403652:	4442      	add	r2, r8
  403654:	60a3      	str	r3, [r4, #8]
  403656:	6022      	str	r2, [r4, #0]
  403658:	b10b      	cbz	r3, 40365e <__sfvwrite_r+0x1ca>
  40365a:	46c2      	mov	sl, r8
  40365c:	e779      	b.n	403552 <__sfvwrite_r+0xbe>
  40365e:	4621      	mov	r1, r4
  403660:	9800      	ldr	r0, [sp, #0]
  403662:	f7ff fcb3 	bl	402fcc <_fflush_r>
  403666:	2800      	cmp	r0, #0
  403668:	d192      	bne.n	403590 <__sfvwrite_r+0xfc>
  40366a:	46c2      	mov	sl, r8
  40366c:	e771      	b.n	403552 <__sfvwrite_r+0xbe>
  40366e:	465a      	mov	r2, fp
  403670:	4629      	mov	r1, r5
  403672:	f000 fc55 	bl	403f20 <memmove>
  403676:	68a2      	ldr	r2, [r4, #8]
  403678:	6823      	ldr	r3, [r4, #0]
  40367a:	eba2 020b 	sub.w	r2, r2, fp
  40367e:	445b      	add	r3, fp
  403680:	60a2      	str	r2, [r4, #8]
  403682:	6023      	str	r3, [r4, #0]
  403684:	e7af      	b.n	4035e6 <__sfvwrite_r+0x152>
  403686:	6820      	ldr	r0, [r4, #0]
  403688:	46b8      	mov	r8, r7
  40368a:	46ba      	mov	sl, r7
  40368c:	46bb      	mov	fp, r7
  40368e:	e755      	b.n	40353c <__sfvwrite_r+0xa8>
  403690:	6962      	ldr	r2, [r4, #20]
  403692:	6820      	ldr	r0, [r4, #0]
  403694:	6921      	ldr	r1, [r4, #16]
  403696:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40369a:	eba0 0a01 	sub.w	sl, r0, r1
  40369e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4036a2:	f10a 0001 	add.w	r0, sl, #1
  4036a6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4036aa:	4438      	add	r0, r7
  4036ac:	4540      	cmp	r0, r8
  4036ae:	4642      	mov	r2, r8
  4036b0:	bf84      	itt	hi
  4036b2:	4680      	movhi	r8, r0
  4036b4:	4642      	movhi	r2, r8
  4036b6:	055b      	lsls	r3, r3, #21
  4036b8:	d544      	bpl.n	403744 <__sfvwrite_r+0x2b0>
  4036ba:	4611      	mov	r1, r2
  4036bc:	9800      	ldr	r0, [sp, #0]
  4036be:	f000 f919 	bl	4038f4 <_malloc_r>
  4036c2:	4683      	mov	fp, r0
  4036c4:	2800      	cmp	r0, #0
  4036c6:	d055      	beq.n	403774 <__sfvwrite_r+0x2e0>
  4036c8:	4652      	mov	r2, sl
  4036ca:	6921      	ldr	r1, [r4, #16]
  4036cc:	f7fe fbb8 	bl	401e40 <memcpy>
  4036d0:	89a3      	ldrh	r3, [r4, #12]
  4036d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4036da:	81a3      	strh	r3, [r4, #12]
  4036dc:	eb0b 000a 	add.w	r0, fp, sl
  4036e0:	eba8 030a 	sub.w	r3, r8, sl
  4036e4:	f8c4 b010 	str.w	fp, [r4, #16]
  4036e8:	f8c4 8014 	str.w	r8, [r4, #20]
  4036ec:	6020      	str	r0, [r4, #0]
  4036ee:	60a3      	str	r3, [r4, #8]
  4036f0:	46b8      	mov	r8, r7
  4036f2:	46ba      	mov	sl, r7
  4036f4:	46bb      	mov	fp, r7
  4036f6:	e721      	b.n	40353c <__sfvwrite_r+0xa8>
  4036f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4036fc:	42b9      	cmp	r1, r7
  4036fe:	bf28      	it	cs
  403700:	4639      	movcs	r1, r7
  403702:	464a      	mov	r2, r9
  403704:	fb91 f1f3 	sdiv	r1, r1, r3
  403708:	9800      	ldr	r0, [sp, #0]
  40370a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40370c:	fb03 f301 	mul.w	r3, r3, r1
  403710:	69e1      	ldr	r1, [r4, #28]
  403712:	47b0      	blx	r6
  403714:	f1b0 0a00 	subs.w	sl, r0, #0
  403718:	f73f af1b 	bgt.w	403552 <__sfvwrite_r+0xbe>
  40371c:	e738      	b.n	403590 <__sfvwrite_r+0xfc>
  40371e:	461a      	mov	r2, r3
  403720:	4629      	mov	r1, r5
  403722:	9301      	str	r3, [sp, #4]
  403724:	f000 fbfc 	bl	403f20 <memmove>
  403728:	6822      	ldr	r2, [r4, #0]
  40372a:	9b01      	ldr	r3, [sp, #4]
  40372c:	9800      	ldr	r0, [sp, #0]
  40372e:	441a      	add	r2, r3
  403730:	6022      	str	r2, [r4, #0]
  403732:	4621      	mov	r1, r4
  403734:	f7ff fc4a 	bl	402fcc <_fflush_r>
  403738:	9b01      	ldr	r3, [sp, #4]
  40373a:	2800      	cmp	r0, #0
  40373c:	f47f af28 	bne.w	403590 <__sfvwrite_r+0xfc>
  403740:	461f      	mov	r7, r3
  403742:	e750      	b.n	4035e6 <__sfvwrite_r+0x152>
  403744:	9800      	ldr	r0, [sp, #0]
  403746:	f000 fc5b 	bl	404000 <_realloc_r>
  40374a:	4683      	mov	fp, r0
  40374c:	2800      	cmp	r0, #0
  40374e:	d1c5      	bne.n	4036dc <__sfvwrite_r+0x248>
  403750:	9d00      	ldr	r5, [sp, #0]
  403752:	6921      	ldr	r1, [r4, #16]
  403754:	4628      	mov	r0, r5
  403756:	f7ff fdb7 	bl	4032c8 <_free_r>
  40375a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40375e:	220c      	movs	r2, #12
  403760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403764:	602a      	str	r2, [r5, #0]
  403766:	e715      	b.n	403594 <__sfvwrite_r+0x100>
  403768:	f106 0901 	add.w	r9, r6, #1
  40376c:	e722      	b.n	4035b4 <__sfvwrite_r+0x120>
  40376e:	f04f 30ff 	mov.w	r0, #4294967295
  403772:	e6bf      	b.n	4034f4 <__sfvwrite_r+0x60>
  403774:	9a00      	ldr	r2, [sp, #0]
  403776:	230c      	movs	r3, #12
  403778:	6013      	str	r3, [r2, #0]
  40377a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40377e:	e709      	b.n	403594 <__sfvwrite_r+0x100>
  403780:	7ffffc00 	.word	0x7ffffc00

00403784 <_fwalk_reent>:
  403784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403788:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40378c:	d01f      	beq.n	4037ce <_fwalk_reent+0x4a>
  40378e:	4688      	mov	r8, r1
  403790:	4606      	mov	r6, r0
  403792:	f04f 0900 	mov.w	r9, #0
  403796:	687d      	ldr	r5, [r7, #4]
  403798:	68bc      	ldr	r4, [r7, #8]
  40379a:	3d01      	subs	r5, #1
  40379c:	d411      	bmi.n	4037c2 <_fwalk_reent+0x3e>
  40379e:	89a3      	ldrh	r3, [r4, #12]
  4037a0:	2b01      	cmp	r3, #1
  4037a2:	f105 35ff 	add.w	r5, r5, #4294967295
  4037a6:	d908      	bls.n	4037ba <_fwalk_reent+0x36>
  4037a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4037ac:	3301      	adds	r3, #1
  4037ae:	4621      	mov	r1, r4
  4037b0:	4630      	mov	r0, r6
  4037b2:	d002      	beq.n	4037ba <_fwalk_reent+0x36>
  4037b4:	47c0      	blx	r8
  4037b6:	ea49 0900 	orr.w	r9, r9, r0
  4037ba:	1c6b      	adds	r3, r5, #1
  4037bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4037c0:	d1ed      	bne.n	40379e <_fwalk_reent+0x1a>
  4037c2:	683f      	ldr	r7, [r7, #0]
  4037c4:	2f00      	cmp	r7, #0
  4037c6:	d1e6      	bne.n	403796 <_fwalk_reent+0x12>
  4037c8:	4648      	mov	r0, r9
  4037ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4037ce:	46b9      	mov	r9, r7
  4037d0:	4648      	mov	r0, r9
  4037d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4037d6:	bf00      	nop

004037d8 <__locale_mb_cur_max>:
  4037d8:	4b04      	ldr	r3, [pc, #16]	; (4037ec <__locale_mb_cur_max+0x14>)
  4037da:	4a05      	ldr	r2, [pc, #20]	; (4037f0 <__locale_mb_cur_max+0x18>)
  4037dc:	681b      	ldr	r3, [r3, #0]
  4037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4037e0:	2b00      	cmp	r3, #0
  4037e2:	bf08      	it	eq
  4037e4:	4613      	moveq	r3, r2
  4037e6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4037ea:	4770      	bx	lr
  4037ec:	20400010 	.word	0x20400010
  4037f0:	20400444 	.word	0x20400444

004037f4 <__retarget_lock_init_recursive>:
  4037f4:	4770      	bx	lr
  4037f6:	bf00      	nop

004037f8 <__retarget_lock_close_recursive>:
  4037f8:	4770      	bx	lr
  4037fa:	bf00      	nop

004037fc <__retarget_lock_acquire_recursive>:
  4037fc:	4770      	bx	lr
  4037fe:	bf00      	nop

00403800 <__retarget_lock_release_recursive>:
  403800:	4770      	bx	lr
  403802:	bf00      	nop

00403804 <__swhatbuf_r>:
  403804:	b570      	push	{r4, r5, r6, lr}
  403806:	460c      	mov	r4, r1
  403808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40380c:	2900      	cmp	r1, #0
  40380e:	b090      	sub	sp, #64	; 0x40
  403810:	4615      	mov	r5, r2
  403812:	461e      	mov	r6, r3
  403814:	db14      	blt.n	403840 <__swhatbuf_r+0x3c>
  403816:	aa01      	add	r2, sp, #4
  403818:	f000 ffdc 	bl	4047d4 <_fstat_r>
  40381c:	2800      	cmp	r0, #0
  40381e:	db0f      	blt.n	403840 <__swhatbuf_r+0x3c>
  403820:	9a02      	ldr	r2, [sp, #8]
  403822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403826:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40382a:	fab2 f282 	clz	r2, r2
  40382e:	0952      	lsrs	r2, r2, #5
  403830:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403834:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403838:	6032      	str	r2, [r6, #0]
  40383a:	602b      	str	r3, [r5, #0]
  40383c:	b010      	add	sp, #64	; 0x40
  40383e:	bd70      	pop	{r4, r5, r6, pc}
  403840:	89a2      	ldrh	r2, [r4, #12]
  403842:	2300      	movs	r3, #0
  403844:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  403848:	6033      	str	r3, [r6, #0]
  40384a:	d004      	beq.n	403856 <__swhatbuf_r+0x52>
  40384c:	2240      	movs	r2, #64	; 0x40
  40384e:	4618      	mov	r0, r3
  403850:	602a      	str	r2, [r5, #0]
  403852:	b010      	add	sp, #64	; 0x40
  403854:	bd70      	pop	{r4, r5, r6, pc}
  403856:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40385a:	602b      	str	r3, [r5, #0]
  40385c:	b010      	add	sp, #64	; 0x40
  40385e:	bd70      	pop	{r4, r5, r6, pc}

00403860 <__smakebuf_r>:
  403860:	898a      	ldrh	r2, [r1, #12]
  403862:	0792      	lsls	r2, r2, #30
  403864:	460b      	mov	r3, r1
  403866:	d506      	bpl.n	403876 <__smakebuf_r+0x16>
  403868:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40386c:	2101      	movs	r1, #1
  40386e:	601a      	str	r2, [r3, #0]
  403870:	611a      	str	r2, [r3, #16]
  403872:	6159      	str	r1, [r3, #20]
  403874:	4770      	bx	lr
  403876:	b5f0      	push	{r4, r5, r6, r7, lr}
  403878:	b083      	sub	sp, #12
  40387a:	ab01      	add	r3, sp, #4
  40387c:	466a      	mov	r2, sp
  40387e:	460c      	mov	r4, r1
  403880:	4606      	mov	r6, r0
  403882:	f7ff ffbf 	bl	403804 <__swhatbuf_r>
  403886:	9900      	ldr	r1, [sp, #0]
  403888:	4605      	mov	r5, r0
  40388a:	4630      	mov	r0, r6
  40388c:	f000 f832 	bl	4038f4 <_malloc_r>
  403890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403894:	b1d8      	cbz	r0, 4038ce <__smakebuf_r+0x6e>
  403896:	9a01      	ldr	r2, [sp, #4]
  403898:	4f15      	ldr	r7, [pc, #84]	; (4038f0 <__smakebuf_r+0x90>)
  40389a:	9900      	ldr	r1, [sp, #0]
  40389c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4038a2:	81a3      	strh	r3, [r4, #12]
  4038a4:	6020      	str	r0, [r4, #0]
  4038a6:	6120      	str	r0, [r4, #16]
  4038a8:	6161      	str	r1, [r4, #20]
  4038aa:	b91a      	cbnz	r2, 4038b4 <__smakebuf_r+0x54>
  4038ac:	432b      	orrs	r3, r5
  4038ae:	81a3      	strh	r3, [r4, #12]
  4038b0:	b003      	add	sp, #12
  4038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038b4:	4630      	mov	r0, r6
  4038b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4038ba:	f000 ff9f 	bl	4047fc <_isatty_r>
  4038be:	b1a0      	cbz	r0, 4038ea <__smakebuf_r+0x8a>
  4038c0:	89a3      	ldrh	r3, [r4, #12]
  4038c2:	f023 0303 	bic.w	r3, r3, #3
  4038c6:	f043 0301 	orr.w	r3, r3, #1
  4038ca:	b21b      	sxth	r3, r3
  4038cc:	e7ee      	b.n	4038ac <__smakebuf_r+0x4c>
  4038ce:	059a      	lsls	r2, r3, #22
  4038d0:	d4ee      	bmi.n	4038b0 <__smakebuf_r+0x50>
  4038d2:	f023 0303 	bic.w	r3, r3, #3
  4038d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4038da:	f043 0302 	orr.w	r3, r3, #2
  4038de:	2101      	movs	r1, #1
  4038e0:	81a3      	strh	r3, [r4, #12]
  4038e2:	6022      	str	r2, [r4, #0]
  4038e4:	6122      	str	r2, [r4, #16]
  4038e6:	6161      	str	r1, [r4, #20]
  4038e8:	e7e2      	b.n	4038b0 <__smakebuf_r+0x50>
  4038ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4038ee:	e7dd      	b.n	4038ac <__smakebuf_r+0x4c>
  4038f0:	00403021 	.word	0x00403021

004038f4 <_malloc_r>:
  4038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038f8:	f101 060b 	add.w	r6, r1, #11
  4038fc:	2e16      	cmp	r6, #22
  4038fe:	b083      	sub	sp, #12
  403900:	4605      	mov	r5, r0
  403902:	f240 809e 	bls.w	403a42 <_malloc_r+0x14e>
  403906:	f036 0607 	bics.w	r6, r6, #7
  40390a:	f100 80bd 	bmi.w	403a88 <_malloc_r+0x194>
  40390e:	42b1      	cmp	r1, r6
  403910:	f200 80ba 	bhi.w	403a88 <_malloc_r+0x194>
  403914:	f000 fb68 	bl	403fe8 <__malloc_lock>
  403918:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40391c:	f0c0 8293 	bcc.w	403e46 <_malloc_r+0x552>
  403920:	0a73      	lsrs	r3, r6, #9
  403922:	f000 80b8 	beq.w	403a96 <_malloc_r+0x1a2>
  403926:	2b04      	cmp	r3, #4
  403928:	f200 8179 	bhi.w	403c1e <_malloc_r+0x32a>
  40392c:	09b3      	lsrs	r3, r6, #6
  40392e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403932:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403936:	00c3      	lsls	r3, r0, #3
  403938:	4fbf      	ldr	r7, [pc, #764]	; (403c38 <_malloc_r+0x344>)
  40393a:	443b      	add	r3, r7
  40393c:	f1a3 0108 	sub.w	r1, r3, #8
  403940:	685c      	ldr	r4, [r3, #4]
  403942:	42a1      	cmp	r1, r4
  403944:	d106      	bne.n	403954 <_malloc_r+0x60>
  403946:	e00c      	b.n	403962 <_malloc_r+0x6e>
  403948:	2a00      	cmp	r2, #0
  40394a:	f280 80aa 	bge.w	403aa2 <_malloc_r+0x1ae>
  40394e:	68e4      	ldr	r4, [r4, #12]
  403950:	42a1      	cmp	r1, r4
  403952:	d006      	beq.n	403962 <_malloc_r+0x6e>
  403954:	6863      	ldr	r3, [r4, #4]
  403956:	f023 0303 	bic.w	r3, r3, #3
  40395a:	1b9a      	subs	r2, r3, r6
  40395c:	2a0f      	cmp	r2, #15
  40395e:	ddf3      	ble.n	403948 <_malloc_r+0x54>
  403960:	4670      	mov	r0, lr
  403962:	693c      	ldr	r4, [r7, #16]
  403964:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403c4c <_malloc_r+0x358>
  403968:	4574      	cmp	r4, lr
  40396a:	f000 81ab 	beq.w	403cc4 <_malloc_r+0x3d0>
  40396e:	6863      	ldr	r3, [r4, #4]
  403970:	f023 0303 	bic.w	r3, r3, #3
  403974:	1b9a      	subs	r2, r3, r6
  403976:	2a0f      	cmp	r2, #15
  403978:	f300 8190 	bgt.w	403c9c <_malloc_r+0x3a8>
  40397c:	2a00      	cmp	r2, #0
  40397e:	f8c7 e014 	str.w	lr, [r7, #20]
  403982:	f8c7 e010 	str.w	lr, [r7, #16]
  403986:	f280 809d 	bge.w	403ac4 <_malloc_r+0x1d0>
  40398a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40398e:	f080 8161 	bcs.w	403c54 <_malloc_r+0x360>
  403992:	08db      	lsrs	r3, r3, #3
  403994:	f103 0c01 	add.w	ip, r3, #1
  403998:	1099      	asrs	r1, r3, #2
  40399a:	687a      	ldr	r2, [r7, #4]
  40399c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4039a0:	f8c4 8008 	str.w	r8, [r4, #8]
  4039a4:	2301      	movs	r3, #1
  4039a6:	408b      	lsls	r3, r1
  4039a8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4039ac:	4313      	orrs	r3, r2
  4039ae:	3908      	subs	r1, #8
  4039b0:	60e1      	str	r1, [r4, #12]
  4039b2:	607b      	str	r3, [r7, #4]
  4039b4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4039b8:	f8c8 400c 	str.w	r4, [r8, #12]
  4039bc:	1082      	asrs	r2, r0, #2
  4039be:	2401      	movs	r4, #1
  4039c0:	4094      	lsls	r4, r2
  4039c2:	429c      	cmp	r4, r3
  4039c4:	f200 808b 	bhi.w	403ade <_malloc_r+0x1ea>
  4039c8:	421c      	tst	r4, r3
  4039ca:	d106      	bne.n	4039da <_malloc_r+0xe6>
  4039cc:	f020 0003 	bic.w	r0, r0, #3
  4039d0:	0064      	lsls	r4, r4, #1
  4039d2:	421c      	tst	r4, r3
  4039d4:	f100 0004 	add.w	r0, r0, #4
  4039d8:	d0fa      	beq.n	4039d0 <_malloc_r+0xdc>
  4039da:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4039de:	46cc      	mov	ip, r9
  4039e0:	4680      	mov	r8, r0
  4039e2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4039e6:	459c      	cmp	ip, r3
  4039e8:	d107      	bne.n	4039fa <_malloc_r+0x106>
  4039ea:	e16d      	b.n	403cc8 <_malloc_r+0x3d4>
  4039ec:	2a00      	cmp	r2, #0
  4039ee:	f280 817b 	bge.w	403ce8 <_malloc_r+0x3f4>
  4039f2:	68db      	ldr	r3, [r3, #12]
  4039f4:	459c      	cmp	ip, r3
  4039f6:	f000 8167 	beq.w	403cc8 <_malloc_r+0x3d4>
  4039fa:	6859      	ldr	r1, [r3, #4]
  4039fc:	f021 0103 	bic.w	r1, r1, #3
  403a00:	1b8a      	subs	r2, r1, r6
  403a02:	2a0f      	cmp	r2, #15
  403a04:	ddf2      	ble.n	4039ec <_malloc_r+0xf8>
  403a06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403a0a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403a0e:	9300      	str	r3, [sp, #0]
  403a10:	199c      	adds	r4, r3, r6
  403a12:	4628      	mov	r0, r5
  403a14:	f046 0601 	orr.w	r6, r6, #1
  403a18:	f042 0501 	orr.w	r5, r2, #1
  403a1c:	605e      	str	r6, [r3, #4]
  403a1e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403a22:	f8cc 8008 	str.w	r8, [ip, #8]
  403a26:	617c      	str	r4, [r7, #20]
  403a28:	613c      	str	r4, [r7, #16]
  403a2a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403a2e:	f8c4 e008 	str.w	lr, [r4, #8]
  403a32:	6065      	str	r5, [r4, #4]
  403a34:	505a      	str	r2, [r3, r1]
  403a36:	f000 fadd 	bl	403ff4 <__malloc_unlock>
  403a3a:	9b00      	ldr	r3, [sp, #0]
  403a3c:	f103 0408 	add.w	r4, r3, #8
  403a40:	e01e      	b.n	403a80 <_malloc_r+0x18c>
  403a42:	2910      	cmp	r1, #16
  403a44:	d820      	bhi.n	403a88 <_malloc_r+0x194>
  403a46:	f000 facf 	bl	403fe8 <__malloc_lock>
  403a4a:	2610      	movs	r6, #16
  403a4c:	2318      	movs	r3, #24
  403a4e:	2002      	movs	r0, #2
  403a50:	4f79      	ldr	r7, [pc, #484]	; (403c38 <_malloc_r+0x344>)
  403a52:	443b      	add	r3, r7
  403a54:	f1a3 0208 	sub.w	r2, r3, #8
  403a58:	685c      	ldr	r4, [r3, #4]
  403a5a:	4294      	cmp	r4, r2
  403a5c:	f000 813d 	beq.w	403cda <_malloc_r+0x3e6>
  403a60:	6863      	ldr	r3, [r4, #4]
  403a62:	68e1      	ldr	r1, [r4, #12]
  403a64:	68a6      	ldr	r6, [r4, #8]
  403a66:	f023 0303 	bic.w	r3, r3, #3
  403a6a:	4423      	add	r3, r4
  403a6c:	4628      	mov	r0, r5
  403a6e:	685a      	ldr	r2, [r3, #4]
  403a70:	60f1      	str	r1, [r6, #12]
  403a72:	f042 0201 	orr.w	r2, r2, #1
  403a76:	608e      	str	r6, [r1, #8]
  403a78:	605a      	str	r2, [r3, #4]
  403a7a:	f000 fabb 	bl	403ff4 <__malloc_unlock>
  403a7e:	3408      	adds	r4, #8
  403a80:	4620      	mov	r0, r4
  403a82:	b003      	add	sp, #12
  403a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a88:	2400      	movs	r4, #0
  403a8a:	230c      	movs	r3, #12
  403a8c:	4620      	mov	r0, r4
  403a8e:	602b      	str	r3, [r5, #0]
  403a90:	b003      	add	sp, #12
  403a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a96:	2040      	movs	r0, #64	; 0x40
  403a98:	f44f 7300 	mov.w	r3, #512	; 0x200
  403a9c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403aa0:	e74a      	b.n	403938 <_malloc_r+0x44>
  403aa2:	4423      	add	r3, r4
  403aa4:	68e1      	ldr	r1, [r4, #12]
  403aa6:	685a      	ldr	r2, [r3, #4]
  403aa8:	68a6      	ldr	r6, [r4, #8]
  403aaa:	f042 0201 	orr.w	r2, r2, #1
  403aae:	60f1      	str	r1, [r6, #12]
  403ab0:	4628      	mov	r0, r5
  403ab2:	608e      	str	r6, [r1, #8]
  403ab4:	605a      	str	r2, [r3, #4]
  403ab6:	f000 fa9d 	bl	403ff4 <__malloc_unlock>
  403aba:	3408      	adds	r4, #8
  403abc:	4620      	mov	r0, r4
  403abe:	b003      	add	sp, #12
  403ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ac4:	4423      	add	r3, r4
  403ac6:	4628      	mov	r0, r5
  403ac8:	685a      	ldr	r2, [r3, #4]
  403aca:	f042 0201 	orr.w	r2, r2, #1
  403ace:	605a      	str	r2, [r3, #4]
  403ad0:	f000 fa90 	bl	403ff4 <__malloc_unlock>
  403ad4:	3408      	adds	r4, #8
  403ad6:	4620      	mov	r0, r4
  403ad8:	b003      	add	sp, #12
  403ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ade:	68bc      	ldr	r4, [r7, #8]
  403ae0:	6863      	ldr	r3, [r4, #4]
  403ae2:	f023 0803 	bic.w	r8, r3, #3
  403ae6:	45b0      	cmp	r8, r6
  403ae8:	d304      	bcc.n	403af4 <_malloc_r+0x200>
  403aea:	eba8 0306 	sub.w	r3, r8, r6
  403aee:	2b0f      	cmp	r3, #15
  403af0:	f300 8085 	bgt.w	403bfe <_malloc_r+0x30a>
  403af4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403c50 <_malloc_r+0x35c>
  403af8:	4b50      	ldr	r3, [pc, #320]	; (403c3c <_malloc_r+0x348>)
  403afa:	f8d9 2000 	ldr.w	r2, [r9]
  403afe:	681b      	ldr	r3, [r3, #0]
  403b00:	3201      	adds	r2, #1
  403b02:	4433      	add	r3, r6
  403b04:	eb04 0a08 	add.w	sl, r4, r8
  403b08:	f000 8155 	beq.w	403db6 <_malloc_r+0x4c2>
  403b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403b10:	330f      	adds	r3, #15
  403b12:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403b16:	f02b 0b0f 	bic.w	fp, fp, #15
  403b1a:	4659      	mov	r1, fp
  403b1c:	4628      	mov	r0, r5
  403b1e:	f000 fc15 	bl	40434c <_sbrk_r>
  403b22:	1c41      	adds	r1, r0, #1
  403b24:	4602      	mov	r2, r0
  403b26:	f000 80fc 	beq.w	403d22 <_malloc_r+0x42e>
  403b2a:	4582      	cmp	sl, r0
  403b2c:	f200 80f7 	bhi.w	403d1e <_malloc_r+0x42a>
  403b30:	4b43      	ldr	r3, [pc, #268]	; (403c40 <_malloc_r+0x34c>)
  403b32:	6819      	ldr	r1, [r3, #0]
  403b34:	4459      	add	r1, fp
  403b36:	6019      	str	r1, [r3, #0]
  403b38:	f000 814d 	beq.w	403dd6 <_malloc_r+0x4e2>
  403b3c:	f8d9 0000 	ldr.w	r0, [r9]
  403b40:	3001      	adds	r0, #1
  403b42:	bf1b      	ittet	ne
  403b44:	eba2 0a0a 	subne.w	sl, r2, sl
  403b48:	4451      	addne	r1, sl
  403b4a:	f8c9 2000 	streq.w	r2, [r9]
  403b4e:	6019      	strne	r1, [r3, #0]
  403b50:	f012 0107 	ands.w	r1, r2, #7
  403b54:	f000 8115 	beq.w	403d82 <_malloc_r+0x48e>
  403b58:	f1c1 0008 	rsb	r0, r1, #8
  403b5c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403b60:	4402      	add	r2, r0
  403b62:	3108      	adds	r1, #8
  403b64:	eb02 090b 	add.w	r9, r2, fp
  403b68:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403b6c:	eba1 0909 	sub.w	r9, r1, r9
  403b70:	4649      	mov	r1, r9
  403b72:	4628      	mov	r0, r5
  403b74:	9301      	str	r3, [sp, #4]
  403b76:	9200      	str	r2, [sp, #0]
  403b78:	f000 fbe8 	bl	40434c <_sbrk_r>
  403b7c:	1c43      	adds	r3, r0, #1
  403b7e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403b82:	f000 8143 	beq.w	403e0c <_malloc_r+0x518>
  403b86:	1a80      	subs	r0, r0, r2
  403b88:	4448      	add	r0, r9
  403b8a:	f040 0001 	orr.w	r0, r0, #1
  403b8e:	6819      	ldr	r1, [r3, #0]
  403b90:	60ba      	str	r2, [r7, #8]
  403b92:	4449      	add	r1, r9
  403b94:	42bc      	cmp	r4, r7
  403b96:	6050      	str	r0, [r2, #4]
  403b98:	6019      	str	r1, [r3, #0]
  403b9a:	d017      	beq.n	403bcc <_malloc_r+0x2d8>
  403b9c:	f1b8 0f0f 	cmp.w	r8, #15
  403ba0:	f240 80fb 	bls.w	403d9a <_malloc_r+0x4a6>
  403ba4:	6860      	ldr	r0, [r4, #4]
  403ba6:	f1a8 020c 	sub.w	r2, r8, #12
  403baa:	f022 0207 	bic.w	r2, r2, #7
  403bae:	eb04 0e02 	add.w	lr, r4, r2
  403bb2:	f000 0001 	and.w	r0, r0, #1
  403bb6:	f04f 0c05 	mov.w	ip, #5
  403bba:	4310      	orrs	r0, r2
  403bbc:	2a0f      	cmp	r2, #15
  403bbe:	6060      	str	r0, [r4, #4]
  403bc0:	f8ce c004 	str.w	ip, [lr, #4]
  403bc4:	f8ce c008 	str.w	ip, [lr, #8]
  403bc8:	f200 8117 	bhi.w	403dfa <_malloc_r+0x506>
  403bcc:	4b1d      	ldr	r3, [pc, #116]	; (403c44 <_malloc_r+0x350>)
  403bce:	68bc      	ldr	r4, [r7, #8]
  403bd0:	681a      	ldr	r2, [r3, #0]
  403bd2:	4291      	cmp	r1, r2
  403bd4:	bf88      	it	hi
  403bd6:	6019      	strhi	r1, [r3, #0]
  403bd8:	4b1b      	ldr	r3, [pc, #108]	; (403c48 <_malloc_r+0x354>)
  403bda:	681a      	ldr	r2, [r3, #0]
  403bdc:	4291      	cmp	r1, r2
  403bde:	6862      	ldr	r2, [r4, #4]
  403be0:	bf88      	it	hi
  403be2:	6019      	strhi	r1, [r3, #0]
  403be4:	f022 0203 	bic.w	r2, r2, #3
  403be8:	4296      	cmp	r6, r2
  403bea:	eba2 0306 	sub.w	r3, r2, r6
  403bee:	d801      	bhi.n	403bf4 <_malloc_r+0x300>
  403bf0:	2b0f      	cmp	r3, #15
  403bf2:	dc04      	bgt.n	403bfe <_malloc_r+0x30a>
  403bf4:	4628      	mov	r0, r5
  403bf6:	f000 f9fd 	bl	403ff4 <__malloc_unlock>
  403bfa:	2400      	movs	r4, #0
  403bfc:	e740      	b.n	403a80 <_malloc_r+0x18c>
  403bfe:	19a2      	adds	r2, r4, r6
  403c00:	f043 0301 	orr.w	r3, r3, #1
  403c04:	f046 0601 	orr.w	r6, r6, #1
  403c08:	6066      	str	r6, [r4, #4]
  403c0a:	4628      	mov	r0, r5
  403c0c:	60ba      	str	r2, [r7, #8]
  403c0e:	6053      	str	r3, [r2, #4]
  403c10:	f000 f9f0 	bl	403ff4 <__malloc_unlock>
  403c14:	3408      	adds	r4, #8
  403c16:	4620      	mov	r0, r4
  403c18:	b003      	add	sp, #12
  403c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c1e:	2b14      	cmp	r3, #20
  403c20:	d971      	bls.n	403d06 <_malloc_r+0x412>
  403c22:	2b54      	cmp	r3, #84	; 0x54
  403c24:	f200 80a3 	bhi.w	403d6e <_malloc_r+0x47a>
  403c28:	0b33      	lsrs	r3, r6, #12
  403c2a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403c2e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403c32:	00c3      	lsls	r3, r0, #3
  403c34:	e680      	b.n	403938 <_malloc_r+0x44>
  403c36:	bf00      	nop
  403c38:	204005b0 	.word	0x204005b0
  403c3c:	204532dc 	.word	0x204532dc
  403c40:	204532ac 	.word	0x204532ac
  403c44:	204532d4 	.word	0x204532d4
  403c48:	204532d8 	.word	0x204532d8
  403c4c:	204005b8 	.word	0x204005b8
  403c50:	204009b8 	.word	0x204009b8
  403c54:	0a5a      	lsrs	r2, r3, #9
  403c56:	2a04      	cmp	r2, #4
  403c58:	d95b      	bls.n	403d12 <_malloc_r+0x41e>
  403c5a:	2a14      	cmp	r2, #20
  403c5c:	f200 80ae 	bhi.w	403dbc <_malloc_r+0x4c8>
  403c60:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403c64:	00c9      	lsls	r1, r1, #3
  403c66:	325b      	adds	r2, #91	; 0x5b
  403c68:	eb07 0c01 	add.w	ip, r7, r1
  403c6c:	5879      	ldr	r1, [r7, r1]
  403c6e:	f1ac 0c08 	sub.w	ip, ip, #8
  403c72:	458c      	cmp	ip, r1
  403c74:	f000 8088 	beq.w	403d88 <_malloc_r+0x494>
  403c78:	684a      	ldr	r2, [r1, #4]
  403c7a:	f022 0203 	bic.w	r2, r2, #3
  403c7e:	4293      	cmp	r3, r2
  403c80:	d273      	bcs.n	403d6a <_malloc_r+0x476>
  403c82:	6889      	ldr	r1, [r1, #8]
  403c84:	458c      	cmp	ip, r1
  403c86:	d1f7      	bne.n	403c78 <_malloc_r+0x384>
  403c88:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403c8c:	687b      	ldr	r3, [r7, #4]
  403c8e:	60e2      	str	r2, [r4, #12]
  403c90:	f8c4 c008 	str.w	ip, [r4, #8]
  403c94:	6094      	str	r4, [r2, #8]
  403c96:	f8cc 400c 	str.w	r4, [ip, #12]
  403c9a:	e68f      	b.n	4039bc <_malloc_r+0xc8>
  403c9c:	19a1      	adds	r1, r4, r6
  403c9e:	f046 0c01 	orr.w	ip, r6, #1
  403ca2:	f042 0601 	orr.w	r6, r2, #1
  403ca6:	f8c4 c004 	str.w	ip, [r4, #4]
  403caa:	4628      	mov	r0, r5
  403cac:	6179      	str	r1, [r7, #20]
  403cae:	6139      	str	r1, [r7, #16]
  403cb0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403cb4:	f8c1 e008 	str.w	lr, [r1, #8]
  403cb8:	604e      	str	r6, [r1, #4]
  403cba:	50e2      	str	r2, [r4, r3]
  403cbc:	f000 f99a 	bl	403ff4 <__malloc_unlock>
  403cc0:	3408      	adds	r4, #8
  403cc2:	e6dd      	b.n	403a80 <_malloc_r+0x18c>
  403cc4:	687b      	ldr	r3, [r7, #4]
  403cc6:	e679      	b.n	4039bc <_malloc_r+0xc8>
  403cc8:	f108 0801 	add.w	r8, r8, #1
  403ccc:	f018 0f03 	tst.w	r8, #3
  403cd0:	f10c 0c08 	add.w	ip, ip, #8
  403cd4:	f47f ae85 	bne.w	4039e2 <_malloc_r+0xee>
  403cd8:	e02d      	b.n	403d36 <_malloc_r+0x442>
  403cda:	68dc      	ldr	r4, [r3, #12]
  403cdc:	42a3      	cmp	r3, r4
  403cde:	bf08      	it	eq
  403ce0:	3002      	addeq	r0, #2
  403ce2:	f43f ae3e 	beq.w	403962 <_malloc_r+0x6e>
  403ce6:	e6bb      	b.n	403a60 <_malloc_r+0x16c>
  403ce8:	4419      	add	r1, r3
  403cea:	461c      	mov	r4, r3
  403cec:	684a      	ldr	r2, [r1, #4]
  403cee:	68db      	ldr	r3, [r3, #12]
  403cf0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403cf4:	f042 0201 	orr.w	r2, r2, #1
  403cf8:	604a      	str	r2, [r1, #4]
  403cfa:	4628      	mov	r0, r5
  403cfc:	60f3      	str	r3, [r6, #12]
  403cfe:	609e      	str	r6, [r3, #8]
  403d00:	f000 f978 	bl	403ff4 <__malloc_unlock>
  403d04:	e6bc      	b.n	403a80 <_malloc_r+0x18c>
  403d06:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403d0a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403d0e:	00c3      	lsls	r3, r0, #3
  403d10:	e612      	b.n	403938 <_malloc_r+0x44>
  403d12:	099a      	lsrs	r2, r3, #6
  403d14:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403d18:	00c9      	lsls	r1, r1, #3
  403d1a:	3238      	adds	r2, #56	; 0x38
  403d1c:	e7a4      	b.n	403c68 <_malloc_r+0x374>
  403d1e:	42bc      	cmp	r4, r7
  403d20:	d054      	beq.n	403dcc <_malloc_r+0x4d8>
  403d22:	68bc      	ldr	r4, [r7, #8]
  403d24:	6862      	ldr	r2, [r4, #4]
  403d26:	f022 0203 	bic.w	r2, r2, #3
  403d2a:	e75d      	b.n	403be8 <_malloc_r+0x2f4>
  403d2c:	f859 3908 	ldr.w	r3, [r9], #-8
  403d30:	4599      	cmp	r9, r3
  403d32:	f040 8086 	bne.w	403e42 <_malloc_r+0x54e>
  403d36:	f010 0f03 	tst.w	r0, #3
  403d3a:	f100 30ff 	add.w	r0, r0, #4294967295
  403d3e:	d1f5      	bne.n	403d2c <_malloc_r+0x438>
  403d40:	687b      	ldr	r3, [r7, #4]
  403d42:	ea23 0304 	bic.w	r3, r3, r4
  403d46:	607b      	str	r3, [r7, #4]
  403d48:	0064      	lsls	r4, r4, #1
  403d4a:	429c      	cmp	r4, r3
  403d4c:	f63f aec7 	bhi.w	403ade <_malloc_r+0x1ea>
  403d50:	2c00      	cmp	r4, #0
  403d52:	f43f aec4 	beq.w	403ade <_malloc_r+0x1ea>
  403d56:	421c      	tst	r4, r3
  403d58:	4640      	mov	r0, r8
  403d5a:	f47f ae3e 	bne.w	4039da <_malloc_r+0xe6>
  403d5e:	0064      	lsls	r4, r4, #1
  403d60:	421c      	tst	r4, r3
  403d62:	f100 0004 	add.w	r0, r0, #4
  403d66:	d0fa      	beq.n	403d5e <_malloc_r+0x46a>
  403d68:	e637      	b.n	4039da <_malloc_r+0xe6>
  403d6a:	468c      	mov	ip, r1
  403d6c:	e78c      	b.n	403c88 <_malloc_r+0x394>
  403d6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403d72:	d815      	bhi.n	403da0 <_malloc_r+0x4ac>
  403d74:	0bf3      	lsrs	r3, r6, #15
  403d76:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403d7a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403d7e:	00c3      	lsls	r3, r0, #3
  403d80:	e5da      	b.n	403938 <_malloc_r+0x44>
  403d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403d86:	e6ed      	b.n	403b64 <_malloc_r+0x270>
  403d88:	687b      	ldr	r3, [r7, #4]
  403d8a:	1092      	asrs	r2, r2, #2
  403d8c:	2101      	movs	r1, #1
  403d8e:	fa01 f202 	lsl.w	r2, r1, r2
  403d92:	4313      	orrs	r3, r2
  403d94:	607b      	str	r3, [r7, #4]
  403d96:	4662      	mov	r2, ip
  403d98:	e779      	b.n	403c8e <_malloc_r+0x39a>
  403d9a:	2301      	movs	r3, #1
  403d9c:	6053      	str	r3, [r2, #4]
  403d9e:	e729      	b.n	403bf4 <_malloc_r+0x300>
  403da0:	f240 5254 	movw	r2, #1364	; 0x554
  403da4:	4293      	cmp	r3, r2
  403da6:	d822      	bhi.n	403dee <_malloc_r+0x4fa>
  403da8:	0cb3      	lsrs	r3, r6, #18
  403daa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403dae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403db2:	00c3      	lsls	r3, r0, #3
  403db4:	e5c0      	b.n	403938 <_malloc_r+0x44>
  403db6:	f103 0b10 	add.w	fp, r3, #16
  403dba:	e6ae      	b.n	403b1a <_malloc_r+0x226>
  403dbc:	2a54      	cmp	r2, #84	; 0x54
  403dbe:	d829      	bhi.n	403e14 <_malloc_r+0x520>
  403dc0:	0b1a      	lsrs	r2, r3, #12
  403dc2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403dc6:	00c9      	lsls	r1, r1, #3
  403dc8:	326e      	adds	r2, #110	; 0x6e
  403dca:	e74d      	b.n	403c68 <_malloc_r+0x374>
  403dcc:	4b20      	ldr	r3, [pc, #128]	; (403e50 <_malloc_r+0x55c>)
  403dce:	6819      	ldr	r1, [r3, #0]
  403dd0:	4459      	add	r1, fp
  403dd2:	6019      	str	r1, [r3, #0]
  403dd4:	e6b2      	b.n	403b3c <_malloc_r+0x248>
  403dd6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403dda:	2800      	cmp	r0, #0
  403ddc:	f47f aeae 	bne.w	403b3c <_malloc_r+0x248>
  403de0:	eb08 030b 	add.w	r3, r8, fp
  403de4:	68ba      	ldr	r2, [r7, #8]
  403de6:	f043 0301 	orr.w	r3, r3, #1
  403dea:	6053      	str	r3, [r2, #4]
  403dec:	e6ee      	b.n	403bcc <_malloc_r+0x2d8>
  403dee:	207f      	movs	r0, #127	; 0x7f
  403df0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403df4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403df8:	e59e      	b.n	403938 <_malloc_r+0x44>
  403dfa:	f104 0108 	add.w	r1, r4, #8
  403dfe:	4628      	mov	r0, r5
  403e00:	9300      	str	r3, [sp, #0]
  403e02:	f7ff fa61 	bl	4032c8 <_free_r>
  403e06:	9b00      	ldr	r3, [sp, #0]
  403e08:	6819      	ldr	r1, [r3, #0]
  403e0a:	e6df      	b.n	403bcc <_malloc_r+0x2d8>
  403e0c:	2001      	movs	r0, #1
  403e0e:	f04f 0900 	mov.w	r9, #0
  403e12:	e6bc      	b.n	403b8e <_malloc_r+0x29a>
  403e14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e18:	d805      	bhi.n	403e26 <_malloc_r+0x532>
  403e1a:	0bda      	lsrs	r2, r3, #15
  403e1c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403e20:	00c9      	lsls	r1, r1, #3
  403e22:	3277      	adds	r2, #119	; 0x77
  403e24:	e720      	b.n	403c68 <_malloc_r+0x374>
  403e26:	f240 5154 	movw	r1, #1364	; 0x554
  403e2a:	428a      	cmp	r2, r1
  403e2c:	d805      	bhi.n	403e3a <_malloc_r+0x546>
  403e2e:	0c9a      	lsrs	r2, r3, #18
  403e30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403e34:	00c9      	lsls	r1, r1, #3
  403e36:	327c      	adds	r2, #124	; 0x7c
  403e38:	e716      	b.n	403c68 <_malloc_r+0x374>
  403e3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403e3e:	227e      	movs	r2, #126	; 0x7e
  403e40:	e712      	b.n	403c68 <_malloc_r+0x374>
  403e42:	687b      	ldr	r3, [r7, #4]
  403e44:	e780      	b.n	403d48 <_malloc_r+0x454>
  403e46:	08f0      	lsrs	r0, r6, #3
  403e48:	f106 0308 	add.w	r3, r6, #8
  403e4c:	e600      	b.n	403a50 <_malloc_r+0x15c>
  403e4e:	bf00      	nop
  403e50:	204532ac 	.word	0x204532ac

00403e54 <__ascii_mbtowc>:
  403e54:	b082      	sub	sp, #8
  403e56:	b149      	cbz	r1, 403e6c <__ascii_mbtowc+0x18>
  403e58:	b15a      	cbz	r2, 403e72 <__ascii_mbtowc+0x1e>
  403e5a:	b16b      	cbz	r3, 403e78 <__ascii_mbtowc+0x24>
  403e5c:	7813      	ldrb	r3, [r2, #0]
  403e5e:	600b      	str	r3, [r1, #0]
  403e60:	7812      	ldrb	r2, [r2, #0]
  403e62:	1c10      	adds	r0, r2, #0
  403e64:	bf18      	it	ne
  403e66:	2001      	movne	r0, #1
  403e68:	b002      	add	sp, #8
  403e6a:	4770      	bx	lr
  403e6c:	a901      	add	r1, sp, #4
  403e6e:	2a00      	cmp	r2, #0
  403e70:	d1f3      	bne.n	403e5a <__ascii_mbtowc+0x6>
  403e72:	4610      	mov	r0, r2
  403e74:	b002      	add	sp, #8
  403e76:	4770      	bx	lr
  403e78:	f06f 0001 	mvn.w	r0, #1
  403e7c:	e7f4      	b.n	403e68 <__ascii_mbtowc+0x14>
  403e7e:	bf00      	nop

00403e80 <memchr>:
  403e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403e84:	2a10      	cmp	r2, #16
  403e86:	db2b      	blt.n	403ee0 <memchr+0x60>
  403e88:	f010 0f07 	tst.w	r0, #7
  403e8c:	d008      	beq.n	403ea0 <memchr+0x20>
  403e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403e92:	3a01      	subs	r2, #1
  403e94:	428b      	cmp	r3, r1
  403e96:	d02d      	beq.n	403ef4 <memchr+0x74>
  403e98:	f010 0f07 	tst.w	r0, #7
  403e9c:	b342      	cbz	r2, 403ef0 <memchr+0x70>
  403e9e:	d1f6      	bne.n	403e8e <memchr+0xe>
  403ea0:	b4f0      	push	{r4, r5, r6, r7}
  403ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403eaa:	f022 0407 	bic.w	r4, r2, #7
  403eae:	f07f 0700 	mvns.w	r7, #0
  403eb2:	2300      	movs	r3, #0
  403eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403eb8:	3c08      	subs	r4, #8
  403eba:	ea85 0501 	eor.w	r5, r5, r1
  403ebe:	ea86 0601 	eor.w	r6, r6, r1
  403ec2:	fa85 f547 	uadd8	r5, r5, r7
  403ec6:	faa3 f587 	sel	r5, r3, r7
  403eca:	fa86 f647 	uadd8	r6, r6, r7
  403ece:	faa5 f687 	sel	r6, r5, r7
  403ed2:	b98e      	cbnz	r6, 403ef8 <memchr+0x78>
  403ed4:	d1ee      	bne.n	403eb4 <memchr+0x34>
  403ed6:	bcf0      	pop	{r4, r5, r6, r7}
  403ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403edc:	f002 0207 	and.w	r2, r2, #7
  403ee0:	b132      	cbz	r2, 403ef0 <memchr+0x70>
  403ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
  403ee6:	3a01      	subs	r2, #1
  403ee8:	ea83 0301 	eor.w	r3, r3, r1
  403eec:	b113      	cbz	r3, 403ef4 <memchr+0x74>
  403eee:	d1f8      	bne.n	403ee2 <memchr+0x62>
  403ef0:	2000      	movs	r0, #0
  403ef2:	4770      	bx	lr
  403ef4:	3801      	subs	r0, #1
  403ef6:	4770      	bx	lr
  403ef8:	2d00      	cmp	r5, #0
  403efa:	bf06      	itte	eq
  403efc:	4635      	moveq	r5, r6
  403efe:	3803      	subeq	r0, #3
  403f00:	3807      	subne	r0, #7
  403f02:	f015 0f01 	tst.w	r5, #1
  403f06:	d107      	bne.n	403f18 <memchr+0x98>
  403f08:	3001      	adds	r0, #1
  403f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403f0e:	bf02      	ittt	eq
  403f10:	3001      	addeq	r0, #1
  403f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403f16:	3001      	addeq	r0, #1
  403f18:	bcf0      	pop	{r4, r5, r6, r7}
  403f1a:	3801      	subs	r0, #1
  403f1c:	4770      	bx	lr
  403f1e:	bf00      	nop

00403f20 <memmove>:
  403f20:	4288      	cmp	r0, r1
  403f22:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f24:	d90d      	bls.n	403f42 <memmove+0x22>
  403f26:	188b      	adds	r3, r1, r2
  403f28:	4298      	cmp	r0, r3
  403f2a:	d20a      	bcs.n	403f42 <memmove+0x22>
  403f2c:	1884      	adds	r4, r0, r2
  403f2e:	2a00      	cmp	r2, #0
  403f30:	d051      	beq.n	403fd6 <memmove+0xb6>
  403f32:	4622      	mov	r2, r4
  403f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403f38:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403f3c:	4299      	cmp	r1, r3
  403f3e:	d1f9      	bne.n	403f34 <memmove+0x14>
  403f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f42:	2a0f      	cmp	r2, #15
  403f44:	d948      	bls.n	403fd8 <memmove+0xb8>
  403f46:	ea41 0300 	orr.w	r3, r1, r0
  403f4a:	079b      	lsls	r3, r3, #30
  403f4c:	d146      	bne.n	403fdc <memmove+0xbc>
  403f4e:	f100 0410 	add.w	r4, r0, #16
  403f52:	f101 0310 	add.w	r3, r1, #16
  403f56:	4615      	mov	r5, r2
  403f58:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403f5c:	f844 6c10 	str.w	r6, [r4, #-16]
  403f60:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403f64:	f844 6c0c 	str.w	r6, [r4, #-12]
  403f68:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403f6c:	f844 6c08 	str.w	r6, [r4, #-8]
  403f70:	3d10      	subs	r5, #16
  403f72:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403f76:	f844 6c04 	str.w	r6, [r4, #-4]
  403f7a:	2d0f      	cmp	r5, #15
  403f7c:	f103 0310 	add.w	r3, r3, #16
  403f80:	f104 0410 	add.w	r4, r4, #16
  403f84:	d8e8      	bhi.n	403f58 <memmove+0x38>
  403f86:	f1a2 0310 	sub.w	r3, r2, #16
  403f8a:	f023 030f 	bic.w	r3, r3, #15
  403f8e:	f002 0e0f 	and.w	lr, r2, #15
  403f92:	3310      	adds	r3, #16
  403f94:	f1be 0f03 	cmp.w	lr, #3
  403f98:	4419      	add	r1, r3
  403f9a:	4403      	add	r3, r0
  403f9c:	d921      	bls.n	403fe2 <memmove+0xc2>
  403f9e:	1f1e      	subs	r6, r3, #4
  403fa0:	460d      	mov	r5, r1
  403fa2:	4674      	mov	r4, lr
  403fa4:	3c04      	subs	r4, #4
  403fa6:	f855 7b04 	ldr.w	r7, [r5], #4
  403faa:	f846 7f04 	str.w	r7, [r6, #4]!
  403fae:	2c03      	cmp	r4, #3
  403fb0:	d8f8      	bhi.n	403fa4 <memmove+0x84>
  403fb2:	f1ae 0404 	sub.w	r4, lr, #4
  403fb6:	f024 0403 	bic.w	r4, r4, #3
  403fba:	3404      	adds	r4, #4
  403fbc:	4421      	add	r1, r4
  403fbe:	4423      	add	r3, r4
  403fc0:	f002 0203 	and.w	r2, r2, #3
  403fc4:	b162      	cbz	r2, 403fe0 <memmove+0xc0>
  403fc6:	3b01      	subs	r3, #1
  403fc8:	440a      	add	r2, r1
  403fca:	f811 4b01 	ldrb.w	r4, [r1], #1
  403fce:	f803 4f01 	strb.w	r4, [r3, #1]!
  403fd2:	428a      	cmp	r2, r1
  403fd4:	d1f9      	bne.n	403fca <memmove+0xaa>
  403fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fd8:	4603      	mov	r3, r0
  403fda:	e7f3      	b.n	403fc4 <memmove+0xa4>
  403fdc:	4603      	mov	r3, r0
  403fde:	e7f2      	b.n	403fc6 <memmove+0xa6>
  403fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403fe2:	4672      	mov	r2, lr
  403fe4:	e7ee      	b.n	403fc4 <memmove+0xa4>
  403fe6:	bf00      	nop

00403fe8 <__malloc_lock>:
  403fe8:	4801      	ldr	r0, [pc, #4]	; (403ff0 <__malloc_lock+0x8>)
  403fea:	f7ff bc07 	b.w	4037fc <__retarget_lock_acquire_recursive>
  403fee:	bf00      	nop
  403ff0:	2045355c 	.word	0x2045355c

00403ff4 <__malloc_unlock>:
  403ff4:	4801      	ldr	r0, [pc, #4]	; (403ffc <__malloc_unlock+0x8>)
  403ff6:	f7ff bc03 	b.w	403800 <__retarget_lock_release_recursive>
  403ffa:	bf00      	nop
  403ffc:	2045355c 	.word	0x2045355c

00404000 <_realloc_r>:
  404000:	2900      	cmp	r1, #0
  404002:	f000 8095 	beq.w	404130 <_realloc_r+0x130>
  404006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40400a:	460d      	mov	r5, r1
  40400c:	4616      	mov	r6, r2
  40400e:	b083      	sub	sp, #12
  404010:	4680      	mov	r8, r0
  404012:	f106 070b 	add.w	r7, r6, #11
  404016:	f7ff ffe7 	bl	403fe8 <__malloc_lock>
  40401a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40401e:	2f16      	cmp	r7, #22
  404020:	f02e 0403 	bic.w	r4, lr, #3
  404024:	f1a5 0908 	sub.w	r9, r5, #8
  404028:	d83c      	bhi.n	4040a4 <_realloc_r+0xa4>
  40402a:	2210      	movs	r2, #16
  40402c:	4617      	mov	r7, r2
  40402e:	42be      	cmp	r6, r7
  404030:	d83d      	bhi.n	4040ae <_realloc_r+0xae>
  404032:	4294      	cmp	r4, r2
  404034:	da43      	bge.n	4040be <_realloc_r+0xbe>
  404036:	4bc4      	ldr	r3, [pc, #784]	; (404348 <_realloc_r+0x348>)
  404038:	6899      	ldr	r1, [r3, #8]
  40403a:	eb09 0004 	add.w	r0, r9, r4
  40403e:	4288      	cmp	r0, r1
  404040:	f000 80b4 	beq.w	4041ac <_realloc_r+0x1ac>
  404044:	6843      	ldr	r3, [r0, #4]
  404046:	f023 0101 	bic.w	r1, r3, #1
  40404a:	4401      	add	r1, r0
  40404c:	6849      	ldr	r1, [r1, #4]
  40404e:	07c9      	lsls	r1, r1, #31
  404050:	d54c      	bpl.n	4040ec <_realloc_r+0xec>
  404052:	f01e 0f01 	tst.w	lr, #1
  404056:	f000 809b 	beq.w	404190 <_realloc_r+0x190>
  40405a:	4631      	mov	r1, r6
  40405c:	4640      	mov	r0, r8
  40405e:	f7ff fc49 	bl	4038f4 <_malloc_r>
  404062:	4606      	mov	r6, r0
  404064:	2800      	cmp	r0, #0
  404066:	d03a      	beq.n	4040de <_realloc_r+0xde>
  404068:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40406c:	f023 0301 	bic.w	r3, r3, #1
  404070:	444b      	add	r3, r9
  404072:	f1a0 0208 	sub.w	r2, r0, #8
  404076:	429a      	cmp	r2, r3
  404078:	f000 8121 	beq.w	4042be <_realloc_r+0x2be>
  40407c:	1f22      	subs	r2, r4, #4
  40407e:	2a24      	cmp	r2, #36	; 0x24
  404080:	f200 8107 	bhi.w	404292 <_realloc_r+0x292>
  404084:	2a13      	cmp	r2, #19
  404086:	f200 80db 	bhi.w	404240 <_realloc_r+0x240>
  40408a:	4603      	mov	r3, r0
  40408c:	462a      	mov	r2, r5
  40408e:	6811      	ldr	r1, [r2, #0]
  404090:	6019      	str	r1, [r3, #0]
  404092:	6851      	ldr	r1, [r2, #4]
  404094:	6059      	str	r1, [r3, #4]
  404096:	6892      	ldr	r2, [r2, #8]
  404098:	609a      	str	r2, [r3, #8]
  40409a:	4629      	mov	r1, r5
  40409c:	4640      	mov	r0, r8
  40409e:	f7ff f913 	bl	4032c8 <_free_r>
  4040a2:	e01c      	b.n	4040de <_realloc_r+0xde>
  4040a4:	f027 0707 	bic.w	r7, r7, #7
  4040a8:	2f00      	cmp	r7, #0
  4040aa:	463a      	mov	r2, r7
  4040ac:	dabf      	bge.n	40402e <_realloc_r+0x2e>
  4040ae:	2600      	movs	r6, #0
  4040b0:	230c      	movs	r3, #12
  4040b2:	4630      	mov	r0, r6
  4040b4:	f8c8 3000 	str.w	r3, [r8]
  4040b8:	b003      	add	sp, #12
  4040ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040be:	462e      	mov	r6, r5
  4040c0:	1be3      	subs	r3, r4, r7
  4040c2:	2b0f      	cmp	r3, #15
  4040c4:	d81e      	bhi.n	404104 <_realloc_r+0x104>
  4040c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4040ca:	f003 0301 	and.w	r3, r3, #1
  4040ce:	4323      	orrs	r3, r4
  4040d0:	444c      	add	r4, r9
  4040d2:	f8c9 3004 	str.w	r3, [r9, #4]
  4040d6:	6863      	ldr	r3, [r4, #4]
  4040d8:	f043 0301 	orr.w	r3, r3, #1
  4040dc:	6063      	str	r3, [r4, #4]
  4040de:	4640      	mov	r0, r8
  4040e0:	f7ff ff88 	bl	403ff4 <__malloc_unlock>
  4040e4:	4630      	mov	r0, r6
  4040e6:	b003      	add	sp, #12
  4040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ec:	f023 0303 	bic.w	r3, r3, #3
  4040f0:	18e1      	adds	r1, r4, r3
  4040f2:	4291      	cmp	r1, r2
  4040f4:	db1f      	blt.n	404136 <_realloc_r+0x136>
  4040f6:	68c3      	ldr	r3, [r0, #12]
  4040f8:	6882      	ldr	r2, [r0, #8]
  4040fa:	462e      	mov	r6, r5
  4040fc:	60d3      	str	r3, [r2, #12]
  4040fe:	460c      	mov	r4, r1
  404100:	609a      	str	r2, [r3, #8]
  404102:	e7dd      	b.n	4040c0 <_realloc_r+0xc0>
  404104:	f8d9 2004 	ldr.w	r2, [r9, #4]
  404108:	eb09 0107 	add.w	r1, r9, r7
  40410c:	f002 0201 	and.w	r2, r2, #1
  404110:	444c      	add	r4, r9
  404112:	f043 0301 	orr.w	r3, r3, #1
  404116:	4317      	orrs	r7, r2
  404118:	f8c9 7004 	str.w	r7, [r9, #4]
  40411c:	604b      	str	r3, [r1, #4]
  40411e:	6863      	ldr	r3, [r4, #4]
  404120:	f043 0301 	orr.w	r3, r3, #1
  404124:	3108      	adds	r1, #8
  404126:	6063      	str	r3, [r4, #4]
  404128:	4640      	mov	r0, r8
  40412a:	f7ff f8cd 	bl	4032c8 <_free_r>
  40412e:	e7d6      	b.n	4040de <_realloc_r+0xde>
  404130:	4611      	mov	r1, r2
  404132:	f7ff bbdf 	b.w	4038f4 <_malloc_r>
  404136:	f01e 0f01 	tst.w	lr, #1
  40413a:	d18e      	bne.n	40405a <_realloc_r+0x5a>
  40413c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404140:	eba9 0a01 	sub.w	sl, r9, r1
  404144:	f8da 1004 	ldr.w	r1, [sl, #4]
  404148:	f021 0103 	bic.w	r1, r1, #3
  40414c:	440b      	add	r3, r1
  40414e:	4423      	add	r3, r4
  404150:	4293      	cmp	r3, r2
  404152:	db25      	blt.n	4041a0 <_realloc_r+0x1a0>
  404154:	68c2      	ldr	r2, [r0, #12]
  404156:	6881      	ldr	r1, [r0, #8]
  404158:	4656      	mov	r6, sl
  40415a:	60ca      	str	r2, [r1, #12]
  40415c:	6091      	str	r1, [r2, #8]
  40415e:	f8da 100c 	ldr.w	r1, [sl, #12]
  404162:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404166:	1f22      	subs	r2, r4, #4
  404168:	2a24      	cmp	r2, #36	; 0x24
  40416a:	60c1      	str	r1, [r0, #12]
  40416c:	6088      	str	r0, [r1, #8]
  40416e:	f200 8094 	bhi.w	40429a <_realloc_r+0x29a>
  404172:	2a13      	cmp	r2, #19
  404174:	d96f      	bls.n	404256 <_realloc_r+0x256>
  404176:	6829      	ldr	r1, [r5, #0]
  404178:	f8ca 1008 	str.w	r1, [sl, #8]
  40417c:	6869      	ldr	r1, [r5, #4]
  40417e:	f8ca 100c 	str.w	r1, [sl, #12]
  404182:	2a1b      	cmp	r2, #27
  404184:	f200 80a2 	bhi.w	4042cc <_realloc_r+0x2cc>
  404188:	3508      	adds	r5, #8
  40418a:	f10a 0210 	add.w	r2, sl, #16
  40418e:	e063      	b.n	404258 <_realloc_r+0x258>
  404190:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404194:	eba9 0a03 	sub.w	sl, r9, r3
  404198:	f8da 1004 	ldr.w	r1, [sl, #4]
  40419c:	f021 0103 	bic.w	r1, r1, #3
  4041a0:	1863      	adds	r3, r4, r1
  4041a2:	4293      	cmp	r3, r2
  4041a4:	f6ff af59 	blt.w	40405a <_realloc_r+0x5a>
  4041a8:	4656      	mov	r6, sl
  4041aa:	e7d8      	b.n	40415e <_realloc_r+0x15e>
  4041ac:	6841      	ldr	r1, [r0, #4]
  4041ae:	f021 0b03 	bic.w	fp, r1, #3
  4041b2:	44a3      	add	fp, r4
  4041b4:	f107 0010 	add.w	r0, r7, #16
  4041b8:	4583      	cmp	fp, r0
  4041ba:	da56      	bge.n	40426a <_realloc_r+0x26a>
  4041bc:	f01e 0f01 	tst.w	lr, #1
  4041c0:	f47f af4b 	bne.w	40405a <_realloc_r+0x5a>
  4041c4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4041c8:	eba9 0a01 	sub.w	sl, r9, r1
  4041cc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4041d0:	f021 0103 	bic.w	r1, r1, #3
  4041d4:	448b      	add	fp, r1
  4041d6:	4558      	cmp	r0, fp
  4041d8:	dce2      	bgt.n	4041a0 <_realloc_r+0x1a0>
  4041da:	4656      	mov	r6, sl
  4041dc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4041e0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4041e4:	1f22      	subs	r2, r4, #4
  4041e6:	2a24      	cmp	r2, #36	; 0x24
  4041e8:	60c1      	str	r1, [r0, #12]
  4041ea:	6088      	str	r0, [r1, #8]
  4041ec:	f200 808f 	bhi.w	40430e <_realloc_r+0x30e>
  4041f0:	2a13      	cmp	r2, #19
  4041f2:	f240 808a 	bls.w	40430a <_realloc_r+0x30a>
  4041f6:	6829      	ldr	r1, [r5, #0]
  4041f8:	f8ca 1008 	str.w	r1, [sl, #8]
  4041fc:	6869      	ldr	r1, [r5, #4]
  4041fe:	f8ca 100c 	str.w	r1, [sl, #12]
  404202:	2a1b      	cmp	r2, #27
  404204:	f200 808a 	bhi.w	40431c <_realloc_r+0x31c>
  404208:	3508      	adds	r5, #8
  40420a:	f10a 0210 	add.w	r2, sl, #16
  40420e:	6829      	ldr	r1, [r5, #0]
  404210:	6011      	str	r1, [r2, #0]
  404212:	6869      	ldr	r1, [r5, #4]
  404214:	6051      	str	r1, [r2, #4]
  404216:	68a9      	ldr	r1, [r5, #8]
  404218:	6091      	str	r1, [r2, #8]
  40421a:	eb0a 0107 	add.w	r1, sl, r7
  40421e:	ebab 0207 	sub.w	r2, fp, r7
  404222:	f042 0201 	orr.w	r2, r2, #1
  404226:	6099      	str	r1, [r3, #8]
  404228:	604a      	str	r2, [r1, #4]
  40422a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40422e:	f003 0301 	and.w	r3, r3, #1
  404232:	431f      	orrs	r7, r3
  404234:	4640      	mov	r0, r8
  404236:	f8ca 7004 	str.w	r7, [sl, #4]
  40423a:	f7ff fedb 	bl	403ff4 <__malloc_unlock>
  40423e:	e751      	b.n	4040e4 <_realloc_r+0xe4>
  404240:	682b      	ldr	r3, [r5, #0]
  404242:	6003      	str	r3, [r0, #0]
  404244:	686b      	ldr	r3, [r5, #4]
  404246:	6043      	str	r3, [r0, #4]
  404248:	2a1b      	cmp	r2, #27
  40424a:	d82d      	bhi.n	4042a8 <_realloc_r+0x2a8>
  40424c:	f100 0308 	add.w	r3, r0, #8
  404250:	f105 0208 	add.w	r2, r5, #8
  404254:	e71b      	b.n	40408e <_realloc_r+0x8e>
  404256:	4632      	mov	r2, r6
  404258:	6829      	ldr	r1, [r5, #0]
  40425a:	6011      	str	r1, [r2, #0]
  40425c:	6869      	ldr	r1, [r5, #4]
  40425e:	6051      	str	r1, [r2, #4]
  404260:	68a9      	ldr	r1, [r5, #8]
  404262:	6091      	str	r1, [r2, #8]
  404264:	461c      	mov	r4, r3
  404266:	46d1      	mov	r9, sl
  404268:	e72a      	b.n	4040c0 <_realloc_r+0xc0>
  40426a:	eb09 0107 	add.w	r1, r9, r7
  40426e:	ebab 0b07 	sub.w	fp, fp, r7
  404272:	f04b 0201 	orr.w	r2, fp, #1
  404276:	6099      	str	r1, [r3, #8]
  404278:	604a      	str	r2, [r1, #4]
  40427a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40427e:	f003 0301 	and.w	r3, r3, #1
  404282:	431f      	orrs	r7, r3
  404284:	4640      	mov	r0, r8
  404286:	f845 7c04 	str.w	r7, [r5, #-4]
  40428a:	f7ff feb3 	bl	403ff4 <__malloc_unlock>
  40428e:	462e      	mov	r6, r5
  404290:	e728      	b.n	4040e4 <_realloc_r+0xe4>
  404292:	4629      	mov	r1, r5
  404294:	f7ff fe44 	bl	403f20 <memmove>
  404298:	e6ff      	b.n	40409a <_realloc_r+0x9a>
  40429a:	4629      	mov	r1, r5
  40429c:	4630      	mov	r0, r6
  40429e:	461c      	mov	r4, r3
  4042a0:	46d1      	mov	r9, sl
  4042a2:	f7ff fe3d 	bl	403f20 <memmove>
  4042a6:	e70b      	b.n	4040c0 <_realloc_r+0xc0>
  4042a8:	68ab      	ldr	r3, [r5, #8]
  4042aa:	6083      	str	r3, [r0, #8]
  4042ac:	68eb      	ldr	r3, [r5, #12]
  4042ae:	60c3      	str	r3, [r0, #12]
  4042b0:	2a24      	cmp	r2, #36	; 0x24
  4042b2:	d017      	beq.n	4042e4 <_realloc_r+0x2e4>
  4042b4:	f100 0310 	add.w	r3, r0, #16
  4042b8:	f105 0210 	add.w	r2, r5, #16
  4042bc:	e6e7      	b.n	40408e <_realloc_r+0x8e>
  4042be:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4042c2:	f023 0303 	bic.w	r3, r3, #3
  4042c6:	441c      	add	r4, r3
  4042c8:	462e      	mov	r6, r5
  4042ca:	e6f9      	b.n	4040c0 <_realloc_r+0xc0>
  4042cc:	68a9      	ldr	r1, [r5, #8]
  4042ce:	f8ca 1010 	str.w	r1, [sl, #16]
  4042d2:	68e9      	ldr	r1, [r5, #12]
  4042d4:	f8ca 1014 	str.w	r1, [sl, #20]
  4042d8:	2a24      	cmp	r2, #36	; 0x24
  4042da:	d00c      	beq.n	4042f6 <_realloc_r+0x2f6>
  4042dc:	3510      	adds	r5, #16
  4042de:	f10a 0218 	add.w	r2, sl, #24
  4042e2:	e7b9      	b.n	404258 <_realloc_r+0x258>
  4042e4:	692b      	ldr	r3, [r5, #16]
  4042e6:	6103      	str	r3, [r0, #16]
  4042e8:	696b      	ldr	r3, [r5, #20]
  4042ea:	6143      	str	r3, [r0, #20]
  4042ec:	f105 0218 	add.w	r2, r5, #24
  4042f0:	f100 0318 	add.w	r3, r0, #24
  4042f4:	e6cb      	b.n	40408e <_realloc_r+0x8e>
  4042f6:	692a      	ldr	r2, [r5, #16]
  4042f8:	f8ca 2018 	str.w	r2, [sl, #24]
  4042fc:	696a      	ldr	r2, [r5, #20]
  4042fe:	f8ca 201c 	str.w	r2, [sl, #28]
  404302:	3518      	adds	r5, #24
  404304:	f10a 0220 	add.w	r2, sl, #32
  404308:	e7a6      	b.n	404258 <_realloc_r+0x258>
  40430a:	4632      	mov	r2, r6
  40430c:	e77f      	b.n	40420e <_realloc_r+0x20e>
  40430e:	4629      	mov	r1, r5
  404310:	4630      	mov	r0, r6
  404312:	9301      	str	r3, [sp, #4]
  404314:	f7ff fe04 	bl	403f20 <memmove>
  404318:	9b01      	ldr	r3, [sp, #4]
  40431a:	e77e      	b.n	40421a <_realloc_r+0x21a>
  40431c:	68a9      	ldr	r1, [r5, #8]
  40431e:	f8ca 1010 	str.w	r1, [sl, #16]
  404322:	68e9      	ldr	r1, [r5, #12]
  404324:	f8ca 1014 	str.w	r1, [sl, #20]
  404328:	2a24      	cmp	r2, #36	; 0x24
  40432a:	d003      	beq.n	404334 <_realloc_r+0x334>
  40432c:	3510      	adds	r5, #16
  40432e:	f10a 0218 	add.w	r2, sl, #24
  404332:	e76c      	b.n	40420e <_realloc_r+0x20e>
  404334:	692a      	ldr	r2, [r5, #16]
  404336:	f8ca 2018 	str.w	r2, [sl, #24]
  40433a:	696a      	ldr	r2, [r5, #20]
  40433c:	f8ca 201c 	str.w	r2, [sl, #28]
  404340:	3518      	adds	r5, #24
  404342:	f10a 0220 	add.w	r2, sl, #32
  404346:	e762      	b.n	40420e <_realloc_r+0x20e>
  404348:	204005b0 	.word	0x204005b0

0040434c <_sbrk_r>:
  40434c:	b538      	push	{r3, r4, r5, lr}
  40434e:	4c07      	ldr	r4, [pc, #28]	; (40436c <_sbrk_r+0x20>)
  404350:	2300      	movs	r3, #0
  404352:	4605      	mov	r5, r0
  404354:	4608      	mov	r0, r1
  404356:	6023      	str	r3, [r4, #0]
  404358:	f7fd fa5e 	bl	401818 <_sbrk>
  40435c:	1c43      	adds	r3, r0, #1
  40435e:	d000      	beq.n	404362 <_sbrk_r+0x16>
  404360:	bd38      	pop	{r3, r4, r5, pc}
  404362:	6823      	ldr	r3, [r4, #0]
  404364:	2b00      	cmp	r3, #0
  404366:	d0fb      	beq.n	404360 <_sbrk_r+0x14>
  404368:	602b      	str	r3, [r5, #0]
  40436a:	bd38      	pop	{r3, r4, r5, pc}
  40436c:	20453570 	.word	0x20453570

00404370 <__sread>:
  404370:	b510      	push	{r4, lr}
  404372:	460c      	mov	r4, r1
  404374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404378:	f000 fa68 	bl	40484c <_read_r>
  40437c:	2800      	cmp	r0, #0
  40437e:	db03      	blt.n	404388 <__sread+0x18>
  404380:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404382:	4403      	add	r3, r0
  404384:	6523      	str	r3, [r4, #80]	; 0x50
  404386:	bd10      	pop	{r4, pc}
  404388:	89a3      	ldrh	r3, [r4, #12]
  40438a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40438e:	81a3      	strh	r3, [r4, #12]
  404390:	bd10      	pop	{r4, pc}
  404392:	bf00      	nop

00404394 <__swrite>:
  404394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404398:	4616      	mov	r6, r2
  40439a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40439e:	461f      	mov	r7, r3
  4043a0:	05d3      	lsls	r3, r2, #23
  4043a2:	460c      	mov	r4, r1
  4043a4:	4605      	mov	r5, r0
  4043a6:	d507      	bpl.n	4043b8 <__swrite+0x24>
  4043a8:	2200      	movs	r2, #0
  4043aa:	2302      	movs	r3, #2
  4043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043b0:	f000 fa36 	bl	404820 <_lseek_r>
  4043b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4043b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4043bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4043c0:	81a2      	strh	r2, [r4, #12]
  4043c2:	463b      	mov	r3, r7
  4043c4:	4632      	mov	r2, r6
  4043c6:	4628      	mov	r0, r5
  4043c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4043cc:	f000 b916 	b.w	4045fc <_write_r>

004043d0 <__sseek>:
  4043d0:	b510      	push	{r4, lr}
  4043d2:	460c      	mov	r4, r1
  4043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043d8:	f000 fa22 	bl	404820 <_lseek_r>
  4043dc:	89a3      	ldrh	r3, [r4, #12]
  4043de:	1c42      	adds	r2, r0, #1
  4043e0:	bf0e      	itee	eq
  4043e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4043e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4043ea:	6520      	strne	r0, [r4, #80]	; 0x50
  4043ec:	81a3      	strh	r3, [r4, #12]
  4043ee:	bd10      	pop	{r4, pc}

004043f0 <__sclose>:
  4043f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043f4:	f000 b97a 	b.w	4046ec <_close_r>
	...

00404400 <strlen>:
  404400:	f890 f000 	pld	[r0]
  404404:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404408:	f020 0107 	bic.w	r1, r0, #7
  40440c:	f06f 0c00 	mvn.w	ip, #0
  404410:	f010 0407 	ands.w	r4, r0, #7
  404414:	f891 f020 	pld	[r1, #32]
  404418:	f040 8049 	bne.w	4044ae <strlen+0xae>
  40441c:	f04f 0400 	mov.w	r4, #0
  404420:	f06f 0007 	mvn.w	r0, #7
  404424:	e9d1 2300 	ldrd	r2, r3, [r1]
  404428:	f891 f040 	pld	[r1, #64]	; 0x40
  40442c:	f100 0008 	add.w	r0, r0, #8
  404430:	fa82 f24c 	uadd8	r2, r2, ip
  404434:	faa4 f28c 	sel	r2, r4, ip
  404438:	fa83 f34c 	uadd8	r3, r3, ip
  40443c:	faa2 f38c 	sel	r3, r2, ip
  404440:	bb4b      	cbnz	r3, 404496 <strlen+0x96>
  404442:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404446:	fa82 f24c 	uadd8	r2, r2, ip
  40444a:	f100 0008 	add.w	r0, r0, #8
  40444e:	faa4 f28c 	sel	r2, r4, ip
  404452:	fa83 f34c 	uadd8	r3, r3, ip
  404456:	faa2 f38c 	sel	r3, r2, ip
  40445a:	b9e3      	cbnz	r3, 404496 <strlen+0x96>
  40445c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404460:	fa82 f24c 	uadd8	r2, r2, ip
  404464:	f100 0008 	add.w	r0, r0, #8
  404468:	faa4 f28c 	sel	r2, r4, ip
  40446c:	fa83 f34c 	uadd8	r3, r3, ip
  404470:	faa2 f38c 	sel	r3, r2, ip
  404474:	b97b      	cbnz	r3, 404496 <strlen+0x96>
  404476:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40447a:	f101 0120 	add.w	r1, r1, #32
  40447e:	fa82 f24c 	uadd8	r2, r2, ip
  404482:	f100 0008 	add.w	r0, r0, #8
  404486:	faa4 f28c 	sel	r2, r4, ip
  40448a:	fa83 f34c 	uadd8	r3, r3, ip
  40448e:	faa2 f38c 	sel	r3, r2, ip
  404492:	2b00      	cmp	r3, #0
  404494:	d0c6      	beq.n	404424 <strlen+0x24>
  404496:	2a00      	cmp	r2, #0
  404498:	bf04      	itt	eq
  40449a:	3004      	addeq	r0, #4
  40449c:	461a      	moveq	r2, r3
  40449e:	ba12      	rev	r2, r2
  4044a0:	fab2 f282 	clz	r2, r2
  4044a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4044a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4044ac:	4770      	bx	lr
  4044ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4044b2:	f004 0503 	and.w	r5, r4, #3
  4044b6:	f1c4 0000 	rsb	r0, r4, #0
  4044ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4044be:	f014 0f04 	tst.w	r4, #4
  4044c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4044c6:	fa0c f505 	lsl.w	r5, ip, r5
  4044ca:	ea62 0205 	orn	r2, r2, r5
  4044ce:	bf1c      	itt	ne
  4044d0:	ea63 0305 	ornne	r3, r3, r5
  4044d4:	4662      	movne	r2, ip
  4044d6:	f04f 0400 	mov.w	r4, #0
  4044da:	e7a9      	b.n	404430 <strlen+0x30>

004044dc <__swbuf_r>:
  4044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4044de:	460d      	mov	r5, r1
  4044e0:	4614      	mov	r4, r2
  4044e2:	4606      	mov	r6, r0
  4044e4:	b110      	cbz	r0, 4044ec <__swbuf_r+0x10>
  4044e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	d04b      	beq.n	404584 <__swbuf_r+0xa8>
  4044ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4044f0:	69a3      	ldr	r3, [r4, #24]
  4044f2:	60a3      	str	r3, [r4, #8]
  4044f4:	b291      	uxth	r1, r2
  4044f6:	0708      	lsls	r0, r1, #28
  4044f8:	d539      	bpl.n	40456e <__swbuf_r+0x92>
  4044fa:	6923      	ldr	r3, [r4, #16]
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	d036      	beq.n	40456e <__swbuf_r+0x92>
  404500:	b2ed      	uxtb	r5, r5
  404502:	0489      	lsls	r1, r1, #18
  404504:	462f      	mov	r7, r5
  404506:	d515      	bpl.n	404534 <__swbuf_r+0x58>
  404508:	6822      	ldr	r2, [r4, #0]
  40450a:	6961      	ldr	r1, [r4, #20]
  40450c:	1ad3      	subs	r3, r2, r3
  40450e:	428b      	cmp	r3, r1
  404510:	da1c      	bge.n	40454c <__swbuf_r+0x70>
  404512:	3301      	adds	r3, #1
  404514:	68a1      	ldr	r1, [r4, #8]
  404516:	1c50      	adds	r0, r2, #1
  404518:	3901      	subs	r1, #1
  40451a:	60a1      	str	r1, [r4, #8]
  40451c:	6020      	str	r0, [r4, #0]
  40451e:	7015      	strb	r5, [r2, #0]
  404520:	6962      	ldr	r2, [r4, #20]
  404522:	429a      	cmp	r2, r3
  404524:	d01a      	beq.n	40455c <__swbuf_r+0x80>
  404526:	89a3      	ldrh	r3, [r4, #12]
  404528:	07db      	lsls	r3, r3, #31
  40452a:	d501      	bpl.n	404530 <__swbuf_r+0x54>
  40452c:	2d0a      	cmp	r5, #10
  40452e:	d015      	beq.n	40455c <__swbuf_r+0x80>
  404530:	4638      	mov	r0, r7
  404532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404534:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40453a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40453e:	81a2      	strh	r2, [r4, #12]
  404540:	6822      	ldr	r2, [r4, #0]
  404542:	6661      	str	r1, [r4, #100]	; 0x64
  404544:	6961      	ldr	r1, [r4, #20]
  404546:	1ad3      	subs	r3, r2, r3
  404548:	428b      	cmp	r3, r1
  40454a:	dbe2      	blt.n	404512 <__swbuf_r+0x36>
  40454c:	4621      	mov	r1, r4
  40454e:	4630      	mov	r0, r6
  404550:	f7fe fd3c 	bl	402fcc <_fflush_r>
  404554:	b940      	cbnz	r0, 404568 <__swbuf_r+0x8c>
  404556:	6822      	ldr	r2, [r4, #0]
  404558:	2301      	movs	r3, #1
  40455a:	e7db      	b.n	404514 <__swbuf_r+0x38>
  40455c:	4621      	mov	r1, r4
  40455e:	4630      	mov	r0, r6
  404560:	f7fe fd34 	bl	402fcc <_fflush_r>
  404564:	2800      	cmp	r0, #0
  404566:	d0e3      	beq.n	404530 <__swbuf_r+0x54>
  404568:	f04f 37ff 	mov.w	r7, #4294967295
  40456c:	e7e0      	b.n	404530 <__swbuf_r+0x54>
  40456e:	4621      	mov	r1, r4
  404570:	4630      	mov	r0, r6
  404572:	f7fe fc17 	bl	402da4 <__swsetup_r>
  404576:	2800      	cmp	r0, #0
  404578:	d1f6      	bne.n	404568 <__swbuf_r+0x8c>
  40457a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40457e:	6923      	ldr	r3, [r4, #16]
  404580:	b291      	uxth	r1, r2
  404582:	e7bd      	b.n	404500 <__swbuf_r+0x24>
  404584:	f7fe fd7a 	bl	40307c <__sinit>
  404588:	e7b0      	b.n	4044ec <__swbuf_r+0x10>
  40458a:	bf00      	nop

0040458c <_wcrtomb_r>:
  40458c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40458e:	4606      	mov	r6, r0
  404590:	b085      	sub	sp, #20
  404592:	461f      	mov	r7, r3
  404594:	b189      	cbz	r1, 4045ba <_wcrtomb_r+0x2e>
  404596:	4c10      	ldr	r4, [pc, #64]	; (4045d8 <_wcrtomb_r+0x4c>)
  404598:	4d10      	ldr	r5, [pc, #64]	; (4045dc <_wcrtomb_r+0x50>)
  40459a:	6824      	ldr	r4, [r4, #0]
  40459c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40459e:	2c00      	cmp	r4, #0
  4045a0:	bf08      	it	eq
  4045a2:	462c      	moveq	r4, r5
  4045a4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4045a8:	47a0      	blx	r4
  4045aa:	1c43      	adds	r3, r0, #1
  4045ac:	d103      	bne.n	4045b6 <_wcrtomb_r+0x2a>
  4045ae:	2200      	movs	r2, #0
  4045b0:	238a      	movs	r3, #138	; 0x8a
  4045b2:	603a      	str	r2, [r7, #0]
  4045b4:	6033      	str	r3, [r6, #0]
  4045b6:	b005      	add	sp, #20
  4045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045ba:	460c      	mov	r4, r1
  4045bc:	4906      	ldr	r1, [pc, #24]	; (4045d8 <_wcrtomb_r+0x4c>)
  4045be:	4a07      	ldr	r2, [pc, #28]	; (4045dc <_wcrtomb_r+0x50>)
  4045c0:	6809      	ldr	r1, [r1, #0]
  4045c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4045c4:	2900      	cmp	r1, #0
  4045c6:	bf08      	it	eq
  4045c8:	4611      	moveq	r1, r2
  4045ca:	4622      	mov	r2, r4
  4045cc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4045d0:	a901      	add	r1, sp, #4
  4045d2:	47a0      	blx	r4
  4045d4:	e7e9      	b.n	4045aa <_wcrtomb_r+0x1e>
  4045d6:	bf00      	nop
  4045d8:	20400010 	.word	0x20400010
  4045dc:	20400444 	.word	0x20400444

004045e0 <__ascii_wctomb>:
  4045e0:	b121      	cbz	r1, 4045ec <__ascii_wctomb+0xc>
  4045e2:	2aff      	cmp	r2, #255	; 0xff
  4045e4:	d804      	bhi.n	4045f0 <__ascii_wctomb+0x10>
  4045e6:	700a      	strb	r2, [r1, #0]
  4045e8:	2001      	movs	r0, #1
  4045ea:	4770      	bx	lr
  4045ec:	4608      	mov	r0, r1
  4045ee:	4770      	bx	lr
  4045f0:	238a      	movs	r3, #138	; 0x8a
  4045f2:	6003      	str	r3, [r0, #0]
  4045f4:	f04f 30ff 	mov.w	r0, #4294967295
  4045f8:	4770      	bx	lr
  4045fa:	bf00      	nop

004045fc <_write_r>:
  4045fc:	b570      	push	{r4, r5, r6, lr}
  4045fe:	460d      	mov	r5, r1
  404600:	4c08      	ldr	r4, [pc, #32]	; (404624 <_write_r+0x28>)
  404602:	4611      	mov	r1, r2
  404604:	4606      	mov	r6, r0
  404606:	461a      	mov	r2, r3
  404608:	4628      	mov	r0, r5
  40460a:	2300      	movs	r3, #0
  40460c:	6023      	str	r3, [r4, #0]
  40460e:	f7fc fa43 	bl	400a98 <_write>
  404612:	1c43      	adds	r3, r0, #1
  404614:	d000      	beq.n	404618 <_write_r+0x1c>
  404616:	bd70      	pop	{r4, r5, r6, pc}
  404618:	6823      	ldr	r3, [r4, #0]
  40461a:	2b00      	cmp	r3, #0
  40461c:	d0fb      	beq.n	404616 <_write_r+0x1a>
  40461e:	6033      	str	r3, [r6, #0]
  404620:	bd70      	pop	{r4, r5, r6, pc}
  404622:	bf00      	nop
  404624:	20453570 	.word	0x20453570

00404628 <__register_exitproc>:
  404628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40462c:	4d2c      	ldr	r5, [pc, #176]	; (4046e0 <__register_exitproc+0xb8>)
  40462e:	4606      	mov	r6, r0
  404630:	6828      	ldr	r0, [r5, #0]
  404632:	4698      	mov	r8, r3
  404634:	460f      	mov	r7, r1
  404636:	4691      	mov	r9, r2
  404638:	f7ff f8e0 	bl	4037fc <__retarget_lock_acquire_recursive>
  40463c:	4b29      	ldr	r3, [pc, #164]	; (4046e4 <__register_exitproc+0xbc>)
  40463e:	681c      	ldr	r4, [r3, #0]
  404640:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404644:	2b00      	cmp	r3, #0
  404646:	d03e      	beq.n	4046c6 <__register_exitproc+0x9e>
  404648:	685a      	ldr	r2, [r3, #4]
  40464a:	2a1f      	cmp	r2, #31
  40464c:	dc1c      	bgt.n	404688 <__register_exitproc+0x60>
  40464e:	f102 0e01 	add.w	lr, r2, #1
  404652:	b176      	cbz	r6, 404672 <__register_exitproc+0x4a>
  404654:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404658:	2401      	movs	r4, #1
  40465a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40465e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404662:	4094      	lsls	r4, r2
  404664:	4320      	orrs	r0, r4
  404666:	2e02      	cmp	r6, #2
  404668:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40466c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404670:	d023      	beq.n	4046ba <__register_exitproc+0x92>
  404672:	3202      	adds	r2, #2
  404674:	f8c3 e004 	str.w	lr, [r3, #4]
  404678:	6828      	ldr	r0, [r5, #0]
  40467a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40467e:	f7ff f8bf 	bl	403800 <__retarget_lock_release_recursive>
  404682:	2000      	movs	r0, #0
  404684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404688:	4b17      	ldr	r3, [pc, #92]	; (4046e8 <__register_exitproc+0xc0>)
  40468a:	b30b      	cbz	r3, 4046d0 <__register_exitproc+0xa8>
  40468c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404690:	f3af 8000 	nop.w
  404694:	4603      	mov	r3, r0
  404696:	b1d8      	cbz	r0, 4046d0 <__register_exitproc+0xa8>
  404698:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40469c:	6002      	str	r2, [r0, #0]
  40469e:	2100      	movs	r1, #0
  4046a0:	6041      	str	r1, [r0, #4]
  4046a2:	460a      	mov	r2, r1
  4046a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4046a8:	f04f 0e01 	mov.w	lr, #1
  4046ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4046b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4046b4:	2e00      	cmp	r6, #0
  4046b6:	d0dc      	beq.n	404672 <__register_exitproc+0x4a>
  4046b8:	e7cc      	b.n	404654 <__register_exitproc+0x2c>
  4046ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4046be:	430c      	orrs	r4, r1
  4046c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4046c4:	e7d5      	b.n	404672 <__register_exitproc+0x4a>
  4046c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4046ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4046ce:	e7bb      	b.n	404648 <__register_exitproc+0x20>
  4046d0:	6828      	ldr	r0, [r5, #0]
  4046d2:	f7ff f895 	bl	403800 <__retarget_lock_release_recursive>
  4046d6:	f04f 30ff 	mov.w	r0, #4294967295
  4046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046de:	bf00      	nop
  4046e0:	20400440 	.word	0x20400440
  4046e4:	00404c70 	.word	0x00404c70
  4046e8:	00000000 	.word	0x00000000

004046ec <_close_r>:
  4046ec:	b538      	push	{r3, r4, r5, lr}
  4046ee:	4c07      	ldr	r4, [pc, #28]	; (40470c <_close_r+0x20>)
  4046f0:	2300      	movs	r3, #0
  4046f2:	4605      	mov	r5, r0
  4046f4:	4608      	mov	r0, r1
  4046f6:	6023      	str	r3, [r4, #0]
  4046f8:	f7fd f8aa 	bl	401850 <_close>
  4046fc:	1c43      	adds	r3, r0, #1
  4046fe:	d000      	beq.n	404702 <_close_r+0x16>
  404700:	bd38      	pop	{r3, r4, r5, pc}
  404702:	6823      	ldr	r3, [r4, #0]
  404704:	2b00      	cmp	r3, #0
  404706:	d0fb      	beq.n	404700 <_close_r+0x14>
  404708:	602b      	str	r3, [r5, #0]
  40470a:	bd38      	pop	{r3, r4, r5, pc}
  40470c:	20453570 	.word	0x20453570

00404710 <_fclose_r>:
  404710:	b570      	push	{r4, r5, r6, lr}
  404712:	b159      	cbz	r1, 40472c <_fclose_r+0x1c>
  404714:	4605      	mov	r5, r0
  404716:	460c      	mov	r4, r1
  404718:	b110      	cbz	r0, 404720 <_fclose_r+0x10>
  40471a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40471c:	2b00      	cmp	r3, #0
  40471e:	d03c      	beq.n	40479a <_fclose_r+0x8a>
  404720:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404722:	07d8      	lsls	r0, r3, #31
  404724:	d505      	bpl.n	404732 <_fclose_r+0x22>
  404726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40472a:	b92b      	cbnz	r3, 404738 <_fclose_r+0x28>
  40472c:	2600      	movs	r6, #0
  40472e:	4630      	mov	r0, r6
  404730:	bd70      	pop	{r4, r5, r6, pc}
  404732:	89a3      	ldrh	r3, [r4, #12]
  404734:	0599      	lsls	r1, r3, #22
  404736:	d53c      	bpl.n	4047b2 <_fclose_r+0xa2>
  404738:	4621      	mov	r1, r4
  40473a:	4628      	mov	r0, r5
  40473c:	f7fe fba6 	bl	402e8c <__sflush_r>
  404740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404742:	4606      	mov	r6, r0
  404744:	b133      	cbz	r3, 404754 <_fclose_r+0x44>
  404746:	69e1      	ldr	r1, [r4, #28]
  404748:	4628      	mov	r0, r5
  40474a:	4798      	blx	r3
  40474c:	2800      	cmp	r0, #0
  40474e:	bfb8      	it	lt
  404750:	f04f 36ff 	movlt.w	r6, #4294967295
  404754:	89a3      	ldrh	r3, [r4, #12]
  404756:	061a      	lsls	r2, r3, #24
  404758:	d422      	bmi.n	4047a0 <_fclose_r+0x90>
  40475a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40475c:	b141      	cbz	r1, 404770 <_fclose_r+0x60>
  40475e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404762:	4299      	cmp	r1, r3
  404764:	d002      	beq.n	40476c <_fclose_r+0x5c>
  404766:	4628      	mov	r0, r5
  404768:	f7fe fdae 	bl	4032c8 <_free_r>
  40476c:	2300      	movs	r3, #0
  40476e:	6323      	str	r3, [r4, #48]	; 0x30
  404770:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404772:	b121      	cbz	r1, 40477e <_fclose_r+0x6e>
  404774:	4628      	mov	r0, r5
  404776:	f7fe fda7 	bl	4032c8 <_free_r>
  40477a:	2300      	movs	r3, #0
  40477c:	6463      	str	r3, [r4, #68]	; 0x44
  40477e:	f7fe fca9 	bl	4030d4 <__sfp_lock_acquire>
  404782:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404784:	2200      	movs	r2, #0
  404786:	07db      	lsls	r3, r3, #31
  404788:	81a2      	strh	r2, [r4, #12]
  40478a:	d50e      	bpl.n	4047aa <_fclose_r+0x9a>
  40478c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40478e:	f7ff f833 	bl	4037f8 <__retarget_lock_close_recursive>
  404792:	f7fe fca5 	bl	4030e0 <__sfp_lock_release>
  404796:	4630      	mov	r0, r6
  404798:	bd70      	pop	{r4, r5, r6, pc}
  40479a:	f7fe fc6f 	bl	40307c <__sinit>
  40479e:	e7bf      	b.n	404720 <_fclose_r+0x10>
  4047a0:	6921      	ldr	r1, [r4, #16]
  4047a2:	4628      	mov	r0, r5
  4047a4:	f7fe fd90 	bl	4032c8 <_free_r>
  4047a8:	e7d7      	b.n	40475a <_fclose_r+0x4a>
  4047aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047ac:	f7ff f828 	bl	403800 <__retarget_lock_release_recursive>
  4047b0:	e7ec      	b.n	40478c <_fclose_r+0x7c>
  4047b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047b4:	f7ff f822 	bl	4037fc <__retarget_lock_acquire_recursive>
  4047b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047bc:	2b00      	cmp	r3, #0
  4047be:	d1bb      	bne.n	404738 <_fclose_r+0x28>
  4047c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4047c2:	f016 0601 	ands.w	r6, r6, #1
  4047c6:	d1b1      	bne.n	40472c <_fclose_r+0x1c>
  4047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047ca:	f7ff f819 	bl	403800 <__retarget_lock_release_recursive>
  4047ce:	4630      	mov	r0, r6
  4047d0:	bd70      	pop	{r4, r5, r6, pc}
  4047d2:	bf00      	nop

004047d4 <_fstat_r>:
  4047d4:	b538      	push	{r3, r4, r5, lr}
  4047d6:	460b      	mov	r3, r1
  4047d8:	4c07      	ldr	r4, [pc, #28]	; (4047f8 <_fstat_r+0x24>)
  4047da:	4605      	mov	r5, r0
  4047dc:	4611      	mov	r1, r2
  4047de:	4618      	mov	r0, r3
  4047e0:	2300      	movs	r3, #0
  4047e2:	6023      	str	r3, [r4, #0]
  4047e4:	f7fd f837 	bl	401856 <_fstat>
  4047e8:	1c43      	adds	r3, r0, #1
  4047ea:	d000      	beq.n	4047ee <_fstat_r+0x1a>
  4047ec:	bd38      	pop	{r3, r4, r5, pc}
  4047ee:	6823      	ldr	r3, [r4, #0]
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	d0fb      	beq.n	4047ec <_fstat_r+0x18>
  4047f4:	602b      	str	r3, [r5, #0]
  4047f6:	bd38      	pop	{r3, r4, r5, pc}
  4047f8:	20453570 	.word	0x20453570

004047fc <_isatty_r>:
  4047fc:	b538      	push	{r3, r4, r5, lr}
  4047fe:	4c07      	ldr	r4, [pc, #28]	; (40481c <_isatty_r+0x20>)
  404800:	2300      	movs	r3, #0
  404802:	4605      	mov	r5, r0
  404804:	4608      	mov	r0, r1
  404806:	6023      	str	r3, [r4, #0]
  404808:	f7fd f82a 	bl	401860 <_isatty>
  40480c:	1c43      	adds	r3, r0, #1
  40480e:	d000      	beq.n	404812 <_isatty_r+0x16>
  404810:	bd38      	pop	{r3, r4, r5, pc}
  404812:	6823      	ldr	r3, [r4, #0]
  404814:	2b00      	cmp	r3, #0
  404816:	d0fb      	beq.n	404810 <_isatty_r+0x14>
  404818:	602b      	str	r3, [r5, #0]
  40481a:	bd38      	pop	{r3, r4, r5, pc}
  40481c:	20453570 	.word	0x20453570

00404820 <_lseek_r>:
  404820:	b570      	push	{r4, r5, r6, lr}
  404822:	460d      	mov	r5, r1
  404824:	4c08      	ldr	r4, [pc, #32]	; (404848 <_lseek_r+0x28>)
  404826:	4611      	mov	r1, r2
  404828:	4606      	mov	r6, r0
  40482a:	461a      	mov	r2, r3
  40482c:	4628      	mov	r0, r5
  40482e:	2300      	movs	r3, #0
  404830:	6023      	str	r3, [r4, #0]
  404832:	f7fd f817 	bl	401864 <_lseek>
  404836:	1c43      	adds	r3, r0, #1
  404838:	d000      	beq.n	40483c <_lseek_r+0x1c>
  40483a:	bd70      	pop	{r4, r5, r6, pc}
  40483c:	6823      	ldr	r3, [r4, #0]
  40483e:	2b00      	cmp	r3, #0
  404840:	d0fb      	beq.n	40483a <_lseek_r+0x1a>
  404842:	6033      	str	r3, [r6, #0]
  404844:	bd70      	pop	{r4, r5, r6, pc}
  404846:	bf00      	nop
  404848:	20453570 	.word	0x20453570

0040484c <_read_r>:
  40484c:	b570      	push	{r4, r5, r6, lr}
  40484e:	460d      	mov	r5, r1
  404850:	4c08      	ldr	r4, [pc, #32]	; (404874 <_read_r+0x28>)
  404852:	4611      	mov	r1, r2
  404854:	4606      	mov	r6, r0
  404856:	461a      	mov	r2, r3
  404858:	4628      	mov	r0, r5
  40485a:	2300      	movs	r3, #0
  40485c:	6023      	str	r3, [r4, #0]
  40485e:	f7fc f8fd 	bl	400a5c <_read>
  404862:	1c43      	adds	r3, r0, #1
  404864:	d000      	beq.n	404868 <_read_r+0x1c>
  404866:	bd70      	pop	{r4, r5, r6, pc}
  404868:	6823      	ldr	r3, [r4, #0]
  40486a:	2b00      	cmp	r3, #0
  40486c:	d0fb      	beq.n	404866 <_read_r+0x1a>
  40486e:	6033      	str	r3, [r6, #0]
  404870:	bd70      	pop	{r4, r5, r6, pc}
  404872:	bf00      	nop
  404874:	20453570 	.word	0x20453570

00404878 <__aeabi_uldivmod>:
  404878:	b953      	cbnz	r3, 404890 <__aeabi_uldivmod+0x18>
  40487a:	b94a      	cbnz	r2, 404890 <__aeabi_uldivmod+0x18>
  40487c:	2900      	cmp	r1, #0
  40487e:	bf08      	it	eq
  404880:	2800      	cmpeq	r0, #0
  404882:	bf1c      	itt	ne
  404884:	f04f 31ff 	movne.w	r1, #4294967295
  404888:	f04f 30ff 	movne.w	r0, #4294967295
  40488c:	f000 b97a 	b.w	404b84 <__aeabi_idiv0>
  404890:	f1ad 0c08 	sub.w	ip, sp, #8
  404894:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404898:	f000 f806 	bl	4048a8 <__udivmoddi4>
  40489c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4048a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4048a4:	b004      	add	sp, #16
  4048a6:	4770      	bx	lr

004048a8 <__udivmoddi4>:
  4048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4048ac:	468c      	mov	ip, r1
  4048ae:	460d      	mov	r5, r1
  4048b0:	4604      	mov	r4, r0
  4048b2:	9e08      	ldr	r6, [sp, #32]
  4048b4:	2b00      	cmp	r3, #0
  4048b6:	d151      	bne.n	40495c <__udivmoddi4+0xb4>
  4048b8:	428a      	cmp	r2, r1
  4048ba:	4617      	mov	r7, r2
  4048bc:	d96d      	bls.n	40499a <__udivmoddi4+0xf2>
  4048be:	fab2 fe82 	clz	lr, r2
  4048c2:	f1be 0f00 	cmp.w	lr, #0
  4048c6:	d00b      	beq.n	4048e0 <__udivmoddi4+0x38>
  4048c8:	f1ce 0c20 	rsb	ip, lr, #32
  4048cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4048d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4048d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4048d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4048dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4048e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4048e4:	0c25      	lsrs	r5, r4, #16
  4048e6:	fbbc f8fa 	udiv	r8, ip, sl
  4048ea:	fa1f f987 	uxth.w	r9, r7
  4048ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4048f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4048f6:	fb08 f309 	mul.w	r3, r8, r9
  4048fa:	42ab      	cmp	r3, r5
  4048fc:	d90a      	bls.n	404914 <__udivmoddi4+0x6c>
  4048fe:	19ed      	adds	r5, r5, r7
  404900:	f108 32ff 	add.w	r2, r8, #4294967295
  404904:	f080 8123 	bcs.w	404b4e <__udivmoddi4+0x2a6>
  404908:	42ab      	cmp	r3, r5
  40490a:	f240 8120 	bls.w	404b4e <__udivmoddi4+0x2a6>
  40490e:	f1a8 0802 	sub.w	r8, r8, #2
  404912:	443d      	add	r5, r7
  404914:	1aed      	subs	r5, r5, r3
  404916:	b2a4      	uxth	r4, r4
  404918:	fbb5 f0fa 	udiv	r0, r5, sl
  40491c:	fb0a 5510 	mls	r5, sl, r0, r5
  404920:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404924:	fb00 f909 	mul.w	r9, r0, r9
  404928:	45a1      	cmp	r9, r4
  40492a:	d909      	bls.n	404940 <__udivmoddi4+0x98>
  40492c:	19e4      	adds	r4, r4, r7
  40492e:	f100 33ff 	add.w	r3, r0, #4294967295
  404932:	f080 810a 	bcs.w	404b4a <__udivmoddi4+0x2a2>
  404936:	45a1      	cmp	r9, r4
  404938:	f240 8107 	bls.w	404b4a <__udivmoddi4+0x2a2>
  40493c:	3802      	subs	r0, #2
  40493e:	443c      	add	r4, r7
  404940:	eba4 0409 	sub.w	r4, r4, r9
  404944:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404948:	2100      	movs	r1, #0
  40494a:	2e00      	cmp	r6, #0
  40494c:	d061      	beq.n	404a12 <__udivmoddi4+0x16a>
  40494e:	fa24 f40e 	lsr.w	r4, r4, lr
  404952:	2300      	movs	r3, #0
  404954:	6034      	str	r4, [r6, #0]
  404956:	6073      	str	r3, [r6, #4]
  404958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40495c:	428b      	cmp	r3, r1
  40495e:	d907      	bls.n	404970 <__udivmoddi4+0xc8>
  404960:	2e00      	cmp	r6, #0
  404962:	d054      	beq.n	404a0e <__udivmoddi4+0x166>
  404964:	2100      	movs	r1, #0
  404966:	e886 0021 	stmia.w	r6, {r0, r5}
  40496a:	4608      	mov	r0, r1
  40496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404970:	fab3 f183 	clz	r1, r3
  404974:	2900      	cmp	r1, #0
  404976:	f040 808e 	bne.w	404a96 <__udivmoddi4+0x1ee>
  40497a:	42ab      	cmp	r3, r5
  40497c:	d302      	bcc.n	404984 <__udivmoddi4+0xdc>
  40497e:	4282      	cmp	r2, r0
  404980:	f200 80fa 	bhi.w	404b78 <__udivmoddi4+0x2d0>
  404984:	1a84      	subs	r4, r0, r2
  404986:	eb65 0503 	sbc.w	r5, r5, r3
  40498a:	2001      	movs	r0, #1
  40498c:	46ac      	mov	ip, r5
  40498e:	2e00      	cmp	r6, #0
  404990:	d03f      	beq.n	404a12 <__udivmoddi4+0x16a>
  404992:	e886 1010 	stmia.w	r6, {r4, ip}
  404996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40499a:	b912      	cbnz	r2, 4049a2 <__udivmoddi4+0xfa>
  40499c:	2701      	movs	r7, #1
  40499e:	fbb7 f7f2 	udiv	r7, r7, r2
  4049a2:	fab7 fe87 	clz	lr, r7
  4049a6:	f1be 0f00 	cmp.w	lr, #0
  4049aa:	d134      	bne.n	404a16 <__udivmoddi4+0x16e>
  4049ac:	1beb      	subs	r3, r5, r7
  4049ae:	0c3a      	lsrs	r2, r7, #16
  4049b0:	fa1f fc87 	uxth.w	ip, r7
  4049b4:	2101      	movs	r1, #1
  4049b6:	fbb3 f8f2 	udiv	r8, r3, r2
  4049ba:	0c25      	lsrs	r5, r4, #16
  4049bc:	fb02 3318 	mls	r3, r2, r8, r3
  4049c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4049c4:	fb0c f308 	mul.w	r3, ip, r8
  4049c8:	42ab      	cmp	r3, r5
  4049ca:	d907      	bls.n	4049dc <__udivmoddi4+0x134>
  4049cc:	19ed      	adds	r5, r5, r7
  4049ce:	f108 30ff 	add.w	r0, r8, #4294967295
  4049d2:	d202      	bcs.n	4049da <__udivmoddi4+0x132>
  4049d4:	42ab      	cmp	r3, r5
  4049d6:	f200 80d1 	bhi.w	404b7c <__udivmoddi4+0x2d4>
  4049da:	4680      	mov	r8, r0
  4049dc:	1aed      	subs	r5, r5, r3
  4049de:	b2a3      	uxth	r3, r4
  4049e0:	fbb5 f0f2 	udiv	r0, r5, r2
  4049e4:	fb02 5510 	mls	r5, r2, r0, r5
  4049e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4049ec:	fb0c fc00 	mul.w	ip, ip, r0
  4049f0:	45a4      	cmp	ip, r4
  4049f2:	d907      	bls.n	404a04 <__udivmoddi4+0x15c>
  4049f4:	19e4      	adds	r4, r4, r7
  4049f6:	f100 33ff 	add.w	r3, r0, #4294967295
  4049fa:	d202      	bcs.n	404a02 <__udivmoddi4+0x15a>
  4049fc:	45a4      	cmp	ip, r4
  4049fe:	f200 80b8 	bhi.w	404b72 <__udivmoddi4+0x2ca>
  404a02:	4618      	mov	r0, r3
  404a04:	eba4 040c 	sub.w	r4, r4, ip
  404a08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404a0c:	e79d      	b.n	40494a <__udivmoddi4+0xa2>
  404a0e:	4631      	mov	r1, r6
  404a10:	4630      	mov	r0, r6
  404a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404a16:	f1ce 0420 	rsb	r4, lr, #32
  404a1a:	fa05 f30e 	lsl.w	r3, r5, lr
  404a1e:	fa07 f70e 	lsl.w	r7, r7, lr
  404a22:	fa20 f804 	lsr.w	r8, r0, r4
  404a26:	0c3a      	lsrs	r2, r7, #16
  404a28:	fa25 f404 	lsr.w	r4, r5, r4
  404a2c:	ea48 0803 	orr.w	r8, r8, r3
  404a30:	fbb4 f1f2 	udiv	r1, r4, r2
  404a34:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404a38:	fb02 4411 	mls	r4, r2, r1, r4
  404a3c:	fa1f fc87 	uxth.w	ip, r7
  404a40:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404a44:	fb01 f30c 	mul.w	r3, r1, ip
  404a48:	42ab      	cmp	r3, r5
  404a4a:	fa00 f40e 	lsl.w	r4, r0, lr
  404a4e:	d909      	bls.n	404a64 <__udivmoddi4+0x1bc>
  404a50:	19ed      	adds	r5, r5, r7
  404a52:	f101 30ff 	add.w	r0, r1, #4294967295
  404a56:	f080 808a 	bcs.w	404b6e <__udivmoddi4+0x2c6>
  404a5a:	42ab      	cmp	r3, r5
  404a5c:	f240 8087 	bls.w	404b6e <__udivmoddi4+0x2c6>
  404a60:	3902      	subs	r1, #2
  404a62:	443d      	add	r5, r7
  404a64:	1aeb      	subs	r3, r5, r3
  404a66:	fa1f f588 	uxth.w	r5, r8
  404a6a:	fbb3 f0f2 	udiv	r0, r3, r2
  404a6e:	fb02 3310 	mls	r3, r2, r0, r3
  404a72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404a76:	fb00 f30c 	mul.w	r3, r0, ip
  404a7a:	42ab      	cmp	r3, r5
  404a7c:	d907      	bls.n	404a8e <__udivmoddi4+0x1e6>
  404a7e:	19ed      	adds	r5, r5, r7
  404a80:	f100 38ff 	add.w	r8, r0, #4294967295
  404a84:	d26f      	bcs.n	404b66 <__udivmoddi4+0x2be>
  404a86:	42ab      	cmp	r3, r5
  404a88:	d96d      	bls.n	404b66 <__udivmoddi4+0x2be>
  404a8a:	3802      	subs	r0, #2
  404a8c:	443d      	add	r5, r7
  404a8e:	1aeb      	subs	r3, r5, r3
  404a90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404a94:	e78f      	b.n	4049b6 <__udivmoddi4+0x10e>
  404a96:	f1c1 0720 	rsb	r7, r1, #32
  404a9a:	fa22 f807 	lsr.w	r8, r2, r7
  404a9e:	408b      	lsls	r3, r1
  404aa0:	fa05 f401 	lsl.w	r4, r5, r1
  404aa4:	ea48 0303 	orr.w	r3, r8, r3
  404aa8:	fa20 fe07 	lsr.w	lr, r0, r7
  404aac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404ab0:	40fd      	lsrs	r5, r7
  404ab2:	ea4e 0e04 	orr.w	lr, lr, r4
  404ab6:	fbb5 f9fc 	udiv	r9, r5, ip
  404aba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  404abe:	fb0c 5519 	mls	r5, ip, r9, r5
  404ac2:	fa1f f883 	uxth.w	r8, r3
  404ac6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404aca:	fb09 f408 	mul.w	r4, r9, r8
  404ace:	42ac      	cmp	r4, r5
  404ad0:	fa02 f201 	lsl.w	r2, r2, r1
  404ad4:	fa00 fa01 	lsl.w	sl, r0, r1
  404ad8:	d908      	bls.n	404aec <__udivmoddi4+0x244>
  404ada:	18ed      	adds	r5, r5, r3
  404adc:	f109 30ff 	add.w	r0, r9, #4294967295
  404ae0:	d243      	bcs.n	404b6a <__udivmoddi4+0x2c2>
  404ae2:	42ac      	cmp	r4, r5
  404ae4:	d941      	bls.n	404b6a <__udivmoddi4+0x2c2>
  404ae6:	f1a9 0902 	sub.w	r9, r9, #2
  404aea:	441d      	add	r5, r3
  404aec:	1b2d      	subs	r5, r5, r4
  404aee:	fa1f fe8e 	uxth.w	lr, lr
  404af2:	fbb5 f0fc 	udiv	r0, r5, ip
  404af6:	fb0c 5510 	mls	r5, ip, r0, r5
  404afa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  404afe:	fb00 f808 	mul.w	r8, r0, r8
  404b02:	45a0      	cmp	r8, r4
  404b04:	d907      	bls.n	404b16 <__udivmoddi4+0x26e>
  404b06:	18e4      	adds	r4, r4, r3
  404b08:	f100 35ff 	add.w	r5, r0, #4294967295
  404b0c:	d229      	bcs.n	404b62 <__udivmoddi4+0x2ba>
  404b0e:	45a0      	cmp	r8, r4
  404b10:	d927      	bls.n	404b62 <__udivmoddi4+0x2ba>
  404b12:	3802      	subs	r0, #2
  404b14:	441c      	add	r4, r3
  404b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404b1a:	eba4 0408 	sub.w	r4, r4, r8
  404b1e:	fba0 8902 	umull	r8, r9, r0, r2
  404b22:	454c      	cmp	r4, r9
  404b24:	46c6      	mov	lr, r8
  404b26:	464d      	mov	r5, r9
  404b28:	d315      	bcc.n	404b56 <__udivmoddi4+0x2ae>
  404b2a:	d012      	beq.n	404b52 <__udivmoddi4+0x2aa>
  404b2c:	b156      	cbz	r6, 404b44 <__udivmoddi4+0x29c>
  404b2e:	ebba 030e 	subs.w	r3, sl, lr
  404b32:	eb64 0405 	sbc.w	r4, r4, r5
  404b36:	fa04 f707 	lsl.w	r7, r4, r7
  404b3a:	40cb      	lsrs	r3, r1
  404b3c:	431f      	orrs	r7, r3
  404b3e:	40cc      	lsrs	r4, r1
  404b40:	6037      	str	r7, [r6, #0]
  404b42:	6074      	str	r4, [r6, #4]
  404b44:	2100      	movs	r1, #0
  404b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404b4a:	4618      	mov	r0, r3
  404b4c:	e6f8      	b.n	404940 <__udivmoddi4+0x98>
  404b4e:	4690      	mov	r8, r2
  404b50:	e6e0      	b.n	404914 <__udivmoddi4+0x6c>
  404b52:	45c2      	cmp	sl, r8
  404b54:	d2ea      	bcs.n	404b2c <__udivmoddi4+0x284>
  404b56:	ebb8 0e02 	subs.w	lr, r8, r2
  404b5a:	eb69 0503 	sbc.w	r5, r9, r3
  404b5e:	3801      	subs	r0, #1
  404b60:	e7e4      	b.n	404b2c <__udivmoddi4+0x284>
  404b62:	4628      	mov	r0, r5
  404b64:	e7d7      	b.n	404b16 <__udivmoddi4+0x26e>
  404b66:	4640      	mov	r0, r8
  404b68:	e791      	b.n	404a8e <__udivmoddi4+0x1e6>
  404b6a:	4681      	mov	r9, r0
  404b6c:	e7be      	b.n	404aec <__udivmoddi4+0x244>
  404b6e:	4601      	mov	r1, r0
  404b70:	e778      	b.n	404a64 <__udivmoddi4+0x1bc>
  404b72:	3802      	subs	r0, #2
  404b74:	443c      	add	r4, r7
  404b76:	e745      	b.n	404a04 <__udivmoddi4+0x15c>
  404b78:	4608      	mov	r0, r1
  404b7a:	e708      	b.n	40498e <__udivmoddi4+0xe6>
  404b7c:	f1a8 0802 	sub.w	r8, r8, #2
  404b80:	443d      	add	r5, r7
  404b82:	e72b      	b.n	4049dc <__udivmoddi4+0x134>

00404b84 <__aeabi_idiv0>:
  404b84:	4770      	bx	lr
  404b86:	bf00      	nop

00404b88 <mmc_trans_multipliers>:
  404b88:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  404b98:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  404ba8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  404bb8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00404bc8 <sd_mmc_trans_units>:
  404bc8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00404be4 <sd_trans_multipliers>:
  404be4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  404bf4:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  404c04:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  404c14:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
  404c24:	0001 0000 0002 0000 0004 0000 0008 0000     ................
  404c34:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
  404c44:	0100 0000 0200 0000 0400 0000 654c 2774     ............Let'
  404c54:	2073 6574 7473 6920 2066 6874 7369 7720     s test if this w
  404c64:	6c69 206c 6f77 6b72 002e 0000               ill work....

00404c70 <_global_impure_ptr>:
  404c70:	0018 2040 3130 3332 3534 3736 3938 4241     ..@ 0123456789AB
  404c80:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  404c90:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  404ca0:	296c 0000                                   l)..

00404ca4 <blanks.7217>:
  404ca4:	2020 2020 2020 2020 2020 2020 2020 2020                     

00404cb4 <zeroes.7218>:
  404cb4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  404cc4:	0043 0000 4f50 4953 0058 0000               C...POSIX...

00404cd0 <_ctype_>:
  404cd0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  404ce0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  404cf0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  404d00:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  404d10:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  404d20:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  404d30:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  404d40:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  404d50:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00404dd4 <_init>:
  404dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404dd6:	bf00      	nop
  404dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404dda:	bc08      	pop	{r3}
  404ddc:	469e      	mov	lr, r3
  404dde:	4770      	bx	lr

00404de0 <__init_array_start>:
  404de0:	00402e6d 	.word	0x00402e6d

00404de4 <__frame_dummy_init_array_entry>:
  404de4:	00400165                                e.@.

00404de8 <_fini>:
  404de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404dea:	bf00      	nop
  404dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404dee:	bc08      	pop	{r3}
  404df0:	469e      	mov	lr, r3
  404df2:	4770      	bx	lr

00404df4 <__fini_array_start>:
  404df4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <_impure_ptr>:
20400010:	0018 2040 0000 0000                         ..@ ....

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	354c 2045                                   L5E 

20400444 <__global_locale>:
20400444:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400464:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400484:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400504:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400524:	45e1 0040 3e55 0040 0000 0000 4cd0 0040     .E@.U>@......L@.
20400534:	4c6c 0040 4c84 0040 4c84 0040 4c84 0040     lL@..L@..L@..L@.
20400544:	4c84 0040 4c84 0040 4c84 0040 4c84 0040     .L@..L@..L@..L@.
20400554:	4c84 0040 4c84 0040 ffff ffff ffff ffff     .L@..L@.........
20400564:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040058c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005b0 <__malloc_av_>:
	...
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 

204009b8 <__malloc_sbrk_base>:
204009b8:	ffff ffff                                   ....

204009bc <__malloc_trim_threshold>:
204009bc:	0000 0002                                   ....
