
MiniscopeUntethered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20400000  0040273c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0004b308  20400440  00402b80  00020440  2**3
                  ALLOC
  3 .stack        00002000  2044b748  0044de88  00020440  2**0
                  ALLOC
  4 .heap         00000200  2044d748  0044fe88  00020440  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015976  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b46  00000000  00000000  00035e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005a7d  00000000  00000000  0003897f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008c0  00000000  00000000  0003e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009a8  00000000  00000000  0003ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001de1b  00000000  00000000  0003f664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b0d4  00000000  00000000  0005d47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088612  00000000  00000000  00068553  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001538  00000000  00000000  000f0b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 d7 44 20 81 17 40 00 7d 17 40 00 7d 17 40 00     H.D ..@.}.@.}.@.
  400010:	7d 17 40 00 7d 17 40 00 7d 17 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  40002c:	7d 17 40 00 7d 17 40 00 00 00 00 00 7d 17 40 00     }.@.}.@.....}.@.
  40003c:	f9 12 40 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     ..@.}.@.}.@.}.@.
  40004c:	7d 17 40 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     }.@.}.@.}.@.}.@.
  40005c:	7d 17 40 00 7d 17 40 00 00 00 00 00 b1 1f 40 00     }.@.}.@.......@.
  40006c:	7d 17 40 00 00 00 00 00 7d 17 40 00 7d 17 40 00     }.@.....}.@.}.@.
  40007c:	7d 17 40 00 7d 17 40 00 00 00 00 00 7d 17 40 00     }.@.}.@.....}.@.
  40008c:	7d 17 40 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     }.@.}.@.}.@.}.@.
  40009c:	7d 17 40 00 7d 17 40 00 7d 17 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  4000b4:	7d 17 40 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     }.@.}.@.}.@.}.@.
  4000c4:	7d 17 40 00 7d 17 40 00 7d 17 40 00 00 00 00 00     }.@.}.@.}.@.....
  4000d4:	7d 17 40 00 00 00 00 00 7d 17 40 00 7d 17 40 00     }.@.....}.@.}.@.
  4000e4:	7d 17 40 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     }.@.}.@.}.@.}.@.
  4000f4:	7d 17 40 00 7d 17 40 00 00 00 00 00 00 00 00 00     }.@.}.@.........
  400104:	00 00 00 00 7d 17 40 00 7d 17 40 00 7d 17 40 00     ....}.@.}.@.}.@.
	...
  400120:	7d 17 40 00 7d 17 40 00 f1 1f 40 00 7d 17 40 00     }.@.}.@...@.}.@.
  400130:	7d 17 40 00 00 00 00 00 00 00 00 00 7d 17 40 00     }.@.........}.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400440 	.word	0x20400440
  40015c:	00000000 	.word	0x00000000
  400160:	0040273c 	.word	0x0040273c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040273c 	.word	0x0040273c
  4001a0:	20400444 	.word	0x20400444
  4001a4:	0040273c 	.word	0x0040273c
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	2040045c 	.word	0x2040045c
  4001cc:	20400484 	.word	0x20400484
  4001d0:	00400cc5 	.word	0x00400cc5

004001d4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	20400460 	.word	0x20400460
  40021c:	20400484 	.word	0x20400484
  400220:	2040045c 	.word	0x2040045c
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
{
  40022c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
}
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
	return true;
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	2040045c 	.word	0x2040045c
  400258:	00400d59 	.word	0x00400d59
  40025c:	00400d85 	.word	0x00400d85

00400260 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400260:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
	}
}
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	20400484 	.word	0x20400484
  400278:	00400d35 	.word	0x00400d35

0040027c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40027c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
	driver_init();
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20400460 	.word	0x20400460
  400294:	20400484 	.word	0x20400484
  400298:	00400c89 	.word	0x00400c89

0040029c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4002a2:	4b8a      	ldr	r3, [pc, #552]	; (4004cc <sd_mmc_check+0x230>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4002ac:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <sd_mmc_check+0x234>)
  4002ae:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b8:	4b86      	ldr	r3, [pc, #536]	; (4004d4 <sd_mmc_check+0x238>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002c4:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4002c6:	4b84      	ldr	r3, [pc, #528]	; (4004d8 <sd_mmc_check+0x23c>)
  4002c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002ca:	4629      	mov	r1, r5
  4002cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d0:	4b82      	ldr	r3, [pc, #520]	; (4004dc <sd_mmc_check+0x240>)
  4002d2:	4798      	blx	r3
  4002d4:	b930      	cbnz	r0, 4002e4 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002d6:	4b7f      	ldr	r3, [pc, #508]	; (4004d4 <sd_mmc_check+0x238>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	2403      	movs	r4, #3
  4002dc:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002de:	4b7c      	ldr	r3, [pc, #496]	; (4004d0 <sd_mmc_check+0x234>)
  4002e0:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002e2:	e7e5      	b.n	4002b0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002e8:	f245 5008 	movw	r0, #21768	; 0x5508
  4002ec:	4b7b      	ldr	r3, [pc, #492]	; (4004dc <sd_mmc_check+0x240>)
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	f040 8090 	bne.w	400416 <sd_mmc_check+0x17a>
	*v2 = 0;
  4002f6:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4002f8:	4b76      	ldr	r3, [pc, #472]	; (4004d4 <sd_mmc_check+0x238>)
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	7adb      	ldrb	r3, [r3, #11]
  4002fe:	f013 0f01 	tst.w	r3, #1
  400302:	f040 82a7 	bne.w	400854 <sd_mmc_check+0x5b8>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400306:	2100      	movs	r1, #0
  400308:	f245 1003 	movw	r0, #20739	; 0x5103
  40030c:	4b73      	ldr	r3, [pc, #460]	; (4004dc <sd_mmc_check+0x240>)
  40030e:	4798      	blx	r3
  400310:	2800      	cmp	r0, #0
  400312:	d0e0      	beq.n	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400314:	4d6f      	ldr	r5, [pc, #444]	; (4004d4 <sd_mmc_check+0x238>)
  400316:	682e      	ldr	r6, [r5, #0]
  400318:	4b71      	ldr	r3, [pc, #452]	; (4004e0 <sd_mmc_check+0x244>)
  40031a:	4798      	blx	r3
  40031c:	0c00      	lsrs	r0, r0, #16
  40031e:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400320:	682b      	ldr	r3, [r5, #0]
  400322:	7adb      	ldrb	r3, [r3, #11]
  400324:	f013 0f01 	tst.w	r3, #1
  400328:	d034      	beq.n	400394 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40032a:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <sd_mmc_check+0x248>)
  40032c:	4798      	blx	r3
  40032e:	2800      	cmp	r0, #0
  400330:	d0d1      	beq.n	4002d6 <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400332:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400334:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400336:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40033a:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40033e:	496a      	ldr	r1, [pc, #424]	; (4004e8 <sd_mmc_check+0x24c>)
  400340:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f201 	mul.w	r2, r2, r1
  40034c:	4967      	ldr	r1, [pc, #412]	; (4004ec <sd_mmc_check+0x250>)
  40034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400352:	fb02 f201 	mul.w	r2, r2, r1
  400356:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400358:	7b9a      	ldrb	r2, [r3, #14]
  40035a:	0992      	lsrs	r2, r2, #6
  40035c:	f040 81b3 	bne.w	4006c6 <sd_mmc_check+0x42a>
  400360:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400362:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400364:	7d1a      	ldrb	r2, [r3, #20]
  400366:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400368:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40036c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400370:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400372:	7dd9      	ldrb	r1, [r3, #23]
  400374:	0049      	lsls	r1, r1, #1
  400376:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40037e:	3201      	adds	r2, #1
  400380:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400384:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400386:	408a      	lsls	r2, r1
  400388:	7cd9      	ldrb	r1, [r3, #19]
  40038a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40038e:	408a      	lsls	r2, r1
				/ 1024;
  400390:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400392:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400394:	4b4f      	ldr	r3, [pc, #316]	; (4004d4 <sd_mmc_check+0x238>)
  400396:	681b      	ldr	r3, [r3, #0]
  400398:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40039a:	0409      	lsls	r1, r1, #16
  40039c:	f243 1007 	movw	r0, #12551	; 0x3107
  4003a0:	4b4e      	ldr	r3, [pc, #312]	; (4004dc <sd_mmc_check+0x240>)
  4003a2:	4798      	blx	r3
  4003a4:	2800      	cmp	r0, #0
  4003a6:	d096      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003a8:	4b4a      	ldr	r3, [pc, #296]	; (4004d4 <sd_mmc_check+0x238>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	7ada      	ldrb	r2, [r3, #11]
  4003ae:	f012 0f01 	tst.w	r2, #1
  4003b2:	f000 8199 	beq.w	4006e8 <sd_mmc_check+0x44c>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4003b6:	8919      	ldrh	r1, [r3, #8]
  4003b8:	0409      	lsls	r1, r1, #16
  4003ba:	f241 1037 	movw	r0, #4407	; 0x1137
  4003be:	4b47      	ldr	r3, [pc, #284]	; (4004dc <sd_mmc_check+0x240>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d087      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4003c6:	2301      	movs	r3, #1
  4003c8:	9300      	str	r3, [sp, #0]
  4003ca:	2208      	movs	r2, #8
  4003cc:	2100      	movs	r1, #0
  4003ce:	4848      	ldr	r0, [pc, #288]	; (4004f0 <sd_mmc_check+0x254>)
  4003d0:	4d48      	ldr	r5, [pc, #288]	; (4004f4 <sd_mmc_check+0x258>)
  4003d2:	47a8      	blx	r5
  4003d4:	2800      	cmp	r0, #0
  4003d6:	f43f af7e 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  4003da:	2101      	movs	r1, #1
  4003dc:	a804      	add	r0, sp, #16
  4003de:	4b46      	ldr	r3, [pc, #280]	; (4004f8 <sd_mmc_check+0x25c>)
  4003e0:	4798      	blx	r3
  4003e2:	2800      	cmp	r0, #0
  4003e4:	f43f af77 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  4003e8:	4b44      	ldr	r3, [pc, #272]	; (4004fc <sd_mmc_check+0x260>)
  4003ea:	4798      	blx	r3
  4003ec:	2800      	cmp	r0, #0
  4003ee:	f43f af72 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  4003f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4003f6:	f003 030f 	and.w	r3, r3, #15
  4003fa:	2b01      	cmp	r3, #1
  4003fc:	f000 81bb 	beq.w	400776 <sd_mmc_check+0x4da>
  400400:	2b00      	cmp	r3, #0
  400402:	f000 816d 	beq.w	4006e0 <sd_mmc_check+0x444>
  400406:	2b02      	cmp	r3, #2
  400408:	f000 81ba 	beq.w	400780 <sd_mmc_check+0x4e4>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40040c:	4b31      	ldr	r3, [pc, #196]	; (4004d4 <sd_mmc_check+0x238>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	2210      	movs	r2, #16
  400412:	731a      	strb	r2, [r3, #12]
  400414:	e168      	b.n	4006e8 <sd_mmc_check+0x44c>
	resp = driver_get_response();
  400416:	4b32      	ldr	r3, [pc, #200]	; (4004e0 <sd_mmc_check+0x244>)
  400418:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40041a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40041e:	f000 8217 	beq.w	400850 <sd_mmc_check+0x5b4>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400422:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400426:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40042a:	f47f af54 	bne.w	4002d6 <sd_mmc_check+0x3a>
	*v2 = 1;
  40042e:	2201      	movs	r2, #1
  400430:	e762      	b.n	4002f8 <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  400432:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400438:	4b26      	ldr	r3, [pc, #152]	; (4004d4 <sd_mmc_check+0x238>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	7ad3      	ldrb	r3, [r2, #11]
  40043e:	f043 0308 	orr.w	r3, r3, #8
  400442:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400444:	4b23      	ldr	r3, [pc, #140]	; (4004d4 <sd_mmc_check+0x238>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	7adb      	ldrb	r3, [r3, #11]
  40044a:	f013 0f01 	tst.w	r3, #1
  40044e:	f43f af5a 	beq.w	400306 <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400452:	2100      	movs	r1, #0
  400454:	f645 3002 	movw	r0, #23298	; 0x5b02
  400458:	4b20      	ldr	r3, [pc, #128]	; (4004dc <sd_mmc_check+0x240>)
  40045a:	4798      	blx	r3
  40045c:	2800      	cmp	r0, #0
  40045e:	f47f af52 	bne.w	400306 <sd_mmc_check+0x6a>
  400462:	e738      	b.n	4002d6 <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  400464:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40046c:	d027      	beq.n	4004be <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40046e:	2100      	movs	r1, #0
  400470:	f645 3002 	movw	r0, #23298	; 0x5b02
  400474:	4b19      	ldr	r3, [pc, #100]	; (4004dc <sd_mmc_check+0x240>)
  400476:	4798      	blx	r3
  400478:	2800      	cmp	r0, #0
  40047a:	f43f af2c 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <sd_mmc_check+0x238>)
  400480:	681b      	ldr	r3, [r3, #0]
  400482:	2201      	movs	r2, #1
  400484:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40048a:	f241 1003 	movw	r0, #4355	; 0x1103
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <sd_mmc_check+0x240>)
  400490:	4798      	blx	r3
  400492:	2800      	cmp	r0, #0
  400494:	f43f af1f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  400498:	4b12      	ldr	r3, [pc, #72]	; (4004e4 <sd_mmc_check+0x248>)
  40049a:	4798      	blx	r3
  40049c:	2800      	cmp	r0, #0
  40049e:	f43f af1a 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <sd_mmc_check+0x238>)
  4004a4:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004a6:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4004a8:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004ac:	3b01      	subs	r3, #1
  4004ae:	2b03      	cmp	r3, #3
  4004b0:	d826      	bhi.n	400500 <sd_mmc_check+0x264>
  4004b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4004b6:	00ef      	.short	0x00ef
  4004b8:	00f500f2 	.word	0x00f500f2
  4004bc:	00f8      	.short	0x00f8
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <sd_mmc_check+0x238>)
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	7ad3      	ldrb	r3, [r2, #11]
  4004c4:	f043 0308 	orr.w	r3, r3, #8
  4004c8:	72d3      	strb	r3, [r2, #11]
  4004ca:	e7d0      	b.n	40046e <sd_mmc_check+0x1d2>
  4004cc:	004001d5 	.word	0x004001d5
  4004d0:	00400261 	.word	0x00400261
  4004d4:	2040045c 	.word	0x2040045c
  4004d8:	00400d37 	.word	0x00400d37
  4004dc:	00400d59 	.word	0x00400d59
  4004e0:	00400d7d 	.word	0x00400d7d
  4004e4:	0040022d 	.word	0x0040022d
  4004e8:	0040268c 	.word	0x0040268c
  4004ec:	004026a8 	.word	0x004026a8
  4004f0:	00081133 	.word	0x00081133
  4004f4:	00400db5 	.word	0x00400db5
  4004f8:	00400ef1 	.word	0x00400ef1
  4004fc:	00400f55 	.word	0x00400f55
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400500:	2312      	movs	r3, #18
  400502:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400504:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400506:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40050a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40050e:	49a1      	ldr	r1, [pc, #644]	; (400794 <sd_mmc_check+0x4f8>)
  400510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400518:	fb03 f301 	mul.w	r3, r3, r1
  40051c:	499e      	ldr	r1, [pc, #632]	; (400798 <sd_mmc_check+0x4fc>)
  40051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400522:	fb03 f301 	mul.w	r3, r3, r1
  400526:	6013      	str	r3, [r2, #0]
  400528:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40052a:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40052c:	7d13      	ldrb	r3, [r2, #20]
  40052e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400530:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400534:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400538:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40053c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400540:	428b      	cmp	r3, r1
  400542:	d00f      	beq.n	400564 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400544:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400546:	7dd1      	ldrb	r1, [r2, #23]
  400548:	0049      	lsls	r1, r1, #1
  40054a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40054e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400550:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400554:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400556:	408b      	lsls	r3, r1
  400558:	7cd1      	ldrb	r1, [r2, #19]
  40055a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40055e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400560:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400562:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400564:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400566:	0409      	lsls	r1, r1, #16
  400568:	f243 1007 	movw	r0, #12551	; 0x3107
  40056c:	4b8b      	ldr	r3, [pc, #556]	; (40079c <sd_mmc_check+0x500>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb0 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400576:	4b8a      	ldr	r3, [pc, #552]	; (4007a0 <sd_mmc_check+0x504>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	7b1b      	ldrb	r3, [r3, #12]
  40057c:	2b3f      	cmp	r3, #63	; 0x3f
  40057e:	f240 809f 	bls.w	4006c0 <sd_mmc_check+0x424>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400582:	2100      	movs	r1, #0
  400584:	9100      	str	r1, [sp, #0]
  400586:	2301      	movs	r3, #1
  400588:	f44f 7200 	mov.w	r2, #512	; 0x200
  40058c:	4885      	ldr	r0, [pc, #532]	; (4007a4 <sd_mmc_check+0x508>)
  40058e:	4d86      	ldr	r5, [pc, #536]	; (4007a8 <sd_mmc_check+0x50c>)
  400590:	47a8      	blx	r5
  400592:	2800      	cmp	r0, #0
  400594:	f43f ae9f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400598:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40059a:	4e84      	ldr	r6, [pc, #528]	; (4007ac <sd_mmc_check+0x510>)
  40059c:	a803      	add	r0, sp, #12
  40059e:	47b0      	blx	r6
  4005a0:	2800      	cmp	r0, #0
  4005a2:	f43f ae98 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005a6:	3501      	adds	r5, #1
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	2d32      	cmp	r5, #50	; 0x32
  4005ac:	d1f6      	bne.n	40059c <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  4005ae:	9e03      	ldr	r6, [sp, #12]
  4005b0:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005b4:	4b7a      	ldr	r3, [pc, #488]	; (4007a0 <sd_mmc_check+0x504>)
  4005b6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005b8:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ba:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005bc:	7d1b      	ldrb	r3, [r3, #20]
  4005be:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4005c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4005c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005d0:	4293      	cmp	r3, r2
  4005d2:	d10e      	bne.n	4005f2 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  4005d4:	4f75      	ldr	r7, [pc, #468]	; (4007ac <sd_mmc_check+0x510>)
  4005d6:	a804      	add	r0, sp, #16
  4005d8:	47b8      	blx	r7
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7b 	beq.w	4002d6 <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005e0:	3501      	adds	r5, #1
  4005e2:	b2ad      	uxth	r5, r5
  4005e4:	2d35      	cmp	r5, #53	; 0x35
  4005e6:	d9f6      	bls.n	4005d6 <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  4005e8:	4b6d      	ldr	r3, [pc, #436]	; (4007a0 <sd_mmc_check+0x504>)
  4005ea:	681a      	ldr	r2, [r3, #0]
  4005ec:	9b04      	ldr	r3, [sp, #16]
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4005f2:	4f6e      	ldr	r7, [pc, #440]	; (4007ac <sd_mmc_check+0x510>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4005f4:	2d7f      	cmp	r5, #127	; 0x7f
  4005f6:	d959      	bls.n	4006ac <sd_mmc_check+0x410>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4005f8:	4b6d      	ldr	r3, [pc, #436]	; (4007b0 <sd_mmc_check+0x514>)
  4005fa:	7818      	ldrb	r0, [r3, #0]
  4005fc:	4b6d      	ldr	r3, [pc, #436]	; (4007b4 <sd_mmc_check+0x518>)
  4005fe:	4798      	blx	r3
  400600:	2803      	cmp	r0, #3
  400602:	d91d      	bls.n	400640 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400604:	4b6a      	ldr	r3, [pc, #424]	; (4007b0 <sd_mmc_check+0x514>)
  400606:	7818      	ldrb	r0, [r3, #0]
  400608:	4b6a      	ldr	r3, [pc, #424]	; (4007b4 <sd_mmc_check+0x518>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
	switch (bus_width) {
  40060e:	2804      	cmp	r0, #4
  400610:	d054      	beq.n	4006bc <sd_mmc_check+0x420>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400612:	4b69      	ldr	r3, [pc, #420]	; (4007b8 <sd_mmc_check+0x51c>)
  400614:	4969      	ldr	r1, [pc, #420]	; (4007bc <sd_mmc_check+0x520>)
  400616:	2808      	cmp	r0, #8
  400618:	bf18      	it	ne
  40061a:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40061c:	f243 1006 	movw	r0, #12550	; 0x3106
  400620:	4b5e      	ldr	r3, [pc, #376]	; (40079c <sd_mmc_check+0x500>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f43f ae56 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40062a:	4b65      	ldr	r3, [pc, #404]	; (4007c0 <sd_mmc_check+0x524>)
  40062c:	4798      	blx	r3
  40062e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400632:	f47f ae50 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  400636:	4b5a      	ldr	r3, [pc, #360]	; (4007a0 <sd_mmc_check+0x504>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  40063c:	4b61      	ldr	r3, [pc, #388]	; (4007c4 <sd_mmc_check+0x528>)
  40063e:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400640:	4b61      	ldr	r3, [pc, #388]	; (4007c8 <sd_mmc_check+0x52c>)
  400642:	4798      	blx	r3
  400644:	b1b6      	cbz	r6, 400674 <sd_mmc_check+0x3d8>
  400646:	b1a8      	cbz	r0, 400674 <sd_mmc_check+0x3d8>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400648:	4960      	ldr	r1, [pc, #384]	; (4007cc <sd_mmc_check+0x530>)
  40064a:	f243 1006 	movw	r0, #12550	; 0x3106
  40064e:	4b53      	ldr	r3, [pc, #332]	; (40079c <sd_mmc_check+0x500>)
  400650:	4798      	blx	r3
  400652:	2800      	cmp	r0, #0
  400654:	f43f ae3f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400658:	4b59      	ldr	r3, [pc, #356]	; (4007c0 <sd_mmc_check+0x524>)
  40065a:	4798      	blx	r3
  40065c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400660:	f47f ae39 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  400664:	4b4e      	ldr	r3, [pc, #312]	; (4007a0 <sd_mmc_check+0x504>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2201      	movs	r2, #1
  40066a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40066c:	4a58      	ldr	r2, [pc, #352]	; (4007d0 <sd_mmc_check+0x534>)
  40066e:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400670:	4b54      	ldr	r3, [pc, #336]	; (4007c4 <sd_mmc_check+0x528>)
  400672:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400674:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400676:	f44f 7800 	mov.w	r8, #512	; 0x200
  40067a:	f241 1710 	movw	r7, #4368	; 0x1110
  40067e:	4e47      	ldr	r6, [pc, #284]	; (40079c <sd_mmc_check+0x500>)
  400680:	4641      	mov	r1, r8
  400682:	4638      	mov	r0, r7
  400684:	47b0      	blx	r6
  400686:	2800      	cmp	r0, #0
  400688:	d16e      	bne.n	400768 <sd_mmc_check+0x4cc>
  40068a:	3d01      	subs	r5, #1
	while (retry--) {
  40068c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400690:	d1f6      	bne.n	400680 <sd_mmc_check+0x3e4>
  400692:	e620      	b.n	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400694:	2314      	movs	r3, #20
  400696:	7313      	strb	r3, [r2, #12]
  400698:	e734      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40069a:	2322      	movs	r3, #34	; 0x22
  40069c:	7313      	strb	r3, [r2, #12]
  40069e:	e731      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  4006a0:	2330      	movs	r3, #48	; 0x30
  4006a2:	7313      	strb	r3, [r2, #12]
  4006a4:	e72e      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  4006a6:	2340      	movs	r3, #64	; 0x40
  4006a8:	7313      	strb	r3, [r2, #12]
  4006aa:	e72b      	b.n	400504 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  4006ac:	a804      	add	r0, sp, #16
  4006ae:	47b8      	blx	r7
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae10 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	e79b      	b.n	4005f4 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006bc:	4945      	ldr	r1, [pc, #276]	; (4007d4 <sd_mmc_check+0x538>)
  4006be:	e7ad      	b.n	40061c <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  4006c0:	4b40      	ldr	r3, [pc, #256]	; (4007c4 <sd_mmc_check+0x528>)
  4006c2:	4798      	blx	r3
  4006c4:	e7d6      	b.n	400674 <sd_mmc_check+0x3d8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c6:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006c8:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ca:	7d5a      	ldrb	r2, [r3, #21]
  4006cc:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4006d2:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4006d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4006d8:	3201      	adds	r2, #1
  4006da:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4006dc:	605a      	str	r2, [r3, #4]
  4006de:	e659      	b.n	400394 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4006e0:	4b2f      	ldr	r3, [pc, #188]	; (4007a0 <sd_mmc_check+0x504>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2210      	movs	r2, #16
  4006e6:	731a      	strb	r2, [r3, #12]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4006e8:	4b31      	ldr	r3, [pc, #196]	; (4007b0 <sd_mmc_check+0x514>)
  4006ea:	7818      	ldrb	r0, [r3, #0]
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <sd_mmc_check+0x518>)
  4006ee:	4798      	blx	r3
  4006f0:	2803      	cmp	r0, #3
  4006f2:	d91c      	bls.n	40072e <sd_mmc_check+0x492>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4006f4:	4b2a      	ldr	r3, [pc, #168]	; (4007a0 <sd_mmc_check+0x504>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7ada      	ldrb	r2, [r3, #11]
  4006fa:	f012 0f01 	tst.w	r2, #1
  4006fe:	d014      	beq.n	40072a <sd_mmc_check+0x48e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400700:	8919      	ldrh	r1, [r3, #8]
  400702:	0409      	lsls	r1, r1, #16
  400704:	f241 1037 	movw	r0, #4407	; 0x1137
  400708:	4b24      	ldr	r3, [pc, #144]	; (40079c <sd_mmc_check+0x500>)
  40070a:	4798      	blx	r3
  40070c:	2800      	cmp	r0, #0
  40070e:	f43f ade2 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400712:	2102      	movs	r1, #2
  400714:	f241 1006 	movw	r0, #4358	; 0x1106
  400718:	4b20      	ldr	r3, [pc, #128]	; (40079c <sd_mmc_check+0x500>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f adda 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  400722:	4b1f      	ldr	r3, [pc, #124]	; (4007a0 <sd_mmc_check+0x504>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2204      	movs	r2, #4
  400728:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  40072a:	4b26      	ldr	r3, [pc, #152]	; (4007c4 <sd_mmc_check+0x528>)
  40072c:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  40072e:	4b26      	ldr	r3, [pc, #152]	; (4007c8 <sd_mmc_check+0x52c>)
  400730:	4798      	blx	r3
  400732:	b150      	cbz	r0, 40074a <sd_mmc_check+0x4ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400734:	4b1a      	ldr	r3, [pc, #104]	; (4007a0 <sd_mmc_check+0x504>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	7ada      	ldrb	r2, [r3, #11]
  40073a:	f012 0f01 	tst.w	r2, #1
  40073e:	d002      	beq.n	400746 <sd_mmc_check+0x4aa>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400740:	7b1b      	ldrb	r3, [r3, #12]
  400742:	2b10      	cmp	r3, #16
  400744:	d84a      	bhi.n	4007dc <sd_mmc_check+0x540>
		sd_mmc_configure_slot();
  400746:	4b1f      	ldr	r3, [pc, #124]	; (4007c4 <sd_mmc_check+0x528>)
  400748:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <sd_mmc_check+0x504>)
  40074c:	681b      	ldr	r3, [r3, #0]
  40074e:	7adb      	ldrb	r3, [r3, #11]
  400750:	f013 0f01 	tst.w	r3, #1
  400754:	d008      	beq.n	400768 <sd_mmc_check+0x4cc>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400756:	f44f 7100 	mov.w	r1, #512	; 0x200
  40075a:	f241 1010 	movw	r0, #4368	; 0x1110
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <sd_mmc_check+0x500>)
  400760:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400762:	2800      	cmp	r0, #0
  400764:	f43f adb7 	beq.w	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400768:	4b0d      	ldr	r3, [pc, #52]	; (4007a0 <sd_mmc_check+0x504>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2200      	movs	r2, #0
  40076e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400770:	4b19      	ldr	r3, [pc, #100]	; (4007d8 <sd_mmc_check+0x53c>)
  400772:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400774:	e59c      	b.n	4002b0 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <sd_mmc_check+0x504>)
  400778:	681b      	ldr	r3, [r3, #0]
  40077a:	221a      	movs	r2, #26
  40077c:	731a      	strb	r2, [r3, #12]
  40077e:	e7b3      	b.n	4006e8 <sd_mmc_check+0x44c>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400780:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400784:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <sd_mmc_check+0x504>)
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	bf14      	ite	ne
  40078c:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40078e:	2220      	moveq	r2, #32
  400790:	731a      	strb	r2, [r3, #12]
  400792:	e7a9      	b.n	4006e8 <sd_mmc_check+0x44c>
  400794:	0040268c 	.word	0x0040268c
  400798:	0040264c 	.word	0x0040264c
  40079c:	00400d59 	.word	0x00400d59
  4007a0:	2040045c 	.word	0x2040045c
  4007a4:	00081108 	.word	0x00081108
  4007a8:	00400db5 	.word	0x00400db5
  4007ac:	00400e7d 	.word	0x00400e7d
  4007b0:	20400484 	.word	0x20400484
  4007b4:	00400cb5 	.word	0x00400cb5
  4007b8:	01b70000 	.word	0x01b70000
  4007bc:	01b70200 	.word	0x01b70200
  4007c0:	00400d7d 	.word	0x00400d7d
  4007c4:	004001ad 	.word	0x004001ad
  4007c8:	00400cbf 	.word	0x00400cbf
  4007cc:	03b90100 	.word	0x03b90100
  4007d0:	03197500 	.word	0x03197500
  4007d4:	01b70100 	.word	0x01b70100
  4007d8:	00400261 	.word	0x00400261
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4007dc:	2540      	movs	r5, #64	; 0x40
  4007de:	462a      	mov	r2, r5
  4007e0:	2100      	movs	r1, #0
  4007e2:	a804      	add	r0, sp, #16
  4007e4:	4b39      	ldr	r3, [pc, #228]	; (4008cc <sd_mmc_check+0x630>)
  4007e6:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4007e8:	2301      	movs	r3, #1
  4007ea:	9300      	str	r3, [sp, #0]
  4007ec:	462a      	mov	r2, r5
  4007ee:	4938      	ldr	r1, [pc, #224]	; (4008d0 <sd_mmc_check+0x634>)
  4007f0:	4838      	ldr	r0, [pc, #224]	; (4008d4 <sd_mmc_check+0x638>)
  4007f2:	4d39      	ldr	r5, [pc, #228]	; (4008d8 <sd_mmc_check+0x63c>)
  4007f4:	47a8      	blx	r5
  4007f6:	2800      	cmp	r0, #0
  4007f8:	f43f ad6d 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  4007fc:	2101      	movs	r1, #1
  4007fe:	a804      	add	r0, sp, #16
  400800:	4b36      	ldr	r3, [pc, #216]	; (4008dc <sd_mmc_check+0x640>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f43f ad66 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40080a:	4b35      	ldr	r3, [pc, #212]	; (4008e0 <sd_mmc_check+0x644>)
  40080c:	4798      	blx	r3
  40080e:	2800      	cmp	r0, #0
  400810:	f43f ad61 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400814:	4b33      	ldr	r3, [pc, #204]	; (4008e4 <sd_mmc_check+0x648>)
  400816:	4798      	blx	r3
  400818:	f010 0f80 	tst.w	r0, #128	; 0x80
  40081c:	f47f ad5b 	bne.w	4002d6 <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400820:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400824:	f003 030f 	and.w	r3, r3, #15
  400828:	2b0f      	cmp	r3, #15
  40082a:	d08c      	beq.n	400746 <sd_mmc_check+0x4aa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40082c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400830:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400834:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400838:	f47f ad4d 	bne.w	4002d6 <sd_mmc_check+0x3a>
	driver_send_clock();
  40083c:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <sd_mmc_check+0x64c>)
  40083e:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <sd_mmc_check+0x650>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	2201      	movs	r2, #1
  400846:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	0052      	lsls	r2, r2, #1
  40084c:	601a      	str	r2, [r3, #0]
  40084e:	e77a      	b.n	400746 <sd_mmc_check+0x4aa>
	*v2 = 0;
  400850:	2200      	movs	r2, #0
  400852:	e551      	b.n	4002f8 <sd_mmc_check+0x5c>
  400854:	2a00      	cmp	r2, #0
  400856:	4f26      	ldr	r7, [pc, #152]	; (4008f0 <sd_mmc_check+0x654>)
  400858:	bf08      	it	eq
  40085a:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40085e:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400862:	f04f 0800 	mov.w	r8, #0
  400866:	4e23      	ldr	r6, [pc, #140]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  400868:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4008e4 <sd_mmc_check+0x648>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40086c:	4641      	mov	r1, r8
  40086e:	f241 1037 	movw	r0, #4407	; 0x1137
  400872:	47b0      	blx	r6
  400874:	b150      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400876:	4639      	mov	r1, r7
  400878:	f244 5029 	movw	r0, #17705	; 0x4529
  40087c:	47b0      	blx	r6
  40087e:	b128      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		resp = driver_get_response();
  400880:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400882:	2800      	cmp	r0, #0
  400884:	f6ff add5 	blt.w	400432 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  400888:	3d01      	subs	r5, #1
  40088a:	d1ef      	bne.n	40086c <sd_mmc_check+0x5d0>
			sd_mmc_card->type = CARD_TYPE_MMC;
  40088c:	4b17      	ldr	r3, [pc, #92]	; (4008ec <sd_mmc_check+0x650>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2202      	movs	r2, #2
  400892:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400894:	2100      	movs	r1, #0
  400896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x658>)
  40089c:	4798      	blx	r3
  40089e:	2800      	cmp	r0, #0
  4008a0:	f43f ad19 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008a4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4008f0 <sd_mmc_check+0x654>
  4008ac:	4f11      	ldr	r7, [pc, #68]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  4008ae:	4e0d      	ldr	r6, [pc, #52]	; (4008e4 <sd_mmc_check+0x648>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008b0:	4641      	mov	r1, r8
  4008b2:	f244 5001 	movw	r0, #17665	; 0x4501
  4008b6:	47b8      	blx	r7
  4008b8:	2800      	cmp	r0, #0
  4008ba:	f43f ad0c 	beq.w	4002d6 <sd_mmc_check+0x3a>
		resp = driver_get_response();
  4008be:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  4008c0:	2800      	cmp	r0, #0
  4008c2:	f6ff adcf 	blt.w	400464 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  4008c6:	3d01      	subs	r5, #1
  4008c8:	d1f2      	bne.n	4008b0 <sd_mmc_check+0x614>
  4008ca:	e504      	b.n	4002d6 <sd_mmc_check+0x3a>
  4008cc:	00402491 	.word	0x00402491
  4008d0:	80ffff01 	.word	0x80ffff01
  4008d4:	00081106 	.word	0x00081106
  4008d8:	00400db5 	.word	0x00400db5
  4008dc:	00400ef1 	.word	0x00400ef1
  4008e0:	00400f55 	.word	0x00400f55
  4008e4:	00400d7d 	.word	0x00400d7d
  4008e8:	00400d37 	.word	0x00400d37
  4008ec:	2040045c 	.word	0x2040045c
  4008f0:	401f8000 	.word	0x401f8000
  4008f4:	00400d59 	.word	0x00400d59

004008f8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4008f8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <sd_mmc_get_type+0x18>)
  4008fc:	4798      	blx	r3
  4008fe:	b108      	cbz	r0, 400904 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400900:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400902:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400904:	4b03      	ldr	r3, [pc, #12]	; (400914 <sd_mmc_get_type+0x1c>)
  400906:	4798      	blx	r3
	return sd_mmc_card->type;
  400908:	4b03      	ldr	r3, [pc, #12]	; (400918 <sd_mmc_get_type+0x20>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	7ad8      	ldrb	r0, [r3, #11]
  40090e:	bd08      	pop	{r3, pc}
  400910:	004001d5 	.word	0x004001d5
  400914:	00400261 	.word	0x00400261
  400918:	2040045c 	.word	0x2040045c

0040091c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40091c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <sd_mmc_get_capacity+0x18>)
  400920:	4798      	blx	r3
  400922:	b108      	cbz	r0, 400928 <sd_mmc_get_capacity+0xc>
		return 0;
  400924:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400926:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400928:	4b03      	ldr	r3, [pc, #12]	; (400938 <sd_mmc_get_capacity+0x1c>)
  40092a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <sd_mmc_get_capacity+0x20>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6858      	ldr	r0, [r3, #4]
  400932:	bd08      	pop	{r3, pc}
  400934:	004001d5 	.word	0x004001d5
  400938:	00400261 	.word	0x00400261
  40093c:	2040045c 	.word	0x2040045c

00400940 <sd_mmc_init_read_blocks>:
	return false;
}

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400944:	b082      	sub	sp, #8
  400946:	468a      	mov	sl, r1
  400948:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40094a:	4b26      	ldr	r3, [pc, #152]	; (4009e4 <sd_mmc_init_read_blocks+0xa4>)
  40094c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  40094e:	4680      	mov	r8, r0
  400950:	b118      	cbz	r0, 40095a <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400952:	4640      	mov	r0, r8
  400954:	b002      	add	sp, #8
  400956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40095a:	4c23      	ldr	r4, [pc, #140]	; (4009e8 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  40095c:	4e23      	ldr	r6, [pc, #140]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  40095e:	4d24      	ldr	r5, [pc, #144]	; (4009f0 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400960:	4f24      	ldr	r7, [pc, #144]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400962:	6833      	ldr	r3, [r6, #0]
  400964:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400966:	0409      	lsls	r1, r1, #16
  400968:	f241 100d 	movw	r0, #4365	; 0x110d
  40096c:	47a8      	blx	r5
  40096e:	b128      	cbz	r0, 40097c <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400970:	47b8      	blx	r7
  400972:	f410 7f80 	tst.w	r0, #256	; 0x100
  400976:	d117      	bne.n	4009a8 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400978:	3c01      	subs	r4, #1
  40097a:	d1f2      	bne.n	400962 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  40097c:	4b1e      	ldr	r3, [pc, #120]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  40097e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400980:	f04f 0805 	mov.w	r8, #5
  400984:	e7e5      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400986:	4b1b      	ldr	r3, [pc, #108]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
  400988:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40098a:	4b1c      	ldr	r3, [pc, #112]	; (4009fc <sd_mmc_init_read_blocks+0xbc>)
  40098c:	4003      	ands	r3, r0
  40098e:	b933      	cbnz	r3, 40099e <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400990:	4b1b      	ldr	r3, [pc, #108]	; (400a00 <sd_mmc_init_read_blocks+0xc0>)
  400992:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400996:	4b1b      	ldr	r3, [pc, #108]	; (400a04 <sd_mmc_init_read_blocks+0xc4>)
  400998:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  40099c:	e7d9      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  40099e:	4b16      	ldr	r3, [pc, #88]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009a0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4009a2:	f04f 0805 	mov.w	r8, #5
  4009a6:	e7d4      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  4009a8:	4b17      	ldr	r3, [pc, #92]	; (400a08 <sd_mmc_init_read_blocks+0xc8>)
  4009aa:	4818      	ldr	r0, [pc, #96]	; (400a0c <sd_mmc_init_read_blocks+0xcc>)
  4009ac:	f1b9 0f01 	cmp.w	r9, #1
  4009b0:	bf98      	it	ls
  4009b2:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4009b4:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
  4009b6:	681b      	ldr	r3, [r3, #0]
  4009b8:	7adb      	ldrb	r3, [r3, #11]
  4009ba:	f013 0f08 	tst.w	r3, #8
  4009be:	d101      	bne.n	4009c4 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  4009c0:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4009c4:	2301      	movs	r3, #1
  4009c6:	9300      	str	r3, [sp, #0]
  4009c8:	464b      	mov	r3, r9
  4009ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  4009ce:	4651      	mov	r1, sl
  4009d0:	4c0f      	ldr	r4, [pc, #60]	; (400a10 <sd_mmc_init_read_blocks+0xd0>)
  4009d2:	47a0      	blx	r4
  4009d4:	2800      	cmp	r0, #0
  4009d6:	d1d6      	bne.n	400986 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4009dc:	f04f 0805 	mov.w	r8, #5
  4009e0:	e7b7      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  4009e2:	bf00      	nop
  4009e4:	004001d5 	.word	0x004001d5
  4009e8:	00030d41 	.word	0x00030d41
  4009ec:	2040045c 	.word	0x2040045c
  4009f0:	00400d59 	.word	0x00400d59
  4009f4:	00400d7d 	.word	0x00400d7d
  4009f8:	00400261 	.word	0x00400261
  4009fc:	e4580000 	.word	0xe4580000
  400a00:	20400480 	.word	0x20400480
  400a04:	20400482 	.word	0x20400482
  400a08:	00081111 	.word	0x00081111
  400a0c:	00101112 	.word	0x00101112
  400a10:	00400db5 	.word	0x00400db5

00400a14 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400a14:	b510      	push	{r4, lr}
  400a16:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <sd_mmc_start_read_blocks+0x20>)
  400a1a:	4798      	blx	r3
  400a1c:	b920      	cbnz	r0, 400a28 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400a1e:	2200      	movs	r2, #0
  400a20:	4b05      	ldr	r3, [pc, #20]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a22:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400a24:	2005      	movs	r0, #5
  400a26:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400a28:	4a03      	ldr	r2, [pc, #12]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a2a:	8813      	ldrh	r3, [r2, #0]
  400a2c:	1b1c      	subs	r4, r3, r4
  400a2e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400a30:	2000      	movs	r0, #0
}
  400a32:	bd10      	pop	{r4, pc}
  400a34:	00400ef1 	.word	0x00400ef1
  400a38:	20400480 	.word	0x20400480

00400a3c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400a3c:	b510      	push	{r4, lr}
  400a3e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400a40:	4b13      	ldr	r3, [pc, #76]	; (400a90 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400a42:	4798      	blx	r3
  400a44:	b908      	cbnz	r0, 400a4a <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400a46:	2005      	movs	r0, #5
  400a48:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400a4a:	b184      	cbz	r4, 400a6e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400a4c:	2200      	movs	r2, #0
  400a4e:	4b11      	ldr	r3, [pc, #68]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a50:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400a52:	4b11      	ldr	r3, [pc, #68]	; (400a98 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400a54:	881b      	ldrh	r3, [r3, #0]
  400a56:	2b01      	cmp	r3, #1
  400a58:	d00f      	beq.n	400a7a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400a5a:	2100      	movs	r1, #0
  400a5c:	f243 100c 	movw	r0, #12556	; 0x310c
  400a60:	4b0e      	ldr	r3, [pc, #56]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a62:	4798      	blx	r3
  400a64:	b168      	cbz	r0, 400a82 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400a66:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a68:	4798      	blx	r3
	return SD_MMC_OK;
  400a6a:	2000      	movs	r0, #0
  400a6c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400a6e:	4b09      	ldr	r3, [pc, #36]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a70:	881b      	ldrh	r3, [r3, #0]
  400a72:	2b00      	cmp	r3, #0
  400a74:	d0ed      	beq.n	400a52 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400a76:	2000      	movs	r0, #0
}
  400a78:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400a7a:	4b09      	ldr	r3, [pc, #36]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a7c:	4798      	blx	r3
		return SD_MMC_OK;
  400a7e:	2000      	movs	r0, #0
  400a80:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400a82:	2100      	movs	r1, #0
  400a84:	f243 100c 	movw	r0, #12556	; 0x310c
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a8a:	4798      	blx	r3
  400a8c:	e7eb      	b.n	400a66 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400a8e:	bf00      	nop
  400a90:	00400f55 	.word	0x00400f55
  400a94:	20400480 	.word	0x20400480
  400a98:	20400482 	.word	0x20400482
  400a9c:	00400d59 	.word	0x00400d59
  400aa0:	00400261 	.word	0x00400261

00400aa4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400aa4:	b570      	push	{r4, r5, r6, lr}
  400aa6:	b082      	sub	sp, #8
  400aa8:	460e      	mov	r6, r1
  400aaa:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400aac:	4b16      	ldr	r3, [pc, #88]	; (400b08 <sd_mmc_init_write_blocks+0x64>)
  400aae:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400ab0:	4604      	mov	r4, r0
  400ab2:	b9b8      	cbnz	r0, 400ae4 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400ab4:	4b15      	ldr	r3, [pc, #84]	; (400b0c <sd_mmc_init_write_blocks+0x68>)
  400ab6:	4816      	ldr	r0, [pc, #88]	; (400b10 <sd_mmc_init_write_blocks+0x6c>)
  400ab8:	2d01      	cmp	r5, #1
  400aba:	bf98      	it	ls
  400abc:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <sd_mmc_init_write_blocks+0x70>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	7adb      	ldrb	r3, [r3, #11]
  400ac4:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400ac8:	bf08      	it	eq
  400aca:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400acc:	2301      	movs	r3, #1
  400ace:	9300      	str	r3, [sp, #0]
  400ad0:	462b      	mov	r3, r5
  400ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ad6:	4631      	mov	r1, r6
  400ad8:	4e0f      	ldr	r6, [pc, #60]	; (400b18 <sd_mmc_init_write_blocks+0x74>)
  400ada:	47b0      	blx	r6
  400adc:	b928      	cbnz	r0, 400aea <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400ade:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400ae0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ae2:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400ae4:	4620      	mov	r0, r4
  400ae6:	b002      	add	sp, #8
  400ae8:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400aea:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <sd_mmc_init_write_blocks+0x7c>)
  400aec:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <sd_mmc_init_write_blocks+0x80>)
  400af0:	4003      	ands	r3, r0
  400af2:	b923      	cbnz	r3, 400afe <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400af4:	4b0c      	ldr	r3, [pc, #48]	; (400b28 <sd_mmc_init_write_blocks+0x84>)
  400af6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400af8:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <sd_mmc_init_write_blocks+0x88>)
  400afa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400afc:	e7f2      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400afe:	4b07      	ldr	r3, [pc, #28]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400b00:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400b02:	2405      	movs	r4, #5
  400b04:	e7ee      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
  400b06:	bf00      	nop
  400b08:	004001d5 	.word	0x004001d5
  400b0c:	00089118 	.word	0x00089118
  400b10:	00109119 	.word	0x00109119
  400b14:	2040045c 	.word	0x2040045c
  400b18:	00400db5 	.word	0x00400db5
  400b1c:	00400261 	.word	0x00400261
  400b20:	00400d7d 	.word	0x00400d7d
  400b24:	e4580000 	.word	0xe4580000
  400b28:	20400480 	.word	0x20400480
  400b2c:	20400482 	.word	0x20400482

00400b30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400b30:	b510      	push	{r4, lr}
  400b32:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400b34:	4b06      	ldr	r3, [pc, #24]	; (400b50 <sd_mmc_start_write_blocks+0x20>)
  400b36:	4798      	blx	r3
  400b38:	b920      	cbnz	r0, 400b44 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b3a:	2200      	movs	r2, #0
  400b3c:	4b05      	ldr	r3, [pc, #20]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b3e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b40:	2005      	movs	r0, #5
  400b42:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b44:	4a03      	ldr	r2, [pc, #12]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b46:	8813      	ldrh	r3, [r2, #0]
  400b48:	1b1c      	subs	r4, r3, r4
  400b4a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400b4c:	2000      	movs	r0, #0
}
  400b4e:	bd10      	pop	{r4, pc}
  400b50:	00400fb9 	.word	0x00400fb9
  400b54:	20400480 	.word	0x20400480

00400b58 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400b58:	b510      	push	{r4, lr}
  400b5a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400b5c:	4b12      	ldr	r3, [pc, #72]	; (400ba8 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400b5e:	4798      	blx	r3
  400b60:	b908      	cbnz	r0, 400b66 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400b62:	2005      	movs	r0, #5
  400b64:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400b66:	b184      	cbz	r4, 400b8a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400b68:	2200      	movs	r2, #0
  400b6a:	4b10      	ldr	r3, [pc, #64]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b6c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400b6e:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400b70:	881b      	ldrh	r3, [r3, #0]
  400b72:	2b01      	cmp	r3, #1
  400b74:	d00f      	beq.n	400b96 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400b76:	2100      	movs	r1, #0
  400b78:	f243 100c 	movw	r0, #12556	; 0x310c
  400b7c:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b7e:	4798      	blx	r3
  400b80:	b968      	cbnz	r0, 400b9e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400b82:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b84:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400b86:	2005      	movs	r0, #5
  400b88:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400b8a:	4b08      	ldr	r3, [pc, #32]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b8c:	881b      	ldrh	r3, [r3, #0]
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d0ed      	beq.n	400b6e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400b92:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400b94:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400b96:	4b08      	ldr	r3, [pc, #32]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b98:	4798      	blx	r3
		return SD_MMC_OK;
  400b9a:	2000      	movs	r0, #0
  400b9c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400b9e:	4b06      	ldr	r3, [pc, #24]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400ba0:	4798      	blx	r3
	return SD_MMC_OK;
  400ba2:	2000      	movs	r0, #0
  400ba4:	bd10      	pop	{r4, pc}
  400ba6:	bf00      	nop
  400ba8:	0040101d 	.word	0x0040101d
  400bac:	20400480 	.word	0x20400480
  400bb0:	20400482 	.word	0x20400482
  400bb4:	00400d59 	.word	0x00400d59
  400bb8:	00400261 	.word	0x00400261

00400bbc <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400bbc:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc2:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400bc4:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400bc6:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400bc8:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400bca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400bcc:	2680      	movs	r6, #128	; 0x80
  400bce:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400bd0:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400bd2:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400bd4:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400bd6:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400bd8:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400bda:	2200      	movs	r2, #0
  400bdc:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400bde:	2205      	movs	r2, #5
  400be0:	601a      	str	r2, [r3, #0]
}
  400be2:	bc70      	pop	{r4, r5, r6}
  400be4:	4770      	bx	lr
	...

00400be8 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400be8:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400bea:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400bee:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400bf0:	f411 7f80 	tst.w	r1, #256	; 0x100
  400bf4:	d004      	beq.n	400c00 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400bf6:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400bfa:	d00e      	beq.n	400c1a <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400bfc:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400c00:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400c04:	bf18      	it	ne
  400c06:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c0e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400c10:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400c12:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400c14:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400c18:	e00d      	b.n	400c36 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400c1a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400c1e:	bf14      	ite	ne
  400c20:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400c24:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400c28:	e7ea      	b.n	400c00 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c2a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400c2e:	d10c      	bne.n	400c4a <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400c30:	f013 0f01 	tst.w	r3, #1
  400c34:	d10d      	bne.n	400c52 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  400c36:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400c38:	2a00      	cmp	r2, #0
  400c3a:	d0f6      	beq.n	400c2a <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c3c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400c40:	d0f6      	beq.n	400c30 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  400c42:	4b10      	ldr	r3, [pc, #64]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c44:	4798      	blx	r3
				return false;
  400c46:	2000      	movs	r0, #0
  400c48:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400c4a:	4b0e      	ldr	r3, [pc, #56]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c4c:	4798      	blx	r3
				return false;
  400c4e:	2000      	movs	r0, #0
  400c50:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400c52:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400c56:	d103      	bne.n	400c60 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400c58:	2001      	movs	r0, #1
  400c5a:	bd08      	pop	{r3, pc}
	return true;
  400c5c:	2001      	movs	r0, #1
  400c5e:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c66:	f04f 32ff 	mov.w	r2, #4294967295
  400c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400c6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400c72:	2b20      	cmp	r3, #32
  400c74:	d0f2      	beq.n	400c5c <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  400c76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400c78:	3a01      	subs	r2, #1
  400c7a:	d1f8      	bne.n	400c6e <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  400c7c:	4b01      	ldr	r3, [pc, #4]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c7e:	4798      	blx	r3
			return false;
  400c80:	2000      	movs	r0, #0
  400c82:	bd08      	pop	{r3, pc}
  400c84:	00400bbd 	.word	0x00400bbd

00400c88 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400c88:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400c8a:	2012      	movs	r0, #18
  400c8c:	4c08      	ldr	r4, [pc, #32]	; (400cb0 <hsmci_init+0x28>)
  400c8e:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400c90:	203a      	movs	r0, #58	; 0x3a
  400c92:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c98:	2272      	movs	r2, #114	; 0x72
  400c9a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400c9c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400c9e:	2211      	movs	r2, #17
  400ca0:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400ca2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400ca6:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400ca8:	2205      	movs	r2, #5
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	004014e5 	.word	0x004014e5

00400cb4 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400cb4:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400cb6:	bf0c      	ite	eq
  400cb8:	2004      	moveq	r0, #4
  400cba:	2000      	movne	r0, #0
  400cbc:	4770      	bx	lr

00400cbe <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400cbe:	2001      	movs	r0, #1
  400cc0:	4770      	bx	lr
	...

00400cc4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400cc4:	b19b      	cbz	r3, 400cee <hsmci_select_device+0x2a>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400cd0:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400cd2:	0049      	lsls	r1, r1, #1
  400cd4:	4b15      	ldr	r3, [pc, #84]	; (400d2c <hsmci_select_device+0x68>)
  400cd6:	4299      	cmp	r1, r3
  400cd8:	d810      	bhi.n	400cfc <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  400cda:	4815      	ldr	r0, [pc, #84]	; (400d30 <hsmci_select_device+0x6c>)
  400cdc:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
  400ce0:	fb01 0113 	mls	r1, r1, r3, r0
		if (rest > 0) {
  400ce4:	b101      	cbz	r1, 400ce8 <hsmci_select_device+0x24>
			clkdiv++;
  400ce6:	3301      	adds	r3, #1
		if (clkdiv > 0) {
  400ce8:	b14b      	cbz	r3, 400cfe <hsmci_select_device+0x3a>
			clkdiv -= 1;
  400cea:	3b01      	subs	r3, #1
  400cec:	e007      	b.n	400cfe <hsmci_select_device+0x3a>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cf2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400cf8:	6543      	str	r3, [r0, #84]	; 0x54
  400cfa:	e7ea      	b.n	400cd2 <hsmci_select_device+0xe>
		clkdiv = 0;
  400cfc:	2300      	movs	r3, #0
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400cfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d02:	6848      	ldr	r0, [r1, #4]
  400d04:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400d08:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400d0a:	6848      	ldr	r0, [r1, #4]
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	4303      	orrs	r3, r0
  400d10:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400d12:	2a04      	cmp	r2, #4
  400d14:	d007      	beq.n	400d26 <hsmci_select_device+0x62>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400d16:	2a08      	cmp	r2, #8
  400d18:	bf0c      	ite	eq
  400d1a:	22c0      	moveq	r2, #192	; 0xc0
  400d1c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d22:	60da      	str	r2, [r3, #12]
  400d24:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400d26:	2280      	movs	r2, #128	; 0x80
  400d28:	e7f9      	b.n	400d1e <hsmci_select_device+0x5a>
  400d2a:	bf00      	nop
  400d2c:	089543ff 	.word	0x089543ff
  400d30:	08954400 	.word	0x08954400

00400d34 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  400d34:	4770      	bx	lr

00400d36 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d3a:	685a      	ldr	r2, [r3, #4]
  400d3c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d40:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400d42:	2200      	movs	r2, #0
  400d44:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400d46:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400d4a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400d4c:	461a      	mov	r2, r3
  400d4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400d50:	f013 0f01 	tst.w	r3, #1
  400d54:	d0fb      	beq.n	400d4e <hsmci_send_clock+0x18>
}
  400d56:	4770      	bx	lr

00400d58 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400d58:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d5e:	685a      	ldr	r2, [r3, #4]
  400d60:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d64:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400d66:	2400      	movs	r4, #0
  400d68:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400d6a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400d6c:	460a      	mov	r2, r1
  400d6e:	4601      	mov	r1, r0
  400d70:	4620      	mov	r0, r4
  400d72:	4b01      	ldr	r3, [pc, #4]	; (400d78 <hsmci_send_cmd+0x20>)
  400d74:	4798      	blx	r3
}
  400d76:	bd10      	pop	{r4, pc}
  400d78:	00400be9 	.word	0x00400be9

00400d7c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d80:	6a18      	ldr	r0, [r3, #32]
}
  400d82:	4770      	bx	lr

00400d84 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400d84:	b410      	push	{r4}
  400d86:	1d03      	adds	r3, r0, #4
  400d88:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400d8a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400d8e:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400d90:	0e11      	lsrs	r1, r2, #24
  400d92:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400d96:	0c11      	lsrs	r1, r2, #16
  400d98:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400d9c:	0a11      	lsrs	r1, r2, #8
  400d9e:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400da2:	f803 2c01 	strb.w	r2, [r3, #-1]
  400da6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  400da8:	4283      	cmp	r3, r0
  400daa:	d1f0      	bne.n	400d8e <hsmci_get_response_128+0xa>
		response++;
	}
}
  400dac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db0:	4770      	bx	lr
	...

00400db4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400db4:	b570      	push	{r4, r5, r6, lr}
  400db6:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400dba:	b384      	cbz	r4, 400e1e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400dbc:	f44f 7580 	mov.w	r5, #256	; 0x100
  400dc0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400dc4:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400dc6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400dca:	686c      	ldr	r4, [r5, #4]
  400dcc:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400dd0:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400dd2:	f012 0f03 	tst.w	r2, #3
  400dd6:	d027      	beq.n	400e28 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400dd8:	686c      	ldr	r4, [r5, #4]
  400dda:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400dde:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400de0:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400de4:	2c00      	cmp	r4, #0
  400de6:	bf14      	ite	ne
  400de8:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400dec:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400df0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400df4:	d11f      	bne.n	400e36 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400df6:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400dfa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400dfe:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400e00:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400e04:	d12b      	bne.n	400e5e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  400e06:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400e0a:	d12b      	bne.n	400e64 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400e0c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400e10:	d118      	bne.n	400e44 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400e12:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400e16:	bf18      	it	ne
  400e18:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400e1c:	e012      	b.n	400e44 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  400e1e:	2500      	movs	r5, #0
  400e20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400e24:	6525      	str	r5, [r4, #80]	; 0x50
  400e26:	e7ce      	b.n	400dc6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400e28:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400e2c:	686c      	ldr	r4, [r5, #4]
  400e2e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400e32:	606c      	str	r4, [r5, #4]
  400e34:	e7d4      	b.n	400de0 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400e36:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400e3a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400e3e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400e42:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400e44:	2600      	movs	r6, #0
  400e46:	4d09      	ldr	r5, [pc, #36]	; (400e6c <hsmci_adtc_start+0xb8>)
  400e48:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400e4a:	4d09      	ldr	r5, [pc, #36]	; (400e70 <hsmci_adtc_start+0xbc>)
  400e4c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400e4e:	4a09      	ldr	r2, [pc, #36]	; (400e74 <hsmci_adtc_start+0xc0>)
  400e50:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400e52:	460a      	mov	r2, r1
  400e54:	4601      	mov	r1, r0
  400e56:	4620      	mov	r0, r4
  400e58:	4b07      	ldr	r3, [pc, #28]	; (400e78 <hsmci_adtc_start+0xc4>)
  400e5a:	4798      	blx	r3
}
  400e5c:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400e5e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400e62:	e7ef      	b.n	400e44 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400e64:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400e68:	e7ec      	b.n	400e44 <hsmci_adtc_start+0x90>
  400e6a:	bf00      	nop
  400e6c:	2040048c 	.word	0x2040048c
  400e70:	20400486 	.word	0x20400486
  400e74:	20400488 	.word	0x20400488
  400e78:	00400be9 	.word	0x00400be9

00400e7c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400e7c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400e7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e82:	4a16      	ldr	r2, [pc, #88]	; (400edc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e86:	4213      	tst	r3, r2
  400e88:	d11d      	bne.n	400ec6 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400e8a:	f013 0f02 	tst.w	r3, #2
  400e8e:	d0f9      	beq.n	400e84 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e96:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400e98:	4a11      	ldr	r2, [pc, #68]	; (400ee0 <hsmci_read_word+0x64>)
  400e9a:	6813      	ldr	r3, [r2, #0]
  400e9c:	3304      	adds	r3, #4
  400e9e:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400ea0:	4a10      	ldr	r2, [pc, #64]	; (400ee4 <hsmci_read_word+0x68>)
  400ea2:	8811      	ldrh	r1, [r2, #0]
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <hsmci_read_word+0x6c>)
  400ea6:	8812      	ldrh	r2, [r2, #0]
  400ea8:	fb02 f201 	mul.w	r2, r2, r1
  400eac:	4293      	cmp	r3, r2
  400eae:	d312      	bcc.n	400ed6 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eb4:	4a09      	ldr	r2, [pc, #36]	; (400edc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eb8:	4213      	tst	r3, r2
  400eba:	d108      	bne.n	400ece <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400ebc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400ec0:	d0f9      	beq.n	400eb6 <hsmci_read_word+0x3a>
	return true;
  400ec2:	2001      	movs	r0, #1
  400ec4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <hsmci_read_word+0x70>)
  400ec8:	4798      	blx	r3
			return false;
  400eca:	2000      	movs	r0, #0
  400ecc:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400ece:	4b07      	ldr	r3, [pc, #28]	; (400eec <hsmci_read_word+0x70>)
  400ed0:	4798      	blx	r3
			return false;
  400ed2:	2000      	movs	r0, #0
  400ed4:	bd08      	pop	{r3, pc}
		return true;
  400ed6:	2001      	movs	r0, #1
}
  400ed8:	bd08      	pop	{r3, pc}
  400eda:	bf00      	nop
  400edc:	c0600000 	.word	0xc0600000
  400ee0:	2040048c 	.word	0x2040048c
  400ee4:	20400486 	.word	0x20400486
  400ee8:	20400488 	.word	0x20400488
  400eec:	00400bbd 	.word	0x00400bbd

00400ef0 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ef2:	b089      	sub	sp, #36	; 0x24
  400ef4:	4607      	mov	r7, r0
  400ef6:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400ef8:	2220      	movs	r2, #32
  400efa:	2100      	movs	r1, #0
  400efc:	4668      	mov	r0, sp
  400efe:	4b0e      	ldr	r3, [pc, #56]	; (400f38 <hsmci_start_read_blocks+0x48>)
  400f00:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f02:	4e0e      	ldr	r6, [pc, #56]	; (400f3c <hsmci_start_read_blocks+0x4c>)
  400f04:	2501      	movs	r5, #1
  400f06:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400f08:	4b0d      	ldr	r3, [pc, #52]	; (400f40 <hsmci_start_read_blocks+0x50>)
  400f0a:	881b      	ldrh	r3, [r3, #0]
  400f0c:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400f10:	4b0c      	ldr	r3, [pc, #48]	; (400f44 <hsmci_start_read_blocks+0x54>)
  400f12:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400f14:	08a3      	lsrs	r3, r4, #2
  400f16:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400f18:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <hsmci_start_read_blocks+0x58>)
  400f1a:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  400f1c:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400f1e:	466a      	mov	r2, sp
  400f20:	2100      	movs	r1, #0
  400f22:	4630      	mov	r0, r6
  400f24:	4b09      	ldr	r3, [pc, #36]	; (400f4c <hsmci_start_read_blocks+0x5c>)
  400f26:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400f28:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400f2a:	4a09      	ldr	r2, [pc, #36]	; (400f50 <hsmci_start_read_blocks+0x60>)
  400f2c:	6813      	ldr	r3, [r2, #0]
  400f2e:	441c      	add	r4, r3
  400f30:	6014      	str	r4, [r2, #0]
	return true;
}
  400f32:	4628      	mov	r0, r5
  400f34:	b009      	add	sp, #36	; 0x24
  400f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f38:	00402491 	.word	0x00402491
  400f3c:	40078000 	.word	0x40078000
  400f40:	20400486 	.word	0x20400486
  400f44:	00043001 	.word	0x00043001
  400f48:	40000200 	.word	0x40000200
  400f4c:	0040166b 	.word	0x0040166b
  400f50:	2040048c 	.word	0x2040048c

00400f54 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  400f54:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f56:	4b12      	ldr	r3, [pc, #72]	; (400fa0 <hsmci_wait_end_of_read_blocks+0x4c>)
  400f58:	881b      	ldrh	r3, [r3, #0]
  400f5a:	4a12      	ldr	r2, [pc, #72]	; (400fa4 <hsmci_wait_end_of_read_blocks+0x50>)
  400f5c:	8812      	ldrh	r2, [r2, #0]
  400f5e:	fb02 f203 	mul.w	r2, r2, r3
  400f62:	4b11      	ldr	r3, [pc, #68]	; (400fa8 <hsmci_wait_end_of_read_blocks+0x54>)
  400f64:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400f66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f6a:	4910      	ldr	r1, [pc, #64]	; (400fac <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f6c:	4e10      	ldr	r6, [pc, #64]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f6e:	e009      	b.n	400f84 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  400f70:	4b10      	ldr	r3, [pc, #64]	; (400fb4 <hsmci_wait_end_of_read_blocks+0x60>)
  400f72:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f74:	2201      	movs	r2, #1
  400f76:	4b0e      	ldr	r3, [pc, #56]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f78:	621a      	str	r2, [r3, #32]
			return false;
  400f7a:	2000      	movs	r0, #0
  400f7c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400f7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400f82:	d10a      	bne.n	400f9a <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400f84:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f86:	420b      	tst	r3, r1
  400f88:	d1f2      	bne.n	400f70 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f8a:	42a2      	cmp	r2, r4
  400f8c:	d9f7      	bls.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f8e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400f90:	f015 0f01 	tst.w	r5, #1
  400f94:	d0f3      	beq.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  400f96:	2001      	movs	r0, #1
	return true;
}
  400f98:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400f9a:	2001      	movs	r0, #1
  400f9c:	bd70      	pop	{r4, r5, r6, pc}
  400f9e:	bf00      	nop
  400fa0:	20400486 	.word	0x20400486
  400fa4:	20400488 	.word	0x20400488
  400fa8:	2040048c 	.word	0x2040048c
  400fac:	c0600000 	.word	0xc0600000
  400fb0:	40078000 	.word	0x40078000
  400fb4:	00400bbd 	.word	0x00400bbd

00400fb8 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  400fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fba:	b089      	sub	sp, #36	; 0x24
  400fbc:	4607      	mov	r7, r0
  400fbe:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400fc0:	2220      	movs	r2, #32
  400fc2:	2100      	movs	r1, #0
  400fc4:	4668      	mov	r0, sp
  400fc6:	4b0e      	ldr	r3, [pc, #56]	; (401000 <hsmci_start_write_blocks+0x48>)
  400fc8:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400fca:	4e0e      	ldr	r6, [pc, #56]	; (401004 <hsmci_start_write_blocks+0x4c>)
  400fcc:	2501      	movs	r5, #1
  400fce:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400fd0:	4b0d      	ldr	r3, [pc, #52]	; (401008 <hsmci_start_write_blocks+0x50>)
  400fd2:	881b      	ldrh	r3, [r3, #0]
  400fd4:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400fd8:	4b0c      	ldr	r3, [pc, #48]	; (40100c <hsmci_start_write_blocks+0x54>)
  400fda:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400fdc:	08a3      	lsrs	r3, r4, #2
  400fde:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  400fe0:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400fe2:	4b0b      	ldr	r3, [pc, #44]	; (401010 <hsmci_start_write_blocks+0x58>)
  400fe4:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400fe6:	466a      	mov	r2, sp
  400fe8:	2100      	movs	r1, #0
  400fea:	4630      	mov	r0, r6
  400fec:	4b09      	ldr	r3, [pc, #36]	; (401014 <hsmci_start_write_blocks+0x5c>)
  400fee:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400ff0:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400ff2:	4a09      	ldr	r2, [pc, #36]	; (401018 <hsmci_start_write_blocks+0x60>)
  400ff4:	6813      	ldr	r3, [r2, #0]
  400ff6:	441c      	add	r4, r3
  400ff8:	6014      	str	r4, [r2, #0]
	return true;
}
  400ffa:	4628      	mov	r0, r5
  400ffc:	b009      	add	sp, #36	; 0x24
  400ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401000:	00402491 	.word	0x00402491
  401004:	40078000 	.word	0x40078000
  401008:	20400486 	.word	0x20400486
  40100c:	00015011 	.word	0x00015011
  401010:	40000200 	.word	0x40000200
  401014:	0040166b 	.word	0x0040166b
  401018:	2040048c 	.word	0x2040048c

0040101c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40101c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40101e:	4b12      	ldr	r3, [pc, #72]	; (401068 <hsmci_wait_end_of_write_blocks+0x4c>)
  401020:	881b      	ldrh	r3, [r3, #0]
  401022:	4a12      	ldr	r2, [pc, #72]	; (40106c <hsmci_wait_end_of_write_blocks+0x50>)
  401024:	8812      	ldrh	r2, [r2, #0]
  401026:	fb02 f203 	mul.w	r2, r2, r3
  40102a:	4b11      	ldr	r3, [pc, #68]	; (401070 <hsmci_wait_end_of_write_blocks+0x54>)
  40102c:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40102e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401032:	4910      	ldr	r1, [pc, #64]	; (401074 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401034:	4e10      	ldr	r6, [pc, #64]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401036:	e009      	b.n	40104c <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401038:	4b10      	ldr	r3, [pc, #64]	; (40107c <hsmci_wait_end_of_write_blocks+0x60>)
  40103a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40103c:	2201      	movs	r2, #1
  40103e:	4b0e      	ldr	r3, [pc, #56]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401040:	621a      	str	r2, [r3, #32]
			return false;
  401042:	2000      	movs	r0, #0
  401044:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401046:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40104a:	d10a      	bne.n	401062 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40104c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40104e:	420b      	tst	r3, r1
  401050:	d1f2      	bne.n	401038 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401052:	42a2      	cmp	r2, r4
  401054:	d9f7      	bls.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401056:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401058:	f015 0f01 	tst.w	r5, #1
  40105c:	d0f3      	beq.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  40105e:	2001      	movs	r0, #1

	return true;
}
  401060:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401062:	2001      	movs	r0, #1
  401064:	bd70      	pop	{r4, r5, r6, pc}
  401066:	bf00      	nop
  401068:	20400486 	.word	0x20400486
  40106c:	20400488 	.word	0x20400488
  401070:	2040048c 	.word	0x2040048c
  401074:	c0600000 	.word	0xc0600000
  401078:	40078000 	.word	0x40078000
  40107c:	00400bbd 	.word	0x00400bbd

00401080 <matrix_set_system_io>:

	p_matrix->MATRIX_SYSIO = ul_io;

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)
	
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <matrix_set_system_io+0x1c>)
  401082:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  401086:	4a06      	ldr	r2, [pc, #24]	; (4010a0 <matrix_set_system_io+0x20>)
  401088:	400a      	ands	r2, r1
  40108a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);
  40108e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  401092:	b280      	uxth	r0, r0
  401094:	4310      	orrs	r0, r2
  401096:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  40109a:	4770      	bx	lr
  40109c:	40088000 	.word	0x40088000
  4010a0:	ffff0000 	.word	0xffff0000

004010a4 <matrix_get_system_io>:

	return (p_matrix->MATRIX_SYSIO);

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)

	return (p_matrix->CCFG_SYSIO & 0xFFFF);
  4010a4:	4b02      	ldr	r3, [pc, #8]	; (4010b0 <matrix_get_system_io+0xc>)
  4010a6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
#else

	return (p_matrix->CCFG_SYSIO);

#endif
}
  4010aa:	b280      	uxth	r0, r0
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop
  4010b0:	40088000 	.word	0x40088000

004010b4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4010b4:	b4f0      	push	{r4, r5, r6, r7}
  4010b6:	b08c      	sub	sp, #48	; 0x30
  4010b8:	4607      	mov	r7, r0
  4010ba:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4010bc:	ac01      	add	r4, sp, #4
  4010be:	4d11      	ldr	r5, [pc, #68]	; (401104 <pwm_clocks_generate+0x50>)
  4010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4010d0:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4010d2:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4010d4:	f852 0b04 	ldr.w	r0, [r2], #4
  4010d8:	fbb6 f0f0 	udiv	r0, r6, r0
  4010dc:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4010e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4010e4:	d907      	bls.n	4010f6 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4010e6:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4010e8:	2b0b      	cmp	r3, #11
  4010ea:	d1f3      	bne.n	4010d4 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4010ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4010f0:	b00c      	add	sp, #48	; 0x30
  4010f2:	bcf0      	pop	{r4, r5, r6, r7}
  4010f4:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4010f6:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4010f8:	bf94      	ite	ls
  4010fa:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4010fe:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  401102:	e7f5      	b.n	4010f0 <pwm_clocks_generate+0x3c>
  401104:	004026e8 	.word	0x004026e8

00401108 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	4606      	mov	r6, r0
  40110c:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40110e:	680c      	ldr	r4, [r1, #0]
  401110:	b144      	cbz	r4, 401124 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401112:	6889      	ldr	r1, [r1, #8]
  401114:	4620      	mov	r0, r4
  401116:	4b0c      	ldr	r3, [pc, #48]	; (401148 <pwm_init+0x40>)
  401118:	4798      	blx	r3
  40111a:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401120:	4298      	cmp	r0, r3
  401122:	d00c      	beq.n	40113e <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401124:	6868      	ldr	r0, [r5, #4]
  401126:	b140      	cbz	r0, 40113a <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401128:	68a9      	ldr	r1, [r5, #8]
  40112a:	4b07      	ldr	r3, [pc, #28]	; (401148 <pwm_init+0x40>)
  40112c:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  40112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401132:	4298      	cmp	r0, r3
  401134:	d005      	beq.n	401142 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  401136:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40113a:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  40113c:	2400      	movs	r4, #0
}
  40113e:	4620      	mov	r0, r4
  401140:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  401142:	4604      	mov	r4, r0
  401144:	e7fb      	b.n	40113e <pwm_init+0x36>
  401146:	bf00      	nop
  401148:	004010b5 	.word	0x004010b5

0040114c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  40114c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40114e:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401150:	684b      	ldr	r3, [r1, #4]
  401152:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  401156:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401158:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  40115a:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40115c:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  40115e:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401160:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  401164:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401166:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  40116a:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40116c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  401170:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401172:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401176:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40117a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40117e:	68cb      	ldr	r3, [r1, #12]
  401180:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401184:	690b      	ldr	r3, [r1, #16]
  401186:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40118a:	7d8b      	ldrb	r3, [r1, #22]
  40118c:	b13b      	cbz	r3, 40119e <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  40118e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401190:	8b4b      	ldrh	r3, [r1, #26]
  401192:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401196:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40119a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40119e:	6c85      	ldr	r5, [r0, #72]	; 0x48
  4011a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  4011a4:	4093      	lsls	r3, r2
  4011a6:	43db      	mvns	r3, r3
  4011a8:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  4011aa:	7fcc      	ldrb	r4, [r1, #31]
  4011ac:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4011b0:	7f8c      	ldrb	r4, [r1, #30]
  4011b2:	4094      	lsls	r4, r2
  4011b4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4011b8:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4011ba:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4011bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4011be:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4011c0:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4011c4:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4011c8:	f891 4020 	ldrb.w	r4, [r1, #32]
  4011cc:	4094      	lsls	r4, r2
  4011ce:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4011d2:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4011d4:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4011d6:	2301      	movs	r3, #1
  4011d8:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  4011da:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4011de:	2c00      	cmp	r4, #0
  4011e0:	d04f      	beq.n	401282 <pwm_channel_init+0x136>
		p_pwm->PWM_SCM |= channel;
  4011e2:	6a04      	ldr	r4, [r0, #32]
  4011e4:	431c      	orrs	r4, r3
  4011e6:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  4011e8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4011ec:	2c02      	cmp	r4, #2
  4011ee:	d04d      	beq.n	40128c <pwm_channel_init+0x140>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  4011f0:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  4011f4:	43dc      	mvns	r4, r3
  4011f6:	4025      	ands	r5, r4
  4011f8:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4011fc:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  401200:	2d01      	cmp	r5, #1
  401202:	d049      	beq.n	401298 <pwm_channel_init+0x14c>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  401204:	6e85      	ldr	r5, [r0, #104]	; 0x68
  401206:	402c      	ands	r4, r5
  401208:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  40120a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40120e:	2c02      	cmp	r4, #2
  401210:	d046      	beq.n	4012a0 <pwm_channel_init+0x154>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401212:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  401216:	041b      	lsls	r3, r3, #16
  401218:	43dc      	mvns	r4, r3
  40121a:	4025      	ands	r5, r4
  40121c:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401220:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  401224:	2d01      	cmp	r5, #1
  401226:	d042      	beq.n	4012ae <pwm_channel_init+0x162>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  401228:	6e83      	ldr	r3, [r0, #104]	; 0x68
  40122a:	401c      	ands	r4, r3
  40122c:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40122e:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401230:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401232:	24ff      	movs	r4, #255	; 0xff
  401234:	4094      	lsls	r4, r2
  401236:	ea23 0404 	bic.w	r4, r3, r4
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40123a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  40123e:	4093      	lsls	r3, r2
  401240:	4323      	orrs	r3, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  401242:	66c3      	str	r3, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  401244:	b952      	cbnz	r2, 40125c <pwm_channel_init+0x110>
		if (p_channel->spread_spectrum_mode ==
  401246:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  40124a:	2b01      	cmp	r3, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  40124c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  40124e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401252:	bf08      	it	eq
  401254:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  401258:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  40125c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401260:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  401264:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  401268:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  40126c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  401270:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  401272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401276:	4313      	orrs	r3, r2
  401278:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  40127c:	2000      	movs	r0, #0
  40127e:	bc70      	pop	{r4, r5, r6}
  401280:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401282:	6a04      	ldr	r4, [r0, #32]
  401284:	ea24 0403 	bic.w	r4, r4, r3
  401288:	6204      	str	r4, [r0, #32]
  40128a:	e7ad      	b.n	4011e8 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  40128c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401290:	431c      	orrs	r4, r3
  401292:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  401296:	e7b8      	b.n	40120a <pwm_channel_init+0xbe>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  401298:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40129a:	431c      	orrs	r4, r3
  40129c:	6684      	str	r4, [r0, #104]	; 0x68
  40129e:	e7b4      	b.n	40120a <pwm_channel_init+0xbe>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  4012a0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4012a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  4012a8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  4012ac:	e7bf      	b.n	40122e <pwm_channel_init+0xe2>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4012ae:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4012b0:	4323      	orrs	r3, r4
  4012b2:	6683      	str	r3, [r0, #104]	; 0x68
  4012b4:	e7bb      	b.n	40122e <pwm_channel_init+0xe2>

004012b6 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4012b6:	690b      	ldr	r3, [r1, #16]
  4012b8:	4293      	cmp	r3, r2
  4012ba:	d202      	bcs.n	4012c2 <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  4012bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4012c0:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  4012c2:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  4012c4:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4012c6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4012ca:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  4012ce:	2000      	movs	r0, #0
  4012d0:	4770      	bx	lr

004012d2 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4012d2:	2301      	movs	r3, #1
  4012d4:	fa03 f101 	lsl.w	r1, r3, r1
  4012d8:	6041      	str	r1, [r0, #4]
  4012da:	4770      	bx	lr

004012dc <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4012dc:	2301      	movs	r3, #1
  4012de:	fa03 f101 	lsl.w	r1, r3, r1
  4012e2:	6081      	str	r1, [r0, #8]
  4012e4:	4770      	bx	lr

004012e6 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4012e6:	3210      	adds	r2, #16
  4012e8:	2301      	movs	r3, #1
  4012ea:	fa03 f202 	lsl.w	r2, r3, r2
  4012ee:	fa03 f101 	lsl.w	r1, r3, r1
  4012f2:	430a      	orrs	r2, r1
  4012f4:	6142      	str	r2, [r0, #20]
  4012f6:	4770      	bx	lr

004012f8 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
  4012f8:	4a02      	ldr	r2, [pc, #8]	; (401304 <SysTick_Handler+0xc>)
  4012fa:	6813      	ldr	r3, [r2, #0]
  4012fc:	3301      	adds	r3, #1
  4012fe:	6013      	str	r3, [r2, #0]
  401300:	4770      	bx	lr
  401302:	bf00      	nop
  401304:	20400490 	.word	0x20400490

00401308 <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  401308:	2200      	movs	r2, #0
  40130a:	4b06      	ldr	r3, [pc, #24]	; (401324 <time_tick_init+0x1c>)
  40130c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40130e:	4b06      	ldr	r3, [pc, #24]	; (401328 <time_tick_init+0x20>)
  401310:	4906      	ldr	r1, [pc, #24]	; (40132c <time_tick_init+0x24>)
  401312:	6059      	str	r1, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401314:	20e0      	movs	r0, #224	; 0xe0
  401316:	4906      	ldr	r1, [pc, #24]	; (401330 <time_tick_init+0x28>)
  401318:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40131e:	2207      	movs	r2, #7
  401320:	601a      	str	r2, [r3, #0]
  401322:	4770      	bx	lr
  401324:	20400490 	.word	0x20400490
  401328:	e000e010 	.word	0xe000e010
  40132c:	0002327f 	.word	0x0002327f
  401330:	e000ed00 	.word	0xe000ed00

00401334 <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  401334:	4b01      	ldr	r3, [pc, #4]	; (40133c <time_tick_get+0x8>)
  401336:	6818      	ldr	r0, [r3, #0]
}
  401338:	4770      	bx	lr
  40133a:	bf00      	nop
  40133c:	20400490 	.word	0x20400490

00401340 <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
  401340:	4281      	cmp	r1, r0
  401342:	d202      	bcs.n	40134a <time_tick_calc_delay+0xa>
		return (tick_end - tick_start) * (1000 / TICK_US);
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  401344:	1a09      	subs	r1, r1, r0
  401346:	1e48      	subs	r0, r1, #1
	}
}
  401348:	4770      	bx	lr
		return (tick_end - tick_start) * (1000 / TICK_US);
  40134a:	1a08      	subs	r0, r1, r0
  40134c:	4770      	bx	lr
	...

00401350 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401350:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401352:	4810      	ldr	r0, [pc, #64]	; (401394 <sysclk_init+0x44>)
  401354:	4b10      	ldr	r3, [pc, #64]	; (401398 <sysclk_init+0x48>)
  401356:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401358:	213e      	movs	r1, #62	; 0x3e
  40135a:	2000      	movs	r0, #0
  40135c:	4b0f      	ldr	r3, [pc, #60]	; (40139c <sysclk_init+0x4c>)
  40135e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401360:	4c0f      	ldr	r4, [pc, #60]	; (4013a0 <sysclk_init+0x50>)
  401362:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401364:	2800      	cmp	r0, #0
  401366:	d0fc      	beq.n	401362 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401368:	4b0e      	ldr	r3, [pc, #56]	; (4013a4 <sysclk_init+0x54>)
  40136a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40136c:	4a0e      	ldr	r2, [pc, #56]	; (4013a8 <sysclk_init+0x58>)
  40136e:	4b0f      	ldr	r3, [pc, #60]	; (4013ac <sysclk_init+0x5c>)
  401370:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401372:	4c0f      	ldr	r4, [pc, #60]	; (4013b0 <sysclk_init+0x60>)
  401374:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401376:	2800      	cmp	r0, #0
  401378:	d0fc      	beq.n	401374 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40137a:	2002      	movs	r0, #2
  40137c:	4b0d      	ldr	r3, [pc, #52]	; (4013b4 <sysclk_init+0x64>)
  40137e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401380:	2000      	movs	r0, #0
  401382:	4b0d      	ldr	r3, [pc, #52]	; (4013b8 <sysclk_init+0x68>)
  401384:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401386:	4b0d      	ldr	r3, [pc, #52]	; (4013bc <sysclk_init+0x6c>)
  401388:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40138a:	480d      	ldr	r0, [pc, #52]	; (4013c0 <sysclk_init+0x70>)
  40138c:	4b02      	ldr	r3, [pc, #8]	; (401398 <sysclk_init+0x48>)
  40138e:	4798      	blx	r3
  401390:	bd10      	pop	{r4, pc}
  401392:	bf00      	nop
  401394:	11e1a300 	.word	0x11e1a300
  401398:	00401949 	.word	0x00401949
  40139c:	00401461 	.word	0x00401461
  4013a0:	004014b5 	.word	0x004014b5
  4013a4:	004014c5 	.word	0x004014c5
  4013a8:	200b3f01 	.word	0x200b3f01
  4013ac:	400e0600 	.word	0x400e0600
  4013b0:	004014d5 	.word	0x004014d5
  4013b4:	004013c5 	.word	0x004013c5
  4013b8:	004013fd 	.word	0x004013fd
  4013bc:	0040183d 	.word	0x0040183d
  4013c0:	08954400 	.word	0x08954400

004013c4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4013c4:	2803      	cmp	r0, #3
  4013c6:	d011      	beq.n	4013ec <pmc_mck_set_division+0x28>
  4013c8:	2804      	cmp	r0, #4
  4013ca:	d012      	beq.n	4013f2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013cc:	2802      	cmp	r0, #2
  4013ce:	bf0c      	ite	eq
  4013d0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4013d4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013d6:	4a08      	ldr	r2, [pc, #32]	; (4013f8 <pmc_mck_set_division+0x34>)
  4013d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4013de:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4013e0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013e4:	f013 0f08 	tst.w	r3, #8
  4013e8:	d0fb      	beq.n	4013e2 <pmc_mck_set_division+0x1e>
}
  4013ea:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013ec:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4013f0:	e7f1      	b.n	4013d6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4013f6:	e7ee      	b.n	4013d6 <pmc_mck_set_division+0x12>
  4013f8:	400e0600 	.word	0x400e0600

004013fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013fc:	4a17      	ldr	r2, [pc, #92]	; (40145c <pmc_switch_mck_to_pllack+0x60>)
  4013fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401404:	4318      	orrs	r0, r3
  401406:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401408:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40140a:	f013 0f08 	tst.w	r3, #8
  40140e:	d10a      	bne.n	401426 <pmc_switch_mck_to_pllack+0x2a>
  401410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401414:	4911      	ldr	r1, [pc, #68]	; (40145c <pmc_switch_mck_to_pllack+0x60>)
  401416:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401418:	f012 0f08 	tst.w	r2, #8
  40141c:	d103      	bne.n	401426 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40141e:	3b01      	subs	r3, #1
  401420:	d1f9      	bne.n	401416 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401422:	2001      	movs	r0, #1
  401424:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401426:	4a0d      	ldr	r2, [pc, #52]	; (40145c <pmc_switch_mck_to_pllack+0x60>)
  401428:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40142a:	f023 0303 	bic.w	r3, r3, #3
  40142e:	f043 0302 	orr.w	r3, r3, #2
  401432:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401434:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401436:	f013 0f08 	tst.w	r3, #8
  40143a:	d10a      	bne.n	401452 <pmc_switch_mck_to_pllack+0x56>
  40143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401440:	4906      	ldr	r1, [pc, #24]	; (40145c <pmc_switch_mck_to_pllack+0x60>)
  401442:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401444:	f012 0f08 	tst.w	r2, #8
  401448:	d105      	bne.n	401456 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40144a:	3b01      	subs	r3, #1
  40144c:	d1f9      	bne.n	401442 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40144e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401450:	4770      	bx	lr
	return 0;
  401452:	2000      	movs	r0, #0
  401454:	4770      	bx	lr
  401456:	2000      	movs	r0, #0
  401458:	4770      	bx	lr
  40145a:	bf00      	nop
  40145c:	400e0600 	.word	0x400e0600

00401460 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401460:	b9a0      	cbnz	r0, 40148c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401462:	480e      	ldr	r0, [pc, #56]	; (40149c <pmc_switch_mainck_to_xtal+0x3c>)
  401464:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401466:	0209      	lsls	r1, r1, #8
  401468:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40146a:	4a0d      	ldr	r2, [pc, #52]	; (4014a0 <pmc_switch_mainck_to_xtal+0x40>)
  40146c:	401a      	ands	r2, r3
  40146e:	4b0d      	ldr	r3, [pc, #52]	; (4014a4 <pmc_switch_mainck_to_xtal+0x44>)
  401470:	4313      	orrs	r3, r2
  401472:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401474:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401476:	4602      	mov	r2, r0
  401478:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40147a:	f013 0f01 	tst.w	r3, #1
  40147e:	d0fb      	beq.n	401478 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401480:	4a06      	ldr	r2, [pc, #24]	; (40149c <pmc_switch_mainck_to_xtal+0x3c>)
  401482:	6a11      	ldr	r1, [r2, #32]
  401484:	4b08      	ldr	r3, [pc, #32]	; (4014a8 <pmc_switch_mainck_to_xtal+0x48>)
  401486:	430b      	orrs	r3, r1
  401488:	6213      	str	r3, [r2, #32]
  40148a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40148c:	4903      	ldr	r1, [pc, #12]	; (40149c <pmc_switch_mainck_to_xtal+0x3c>)
  40148e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401490:	4a06      	ldr	r2, [pc, #24]	; (4014ac <pmc_switch_mainck_to_xtal+0x4c>)
  401492:	401a      	ands	r2, r3
  401494:	4b06      	ldr	r3, [pc, #24]	; (4014b0 <pmc_switch_mainck_to_xtal+0x50>)
  401496:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401498:	620b      	str	r3, [r1, #32]
  40149a:	4770      	bx	lr
  40149c:	400e0600 	.word	0x400e0600
  4014a0:	ffc8fffc 	.word	0xffc8fffc
  4014a4:	00370001 	.word	0x00370001
  4014a8:	01370000 	.word	0x01370000
  4014ac:	fec8fffc 	.word	0xfec8fffc
  4014b0:	01370002 	.word	0x01370002

004014b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4014b4:	4b02      	ldr	r3, [pc, #8]	; (4014c0 <pmc_osc_is_ready_mainck+0xc>)
  4014b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	400e0600 	.word	0x400e0600

004014c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4014c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4014c8:	4b01      	ldr	r3, [pc, #4]	; (4014d0 <pmc_disable_pllack+0xc>)
  4014ca:	629a      	str	r2, [r3, #40]	; 0x28
  4014cc:	4770      	bx	lr
  4014ce:	bf00      	nop
  4014d0:	400e0600 	.word	0x400e0600

004014d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4014d4:	4b02      	ldr	r3, [pc, #8]	; (4014e0 <pmc_is_locked_pllack+0xc>)
  4014d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014d8:	f000 0002 	and.w	r0, r0, #2
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop
  4014e0:	400e0600 	.word	0x400e0600

004014e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4014e4:	283f      	cmp	r0, #63	; 0x3f
  4014e6:	d81e      	bhi.n	401526 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4014e8:	281f      	cmp	r0, #31
  4014ea:	d80c      	bhi.n	401506 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4014ec:	4b11      	ldr	r3, [pc, #68]	; (401534 <pmc_enable_periph_clk+0x50>)
  4014ee:	699a      	ldr	r2, [r3, #24]
  4014f0:	2301      	movs	r3, #1
  4014f2:	4083      	lsls	r3, r0
  4014f4:	4393      	bics	r3, r2
  4014f6:	d018      	beq.n	40152a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4014f8:	2301      	movs	r3, #1
  4014fa:	fa03 f000 	lsl.w	r0, r3, r0
  4014fe:	4b0d      	ldr	r3, [pc, #52]	; (401534 <pmc_enable_periph_clk+0x50>)
  401500:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401502:	2000      	movs	r0, #0
  401504:	4770      	bx	lr
		ul_id -= 32;
  401506:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401508:	4b0a      	ldr	r3, [pc, #40]	; (401534 <pmc_enable_periph_clk+0x50>)
  40150a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40150e:	2301      	movs	r3, #1
  401510:	4083      	lsls	r3, r0
  401512:	4393      	bics	r3, r2
  401514:	d00b      	beq.n	40152e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401516:	2301      	movs	r3, #1
  401518:	fa03 f000 	lsl.w	r0, r3, r0
  40151c:	4b05      	ldr	r3, [pc, #20]	; (401534 <pmc_enable_periph_clk+0x50>)
  40151e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401522:	2000      	movs	r0, #0
  401524:	4770      	bx	lr
		return 1;
  401526:	2001      	movs	r0, #1
  401528:	4770      	bx	lr
	return 0;
  40152a:	2000      	movs	r0, #0
  40152c:	4770      	bx	lr
  40152e:	2000      	movs	r0, #0
}
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	400e0600 	.word	0x400e0600

00401538 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401538:	4b10      	ldr	r3, [pc, #64]	; (40157c <twihs_set_speed+0x44>)
  40153a:	4299      	cmp	r1, r3
  40153c:	d81b      	bhi.n	401576 <twihs_set_speed+0x3e>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40153e:	0049      	lsls	r1, r1, #1
  401540:	fbb2 f2f1 	udiv	r2, r2, r1
  401544:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401546:	2aff      	cmp	r2, #255	; 0xff
  401548:	d913      	bls.n	401572 <twihs_set_speed+0x3a>
  40154a:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  40154c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40154e:	0852      	lsrs	r2, r2, #1
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401550:	2aff      	cmp	r2, #255	; 0xff
  401552:	d901      	bls.n	401558 <twihs_set_speed+0x20>
  401554:	2b06      	cmp	r3, #6
  401556:	d9f9      	bls.n	40154c <twihs_set_speed+0x14>
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401558:	b2d1      	uxtb	r1, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  40155a:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40155e:	0212      	lsls	r2, r2, #8
  401560:	b292      	uxth	r2, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  401562:	430a      	orrs	r2, r1
  401564:	041b      	lsls	r3, r3, #16
  401566:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40156a:	4313      	orrs	r3, r2
	p_twihs->TWIHS_CWGR =
  40156c:	6103      	str	r3, [r0, #16]

	return PASS;
  40156e:	2000      	movs	r0, #0
  401570:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401572:	2300      	movs	r3, #0
  401574:	e7f0      	b.n	401558 <twihs_set_speed+0x20>
		return FAIL;
  401576:	2001      	movs	r0, #1
}
  401578:	4770      	bx	lr
  40157a:	bf00      	nop
  40157c:	00061a80 	.word	0x00061a80

00401580 <twihs_master_init>:
{
  401580:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401582:	f04f 32ff 	mov.w	r2, #4294967295
  401586:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401588:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40158a:	2280      	movs	r2, #128	; 0x80
  40158c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40158e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401590:	2208      	movs	r2, #8
  401592:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401594:	2220      	movs	r2, #32
  401596:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401598:	2204      	movs	r2, #4
  40159a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  40159c:	680a      	ldr	r2, [r1, #0]
  40159e:	6849      	ldr	r1, [r1, #4]
  4015a0:	4b03      	ldr	r3, [pc, #12]	; (4015b0 <twihs_master_init+0x30>)
  4015a2:	4798      	blx	r3
}
  4015a4:	2801      	cmp	r0, #1
  4015a6:	bf14      	ite	ne
  4015a8:	2000      	movne	r0, #0
  4015aa:	2001      	moveq	r0, #1
  4015ac:	bd08      	pop	{r3, pc}
  4015ae:	bf00      	nop
  4015b0:	00401539 	.word	0x00401539

004015b4 <twihs_master_write>:
	uint32_t cnt = p_packet->length;
  4015b4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4015b6:	2b00      	cmp	r3, #0
  4015b8:	d04d      	beq.n	401656 <twihs_master_write+0xa2>
{
  4015ba:	b470      	push	{r4, r5, r6}
  4015bc:	b083      	sub	sp, #12
	uint8_t *buffer = p_packet->buffer;
  4015be:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0; 
  4015c0:	2600      	movs	r6, #0
  4015c2:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4015c4:	7c0a      	ldrb	r2, [r1, #16]
  4015c6:	0412      	lsls	r2, r2, #16
  4015c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4015cc:	684d      	ldr	r5, [r1, #4]
  4015ce:	022d      	lsls	r5, r5, #8
  4015d0:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4015d4:	432a      	orrs	r2, r5
  4015d6:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4015d8:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015da:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4015dc:	b15d      	cbz	r5, 4015f6 <twihs_master_write+0x42>
	val = addr[0];
  4015de:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4015e0:	2d01      	cmp	r5, #1
  4015e2:	dd02      	ble.n	4015ea <twihs_master_write+0x36>
		val |= addr[1];
  4015e4:	784e      	ldrb	r6, [r1, #1]
  4015e6:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4015ea:	2d02      	cmp	r5, #2
  4015ec:	dd04      	ble.n	4015f8 <twihs_master_write+0x44>
		val |= addr[2];
  4015ee:	7889      	ldrb	r1, [r1, #2]
  4015f0:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4015f4:	e000      	b.n	4015f8 <twihs_master_write+0x44>
		return 0;
  4015f6:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015f8:	60c2      	str	r2, [r0, #12]
  4015fa:	e004      	b.n	401606 <twihs_master_write+0x52>
		p_twihs->TWIHS_THR = *buffer++;
  4015fc:	f814 2b01 	ldrb.w	r2, [r4], #1
  401600:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401602:	3b01      	subs	r3, #1
  401604:	d015      	beq.n	401632 <twihs_master_write+0x7e>
		status = p_twihs->TWIHS_SR;
  401606:	6a02      	ldr	r2, [r0, #32]
  401608:	9201      	str	r2, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  40160a:	9a01      	ldr	r2, [sp, #4]
  40160c:	f412 7f80 	tst.w	r2, #256	; 0x100
  401610:	d125      	bne.n	40165e <twihs_master_write+0xaa>
		if (!(status & TWIHS_SR_TXRDY)) {
  401612:	9a01      	ldr	r2, [sp, #4]
  401614:	f012 0f04 	tst.w	r2, #4
  401618:	d1f0      	bne.n	4015fc <twihs_master_write+0x48>
		status = p_twihs->TWIHS_SR;
  40161a:	6a02      	ldr	r2, [r0, #32]
  40161c:	9201      	str	r2, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  40161e:	9a01      	ldr	r2, [sp, #4]
  401620:	f412 7f80 	tst.w	r2, #256	; 0x100
  401624:	d119      	bne.n	40165a <twihs_master_write+0xa6>
		if (!(status & TWIHS_SR_TXRDY)) {
  401626:	9a01      	ldr	r2, [sp, #4]
  401628:	f012 0f04 	tst.w	r2, #4
  40162c:	d1e6      	bne.n	4015fc <twihs_master_write+0x48>
	while (cnt > 0) {
  40162e:	2b00      	cmp	r3, #0
  401630:	d1f3      	bne.n	40161a <twihs_master_write+0x66>
		status = p_twihs->TWIHS_SR;
  401632:	6a03      	ldr	r3, [r0, #32]
  401634:	9301      	str	r3, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401636:	9b01      	ldr	r3, [sp, #4]
  401638:	f413 7f80 	tst.w	r3, #256	; 0x100
  40163c:	d113      	bne.n	401666 <twihs_master_write+0xb2>
		if (status & TWIHS_SR_TXRDY) {
  40163e:	9b01      	ldr	r3, [sp, #4]
  401640:	f013 0f04 	tst.w	r3, #4
  401644:	d0f5      	beq.n	401632 <twihs_master_write+0x7e>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401646:	2302      	movs	r3, #2
  401648:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40164a:	6a03      	ldr	r3, [r0, #32]
  40164c:	f013 0f01 	tst.w	r3, #1
  401650:	d0fb      	beq.n	40164a <twihs_master_write+0x96>
	return TWIHS_SUCCESS;
  401652:	2000      	movs	r0, #0
  401654:	e004      	b.n	401660 <twihs_master_write+0xac>
		return TWIHS_INVALID_ARGUMENT;
  401656:	2001      	movs	r0, #1
  401658:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40165a:	2005      	movs	r0, #5
  40165c:	e000      	b.n	401660 <twihs_master_write+0xac>
  40165e:	2005      	movs	r0, #5
}
  401660:	b003      	add	sp, #12
  401662:	bc70      	pop	{r4, r5, r6}
  401664:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401666:	2005      	movs	r0, #5
  401668:	e7fa      	b.n	401660 <twihs_master_write+0xac>

0040166a <xdmac_configure_transfer>:
  40166a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40166e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401670:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401672:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401674:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401676:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401678:	6813      	ldr	r3, [r2, #0]
  40167a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40167e:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401680:	6913      	ldr	r3, [r2, #16]
  401682:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401686:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401688:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  40168a:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  40168c:	6993      	ldr	r3, [r2, #24]
  40168e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401692:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401696:	69d3      	ldr	r3, [r2, #28]
  401698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40169c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4016a0:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4016a2:	678b      	str	r3, [r1, #120]	; 0x78
  4016a4:	4770      	bx	lr
	...

004016a8 <board_init>:
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4016a8:	4b33      	ldr	r3, [pc, #204]	; (401778 <board_init+0xd0>)
  4016aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016ae:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4016b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4016b4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4016b6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4016b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4016bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016be:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4016c2:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4016c4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016c6:	4311      	orrs	r1, r2
  4016c8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016ca:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4016d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4016de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016e0:	4311      	orrs	r1, r2
  4016e2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4016e4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016e6:	4311      	orrs	r1, r2
  4016e8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016ea:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4016ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4016f0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4016f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4016f6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4016f8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4016fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4016fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401700:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  401704:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401706:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401708:	4311      	orrs	r1, r2
  40170a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40170c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40170e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401712:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401718:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40171a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40171c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401720:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401722:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401726:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401728:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40172a:	4311      	orrs	r1, r2
  40172c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40172e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401730:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401734:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40173a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40173c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40173e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401742:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401744:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401748:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40174a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40174c:	4311      	orrs	r1, r2
  40174e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401750:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401756:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40175c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40175e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401764:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401766:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40176a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40176c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40176e:	4311      	orrs	r1, r2
  401770:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401772:	605a      	str	r2, [r3, #4]
  401774:	4770      	bx	lr
  401776:	bf00      	nop
  401778:	400e0e00 	.word	0x400e0e00

0040177c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40177c:	e7fe      	b.n	40177c <Dummy_Handler>
	...

00401780 <Reset_Handler>:
{
  401780:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  401782:	4b23      	ldr	r3, [pc, #140]	; (401810 <Reset_Handler+0x90>)
  401784:	4a23      	ldr	r2, [pc, #140]	; (401814 <Reset_Handler+0x94>)
  401786:	429a      	cmp	r2, r3
  401788:	d010      	beq.n	4017ac <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  40178a:	4b23      	ldr	r3, [pc, #140]	; (401818 <Reset_Handler+0x98>)
  40178c:	4a20      	ldr	r2, [pc, #128]	; (401810 <Reset_Handler+0x90>)
  40178e:	429a      	cmp	r2, r3
  401790:	d20c      	bcs.n	4017ac <Reset_Handler+0x2c>
  401792:	3b01      	subs	r3, #1
  401794:	1a9b      	subs	r3, r3, r2
  401796:	f023 0303 	bic.w	r3, r3, #3
  40179a:	3304      	adds	r3, #4
  40179c:	4413      	add	r3, r2
  40179e:	491d      	ldr	r1, [pc, #116]	; (401814 <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
  4017a0:	f851 0b04 	ldr.w	r0, [r1], #4
  4017a4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4017a8:	429a      	cmp	r2, r3
  4017aa:	d1f9      	bne.n	4017a0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4017ac:	4b1b      	ldr	r3, [pc, #108]	; (40181c <Reset_Handler+0x9c>)
  4017ae:	4a1c      	ldr	r2, [pc, #112]	; (401820 <Reset_Handler+0xa0>)
  4017b0:	429a      	cmp	r2, r3
  4017b2:	d20a      	bcs.n	4017ca <Reset_Handler+0x4a>
  4017b4:	3b01      	subs	r3, #1
  4017b6:	1a9b      	subs	r3, r3, r2
  4017b8:	f023 0303 	bic.w	r3, r3, #3
  4017bc:	3304      	adds	r3, #4
  4017be:	4413      	add	r3, r2
                *pDest++ = 0;
  4017c0:	2100      	movs	r1, #0
  4017c2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4017c6:	4293      	cmp	r3, r2
  4017c8:	d1fb      	bne.n	4017c2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017ca:	4a16      	ldr	r2, [pc, #88]	; (401824 <Reset_Handler+0xa4>)
  4017cc:	4b16      	ldr	r3, [pc, #88]	; (401828 <Reset_Handler+0xa8>)
  4017ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017d2:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017d4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  4017d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4017da:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4017de:	2100      	movs	r1, #0
  4017e0:	4a12      	ldr	r2, [pc, #72]	; (40182c <Reset_Handler+0xac>)
  4017e2:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4017e4:	4912      	ldr	r1, [pc, #72]	; (401830 <Reset_Handler+0xb0>)
  4017e6:	680a      	ldr	r2, [r1, #0]
  4017e8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4017ec:	600a      	str	r2, [r1, #0]
  __ASM volatile ("dsb");
  4017ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4017f2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017f6:	b92b      	cbnz	r3, 401804 <Reset_Handler+0x84>
		cpu_irq_enable();
  4017f8:	2201      	movs	r2, #1
  4017fa:	4b0c      	ldr	r3, [pc, #48]	; (40182c <Reset_Handler+0xac>)
  4017fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4017fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401802:	b662      	cpsie	i
        __libc_init_array();
  401804:	4b0b      	ldr	r3, [pc, #44]	; (401834 <Reset_Handler+0xb4>)
  401806:	4798      	blx	r3
        main();
  401808:	4b0b      	ldr	r3, [pc, #44]	; (401838 <Reset_Handler+0xb8>)
  40180a:	4798      	blx	r3
  40180c:	e7fe      	b.n	40180c <Reset_Handler+0x8c>
  40180e:	bf00      	nop
  401810:	20400000 	.word	0x20400000
  401814:	0040273c 	.word	0x0040273c
  401818:	2040043c 	.word	0x2040043c
  40181c:	2044b748 	.word	0x2044b748
  401820:	20400440 	.word	0x20400440
  401824:	e000ed00 	.word	0xe000ed00
  401828:	00400000 	.word	0x00400000
  40182c:	20400000 	.word	0x20400000
  401830:	e000ed88 	.word	0xe000ed88
  401834:	00402441 	.word	0x00402441
  401838:	0040215d 	.word	0x0040215d

0040183c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40183c:	4b3b      	ldr	r3, [pc, #236]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401840:	f003 0303 	and.w	r3, r3, #3
  401844:	2b01      	cmp	r3, #1
  401846:	d01d      	beq.n	401884 <SystemCoreClockUpdate+0x48>
  401848:	b183      	cbz	r3, 40186c <SystemCoreClockUpdate+0x30>
  40184a:	2b02      	cmp	r3, #2
  40184c:	d036      	beq.n	4018bc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40184e:	4b37      	ldr	r3, [pc, #220]	; (40192c <SystemCoreClockUpdate+0xf0>)
  401850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401852:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401856:	2b70      	cmp	r3, #112	; 0x70
  401858:	d05f      	beq.n	40191a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40185a:	4b34      	ldr	r3, [pc, #208]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40185c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40185e:	4934      	ldr	r1, [pc, #208]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401860:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401864:	680b      	ldr	r3, [r1, #0]
  401866:	40d3      	lsrs	r3, r2
  401868:	600b      	str	r3, [r1, #0]
  40186a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40186c:	4b31      	ldr	r3, [pc, #196]	; (401934 <SystemCoreClockUpdate+0xf8>)
  40186e:	695b      	ldr	r3, [r3, #20]
  401870:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401874:	bf14      	ite	ne
  401876:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40187a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40187e:	4b2c      	ldr	r3, [pc, #176]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401880:	601a      	str	r2, [r3, #0]
  401882:	e7e4      	b.n	40184e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401884:	4b29      	ldr	r3, [pc, #164]	; (40192c <SystemCoreClockUpdate+0xf0>)
  401886:	6a1b      	ldr	r3, [r3, #32]
  401888:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40188c:	d003      	beq.n	401896 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40188e:	4a2a      	ldr	r2, [pc, #168]	; (401938 <SystemCoreClockUpdate+0xfc>)
  401890:	4b27      	ldr	r3, [pc, #156]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401892:	601a      	str	r2, [r3, #0]
  401894:	e7db      	b.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401896:	4a29      	ldr	r2, [pc, #164]	; (40193c <SystemCoreClockUpdate+0x100>)
  401898:	4b25      	ldr	r3, [pc, #148]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40189a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40189c:	4b23      	ldr	r3, [pc, #140]	; (40192c <SystemCoreClockUpdate+0xf0>)
  40189e:	6a1b      	ldr	r3, [r3, #32]
  4018a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018a4:	2b10      	cmp	r3, #16
  4018a6:	d005      	beq.n	4018b4 <SystemCoreClockUpdate+0x78>
  4018a8:	2b20      	cmp	r3, #32
  4018aa:	d1d0      	bne.n	40184e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4018ac:	4a22      	ldr	r2, [pc, #136]	; (401938 <SystemCoreClockUpdate+0xfc>)
  4018ae:	4b20      	ldr	r3, [pc, #128]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018b0:	601a      	str	r2, [r3, #0]
          break;
  4018b2:	e7cc      	b.n	40184e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4018b4:	4a22      	ldr	r2, [pc, #136]	; (401940 <SystemCoreClockUpdate+0x104>)
  4018b6:	4b1e      	ldr	r3, [pc, #120]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018b8:	601a      	str	r2, [r3, #0]
          break;
  4018ba:	e7c8      	b.n	40184e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018bc:	4b1b      	ldr	r3, [pc, #108]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018be:	6a1b      	ldr	r3, [r3, #32]
  4018c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018c4:	d016      	beq.n	4018f4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018c6:	4a1c      	ldr	r2, [pc, #112]	; (401938 <SystemCoreClockUpdate+0xfc>)
  4018c8:	4b19      	ldr	r3, [pc, #100]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018ca:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4018cc:	4b17      	ldr	r3, [pc, #92]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018d0:	f003 0303 	and.w	r3, r3, #3
  4018d4:	2b02      	cmp	r3, #2
  4018d6:	d1ba      	bne.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d8:	4a14      	ldr	r2, [pc, #80]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018da:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4018de:	4814      	ldr	r0, [pc, #80]	; (401930 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018e0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4018e4:	6803      	ldr	r3, [r0, #0]
  4018e6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018ea:	b2d2      	uxtb	r2, r2
  4018ec:	fbb3 f3f2 	udiv	r3, r3, r2
  4018f0:	6003      	str	r3, [r0, #0]
  4018f2:	e7ac      	b.n	40184e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018f4:	4a11      	ldr	r2, [pc, #68]	; (40193c <SystemCoreClockUpdate+0x100>)
  4018f6:	4b0e      	ldr	r3, [pc, #56]	; (401930 <SystemCoreClockUpdate+0xf4>)
  4018f8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018fa:	4b0c      	ldr	r3, [pc, #48]	; (40192c <SystemCoreClockUpdate+0xf0>)
  4018fc:	6a1b      	ldr	r3, [r3, #32]
  4018fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401902:	2b10      	cmp	r3, #16
  401904:	d005      	beq.n	401912 <SystemCoreClockUpdate+0xd6>
  401906:	2b20      	cmp	r3, #32
  401908:	d1e0      	bne.n	4018cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40190a:	4a0b      	ldr	r2, [pc, #44]	; (401938 <SystemCoreClockUpdate+0xfc>)
  40190c:	4b08      	ldr	r3, [pc, #32]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40190e:	601a      	str	r2, [r3, #0]
          break;
  401910:	e7dc      	b.n	4018cc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401912:	4a0b      	ldr	r2, [pc, #44]	; (401940 <SystemCoreClockUpdate+0x104>)
  401914:	4b06      	ldr	r3, [pc, #24]	; (401930 <SystemCoreClockUpdate+0xf4>)
  401916:	601a      	str	r2, [r3, #0]
          break;
  401918:	e7d8      	b.n	4018cc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40191a:	4a05      	ldr	r2, [pc, #20]	; (401930 <SystemCoreClockUpdate+0xf4>)
  40191c:	6813      	ldr	r3, [r2, #0]
  40191e:	4909      	ldr	r1, [pc, #36]	; (401944 <SystemCoreClockUpdate+0x108>)
  401920:	fba1 1303 	umull	r1, r3, r1, r3
  401924:	085b      	lsrs	r3, r3, #1
  401926:	6013      	str	r3, [r2, #0]
  401928:	4770      	bx	lr
  40192a:	bf00      	nop
  40192c:	400e0600 	.word	0x400e0600
  401930:	20400004 	.word	0x20400004
  401934:	400e1810 	.word	0x400e1810
  401938:	00b71b00 	.word	0x00b71b00
  40193c:	003d0900 	.word	0x003d0900
  401940:	007a1200 	.word	0x007a1200
  401944:	aaaaaaab 	.word	0xaaaaaaab

00401948 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401948:	4b12      	ldr	r3, [pc, #72]	; (401994 <system_init_flash+0x4c>)
  40194a:	4298      	cmp	r0, r3
  40194c:	d911      	bls.n	401972 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40194e:	4b12      	ldr	r3, [pc, #72]	; (401998 <system_init_flash+0x50>)
  401950:	4298      	cmp	r0, r3
  401952:	d913      	bls.n	40197c <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401954:	4b11      	ldr	r3, [pc, #68]	; (40199c <system_init_flash+0x54>)
  401956:	4298      	cmp	r0, r3
  401958:	d914      	bls.n	401984 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40195a:	4b11      	ldr	r3, [pc, #68]	; (4019a0 <system_init_flash+0x58>)
  40195c:	4298      	cmp	r0, r3
  40195e:	d915      	bls.n	40198c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401960:	4b10      	ldr	r3, [pc, #64]	; (4019a4 <system_init_flash+0x5c>)
  401962:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401964:	bf94      	ite	ls
  401966:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40196a:	4a0f      	ldrhi	r2, [pc, #60]	; (4019a8 <system_init_flash+0x60>)
  40196c:	4b0f      	ldr	r3, [pc, #60]	; (4019ac <system_init_flash+0x64>)
  40196e:	601a      	str	r2, [r3, #0]
  401970:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401972:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401976:	4b0d      	ldr	r3, [pc, #52]	; (4019ac <system_init_flash+0x64>)
  401978:	601a      	str	r2, [r3, #0]
  40197a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40197c:	4a0c      	ldr	r2, [pc, #48]	; (4019b0 <system_init_flash+0x68>)
  40197e:	4b0b      	ldr	r3, [pc, #44]	; (4019ac <system_init_flash+0x64>)
  401980:	601a      	str	r2, [r3, #0]
  401982:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401984:	4a0b      	ldr	r2, [pc, #44]	; (4019b4 <system_init_flash+0x6c>)
  401986:	4b09      	ldr	r3, [pc, #36]	; (4019ac <system_init_flash+0x64>)
  401988:	601a      	str	r2, [r3, #0]
  40198a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40198c:	4a0a      	ldr	r2, [pc, #40]	; (4019b8 <system_init_flash+0x70>)
  40198e:	4b07      	ldr	r3, [pc, #28]	; (4019ac <system_init_flash+0x64>)
  401990:	601a      	str	r2, [r3, #0]
  401992:	4770      	bx	lr
  401994:	01312cff 	.word	0x01312cff
  401998:	026259ff 	.word	0x026259ff
  40199c:	039386ff 	.word	0x039386ff
  4019a0:	04c4b3ff 	.word	0x04c4b3ff
  4019a4:	05f5e0ff 	.word	0x05f5e0ff
  4019a8:	04000500 	.word	0x04000500
  4019ac:	400e0c00 	.word	0x400e0c00
  4019b0:	04000100 	.word	0x04000100
  4019b4:	04000200 	.word	0x04000200
  4019b8:	04000300 	.word	0x04000300

004019bc <enableSourceClk>:
		base->PIO_PUDR = mask;
  4019bc:	4b0e      	ldr	r3, [pc, #56]	; (4019f8 <enableSourceClk+0x3c>)
  4019be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4019c2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4019c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4019c8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4019ca:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4019cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4019d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4019d2:	4311      	orrs	r1, r2
  4019d4:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4019d6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4019d8:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  4019dc:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4019de:	605a      	str	r2, [r3, #4]
	//Sets PCK1 as clock output using Main Clocks
	//pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);//Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  4019e0:	4a06      	ldr	r2, [pc, #24]	; (4019fc <enableSourceClk+0x40>)
  4019e2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4019e6:	6013      	str	r3, [r2, #0]
	
	#ifdef EV76C454
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 48MHz
	#endif
	#ifdef EV76C454_SUBSAMP //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(2); //Should make output = 48MHz
  4019e8:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4019ea:	f023 0327 	bic.w	r3, r3, #39	; 0x27
  4019ee:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  4019f2:	6453      	str	r3, [r2, #68]	; 0x44
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	400e0e00 	.word	0x400e0e00
  4019fc:	400e0600 	.word	0x400e0600

00401a00 <imagingSensorConfigure>:
	//Sub-sampling RO1
	reg = 0x1A;
	value = (8<<8)|(8<<0); //2 x 2 down sample
	spiWrite(reg,value);
}
void imagingSensorConfigure() {
  401a00:	b570      	push	{r4, r5, r6, lr}
	//bit 3: Frame Enable Polarity, 0->FEN is active low
	//bit 2: Line Enable Polarity, 0->LEN is active low
	//bit 1: Data activity when FEN or LEN are inactive, 1->No activity
	//bit 0: LEN activity when FEN is inactive, 0->passes all calced LEN
	//default->0b00100010
	packetCMOS.addr[0] = 0x0A; //Synchro
  401a02:	4b75      	ldr	r3, [pc, #468]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401a04:	220a      	movs	r2, #10
  401a06:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = 0b01101111; 
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = 0b10101111; //clock div by 4
  401a08:	4a74      	ldr	r2, [pc, #464]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401a0a:	21af      	movs	r1, #175	; 0xaf
  401a0c:	7011      	strb	r1, [r2, #0]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a0e:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401a10:	2201      	movs	r2, #1
  401a12:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401a14:	461e      	mov	r6, r3
  401a16:	4d72      	ldr	r5, [pc, #456]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401a18:	4c72      	ldr	r4, [pc, #456]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401a1a:	4631      	mov	r1, r6
  401a1c:	4628      	mov	r0, r5
  401a1e:	47a0      	blx	r4
  401a20:	2800      	cmp	r0, #0
  401a22:	d1fa      	bne.n	401a1a <imagingSensorConfigure+0x1a>
	////bit 3: 0-> No horizontal flip
	////bit 0,1,2: Subsample factor = 2^value
	////default->0x00;

	#ifdef EV76C454_SUBSAMP
		packetCMOS.addr[0] = 0x0B; //frame_config
  401a24:	4b6c      	ldr	r3, [pc, #432]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401a26:	220b      	movs	r2, #11
  401a28:	701a      	strb	r2, [r3, #0]
		i2cbuf[0] = 0x01; //Subsamp by 2
  401a2a:	496c      	ldr	r1, [pc, #432]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401a2c:	2201      	movs	r2, #1
  401a2e:	700a      	strb	r2, [r1, #0]
		packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a30:	6099      	str	r1, [r3, #8]
		packetCMOS.length = 1;
  401a32:	60da      	str	r2, [r3, #12]
		while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401a34:	461e      	mov	r6, r3
  401a36:	4d6a      	ldr	r5, [pc, #424]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401a38:	4c6a      	ldr	r4, [pc, #424]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401a3a:	4631      	mov	r1, r6
  401a3c:	4628      	mov	r0, r5
  401a3e:	47a0      	blx	r4
  401a40:	2800      	cmp	r0, #0
  401a42:	d1fa      	bne.n	401a3a <imagingSensorConfigure+0x3a>
	//Software step = (800 x Master clock) ? 16.7 us @ 48 MHz if
	//div_clk=00
	//Real duration: The integration time is rounded at the nearest
	//number of lines above the programmed time.
	//default:0x012C (d300) -> I think this is ~5ms, I think 2000 should be 30FPS
	packetCMOS.addr[0] = 0x80;//frame_tint
  401a44:	4b64      	ldr	r3, [pc, #400]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401a46:	2280      	movs	r2, #128	; 0x80
  401a48:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = (2000>>8)&0x00FF;
		i2cbuf[1] = (2000)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = (3000>>8)&0x00FF; //Clock div shouldn't effect total value here
  401a4a:	4a64      	ldr	r2, [pc, #400]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401a4c:	210b      	movs	r1, #11
  401a4e:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (3000)&0x00FF;		//3000 should result in about 20FPS
  401a50:	21b8      	movs	r1, #184	; 0xb8
  401a52:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a54:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401a56:	2202      	movs	r2, #2
  401a58:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401a5a:	461e      	mov	r6, r3
  401a5c:	4d60      	ldr	r5, [pc, #384]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401a5e:	4c61      	ldr	r4, [pc, #388]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401a60:	4631      	mov	r1, r6
  401a62:	4628      	mov	r0, r5
  401a64:	47a0      	blx	r4
  401a66:	2800      	cmp	r0, #0
  401a68:	d1fa      	bne.n	401a60 <imagingSensorConfigure+0x60>
	}
	// ---------- frame_twait --------
	//default 0x0000 (no wait), max 0x0FFF (68,2ms)
	packetCMOS.addr[0] = 0x81;//frame_twait
  401a6a:	4b5b      	ldr	r3, [pc, #364]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401a6c:	2281      	movs	r2, #129	; 0x81
  401a6e:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = (100>>8)&0x00FF; //value should only really matter if integration time is shorter than data transmission time
  401a70:	4a5a      	ldr	r2, [pc, #360]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401a72:	2100      	movs	r1, #0
  401a74:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (100)&0x00FF;
  401a76:	2164      	movs	r1, #100	; 0x64
  401a78:	7051      	strb	r1, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a7a:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401a7c:	2202      	movs	r2, #2
  401a7e:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401a80:	461e      	mov	r6, r3
  401a82:	4d57      	ldr	r5, [pc, #348]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401a84:	4c57      	ldr	r4, [pc, #348]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401a86:	4631      	mov	r1, r6
  401a88:	4628      	mov	r0, r5
  401a8a:	47a0      	blx	r4
  401a8c:	2800      	cmp	r0, #0
  401a8e:	d1fa      	bne.n	401a86 <imagingSensorConfigure+0x86>
	////---- ---- -000 0000 frame_gain_digital
	////bit 0-6: digital gain, applied after the offset substraction digital gain = 1 + dig_gain / 32
	////Min 0000000 digital gain = 1
	////Max 1111111 digital gain = 4.97
	////default: 0x0000
	packetCMOS.addr[0] = 0x82;//frame_gain
  401a90:	2282      	movs	r2, #130	; 0x82
  401a92:	4b51      	ldr	r3, [pc, #324]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401a94:	701a      	strb	r2, [r3, #0]
	switch (gain){
  401a96:	4b54      	ldr	r3, [pc, #336]	; (401be8 <imagingSensorConfigure+0x1e8>)
  401a98:	681b      	ldr	r3, [r3, #0]
  401a9a:	3b01      	subs	r3, #1
  401a9c:	2b07      	cmp	r3, #7
  401a9e:	f200 8096 	bhi.w	401bce <imagingSensorConfigure+0x1ce>
  401aa2:	e8df f003 	tbb	[pc, r3]
  401aa6:	8204      	.short	0x8204
  401aa8:	94948894 	.word	0x94948894
  401aac:	8e94      	.short	0x8e94
		case (1):
			i2cbuf[0] = (0x0000>>8)&0x00FF;
  401aae:	4b4b      	ldr	r3, [pc, #300]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401ab0:	2200      	movs	r2, #0
  401ab2:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0000)&0x00FF;
  401ab4:	705a      	strb	r2, [r3, #1]
		default:
			i2cbuf[0] = (0x0000>>8)&0x00FF;
			i2cbuf[1] = (0x0000)&0x00FF;
			break;
	}
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401ab6:	4b48      	ldr	r3, [pc, #288]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401ab8:	4a48      	ldr	r2, [pc, #288]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401aba:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401abc:	2202      	movs	r2, #2
  401abe:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401ac0:	461e      	mov	r6, r3
  401ac2:	4d47      	ldr	r5, [pc, #284]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401ac4:	4c47      	ldr	r4, [pc, #284]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401ac6:	4631      	mov	r1, r6
  401ac8:	4628      	mov	r0, r5
  401aca:	47a0      	blx	r4
  401acc:	2800      	cmp	r0, #0
  401ace:	d1fa      	bne.n	401ac6 <imagingSensorConfigure+0xc6>
	}
	// ----- frame_roi_0c
	//pixel of first column to read
	//default 0x0006, range (d0 to d875)
	packetCMOS.addr[0] = 0x83;//frame_roi_0c
  401ad0:	4b41      	ldr	r3, [pc, #260]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401ad2:	2283      	movs	r2, #131	; 0x83
  401ad4:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = ((32+50)>>8)&0x00FF;
		i2cbuf[1] = (32+50)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = ((32+50+56)>>8)&0x00FF;
  401ad6:	4a41      	ldr	r2, [pc, #260]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401ad8:	2100      	movs	r1, #0
  401ada:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (32+50+56)&0x00FF;
  401adc:	218a      	movs	r1, #138	; 0x8a
  401ade:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401ae0:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401ae2:	2202      	movs	r2, #2
  401ae4:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401ae6:	461e      	mov	r6, r3
  401ae8:	4d3d      	ldr	r5, [pc, #244]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401aea:	4c3e      	ldr	r4, [pc, #248]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401aec:	4631      	mov	r1, r6
  401aee:	4628      	mov	r0, r5
  401af0:	47a0      	blx	r4
  401af2:	2800      	cmp	r0, #0
  401af4:	d1fa      	bne.n	401aec <imagingSensorConfigure+0xec>
	}
	// ----- frame_roi_0l
	//pixel of first line to read
	//default 0x0006, range (d0 to d651)
	packetCMOS.addr[0] = 0x84;//frame_roi_0l
  401af6:	4b38      	ldr	r3, [pc, #224]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401af8:	2284      	movs	r2, #132	; 0x84
  401afa:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = ((6+100)>>8)&0x00FF;
		i2cbuf[1] = (6+100)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = ((6)>>8)&0x00FF;
  401afc:	4a37      	ldr	r2, [pc, #220]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401afe:	2100      	movs	r1, #0
  401b00:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (6)&0x00FF;
  401b02:	2106      	movs	r1, #6
  401b04:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b06:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b08:	2202      	movs	r2, #2
  401b0a:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b0c:	461e      	mov	r6, r3
  401b0e:	4d34      	ldr	r5, [pc, #208]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401b10:	4c34      	ldr	r4, [pc, #208]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401b12:	4631      	mov	r1, r6
  401b14:	4628      	mov	r0, r5
  401b16:	47a0      	blx	r4
  401b18:	2800      	cmp	r0, #0
  401b1a:	d1fa      	bne.n	401b12 <imagingSensorConfigure+0x112>
	}
	// ----- frame_roi_w
	//pixel of first column to read
	//default 0x0360 (d864), range (d16 to d876)
	packetCMOS.addr[0] = 0x85;//frame_roi_w
  401b1c:	4b2e      	ldr	r3, [pc, #184]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401b1e:	2285      	movs	r2, #133	; 0x85
  401b20:	701a      	strb	r2, [r3, #0]

	i2cbuf[0] = (IMAGE_HEIGHT>>8)&0x00FF;
  401b22:	4a2e      	ldr	r2, [pc, #184]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401b24:	2102      	movs	r1, #2
  401b26:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (IMAGE_HEIGHT)&0x00FF;
  401b28:	2080      	movs	r0, #128	; 0x80
  401b2a:	7050      	strb	r0, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b2c:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b2e:	60d9      	str	r1, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b30:	461e      	mov	r6, r3
  401b32:	4d2b      	ldr	r5, [pc, #172]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401b34:	4c2b      	ldr	r4, [pc, #172]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401b36:	4631      	mov	r1, r6
  401b38:	4628      	mov	r0, r5
  401b3a:	47a0      	blx	r4
  401b3c:	2800      	cmp	r0, #0
  401b3e:	d1fa      	bne.n	401b36 <imagingSensorConfigure+0x136>
	}
	// ----- frame_roi_h
	//pixel of first column to read
	//default 0x0280 (d640), range (d16 to d652)
	packetCMOS.addr[0] = 0x86;//frame_roi_h
  401b40:	4b25      	ldr	r3, [pc, #148]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401b42:	2286      	movs	r2, #134	; 0x86
  401b44:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = (IMAGE_WIDTH>>8)&0x00FF;
  401b46:	4a25      	ldr	r2, [pc, #148]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401b48:	2102      	movs	r1, #2
  401b4a:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (IMAGE_WIDTH)&0x00FF;
  401b4c:	2080      	movs	r0, #128	; 0x80
  401b4e:	7050      	strb	r0, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b50:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b52:	60d9      	str	r1, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b54:	461e      	mov	r6, r3
  401b56:	4d22      	ldr	r5, [pc, #136]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401b58:	4c22      	ldr	r4, [pc, #136]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401b5a:	4631      	mov	r1, r6
  401b5c:	4628      	mov	r0, r5
  401b5e:	47a0      	blx	r4
  401b60:	2800      	cmp	r0, #0
  401b62:	d1fa      	bne.n	401b5a <imagingSensorConfigure+0x15a>
	//bit 0,1: 
	//00->No test pattern: video is output (default)
	//01->Moving test pattern
	//10->Fixed test pattern
	//11->Functional test pattern
	packetCMOS.addr[0] = 0x13; //Synchro
  401b64:	4b1c      	ldr	r3, [pc, #112]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401b66:	2213      	movs	r2, #19
  401b68:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = 0b00000000; 
  401b6a:	4a1c      	ldr	r2, [pc, #112]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401b6c:	2100      	movs	r1, #0
  401b6e:	7011      	strb	r1, [r2, #0]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b70:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401b72:	2201      	movs	r2, #1
  401b74:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401b76:	461e      	mov	r6, r3
  401b78:	4d19      	ldr	r5, [pc, #100]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401b7a:	4c1a      	ldr	r4, [pc, #104]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401b7c:	4631      	mov	r1, r6
  401b7e:	4628      	mov	r0, r5
  401b80:	47a0      	blx	r4
  401b82:	2800      	cmp	r0, #0
  401b84:	d1fa      	bne.n	401b7c <imagingSensorConfigure+0x17c>
	//bit 6: 1->Forces all output pads to high impedance
	//bit 4: 3x3 filter bypass, 1->turns off F0-7
	//bit 1: trig, set to 0 to only use trig_pin. set to 1 to soft start acq
	//bit 0: stdby_rqst: set to 0 to take off standby mode.
	//default:0x67, 0b01100111
	packetCMOS.addr[0] = 0x0F;//miscel_ctrl
  401b86:	4b14      	ldr	r3, [pc, #80]	; (401bd8 <imagingSensorConfigure+0x1d8>)
  401b88:	220f      	movs	r2, #15
  401b8a:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = 0b00110100;
  401b8c:	4a13      	ldr	r2, [pc, #76]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401b8e:	2134      	movs	r1, #52	; 0x34
  401b90:	7011      	strb	r1, [r2, #0]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b92:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401b94:	2201      	movs	r2, #1
  401b96:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b98:	461e      	mov	r6, r3
  401b9a:	4d11      	ldr	r5, [pc, #68]	; (401be0 <imagingSensorConfigure+0x1e0>)
  401b9c:	4c11      	ldr	r4, [pc, #68]	; (401be4 <imagingSensorConfigure+0x1e4>)
  401b9e:	4631      	mov	r1, r6
  401ba0:	4628      	mov	r0, r5
  401ba2:	47a0      	blx	r4
  401ba4:	2800      	cmp	r0, #0
  401ba6:	d1fa      	bne.n	401b9e <imagingSensorConfigure+0x19e>
	}
}
  401ba8:	bd70      	pop	{r4, r5, r6, pc}
			i2cbuf[0] = (0x0100>>8)&0x00FF;
  401baa:	4b0c      	ldr	r3, [pc, #48]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401bac:	2201      	movs	r2, #1
  401bae:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0100)&0x00FF;
  401bb0:	2200      	movs	r2, #0
  401bb2:	705a      	strb	r2, [r3, #1]
			break;
  401bb4:	e77f      	b.n	401ab6 <imagingSensorConfigure+0xb6>
			i2cbuf[0] = (0x0200>>8)&0x00FF;
  401bb6:	4b09      	ldr	r3, [pc, #36]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401bb8:	2202      	movs	r2, #2
  401bba:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0200)&0x00FF;
  401bbc:	2200      	movs	r2, #0
  401bbe:	705a      	strb	r2, [r3, #1]
			break;
  401bc0:	e779      	b.n	401ab6 <imagingSensorConfigure+0xb6>
			i2cbuf[0] = (0x0300>>8)&0x00FF;
  401bc2:	4b06      	ldr	r3, [pc, #24]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401bc4:	2203      	movs	r2, #3
  401bc6:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0300)&0x00FF;
  401bc8:	2200      	movs	r2, #0
  401bca:	705a      	strb	r2, [r3, #1]
			break;
  401bcc:	e773      	b.n	401ab6 <imagingSensorConfigure+0xb6>
			i2cbuf[0] = (0x0000>>8)&0x00FF;
  401bce:	4b03      	ldr	r3, [pc, #12]	; (401bdc <imagingSensorConfigure+0x1dc>)
  401bd0:	2200      	movs	r2, #0
  401bd2:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0000)&0x00FF;
  401bd4:	705a      	strb	r2, [r3, #1]
			break;
  401bd6:	e76e      	b.n	401ab6 <imagingSensorConfigure+0xb6>
  401bd8:	2044b500 	.word	0x2044b500
  401bdc:	2044b71c 	.word	0x2044b71c
  401be0:	4001c000 	.word	0x4001c000
  401be4:	004015b5 	.word	0x004015b5
  401be8:	20400008 	.word	0x20400008

00401bec <imagingSensorParamInit>:
}

void imagingSensorParamInit() {
	
	
	PIOA->PIO_PCMR |= PIO_PCMR_DSIZE(D_SIZE);
  401bec:	4a03      	ldr	r2, [pc, #12]	; (401bfc <imagingSensorParamInit+0x10>)
  401bee:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401bf2:	f043 0320 	orr.w	r3, r3, #32
  401bf6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401bfa:	4770      	bx	lr
  401bfc:	400e0e00 	.word	0x400e0e00

00401c00 <imagingSensorDMAInit>:
	PIOA->PIO_PCMR |= PIO_PCMR_HALFS;
	if (FRSTS == 1)
	PIOA->PIO_PCMR |= PIO_PCMR_FRSTS;
}

void imagingSensorDMAInit() {
  401c00:	b508      	push	{r3, lr}
	//Single Block With Single Microblock Transfer
	uint32_t channelStatus = 0;
	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  401c02:	203a      	movs	r0, #58	; 0x3a
  401c04:	4b05      	ldr	r3, [pc, #20]	; (401c1c <imagingSensorDMAInit+0x1c>)
  401c06:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401c08:	4b05      	ldr	r3, [pc, #20]	; (401c20 <imagingSensorDMAInit+0x20>)
  401c0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c0e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c12:	2120      	movs	r1, #32
  401c14:	f883 133a 	strb.w	r1, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c18:	605a      	str	r2, [r3, #4]
  401c1a:	bd08      	pop	{r3, pc}
  401c1c:	004014e5 	.word	0x004014e5
  401c20:	e000e100 	.word	0xe000e100

00401c24 <imagingSensorStartDMA>:

void imagingSensorStartDMA() {
	
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  401c24:	4b23      	ldr	r3, [pc, #140]	; (401cb4 <imagingSensorStartDMA+0x90>)
  401c26:	2202      	movs	r2, #2
  401c28:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  401c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  401c2c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  401c30:	4a21      	ldr	r2, [pc, #132]	; (401cb8 <imagingSensorStartDMA+0x94>)
  401c32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	#ifdef EV76C454
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer;
	#endif

	#ifdef EV76C454_SUBSAMP
	switch(frameNumber%3){
  401c36:	4b21      	ldr	r3, [pc, #132]	; (401cbc <imagingSensorStartDMA+0x98>)
  401c38:	681a      	ldr	r2, [r3, #0]
  401c3a:	4b21      	ldr	r3, [pc, #132]	; (401cc0 <imagingSensorStartDMA+0x9c>)
  401c3c:	fba3 1302 	umull	r1, r3, r3, r2
  401c40:	085b      	lsrs	r3, r3, #1
  401c42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401c46:	1ad3      	subs	r3, r2, r3
  401c48:	2b01      	cmp	r3, #1
  401c4a:	d029      	beq.n	401ca0 <imagingSensorStartDMA+0x7c>
  401c4c:	b31b      	cbz	r3, 401c96 <imagingSensorStartDMA+0x72>
  401c4e:	2b02      	cmp	r3, #2
  401c50:	d02b      	beq.n	401caa <imagingSensorStartDMA+0x86>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
		break;
	}
	#endif

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  401c52:	4b18      	ldr	r3, [pc, #96]	; (401cb4 <imagingSensorStartDMA+0x90>)
  401c54:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  401c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  401c5c:	4a19      	ldr	r2, [pc, #100]	; (401cc4 <imagingSensorStartDMA+0xa0>)
  401c5e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  401c62:	2200      	movs	r2, #0
  401c64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  401c68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  401c6c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  401c70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  401c74:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  401c78:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  401c7c:	f042 0201 	orr.w	r2, r2, #1
  401c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  401c84:	68da      	ldr	r2, [r3, #12]
  401c86:	f042 0202 	orr.w	r2, r2, #2
  401c8a:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  401c8c:	69da      	ldr	r2, [r3, #28]
  401c8e:	f042 0202 	orr.w	r2, r2, #2
  401c92:	61da      	str	r2, [r3, #28]
  401c94:	4770      	bx	lr
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer0;
  401c96:	4b07      	ldr	r3, [pc, #28]	; (401cb4 <imagingSensorStartDMA+0x90>)
  401c98:	4a0b      	ldr	r2, [pc, #44]	; (401cc8 <imagingSensorStartDMA+0xa4>)
  401c9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
  401c9e:	e7d8      	b.n	401c52 <imagingSensorStartDMA+0x2e>
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer1;
  401ca0:	4b04      	ldr	r3, [pc, #16]	; (401cb4 <imagingSensorStartDMA+0x90>)
  401ca2:	4a0a      	ldr	r2, [pc, #40]	; (401ccc <imagingSensorStartDMA+0xa8>)
  401ca4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
  401ca8:	e7d3      	b.n	401c52 <imagingSensorStartDMA+0x2e>
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
  401caa:	4b02      	ldr	r3, [pc, #8]	; (401cb4 <imagingSensorStartDMA+0x90>)
  401cac:	4a08      	ldr	r2, [pc, #32]	; (401cd0 <imagingSensorStartDMA+0xac>)
  401cae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
  401cb2:	e7ce      	b.n	401c52 <imagingSensorStartDMA+0x2e>
  401cb4:	40078000 	.word	0x40078000
  401cb8:	400e0f64 	.word	0x400e0f64
  401cbc:	20400498 	.word	0x20400498
  401cc0:	aaaaaaab 	.word	0xaaaaaaab
  401cc4:	22043001 	.word	0x22043001
  401cc8:	204004a0 	.word	0x204004a0
  401ccc:	204194a0 	.word	0x204194a0
  401cd0:	204324a0 	.word	0x204324a0

00401cd4 <imagingSensorItInit>:
void imagingSensorItInit() {
	//PIOA->PIO_PCIER = PIO_PCISR_DRDY; //Enable Data Ready Interrupt
	//PIOA->PIO_PCIDR |= (PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled

	//PIOA->PIO_PCIER = (PIO_PCIDR_OVRE); //Enable Data Ready Interrupt
	PIOA->PIO_PCIDR |= (PIO_PCIDR_DRDY)|(PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled
  401cd4:	4a03      	ldr	r2, [pc, #12]	; (401ce4 <imagingSensorItInit+0x10>)
  401cd6:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
  401cda:	f043 030f 	orr.w	r3, r3, #15
  401cde:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
  401ce2:	4770      	bx	lr
  401ce4:	400e0e00 	.word	0x400e0e00

00401ce8 <imageSensorVSyncItInit>:
}

void imageSensorVSyncItInit() {
	PIOA->PIO_PER		|= VSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  401ce8:	4b12      	ldr	r3, [pc, #72]	; (401d34 <imageSensorVSyncItInit+0x4c>)
  401cea:	681a      	ldr	r2, [r3, #0]
  401cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401cf0:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= VSYNC_MASK; //Disables output on this pin.
  401cf2:	695a      	ldr	r2, [r3, #20]
  401cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401cf8:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= VSYNC_MASK; //Enables pulldown resistor
  401cfa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  401cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= VSYNC_MASK; //Enables the input change interrupt
  401d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  401d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d0c:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= VSYNC_MASK; //Enables additional Interrupt modes
  401d0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  401d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= VSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  401d1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  401d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= VSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  401d26:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  401d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d2e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401d32:	4770      	bx	lr
  401d34:	400e0e00 	.word	0x400e0e00

00401d38 <imageSensorHSyncItInit>:
	//		printf("VSync is set as input");
	
}

void imageSensorHSyncItInit() {
	PIOA->PIO_PER		|= HSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  401d38:	4b12      	ldr	r3, [pc, #72]	; (401d84 <imageSensorHSyncItInit+0x4c>)
  401d3a:	681a      	ldr	r2, [r3, #0]
  401d3c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d40:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= HSYNC_MASK; //Disables output on this pin.
  401d42:	695a      	ldr	r2, [r3, #20]
  401d44:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d48:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= HSYNC_MASK; //Enables pulldown resistor
  401d4a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  401d4e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= HSYNC_MASK; //Enables the input change interrupt
  401d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  401d58:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d5c:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= HSYNC_MASK; //Enables additional Interrupt modes
  401d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  401d62:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= HSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  401d6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  401d6e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= HSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  401d76:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  401d7a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d7e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401d82:	4770      	bx	lr
  401d84:	400e0e00 	.word	0x400e0e00

00401d88 <imagingSensorLoadHeader>:
	
	
}
void imagingSensorLoadHeader(){
  401d88:	b500      	push	{lr}
  401d8a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t headerTemp[SDMMC_BLOCK_SIZE] = {0};
  401d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401d92:	2100      	movs	r1, #0
  401d94:	4668      	mov	r0, sp
  401d96:	4b0e      	ldr	r3, [pc, #56]	; (401dd0 <imagingSensorLoadHeader+0x48>)
  401d98:	4798      	blx	r3
	uint32_t *header = (uint32_t *)headerTemp;

	uint32_t writeKey[4] = {0};
	sd_mmc_init_read_blocks(SD_SLOT_NB,HEADER_SECTOR,1);
  401d9a:	2201      	movs	r2, #1
  401d9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
  401da0:	2000      	movs	r0, #0
  401da2:	4b0c      	ldr	r3, [pc, #48]	; (401dd4 <imagingSensorLoadHeader+0x4c>)
  401da4:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerTemp,1);
  401da6:	2101      	movs	r1, #1
  401da8:	4668      	mov	r0, sp
  401daa:	4b0b      	ldr	r3, [pc, #44]	; (401dd8 <imagingSensorLoadHeader+0x50>)
  401dac:	4798      	blx	r3
	sd_mmc_wait_end_of_read_blocks(false);
  401dae:	2000      	movs	r0, #0
  401db0:	4b0a      	ldr	r3, [pc, #40]	; (401ddc <imagingSensorLoadHeader+0x54>)
  401db2:	4798      	blx	r3

	gain				= header[HEADER_GAIN_POS];
  401db4:	9a04      	ldr	r2, [sp, #16]
  401db6:	4b0a      	ldr	r3, [pc, #40]	; (401de0 <imagingSensorLoadHeader+0x58>)
  401db8:	601a      	str	r2, [r3, #0]
	//ledValue			= ((100- header[HEADER_LED_POS])*0x0FFF)/100; //header should be between 0 and 100; Used for DAC
	ledValue			= header[HEADER_LED_POS]; //header should be between 0 and 255;
  401dba:	9a05      	ldr	r2, [sp, #20]
  401dbc:	4b09      	ldr	r3, [pc, #36]	; (401de4 <imagingSensorLoadHeader+0x5c>)
  401dbe:	601a      	str	r2, [r3, #0]
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];
  401dc0:	9a06      	ldr	r2, [sp, #24]
  401dc2:	4b09      	ldr	r3, [pc, #36]	; (401de8 <imagingSensorLoadHeader+0x60>)
  401dc4:	601a      	str	r2, [r3, #0]


}
  401dc6:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
  401dca:	f85d fb04 	ldr.w	pc, [sp], #4
  401dce:	bf00      	nop
  401dd0:	00402491 	.word	0x00402491
  401dd4:	00400941 	.word	0x00400941
  401dd8:	00400a15 	.word	0x00400a15
  401ddc:	00400a3d 	.word	0x00400a3d
  401de0:	20400008 	.word	0x20400008
  401de4:	2044b4a0 	.word	0x2044b4a0
  401de8:	2044b4a8 	.word	0x2044b4a8

00401dec <imagingSensorCaptureEnable>:
void imagingSensorCaptureEnable() {
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN ;
  401dec:	4a03      	ldr	r2, [pc, #12]	; (401dfc <imagingSensorCaptureEnable+0x10>)
  401dee:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401df2:	f043 0301 	orr.w	r3, r3, #1
  401df6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401dfa:	4770      	bx	lr
  401dfc:	400e0e00 	.word	0x400e0e00

00401e00 <imagingSensorCaptureDisable>:
	
}

void imagingSensorCaptureDisable() {
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
  401e00:	4a03      	ldr	r2, [pc, #12]	; (401e10 <imagingSensorCaptureDisable+0x10>)
  401e02:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401e06:	f023 0301 	bic.w	r3, r3, #1
  401e0a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401e0e:	4770      	bx	lr
  401e10:	400e0e00 	.word	0x400e0e00

00401e14 <imagingSensorSetup>:
void imagingSensorSetup() {
  401e14:	b508      	push	{r3, lr}
	imagingSensorCaptureDisable();//makes sure PIo Capture is disabled
  401e16:	4b0f      	ldr	r3, [pc, #60]	; (401e54 <imagingSensorSetup+0x40>)
  401e18:	4798      	blx	r3
	pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
  401e1a:	200a      	movs	r0, #10
  401e1c:	4b0e      	ldr	r3, [pc, #56]	; (401e58 <imagingSensorSetup+0x44>)
  401e1e:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401e20:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <imagingSensorSetup+0x48>)
  401e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401e26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401e2a:	2140      	movs	r1, #64	; 0x40
  401e2c:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401e30:	601a      	str	r2, [r3, #0]
	imagingSensorItInit(); //Sets up interrupts //Might need to change interrupts for DMA transfer
  401e32:	4b0b      	ldr	r3, [pc, #44]	; (401e60 <imagingSensorSetup+0x4c>)
  401e34:	4798      	blx	r3
	imagingSensorDMAInit();
  401e36:	4b0b      	ldr	r3, [pc, #44]	; (401e64 <imagingSensorSetup+0x50>)
  401e38:	4798      	blx	r3
	imagingSensorParamInit(); //Configures PIO Capture settings
  401e3a:	4b0b      	ldr	r3, [pc, #44]	; (401e68 <imagingSensorSetup+0x54>)
  401e3c:	4798      	blx	r3
	imageSensorVSyncItInit();//Sets up VSync interrupt to detect end of frame
  401e3e:	4b0b      	ldr	r3, [pc, #44]	; (401e6c <imagingSensorSetup+0x58>)
  401e40:	4798      	blx	r3
	imageSensorHSyncItInit();
  401e42:	4b0b      	ldr	r3, [pc, #44]	; (401e70 <imagingSensorSetup+0x5c>)
  401e44:	4798      	blx	r3
	packetCMOS.chip = IMAGING_SENSOR_ADR;
  401e46:	4b0b      	ldr	r3, [pc, #44]	; (401e74 <imagingSensorSetup+0x60>)
  401e48:	2218      	movs	r2, #24
  401e4a:	741a      	strb	r2, [r3, #16]
	packetCMOS.addr_length = 1;
  401e4c:	2201      	movs	r2, #1
  401e4e:	605a      	str	r2, [r3, #4]
  401e50:	bd08      	pop	{r3, pc}
  401e52:	bf00      	nop
  401e54:	00401e01 	.word	0x00401e01
  401e58:	004014e5 	.word	0x004014e5
  401e5c:	e000e100 	.word	0xe000e100
  401e60:	00401cd5 	.word	0x00401cd5
  401e64:	00401c01 	.word	0x00401c01
  401e68:	00401bed 	.word	0x00401bed
  401e6c:	00401ce9 	.word	0x00401ce9
  401e70:	00401d39 	.word	0x00401d39
  401e74:	2044b500 	.word	0x2044b500

00401e78 <checkVSync>:
}

void checkVSync() {
  401e78:	b508      	push	{r3, lr}
	if (pcISR & VSYNC_MASK) { //VSync signal is detected. End of frame capture
  401e7a:	4b3b      	ldr	r3, [pc, #236]	; (401f68 <checkVSync+0xf0>)
  401e7c:	681b      	ldr	r3, [r3, #0]
  401e7e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401e82:	d009      	beq.n	401e98 <checkVSync+0x20>
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) {
  401e84:	4b39      	ldr	r3, [pc, #228]	; (401f6c <checkVSync+0xf4>)
  401e86:	781b      	ldrb	r3, [r3, #0]
  401e88:	b113      	cbz	r3, 401e90 <checkVSync+0x18>
  401e8a:	4b39      	ldr	r3, [pc, #228]	; (401f70 <checkVSync+0xf8>)
  401e8c:	781b      	ldrb	r3, [r3, #0]
  401e8e:	b923      	cbnz	r3, 401e9a <checkVSync+0x22>

			#endif
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) { //waits for the first VSync to start capture. This makes sure we capture a full first frame
  401e90:	4b37      	ldr	r3, [pc, #220]	; (401f70 <checkVSync+0xf8>)
  401e92:	781b      	ldrb	r3, [r3, #0]
  401e94:	2b00      	cmp	r3, #0
  401e96:	d15a      	bne.n	401f4e <checkVSync+0xd6>
  401e98:	bd08      	pop	{r3, pc}
			captureEnabled = 0;
  401e9a:	2300      	movs	r3, #0
  401e9c:	4a33      	ldr	r2, [pc, #204]	; (401f6c <checkVSync+0xf4>)
  401e9e:	7013      	strb	r3, [r2, #0]
			startRecording = 0;
  401ea0:	4a33      	ldr	r2, [pc, #204]	; (401f70 <checkVSync+0xf8>)
  401ea2:	7013      	strb	r3, [r2, #0]
			imagingSensorCaptureDisable();
  401ea4:	4b33      	ldr	r3, [pc, #204]	; (401f74 <checkVSync+0xfc>)
  401ea6:	4798      	blx	r3
				switch (frameNumber%3)
  401ea8:	4b33      	ldr	r3, [pc, #204]	; (401f78 <checkVSync+0x100>)
  401eaa:	681a      	ldr	r2, [r3, #0]
  401eac:	4b33      	ldr	r3, [pc, #204]	; (401f7c <checkVSync+0x104>)
  401eae:	fba3 1302 	umull	r1, r3, r3, r2
  401eb2:	085b      	lsrs	r3, r3, #1
  401eb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401eb8:	1ad3      	subs	r3, r2, r3
  401eba:	2b01      	cmp	r3, #1
  401ebc:	d02b      	beq.n	401f16 <checkVSync+0x9e>
  401ebe:	b1e3      	cbz	r3, 401efa <checkVSync+0x82>
  401ec0:	2b02      	cmp	r3, #2
  401ec2:	d036      	beq.n	401f32 <checkVSync+0xba>
			lineCount = 0;
  401ec4:	2300      	movs	r3, #0
  401ec6:	4a2e      	ldr	r2, [pc, #184]	; (401f80 <checkVSync+0x108>)
  401ec8:	6013      	str	r3, [r2, #0]
			frameNumber++;
  401eca:	4a2b      	ldr	r2, [pc, #172]	; (401f78 <checkVSync+0x100>)
  401ecc:	6811      	ldr	r1, [r2, #0]
  401ece:	3101      	adds	r1, #1
  401ed0:	6011      	str	r1, [r2, #0]
			overflowCount = 0;
  401ed2:	492c      	ldr	r1, [pc, #176]	; (401f84 <checkVSync+0x10c>)
  401ed4:	600b      	str	r3, [r1, #0]
			xferDMAComplete = 0;
  401ed6:	492c      	ldr	r1, [pc, #176]	; (401f88 <checkVSync+0x110>)
  401ed8:	600b      	str	r3, [r1, #0]
				if (frameNumber<=sdImageWriteFrameNum +2) {
  401eda:	4b2c      	ldr	r3, [pc, #176]	; (401f8c <checkVSync+0x114>)
  401edc:	681b      	ldr	r3, [r3, #0]
  401ede:	6812      	ldr	r2, [r2, #0]
  401ee0:	3302      	adds	r3, #2
  401ee2:	4293      	cmp	r3, r2
  401ee4:	d3d8      	bcc.n	401e98 <checkVSync+0x20>
					startRecording = 1;
  401ee6:	2301      	movs	r3, #1
  401ee8:	4a21      	ldr	r2, [pc, #132]	; (401f70 <checkVSync+0xf8>)
  401eea:	7013      	strb	r3, [r2, #0]
					captureEnabled = 1;
  401eec:	4a1f      	ldr	r2, [pc, #124]	; (401f6c <checkVSync+0xf4>)
  401eee:	7013      	strb	r3, [r2, #0]
					imagingSensorStartDMA();
  401ef0:	4b27      	ldr	r3, [pc, #156]	; (401f90 <checkVSync+0x118>)
  401ef2:	4798      	blx	r3
					imagingSensorCaptureEnable();
  401ef4:	4b27      	ldr	r3, [pc, #156]	; (401f94 <checkVSync+0x11c>)
  401ef6:	4798      	blx	r3
  401ef8:	bd08      	pop	{r3, pc}
					imageBuffer0[buffSize-1] = frameNumber;
  401efa:	4b1f      	ldr	r3, [pc, #124]	; (401f78 <checkVSync+0x100>)
  401efc:	6819      	ldr	r1, [r3, #0]
  401efe:	4b26      	ldr	r3, [pc, #152]	; (401f98 <checkVSync+0x120>)
  401f00:	4a26      	ldr	r2, [pc, #152]	; (401f9c <checkVSync+0x124>)
  401f02:	5099      	str	r1, [r3, r2]
					imageBuffer0[buffSize-3] = lineCount;
  401f04:	4a1e      	ldr	r2, [pc, #120]	; (401f80 <checkVSync+0x108>)
  401f06:	6811      	ldr	r1, [r2, #0]
  401f08:	4a25      	ldr	r2, [pc, #148]	; (401fa0 <checkVSync+0x128>)
  401f0a:	5099      	str	r1, [r3, r2]
					imageBuffer0[buffSize-4] = xferDMAComplete; //Overflow flag
  401f0c:	4a1e      	ldr	r2, [pc, #120]	; (401f88 <checkVSync+0x110>)
  401f0e:	6811      	ldr	r1, [r2, #0]
  401f10:	4a24      	ldr	r2, [pc, #144]	; (401fa4 <checkVSync+0x12c>)
  401f12:	5099      	str	r1, [r3, r2]
					break;
  401f14:	e7d6      	b.n	401ec4 <checkVSync+0x4c>
					imageBuffer1[buffSize-1] = frameNumber;
  401f16:	4b18      	ldr	r3, [pc, #96]	; (401f78 <checkVSync+0x100>)
  401f18:	6819      	ldr	r1, [r3, #0]
  401f1a:	4b23      	ldr	r3, [pc, #140]	; (401fa8 <checkVSync+0x130>)
  401f1c:	4a1f      	ldr	r2, [pc, #124]	; (401f9c <checkVSync+0x124>)
  401f1e:	5099      	str	r1, [r3, r2]
					imageBuffer1[buffSize-3] = lineCount;
  401f20:	4a17      	ldr	r2, [pc, #92]	; (401f80 <checkVSync+0x108>)
  401f22:	6811      	ldr	r1, [r2, #0]
  401f24:	4a1e      	ldr	r2, [pc, #120]	; (401fa0 <checkVSync+0x128>)
  401f26:	5099      	str	r1, [r3, r2]
					imageBuffer1[buffSize-4] = xferDMAComplete; //Overflow flag
  401f28:	4a17      	ldr	r2, [pc, #92]	; (401f88 <checkVSync+0x110>)
  401f2a:	6811      	ldr	r1, [r2, #0]
  401f2c:	4a1d      	ldr	r2, [pc, #116]	; (401fa4 <checkVSync+0x12c>)
  401f2e:	5099      	str	r1, [r3, r2]
					break;
  401f30:	e7c8      	b.n	401ec4 <checkVSync+0x4c>
					imageBuffer2[buffSize-1] = frameNumber;
  401f32:	4b11      	ldr	r3, [pc, #68]	; (401f78 <checkVSync+0x100>)
  401f34:	6819      	ldr	r1, [r3, #0]
  401f36:	4b1d      	ldr	r3, [pc, #116]	; (401fac <checkVSync+0x134>)
  401f38:	4a18      	ldr	r2, [pc, #96]	; (401f9c <checkVSync+0x124>)
  401f3a:	5099      	str	r1, [r3, r2]
					imageBuffer2[buffSize-3] = lineCount;
  401f3c:	4a10      	ldr	r2, [pc, #64]	; (401f80 <checkVSync+0x108>)
  401f3e:	6811      	ldr	r1, [r2, #0]
  401f40:	4a17      	ldr	r2, [pc, #92]	; (401fa0 <checkVSync+0x128>)
  401f42:	5099      	str	r1, [r3, r2]
					imageBuffer2[buffSize-4] = xferDMAComplete; //Overflow flag
  401f44:	4a10      	ldr	r2, [pc, #64]	; (401f88 <checkVSync+0x110>)
  401f46:	6811      	ldr	r1, [r2, #0]
  401f48:	4a16      	ldr	r2, [pc, #88]	; (401fa4 <checkVSync+0x12c>)
  401f4a:	5099      	str	r1, [r3, r2]
					break;
  401f4c:	e7ba      	b.n	401ec4 <checkVSync+0x4c>
			captureEnabled = 1;
  401f4e:	2201      	movs	r2, #1
  401f50:	4b06      	ldr	r3, [pc, #24]	; (401f6c <checkVSync+0xf4>)
  401f52:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  401f54:	2300      	movs	r3, #0
  401f56:	4a0a      	ldr	r2, [pc, #40]	; (401f80 <checkVSync+0x108>)
  401f58:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  401f5a:	4a0a      	ldr	r2, [pc, #40]	; (401f84 <checkVSync+0x10c>)
  401f5c:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  401f5e:	4b0c      	ldr	r3, [pc, #48]	; (401f90 <checkVSync+0x118>)
  401f60:	4798      	blx	r3
			imagingSensorCaptureEnable();
  401f62:	4b0c      	ldr	r3, [pc, #48]	; (401f94 <checkVSync+0x11c>)
  401f64:	4798      	blx	r3

		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
  401f66:	e797      	b.n	401e98 <checkVSync+0x20>
  401f68:	2044b4b0 	.word	0x2044b4b0
  401f6c:	20400494 	.word	0x20400494
  401f70:	2044b4b8 	.word	0x2044b4b8
  401f74:	00401e01 	.word	0x00401e01
  401f78:	20400498 	.word	0x20400498
  401f7c:	aaaaaaab 	.word	0xaaaaaaab
  401f80:	2044b4a4 	.word	0x2044b4a4
  401f84:	2044b4ac 	.word	0x2044b4ac
  401f88:	2044b4c0 	.word	0x2044b4c0
  401f8c:	2044b4b4 	.word	0x2044b4b4
  401f90:	00401c25 	.word	0x00401c25
  401f94:	00401ded 	.word	0x00401ded
  401f98:	204004a0 	.word	0x204004a0
  401f9c:	00018ffc 	.word	0x00018ffc
  401fa0:	00018ff4 	.word	0x00018ff4
  401fa4:	00018ff0 	.word	0x00018ff0
  401fa8:	204194a0 	.word	0x204194a0
  401fac:	204324a0 	.word	0x204324a0

00401fb0 <PIOA_Handler>:
void PIOA_Handler(void) {
  401fb0:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  401fb2:	4b0a      	ldr	r3, [pc, #40]	; (401fdc <PIOA_Handler+0x2c>)
  401fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  401fb6:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <PIOA_Handler+0x30>)
  401fb8:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK) {
  401fba:	681b      	ldr	r3, [r3, #0]
  401fbc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  401fc0:	d004      	beq.n	401fcc <PIOA_Handler+0x1c>
		if (captureEnabled == 1)
  401fc2:	4b08      	ldr	r3, [pc, #32]	; (401fe4 <PIOA_Handler+0x34>)
  401fc4:	781b      	ldrb	r3, [r3, #0]
  401fc6:	b2db      	uxtb	r3, r3
  401fc8:	2b01      	cmp	r3, #1
  401fca:	d002      	beq.n	401fd2 <PIOA_Handler+0x22>
			lineCount++;
	}
	checkVSync();
  401fcc:	4b06      	ldr	r3, [pc, #24]	; (401fe8 <PIOA_Handler+0x38>)
  401fce:	4798      	blx	r3
  401fd0:	bd08      	pop	{r3, pc}
			lineCount++;
  401fd2:	4a06      	ldr	r2, [pc, #24]	; (401fec <PIOA_Handler+0x3c>)
  401fd4:	6813      	ldr	r3, [r2, #0]
  401fd6:	3301      	adds	r3, #1
  401fd8:	6013      	str	r3, [r2, #0]
  401fda:	e7f7      	b.n	401fcc <PIOA_Handler+0x1c>
  401fdc:	400e0e00 	.word	0x400e0e00
  401fe0:	2044b4b0 	.word	0x2044b4b0
  401fe4:	20400494 	.word	0x20400494
  401fe8:	00401e79 	.word	0x00401e79
  401fec:	2044b4a4 	.word	0x2044b4a4

00401ff0 <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  401ff0:	4b04      	ldr	r3, [pc, #16]	; (402004 <XDMAC_Handler+0x14>)
  401ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) {
  401ff6:	f013 0f01 	tst.w	r3, #1
  401ffa:	d002      	beq.n	402002 <XDMAC_Handler+0x12>
		xferDMAComplete = 1;
  401ffc:	2201      	movs	r2, #1
  401ffe:	4b02      	ldr	r3, [pc, #8]	; (402008 <XDMAC_Handler+0x18>)
  402000:	601a      	str	r2, [r3, #0]
  402002:	4770      	bx	lr
  402004:	40078000 	.word	0x40078000
  402008:	2044b4c0 	.word	0x2044b4c0

0040200c <PWM_Init>:
volatile uint32_t test[128];

//Holds PWM channel information
pwm_channel_t g_pwm_channel_led;

void PWM_Init() {
  40200c:	b570      	push	{r4, r5, r6, lr}
  40200e:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM0);
  402010:	201f      	movs	r0, #31
  402012:	4b20      	ldr	r3, [pc, #128]	; (402094 <PWM_Init+0x88>)
  402014:	4798      	blx	r3

	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO12);
  402016:	4b20      	ldr	r3, [pc, #128]	; (402098 <PWM_Init+0x8c>)
  402018:	4798      	blx	r3
  40201a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40201e:	4b1f      	ldr	r3, [pc, #124]	; (40209c <PWM_Init+0x90>)
  402020:	4798      	blx	r3
		base->PIO_PUDR = mask;
  402022:	4b1f      	ldr	r3, [pc, #124]	; (4020a0 <PWM_Init+0x94>)
  402024:	2401      	movs	r4, #1
  402026:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402028:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40202c:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40202e:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402030:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402036:	f022 0201 	bic.w	r2, r2, #1
  40203a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40203c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40203e:	f022 0201 	bic.w	r2, r2, #1
  402042:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402044:	605c      	str	r4, [r3, #4]
	ioport_set_pin_mode(PWM_LED_PIN,PWM_LED_MODE); //Sets GPIO PIN to PWM Peripheral
	ioport_disable_pin(PWM_LED_PIN);

	pwm_channel_disable(PWM0, PWM_LED_CHANNEL);
  402046:	4e17      	ldr	r6, [pc, #92]	; (4020a4 <PWM_Init+0x98>)
  402048:	2100      	movs	r1, #0
  40204a:	4630      	mov	r0, r6
  40204c:	4b16      	ldr	r3, [pc, #88]	; (4020a8 <PWM_Init+0x9c>)
  40204e:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
  402050:	4b16      	ldr	r3, [pc, #88]	; (4020ac <PWM_Init+0xa0>)
  402052:	9301      	str	r3, [sp, #4]
  402054:	2500      	movs	r5, #0
  402056:	9502      	str	r5, [sp, #8]
  402058:	4b15      	ldr	r3, [pc, #84]	; (4020b0 <PWM_Init+0xa4>)
  40205a:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()/2 //Might need or not need to divide by 2 to get the correct clock
	};

	pwm_init(PWM0, &clock_setting);
  40205c:	a901      	add	r1, sp, #4
  40205e:	4630      	mov	r0, r6
  402060:	4b14      	ldr	r3, [pc, #80]	; (4020b4 <PWM_Init+0xa8>)
  402062:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  402064:	4914      	ldr	r1, [pc, #80]	; (4020b8 <PWM_Init+0xac>)
  402066:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  402068:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  40206a:	230b      	movs	r3, #11
  40206c:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PWM_PERIOD_VALUE;
  40206e:	23ff      	movs	r3, #255	; 0xff
  402070:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  402072:	2305      	movs	r3, #5
  402074:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_led.channel = PWM_LED_CHANNEL;
  402076:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  402078:	4630      	mov	r0, r6
  40207a:	4b10      	ldr	r3, [pc, #64]	; (4020bc <PWM_Init+0xb0>)
  40207c:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PWM_LED_CHANNEL, 0);
  40207e:	462a      	mov	r2, r5
  402080:	4629      	mov	r1, r5
  402082:	4630      	mov	r0, r6
  402084:	4b0e      	ldr	r3, [pc, #56]	; (4020c0 <PWM_Init+0xb4>)
  402086:	4798      	blx	r3
	//Enable PWM output
	pwm_channel_enable(PWM0,PWM_LED_CHANNEL);
  402088:	4629      	mov	r1, r5
  40208a:	4630      	mov	r0, r6
  40208c:	4b0d      	ldr	r3, [pc, #52]	; (4020c4 <PWM_Init+0xb8>)
  40208e:	4798      	blx	r3
	
}
  402090:	b004      	add	sp, #16
  402092:	bd70      	pop	{r4, r5, r6, pc}
  402094:	004014e5 	.word	0x004014e5
  402098:	004010a5 	.word	0x004010a5
  40209c:	00401081 	.word	0x00401081
  4020a0:	400e0e00 	.word	0x400e0e00
  4020a4:	40020000 	.word	0x40020000
  4020a8:	004012dd 	.word	0x004012dd
  4020ac:	0003e418 	.word	0x0003e418
  4020b0:	044aa200 	.word	0x044aa200
  4020b4:	00401109 	.word	0x00401109
  4020b8:	2044b4c4 	.word	0x2044b4c4
  4020bc:	0040114d 	.word	0x0040114d
  4020c0:	004012e7 	.word	0x004012e7
  4020c4:	004012d3 	.word	0x004012d3

004020c8 <TWIHS_init>:
		//wait for DACC to be ready to receive new data
	}
	DACC->DACC_CDR[channel] = value&0x0FFF;
}

void TWIHS_init() { //Make sure you have correct TWIHS 
  4020c8:	b500      	push	{lr}
  4020ca:	b085      	sub	sp, #20
	twihs_options_t twihsOpt;
	twihsOpt.master_clk = sysclk_get_cpu_hz()/2; //make sure this is the correct clock to be checking
  4020cc:	4b1b      	ldr	r3, [pc, #108]	; (40213c <TWIHS_init+0x74>)
  4020ce:	9301      	str	r3, [sp, #4]
	twihsOpt.speed = 100000; //100KHz
  4020d0:	4b1b      	ldr	r3, [pc, #108]	; (402140 <TWIHS_init+0x78>)
  4020d2:	9302      	str	r3, [sp, #8]
		////ioport_toggle_pin_level(TWCK_PIN);
		////ioport_toggle_pin_level(TWD_PIN);
//
	//}

	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  4020d4:	4b1b      	ldr	r3, [pc, #108]	; (402144 <TWIHS_init+0x7c>)
  4020d6:	4798      	blx	r3
  4020d8:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  4020dc:	4b1a      	ldr	r3, [pc, #104]	; (402148 <TWIHS_init+0x80>)
  4020de:	4798      	blx	r3
		base->PIO_PUDR = mask;
  4020e0:	4b1a      	ldr	r3, [pc, #104]	; (40214c <TWIHS_init+0x84>)
  4020e2:	2220      	movs	r2, #32
  4020e4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4020e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4020ea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4020ec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4020ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4020f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4020f4:	f021 0120 	bic.w	r1, r1, #32
  4020f8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020fa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4020fc:	f021 0120 	bic.w	r1, r1, #32
  402100:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402102:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  402104:	2210      	movs	r2, #16
  402106:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40210c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40210e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402114:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402116:	f021 0110 	bic.w	r1, r1, #16
  40211a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40211c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40211e:	f021 0110 	bic.w	r1, r1, #16
  402122:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402124:	605a      	str	r2, [r3, #4]
	ioport_set_pin_mode(TWCK_PIN,TWCK_MODE);
	ioport_disable_pin(TWCK_PIN);
	ioport_set_pin_mode(TWD_PIN,TWD_MODE);
	ioport_disable_pin(TWD_PIN);

	pmc_enable_periph_clk(ID_TWIHS1);
  402126:	2014      	movs	r0, #20
  402128:	4b09      	ldr	r3, [pc, #36]	; (402150 <TWIHS_init+0x88>)
  40212a:	4798      	blx	r3

	twihs_master_init(TWIHS1,&twihsOpt);
  40212c:	a901      	add	r1, sp, #4
  40212e:	4809      	ldr	r0, [pc, #36]	; (402154 <TWIHS_init+0x8c>)
  402130:	4b09      	ldr	r3, [pc, #36]	; (402158 <TWIHS_init+0x90>)
  402132:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS1);
}
  402134:	b005      	add	sp, #20
  402136:	f85d fb04 	ldr.w	pc, [sp], #4
  40213a:	bf00      	nop
  40213c:	044aa200 	.word	0x044aa200
  402140:	000186a0 	.word	0x000186a0
  402144:	004010a5 	.word	0x004010a5
  402148:	00401081 	.word	0x00401081
  40214c:	400e1000 	.word	0x400e1000
  402150:	004014e5 	.word	0x004014e5
  402154:	4001c000 	.word	0x4001c000
  402158:	00401581 	.word	0x00401581

0040215c <main>:
	ioport_set_pin_dir(SPI_BB_SCK_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SPI_BB_SCK_PIN, 0);
}

int main (void)
{
  40215c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402160:	b083      	sub	sp, #12

	uint32_t writeNum = 0;
	uint32_t writeFrameNum = 0;
	WDT->WDT_MR = WDT_MR_WDDIS; //Disables WDT
  402162:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402166:	4b8f      	ldr	r3, [pc, #572]	; (4023a4 <main+0x248>)
  402168:	605a      	str	r2, [r3, #4]

	//SCB_EnableICache();
	//SCB_EnableDCache();

	irq_initialize_vectors();
	cpu_irq_enable();
  40216a:	2201      	movs	r2, #1
  40216c:	4b8e      	ldr	r3, [pc, #568]	; (4023a8 <main+0x24c>)
  40216e:	701a      	strb	r2, [r3, #0]
  402170:	f3bf 8f5f 	dmb	sy
  402174:	b662      	cpsie	i

	sysclk_init();
  402176:	4b8d      	ldr	r3, [pc, #564]	; (4023ac <main+0x250>)
  402178:	4798      	blx	r3
	board_init(); //Sets up sdcard slot pins
  40217a:	4b8d      	ldr	r3, [pc, #564]	; (4023b0 <main+0x254>)
  40217c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40217e:	200a      	movs	r0, #10
  402180:	4c8c      	ldr	r4, [pc, #560]	; (4023b4 <main+0x258>)
  402182:	47a0      	blx	r4
  402184:	200b      	movs	r0, #11
  402186:	47a0      	blx	r4
  402188:	2010      	movs	r0, #16
  40218a:	47a0      	blx	r4
	ioport_init(); //turns on all peripheral clocks. could remove this to save power

	//----- CMOS Sensor Stuff
	enableSourceClk(); //Turns on SCK1 from MCU to drive CMOS sensor
  40218c:	4b8a      	ldr	r3, [pc, #552]	; (4023b8 <main+0x25c>)
  40218e:	4798      	blx	r3
	//

	time_tick_init();
  402190:	4b8a      	ldr	r3, [pc, #552]	; (4023bc <main+0x260>)
  402192:	4798      	blx	r3
	PWM_Init();
  402194:	4b8a      	ldr	r3, [pc, #552]	; (4023c0 <main+0x264>)
  402196:	4798      	blx	r3
	//DACC_init(); //The DAC cannot run at 1.8V. This needs to be replaced with PWM to drive the LED current source
	//DACC_updateOutput(0x0FFF,1);
	#ifdef EV76C541
		SPI_BitBag_init();
	#else
		TWIHS_init();
  402198:	4b8a      	ldr	r3, [pc, #552]	; (4023c4 <main+0x268>)
  40219a:	4798      	blx	r3
	#endif
	//tick_start = time_tick_get();
	//time_ms = time_tick_calc_delay(tick_start, time_tick_get());

	//----- Enable control of LED
	pmc_enable_periph_clk(ID_PIOD);	
  40219c:	2010      	movs	r0, #16
  40219e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021a0:	4b89      	ldr	r3, [pc, #548]	; (4023c8 <main+0x26c>)
  4021a2:	2202      	movs	r2, #2
  4021a4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021aa:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LED_PIN, 0);
	//-----

	tick_start = time_tick_get();
  4021ac:	4b87      	ldr	r3, [pc, #540]	; (4023cc <main+0x270>)
  4021ae:	4798      	blx	r3
  4021b0:	4b87      	ldr	r3, [pc, #540]	; (4023d0 <main+0x274>)
  4021b2:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <100) {}
  4021b4:	461e      	mov	r6, r3
  4021b6:	4d85      	ldr	r5, [pc, #532]	; (4023cc <main+0x270>)
  4021b8:	4c86      	ldr	r4, [pc, #536]	; (4023d4 <main+0x278>)
  4021ba:	6837      	ldr	r7, [r6, #0]
  4021bc:	47a8      	blx	r5
  4021be:	4601      	mov	r1, r0
  4021c0:	4638      	mov	r0, r7
  4021c2:	47a0      	blx	r4
  4021c4:	2863      	cmp	r0, #99	; 0x63
  4021c6:	d9f8      	bls.n	4021ba <main+0x5e>

	//----- Enable control of enable pin for LED Driver
	pmc_enable_periph_clk(ID_PIOB);
  4021c8:	200b      	movs	r0, #11
  4021ca:	4d7a      	ldr	r5, [pc, #488]	; (4023b4 <main+0x258>)
  4021cc:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021ce:	4c82      	ldr	r4, [pc, #520]	; (4023d8 <main+0x27c>)
  4021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021d4:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021da:	6363      	str	r3, [r4, #52]	; 0x34
	ioport_set_pin_level(ENT_PIN, 0);

	//-----

	//----- Enable control of sensor control pins
	pmc_enable_periph_clk(ID_PIOB);
  4021dc:	200b      	movs	r0, #11
  4021de:	47a8      	blx	r5
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021e0:	2302      	movs	r3, #2
  4021e2:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021e4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021e8:	6363      	str	r3, [r4, #52]	; 0x34

	ioport_set_pin_dir(RESETB_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESETB_PIN, 0); //not sure if this can stay high the whole time.

	tick_start = time_tick_get();
  4021ea:	4b78      	ldr	r3, [pc, #480]	; (4023cc <main+0x270>)
  4021ec:	4798      	blx	r3
  4021ee:	4b78      	ldr	r3, [pc, #480]	; (4023d0 <main+0x274>)
  4021f0:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <100) {}
  4021f2:	461e      	mov	r6, r3
  4021f4:	4d75      	ldr	r5, [pc, #468]	; (4023cc <main+0x270>)
  4021f6:	4c77      	ldr	r4, [pc, #476]	; (4023d4 <main+0x278>)
  4021f8:	6837      	ldr	r7, [r6, #0]
  4021fa:	47a8      	blx	r5
  4021fc:	4601      	mov	r1, r0
  4021fe:	4638      	mov	r0, r7
  402200:	47a0      	blx	r4
  402202:	2863      	cmp	r0, #99	; 0x63
  402204:	d9f8      	bls.n	4021f8 <main+0x9c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402206:	4b74      	ldr	r3, [pc, #464]	; (4023d8 <main+0x27c>)
  402208:	2202      	movs	r2, #2
  40220a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40220c:	2201      	movs	r2, #1
  40220e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402210:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402214:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402216:	2204      	movs	r2, #4
  402218:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40221a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40221e:	635a      	str	r2, [r3, #52]	; 0x34

	//pmc_switch_pck_to_mck(ID_PIOA, 1);


	//----- SD Init Stuff
	sd_mmc_init();
  402220:	4b6e      	ldr	r3, [pc, #440]	; (4023dc <main+0x280>)
  402222:	4798      	blx	r3
	//

	//--------------------------------------------Remove comments below after debugging I2C
	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK) {
  402224:	2500      	movs	r5, #0
  402226:	4c6e      	ldr	r4, [pc, #440]	; (4023e0 <main+0x284>)
  402228:	4628      	mov	r0, r5
  40222a:	47a0      	blx	r4
  40222c:	2800      	cmp	r0, #0
  40222e:	d1fb      	bne.n	402228 <main+0xcc>
		////Maybe turn LED off
	}
	//
//
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC)) {
  402230:	4b6c      	ldr	r3, [pc, #432]	; (4023e4 <main+0x288>)
  402232:	4798      	blx	r3
	////This is the correct type of card (SDHC)
	//
	}
	//
	//-------------------------------------------------------------------------------------------
	uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB); //in KB
  402234:	2000      	movs	r0, #0
  402236:	4b6c      	ldr	r3, [pc, #432]	; (4023e8 <main+0x28c>)
  402238:	4798      	blx	r3
	////	testPoint++;
	////}
	////----- CMOS Sensor Stuff
	////enableSourceClk(); //Turns on SCK1 from MCU to drive CMOS sensor

	imagingSensorLoadHeader();
  40223a:	4b6c      	ldr	r3, [pc, #432]	; (4023ec <main+0x290>)
  40223c:	4798      	blx	r3
	if (ledValue >= PWM_PERIOD_VALUE)
  40223e:	4b6c      	ldr	r3, [pc, #432]	; (4023f0 <main+0x294>)
  402240:	681b      	ldr	r3, [r3, #0]
  402242:	2bfe      	cmp	r3, #254	; 0xfe
  402244:	d902      	bls.n	40224c <main+0xf0>
		ledValue = 0;
  402246:	2200      	movs	r2, #0
  402248:	4b69      	ldr	r3, [pc, #420]	; (4023f0 <main+0x294>)
  40224a:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ledValue);
  40224c:	4b68      	ldr	r3, [pc, #416]	; (4023f0 <main+0x294>)
  40224e:	681a      	ldr	r2, [r3, #0]
  402250:	4968      	ldr	r1, [pc, #416]	; (4023f4 <main+0x298>)
  402252:	4869      	ldr	r0, [pc, #420]	; (4023f8 <main+0x29c>)
  402254:	4b69      	ldr	r3, [pc, #420]	; (4023fc <main+0x2a0>)
  402256:	4798      	blx	r3

	imagingSensorSetup(); //sets interrupts, configs IO pins for DMA CMOS sensor
  402258:	4b69      	ldr	r3, [pc, #420]	; (402400 <main+0x2a4>)
  40225a:	4798      	blx	r3

	#ifdef EV76C541
		imagingSensorConfigureEV76C541();
	#else
		imagingSensorConfigure(); //I2C config sensor
  40225c:	4b69      	ldr	r3, [pc, #420]	; (402404 <main+0x2a8>)
  40225e:	4798      	blx	r3
	#endif

	tick_start = time_tick_get();
  402260:	4b5a      	ldr	r3, [pc, #360]	; (4023cc <main+0x270>)
  402262:	4798      	blx	r3
  402264:	4b5a      	ldr	r3, [pc, #360]	; (4023d0 <main+0x274>)
  402266:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <5000) {}
  402268:	461e      	mov	r6, r3
  40226a:	4d58      	ldr	r5, [pc, #352]	; (4023cc <main+0x270>)
  40226c:	4c59      	ldr	r4, [pc, #356]	; (4023d4 <main+0x278>)
  40226e:	6837      	ldr	r7, [r6, #0]
  402270:	47a8      	blx	r5
  402272:	4601      	mov	r1, r0
  402274:	4638      	mov	r0, r7
  402276:	47a0      	blx	r4
  402278:	f241 3387 	movw	r3, #4999	; 0x1387
  40227c:	4298      	cmp	r0, r3
  40227e:	d9f6      	bls.n	40226e <main+0x112>
	//numFramesToRecord  =300;
	
	//DACC_updateOutput(ledValue,1);
//
	
	sd_mmc_init_write_blocks(SD_SLOT_NB,STARTING_BLOCK,50*NB_BLOCKS_PER_FRAME);	
  402280:	f242 7210 	movw	r2, #10000	; 0x2710
  402284:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402288:	2000      	movs	r0, #0
  40228a:	4b5f      	ldr	r3, [pc, #380]	; (402408 <main+0x2ac>)
  40228c:	4798      	blx	r3
	uint32_t curBlock = STARTING_BLOCK;
	uint32_t writeLineCount = 0;
	uint32_t writeCount = 0;
	tick_start = time_tick_get();
  40228e:	4b4f      	ldr	r3, [pc, #316]	; (4023cc <main+0x270>)
  402290:	4798      	blx	r3
  402292:	4b4f      	ldr	r3, [pc, #316]	; (4023d0 <main+0x274>)
  402294:	6018      	str	r0, [r3, #0]
	startRecording = 1;
  402296:	2201      	movs	r2, #1
  402298:	4b5c      	ldr	r3, [pc, #368]	; (40240c <main+0x2b0>)
  40229a:	701a      	strb	r2, [r3, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40229c:	4b4e      	ldr	r3, [pc, #312]	; (4023d8 <main+0x27c>)
  40229e:	2204      	movs	r2, #4
  4022a0:	631a      	str	r2, [r3, #48]	; 0x30
  4022a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4022a6:	631a      	str	r2, [r3, #48]	; 0x30
  4022a8:	2202      	movs	r2, #2
  4022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4022ae:	631a      	str	r2, [r3, #48]	; 0x30
	uint32_t curBlock = STARTING_BLOCK;
  4022b0:	f44f 6980 	mov.w	r9, #1024	; 0x400
	uint32_t writeFrameNum = 0;
  4022b4:	2400      	movs	r4, #0
				case (0):
					imageBuffer0[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
					sd_mmc_start_write_blocks(&imageBuffer0[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
					break;
				case (1):
					imageBuffer1[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  4022b6:	4f46      	ldr	r7, [pc, #280]	; (4023d0 <main+0x274>)
  4022b8:	4e44      	ldr	r6, [pc, #272]	; (4023cc <main+0x270>)
  4022ba:	4d46      	ldr	r5, [pc, #280]	; (4023d4 <main+0x278>)
  4022bc:	f8df a178 	ldr.w	sl, [pc, #376]	; 402438 <main+0x2dc>
  4022c0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 40243c <main+0x2e0>
  4022c4:	eb0a 0b08 	add.w	fp, sl, r8
  4022c8:	e02f      	b.n	40232a <main+0x1ce>
					imageBuffer0[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  4022ca:	683b      	ldr	r3, [r7, #0]
  4022cc:	9301      	str	r3, [sp, #4]
  4022ce:	47b0      	blx	r6
  4022d0:	4601      	mov	r1, r0
  4022d2:	9801      	ldr	r0, [sp, #4]
  4022d4:	47a8      	blx	r5
  4022d6:	4b4e      	ldr	r3, [pc, #312]	; (402410 <main+0x2b4>)
  4022d8:	f843 0008 	str.w	r0, [r3, r8]
					sd_mmc_start_write_blocks(&imageBuffer0[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  4022dc:	21c8      	movs	r1, #200	; 0xc8
  4022de:	4618      	mov	r0, r3
  4022e0:	4b4c      	ldr	r3, [pc, #304]	; (402414 <main+0x2b8>)
  4022e2:	4798      	blx	r3
					sd_mmc_start_write_blocks(&imageBuffer2[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
					break;
				}			
			#endif

			sd_mmc_wait_end_of_write_blocks(false);
  4022e4:	2000      	movs	r0, #0
  4022e6:	4b4c      	ldr	r3, [pc, #304]	; (402418 <main+0x2bc>)
  4022e8:	4798      	blx	r3
			writeFrameNum++;	
  4022ea:	3401      	adds	r4, #1
			sdImageWriteFrameNum = writeFrameNum;
  4022ec:	4b4b      	ldr	r3, [pc, #300]	; (40241c <main+0x2c0>)
  4022ee:	601c      	str	r4, [r3, #0]
			#ifdef EV76C541
				startRecording = 1;
			#endif
			#ifdef EV76C454_SUBSAMP
				//if (frameNumber>sdImageWriteFrameNum +1) {
					startRecording = 1;
  4022f0:	2201      	movs	r2, #1
  4022f2:	4b46      	ldr	r3, [pc, #280]	; (40240c <main+0x2b0>)
  4022f4:	701a      	strb	r2, [r3, #0]
			#endif
			#ifdef EV76C454
				startRecording = 1;
			#endif
			
			if (writeFrameNum%50 == 0) {
  4022f6:	4b4a      	ldr	r3, [pc, #296]	; (402420 <main+0x2c4>)
  4022f8:	fba3 2304 	umull	r2, r3, r3, r4
  4022fc:	091b      	lsrs	r3, r3, #4
  4022fe:	2232      	movs	r2, #50	; 0x32
  402300:	fb02 4313 	mls	r3, r2, r3, r4
  402304:	2b00      	cmp	r3, #0
  402306:	d03c      	beq.n	402382 <main+0x226>

		//valueLED = (valueLED+400)&0x0FFF; //higher value less bright
		//DACC_updateOutput(valueLED,1);

		//if (frameNumber>=numFramesToRecord){ //end at number of frames
		if (time_tick_calc_delay(tick_start, time_tick_get())>=numFramesToRecord*1000){
  402308:	683b      	ldr	r3, [r7, #0]
  40230a:	9301      	str	r3, [sp, #4]
  40230c:	47b0      	blx	r6
  40230e:	4601      	mov	r1, r0
  402310:	9801      	ldr	r0, [sp, #4]
  402312:	47a8      	blx	r5
  402314:	4b43      	ldr	r3, [pc, #268]	; (402424 <main+0x2c8>)
  402316:	681a      	ldr	r2, [r3, #0]
  402318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40231c:	fb03 f302 	mul.w	r3, r3, r2
  402320:	4298      	cmp	r0, r3
  402322:	d236      	bcs.n	402392 <main+0x236>
			while(1){}
		}
//			startRecording = 1;


		testPoint = 0;	
  402324:	2200      	movs	r2, #0
  402326:	4b40      	ldr	r3, [pc, #256]	; (402428 <main+0x2cc>)
  402328:	601a      	str	r2, [r3, #0]
		if (frameNumber > writeFrameNum) {
  40232a:	4b40      	ldr	r3, [pc, #256]	; (40242c <main+0x2d0>)
  40232c:	681b      	ldr	r3, [r3, #0]
  40232e:	429c      	cmp	r4, r3
  402330:	d2ea      	bcs.n	402308 <main+0x1ac>
				switch (writeFrameNum%3)
  402332:	4b3f      	ldr	r3, [pc, #252]	; (402430 <main+0x2d4>)
  402334:	fba3 2304 	umull	r2, r3, r3, r4
  402338:	085b      	lsrs	r3, r3, #1
  40233a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40233e:	1ae3      	subs	r3, r4, r3
  402340:	2b01      	cmp	r3, #1
  402342:	d011      	beq.n	402368 <main+0x20c>
  402344:	2b00      	cmp	r3, #0
  402346:	d0c0      	beq.n	4022ca <main+0x16e>
  402348:	2b02      	cmp	r3, #2
  40234a:	d1cb      	bne.n	4022e4 <main+0x188>
					imageBuffer2[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  40234c:	683b      	ldr	r3, [r7, #0]
  40234e:	9301      	str	r3, [sp, #4]
  402350:	47b0      	blx	r6
  402352:	4601      	mov	r1, r0
  402354:	9801      	ldr	r0, [sp, #4]
  402356:	47a8      	blx	r5
  402358:	4b36      	ldr	r3, [pc, #216]	; (402434 <main+0x2d8>)
  40235a:	f843 0008 	str.w	r0, [r3, r8]
					sd_mmc_start_write_blocks(&imageBuffer2[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  40235e:	21c8      	movs	r1, #200	; 0xc8
  402360:	4618      	mov	r0, r3
  402362:	4b2c      	ldr	r3, [pc, #176]	; (402414 <main+0x2b8>)
  402364:	4798      	blx	r3
					break;
  402366:	e7bd      	b.n	4022e4 <main+0x188>
					imageBuffer1[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  402368:	683b      	ldr	r3, [r7, #0]
  40236a:	9301      	str	r3, [sp, #4]
  40236c:	47b0      	blx	r6
  40236e:	4601      	mov	r1, r0
  402370:	9801      	ldr	r0, [sp, #4]
  402372:	47a8      	blx	r5
  402374:	f8cb 0000 	str.w	r0, [fp]
					sd_mmc_start_write_blocks(&imageBuffer1[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  402378:	21c8      	movs	r1, #200	; 0xc8
  40237a:	4650      	mov	r0, sl
  40237c:	4b25      	ldr	r3, [pc, #148]	; (402414 <main+0x2b8>)
  40237e:	4798      	blx	r3
					break;
  402380:	e7b0      	b.n	4022e4 <main+0x188>
				curBlock+= 50*NB_BLOCKS_PER_FRAME;
  402382:	f242 7210 	movw	r2, #10000	; 0x2710
  402386:	4491      	add	r9, r2
				sd_mmc_init_write_blocks(SD_SLOT_NB,curBlock,50*NB_BLOCKS_PER_FRAME);
  402388:	4649      	mov	r1, r9
  40238a:	2000      	movs	r0, #0
  40238c:	4b1e      	ldr	r3, [pc, #120]	; (402408 <main+0x2ac>)
  40238e:	4798      	blx	r3
  402390:	e7ba      	b.n	402308 <main+0x1ac>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402392:	2202      	movs	r2, #2
  402394:	4b0c      	ldr	r3, [pc, #48]	; (4023c8 <main+0x26c>)
  402396:	635a      	str	r2, [r3, #52]	; 0x34
  402398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40239c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4023a0:	635a      	str	r2, [r3, #52]	; 0x34
  4023a2:	e7fe      	b.n	4023a2 <main+0x246>
  4023a4:	400e1850 	.word	0x400e1850
  4023a8:	20400000 	.word	0x20400000
  4023ac:	00401351 	.word	0x00401351
  4023b0:	004016a9 	.word	0x004016a9
  4023b4:	004014e5 	.word	0x004014e5
  4023b8:	004019bd 	.word	0x004019bd
  4023bc:	00401309 	.word	0x00401309
  4023c0:	0040200d 	.word	0x0040200d
  4023c4:	004020c9 	.word	0x004020c9
  4023c8:	400e1400 	.word	0x400e1400
  4023cc:	00401335 	.word	0x00401335
  4023d0:	2044b518 	.word	0x2044b518
  4023d4:	00401341 	.word	0x00401341
  4023d8:	400e1000 	.word	0x400e1000
  4023dc:	0040027d 	.word	0x0040027d
  4023e0:	0040029d 	.word	0x0040029d
  4023e4:	004008f9 	.word	0x004008f9
  4023e8:	0040091d 	.word	0x0040091d
  4023ec:	00401d89 	.word	0x00401d89
  4023f0:	2044b4a0 	.word	0x2044b4a0
  4023f4:	2044b4c4 	.word	0x2044b4c4
  4023f8:	40020000 	.word	0x40020000
  4023fc:	004012b7 	.word	0x004012b7
  402400:	00401e15 	.word	0x00401e15
  402404:	00401a01 	.word	0x00401a01
  402408:	00400aa5 	.word	0x00400aa5
  40240c:	2044b4b8 	.word	0x2044b4b8
  402410:	204004a0 	.word	0x204004a0
  402414:	00400b31 	.word	0x00400b31
  402418:	00400b59 	.word	0x00400b59
  40241c:	2044b4b4 	.word	0x2044b4b4
  402420:	51eb851f 	.word	0x51eb851f
  402424:	2044b4a8 	.word	0x2044b4a8
  402428:	2044b4bc 	.word	0x2044b4bc
  40242c:	20400498 	.word	0x20400498
  402430:	aaaaaaab 	.word	0xaaaaaaab
  402434:	204324a0 	.word	0x204324a0
  402438:	204194a0 	.word	0x204194a0
  40243c:	00018ff8 	.word	0x00018ff8

00402440 <__libc_init_array>:
  402440:	b570      	push	{r4, r5, r6, lr}
  402442:	4e0f      	ldr	r6, [pc, #60]	; (402480 <__libc_init_array+0x40>)
  402444:	4d0f      	ldr	r5, [pc, #60]	; (402484 <__libc_init_array+0x44>)
  402446:	1b76      	subs	r6, r6, r5
  402448:	10b6      	asrs	r6, r6, #2
  40244a:	bf18      	it	ne
  40244c:	2400      	movne	r4, #0
  40244e:	d005      	beq.n	40245c <__libc_init_array+0x1c>
  402450:	3401      	adds	r4, #1
  402452:	f855 3b04 	ldr.w	r3, [r5], #4
  402456:	4798      	blx	r3
  402458:	42a6      	cmp	r6, r4
  40245a:	d1f9      	bne.n	402450 <__libc_init_array+0x10>
  40245c:	4e0a      	ldr	r6, [pc, #40]	; (402488 <__libc_init_array+0x48>)
  40245e:	4d0b      	ldr	r5, [pc, #44]	; (40248c <__libc_init_array+0x4c>)
  402460:	1b76      	subs	r6, r6, r5
  402462:	f000 f959 	bl	402718 <_init>
  402466:	10b6      	asrs	r6, r6, #2
  402468:	bf18      	it	ne
  40246a:	2400      	movne	r4, #0
  40246c:	d006      	beq.n	40247c <__libc_init_array+0x3c>
  40246e:	3401      	adds	r4, #1
  402470:	f855 3b04 	ldr.w	r3, [r5], #4
  402474:	4798      	blx	r3
  402476:	42a6      	cmp	r6, r4
  402478:	d1f9      	bne.n	40246e <__libc_init_array+0x2e>
  40247a:	bd70      	pop	{r4, r5, r6, pc}
  40247c:	bd70      	pop	{r4, r5, r6, pc}
  40247e:	bf00      	nop
  402480:	00402724 	.word	0x00402724
  402484:	00402724 	.word	0x00402724
  402488:	0040272c 	.word	0x0040272c
  40248c:	00402724 	.word	0x00402724

00402490 <memset>:
  402490:	b470      	push	{r4, r5, r6}
  402492:	0786      	lsls	r6, r0, #30
  402494:	d046      	beq.n	402524 <memset+0x94>
  402496:	1e54      	subs	r4, r2, #1
  402498:	2a00      	cmp	r2, #0
  40249a:	d041      	beq.n	402520 <memset+0x90>
  40249c:	b2ca      	uxtb	r2, r1
  40249e:	4603      	mov	r3, r0
  4024a0:	e002      	b.n	4024a8 <memset+0x18>
  4024a2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4024a6:	d33b      	bcc.n	402520 <memset+0x90>
  4024a8:	f803 2b01 	strb.w	r2, [r3], #1
  4024ac:	079d      	lsls	r5, r3, #30
  4024ae:	d1f8      	bne.n	4024a2 <memset+0x12>
  4024b0:	2c03      	cmp	r4, #3
  4024b2:	d92e      	bls.n	402512 <memset+0x82>
  4024b4:	b2cd      	uxtb	r5, r1
  4024b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4024ba:	2c0f      	cmp	r4, #15
  4024bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4024c0:	d919      	bls.n	4024f6 <memset+0x66>
  4024c2:	f103 0210 	add.w	r2, r3, #16
  4024c6:	4626      	mov	r6, r4
  4024c8:	3e10      	subs	r6, #16
  4024ca:	2e0f      	cmp	r6, #15
  4024cc:	f842 5c10 	str.w	r5, [r2, #-16]
  4024d0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4024d4:	f842 5c08 	str.w	r5, [r2, #-8]
  4024d8:	f842 5c04 	str.w	r5, [r2, #-4]
  4024dc:	f102 0210 	add.w	r2, r2, #16
  4024e0:	d8f2      	bhi.n	4024c8 <memset+0x38>
  4024e2:	f1a4 0210 	sub.w	r2, r4, #16
  4024e6:	f022 020f 	bic.w	r2, r2, #15
  4024ea:	f004 040f 	and.w	r4, r4, #15
  4024ee:	3210      	adds	r2, #16
  4024f0:	2c03      	cmp	r4, #3
  4024f2:	4413      	add	r3, r2
  4024f4:	d90d      	bls.n	402512 <memset+0x82>
  4024f6:	461e      	mov	r6, r3
  4024f8:	4622      	mov	r2, r4
  4024fa:	3a04      	subs	r2, #4
  4024fc:	2a03      	cmp	r2, #3
  4024fe:	f846 5b04 	str.w	r5, [r6], #4
  402502:	d8fa      	bhi.n	4024fa <memset+0x6a>
  402504:	1f22      	subs	r2, r4, #4
  402506:	f022 0203 	bic.w	r2, r2, #3
  40250a:	3204      	adds	r2, #4
  40250c:	4413      	add	r3, r2
  40250e:	f004 0403 	and.w	r4, r4, #3
  402512:	b12c      	cbz	r4, 402520 <memset+0x90>
  402514:	b2c9      	uxtb	r1, r1
  402516:	441c      	add	r4, r3
  402518:	f803 1b01 	strb.w	r1, [r3], #1
  40251c:	429c      	cmp	r4, r3
  40251e:	d1fb      	bne.n	402518 <memset+0x88>
  402520:	bc70      	pop	{r4, r5, r6}
  402522:	4770      	bx	lr
  402524:	4614      	mov	r4, r2
  402526:	4603      	mov	r3, r0
  402528:	e7c2      	b.n	4024b0 <memset+0x20>
  40252a:	bf00      	nop

0040252c <register_fini>:
  40252c:	4b02      	ldr	r3, [pc, #8]	; (402538 <register_fini+0xc>)
  40252e:	b113      	cbz	r3, 402536 <register_fini+0xa>
  402530:	4802      	ldr	r0, [pc, #8]	; (40253c <register_fini+0x10>)
  402532:	f000 b805 	b.w	402540 <atexit>
  402536:	4770      	bx	lr
  402538:	00000000 	.word	0x00000000
  40253c:	0040254d 	.word	0x0040254d

00402540 <atexit>:
  402540:	2300      	movs	r3, #0
  402542:	4601      	mov	r1, r0
  402544:	461a      	mov	r2, r3
  402546:	4618      	mov	r0, r3
  402548:	f000 b81e 	b.w	402588 <__register_exitproc>

0040254c <__libc_fini_array>:
  40254c:	b538      	push	{r3, r4, r5, lr}
  40254e:	4c0a      	ldr	r4, [pc, #40]	; (402578 <__libc_fini_array+0x2c>)
  402550:	4d0a      	ldr	r5, [pc, #40]	; (40257c <__libc_fini_array+0x30>)
  402552:	1b64      	subs	r4, r4, r5
  402554:	10a4      	asrs	r4, r4, #2
  402556:	d00a      	beq.n	40256e <__libc_fini_array+0x22>
  402558:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40255c:	3b01      	subs	r3, #1
  40255e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402562:	3c01      	subs	r4, #1
  402564:	f855 3904 	ldr.w	r3, [r5], #-4
  402568:	4798      	blx	r3
  40256a:	2c00      	cmp	r4, #0
  40256c:	d1f9      	bne.n	402562 <__libc_fini_array+0x16>
  40256e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402572:	f000 b8db 	b.w	40272c <_fini>
  402576:	bf00      	nop
  402578:	0040273c 	.word	0x0040273c
  40257c:	00402738 	.word	0x00402738

00402580 <__retarget_lock_acquire_recursive>:
  402580:	4770      	bx	lr
  402582:	bf00      	nop

00402584 <__retarget_lock_release_recursive>:
  402584:	4770      	bx	lr
  402586:	bf00      	nop

00402588 <__register_exitproc>:
  402588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40258c:	4d2c      	ldr	r5, [pc, #176]	; (402640 <__register_exitproc+0xb8>)
  40258e:	4606      	mov	r6, r0
  402590:	6828      	ldr	r0, [r5, #0]
  402592:	4698      	mov	r8, r3
  402594:	460f      	mov	r7, r1
  402596:	4691      	mov	r9, r2
  402598:	f7ff fff2 	bl	402580 <__retarget_lock_acquire_recursive>
  40259c:	4b29      	ldr	r3, [pc, #164]	; (402644 <__register_exitproc+0xbc>)
  40259e:	681c      	ldr	r4, [r3, #0]
  4025a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4025a4:	2b00      	cmp	r3, #0
  4025a6:	d03e      	beq.n	402626 <__register_exitproc+0x9e>
  4025a8:	685a      	ldr	r2, [r3, #4]
  4025aa:	2a1f      	cmp	r2, #31
  4025ac:	dc1c      	bgt.n	4025e8 <__register_exitproc+0x60>
  4025ae:	f102 0e01 	add.w	lr, r2, #1
  4025b2:	b176      	cbz	r6, 4025d2 <__register_exitproc+0x4a>
  4025b4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4025b8:	2401      	movs	r4, #1
  4025ba:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4025be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4025c2:	4094      	lsls	r4, r2
  4025c4:	4320      	orrs	r0, r4
  4025c6:	2e02      	cmp	r6, #2
  4025c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4025cc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4025d0:	d023      	beq.n	40261a <__register_exitproc+0x92>
  4025d2:	3202      	adds	r2, #2
  4025d4:	f8c3 e004 	str.w	lr, [r3, #4]
  4025d8:	6828      	ldr	r0, [r5, #0]
  4025da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4025de:	f7ff ffd1 	bl	402584 <__retarget_lock_release_recursive>
  4025e2:	2000      	movs	r0, #0
  4025e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025e8:	4b17      	ldr	r3, [pc, #92]	; (402648 <__register_exitproc+0xc0>)
  4025ea:	b30b      	cbz	r3, 402630 <__register_exitproc+0xa8>
  4025ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4025f0:	f3af 8000 	nop.w
  4025f4:	4603      	mov	r3, r0
  4025f6:	b1d8      	cbz	r0, 402630 <__register_exitproc+0xa8>
  4025f8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4025fc:	6002      	str	r2, [r0, #0]
  4025fe:	2100      	movs	r1, #0
  402600:	6041      	str	r1, [r0, #4]
  402602:	460a      	mov	r2, r1
  402604:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402608:	f04f 0e01 	mov.w	lr, #1
  40260c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402610:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402614:	2e00      	cmp	r6, #0
  402616:	d0dc      	beq.n	4025d2 <__register_exitproc+0x4a>
  402618:	e7cc      	b.n	4025b4 <__register_exitproc+0x2c>
  40261a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40261e:	430c      	orrs	r4, r1
  402620:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402624:	e7d5      	b.n	4025d2 <__register_exitproc+0x4a>
  402626:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40262a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40262e:	e7bb      	b.n	4025a8 <__register_exitproc+0x20>
  402630:	6828      	ldr	r0, [r5, #0]
  402632:	f7ff ffa7 	bl	402584 <__retarget_lock_release_recursive>
  402636:	f04f 30ff 	mov.w	r0, #4294967295
  40263a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40263e:	bf00      	nop
  402640:	20400438 	.word	0x20400438
  402644:	00402714 	.word	0x00402714
  402648:	00000000 	.word	0x00000000

0040264c <mmc_trans_multipliers>:
  40264c:	00000000 0000000a 0000000c 0000000d     ................
  40265c:	0000000f 00000014 0000001a 0000001e     ................
  40266c:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40267c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040268c <sd_mmc_trans_units>:
  40268c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

004026a8 <sd_trans_multipliers>:
  4026a8:	00000000 0000000a 0000000c 0000000d     ................
  4026b8:	0000000f 00000014 00000019 0000001e     ................
  4026c8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  4026d8:	00000037 0000003c 00000046 00000050     7...<...F...P...
  4026e8:	00000001 00000002 00000004 00000008     ................
  4026f8:	00000010 00000020 00000040 00000080     .... ...@.......
  402708:	00000100 00000200 00000400              ............

00402714 <_global_impure_ptr>:
  402714:	20400010                                ..@ 

00402718 <_init>:
  402718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40271a:	bf00      	nop
  40271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40271e:	bc08      	pop	{r3}
  402720:	469e      	mov	lr, r3
  402722:	4770      	bx	lr

00402724 <__init_array_start>:
  402724:	0040252d 	.word	0x0040252d

00402728 <__frame_dummy_init_array_entry>:
  402728:	00400165                                e.@.

0040272c <_fini>:
  40272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40272e:	bf00      	nop
  402730:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402732:	bc08      	pop	{r3}
  402734:	469e      	mov	lr, r3
  402736:	4770      	bx	lr

00402738 <__fini_array_start>:
  402738:	00400141 	.word	0x00400141
