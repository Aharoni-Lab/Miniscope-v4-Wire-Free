
MiniscopeUntethered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002728  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20400000  00402728  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0004b2dc  20400438  00402b60  00020438  2**3
                  ALLOC
  3 .stack        00002004  2044b714  0044de3c  00020438  2**0
                  ALLOC
  4 .heap         00000200  2044d718  0044fe40  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000d836  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fdf  00000000  00000000  0002dcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000538e  00000000  00000000  0002fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008a8  00000000  00000000  00035062  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000878  00000000  00000000  0003590a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d9f8  00000000  00000000  00036182  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ac92  00000000  00000000  00053b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087bee  00000000  00000000  0005e80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001448  00000000  00000000  000e63fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2044d718 	.word	0x2044d718
  400004:	00401795 	.word	0x00401795
  400008:	00401791 	.word	0x00401791
  40000c:	00401791 	.word	0x00401791
  400010:	00401791 	.word	0x00401791
  400014:	00401791 	.word	0x00401791
  400018:	00401791 	.word	0x00401791
	...
  40002c:	00401791 	.word	0x00401791
  400030:	00401791 	.word	0x00401791
  400034:	00000000 	.word	0x00000000
  400038:	00401791 	.word	0x00401791
  40003c:	00401301 	.word	0x00401301
  400040:	00401791 	.word	0x00401791
  400044:	00401791 	.word	0x00401791
  400048:	00401791 	.word	0x00401791
  40004c:	00401791 	.word	0x00401791
  400050:	00401791 	.word	0x00401791
  400054:	00401791 	.word	0x00401791
  400058:	00401791 	.word	0x00401791
  40005c:	00401791 	.word	0x00401791
  400060:	00401791 	.word	0x00401791
  400064:	00000000 	.word	0x00000000
  400068:	00401fd5 	.word	0x00401fd5
  40006c:	00401791 	.word	0x00401791
  400070:	00000000 	.word	0x00000000
  400074:	00401791 	.word	0x00401791
  400078:	00401791 	.word	0x00401791
  40007c:	00401791 	.word	0x00401791
  400080:	00401791 	.word	0x00401791
  400084:	00000000 	.word	0x00000000
  400088:	00401791 	.word	0x00401791
  40008c:	00401791 	.word	0x00401791
  400090:	00401791 	.word	0x00401791
  400094:	00401791 	.word	0x00401791
  400098:	00401791 	.word	0x00401791
  40009c:	00401791 	.word	0x00401791
  4000a0:	00401791 	.word	0x00401791
  4000a4:	00401791 	.word	0x00401791
	...
  4000b4:	00401791 	.word	0x00401791
  4000b8:	00401791 	.word	0x00401791
  4000bc:	00401791 	.word	0x00401791
  4000c0:	00401791 	.word	0x00401791
  4000c4:	00401791 	.word	0x00401791
  4000c8:	00401791 	.word	0x00401791
  4000cc:	00401791 	.word	0x00401791
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00401791 	.word	0x00401791
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00401791 	.word	0x00401791
  4000e0:	00401791 	.word	0x00401791
  4000e4:	00401791 	.word	0x00401791
  4000e8:	00401791 	.word	0x00401791
  4000ec:	00401791 	.word	0x00401791
  4000f0:	00401791 	.word	0x00401791
  4000f4:	00401791 	.word	0x00401791
  4000f8:	00401791 	.word	0x00401791
	...
  400108:	00401791 	.word	0x00401791
  40010c:	00401791 	.word	0x00401791
  400110:	00401791 	.word	0x00401791
	...
  400120:	00401791 	.word	0x00401791
  400124:	00401791 	.word	0x00401791
  400128:	00402015 	.word	0x00402015
  40012c:	00401791 	.word	0x00401791
  400130:	00401791 	.word	0x00401791
	...
  40013c:	00401791 	.word	0x00401791

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00402728 	.word	0x00402728

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	2040043c 	.word	0x2040043c
  400190:	00402728 	.word	0x00402728
  400194:	00402728 	.word	0x00402728
  400198:	00000000 	.word	0x00000000

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	4b06      	ldr	r3, [pc, #24]	; (4001b8 <sd_mmc_configure_slot+0x1c>)
  4001a0:	6819      	ldr	r1, [r3, #0]
  4001a2:	7f8b      	ldrb	r3, [r1, #30]
  4001a4:	3300      	adds	r3, #0
  4001a6:	bf18      	it	ne
  4001a8:	2301      	movne	r3, #1
  4001aa:	7b4a      	ldrb	r2, [r1, #13]
  4001ac:	6809      	ldr	r1, [r1, #0]
  4001ae:	4803      	ldr	r0, [pc, #12]	; (4001bc <sd_mmc_configure_slot+0x20>)
  4001b0:	7800      	ldrb	r0, [r0, #0]
  4001b2:	4c03      	ldr	r4, [pc, #12]	; (4001c0 <sd_mmc_configure_slot+0x24>)
  4001b4:	47a0      	blx	r4
  4001b6:	bd10      	pop	{r4, pc}
  4001b8:	20400458 	.word	0x20400458
  4001bc:	2040045e 	.word	0x2040045e
  4001c0:	00400cc9 	.word	0x00400cc9

004001c4 <sd_mmc_select_slot>:
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
  4001c4:	b9e8      	cbnz	r0, 400202 <sd_mmc_select_slot+0x3e>
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4001c6:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001c8:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sd_mmc_select_slot+0x44>)
  4001ca:	7a9b      	ldrb	r3, [r3, #10]
  4001cc:	3b03      	subs	r3, #3
  4001ce:	b2db      	uxtb	r3, r3
  4001d0:	2b01      	cmp	r3, #1
  4001d2:	d808      	bhi.n	4001e6 <sd_mmc_select_slot+0x22>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4001d4:	4b0c      	ldr	r3, [pc, #48]	; (400208 <sd_mmc_select_slot+0x44>)
  4001d6:	2202      	movs	r2, #2
  4001d8:	729a      	strb	r2, [r3, #10]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4001da:	4a0c      	ldr	r2, [pc, #48]	; (40020c <sd_mmc_select_slot+0x48>)
  4001dc:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4001de:	2201      	movs	r2, #1
  4001e0:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4001e2:	2200      	movs	r2, #0
  4001e4:	779a      	strb	r2, [r3, #30]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  4001e6:	2200      	movs	r2, #0
  4001e8:	4b09      	ldr	r3, [pc, #36]	; (400210 <sd_mmc_select_slot+0x4c>)
  4001ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ec:	4c06      	ldr	r4, [pc, #24]	; (400208 <sd_mmc_select_slot+0x44>)
  4001ee:	4b09      	ldr	r3, [pc, #36]	; (400214 <sd_mmc_select_slot+0x50>)
  4001f0:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f2:	4b09      	ldr	r3, [pc, #36]	; (400218 <sd_mmc_select_slot+0x54>)
  4001f4:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  4001f6:	7aa0      	ldrb	r0, [r4, #10]
  4001f8:	2802      	cmp	r0, #2
  4001fa:	bf14      	ite	ne
  4001fc:	2000      	movne	r0, #0
  4001fe:	2001      	moveq	r0, #1
  400200:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  400202:	2004      	movs	r0, #4
  400204:	4770      	bx	lr
  400206:	bf00      	nop
  400208:	20400460 	.word	0x20400460
  40020c:	00061a80 	.word	0x00061a80
  400210:	2040045e 	.word	0x2040045e
  400214:	20400458 	.word	0x20400458
  400218:	0040019d 	.word	0x0040019d

0040021c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  40021c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40021e:	4b08      	ldr	r3, [pc, #32]	; (400240 <sd_mmc_cmd9_mci+0x24>)
  400220:	681b      	ldr	r3, [r3, #0]
  400222:	8919      	ldrh	r1, [r3, #8]
  400224:	0409      	lsls	r1, r1, #16
  400226:	f641 3009 	movw	r0, #6921	; 0x1b09
  40022a:	4b06      	ldr	r3, [pc, #24]	; (400244 <sd_mmc_cmd9_mci+0x28>)
  40022c:	4798      	blx	r3
  40022e:	4604      	mov	r4, r0
  400230:	b120      	cbz	r0, 40023c <sd_mmc_cmd9_mci+0x20>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  400232:	4b03      	ldr	r3, [pc, #12]	; (400240 <sd_mmc_cmd9_mci+0x24>)
  400234:	6818      	ldr	r0, [r3, #0]
  400236:	300e      	adds	r0, #14
  400238:	4b03      	ldr	r3, [pc, #12]	; (400248 <sd_mmc_cmd9_mci+0x2c>)
  40023a:	4798      	blx	r3
	return true;
}
  40023c:	4620      	mov	r0, r4
  40023e:	bd10      	pop	{r4, pc}
  400240:	20400458 	.word	0x20400458
  400244:	00400d61 	.word	0x00400d61
  400248:	00400d8d 	.word	0x00400d8d

0040024c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40024c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40024e:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_deselect_slot+0x10>)
  400250:	781b      	ldrb	r3, [r3, #0]
  400252:	b913      	cbnz	r3, 40025a <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
  400254:	2000      	movs	r0, #0
  400256:	4b02      	ldr	r3, [pc, #8]	; (400260 <sd_mmc_deselect_slot+0x14>)
  400258:	4798      	blx	r3
  40025a:	bd08      	pop	{r3, pc}
  40025c:	2040045e 	.word	0x2040045e
  400260:	00400d39 	.word	0x00400d39

00400264 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400264:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400266:	2204      	movs	r2, #4
  400268:	4b03      	ldr	r3, [pc, #12]	; (400278 <sd_mmc_init+0x14>)
  40026a:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40026c:	22ff      	movs	r2, #255	; 0xff
  40026e:	4b03      	ldr	r3, [pc, #12]	; (40027c <sd_mmc_init+0x18>)
  400270:	701a      	strb	r2, [r3, #0]
	driver_init();
  400272:	4b03      	ldr	r3, [pc, #12]	; (400280 <sd_mmc_init+0x1c>)
  400274:	4798      	blx	r3
  400276:	bd08      	pop	{r3, pc}
  400278:	20400460 	.word	0x20400460
  40027c:	2040045e 	.word	0x2040045e
  400280:	00400c8d 	.word	0x00400c8d

00400284 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400288:	b094      	sub	sp, #80	; 0x50
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40028a:	4b96      	ldr	r3, [pc, #600]	; (4004e4 <sd_mmc_check+0x260>)
  40028c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40028e:	2801      	cmp	r0, #1
  400290:	d004      	beq.n	40029c <sd_mmc_check+0x18>
  400292:	4604      	mov	r4, r0
		sd_mmc_deselect_slot();
  400294:	4b94      	ldr	r3, [pc, #592]	; (4004e8 <sd_mmc_check+0x264>)
  400296:	4798      	blx	r3
		return sd_mmc_err;
  400298:	4620      	mov	r0, r4
  40029a:	e310      	b.n	4008be <sd_mmc_check+0x63a>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  40029c:	4b93      	ldr	r3, [pc, #588]	; (4004ec <sd_mmc_check+0x268>)
  40029e:	681b      	ldr	r3, [r3, #0]
  4002a0:	2201      	movs	r2, #1
  4002a2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002a4:	2400      	movs	r4, #0
  4002a6:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca = 0;
  4002a8:	811c      	strh	r4, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  4002aa:	4b91      	ldr	r3, [pc, #580]	; (4004f0 <sd_mmc_check+0x26c>)
  4002ac:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002ae:	4621      	mov	r1, r4
  4002b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002b4:	4b8f      	ldr	r3, [pc, #572]	; (4004f4 <sd_mmc_check+0x270>)
  4002b6:	4798      	blx	r3
  4002b8:	2800      	cmp	r0, #0
  4002ba:	f000 82be 	beq.w	40083a <sd_mmc_check+0x5b6>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002c2:	f245 5008 	movw	r0, #21768	; 0x5508
  4002c6:	4b8b      	ldr	r3, [pc, #556]	; (4004f4 <sd_mmc_check+0x270>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	f000 82bd 	beq.w	40084a <sd_mmc_check+0x5c6>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  4002d0:	4b89      	ldr	r3, [pc, #548]	; (4004f8 <sd_mmc_check+0x274>)
  4002d2:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  4002d4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4002d8:	f000 82b9 	beq.w	40084e <sd_mmc_check+0x5ca>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  4002dc:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4002e0:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  4002e4:	f040 82a9 	bne.w	40083a <sd_mmc_check+0x5b6>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4002e8:	2201      	movs	r2, #1
  4002ea:	e2b1      	b.n	400850 <sd_mmc_check+0x5cc>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4002ec:	4641      	mov	r1, r8
  4002ee:	f241 1037 	movw	r0, #4407	; 0x1137
  4002f2:	47a8      	blx	r5
  4002f4:	2800      	cmp	r0, #0
  4002f6:	f000 82be 	beq.w	400876 <sd_mmc_check+0x5f2>
		arg = SD_MMC_VOLTAGE_SUPPORT;
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4002fa:	4631      	mov	r1, r6
  4002fc:	f244 5029 	movw	r0, #17705	; 0x4529
  400300:	47a8      	blx	r5
  400302:	2800      	cmp	r0, #0
  400304:	f000 82b7 	beq.w	400876 <sd_mmc_check+0x5f2>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400308:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40030a:	2800      	cmp	r0, #0
  40030c:	da0a      	bge.n	400324 <sd_mmc_check+0xa0>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  40030e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400312:	f000 82bc 	beq.w	40088e <sd_mmc_check+0x60a>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400316:	4b75      	ldr	r3, [pc, #468]	; (4004ec <sd_mmc_check+0x268>)
  400318:	681a      	ldr	r2, [r3, #0]
  40031a:	7ad3      	ldrb	r3, [r2, #11]
  40031c:	f043 0308 	orr.w	r3, r3, #8
  400320:	72d3      	strb	r3, [r2, #11]
  400322:	e2b4      	b.n	40088e <sd_mmc_check+0x60a>
			}
			break;
		}
		if (retry-- == 0) {
  400324:	3c01      	subs	r4, #1
  400326:	d1e1      	bne.n	4002ec <sd_mmc_check+0x68>
  400328:	e2a5      	b.n	400876 <sd_mmc_check+0x5f2>
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40032a:	f241 0469 	movw	r4, #4201	; 0x1069
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40032e:	4f73      	ldr	r7, [pc, #460]	; (4004fc <sd_mmc_check+0x278>)
  400330:	4e70      	ldr	r6, [pc, #448]	; (4004f4 <sd_mmc_check+0x270>)
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400332:	4d71      	ldr	r5, [pc, #452]	; (4004f8 <sd_mmc_check+0x274>)
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400334:	4639      	mov	r1, r7
  400336:	f244 5001 	movw	r0, #17665	; 0x4501
  40033a:	47b0      	blx	r6
  40033c:	2800      	cmp	r0, #0
  40033e:	f000 827c 	beq.w	40083a <sd_mmc_check+0x5b6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400342:	47a8      	blx	r5
		if (resp & OCR_POWER_UP_BUSY) {
  400344:	2800      	cmp	r0, #0
  400346:	da0c      	bge.n	400362 <sd_mmc_check+0xde>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  400348:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40034c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400350:	f040 82a5 	bne.w	40089e <sd_mmc_check+0x61a>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  400354:	4b65      	ldr	r3, [pc, #404]	; (4004ec <sd_mmc_check+0x268>)
  400356:	681a      	ldr	r2, [r3, #0]
  400358:	7ad3      	ldrb	r3, [r2, #11]
  40035a:	f043 0308 	orr.w	r3, r3, #8
  40035e:	72d3      	strb	r3, [r2, #11]
  400360:	e29d      	b.n	40089e <sd_mmc_check+0x61a>
			}
			break;
		}
		if (retry-- == 0) {
  400362:	3c01      	subs	r4, #1
  400364:	d1e6      	bne.n	400334 <sd_mmc_check+0xb0>
  400366:	e268      	b.n	40083a <sd_mmc_check+0x5b6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  400368:	4b60      	ldr	r3, [pc, #384]	; (4004ec <sd_mmc_check+0x268>)
  40036a:	681b      	ldr	r3, [r3, #0]
  40036c:	2201      	movs	r2, #1
  40036e:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400370:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400374:	f241 1003 	movw	r0, #4355	; 0x1103
  400378:	4b5e      	ldr	r3, [pc, #376]	; (4004f4 <sd_mmc_check+0x270>)
  40037a:	4798      	blx	r3
  40037c:	2800      	cmp	r0, #0
  40037e:	f000 825c 	beq.w	40083a <sd_mmc_check+0x5b6>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  400382:	4b5f      	ldr	r3, [pc, #380]	; (400500 <sd_mmc_check+0x27c>)
  400384:	4798      	blx	r3
  400386:	2800      	cmp	r0, #0
  400388:	f000 8257 	beq.w	40083a <sd_mmc_check+0x5b6>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  40038c:	4b57      	ldr	r3, [pc, #348]	; (4004ec <sd_mmc_check+0x268>)
  40038e:	6819      	ldr	r1, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400390:	7b8b      	ldrb	r3, [r1, #14]
  400392:	f3c3 0383 	ubfx	r3, r3, #2, #4
  400396:	3b01      	subs	r3, #1
  400398:	2b03      	cmp	r3, #3
  40039a:	d803      	bhi.n	4003a4 <sd_mmc_check+0x120>
  40039c:	e8df f003 	tbb	[pc, r3]
  4003a0:	0e0b0805 	.word	0x0e0b0805
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4003a4:	2312      	movs	r3, #18
  4003a6:	730b      	strb	r3, [r1, #12]
  4003a8:	e00a      	b.n	4003c0 <sd_mmc_check+0x13c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4003aa:	2314      	movs	r3, #20
  4003ac:	730b      	strb	r3, [r1, #12]
  4003ae:	e007      	b.n	4003c0 <sd_mmc_check+0x13c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4003b0:	2322      	movs	r3, #34	; 0x22
  4003b2:	730b      	strb	r3, [r1, #12]
  4003b4:	e004      	b.n	4003c0 <sd_mmc_check+0x13c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  4003b6:	2330      	movs	r3, #48	; 0x30
  4003b8:	730b      	strb	r3, [r1, #12]
  4003ba:	e001      	b.n	4003c0 <sd_mmc_check+0x13c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  4003bc:	2340      	movs	r3, #64	; 0x40
  4003be:	730b      	strb	r3, [r1, #12]
  4003c0:	7c4b      	ldrb	r3, [r1, #17]
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4003c2:	f3c3 00c3 	ubfx	r0, r3, #3, #4
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4003c6:	f003 0307 	and.w	r3, r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  4003ca:	4a4e      	ldr	r2, [pc, #312]	; (400504 <sd_mmc_check+0x280>)
  4003cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4003d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4003d4:	fb03 f302 	mul.w	r3, r3, r2
  4003d8:	4a4b      	ldr	r2, [pc, #300]	; (400508 <sd_mmc_check+0x284>)
  4003da:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
  4003de:	fb03 f302 	mul.w	r3, r3, r2
  4003e2:	600b      	str	r3, [r1, #0]
  4003e4:	7d88      	ldrb	r0, [r1, #22]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4003e6:	7d4b      	ldrb	r3, [r1, #21]
  4003e8:	7d0a      	ldrb	r2, [r1, #20]
  4003ea:	0292      	lsls	r2, r2, #10
  4003ec:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  4003f0:	ea43 13a0 	orr.w	r3, r3, r0, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  4003f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4003f8:	f640 72ff 	movw	r2, #4095	; 0xfff
  4003fc:	4293      	cmp	r3, r2
  4003fe:	d00f      	beq.n	400420 <sd_mmc_check+0x19c>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400400:	7e08      	ldrb	r0, [r1, #24]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400402:	7dca      	ldrb	r2, [r1, #23]
  400404:	0052      	lsls	r2, r2, #1
  400406:	ea42 12e0 	orr.w	r2, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40040a:	3301      	adds	r3, #1
  40040c:	f002 0207 	and.w	r2, r2, #7
  400410:	3202      	adds	r2, #2
  400412:	4093      	lsls	r3, r2
  400414:	7cca      	ldrb	r2, [r1, #19]
  400416:	f002 020f 	and.w	r2, r2, #15
  40041a:	4093      	lsls	r3, r2
  40041c:	0a9b      	lsrs	r3, r3, #10
  40041e:	604b      	str	r3, [r1, #4]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400420:	8909      	ldrh	r1, [r1, #8]
  400422:	0409      	lsls	r1, r1, #16
  400424:	f243 1007 	movw	r0, #12551	; 0x3107
  400428:	4b32      	ldr	r3, [pc, #200]	; (4004f4 <sd_mmc_check+0x270>)
  40042a:	4798      	blx	r3
  40042c:	2800      	cmp	r0, #0
  40042e:	f000 8204 	beq.w	40083a <sd_mmc_check+0x5b6>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400432:	4b2e      	ldr	r3, [pc, #184]	; (4004ec <sd_mmc_check+0x268>)
  400434:	681b      	ldr	r3, [r3, #0]
  400436:	7b1b      	ldrb	r3, [r3, #12]
  400438:	2b3f      	cmp	r3, #63	; 0x3f
  40043a:	f240 80a3 	bls.w	400584 <sd_mmc_check+0x300>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40043e:	2100      	movs	r1, #0
  400440:	9100      	str	r1, [sp, #0]
  400442:	2301      	movs	r3, #1
  400444:	f44f 7200 	mov.w	r2, #512	; 0x200
  400448:	4830      	ldr	r0, [pc, #192]	; (40050c <sd_mmc_check+0x288>)
  40044a:	4c31      	ldr	r4, [pc, #196]	; (400510 <sd_mmc_check+0x28c>)
  40044c:	47a0      	blx	r4
  40044e:	2800      	cmp	r0, #0
  400450:	f000 81f3 	beq.w	40083a <sd_mmc_check+0x5b6>
  400454:	2400      	movs	r4, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  400456:	4d2f      	ldr	r5, [pc, #188]	; (400514 <sd_mmc_check+0x290>)
  400458:	a803      	add	r0, sp, #12
  40045a:	47a8      	blx	r5
  40045c:	2800      	cmp	r0, #0
  40045e:	f000 81ec 	beq.w	40083a <sd_mmc_check+0x5b6>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400462:	3401      	adds	r4, #1
  400464:	b2a4      	uxth	r4, r4
  400466:	2c32      	cmp	r4, #50	; 0x32
  400468:	d1f6      	bne.n	400458 <sd_mmc_check+0x1d4>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  40046a:	9b03      	ldr	r3, [sp, #12]
  40046c:	f003 0302 	and.w	r3, r3, #2
  400470:	b2dd      	uxtb	r5, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400472:	4b1e      	ldr	r3, [pc, #120]	; (4004ec <sd_mmc_check+0x268>)
  400474:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400476:	7d91      	ldrb	r1, [r2, #22]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400478:	7d53      	ldrb	r3, [r2, #21]
  40047a:	7d12      	ldrb	r2, [r2, #20]
  40047c:	0292      	lsls	r2, r2, #10
  40047e:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
  400482:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  400486:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40048a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40048e:	4293      	cmp	r3, r2
  400490:	d10e      	bne.n	4004b0 <sd_mmc_check+0x22c>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  400492:	4e20      	ldr	r6, [pc, #128]	; (400514 <sd_mmc_check+0x290>)
  400494:	a804      	add	r0, sp, #16
  400496:	47b0      	blx	r6
  400498:	2800      	cmp	r0, #0
  40049a:	f000 81ce 	beq.w	40083a <sd_mmc_check+0x5b6>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  40049e:	3401      	adds	r4, #1
  4004a0:	b2a4      	uxth	r4, r4
  4004a2:	2c35      	cmp	r4, #53	; 0x35
  4004a4:	d9f6      	bls.n	400494 <sd_mmc_check+0x210>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4004a6:	4b11      	ldr	r3, [pc, #68]	; (4004ec <sd_mmc_check+0x268>)
  4004a8:	681a      	ldr	r2, [r3, #0]
  4004aa:	9b04      	ldr	r3, [sp, #16]
  4004ac:	085b      	lsrs	r3, r3, #1
  4004ae:	6053      	str	r3, [r2, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  4004b0:	4e18      	ldr	r6, [pc, #96]	; (400514 <sd_mmc_check+0x290>)
  4004b2:	e006      	b.n	4004c2 <sd_mmc_check+0x23e>
  4004b4:	a804      	add	r0, sp, #16
  4004b6:	47b0      	blx	r6
  4004b8:	2800      	cmp	r0, #0
  4004ba:	f000 81be 	beq.w	40083a <sd_mmc_check+0x5b6>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4004be:	3401      	adds	r4, #1
  4004c0:	b2a4      	uxth	r4, r4
  4004c2:	2c7f      	cmp	r4, #127	; 0x7f
  4004c4:	d9f6      	bls.n	4004b4 <sd_mmc_check+0x230>
  4004c6:	e1f2      	b.n	4008ae <sd_mmc_check+0x62a>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4004c8:	4b13      	ldr	r3, [pc, #76]	; (400518 <sd_mmc_check+0x294>)
  4004ca:	7818      	ldrb	r0, [r3, #0]
  4004cc:	4b13      	ldr	r3, [pc, #76]	; (40051c <sd_mmc_check+0x298>)
  4004ce:	4798      	blx	r3
  4004d0:	4604      	mov	r4, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  4004d2:	2804      	cmp	r0, #4
  4004d4:	d028      	beq.n	400528 <sd_mmc_check+0x2a4>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4004d6:	4912      	ldr	r1, [pc, #72]	; (400520 <sd_mmc_check+0x29c>)
  4004d8:	4b12      	ldr	r3, [pc, #72]	; (400524 <sd_mmc_check+0x2a0>)
  4004da:	2808      	cmp	r0, #8
  4004dc:	bf08      	it	eq
  4004de:	4619      	moveq	r1, r3
  4004e0:	e023      	b.n	40052a <sd_mmc_check+0x2a6>
  4004e2:	bf00      	nop
  4004e4:	004001c5 	.word	0x004001c5
  4004e8:	0040024d 	.word	0x0040024d
  4004ec:	20400458 	.word	0x20400458
  4004f0:	00400d3d 	.word	0x00400d3d
  4004f4:	00400d61 	.word	0x00400d61
  4004f8:	00400d85 	.word	0x00400d85
  4004fc:	401f8000 	.word	0x401f8000
  400500:	0040021d 	.word	0x0040021d
  400504:	00402674 	.word	0x00402674
  400508:	00402690 	.word	0x00402690
  40050c:	00081108 	.word	0x00081108
  400510:	00400dbd 	.word	0x00400dbd
  400514:	00400e85 	.word	0x00400e85
  400518:	2040045e 	.word	0x2040045e
  40051c:	00400cb9 	.word	0x00400cb9
  400520:	01b70000 	.word	0x01b70000
  400524:	01b70200 	.word	0x01b70200
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400528:	4976      	ldr	r1, [pc, #472]	; (400704 <sd_mmc_check+0x480>)
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40052a:	f243 1006 	movw	r0, #12550	; 0x3106
  40052e:	4b76      	ldr	r3, [pc, #472]	; (400708 <sd_mmc_check+0x484>)
  400530:	4798      	blx	r3
  400532:	2800      	cmp	r0, #0
  400534:	f000 8181 	beq.w	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400538:	4b74      	ldr	r3, [pc, #464]	; (40070c <sd_mmc_check+0x488>)
  40053a:	4798      	blx	r3
  40053c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400540:	f040 817b 	bne.w	40083a <sd_mmc_check+0x5b6>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400544:	4b72      	ldr	r3, [pc, #456]	; (400710 <sd_mmc_check+0x48c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	735c      	strb	r4, [r3, #13]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40054a:	4b72      	ldr	r3, [pc, #456]	; (400714 <sd_mmc_check+0x490>)
  40054c:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  40054e:	4b72      	ldr	r3, [pc, #456]	; (400718 <sd_mmc_check+0x494>)
  400550:	4798      	blx	r3
  400552:	b1fd      	cbz	r5, 400594 <sd_mmc_check+0x310>
  400554:	b1f0      	cbz	r0, 400594 <sd_mmc_check+0x310>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400556:	4971      	ldr	r1, [pc, #452]	; (40071c <sd_mmc_check+0x498>)
  400558:	f243 1006 	movw	r0, #12550	; 0x3106
  40055c:	4b6a      	ldr	r3, [pc, #424]	; (400708 <sd_mmc_check+0x484>)
  40055e:	4798      	blx	r3
  400560:	2800      	cmp	r0, #0
  400562:	f000 816a 	beq.w	40083a <sd_mmc_check+0x5b6>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400566:	4b69      	ldr	r3, [pc, #420]	; (40070c <sd_mmc_check+0x488>)
  400568:	4798      	blx	r3
  40056a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40056e:	f040 8164 	bne.w	40083a <sd_mmc_check+0x5b6>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  400572:	4b67      	ldr	r3, [pc, #412]	; (400710 <sd_mmc_check+0x48c>)
  400574:	681b      	ldr	r3, [r3, #0]
  400576:	2201      	movs	r2, #1
  400578:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40057a:	4a69      	ldr	r2, [pc, #420]	; (400720 <sd_mmc_check+0x49c>)
  40057c:	601a      	str	r2, [r3, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  40057e:	4b65      	ldr	r3, [pc, #404]	; (400714 <sd_mmc_check+0x490>)
  400580:	4798      	blx	r3
  400582:	e007      	b.n	400594 <sd_mmc_check+0x310>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  400584:	4b63      	ldr	r3, [pc, #396]	; (400714 <sd_mmc_check+0x490>)
  400586:	4798      	blx	r3
  400588:	e004      	b.n	400594 <sd_mmc_check+0x310>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40058a:	4639      	mov	r1, r7
  40058c:	4630      	mov	r0, r6
  40058e:	47a8      	blx	r5
  400590:	b138      	cbz	r0, 4005a2 <sd_mmc_check+0x31e>
  400592:	e14a      	b.n	40082a <sd_mmc_check+0x5a6>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400594:	240a      	movs	r4, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400596:	f44f 7700 	mov.w	r7, #512	; 0x200
  40059a:	f241 1610 	movw	r6, #4368	; 0x1110
  40059e:	4d5a      	ldr	r5, [pc, #360]	; (400708 <sd_mmc_check+0x484>)
  4005a0:	e7f3      	b.n	40058a <sd_mmc_check+0x306>
  4005a2:	3c01      	subs	r4, #1
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4005a4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  4005a8:	d1ef      	bne.n	40058a <sd_mmc_check+0x306>
  4005aa:	e146      	b.n	40083a <sd_mmc_check+0x5b6>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4005ac:	2100      	movs	r1, #0
  4005ae:	f645 3002 	movw	r0, #23298	; 0x5b02
  4005b2:	4b55      	ldr	r3, [pc, #340]	; (400708 <sd_mmc_check+0x484>)
  4005b4:	4798      	blx	r3
  4005b6:	2800      	cmp	r0, #0
  4005b8:	f000 813f 	beq.w	40083a <sd_mmc_check+0x5b6>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  4005bc:	2100      	movs	r1, #0
  4005be:	f245 1003 	movw	r0, #20739	; 0x5103
  4005c2:	4b51      	ldr	r3, [pc, #324]	; (400708 <sd_mmc_check+0x484>)
  4005c4:	4798      	blx	r3
  4005c6:	2800      	cmp	r0, #0
  4005c8:	f000 8137 	beq.w	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  4005cc:	4c50      	ldr	r4, [pc, #320]	; (400710 <sd_mmc_check+0x48c>)
  4005ce:	6825      	ldr	r5, [r4, #0]
  4005d0:	4b4e      	ldr	r3, [pc, #312]	; (40070c <sd_mmc_check+0x488>)
  4005d2:	4798      	blx	r3
  4005d4:	0c00      	lsrs	r0, r0, #16
  4005d6:	8128      	strh	r0, [r5, #8]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005d8:	6823      	ldr	r3, [r4, #0]
  4005da:	7adb      	ldrb	r3, [r3, #11]
  4005dc:	f013 0f01 	tst.w	r3, #1
  4005e0:	d041      	beq.n	400666 <sd_mmc_check+0x3e2>
		if (!sd_mmc_cmd9_mci()) {
  4005e2:	4b50      	ldr	r3, [pc, #320]	; (400724 <sd_mmc_check+0x4a0>)
  4005e4:	4798      	blx	r3
  4005e6:	2800      	cmp	r0, #0
  4005e8:	f000 8127 	beq.w	40083a <sd_mmc_check+0x5b6>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4005ec:	6823      	ldr	r3, [r4, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005ee:	7c5a      	ldrb	r2, [r3, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  4005f0:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4005f4:	f002 0207 	and.w	r2, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  4005f8:	494b      	ldr	r1, [pc, #300]	; (400728 <sd_mmc_check+0x4a4>)
  4005fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4005fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400602:	fb02 f201 	mul.w	r2, r2, r1
  400606:	4949      	ldr	r1, [pc, #292]	; (40072c <sd_mmc_check+0x4a8>)
  400608:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40060c:	fb02 f201 	mul.w	r2, r2, r1
  400610:	601a      	str	r2, [r3, #0]
  400612:	7b9a      	ldrb	r2, [r3, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400614:	0992      	lsrs	r2, r2, #6
  400616:	d00c      	beq.n	400632 <sd_mmc_check+0x3ae>
  400618:	7dda      	ldrb	r2, [r3, #23]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40061a:	7d98      	ldrb	r0, [r3, #22]
  40061c:	7d59      	ldrb	r1, [r3, #21]
  40061e:	0409      	lsls	r1, r1, #16
  400620:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  400624:	430a      	orrs	r2, r1
		sd_mmc_card->capacity =
  400626:	f3c2 0215 	ubfx	r2, r2, #0, #22
  40062a:	3201      	adds	r2, #1
  40062c:	0252      	lsls	r2, r2, #9
  40062e:	605a      	str	r2, [r3, #4]
  400630:	e019      	b.n	400666 <sd_mmc_check+0x3e2>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400632:	7d98      	ldrb	r0, [r3, #22]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400634:	7d5a      	ldrb	r2, [r3, #21]
  400636:	7d19      	ldrb	r1, [r3, #20]
  400638:	0289      	lsls	r1, r1, #10
  40063a:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
  40063e:	ea42 12a0 	orr.w	r2, r2, r0, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400642:	7e18      	ldrb	r0, [r3, #24]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400644:	7dd9      	ldrb	r1, [r3, #23]
  400646:	0049      	lsls	r1, r1, #1
  400648:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40064c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400650:	3201      	adds	r2, #1
  400652:	f001 0107 	and.w	r1, r1, #7
  400656:	3102      	adds	r1, #2
  400658:	408a      	lsls	r2, r1
  40065a:	7cd9      	ldrb	r1, [r3, #19]
  40065c:	f001 010f 	and.w	r1, r1, #15
  400660:	408a      	lsls	r2, r1
  400662:	0a92      	lsrs	r2, r2, #10
  400664:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  400666:	4b2a      	ldr	r3, [pc, #168]	; (400710 <sd_mmc_check+0x48c>)
  400668:	681b      	ldr	r3, [r3, #0]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40066a:	8919      	ldrh	r1, [r3, #8]
  40066c:	0409      	lsls	r1, r1, #16
  40066e:	f243 1007 	movw	r0, #12551	; 0x3107
  400672:	4b25      	ldr	r3, [pc, #148]	; (400708 <sd_mmc_check+0x484>)
  400674:	4798      	blx	r3
  400676:	2800      	cmp	r0, #0
  400678:	f000 80df 	beq.w	40083a <sd_mmc_check+0x5b6>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40067c:	4b24      	ldr	r3, [pc, #144]	; (400710 <sd_mmc_check+0x48c>)
  40067e:	681b      	ldr	r3, [r3, #0]
  400680:	7ada      	ldrb	r2, [r3, #11]
  400682:	f012 0f01 	tst.w	r2, #1
  400686:	d05f      	beq.n	400748 <sd_mmc_check+0x4c4>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400688:	8919      	ldrh	r1, [r3, #8]
  40068a:	0409      	lsls	r1, r1, #16
  40068c:	f241 1037 	movw	r0, #4407	; 0x1137
  400690:	4b1d      	ldr	r3, [pc, #116]	; (400708 <sd_mmc_check+0x484>)
  400692:	4798      	blx	r3
  400694:	2800      	cmp	r0, #0
  400696:	f000 80d0 	beq.w	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  40069a:	2301      	movs	r3, #1
  40069c:	9300      	str	r3, [sp, #0]
  40069e:	2208      	movs	r2, #8
  4006a0:	2100      	movs	r1, #0
  4006a2:	4823      	ldr	r0, [pc, #140]	; (400730 <sd_mmc_check+0x4ac>)
  4006a4:	4c23      	ldr	r4, [pc, #140]	; (400734 <sd_mmc_check+0x4b0>)
  4006a6:	47a0      	blx	r4
  4006a8:	2800      	cmp	r0, #0
  4006aa:	f000 80c6 	beq.w	40083a <sd_mmc_check+0x5b6>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  4006ae:	2101      	movs	r1, #1
  4006b0:	a804      	add	r0, sp, #16
  4006b2:	4b21      	ldr	r3, [pc, #132]	; (400738 <sd_mmc_check+0x4b4>)
  4006b4:	4798      	blx	r3
  4006b6:	2800      	cmp	r0, #0
  4006b8:	f000 80bf 	beq.w	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  4006bc:	4b1f      	ldr	r3, [pc, #124]	; (40073c <sd_mmc_check+0x4b8>)
  4006be:	4798      	blx	r3
  4006c0:	2800      	cmp	r0, #0
  4006c2:	f000 80ba 	beq.w	40083a <sd_mmc_check+0x5b6>
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  4006c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4006ca:	f003 030f 	and.w	r3, r3, #15
  4006ce:	2b01      	cmp	r3, #1
  4006d0:	d008      	beq.n	4006e4 <sd_mmc_check+0x460>
  4006d2:	b113      	cbz	r3, 4006da <sd_mmc_check+0x456>
  4006d4:	2b02      	cmp	r3, #2
  4006d6:	d00a      	beq.n	4006ee <sd_mmc_check+0x46a>
  4006d8:	e032      	b.n	400740 <sd_mmc_check+0x4bc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4006da:	4b0d      	ldr	r3, [pc, #52]	; (400710 <sd_mmc_check+0x48c>)
  4006dc:	681b      	ldr	r3, [r3, #0]
  4006de:	2210      	movs	r2, #16
  4006e0:	731a      	strb	r2, [r3, #12]
  4006e2:	e031      	b.n	400748 <sd_mmc_check+0x4c4>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  4006e4:	4b0a      	ldr	r3, [pc, #40]	; (400710 <sd_mmc_check+0x48c>)
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	221a      	movs	r2, #26
  4006ea:	731a      	strb	r2, [r3, #12]
  4006ec:	e02c      	b.n	400748 <sd_mmc_check+0x4c4>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006ee:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  4006f2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  4006f4:	4b06      	ldr	r3, [pc, #24]	; (400710 <sd_mmc_check+0x48c>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	bf14      	ite	ne
  4006fa:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  4006fc:	2220      	moveq	r2, #32
  4006fe:	731a      	strb	r2, [r3, #12]
  400700:	e022      	b.n	400748 <sd_mmc_check+0x4c4>
  400702:	bf00      	nop
  400704:	01b70100 	.word	0x01b70100
  400708:	00400d61 	.word	0x00400d61
  40070c:	00400d85 	.word	0x00400d85
  400710:	20400458 	.word	0x20400458
  400714:	0040019d 	.word	0x0040019d
  400718:	00400cc5 	.word	0x00400cc5
  40071c:	03b90100 	.word	0x03b90100
  400720:	03197500 	.word	0x03197500
  400724:	0040021d 	.word	0x0040021d
  400728:	00402674 	.word	0x00402674
  40072c:	00402634 	.word	0x00402634
  400730:	00081133 	.word	0x00081133
  400734:	00400dbd 	.word	0x00400dbd
  400738:	00400ef9 	.word	0x00400ef9
  40073c:	00400f5d 	.word	0x00400f5d
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400740:	4b60      	ldr	r3, [pc, #384]	; (4008c4 <sd_mmc_check+0x640>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	2210      	movs	r2, #16
  400746:	731a      	strb	r2, [r3, #12]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400748:	4b5f      	ldr	r3, [pc, #380]	; (4008c8 <sd_mmc_check+0x644>)
  40074a:	7818      	ldrb	r0, [r3, #0]
  40074c:	4b5f      	ldr	r3, [pc, #380]	; (4008cc <sd_mmc_check+0x648>)
  40074e:	4798      	blx	r3
  400750:	2803      	cmp	r0, #3
  400752:	d91a      	bls.n	40078a <sd_mmc_check+0x506>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400754:	4b5b      	ldr	r3, [pc, #364]	; (4008c4 <sd_mmc_check+0x640>)
  400756:	681b      	ldr	r3, [r3, #0]
  400758:	7ada      	ldrb	r2, [r3, #11]
  40075a:	f012 0f01 	tst.w	r2, #1
  40075e:	d012      	beq.n	400786 <sd_mmc_check+0x502>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400760:	8919      	ldrh	r1, [r3, #8]
  400762:	0409      	lsls	r1, r1, #16
  400764:	f241 1037 	movw	r0, #4407	; 0x1137
  400768:	4b59      	ldr	r3, [pc, #356]	; (4008d0 <sd_mmc_check+0x64c>)
  40076a:	4798      	blx	r3
  40076c:	2800      	cmp	r0, #0
  40076e:	d064      	beq.n	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400770:	2102      	movs	r1, #2
  400772:	f241 1006 	movw	r0, #4358	; 0x1106
  400776:	4b56      	ldr	r3, [pc, #344]	; (4008d0 <sd_mmc_check+0x64c>)
  400778:	4798      	blx	r3
  40077a:	2800      	cmp	r0, #0
  40077c:	d05d      	beq.n	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  40077e:	4b51      	ldr	r3, [pc, #324]	; (4008c4 <sd_mmc_check+0x640>)
  400780:	681b      	ldr	r3, [r3, #0]
  400782:	2204      	movs	r2, #4
  400784:	735a      	strb	r2, [r3, #13]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400786:	4b53      	ldr	r3, [pc, #332]	; (4008d4 <sd_mmc_check+0x650>)
  400788:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  40078a:	4b53      	ldr	r3, [pc, #332]	; (4008d8 <sd_mmc_check+0x654>)
  40078c:	4798      	blx	r3
  40078e:	2800      	cmp	r0, #0
  400790:	d03e      	beq.n	400810 <sd_mmc_check+0x58c>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400792:	4b4c      	ldr	r3, [pc, #304]	; (4008c4 <sd_mmc_check+0x640>)
  400794:	681b      	ldr	r3, [r3, #0]
  400796:	7ada      	ldrb	r2, [r3, #11]
  400798:	f012 0f01 	tst.w	r2, #1
  40079c:	d036      	beq.n	40080c <sd_mmc_check+0x588>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  40079e:	7b1b      	ldrb	r3, [r3, #12]
  4007a0:	2b10      	cmp	r3, #16
  4007a2:	d933      	bls.n	40080c <sd_mmc_check+0x588>
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4007a4:	2440      	movs	r4, #64	; 0x40
  4007a6:	4622      	mov	r2, r4
  4007a8:	2100      	movs	r1, #0
  4007aa:	a804      	add	r0, sp, #16
  4007ac:	4b4b      	ldr	r3, [pc, #300]	; (4008dc <sd_mmc_check+0x658>)
  4007ae:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4007b0:	2301      	movs	r3, #1
  4007b2:	9300      	str	r3, [sp, #0]
  4007b4:	4622      	mov	r2, r4
  4007b6:	494a      	ldr	r1, [pc, #296]	; (4008e0 <sd_mmc_check+0x65c>)
  4007b8:	484a      	ldr	r0, [pc, #296]	; (4008e4 <sd_mmc_check+0x660>)
  4007ba:	4c4b      	ldr	r4, [pc, #300]	; (4008e8 <sd_mmc_check+0x664>)
  4007bc:	47a0      	blx	r4
  4007be:	2800      	cmp	r0, #0
  4007c0:	d03b      	beq.n	40083a <sd_mmc_check+0x5b6>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  4007c2:	2101      	movs	r1, #1
  4007c4:	a804      	add	r0, sp, #16
  4007c6:	4b49      	ldr	r3, [pc, #292]	; (4008ec <sd_mmc_check+0x668>)
  4007c8:	4798      	blx	r3
  4007ca:	2800      	cmp	r0, #0
  4007cc:	d035      	beq.n	40083a <sd_mmc_check+0x5b6>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  4007ce:	4b48      	ldr	r3, [pc, #288]	; (4008f0 <sd_mmc_check+0x66c>)
  4007d0:	4798      	blx	r3
  4007d2:	2800      	cmp	r0, #0
  4007d4:	d031      	beq.n	40083a <sd_mmc_check+0x5b6>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007d6:	4b47      	ldr	r3, [pc, #284]	; (4008f4 <sd_mmc_check+0x670>)
  4007d8:	4798      	blx	r3
  4007da:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007de:	d12c      	bne.n	40083a <sd_mmc_check+0x5b6>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  4007e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  4007e4:	f003 030f 	and.w	r3, r3, #15
  4007e8:	2b0f      	cmp	r3, #15
  4007ea:	d00f      	beq.n	40080c <sd_mmc_check+0x588>
  4007ec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007f0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  4007f4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  4007f8:	d11f      	bne.n	40083a <sd_mmc_check+0x5b6>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  4007fa:	4b3f      	ldr	r3, [pc, #252]	; (4008f8 <sd_mmc_check+0x674>)
  4007fc:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  4007fe:	4b31      	ldr	r3, [pc, #196]	; (4008c4 <sd_mmc_check+0x640>)
  400800:	681b      	ldr	r3, [r3, #0]
  400802:	2201      	movs	r2, #1
  400804:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400806:	681a      	ldr	r2, [r3, #0]
  400808:	0052      	lsls	r2, r2, #1
  40080a:	601a      	str	r2, [r3, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  40080c:	4b31      	ldr	r3, [pc, #196]	; (4008d4 <sd_mmc_check+0x650>)
  40080e:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400810:	4b2c      	ldr	r3, [pc, #176]	; (4008c4 <sd_mmc_check+0x640>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	7adb      	ldrb	r3, [r3, #11]
  400816:	f013 0f01 	tst.w	r3, #1
  40081a:	d006      	beq.n	40082a <sd_mmc_check+0x5a6>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40081c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400820:	f241 1010 	movw	r0, #4368	; 0x1110
  400824:	4b2a      	ldr	r3, [pc, #168]	; (4008d0 <sd_mmc_check+0x64c>)
  400826:	4798      	blx	r3
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400828:	b138      	cbz	r0, 40083a <sd_mmc_check+0x5b6>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  40082a:	4b26      	ldr	r3, [pc, #152]	; (4008c4 <sd_mmc_check+0x640>)
  40082c:	681b      	ldr	r3, [r3, #0]
  40082e:	2200      	movs	r2, #0
  400830:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400832:	4b32      	ldr	r3, [pc, #200]	; (4008fc <sd_mmc_check+0x678>)
  400834:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400836:	2001      	movs	r0, #1
  400838:	e041      	b.n	4008be <sd_mmc_check+0x63a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40083a:	4b22      	ldr	r3, [pc, #136]	; (4008c4 <sd_mmc_check+0x640>)
  40083c:	681b      	ldr	r3, [r3, #0]
  40083e:	2403      	movs	r4, #3
  400840:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  400842:	4b2e      	ldr	r3, [pc, #184]	; (4008fc <sd_mmc_check+0x678>)
  400844:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400846:	4620      	mov	r0, r4
  400848:	e039      	b.n	4008be <sd_mmc_check+0x63a>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  40084a:	2200      	movs	r2, #0
  40084c:	e000      	b.n	400850 <sd_mmc_check+0x5cc>
  40084e:	2200      	movs	r2, #0
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400850:	4b1c      	ldr	r3, [pc, #112]	; (4008c4 <sd_mmc_check+0x640>)
  400852:	681b      	ldr	r3, [r3, #0]
  400854:	7adb      	ldrb	r3, [r3, #11]
  400856:	f013 0f01 	tst.w	r3, #1
  40085a:	f43f aeaf 	beq.w	4005bc <sd_mmc_check+0x338>
  40085e:	2a00      	cmp	r2, #0
  400860:	4e27      	ldr	r6, [pc, #156]	; (400900 <sd_mmc_check+0x67c>)
  400862:	bf08      	it	eq
  400864:	f44f 16fc 	moveq.w	r6, #2064384	; 0x1f8000
  400868:	f640 0435 	movw	r4, #2101	; 0x835
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40086c:	f04f 0800 	mov.w	r8, #0
  400870:	4d17      	ldr	r5, [pc, #92]	; (4008d0 <sd_mmc_check+0x64c>)
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400872:	4f20      	ldr	r7, [pc, #128]	; (4008f4 <sd_mmc_check+0x670>)
  400874:	e53a      	b.n	4002ec <sd_mmc_check+0x68>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400876:	4b13      	ldr	r3, [pc, #76]	; (4008c4 <sd_mmc_check+0x640>)
  400878:	681b      	ldr	r3, [r3, #0]
  40087a:	2202      	movs	r2, #2
  40087c:	72da      	strb	r2, [r3, #11]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40087e:	2100      	movs	r1, #0
  400880:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400884:	4b12      	ldr	r3, [pc, #72]	; (4008d0 <sd_mmc_check+0x64c>)
  400886:	4798      	blx	r3
  400888:	2800      	cmp	r0, #0
  40088a:	d0d6      	beq.n	40083a <sd_mmc_check+0x5b6>
  40088c:	e54d      	b.n	40032a <sd_mmc_check+0xa6>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40088e:	4b0d      	ldr	r3, [pc, #52]	; (4008c4 <sd_mmc_check+0x640>)
  400890:	681b      	ldr	r3, [r3, #0]
  400892:	7adb      	ldrb	r3, [r3, #11]
  400894:	f013 0f01 	tst.w	r3, #1
  400898:	f47f ae88 	bne.w	4005ac <sd_mmc_check+0x328>
  40089c:	e68e      	b.n	4005bc <sd_mmc_check+0x338>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40089e:	2100      	movs	r1, #0
  4008a0:	f645 3002 	movw	r0, #23298	; 0x5b02
  4008a4:	4b0a      	ldr	r3, [pc, #40]	; (4008d0 <sd_mmc_check+0x64c>)
  4008a6:	4798      	blx	r3
  4008a8:	2800      	cmp	r0, #0
  4008aa:	d0c6      	beq.n	40083a <sd_mmc_check+0x5b6>
  4008ac:	e55c      	b.n	400368 <sd_mmc_check+0xe4>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4008ae:	4b06      	ldr	r3, [pc, #24]	; (4008c8 <sd_mmc_check+0x644>)
  4008b0:	7818      	ldrb	r0, [r3, #0]
  4008b2:	4b06      	ldr	r3, [pc, #24]	; (4008cc <sd_mmc_check+0x648>)
  4008b4:	4798      	blx	r3
  4008b6:	2803      	cmp	r0, #3
  4008b8:	f63f ae06 	bhi.w	4004c8 <sd_mmc_check+0x244>
  4008bc:	e647      	b.n	40054e <sd_mmc_check+0x2ca>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4008be:	b014      	add	sp, #80	; 0x50
  4008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008c4:	20400458 	.word	0x20400458
  4008c8:	2040045e 	.word	0x2040045e
  4008cc:	00400cb9 	.word	0x00400cb9
  4008d0:	00400d61 	.word	0x00400d61
  4008d4:	0040019d 	.word	0x0040019d
  4008d8:	00400cc5 	.word	0x00400cc5
  4008dc:	004024ad 	.word	0x004024ad
  4008e0:	80ffff01 	.word	0x80ffff01
  4008e4:	00081106 	.word	0x00081106
  4008e8:	00400dbd 	.word	0x00400dbd
  4008ec:	00400ef9 	.word	0x00400ef9
  4008f0:	00400f5d 	.word	0x00400f5d
  4008f4:	00400d85 	.word	0x00400d85
  4008f8:	00400d3d 	.word	0x00400d3d
  4008fc:	0040024d 	.word	0x0040024d
  400900:	401f8000 	.word	0x401f8000

00400904 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400904:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400906:	4b05      	ldr	r3, [pc, #20]	; (40091c <sd_mmc_get_type+0x18>)
  400908:	4798      	blx	r3
  40090a:	b928      	cbnz	r0, 400918 <sd_mmc_get_type+0x14>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  40090c:	4b04      	ldr	r3, [pc, #16]	; (400920 <sd_mmc_get_type+0x1c>)
  40090e:	4798      	blx	r3
	return sd_mmc_card->type;
  400910:	4b04      	ldr	r3, [pc, #16]	; (400924 <sd_mmc_get_type+0x20>)
  400912:	681b      	ldr	r3, [r3, #0]
  400914:	7ad8      	ldrb	r0, [r3, #11]
  400916:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400918:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  40091a:	bd08      	pop	{r3, pc}
  40091c:	004001c5 	.word	0x004001c5
  400920:	0040024d 	.word	0x0040024d
  400924:	20400458 	.word	0x20400458

00400928 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400928:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40092a:	4b05      	ldr	r3, [pc, #20]	; (400940 <sd_mmc_get_capacity+0x18>)
  40092c:	4798      	blx	r3
  40092e:	b928      	cbnz	r0, 40093c <sd_mmc_get_capacity+0x14>
		return 0;
	}
	sd_mmc_deselect_slot();
  400930:	4b04      	ldr	r3, [pc, #16]	; (400944 <sd_mmc_get_capacity+0x1c>)
  400932:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400934:	4b04      	ldr	r3, [pc, #16]	; (400948 <sd_mmc_get_capacity+0x20>)
  400936:	681b      	ldr	r3, [r3, #0]
  400938:	6858      	ldr	r0, [r3, #4]
  40093a:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  40093c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  40093e:	bd08      	pop	{r3, pc}
  400940:	004001c5 	.word	0x004001c5
  400944:	0040024d 	.word	0x0040024d
  400948:	20400458 	.word	0x20400458

0040094c <sd_mmc_init_read_blocks>:
	return false;
}

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  40094c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400950:	b083      	sub	sp, #12
  400952:	4689      	mov	r9, r1
  400954:	4690      	mov	r8, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400956:	4b25      	ldr	r3, [pc, #148]	; (4009ec <sd_mmc_init_read_blocks+0xa0>)
  400958:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  40095a:	2800      	cmp	r0, #0
  40095c:	d131      	bne.n	4009c2 <sd_mmc_init_read_blocks+0x76>
  40095e:	4c24      	ldr	r4, [pc, #144]	; (4009f0 <sd_mmc_init_read_blocks+0xa4>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400960:	4e24      	ldr	r6, [pc, #144]	; (4009f4 <sd_mmc_init_read_blocks+0xa8>)
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400962:	4d25      	ldr	r5, [pc, #148]	; (4009f8 <sd_mmc_init_read_blocks+0xac>)
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400964:	4f25      	ldr	r7, [pc, #148]	; (4009fc <sd_mmc_init_read_blocks+0xb0>)
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400966:	6833      	ldr	r3, [r6, #0]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400968:	8919      	ldrh	r1, [r3, #8]
  40096a:	0409      	lsls	r1, r1, #16
  40096c:	f241 100d 	movw	r0, #4365	; 0x110d
  400970:	47a8      	blx	r5
  400972:	b338      	cbz	r0, 4009c4 <sd_mmc_init_read_blocks+0x78>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400974:	47b8      	blx	r7
  400976:	f410 7f80 	tst.w	r0, #256	; 0x100
  40097a:	d127      	bne.n	4009cc <sd_mmc_init_read_blocks+0x80>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  40097c:	3c01      	subs	r4, #1
  40097e:	d1f2      	bne.n	400966 <sd_mmc_init_read_blocks+0x1a>
  400980:	e020      	b.n	4009c4 <sd_mmc_init_read_blocks+0x78>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400982:	ea4f 2949 	mov.w	r9, r9, lsl #9
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400986:	2301      	movs	r3, #1
  400988:	9300      	str	r3, [sp, #0]
  40098a:	4643      	mov	r3, r8
  40098c:	f44f 7200 	mov.w	r2, #512	; 0x200
  400990:	4649      	mov	r1, r9
  400992:	4c1b      	ldr	r4, [pc, #108]	; (400a00 <sd_mmc_init_read_blocks+0xb4>)
  400994:	47a0      	blx	r4
  400996:	b918      	cbnz	r0, 4009a0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
  400998:	4b1a      	ldr	r3, [pc, #104]	; (400a04 <sd_mmc_init_read_blocks+0xb8>)
  40099a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40099c:	2005      	movs	r0, #5
  40099e:	e022      	b.n	4009e6 <sd_mmc_init_read_blocks+0x9a>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  4009a0:	4b16      	ldr	r3, [pc, #88]	; (4009fc <sd_mmc_init_read_blocks+0xb0>)
  4009a2:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  4009a4:	4b18      	ldr	r3, [pc, #96]	; (400a08 <sd_mmc_init_read_blocks+0xbc>)
  4009a6:	4003      	ands	r3, r0
  4009a8:	b11b      	cbz	r3, 4009b2 <sd_mmc_init_read_blocks+0x66>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  4009aa:	4b16      	ldr	r3, [pc, #88]	; (400a04 <sd_mmc_init_read_blocks+0xb8>)
  4009ac:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4009ae:	2005      	movs	r0, #5
  4009b0:	e019      	b.n	4009e6 <sd_mmc_init_read_blocks+0x9a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4009b2:	4b16      	ldr	r3, [pc, #88]	; (400a0c <sd_mmc_init_read_blocks+0xc0>)
  4009b4:	f8a3 8000 	strh.w	r8, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4009b8:	4b15      	ldr	r3, [pc, #84]	; (400a10 <sd_mmc_init_read_blocks+0xc4>)
  4009ba:	f8a3 8000 	strh.w	r8, [r3]
	return SD_MMC_OK;
  4009be:	2000      	movs	r0, #0
  4009c0:	e011      	b.n	4009e6 <sd_mmc_init_read_blocks+0x9a>
  4009c2:	e010      	b.n	4009e6 <sd_mmc_init_read_blocks+0x9a>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
  4009c4:	4b0f      	ldr	r3, [pc, #60]	; (400a04 <sd_mmc_init_read_blocks+0xb8>)
  4009c6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4009c8:	2005      	movs	r0, #5
  4009ca:	e00c      	b.n	4009e6 <sd_mmc_init_read_blocks+0x9a>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  4009cc:	4811      	ldr	r0, [pc, #68]	; (400a14 <sd_mmc_init_read_blocks+0xc8>)
  4009ce:	4b12      	ldr	r3, [pc, #72]	; (400a18 <sd_mmc_init_read_blocks+0xcc>)
  4009d0:	f1b8 0f01 	cmp.w	r8, #1
  4009d4:	bf88      	it	hi
  4009d6:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4009d8:	4b06      	ldr	r3, [pc, #24]	; (4009f4 <sd_mmc_init_read_blocks+0xa8>)
  4009da:	681b      	ldr	r3, [r3, #0]
  4009dc:	7adb      	ldrb	r3, [r3, #11]
  4009de:	f013 0f08 	tst.w	r3, #8
  4009e2:	d1d0      	bne.n	400986 <sd_mmc_init_read_blocks+0x3a>
  4009e4:	e7cd      	b.n	400982 <sd_mmc_init_read_blocks+0x36>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  4009e6:	b003      	add	sp, #12
  4009e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4009ec:	004001c5 	.word	0x004001c5
  4009f0:	00030d41 	.word	0x00030d41
  4009f4:	20400458 	.word	0x20400458
  4009f8:	00400d61 	.word	0x00400d61
  4009fc:	00400d85 	.word	0x00400d85
  400a00:	00400dbd 	.word	0x00400dbd
  400a04:	0040024d 	.word	0x0040024d
  400a08:	e4580000 	.word	0xe4580000
  400a0c:	2040045c 	.word	0x2040045c
  400a10:	20400454 	.word	0x20400454
  400a14:	00081111 	.word	0x00081111
  400a18:	00101112 	.word	0x00101112

00400a1c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400a1c:	b510      	push	{r4, lr}
  400a1e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400a20:	4b06      	ldr	r3, [pc, #24]	; (400a3c <sd_mmc_start_read_blocks+0x20>)
  400a22:	4798      	blx	r3
  400a24:	b920      	cbnz	r0, 400a30 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400a26:	2200      	movs	r2, #0
  400a28:	4b05      	ldr	r3, [pc, #20]	; (400a40 <sd_mmc_start_read_blocks+0x24>)
  400a2a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400a2c:	2005      	movs	r0, #5
  400a2e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400a30:	4a03      	ldr	r2, [pc, #12]	; (400a40 <sd_mmc_start_read_blocks+0x24>)
  400a32:	8813      	ldrh	r3, [r2, #0]
  400a34:	1b1c      	subs	r4, r3, r4
  400a36:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400a38:	2000      	movs	r0, #0
}
  400a3a:	bd10      	pop	{r4, pc}
  400a3c:	00400ef9 	.word	0x00400ef9
  400a40:	2040045c 	.word	0x2040045c

00400a44 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400a44:	b510      	push	{r4, lr}
  400a46:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400a48:	4b12      	ldr	r3, [pc, #72]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x50>)
  400a4a:	4798      	blx	r3
  400a4c:	b1f0      	cbz	r0, 400a8c <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400a4e:	b11c      	cbz	r4, 400a58 <sd_mmc_wait_end_of_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400a50:	2200      	movs	r2, #0
  400a52:	4b11      	ldr	r3, [pc, #68]	; (400a98 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400a54:	801a      	strh	r2, [r3, #0]
  400a56:	e002      	b.n	400a5e <sd_mmc_wait_end_of_read_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400a58:	4b0f      	ldr	r3, [pc, #60]	; (400a98 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400a5a:	881b      	ldrh	r3, [r3, #0]
  400a5c:	b9c3      	cbnz	r3, 400a90 <sd_mmc_wait_end_of_read_blocks+0x4c>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400a5e:	4b0f      	ldr	r3, [pc, #60]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a60:	881b      	ldrh	r3, [r3, #0]
  400a62:	2b01      	cmp	r3, #1
  400a64:	d103      	bne.n	400a6e <sd_mmc_wait_end_of_read_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400a66:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400a68:	4798      	blx	r3
		return SD_MMC_OK;
  400a6a:	2000      	movs	r0, #0
  400a6c:	bd10      	pop	{r4, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400a6e:	2100      	movs	r1, #0
  400a70:	f243 100c 	movw	r0, #12556	; 0x310c
  400a74:	4b0b      	ldr	r3, [pc, #44]	; (400aa4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a76:	4798      	blx	r3
  400a78:	b920      	cbnz	r0, 400a84 <sd_mmc_wait_end_of_read_blocks+0x40>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400a7a:	2100      	movs	r1, #0
  400a7c:	f243 100c 	movw	r0, #12556	; 0x310c
  400a80:	4b08      	ldr	r3, [pc, #32]	; (400aa4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a82:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  400a84:	4b06      	ldr	r3, [pc, #24]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400a86:	4798      	blx	r3
	return SD_MMC_OK;
  400a88:	2000      	movs	r0, #0
  400a8a:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
  400a8c:	2005      	movs	r0, #5
  400a8e:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400a90:	2000      	movs	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400a92:	bd10      	pop	{r4, pc}
  400a94:	00400f5d 	.word	0x00400f5d
  400a98:	2040045c 	.word	0x2040045c
  400a9c:	20400454 	.word	0x20400454
  400aa0:	0040024d 	.word	0x0040024d
  400aa4:	00400d61 	.word	0x00400d61

00400aa8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400aa8:	b530      	push	{r4, r5, lr}
  400aaa:	b083      	sub	sp, #12
  400aac:	460d      	mov	r5, r1
  400aae:	4614      	mov	r4, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400ab0:	4b16      	ldr	r3, [pc, #88]	; (400b0c <sd_mmc_init_write_blocks+0x64>)
  400ab2:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400ab4:	bb38      	cbnz	r0, 400b06 <sd_mmc_init_write_blocks+0x5e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400ab6:	4816      	ldr	r0, [pc, #88]	; (400b10 <sd_mmc_init_write_blocks+0x68>)
  400ab8:	4b16      	ldr	r3, [pc, #88]	; (400b14 <sd_mmc_init_write_blocks+0x6c>)
  400aba:	2c01      	cmp	r4, #1
  400abc:	bf88      	it	hi
  400abe:	4618      	movhi	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ac0:	4b15      	ldr	r3, [pc, #84]	; (400b18 <sd_mmc_init_write_blocks+0x70>)
  400ac2:	681b      	ldr	r3, [r3, #0]
  400ac4:	7adb      	ldrb	r3, [r3, #11]
  400ac6:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400aca:	bf08      	it	eq
  400acc:	026d      	lsleq	r5, r5, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400ace:	2301      	movs	r3, #1
  400ad0:	9300      	str	r3, [sp, #0]
  400ad2:	4623      	mov	r3, r4
  400ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ad8:	4629      	mov	r1, r5
  400ada:	4d10      	ldr	r5, [pc, #64]	; (400b1c <sd_mmc_init_write_blocks+0x74>)
  400adc:	47a8      	blx	r5
  400ade:	b918      	cbnz	r0, 400ae8 <sd_mmc_init_write_blocks+0x40>
		sd_mmc_deselect_slot();
  400ae0:	4b0f      	ldr	r3, [pc, #60]	; (400b20 <sd_mmc_init_write_blocks+0x78>)
  400ae2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ae4:	2005      	movs	r0, #5
  400ae6:	e00e      	b.n	400b06 <sd_mmc_init_write_blocks+0x5e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400ae8:	4b0e      	ldr	r3, [pc, #56]	; (400b24 <sd_mmc_init_write_blocks+0x7c>)
  400aea:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400aec:	4b0e      	ldr	r3, [pc, #56]	; (400b28 <sd_mmc_init_write_blocks+0x80>)
  400aee:	4003      	ands	r3, r0
  400af0:	b11b      	cbz	r3, 400afa <sd_mmc_init_write_blocks+0x52>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400af2:	4b0b      	ldr	r3, [pc, #44]	; (400b20 <sd_mmc_init_write_blocks+0x78>)
  400af4:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400af6:	2005      	movs	r0, #5
  400af8:	e005      	b.n	400b06 <sd_mmc_init_write_blocks+0x5e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400afa:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <sd_mmc_init_write_blocks+0x84>)
  400afc:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400afe:	4b0c      	ldr	r3, [pc, #48]	; (400b30 <sd_mmc_init_write_blocks+0x88>)
  400b00:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
  400b02:	2000      	movs	r0, #0
  400b04:	e7ff      	b.n	400b06 <sd_mmc_init_write_blocks+0x5e>
}
  400b06:	b003      	add	sp, #12
  400b08:	bd30      	pop	{r4, r5, pc}
  400b0a:	bf00      	nop
  400b0c:	004001c5 	.word	0x004001c5
  400b10:	00089118 	.word	0x00089118
  400b14:	00109119 	.word	0x00109119
  400b18:	20400458 	.word	0x20400458
  400b1c:	00400dbd 	.word	0x00400dbd
  400b20:	0040024d 	.word	0x0040024d
  400b24:	00400d85 	.word	0x00400d85
  400b28:	e4580000 	.word	0xe4580000
  400b2c:	2040045c 	.word	0x2040045c
  400b30:	20400454 	.word	0x20400454

00400b34 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400b34:	b510      	push	{r4, lr}
  400b36:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400b38:	4b06      	ldr	r3, [pc, #24]	; (400b54 <sd_mmc_start_write_blocks+0x20>)
  400b3a:	4798      	blx	r3
  400b3c:	b920      	cbnz	r0, 400b48 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b3e:	2200      	movs	r2, #0
  400b40:	4b05      	ldr	r3, [pc, #20]	; (400b58 <sd_mmc_start_write_blocks+0x24>)
  400b42:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b44:	2005      	movs	r0, #5
  400b46:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b48:	4a03      	ldr	r2, [pc, #12]	; (400b58 <sd_mmc_start_write_blocks+0x24>)
  400b4a:	8813      	ldrh	r3, [r2, #0]
  400b4c:	1b1c      	subs	r4, r3, r4
  400b4e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400b50:	2000      	movs	r0, #0
}
  400b52:	bd10      	pop	{r4, pc}
  400b54:	00400fbd 	.word	0x00400fbd
  400b58:	2040045c 	.word	0x2040045c

00400b5c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400b5c:	b510      	push	{r4, lr}
  400b5e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400b60:	4b12      	ldr	r3, [pc, #72]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x50>)
  400b62:	4798      	blx	r3
  400b64:	b1e8      	cbz	r0, 400ba2 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_ERR_COMM;
	}
	if (abort) {
  400b66:	b11c      	cbz	r4, 400b70 <sd_mmc_wait_end_of_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b68:	2200      	movs	r2, #0
  400b6a:	4b11      	ldr	r3, [pc, #68]	; (400bb0 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b6c:	801a      	strh	r2, [r3, #0]
  400b6e:	e002      	b.n	400b76 <sd_mmc_wait_end_of_write_blocks+0x1a>
	} else if (sd_mmc_nb_block_remaining) {
  400b70:	4b0f      	ldr	r3, [pc, #60]	; (400bb0 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b72:	881b      	ldrh	r3, [r3, #0]
  400b74:	b9bb      	cbnz	r3, 400ba6 <sd_mmc_wait_end_of_write_blocks+0x4a>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400b76:	4b0f      	ldr	r3, [pc, #60]	; (400bb4 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400b78:	881b      	ldrh	r3, [r3, #0]
  400b7a:	2b01      	cmp	r3, #1
  400b7c:	d103      	bne.n	400b86 <sd_mmc_wait_end_of_write_blocks+0x2a>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400b7e:	4b0e      	ldr	r3, [pc, #56]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b80:	4798      	blx	r3
		return SD_MMC_OK;
  400b82:	2000      	movs	r0, #0
  400b84:	bd10      	pop	{r4, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400b86:	2100      	movs	r1, #0
  400b88:	f243 100c 	movw	r0, #12556	; 0x310c
  400b8c:	4b0b      	ldr	r3, [pc, #44]	; (400bbc <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b8e:	4798      	blx	r3
  400b90:	b918      	cbnz	r0, 400b9a <sd_mmc_wait_end_of_write_blocks+0x3e>
			sd_mmc_deselect_slot();
  400b92:	4b09      	ldr	r3, [pc, #36]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b94:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400b96:	2005      	movs	r0, #5
  400b98:	bd10      	pop	{r4, pc}
		}
	}
	sd_mmc_deselect_slot();
  400b9a:	4b07      	ldr	r3, [pc, #28]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b9c:	4798      	blx	r3
	return SD_MMC_OK;
  400b9e:	2000      	movs	r0, #0
  400ba0:	bd10      	pop	{r4, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
  400ba2:	2005      	movs	r0, #5
  400ba4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
		sd_mmc_nb_block_remaining = 0;
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400ba6:	2000      	movs	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400ba8:	bd10      	pop	{r4, pc}
  400baa:	bf00      	nop
  400bac:	00401021 	.word	0x00401021
  400bb0:	2040045c 	.word	0x2040045c
  400bb4:	20400454 	.word	0x20400454
  400bb8:	0040024d 	.word	0x0040024d
  400bbc:	00400d61 	.word	0x00400d61

00400bc0 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400bc0:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc6:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400bc8:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400bca:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400bcc:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400bce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400bd0:	2680      	movs	r6, #128	; 0x80
  400bd2:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400bd4:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400bd6:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400bd8:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400bda:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400bdc:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400bde:	2200      	movs	r2, #0
  400be0:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400be2:	2205      	movs	r2, #5
  400be4:	601a      	str	r2, [r3, #0]
}
  400be6:	bc70      	pop	{r4, r5, r6}
  400be8:	4770      	bx	lr
  400bea:	bf00      	nop

00400bec <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400bec:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400bee:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400bf2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400bf4:	f411 7f80 	tst.w	r1, #256	; 0x100
  400bf8:	d00c      	beq.n	400c14 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400bfa:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400bfe:	d002      	beq.n	400c06 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400c00:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  400c04:	e006      	b.n	400c14 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400c06:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400c0a:	bf14      	ite	ne
  400c0c:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400c10:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400c14:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400c18:	bf18      	it	ne
  400c1a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c22:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400c24:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400c26:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400c28:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400c2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400c2e:	b132      	cbz	r2, 400c3e <hsmci_send_cmd_execute+0x52>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c30:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400c34:	d00a      	beq.n	400c4c <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400c36:	4b14      	ldr	r3, [pc, #80]	; (400c88 <hsmci_send_cmd_execute+0x9c>)
  400c38:	4798      	blx	r3
				return false;
  400c3a:	2000      	movs	r0, #0
  400c3c:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c3e:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400c42:	d003      	beq.n	400c4c <hsmci_send_cmd_execute+0x60>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  400c44:	4b10      	ldr	r3, [pc, #64]	; (400c88 <hsmci_send_cmd_execute+0x9c>)
  400c46:	4798      	blx	r3
				return false;
  400c48:	2000      	movs	r0, #0
  400c4a:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400c4c:	f013 0f01 	tst.w	r3, #1
  400c50:	d0ec      	beq.n	400c2c <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  400c52:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400c56:	d10e      	bne.n	400c76 <hsmci_send_cmd_execute+0x8a>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400c58:	2001      	movs	r0, #1
  400c5a:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400c5e:	3a01      	subs	r2, #1
  400c60:	d103      	bne.n	400c6a <hsmci_send_cmd_execute+0x7e>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  400c62:	4b09      	ldr	r3, [pc, #36]	; (400c88 <hsmci_send_cmd_execute+0x9c>)
  400c64:	4798      	blx	r3
			return false;
  400c66:	2000      	movs	r0, #0
  400c68:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400c6e:	2b20      	cmp	r3, #32
  400c70:	d1f4      	bne.n	400c5c <hsmci_send_cmd_execute+0x70>
	return true;
  400c72:	2001      	movs	r0, #1
  400c74:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  400c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c7c:	f04f 32ff 	mov.w	r2, #4294967295
  400c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c84:	e7f1      	b.n	400c6a <hsmci_send_cmd_execute+0x7e>
  400c86:	bf00      	nop
  400c88:	00400bc1 	.word	0x00400bc1

00400c8c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400c8c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400c8e:	2012      	movs	r0, #18
  400c90:	4c08      	ldr	r4, [pc, #32]	; (400cb4 <hsmci_init+0x28>)
  400c92:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400c94:	203a      	movs	r0, #58	; 0x3a
  400c96:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c9c:	2272      	movs	r2, #114	; 0x72
  400c9e:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400ca0:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400ca2:	2211      	movs	r2, #17
  400ca4:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400ca6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400caa:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400cac:	2205      	movs	r2, #5
  400cae:	601a      	str	r2, [r3, #0]
  400cb0:	bd10      	pop	{r4, pc}
  400cb2:	bf00      	nop
  400cb4:	004014f5 	.word	0x004014f5

00400cb8 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400cb8:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400cba:	bf0c      	ite	eq
  400cbc:	2004      	moveq	r0, #4
  400cbe:	2000      	movne	r0, #0
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop

00400cc4 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400cc4:	2001      	movs	r0, #1
  400cc6:	4770      	bx	lr

00400cc8 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400cc8:	b133      	cbz	r3, 400cd8 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400cca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cce:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400cd4:	6543      	str	r3, [r0, #84]	; 0x54
  400cd6:	e005      	b.n	400ce4 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400cd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cdc:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400ce2:	6543      	str	r3, [r0, #84]	; 0x54
#else
	uint32_t clkdiv = 0;
	uint32_t rest = 0;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if ((speed * 2) < mck) {
  400ce4:	0049      	lsls	r1, r1, #1
  400ce6:	4b12      	ldr	r3, [pc, #72]	; (400d30 <hsmci_select_device+0x68>)
  400ce8:	4299      	cmp	r1, r3
  400cea:	d809      	bhi.n	400d00 <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  400cec:	4811      	ldr	r0, [pc, #68]	; (400d34 <hsmci_select_device+0x6c>)
  400cee:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
		if (rest > 0) {
  400cf2:	fb01 0113 	mls	r1, r1, r3, r0
  400cf6:	b101      	cbz	r1, 400cfa <hsmci_select_device+0x32>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  400cf8:	3301      	adds	r3, #1
		}
		if (clkdiv > 0) {
  400cfa:	b113      	cbz	r3, 400d02 <hsmci_select_device+0x3a>
			clkdiv -= 1;
  400cfc:	3b01      	subs	r3, #1
  400cfe:	e000      	b.n	400d02 <hsmci_select_device+0x3a>
		}
	} else {
		clkdiv = 0;
  400d00:	2300      	movs	r3, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d06:	6848      	ldr	r0, [r1, #4]
  400d08:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400d0c:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400d0e:	6848      	ldr	r0, [r1, #4]
  400d10:	b2db      	uxtb	r3, r3
  400d12:	4303      	orrs	r3, r0
  400d14:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400d16:	2a04      	cmp	r2, #4
  400d18:	d004      	beq.n	400d24 <hsmci_select_device+0x5c>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400d1a:	2a08      	cmp	r2, #8
  400d1c:	bf0c      	ite	eq
  400d1e:	22c0      	moveq	r2, #192	; 0xc0
  400d20:	2200      	movne	r2, #0
  400d22:	e000      	b.n	400d26 <hsmci_select_device+0x5e>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400d24:	2280      	movs	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d2a:	60da      	str	r2, [r3, #12]
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop
  400d30:	089543ff 	.word	0x089543ff
  400d34:	08954400 	.word	0x08954400

00400d38 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  400d38:	4770      	bx	lr
  400d3a:	bf00      	nop

00400d3c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d40:	685a      	ldr	r2, [r3, #4]
  400d42:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d46:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400d48:	2200      	movs	r2, #0
  400d4a:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400d4c:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400d50:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400d52:	461a      	mov	r2, r3
  400d54:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400d56:	f013 0f01 	tst.w	r3, #1
  400d5a:	d0fb      	beq.n	400d54 <hsmci_send_clock+0x18>
}
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop

00400d60 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400d60:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d66:	685a      	ldr	r2, [r3, #4]
  400d68:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d6c:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400d6e:	2400      	movs	r4, #0
  400d70:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400d72:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400d74:	460a      	mov	r2, r1
  400d76:	4601      	mov	r1, r0
  400d78:	4620      	mov	r0, r4
  400d7a:	4b01      	ldr	r3, [pc, #4]	; (400d80 <hsmci_send_cmd+0x20>)
  400d7c:	4798      	blx	r3
}
  400d7e:	bd10      	pop	{r4, pc}
  400d80:	00400bed 	.word	0x00400bed

00400d84 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d88:	6a18      	ldr	r0, [r3, #32]
}
  400d8a:	4770      	bx	lr

00400d8c <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400d8c:	b410      	push	{r4}
  400d8e:	1d03      	adds	r3, r0, #4
  400d90:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400d92:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400d96:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400d98:	0e11      	lsrs	r1, r2, #24
  400d9a:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400d9e:	0c11      	lsrs	r1, r2, #16
  400da0:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400da4:	0a11      	lsrs	r1, r2, #8
  400da6:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400daa:	f803 2c01 	strb.w	r2, [r3, #-1]
  400dae:	3304      	adds	r3, #4

void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  400db0:	4283      	cmp	r3, r0
  400db2:	d1f0      	bne.n	400d96 <hsmci_get_response_128+0xa>
		*response = (response_32 >>  8) & 0xFF;
		response++;
		*response = (response_32 >>  0) & 0xFF;
		response++;
	}
}
  400db4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db8:	4770      	bx	lr
  400dba:	bf00      	nop

00400dbc <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400dbe:	f89d 4010 	ldrb.w	r4, [sp, #16]
  400dc2:	b12c      	cbz	r4, 400dd0 <hsmci_adtc_start+0x14>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400dc4:	f44f 7580 	mov.w	r5, #256	; 0x100
  400dc8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400dcc:	6525      	str	r5, [r4, #80]	; 0x50
  400dce:	e003      	b.n	400dd8 <hsmci_adtc_start+0x1c>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
  400dd0:	2500      	movs	r5, #0
  400dd2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400dd6:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400dd8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ddc:	686c      	ldr	r4, [r5, #4]
  400dde:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400de2:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400de4:	f012 0f03 	tst.w	r2, #3
  400de8:	d004      	beq.n	400df4 <hsmci_adtc_start+0x38>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400dea:	686c      	ldr	r4, [r5, #4]
  400dec:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400df0:	606c      	str	r4, [r5, #4]
  400df2:	e005      	b.n	400e00 <hsmci_adtc_start+0x44>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400df4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400df8:	686c      	ldr	r4, [r5, #4]
  400dfa:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400dfe:	606c      	str	r4, [r5, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400e00:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400e04:	2c00      	cmp	r4, #0
  400e06:	bf14      	ite	ne
  400e08:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400e0c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400e10:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400e14:	d007      	beq.n	400e26 <hsmci_adtc_start+0x6a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400e16:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400e1a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400e1e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400e22:	61b5      	str	r5, [r6, #24]
  400e24:	e018      	b.n	400e58 <hsmci_adtc_start+0x9c>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400e26:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400e2a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400e2e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400e30:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400e34:	d002      	beq.n	400e3c <hsmci_adtc_start+0x80>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400e36:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400e3a:	e00d      	b.n	400e58 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_STREAM) {
  400e3c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400e40:	d002      	beq.n	400e48 <hsmci_adtc_start+0x8c>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400e42:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400e46:	e007      	b.n	400e58 <hsmci_adtc_start+0x9c>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400e48:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400e4c:	d104      	bne.n	400e58 <hsmci_adtc_start+0x9c>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400e4e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400e52:	bf18      	it	ne
  400e54:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400e58:	2600      	movs	r6, #0
  400e5a:	4d06      	ldr	r5, [pc, #24]	; (400e74 <hsmci_adtc_start+0xb8>)
  400e5c:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400e5e:	4d06      	ldr	r5, [pc, #24]	; (400e78 <hsmci_adtc_start+0xbc>)
  400e60:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400e62:	4a06      	ldr	r2, [pc, #24]	; (400e7c <hsmci_adtc_start+0xc0>)
  400e64:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400e66:	460a      	mov	r2, r1
  400e68:	4601      	mov	r1, r0
  400e6a:	4620      	mov	r0, r4
  400e6c:	4b04      	ldr	r3, [pc, #16]	; (400e80 <hsmci_adtc_start+0xc4>)
  400e6e:	4798      	blx	r3
}
  400e70:	bd70      	pop	{r4, r5, r6, pc}
  400e72:	bf00      	nop
  400e74:	20400484 	.word	0x20400484
  400e78:	20400480 	.word	0x20400480
  400e7c:	20400482 	.word	0x20400482
  400e80:	00400bed 	.word	0x00400bed

00400e84 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400e84:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e8a:	4a16      	ldr	r2, [pc, #88]	; (400ee4 <hsmci_read_word+0x60>)

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e8e:	4213      	tst	r3, r2
  400e90:	d003      	beq.n	400e9a <hsmci_read_word+0x16>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400e92:	4b15      	ldr	r3, [pc, #84]	; (400ee8 <hsmci_read_word+0x64>)
  400e94:	4798      	blx	r3
			return false;
  400e96:	2000      	movs	r0, #0
  400e98:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400e9a:	f013 0f02 	tst.w	r3, #2
  400e9e:	d0f5      	beq.n	400e8c <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ea6:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400ea8:	4a10      	ldr	r2, [pc, #64]	; (400eec <hsmci_read_word+0x68>)
  400eaa:	6813      	ldr	r3, [r2, #0]
  400eac:	3304      	adds	r3, #4
  400eae:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400eb0:	4a0f      	ldr	r2, [pc, #60]	; (400ef0 <hsmci_read_word+0x6c>)
  400eb2:	8811      	ldrh	r1, [r2, #0]
  400eb4:	4a0f      	ldr	r2, [pc, #60]	; (400ef4 <hsmci_read_word+0x70>)
  400eb6:	8812      	ldrh	r2, [r2, #0]
  400eb8:	fb02 f201 	mul.w	r2, r2, r1
  400ebc:	4293      	cmp	r3, r2
  400ebe:	d30e      	bcc.n	400ede <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400ec0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400ec4:	4a07      	ldr	r2, [pc, #28]	; (400ee4 <hsmci_read_word+0x60>)
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400ec6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400ec8:	4213      	tst	r3, r2
  400eca:	d003      	beq.n	400ed4 <hsmci_read_word+0x50>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400ecc:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <hsmci_read_word+0x64>)
  400ece:	4798      	blx	r3
			return false;
  400ed0:	2000      	movs	r0, #0
  400ed2:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400ed4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400ed8:	d0f5      	beq.n	400ec6 <hsmci_read_word+0x42>
	return true;
  400eda:	2001      	movs	r0, #1
  400edc:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  400ede:	2001      	movs	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  400ee0:	bd08      	pop	{r3, pc}
  400ee2:	bf00      	nop
  400ee4:	c0600000 	.word	0xc0600000
  400ee8:	00400bc1 	.word	0x00400bc1
  400eec:	20400484 	.word	0x20400484
  400ef0:	20400480 	.word	0x20400480
  400ef4:	20400482 	.word	0x20400482

00400ef8 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400efa:	b089      	sub	sp, #36	; 0x24
  400efc:	4607      	mov	r7, r0
  400efe:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400f00:	2220      	movs	r2, #32
  400f02:	2100      	movs	r1, #0
  400f04:	4668      	mov	r0, sp
  400f06:	4b0e      	ldr	r3, [pc, #56]	; (400f40 <hsmci_start_read_blocks+0x48>)
  400f08:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f0a:	4e0e      	ldr	r6, [pc, #56]	; (400f44 <hsmci_start_read_blocks+0x4c>)
  400f0c:	2501      	movs	r5, #1
  400f0e:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400f10:	4b0d      	ldr	r3, [pc, #52]	; (400f48 <hsmci_start_read_blocks+0x50>)
  400f12:	881b      	ldrh	r3, [r3, #0]
  400f14:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400f18:	4b0c      	ldr	r3, [pc, #48]	; (400f4c <hsmci_start_read_blocks+0x54>)
  400f1a:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400f1c:	08a3      	lsrs	r3, r4, #2
  400f1e:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400f20:	4b0b      	ldr	r3, [pc, #44]	; (400f50 <hsmci_start_read_blocks+0x58>)
  400f22:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  400f24:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400f26:	466a      	mov	r2, sp
  400f28:	2100      	movs	r1, #0
  400f2a:	4630      	mov	r0, r6
  400f2c:	4b09      	ldr	r3, [pc, #36]	; (400f54 <hsmci_start_read_blocks+0x5c>)
  400f2e:	4798      	blx	r3
 */
static inline void xdmac_channel_enable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400f30:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400f32:	4b09      	ldr	r3, [pc, #36]	; (400f58 <hsmci_start_read_blocks+0x60>)
  400f34:	681a      	ldr	r2, [r3, #0]
  400f36:	4414      	add	r4, r2
  400f38:	601c      	str	r4, [r3, #0]
	return true;
}
  400f3a:	4628      	mov	r0, r5
  400f3c:	b009      	add	sp, #36	; 0x24
  400f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f40:	004024ad 	.word	0x004024ad
  400f44:	40078000 	.word	0x40078000
  400f48:	20400480 	.word	0x20400480
  400f4c:	00043001 	.word	0x00043001
  400f50:	40000200 	.word	0x40000200
  400f54:	00401681 	.word	0x00401681
  400f58:	20400484 	.word	0x20400484

00400f5c <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  400f5c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f5e:	4b11      	ldr	r3, [pc, #68]	; (400fa4 <hsmci_wait_end_of_read_blocks+0x48>)
  400f60:	881a      	ldrh	r2, [r3, #0]
  400f62:	4b11      	ldr	r3, [pc, #68]	; (400fa8 <hsmci_wait_end_of_read_blocks+0x4c>)
  400f64:	881b      	ldrh	r3, [r3, #0]
  400f66:	fb03 f202 	mul.w	r2, r3, r2
  400f6a:	4b10      	ldr	r3, [pc, #64]	; (400fac <hsmci_wait_end_of_read_blocks+0x50>)
  400f6c:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f72:	490f      	ldr	r1, [pc, #60]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f74:	4e0f      	ldr	r6, [pc, #60]	; (400fb4 <hsmci_wait_end_of_read_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400f76:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f78:	420b      	tst	r3, r1
  400f7a:	d006      	beq.n	400f8a <hsmci_wait_end_of_read_blocks+0x2e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  400f7c:	4b0e      	ldr	r3, [pc, #56]	; (400fb8 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f7e:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f80:	2201      	movs	r2, #1
  400f82:	4b0c      	ldr	r3, [pc, #48]	; (400fb4 <hsmci_wait_end_of_read_blocks+0x58>)
  400f84:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  400f86:	2000      	movs	r0, #0
  400f88:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f8a:	42a2      	cmp	r2, r4
  400f8c:	d903      	bls.n	400f96 <hsmci_wait_end_of_read_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f8e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  400f90:	f015 0f01 	tst.w	r5, #1
  400f94:	d104      	bne.n	400fa0 <hsmci_wait_end_of_read_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400f96:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400f9a:	d0ec      	beq.n	400f76 <hsmci_wait_end_of_read_blocks+0x1a>
	return true;
  400f9c:	2001      	movs	r0, #1
  400f9e:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  400fa0:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  400fa2:	bd70      	pop	{r4, r5, r6, pc}
  400fa4:	20400480 	.word	0x20400480
  400fa8:	20400482 	.word	0x20400482
  400fac:	20400484 	.word	0x20400484
  400fb0:	c0600000 	.word	0xc0600000
  400fb4:	40078000 	.word	0x40078000
  400fb8:	00400bc1 	.word	0x00400bc1

00400fbc <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  400fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fbe:	b089      	sub	sp, #36	; 0x24
  400fc0:	4607      	mov	r7, r0
  400fc2:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400fc4:	2220      	movs	r2, #32
  400fc6:	2100      	movs	r1, #0
  400fc8:	4668      	mov	r0, sp
  400fca:	4b0e      	ldr	r3, [pc, #56]	; (401004 <hsmci_start_write_blocks+0x48>)
  400fcc:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400fce:	4e0e      	ldr	r6, [pc, #56]	; (401008 <hsmci_start_write_blocks+0x4c>)
  400fd0:	2501      	movs	r5, #1
  400fd2:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400fd4:	4b0d      	ldr	r3, [pc, #52]	; (40100c <hsmci_start_write_blocks+0x50>)
  400fd6:	881b      	ldrh	r3, [r3, #0]
  400fd8:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400fdc:	4b0c      	ldr	r3, [pc, #48]	; (401010 <hsmci_start_write_blocks+0x54>)
  400fde:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400fe0:	08a3      	lsrs	r3, r4, #2
  400fe2:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  400fe4:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400fe6:	4b0b      	ldr	r3, [pc, #44]	; (401014 <hsmci_start_write_blocks+0x58>)
  400fe8:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400fea:	466a      	mov	r2, sp
  400fec:	2100      	movs	r1, #0
  400fee:	4630      	mov	r0, r6
  400ff0:	4b09      	ldr	r3, [pc, #36]	; (401018 <hsmci_start_write_blocks+0x5c>)
  400ff2:	4798      	blx	r3
 */
static inline void xdmac_channel_enable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400ff4:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400ff6:	4b09      	ldr	r3, [pc, #36]	; (40101c <hsmci_start_write_blocks+0x60>)
  400ff8:	681a      	ldr	r2, [r3, #0]
  400ffa:	4414      	add	r4, r2
  400ffc:	601c      	str	r4, [r3, #0]
	return true;
}
  400ffe:	4628      	mov	r0, r5
  401000:	b009      	add	sp, #36	; 0x24
  401002:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401004:	004024ad 	.word	0x004024ad
  401008:	40078000 	.word	0x40078000
  40100c:	20400480 	.word	0x20400480
  401010:	00015011 	.word	0x00015011
  401014:	40000200 	.word	0x40000200
  401018:	00401681 	.word	0x00401681
  40101c:	20400484 	.word	0x20400484

00401020 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401020:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401022:	4b11      	ldr	r3, [pc, #68]	; (401068 <hsmci_wait_end_of_write_blocks+0x48>)
  401024:	881a      	ldrh	r2, [r3, #0]
  401026:	4b11      	ldr	r3, [pc, #68]	; (40106c <hsmci_wait_end_of_write_blocks+0x4c>)
  401028:	881b      	ldrh	r3, [r3, #0]
  40102a:	fb03 f202 	mul.w	r2, r3, r2
  40102e:	4b10      	ldr	r3, [pc, #64]	; (401070 <hsmci_wait_end_of_write_blocks+0x50>)
  401030:	681c      	ldr	r4, [r3, #0]
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401032:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401036:	490f      	ldr	r1, [pc, #60]	; (401074 <hsmci_wait_end_of_write_blocks+0x54>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401038:	4e0f      	ldr	r6, [pc, #60]	; (401078 <hsmci_wait_end_of_write_blocks+0x58>)
	uint32_t sr;
	uint32_t dma_sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  40103a:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40103c:	420b      	tst	r3, r1
  40103e:	d006      	beq.n	40104e <hsmci_wait_end_of_write_blocks+0x2e>
		HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
			__func__, sr);
			hsmci_reset();
  401040:	4b0e      	ldr	r3, [pc, #56]	; (40107c <hsmci_wait_end_of_write_blocks+0x5c>)
  401042:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  401044:	2201      	movs	r2, #1
  401046:	4b0c      	ldr	r3, [pc, #48]	; (401078 <hsmci_wait_end_of_write_blocks+0x58>)
  401048:	621a      	str	r2, [r3, #32]
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
  40104a:	2000      	movs	r0, #0
  40104c:	bd70      	pop	{r4, r5, r6, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40104e:	42a2      	cmp	r2, r4
  401050:	d903      	bls.n	40105a <hsmci_wait_end_of_write_blocks+0x3a>
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401052:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
  401054:	f015 0f01 	tst.w	r5, #1
  401058:	d104      	bne.n	401064 <hsmci_wait_end_of_write_blocks+0x44>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40105a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40105e:	d0ec      	beq.n	40103a <hsmci_wait_end_of_write_blocks+0x1a>

	return true;
  401060:	2001      	movs	r0, #1
  401062:	bd70      	pop	{r4, r5, r6, pc}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
  401064:	2001      	movs	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));

	return true;
}
  401066:	bd70      	pop	{r4, r5, r6, pc}
  401068:	20400480 	.word	0x20400480
  40106c:	20400482 	.word	0x20400482
  401070:	20400484 	.word	0x20400484
  401074:	c0600000 	.word	0xc0600000
  401078:	40078000 	.word	0x40078000
  40107c:	00400bc1 	.word	0x00400bc1

00401080 <matrix_set_system_io>:

	p_matrix->MATRIX_SYSIO = ul_io;

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)
	
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <matrix_set_system_io+0x1c>)
  401082:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  401086:	4a06      	ldr	r2, [pc, #24]	; (4010a0 <matrix_set_system_io+0x20>)
  401088:	400a      	ands	r2, r1
  40108a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);
  40108e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  401092:	b280      	uxth	r0, r0
  401094:	4302      	orrs	r2, r0
  401096:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  40109a:	4770      	bx	lr
  40109c:	40088000 	.word	0x40088000
  4010a0:	ffff0000 	.word	0xffff0000

004010a4 <matrix_get_system_io>:

	return (p_matrix->MATRIX_SYSIO);

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)

	return (p_matrix->CCFG_SYSIO & 0xFFFF);
  4010a4:	4b02      	ldr	r3, [pc, #8]	; (4010b0 <matrix_get_system_io+0xc>)
  4010a6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
#else

	return (p_matrix->CCFG_SYSIO);

#endif
}
  4010aa:	b280      	uxth	r0, r0
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop
  4010b0:	40088000 	.word	0x40088000

004010b4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4010b4:	b4f0      	push	{r4, r5, r6, r7}
  4010b6:	b08c      	sub	sp, #48	; 0x30
  4010b8:	4607      	mov	r7, r0
  4010ba:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4010bc:	ac01      	add	r4, sp, #4
  4010be:	4d11      	ldr	r5, [pc, #68]	; (401104 <pwm_clocks_generate+0x50>)
  4010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4010d0:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4010d2:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4010d4:	f852 3b04 	ldr.w	r3, [r2], #4
  4010d8:	fbb6 f3f3 	udiv	r3, r6, r3
  4010dc:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4010e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4010e4:	d905      	bls.n	4010f2 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4010e6:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4010e8:	280b      	cmp	r0, #11
  4010ea:	d1f3      	bne.n	4010d4 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4010ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4010f0:	e005      	b.n	4010fe <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4010f2:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4010f4:	bf94      	ite	ls
  4010f6:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4010fa:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4010fe:	b00c      	add	sp, #48	; 0x30
  401100:	bcf0      	pop	{r4, r5, r6, r7}
  401102:	4770      	bx	lr
  401104:	004026d0 	.word	0x004026d0

00401108 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	4606      	mov	r6, r0
  40110c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40110e:	6808      	ldr	r0, [r1, #0]
  401110:	b140      	cbz	r0, 401124 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401112:	6889      	ldr	r1, [r1, #8]
  401114:	4b0e      	ldr	r3, [pc, #56]	; (401150 <pwm_init+0x48>)
  401116:	4798      	blx	r3
  401118:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40111a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40111e:	4298      	cmp	r0, r3
  401120:	d101      	bne.n	401126 <pwm_init+0x1e>
  401122:	e00e      	b.n	401142 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401124:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401126:	6860      	ldr	r0, [r4, #4]
  401128:	b140      	cbz	r0, 40113c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40112a:	68a1      	ldr	r1, [r4, #8]
  40112c:	4b08      	ldr	r3, [pc, #32]	; (401150 <pwm_init+0x48>)
  40112e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  401130:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401134:	4298      	cmp	r0, r3
  401136:	d007      	beq.n	401148 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401138:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40113c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40113e:	2000      	movs	r0, #0
  401140:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401142:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401146:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401148:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  40114c:	bd70      	pop	{r4, r5, r6, pc}
  40114e:	bf00      	nop
  401150:	004010b5 	.word	0x004010b5

00401154 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401154:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401156:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401158:	684a      	ldr	r2, [r1, #4]
  40115a:	f002 020f 	and.w	r2, r2, #15
  40115e:	8a8c      	ldrh	r4, [r1, #20]
  401160:	4322      	orrs	r2, r4
  401162:	890c      	ldrh	r4, [r1, #8]
  401164:	4322      	orrs	r2, r4
  401166:	7a8c      	ldrb	r4, [r1, #10]
  401168:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  40116c:	7d8c      	ldrb	r4, [r1, #22]
  40116e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401172:	7dcc      	ldrb	r4, [r1, #23]
  401174:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  401178:	7e0c      	ldrb	r4, [r1, #24]
  40117a:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  40117e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401182:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401186:	68ca      	ldr	r2, [r1, #12]
  401188:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40118c:	690a      	ldr	r2, [r1, #16]
  40118e:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401192:	7d8a      	ldrb	r2, [r1, #22]
  401194:	b13a      	cbz	r2, 4011a6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401196:	8b8c      	ldrh	r4, [r1, #28]
  401198:	8b4a      	ldrh	r2, [r1, #26]
  40119a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40119e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4011a2:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4011a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4011a8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4011ac:	409a      	lsls	r2, r3
  4011ae:	43d2      	mvns	r2, r2
  4011b0:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4011b4:	7fcc      	ldrb	r4, [r1, #31]
  4011b6:	fa04 f603 	lsl.w	r6, r4, r3
  4011ba:	7f8c      	ldrb	r4, [r1, #30]
  4011bc:	409c      	lsls	r4, r3
  4011be:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4011c2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4011c4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4011c6:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4011c8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4011ca:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4011ce:	fa04 f503 	lsl.w	r5, r4, r3
  4011d2:	f891 4020 	ldrb.w	r4, [r1, #32]
  4011d6:	409c      	lsls	r4, r3
  4011d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4011dc:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4011de:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4011e0:	2201      	movs	r2, #1
  4011e2:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4011e4:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4011e8:	b11c      	cbz	r4, 4011f2 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4011ea:	6a04      	ldr	r4, [r0, #32]
  4011ec:	4314      	orrs	r4, r2
  4011ee:	6204      	str	r4, [r0, #32]
  4011f0:	e003      	b.n	4011fa <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4011f2:	6a04      	ldr	r4, [r0, #32]
  4011f4:	ea24 0402 	bic.w	r4, r4, r2
  4011f8:	6204      	str	r4, [r0, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  4011fa:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4011fe:	2c02      	cmp	r4, #2
  401200:	d105      	bne.n	40120e <pwm_channel_init+0xba>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  401202:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401206:	4314      	orrs	r4, r2
  401208:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  40120c:	e00d      	b.n	40122a <pwm_channel_init+0xd6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  40120e:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401212:	43d5      	mvns	r5, r2
  401214:	402c      	ands	r4, r5
  401216:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40121a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40121e:	2c01      	cmp	r4, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  401220:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401222:	bf0c      	ite	eq
  401224:	4314      	orreq	r4, r2
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  401226:	402c      	andne	r4, r5
  401228:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  40122a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40122e:	2c02      	cmp	r4, #2
  401230:	d106      	bne.n	401240 <pwm_channel_init+0xec>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  401232:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401236:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40123a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  40123e:	e011      	b.n	401264 <pwm_channel_init+0x110>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  401240:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401244:	0412      	lsls	r2, r2, #16
  401246:	43d5      	mvns	r5, r2
  401248:	402c      	ands	r4, r5
  40124a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  40124e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401252:	2c01      	cmp	r4, #1
  401254:	d103      	bne.n	40125e <pwm_channel_init+0x10a>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  401256:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401258:	4322      	orrs	r2, r4
  40125a:	6682      	str	r2, [r0, #104]	; 0x68
  40125c:	e002      	b.n	401264 <pwm_channel_init+0x110>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  40125e:	6e82      	ldr	r2, [r0, #104]	; 0x68
  401260:	402a      	ands	r2, r5
  401262:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401264:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401266:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401268:	22ff      	movs	r2, #255	; 0xff
  40126a:	409a      	lsls	r2, r3
  40126c:	ea25 0402 	bic.w	r4, r5, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401270:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
  401274:	409a      	lsls	r2, r3
  401276:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  401278:	66c2      	str	r2, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  40127a:	b953      	cbnz	r3, 401292 <pwm_channel_init+0x13e>
		if (p_channel->spread_spectrum_mode ==
  40127c:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
  401280:	2a01      	cmp	r2, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  401282:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  401284:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  401288:	bf08      	it	eq
  40128a:	f042 7280 	orreq.w	r2, r2, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  40128e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  401292:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  401296:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  40129a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  40129e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  4012a2:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  4012a6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  4012a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  4012ac:	4313      	orrs	r3, r2
  4012ae:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  4012b2:	2000      	movs	r0, #0
  4012b4:	bc70      	pop	{r4, r5, r6}
  4012b6:	4770      	bx	lr

004012b8 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4012b8:	690b      	ldr	r3, [r1, #16]
  4012ba:	4293      	cmp	r3, r2
  4012bc:	d307      	bcc.n	4012ce <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  4012be:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  4012c0:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4012c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4012c6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  4012ca:	2000      	movs	r0, #0
  4012cc:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  4012ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4012d2:	4770      	bx	lr

004012d4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4012d4:	2301      	movs	r3, #1
  4012d6:	fa03 f101 	lsl.w	r1, r3, r1
  4012da:	6041      	str	r1, [r0, #4]
  4012dc:	4770      	bx	lr
  4012de:	bf00      	nop

004012e0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4012e0:	2301      	movs	r3, #1
  4012e2:	fa03 f101 	lsl.w	r1, r3, r1
  4012e6:	6081      	str	r1, [r0, #8]
  4012e8:	4770      	bx	lr
  4012ea:	bf00      	nop

004012ec <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  4012ec:	3210      	adds	r2, #16
  4012ee:	2301      	movs	r3, #1
  4012f0:	fa03 f202 	lsl.w	r2, r3, r2
  4012f4:	fa03 f101 	lsl.w	r1, r3, r1
  4012f8:	4311      	orrs	r1, r2
  4012fa:	6141      	str	r1, [r0, #20]
  4012fc:	4770      	bx	lr
  4012fe:	bf00      	nop

00401300 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
  401300:	4a02      	ldr	r2, [pc, #8]	; (40130c <SysTick_Handler+0xc>)
  401302:	6813      	ldr	r3, [r2, #0]
  401304:	3301      	adds	r3, #1
  401306:	6013      	str	r3, [r2, #0]
  401308:	4770      	bx	lr
  40130a:	bf00      	nop
  40130c:	20400488 	.word	0x20400488

00401310 <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  401310:	2200      	movs	r2, #0
  401312:	4b06      	ldr	r3, [pc, #24]	; (40132c <time_tick_init+0x1c>)
  401314:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401316:	4b06      	ldr	r3, [pc, #24]	; (401330 <time_tick_init+0x20>)
  401318:	4906      	ldr	r1, [pc, #24]	; (401334 <time_tick_init+0x24>)
  40131a:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40131c:	20e0      	movs	r0, #224	; 0xe0
  40131e:	4906      	ldr	r1, [pc, #24]	; (401338 <time_tick_init+0x28>)
  401320:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401326:	2207      	movs	r2, #7
  401328:	601a      	str	r2, [r3, #0]
  40132a:	4770      	bx	lr
  40132c:	20400488 	.word	0x20400488
  401330:	e000e010 	.word	0xe000e010
  401334:	0002327f 	.word	0x0002327f
  401338:	e000ed00 	.word	0xe000ed00

0040133c <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  40133c:	4b01      	ldr	r3, [pc, #4]	; (401344 <time_tick_get+0x8>)
  40133e:	6818      	ldr	r0, [r3, #0]
}
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	20400488 	.word	0x20400488

00401348 <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
  401348:	4281      	cmp	r1, r0
  40134a:	d301      	bcc.n	401350 <time_tick_calc_delay+0x8>
		return (tick_end - tick_start) * (1000 / TICK_US);
  40134c:	1a08      	subs	r0, r1, r0
  40134e:	4770      	bx	lr
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  401350:	1a09      	subs	r1, r1, r0
  401352:	1e48      	subs	r0, r1, #1
	}
}
  401354:	4770      	bx	lr
  401356:	bf00      	nop

00401358 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401358:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40135a:	4810      	ldr	r0, [pc, #64]	; (40139c <sysclk_init+0x44>)
  40135c:	4b10      	ldr	r3, [pc, #64]	; (4013a0 <sysclk_init+0x48>)
  40135e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401360:	213e      	movs	r1, #62	; 0x3e
  401362:	2000      	movs	r0, #0
  401364:	4b0f      	ldr	r3, [pc, #60]	; (4013a4 <sysclk_init+0x4c>)
  401366:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401368:	4c0f      	ldr	r4, [pc, #60]	; (4013a8 <sysclk_init+0x50>)
  40136a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40136c:	2800      	cmp	r0, #0
  40136e:	d0fc      	beq.n	40136a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401370:	4b0e      	ldr	r3, [pc, #56]	; (4013ac <sysclk_init+0x54>)
  401372:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401374:	4a0e      	ldr	r2, [pc, #56]	; (4013b0 <sysclk_init+0x58>)
  401376:	4b0f      	ldr	r3, [pc, #60]	; (4013b4 <sysclk_init+0x5c>)
  401378:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40137a:	4c0f      	ldr	r4, [pc, #60]	; (4013b8 <sysclk_init+0x60>)
  40137c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40137e:	2800      	cmp	r0, #0
  401380:	d0fc      	beq.n	40137c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401382:	2002      	movs	r0, #2
  401384:	4b0d      	ldr	r3, [pc, #52]	; (4013bc <sysclk_init+0x64>)
  401386:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401388:	2000      	movs	r0, #0
  40138a:	4b0d      	ldr	r3, [pc, #52]	; (4013c0 <sysclk_init+0x68>)
  40138c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40138e:	4b0d      	ldr	r3, [pc, #52]	; (4013c4 <sysclk_init+0x6c>)
  401390:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401392:	480d      	ldr	r0, [pc, #52]	; (4013c8 <sysclk_init+0x70>)
  401394:	4b02      	ldr	r3, [pc, #8]	; (4013a0 <sysclk_init+0x48>)
  401396:	4798      	blx	r3
  401398:	bd10      	pop	{r4, pc}
  40139a:	bf00      	nop
  40139c:	11e1a300 	.word	0x11e1a300
  4013a0:	00401975 	.word	0x00401975
  4013a4:	00401471 	.word	0x00401471
  4013a8:	004014c5 	.word	0x004014c5
  4013ac:	004014d5 	.word	0x004014d5
  4013b0:	200b3f01 	.word	0x200b3f01
  4013b4:	400e0600 	.word	0x400e0600
  4013b8:	004014e5 	.word	0x004014e5
  4013bc:	004013cd 	.word	0x004013cd
  4013c0:	00401409 	.word	0x00401409
  4013c4:	00401865 	.word	0x00401865
  4013c8:	08954400 	.word	0x08954400

004013cc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4013cc:	2803      	cmp	r0, #3
  4013ce:	d007      	beq.n	4013e0 <pmc_mck_set_division+0x14>
  4013d0:	2804      	cmp	r0, #4
  4013d2:	d008      	beq.n	4013e6 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4013d4:	2802      	cmp	r0, #2
  4013d6:	bf0c      	ite	eq
  4013d8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4013dc:	2200      	movne	r2, #0
  4013de:	e004      	b.n	4013ea <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013e0:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4013e4:	e001      	b.n	4013ea <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013ea:	4906      	ldr	r1, [pc, #24]	; (401404 <pmc_mck_set_division+0x38>)
  4013ec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4013ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4013f2:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4013f4:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013f6:	460a      	mov	r2, r1
  4013f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013fa:	f013 0f08 	tst.w	r3, #8
  4013fe:	d0fb      	beq.n	4013f8 <pmc_mck_set_division+0x2c>
}
  401400:	4770      	bx	lr
  401402:	bf00      	nop
  401404:	400e0600 	.word	0x400e0600

00401408 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401408:	4a18      	ldr	r2, [pc, #96]	; (40146c <pmc_switch_mck_to_pllack+0x64>)
  40140a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40140c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401410:	4318      	orrs	r0, r3
  401412:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401414:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401416:	f013 0f08 	tst.w	r3, #8
  40141a:	d003      	beq.n	401424 <pmc_switch_mck_to_pllack+0x1c>
  40141c:	e009      	b.n	401432 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40141e:	3b01      	subs	r3, #1
  401420:	d103      	bne.n	40142a <pmc_switch_mck_to_pllack+0x22>
  401422:	e01e      	b.n	401462 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401428:	4910      	ldr	r1, [pc, #64]	; (40146c <pmc_switch_mck_to_pllack+0x64>)
  40142a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40142c:	f012 0f08 	tst.w	r2, #8
  401430:	d0f5      	beq.n	40141e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401432:	4a0e      	ldr	r2, [pc, #56]	; (40146c <pmc_switch_mck_to_pllack+0x64>)
  401434:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401436:	f023 0303 	bic.w	r3, r3, #3
  40143a:	f043 0302 	orr.w	r3, r3, #2
  40143e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401440:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401442:	f010 0008 	ands.w	r0, r0, #8
  401446:	d004      	beq.n	401452 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401448:	2000      	movs	r0, #0
  40144a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40144c:	3b01      	subs	r3, #1
  40144e:	d103      	bne.n	401458 <pmc_switch_mck_to_pllack+0x50>
  401450:	e009      	b.n	401466 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401456:	4905      	ldr	r1, [pc, #20]	; (40146c <pmc_switch_mck_to_pllack+0x64>)
  401458:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40145a:	f012 0f08 	tst.w	r2, #8
  40145e:	d0f5      	beq.n	40144c <pmc_switch_mck_to_pllack+0x44>
  401460:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401462:	2001      	movs	r0, #1
  401464:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401466:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401468:	4770      	bx	lr
  40146a:	bf00      	nop
  40146c:	400e0600 	.word	0x400e0600

00401470 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401470:	b138      	cbz	r0, 401482 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401472:	490e      	ldr	r1, [pc, #56]	; (4014ac <pmc_switch_mainck_to_xtal+0x3c>)
  401474:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401476:	4a0e      	ldr	r2, [pc, #56]	; (4014b0 <pmc_switch_mainck_to_xtal+0x40>)
  401478:	401a      	ands	r2, r3
  40147a:	4b0e      	ldr	r3, [pc, #56]	; (4014b4 <pmc_switch_mainck_to_xtal+0x44>)
  40147c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40147e:	620b      	str	r3, [r1, #32]
  401480:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401482:	480a      	ldr	r0, [pc, #40]	; (4014ac <pmc_switch_mainck_to_xtal+0x3c>)
  401484:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401486:	0209      	lsls	r1, r1, #8
  401488:	b289      	uxth	r1, r1
  40148a:	4a0b      	ldr	r2, [pc, #44]	; (4014b8 <pmc_switch_mainck_to_xtal+0x48>)
  40148c:	401a      	ands	r2, r3
  40148e:	4b0b      	ldr	r3, [pc, #44]	; (4014bc <pmc_switch_mainck_to_xtal+0x4c>)
  401490:	4313      	orrs	r3, r2
  401492:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401494:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401496:	4602      	mov	r2, r0
  401498:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40149a:	f013 0f01 	tst.w	r3, #1
  40149e:	d0fb      	beq.n	401498 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4014a0:	4a02      	ldr	r2, [pc, #8]	; (4014ac <pmc_switch_mainck_to_xtal+0x3c>)
  4014a2:	6a11      	ldr	r1, [r2, #32]
  4014a4:	4b06      	ldr	r3, [pc, #24]	; (4014c0 <pmc_switch_mainck_to_xtal+0x50>)
  4014a6:	430b      	orrs	r3, r1
  4014a8:	6213      	str	r3, [r2, #32]
  4014aa:	4770      	bx	lr
  4014ac:	400e0600 	.word	0x400e0600
  4014b0:	fec8fffc 	.word	0xfec8fffc
  4014b4:	01370002 	.word	0x01370002
  4014b8:	ffc8fffc 	.word	0xffc8fffc
  4014bc:	00370001 	.word	0x00370001
  4014c0:	01370000 	.word	0x01370000

004014c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4014c4:	4b02      	ldr	r3, [pc, #8]	; (4014d0 <pmc_osc_is_ready_mainck+0xc>)
  4014c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4014cc:	4770      	bx	lr
  4014ce:	bf00      	nop
  4014d0:	400e0600 	.word	0x400e0600

004014d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4014d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4014d8:	4b01      	ldr	r3, [pc, #4]	; (4014e0 <pmc_disable_pllack+0xc>)
  4014da:	629a      	str	r2, [r3, #40]	; 0x28
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop
  4014e0:	400e0600 	.word	0x400e0600

004014e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4014e4:	4b02      	ldr	r3, [pc, #8]	; (4014f0 <pmc_is_locked_pllack+0xc>)
  4014e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014e8:	f000 0002 	and.w	r0, r0, #2
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	400e0600 	.word	0x400e0600

004014f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4014f4:	283f      	cmp	r0, #63	; 0x3f
  4014f6:	d81e      	bhi.n	401536 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4014f8:	281f      	cmp	r0, #31
  4014fa:	d80c      	bhi.n	401516 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4014fc:	4b11      	ldr	r3, [pc, #68]	; (401544 <pmc_enable_periph_clk+0x50>)
  4014fe:	699a      	ldr	r2, [r3, #24]
  401500:	2301      	movs	r3, #1
  401502:	4083      	lsls	r3, r0
  401504:	4393      	bics	r3, r2
  401506:	d018      	beq.n	40153a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401508:	2301      	movs	r3, #1
  40150a:	fa03 f000 	lsl.w	r0, r3, r0
  40150e:	4b0d      	ldr	r3, [pc, #52]	; (401544 <pmc_enable_periph_clk+0x50>)
  401510:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401512:	2000      	movs	r0, #0
  401514:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401516:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401518:	4b0a      	ldr	r3, [pc, #40]	; (401544 <pmc_enable_periph_clk+0x50>)
  40151a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40151e:	2301      	movs	r3, #1
  401520:	4083      	lsls	r3, r0
  401522:	4393      	bics	r3, r2
  401524:	d00b      	beq.n	40153e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401526:	2301      	movs	r3, #1
  401528:	fa03 f000 	lsl.w	r0, r3, r0
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <pmc_enable_periph_clk+0x50>)
  40152e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401532:	2000      	movs	r0, #0
  401534:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401536:	2001      	movs	r0, #1
  401538:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40153a:	2000      	movs	r0, #0
  40153c:	4770      	bx	lr
  40153e:	2000      	movs	r0, #0
}
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	400e0600 	.word	0x400e0600

00401548 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401548:	4b10      	ldr	r3, [pc, #64]	; (40158c <twihs_set_speed+0x44>)
  40154a:	4299      	cmp	r1, r3
  40154c:	d81b      	bhi.n	401586 <twihs_set_speed+0x3e>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40154e:	0049      	lsls	r1, r1, #1
  401550:	fbb2 f2f1 	udiv	r2, r2, r1
  401554:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401556:	2aff      	cmp	r2, #255	; 0xff
  401558:	d907      	bls.n	40156a <twihs_set_speed+0x22>
  40155a:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  40155c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40155e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401560:	2aff      	cmp	r2, #255	; 0xff
  401562:	d903      	bls.n	40156c <twihs_set_speed+0x24>
  401564:	2b06      	cmp	r3, #6
  401566:	d9f9      	bls.n	40155c <twihs_set_speed+0x14>
  401568:	e000      	b.n	40156c <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40156a:	2300      	movs	r3, #0
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  40156c:	b2d1      	uxtb	r1, r2
  40156e:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
  401572:	0212      	lsls	r2, r2, #8
  401574:	b292      	uxth	r2, r2
  401576:	430a      	orrs	r2, r1
  401578:	041b      	lsls	r3, r3, #16
  40157a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40157e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  401580:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);

	return PASS;
  401582:	2000      	movs	r0, #0
  401584:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401586:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);

	return PASS;
}
  401588:	4770      	bx	lr
  40158a:	bf00      	nop
  40158c:	00061a80 	.word	0x00061a80

00401590 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401590:	b508      	push	{r3, lr}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401592:	f04f 32ff 	mov.w	r2, #4294967295
  401596:	6282      	str	r2, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401598:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40159a:	2280      	movs	r2, #128	; 0x80
  40159c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40159e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4015a0:	2208      	movs	r2, #8
  4015a2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4015a4:	2220      	movs	r2, #32
  4015a6:	6002      	str	r2, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4015a8:	2204      	movs	r2, #4
  4015aa:	6002      	str	r2, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4015ac:	680a      	ldr	r2, [r1, #0]
  4015ae:	6849      	ldr	r1, [r1, #4]
  4015b0:	4b03      	ldr	r3, [pc, #12]	; (4015c0 <twihs_master_init+0x30>)
  4015b2:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  4015b4:	2801      	cmp	r0, #1
  4015b6:	bf14      	ite	ne
  4015b8:	2000      	movne	r0, #0
  4015ba:	2001      	moveq	r0, #1
  4015bc:	bd08      	pop	{r3, pc}
  4015be:	bf00      	nop
  4015c0:	00401549 	.word	0x00401549

004015c4 <twihs_master_write>:
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
	volatile uint32_t status; 
	uint32_t cnt = p_packet->length;
  4015c4:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4015c6:	2a00      	cmp	r2, #0
  4015c8:	d04f      	beq.n	40166a <twihs_master_write+0xa6>
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4015ca:	b470      	push	{r4, r5, r6}
  4015cc:	b083      	sub	sp, #12
  4015ce:	4603      	mov	r3, r0
	volatile uint32_t status; 
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4015d0:	6888      	ldr	r0, [r1, #8]
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0; 
  4015d2:	2600      	movs	r6, #0
  4015d4:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4015d6:	7c0c      	ldrb	r4, [r1, #16]
  4015d8:	0424      	lsls	r4, r4, #16
  4015da:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
  4015de:	684c      	ldr	r4, [r1, #4]
  4015e0:	0224      	lsls	r4, r4, #8
  4015e2:	f404 7440 	and.w	r4, r4, #768	; 0x300
  4015e6:	432c      	orrs	r4, r5
  4015e8:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  4015ea:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4015ec:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4015ee:	b15d      	cbz	r5, 401608 <twihs_master_write+0x44>
		return 0;

	val = addr[0];
  4015f0:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  4015f2:	2d01      	cmp	r5, #1
  4015f4:	dd02      	ble.n	4015fc <twihs_master_write+0x38>
		val <<= 8;
		val |= addr[1];
  4015f6:	784e      	ldrb	r6, [r1, #1]
  4015f8:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  4015fc:	2d02      	cmp	r5, #2
  4015fe:	dd04      	ble.n	40160a <twihs_master_write+0x46>
		val <<= 8;
		val |= addr[2];
  401600:	7889      	ldrb	r1, [r1, #2]
  401602:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  401606:	e000      	b.n	40160a <twihs_master_write+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401608:	2400      	movs	r4, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40160a:	60dc      	str	r4, [r3, #12]
  40160c:	e011      	b.n	401632 <twihs_master_write+0x6e>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  40160e:	6a19      	ldr	r1, [r3, #32]
  401610:	9101      	str	r1, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401612:	9901      	ldr	r1, [sp, #4]
  401614:	f411 7f80 	tst.w	r1, #256	; 0x100
  401618:	d129      	bne.n	40166e <twihs_master_write+0xaa>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40161a:	9901      	ldr	r1, [sp, #4]
  40161c:	f011 0f04 	tst.w	r1, #4
  401620:	d102      	bne.n	401628 <twihs_master_write+0x64>
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401622:	2a00      	cmp	r2, #0
  401624:	d1f3      	bne.n	40160e <twihs_master_write+0x4a>
  401626:	e00f      	b.n	401648 <twihs_master_write+0x84>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		p_twihs->TWIHS_THR = *buffer++;
  401628:	f810 1b01 	ldrb.w	r1, [r0], #1
  40162c:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40162e:	3a01      	subs	r2, #1
  401630:	d00a      	beq.n	401648 <twihs_master_write+0x84>
		status = p_twihs->TWIHS_SR;
  401632:	6a19      	ldr	r1, [r3, #32]
  401634:	9101      	str	r1, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401636:	9901      	ldr	r1, [sp, #4]
  401638:	f411 7f80 	tst.w	r1, #256	; 0x100
  40163c:	d119      	bne.n	401672 <twihs_master_write+0xae>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40163e:	9901      	ldr	r1, [sp, #4]
  401640:	f011 0f04 	tst.w	r1, #4
  401644:	d0e3      	beq.n	40160e <twihs_master_write+0x4a>
  401646:	e7ef      	b.n	401628 <twihs_master_write+0x64>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401648:	6a1a      	ldr	r2, [r3, #32]
  40164a:	9201      	str	r2, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  40164c:	9801      	ldr	r0, [sp, #4]
  40164e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
  401652:	d110      	bne.n	401676 <twihs_master_write+0xb2>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  401654:	9a01      	ldr	r2, [sp, #4]
  401656:	f012 0f04 	tst.w	r2, #4
  40165a:	d0f5      	beq.n	401648 <twihs_master_write+0x84>
			break;
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40165c:	2202      	movs	r2, #2
  40165e:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401660:	6a1a      	ldr	r2, [r3, #32]
  401662:	f012 0f01 	tst.w	r2, #1
  401666:	d0fb      	beq.n	401660 <twihs_master_write+0x9c>
  401668:	e006      	b.n	401678 <twihs_master_write+0xb4>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  40166a:	2001      	movs	r0, #1

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  40166c:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  40166e:	2005      	movs	r0, #5
  401670:	e002      	b.n	401678 <twihs_master_write+0xb4>
  401672:	2005      	movs	r0, #5
  401674:	e000      	b.n	401678 <twihs_master_write+0xb4>
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  401676:	2005      	movs	r0, #5

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  401678:	b003      	add	sp, #12
  40167a:	bc70      	pop	{r4, r5, r6}
  40167c:	4770      	bx	lr
  40167e:	bf00      	nop

00401680 <xdmac_configure_transfer>:
  401680:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401684:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401686:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401688:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  40168a:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  40168c:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  40168e:	6813      	ldr	r3, [r2, #0]
  401690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401694:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401696:	6913      	ldr	r3, [r2, #16]
  401698:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40169c:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  40169e:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  4016a0:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  4016a2:	6993      	ldr	r3, [r2, #24]
  4016a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  4016ac:	69d3      	ldr	r3, [r2, #28]
  4016ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4016b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  4016b6:	68d3      	ldr	r3, [r2, #12]
 */
static inline void xdmac_channel_set_config(Xdmac *xdmac, uint32_t channel_num, uint32_t config)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  4016b8:	678b      	str	r3, [r1, #120]	; 0x78
  4016ba:	4770      	bx	lr

004016bc <board_init>:
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4016bc:	4b33      	ldr	r3, [pc, #204]	; (40178c <board_init+0xd0>)
  4016be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016c2:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4016c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4016c8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4016ca:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4016cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4016d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016d2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4016d6:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4016d8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016da:	4311      	orrs	r1, r2
  4016dc:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016de:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4016e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4016e4:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4016e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4016ea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4016ec:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4016ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4016f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4016f4:	4311      	orrs	r1, r2
  4016f6:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4016f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4016fa:	4311      	orrs	r1, r2
  4016fc:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4016fe:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401704:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40170a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40170c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40170e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401712:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401714:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  401718:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  40171a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40171c:	4311      	orrs	r1, r2
  40171e:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401720:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401726:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40172c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40172e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401734:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401736:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40173a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  40173c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40173e:	4311      	orrs	r1, r2
  401740:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401742:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401744:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401748:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40174a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40174e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401750:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401756:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401758:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  40175c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  40175e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401760:	4311      	orrs	r1, r2
  401762:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401764:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40176a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40176c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401770:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401772:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401778:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40177a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40177e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  401780:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401782:	4311      	orrs	r1, r2
  401784:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401786:	605a      	str	r2, [r3, #4]
  401788:	4770      	bx	lr
  40178a:	bf00      	nop
  40178c:	400e0e00 	.word	0x400e0e00

00401790 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401790:	e7fe      	b.n	401790 <Dummy_Handler>
  401792:	bf00      	nop

00401794 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401794:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  401796:	4b25      	ldr	r3, [pc, #148]	; (40182c <Reset_Handler+0x98>)
  401798:	4a25      	ldr	r2, [pc, #148]	; (401830 <Reset_Handler+0x9c>)
  40179a:	429a      	cmp	r2, r3
  40179c:	d003      	beq.n	4017a6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  40179e:	4b25      	ldr	r3, [pc, #148]	; (401834 <Reset_Handler+0xa0>)
  4017a0:	4a22      	ldr	r2, [pc, #136]	; (40182c <Reset_Handler+0x98>)
  4017a2:	429a      	cmp	r2, r3
  4017a4:	d304      	bcc.n	4017b0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017a6:	4b24      	ldr	r3, [pc, #144]	; (401838 <Reset_Handler+0xa4>)
  4017a8:	4a24      	ldr	r2, [pc, #144]	; (40183c <Reset_Handler+0xa8>)
  4017aa:	429a      	cmp	r2, r3
  4017ac:	d30f      	bcc.n	4017ce <Reset_Handler+0x3a>
  4017ae:	e01a      	b.n	4017e6 <Reset_Handler+0x52>
  4017b0:	491e      	ldr	r1, [pc, #120]	; (40182c <Reset_Handler+0x98>)
  4017b2:	4b23      	ldr	r3, [pc, #140]	; (401840 <Reset_Handler+0xac>)
  4017b4:	1a5b      	subs	r3, r3, r1
  4017b6:	f023 0303 	bic.w	r3, r3, #3
  4017ba:	3304      	adds	r3, #4
  4017bc:	4a1c      	ldr	r2, [pc, #112]	; (401830 <Reset_Handler+0x9c>)
  4017be:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4017c0:	f852 0b04 	ldr.w	r0, [r2], #4
  4017c4:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4017c8:	429a      	cmp	r2, r3
  4017ca:	d1f9      	bne.n	4017c0 <Reset_Handler+0x2c>
  4017cc:	e7eb      	b.n	4017a6 <Reset_Handler+0x12>
  4017ce:	4b1d      	ldr	r3, [pc, #116]	; (401844 <Reset_Handler+0xb0>)
  4017d0:	4a1d      	ldr	r2, [pc, #116]	; (401848 <Reset_Handler+0xb4>)
  4017d2:	1ad2      	subs	r2, r2, r3
  4017d4:	f022 0203 	bic.w	r2, r2, #3
  4017d8:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017da:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4017dc:	2100      	movs	r1, #0
  4017de:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4017e2:	4293      	cmp	r3, r2
  4017e4:	d1fb      	bne.n	4017de <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017e6:	4a19      	ldr	r2, [pc, #100]	; (40184c <Reset_Handler+0xb8>)
  4017e8:	4b19      	ldr	r3, [pc, #100]	; (401850 <Reset_Handler+0xbc>)
  4017ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017ee:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4017f0:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4017f4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4017f6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4017fa:	2100      	movs	r1, #0
  4017fc:	4a15      	ldr	r2, [pc, #84]	; (401854 <Reset_Handler+0xc0>)
  4017fe:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401800:	4915      	ldr	r1, [pc, #84]	; (401858 <Reset_Handler+0xc4>)
  401802:	680a      	ldr	r2, [r1, #0]
  401804:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  401808:	600a      	str	r2, [r1, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40180a:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  40180e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401812:	b92b      	cbnz	r3, 401820 <Reset_Handler+0x8c>
		cpu_irq_enable();
  401814:	2201      	movs	r2, #1
  401816:	4b0f      	ldr	r3, [pc, #60]	; (401854 <Reset_Handler+0xc0>)
  401818:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40181a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40181e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401820:	4b0e      	ldr	r3, [pc, #56]	; (40185c <Reset_Handler+0xc8>)
  401822:	4798      	blx	r3

        /* Branch to main function */
        main();
  401824:	4b0e      	ldr	r3, [pc, #56]	; (401860 <Reset_Handler+0xcc>)
  401826:	4798      	blx	r3
  401828:	e7fe      	b.n	401828 <Reset_Handler+0x94>
  40182a:	bf00      	nop
  40182c:	20400000 	.word	0x20400000
  401830:	00402728 	.word	0x00402728
  401834:	20400438 	.word	0x20400438
  401838:	2044b714 	.word	0x2044b714
  40183c:	20400438 	.word	0x20400438
  401840:	20400437 	.word	0x20400437
  401844:	2040043c 	.word	0x2040043c
  401848:	2044b717 	.word	0x2044b717
  40184c:	e000ed00 	.word	0xe000ed00
  401850:	00400000 	.word	0x00400000
  401854:	20400000 	.word	0x20400000
  401858:	e000ed88 	.word	0xe000ed88
  40185c:	0040245d 	.word	0x0040245d
  401860:	00402181 	.word	0x00402181

00401864 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401864:	4b3c      	ldr	r3, [pc, #240]	; (401958 <SystemCoreClockUpdate+0xf4>)
  401866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401868:	f003 0303 	and.w	r3, r3, #3
  40186c:	2b01      	cmp	r3, #1
  40186e:	d00f      	beq.n	401890 <SystemCoreClockUpdate+0x2c>
  401870:	b113      	cbz	r3, 401878 <SystemCoreClockUpdate+0x14>
  401872:	2b02      	cmp	r3, #2
  401874:	d029      	beq.n	4018ca <SystemCoreClockUpdate+0x66>
  401876:	e057      	b.n	401928 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401878:	4b38      	ldr	r3, [pc, #224]	; (40195c <SystemCoreClockUpdate+0xf8>)
  40187a:	695b      	ldr	r3, [r3, #20]
  40187c:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401880:	bf14      	ite	ne
  401882:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401886:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40188a:	4b35      	ldr	r3, [pc, #212]	; (401960 <SystemCoreClockUpdate+0xfc>)
  40188c:	601a      	str	r2, [r3, #0]
  40188e:	e04b      	b.n	401928 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401890:	4b31      	ldr	r3, [pc, #196]	; (401958 <SystemCoreClockUpdate+0xf4>)
  401892:	6a1b      	ldr	r3, [r3, #32]
  401894:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401898:	d003      	beq.n	4018a2 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40189a:	4a32      	ldr	r2, [pc, #200]	; (401964 <SystemCoreClockUpdate+0x100>)
  40189c:	4b30      	ldr	r3, [pc, #192]	; (401960 <SystemCoreClockUpdate+0xfc>)
  40189e:	601a      	str	r2, [r3, #0]
  4018a0:	e042      	b.n	401928 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018a2:	4a31      	ldr	r2, [pc, #196]	; (401968 <SystemCoreClockUpdate+0x104>)
  4018a4:	4b2e      	ldr	r3, [pc, #184]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018a6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018a8:	4b2b      	ldr	r3, [pc, #172]	; (401958 <SystemCoreClockUpdate+0xf4>)
  4018aa:	6a1b      	ldr	r3, [r3, #32]
  4018ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018b0:	2b10      	cmp	r3, #16
  4018b2:	d002      	beq.n	4018ba <SystemCoreClockUpdate+0x56>
  4018b4:	2b20      	cmp	r3, #32
  4018b6:	d004      	beq.n	4018c2 <SystemCoreClockUpdate+0x5e>
  4018b8:	e036      	b.n	401928 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4018ba:	4a2c      	ldr	r2, [pc, #176]	; (40196c <SystemCoreClockUpdate+0x108>)
  4018bc:	4b28      	ldr	r3, [pc, #160]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018be:	601a      	str	r2, [r3, #0]
          break;
  4018c0:	e032      	b.n	401928 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4018c2:	4a28      	ldr	r2, [pc, #160]	; (401964 <SystemCoreClockUpdate+0x100>)
  4018c4:	4b26      	ldr	r3, [pc, #152]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018c6:	601a      	str	r2, [r3, #0]
          break;
  4018c8:	e02e      	b.n	401928 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4018ca:	4b23      	ldr	r3, [pc, #140]	; (401958 <SystemCoreClockUpdate+0xf4>)
  4018cc:	6a1b      	ldr	r3, [r3, #32]
  4018ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018d2:	d003      	beq.n	4018dc <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018d4:	4a23      	ldr	r2, [pc, #140]	; (401964 <SystemCoreClockUpdate+0x100>)
  4018d6:	4b22      	ldr	r3, [pc, #136]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018d8:	601a      	str	r2, [r3, #0]
  4018da:	e012      	b.n	401902 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018dc:	4a22      	ldr	r2, [pc, #136]	; (401968 <SystemCoreClockUpdate+0x104>)
  4018de:	4b20      	ldr	r3, [pc, #128]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018e0:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4018e2:	4b1d      	ldr	r3, [pc, #116]	; (401958 <SystemCoreClockUpdate+0xf4>)
  4018e4:	6a1b      	ldr	r3, [r3, #32]
  4018e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018ea:	2b10      	cmp	r3, #16
  4018ec:	d002      	beq.n	4018f4 <SystemCoreClockUpdate+0x90>
  4018ee:	2b20      	cmp	r3, #32
  4018f0:	d004      	beq.n	4018fc <SystemCoreClockUpdate+0x98>
  4018f2:	e006      	b.n	401902 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4018f4:	4a1d      	ldr	r2, [pc, #116]	; (40196c <SystemCoreClockUpdate+0x108>)
  4018f6:	4b1a      	ldr	r3, [pc, #104]	; (401960 <SystemCoreClockUpdate+0xfc>)
  4018f8:	601a      	str	r2, [r3, #0]
          break;
  4018fa:	e002      	b.n	401902 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4018fc:	4a19      	ldr	r2, [pc, #100]	; (401964 <SystemCoreClockUpdate+0x100>)
  4018fe:	4b18      	ldr	r3, [pc, #96]	; (401960 <SystemCoreClockUpdate+0xfc>)
  401900:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401902:	4b15      	ldr	r3, [pc, #84]	; (401958 <SystemCoreClockUpdate+0xf4>)
  401904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401906:	f003 0303 	and.w	r3, r3, #3
  40190a:	2b02      	cmp	r3, #2
  40190c:	d10c      	bne.n	401928 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40190e:	4a12      	ldr	r2, [pc, #72]	; (401958 <SystemCoreClockUpdate+0xf4>)
  401910:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401912:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401914:	4812      	ldr	r0, [pc, #72]	; (401960 <SystemCoreClockUpdate+0xfc>)
  401916:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40191a:	6803      	ldr	r3, [r0, #0]
  40191c:	fb01 3303 	mla	r3, r1, r3, r3
  401920:	b2d2      	uxtb	r2, r2
  401922:	fbb3 f3f2 	udiv	r3, r3, r2
  401926:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401928:	4b0b      	ldr	r3, [pc, #44]	; (401958 <SystemCoreClockUpdate+0xf4>)
  40192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40192c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401930:	2b70      	cmp	r3, #112	; 0x70
  401932:	d107      	bne.n	401944 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  401934:	4a0a      	ldr	r2, [pc, #40]	; (401960 <SystemCoreClockUpdate+0xfc>)
  401936:	6813      	ldr	r3, [r2, #0]
  401938:	490d      	ldr	r1, [pc, #52]	; (401970 <SystemCoreClockUpdate+0x10c>)
  40193a:	fba1 1303 	umull	r1, r3, r1, r3
  40193e:	085b      	lsrs	r3, r3, #1
  401940:	6013      	str	r3, [r2, #0]
  401942:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401944:	4b04      	ldr	r3, [pc, #16]	; (401958 <SystemCoreClockUpdate+0xf4>)
  401946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401948:	4905      	ldr	r1, [pc, #20]	; (401960 <SystemCoreClockUpdate+0xfc>)
  40194a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40194e:	680b      	ldr	r3, [r1, #0]
  401950:	40d3      	lsrs	r3, r2
  401952:	600b      	str	r3, [r1, #0]
  401954:	4770      	bx	lr
  401956:	bf00      	nop
  401958:	400e0600 	.word	0x400e0600
  40195c:	400e1810 	.word	0x400e1810
  401960:	20400004 	.word	0x20400004
  401964:	00b71b00 	.word	0x00b71b00
  401968:	003d0900 	.word	0x003d0900
  40196c:	007a1200 	.word	0x007a1200
  401970:	aaaaaaab 	.word	0xaaaaaaab

00401974 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401974:	4b12      	ldr	r3, [pc, #72]	; (4019c0 <system_init_flash+0x4c>)
  401976:	4298      	cmp	r0, r3
  401978:	d804      	bhi.n	401984 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40197a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40197e:	4b11      	ldr	r3, [pc, #68]	; (4019c4 <system_init_flash+0x50>)
  401980:	601a      	str	r2, [r3, #0]
  401982:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401984:	4b10      	ldr	r3, [pc, #64]	; (4019c8 <system_init_flash+0x54>)
  401986:	4298      	cmp	r0, r3
  401988:	d803      	bhi.n	401992 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40198a:	4a10      	ldr	r2, [pc, #64]	; (4019cc <system_init_flash+0x58>)
  40198c:	4b0d      	ldr	r3, [pc, #52]	; (4019c4 <system_init_flash+0x50>)
  40198e:	601a      	str	r2, [r3, #0]
  401990:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401992:	4b0f      	ldr	r3, [pc, #60]	; (4019d0 <system_init_flash+0x5c>)
  401994:	4298      	cmp	r0, r3
  401996:	d803      	bhi.n	4019a0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401998:	4a0e      	ldr	r2, [pc, #56]	; (4019d4 <system_init_flash+0x60>)
  40199a:	4b0a      	ldr	r3, [pc, #40]	; (4019c4 <system_init_flash+0x50>)
  40199c:	601a      	str	r2, [r3, #0]
  40199e:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4019a0:	4b0d      	ldr	r3, [pc, #52]	; (4019d8 <system_init_flash+0x64>)
  4019a2:	4298      	cmp	r0, r3
  4019a4:	d803      	bhi.n	4019ae <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019a6:	4a0d      	ldr	r2, [pc, #52]	; (4019dc <system_init_flash+0x68>)
  4019a8:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <system_init_flash+0x50>)
  4019aa:	601a      	str	r2, [r3, #0]
  4019ac:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4019ae:	4b0c      	ldr	r3, [pc, #48]	; (4019e0 <system_init_flash+0x6c>)
  4019b0:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019b2:	bf94      	ite	ls
  4019b4:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4019b8:	4a0a      	ldrhi	r2, [pc, #40]	; (4019e4 <system_init_flash+0x70>)
  4019ba:	4b02      	ldr	r3, [pc, #8]	; (4019c4 <system_init_flash+0x50>)
  4019bc:	601a      	str	r2, [r3, #0]
  4019be:	4770      	bx	lr
  4019c0:	01312cff 	.word	0x01312cff
  4019c4:	400e0c00 	.word	0x400e0c00
  4019c8:	026259ff 	.word	0x026259ff
  4019cc:	04000100 	.word	0x04000100
  4019d0:	039386ff 	.word	0x039386ff
  4019d4:	04000200 	.word	0x04000200
  4019d8:	04c4b3ff 	.word	0x04c4b3ff
  4019dc:	04000300 	.word	0x04000300
  4019e0:	05f5e0ff 	.word	0x05f5e0ff
  4019e4:	04000500 	.word	0x04000500

004019e8 <enableSourceClk>:
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4019e8:	4b0e      	ldr	r3, [pc, #56]	; (401a24 <enableSourceClk+0x3c>)
  4019ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4019ee:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4019f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4019f4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4019f6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4019f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4019fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4019fe:	4311      	orrs	r1, r2
  401a00:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401a02:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401a04:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  401a08:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401a0a:	605a      	str	r2, [r3, #4]
	//Sets PCK1 as clock output using Main Clocks
	//pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);//Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  401a0c:	4a06      	ldr	r2, [pc, #24]	; (401a28 <enableSourceClk+0x40>)
  401a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
  401a12:	6013      	str	r3, [r2, #0]
	//PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_MAIN_CLK);
	#ifdef EV76C454
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 48MHz
	#endif
	#ifdef EV76C454_SUBSAMP //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(2); //Should make output = 48MHz
  401a14:	6c53      	ldr	r3, [r2, #68]	; 0x44
  401a16:	f023 0327 	bic.w	r3, r3, #39	; 0x27
  401a1a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  401a1e:	6453      	str	r3, [r2, #68]	; 0x44
  401a20:	4770      	bx	lr
  401a22:	bf00      	nop
  401a24:	400e0e00 	.word	0x400e0e00
  401a28:	400e0600 	.word	0x400e0600

00401a2c <imagingSensorConfigure>:
	//PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_MAIN_CLK)|PMC_PCK_PRES(0); //Originally prescaler was (3)


}

void imagingSensorConfigure() {
  401a2c:	b570      	push	{r4, r5, r6, lr}
	//bit 3: Frame Enable Polarity, 0->FEN is active low
	//bit 2: Line Enable Polarity, 0->LEN is active low
	//bit 1: Data activity when FEN or LEN are inactive, 1->No activity
	//bit 0: LEN activity when FEN is inactive, 0->passes all calced LEN
	//default->0b00100010
	packetCMOS.addr[0] = 0x0A; //Synchro
  401a2e:	4b75      	ldr	r3, [pc, #468]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401a30:	220a      	movs	r2, #10
  401a32:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = 0b01101111; 
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = 0b10101111; //clock div by 4
  401a34:	4a74      	ldr	r2, [pc, #464]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401a36:	21af      	movs	r1, #175	; 0xaf
  401a38:	7011      	strb	r1, [r2, #0]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a3a:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401a3c:	2201      	movs	r2, #1
  401a3e:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401a40:	461e      	mov	r6, r3
  401a42:	4d72      	ldr	r5, [pc, #456]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401a44:	4c72      	ldr	r4, [pc, #456]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401a46:	4631      	mov	r1, r6
  401a48:	4628      	mov	r0, r5
  401a4a:	47a0      	blx	r4
  401a4c:	2800      	cmp	r0, #0
  401a4e:	d1fa      	bne.n	401a46 <imagingSensorConfigure+0x1a>
	////bit 3: 0-> No horizontal flip
	////bit 0,1,2: Subsample factor = 2^value
	////default->0x00;

	#ifdef EV76C454_SUBSAMP
		packetCMOS.addr[0] = 0x0B; //frame_config
  401a50:	4b6c      	ldr	r3, [pc, #432]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401a52:	220b      	movs	r2, #11
  401a54:	701a      	strb	r2, [r3, #0]
		i2cbuf[0] = 0x01; //Subsamp by 2
  401a56:	496c      	ldr	r1, [pc, #432]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401a58:	2201      	movs	r2, #1
  401a5a:	700a      	strb	r2, [r1, #0]
		packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a5c:	6099      	str	r1, [r3, #8]
		packetCMOS.length = 1;
  401a5e:	60da      	str	r2, [r3, #12]
		while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401a60:	461e      	mov	r6, r3
  401a62:	4d6a      	ldr	r5, [pc, #424]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401a64:	4c6a      	ldr	r4, [pc, #424]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401a66:	4631      	mov	r1, r6
  401a68:	4628      	mov	r0, r5
  401a6a:	47a0      	blx	r4
  401a6c:	2800      	cmp	r0, #0
  401a6e:	d1fa      	bne.n	401a66 <imagingSensorConfigure+0x3a>
	//Software step = (800 x Master clock) ? 16.7 us @ 48 MHz if
	//div_clk=00
	//Real duration: The integration time is rounded at the nearest
	//number of lines above the programmed time.
	//default:0x012C (d300) -> I think this is ~5ms, I think 2000 should be 30FPS
	packetCMOS.addr[0] = 0x80;//frame_tint
  401a70:	4b64      	ldr	r3, [pc, #400]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401a72:	2280      	movs	r2, #128	; 0x80
  401a74:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = (2000>>8)&0x00FF;
		i2cbuf[1] = (2000)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = (3000>>8)&0x00FF; //Clock div shouldn't effect total value here
  401a76:	4a64      	ldr	r2, [pc, #400]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401a78:	210b      	movs	r1, #11
  401a7a:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (3000)&0x00FF;		//3000 should result in about 20FPS
  401a7c:	21b8      	movs	r1, #184	; 0xb8
  401a7e:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401a80:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401a82:	2202      	movs	r2, #2
  401a84:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401a86:	461e      	mov	r6, r3
  401a88:	4d60      	ldr	r5, [pc, #384]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401a8a:	4c61      	ldr	r4, [pc, #388]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401a8c:	4631      	mov	r1, r6
  401a8e:	4628      	mov	r0, r5
  401a90:	47a0      	blx	r4
  401a92:	2800      	cmp	r0, #0
  401a94:	d1fa      	bne.n	401a8c <imagingSensorConfigure+0x60>
	}
	// ---------- frame_twait --------
	//default 0x0000 (no wait), max 0x0FFF (68,2ms)
	packetCMOS.addr[0] = 0x81;//frame_twait
  401a96:	4b5b      	ldr	r3, [pc, #364]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401a98:	2281      	movs	r2, #129	; 0x81
  401a9a:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = (100>>8)&0x00FF; //value should only really matter if integration time is shorter than data transmission time
  401a9c:	4a5a      	ldr	r2, [pc, #360]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401a9e:	2100      	movs	r1, #0
  401aa0:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (100)&0x00FF;
  401aa2:	2164      	movs	r1, #100	; 0x64
  401aa4:	7051      	strb	r1, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401aa6:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401aa8:	2202      	movs	r2, #2
  401aaa:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401aac:	461e      	mov	r6, r3
  401aae:	4d57      	ldr	r5, [pc, #348]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401ab0:	4c57      	ldr	r4, [pc, #348]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401ab2:	4631      	mov	r1, r6
  401ab4:	4628      	mov	r0, r5
  401ab6:	47a0      	blx	r4
  401ab8:	2800      	cmp	r0, #0
  401aba:	d1fa      	bne.n	401ab2 <imagingSensorConfigure+0x86>
	////---- ---- -000 0000 frame_gain_digital
	////bit 0-6: digital gain, applied after the offset substraction digital gain = 1 + dig_gain / 32
	////Min 0000000 digital gain = 1
	////Max 1111111 digital gain = 4.97
	////default: 0x0000
	packetCMOS.addr[0] = 0x82;//frame_gain
  401abc:	2282      	movs	r2, #130	; 0x82
  401abe:	4b51      	ldr	r3, [pc, #324]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401ac0:	701a      	strb	r2, [r3, #0]
	switch (gain){
  401ac2:	4b54      	ldr	r3, [pc, #336]	; (401c14 <imagingSensorConfigure+0x1e8>)
  401ac4:	681b      	ldr	r3, [r3, #0]
  401ac6:	3b01      	subs	r3, #1
  401ac8:	2b07      	cmp	r3, #7
  401aca:	d81c      	bhi.n	401b06 <imagingSensorConfigure+0xda>
  401acc:	e8df f003 	tbb	[pc, r3]
  401ad0:	0f1b0904 	.word	0x0f1b0904
  401ad4:	151b1b1b 	.word	0x151b1b1b
		case (1):
			i2cbuf[0] = (0x0000>>8)&0x00FF;
  401ad8:	4b4b      	ldr	r3, [pc, #300]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401ada:	2200      	movs	r2, #0
  401adc:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0000)&0x00FF;
  401ade:	705a      	strb	r2, [r3, #1]
			break;
  401ae0:	e015      	b.n	401b0e <imagingSensorConfigure+0xe2>
		case (2):
			i2cbuf[0] = (0x0100>>8)&0x00FF;
  401ae2:	4b49      	ldr	r3, [pc, #292]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401ae4:	2201      	movs	r2, #1
  401ae6:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0100)&0x00FF;
  401ae8:	2200      	movs	r2, #0
  401aea:	705a      	strb	r2, [r3, #1]
			break;
  401aec:	e00f      	b.n	401b0e <imagingSensorConfigure+0xe2>
		case (4):
			i2cbuf[0] = (0x0200>>8)&0x00FF;
  401aee:	4b46      	ldr	r3, [pc, #280]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401af0:	2202      	movs	r2, #2
  401af2:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0200)&0x00FF;
  401af4:	2200      	movs	r2, #0
  401af6:	705a      	strb	r2, [r3, #1]
			break;
  401af8:	e009      	b.n	401b0e <imagingSensorConfigure+0xe2>
		case (8):
			i2cbuf[0] = (0x0300>>8)&0x00FF;
  401afa:	4b43      	ldr	r3, [pc, #268]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401afc:	2203      	movs	r2, #3
  401afe:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0300)&0x00FF;
  401b00:	2200      	movs	r2, #0
  401b02:	705a      	strb	r2, [r3, #1]
			break;
  401b04:	e003      	b.n	401b0e <imagingSensorConfigure+0xe2>
		default:
			i2cbuf[0] = (0x0000>>8)&0x00FF;
  401b06:	4b40      	ldr	r3, [pc, #256]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401b08:	2200      	movs	r2, #0
  401b0a:	701a      	strb	r2, [r3, #0]
			i2cbuf[1] = (0x0000)&0x00FF;
  401b0c:	705a      	strb	r2, [r3, #1]
			break;
	}
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b0e:	4b3d      	ldr	r3, [pc, #244]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401b10:	4a3d      	ldr	r2, [pc, #244]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401b12:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b14:	2202      	movs	r2, #2
  401b16:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b18:	461e      	mov	r6, r3
  401b1a:	4d3c      	ldr	r5, [pc, #240]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401b1c:	4c3c      	ldr	r4, [pc, #240]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401b1e:	4631      	mov	r1, r6
  401b20:	4628      	mov	r0, r5
  401b22:	47a0      	blx	r4
  401b24:	2800      	cmp	r0, #0
  401b26:	d1fa      	bne.n	401b1e <imagingSensorConfigure+0xf2>
	}
	// ----- frame_roi_0c
	//pixel of first column to read
	//default 0x0006, range (d0 to d875)
	packetCMOS.addr[0] = 0x83;//frame_roi_0c
  401b28:	4b36      	ldr	r3, [pc, #216]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401b2a:	2283      	movs	r2, #131	; 0x83
  401b2c:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = ((32+50)>>8)&0x00FF;
		i2cbuf[1] = (32+50)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = ((32+50+56)>>8)&0x00FF;
  401b2e:	4a36      	ldr	r2, [pc, #216]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401b30:	2100      	movs	r1, #0
  401b32:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (32+50+56)&0x00FF;
  401b34:	218a      	movs	r1, #138	; 0x8a
  401b36:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b38:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b3a:	2202      	movs	r2, #2
  401b3c:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b3e:	461e      	mov	r6, r3
  401b40:	4d32      	ldr	r5, [pc, #200]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401b42:	4c33      	ldr	r4, [pc, #204]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401b44:	4631      	mov	r1, r6
  401b46:	4628      	mov	r0, r5
  401b48:	47a0      	blx	r4
  401b4a:	2800      	cmp	r0, #0
  401b4c:	d1fa      	bne.n	401b44 <imagingSensorConfigure+0x118>
	}
	// ----- frame_roi_0l
	//pixel of first line to read
	//default 0x0006, range (d0 to d651)
	packetCMOS.addr[0] = 0x84;//frame_roi_0l
  401b4e:	4b2d      	ldr	r3, [pc, #180]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401b50:	2284      	movs	r2, #132	; 0x84
  401b52:	701a      	strb	r2, [r3, #0]
	#ifdef EV76C454
		i2cbuf[0] = ((6+100)>>8)&0x00FF;
		i2cbuf[1] = (6+100)&0x00FF;
	#endif
	#ifdef EV76C454_SUBSAMP
		i2cbuf[0] = ((6)>>8)&0x00FF;
  401b54:	4a2c      	ldr	r2, [pc, #176]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401b56:	2100      	movs	r1, #0
  401b58:	7011      	strb	r1, [r2, #0]
		i2cbuf[1] = (6)&0x00FF;
  401b5a:	2106      	movs	r1, #6
  401b5c:	7051      	strb	r1, [r2, #1]
	#endif
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b5e:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b60:	2202      	movs	r2, #2
  401b62:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b64:	461e      	mov	r6, r3
  401b66:	4d29      	ldr	r5, [pc, #164]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401b68:	4c29      	ldr	r4, [pc, #164]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401b6a:	4631      	mov	r1, r6
  401b6c:	4628      	mov	r0, r5
  401b6e:	47a0      	blx	r4
  401b70:	2800      	cmp	r0, #0
  401b72:	d1fa      	bne.n	401b6a <imagingSensorConfigure+0x13e>
	}
	// ----- frame_roi_w
	//pixel of first column to read
	//default 0x0360 (d864), range (d16 to d876)
	packetCMOS.addr[0] = 0x85;//frame_roi_w
  401b74:	4b23      	ldr	r3, [pc, #140]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401b76:	2285      	movs	r2, #133	; 0x85
  401b78:	701a      	strb	r2, [r3, #0]

	i2cbuf[0] = (IMAGE_HEIGHT>>8)&0x00FF;
  401b7a:	4a23      	ldr	r2, [pc, #140]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401b7c:	2102      	movs	r1, #2
  401b7e:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (IMAGE_HEIGHT)&0x00FF;
  401b80:	2080      	movs	r0, #128	; 0x80
  401b82:	7050      	strb	r0, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401b84:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401b86:	60d9      	str	r1, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401b88:	461e      	mov	r6, r3
  401b8a:	4d20      	ldr	r5, [pc, #128]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401b8c:	4c20      	ldr	r4, [pc, #128]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401b8e:	4631      	mov	r1, r6
  401b90:	4628      	mov	r0, r5
  401b92:	47a0      	blx	r4
  401b94:	2800      	cmp	r0, #0
  401b96:	d1fa      	bne.n	401b8e <imagingSensorConfigure+0x162>
	}
	// ----- frame_roi_h
	//pixel of first column to read
	//default 0x0280 (d640), range (d16 to d652)
	packetCMOS.addr[0] = 0x86;//frame_roi_h
  401b98:	4b1a      	ldr	r3, [pc, #104]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401b9a:	2286      	movs	r2, #134	; 0x86
  401b9c:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = (IMAGE_WIDTH>>8)&0x00FF;
  401b9e:	4a1a      	ldr	r2, [pc, #104]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401ba0:	2102      	movs	r1, #2
  401ba2:	7011      	strb	r1, [r2, #0]
	i2cbuf[1] = (IMAGE_WIDTH)&0x00FF;
  401ba4:	2080      	movs	r0, #128	; 0x80
  401ba6:	7050      	strb	r0, [r2, #1]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401ba8:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 2;
  401baa:	60d9      	str	r1, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401bac:	461e      	mov	r6, r3
  401bae:	4d17      	ldr	r5, [pc, #92]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401bb0:	4c17      	ldr	r4, [pc, #92]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401bb2:	4631      	mov	r1, r6
  401bb4:	4628      	mov	r0, r5
  401bb6:	47a0      	blx	r4
  401bb8:	2800      	cmp	r0, #0
  401bba:	d1fa      	bne.n	401bb2 <imagingSensorConfigure+0x186>
	//bit 0,1: 
	//00->No test pattern: video is output (default)
	//01->Moving test pattern
	//10->Fixed test pattern
	//11->Functional test pattern
	packetCMOS.addr[0] = 0x13; //Synchro
  401bbc:	4b11      	ldr	r3, [pc, #68]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401bbe:	2213      	movs	r2, #19
  401bc0:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = 0b00000000; 
  401bc2:	4a11      	ldr	r2, [pc, #68]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401bc4:	2100      	movs	r1, #0
  401bc6:	7011      	strb	r1, [r2, #0]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401bc8:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401bca:	2201      	movs	r2, #1
  401bcc:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS) != TWIHS_SUCCESS) {
  401bce:	461e      	mov	r6, r3
  401bd0:	4d0e      	ldr	r5, [pc, #56]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401bd2:	4c0f      	ldr	r4, [pc, #60]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401bd4:	4631      	mov	r1, r6
  401bd6:	4628      	mov	r0, r5
  401bd8:	47a0      	blx	r4
  401bda:	2800      	cmp	r0, #0
  401bdc:	d1fa      	bne.n	401bd4 <imagingSensorConfigure+0x1a8>
	//bit 6: 1->Forces all output pads to high impedance
	//bit 4: 3x3 filter bypass, 1->turns off F0-7
	//bit 1: trig, set to 0 to only use trig_pin. set to 1 to soft start acq
	//bit 0: stdby_rqst: set to 0 to take off standby mode.
	//default:0x67, 0b01100111
	packetCMOS.addr[0] = 0x0F;//miscel_ctrl
  401bde:	4b09      	ldr	r3, [pc, #36]	; (401c04 <imagingSensorConfigure+0x1d8>)
  401be0:	220f      	movs	r2, #15
  401be2:	701a      	strb	r2, [r3, #0]
	i2cbuf[0] = 0b00110100;
  401be4:	4a08      	ldr	r2, [pc, #32]	; (401c08 <imagingSensorConfigure+0x1dc>)
  401be6:	2134      	movs	r1, #52	; 0x34
  401be8:	7011      	strb	r1, [r2, #0]
	packetCMOS.buffer = (uint8_t *) i2cbuf;
  401bea:	609a      	str	r2, [r3, #8]
	packetCMOS.length = 1;
  401bec:	2201      	movs	r2, #1
  401bee:	60da      	str	r2, [r3, #12]
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
  401bf0:	461e      	mov	r6, r3
  401bf2:	4d06      	ldr	r5, [pc, #24]	; (401c0c <imagingSensorConfigure+0x1e0>)
  401bf4:	4c06      	ldr	r4, [pc, #24]	; (401c10 <imagingSensorConfigure+0x1e4>)
  401bf6:	4631      	mov	r1, r6
  401bf8:	4628      	mov	r0, r5
  401bfa:	47a0      	blx	r4
  401bfc:	2800      	cmp	r0, #0
  401bfe:	d1fa      	bne.n	401bf6 <imagingSensorConfigure+0x1ca>
	}
}
  401c00:	bd70      	pop	{r4, r5, r6, pc}
  401c02:	bf00      	nop
  401c04:	2044b4f0 	.word	0x2044b4f0
  401c08:	2044b70c 	.word	0x2044b70c
  401c0c:	4001c000 	.word	0x4001c000
  401c10:	004015c5 	.word	0x004015c5
  401c14:	20400008 	.word	0x20400008

00401c18 <imagingSensorParamInit>:
}

void imagingSensorParamInit() {
	
	
	PIOA->PIO_PCMR |= PIO_PCMR_DSIZE(D_SIZE);
  401c18:	4a03      	ldr	r2, [pc, #12]	; (401c28 <imagingSensorParamInit+0x10>)
  401c1a:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401c1e:	f043 0320 	orr.w	r3, r3, #32
  401c22:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401c26:	4770      	bx	lr
  401c28:	400e0e00 	.word	0x400e0e00

00401c2c <imagingSensorDMAInit>:
	PIOA->PIO_PCMR |= PIO_PCMR_HALFS;
	if (FRSTS == 1)
	PIOA->PIO_PCMR |= PIO_PCMR_FRSTS;
}

void imagingSensorDMAInit() {
  401c2c:	b508      	push	{r3, lr}
	//Single Block With Single Microblock Transfer
	uint32_t channelStatus = 0;
	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  401c2e:	203a      	movs	r0, #58	; 0x3a
  401c30:	4b05      	ldr	r3, [pc, #20]	; (401c48 <imagingSensorDMAInit+0x1c>)
  401c32:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401c34:	4b05      	ldr	r3, [pc, #20]	; (401c4c <imagingSensorDMAInit+0x20>)
  401c36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c3e:	2120      	movs	r1, #32
  401c40:	f883 133a 	strb.w	r1, [r3, #826]	; 0x33a
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c44:	605a      	str	r2, [r3, #4]
  401c46:	bd08      	pop	{r3, pc}
  401c48:	004014f5 	.word	0x004014f5
  401c4c:	e000e100 	.word	0xe000e100

00401c50 <imagingSensorStartDMA>:

void imagingSensorStartDMA() {
	
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  401c50:	4b23      	ldr	r3, [pc, #140]	; (401ce0 <imagingSensorStartDMA+0x90>)
  401c52:	2202      	movs	r2, #2
  401c54:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  401c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  401c58:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  401c5c:	4a21      	ldr	r2, [pc, #132]	; (401ce4 <imagingSensorStartDMA+0x94>)
  401c5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	#ifdef EV76C454
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer;
	#endif

	#ifdef EV76C454_SUBSAMP
	switch(frameNumber%3){
  401c62:	4b21      	ldr	r3, [pc, #132]	; (401ce8 <imagingSensorStartDMA+0x98>)
  401c64:	681a      	ldr	r2, [r3, #0]
  401c66:	4b21      	ldr	r3, [pc, #132]	; (401cec <imagingSensorStartDMA+0x9c>)
  401c68:	fba3 1302 	umull	r1, r3, r3, r2
  401c6c:	085b      	lsrs	r3, r3, #1
  401c6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401c72:	1ad3      	subs	r3, r2, r3
  401c74:	2b01      	cmp	r3, #1
  401c76:	d008      	beq.n	401c8a <imagingSensorStartDMA+0x3a>
  401c78:	b113      	cbz	r3, 401c80 <imagingSensorStartDMA+0x30>
  401c7a:	2b02      	cmp	r3, #2
  401c7c:	d00a      	beq.n	401c94 <imagingSensorStartDMA+0x44>
  401c7e:	e00d      	b.n	401c9c <imagingSensorStartDMA+0x4c>
		case (0):
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer0;
  401c80:	4b17      	ldr	r3, [pc, #92]	; (401ce0 <imagingSensorStartDMA+0x90>)
  401c82:	4a1b      	ldr	r2, [pc, #108]	; (401cf0 <imagingSensorStartDMA+0xa0>)
  401c84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
  401c88:	e008      	b.n	401c9c <imagingSensorStartDMA+0x4c>
		case (1):
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer1;
  401c8a:	4b15      	ldr	r3, [pc, #84]	; (401ce0 <imagingSensorStartDMA+0x90>)
  401c8c:	4a19      	ldr	r2, [pc, #100]	; (401cf4 <imagingSensorStartDMA+0xa4>)
  401c8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
  401c92:	e003      	b.n	401c9c <imagingSensorStartDMA+0x4c>
		case(2):
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
  401c94:	4b12      	ldr	r3, [pc, #72]	; (401ce0 <imagingSensorStartDMA+0x90>)
  401c96:	4a18      	ldr	r2, [pc, #96]	; (401cf8 <imagingSensorStartDMA+0xa8>)
  401c98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			break;
	}
	#endif
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  401c9c:	4b10      	ldr	r3, [pc, #64]	; (401ce0 <imagingSensorStartDMA+0x90>)
  401c9e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  401ca2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  401ca6:	4a15      	ldr	r2, [pc, #84]	; (401cfc <imagingSensorStartDMA+0xac>)
  401ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  401cac:	2200      	movs	r2, #0
  401cae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  401cb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  401cb6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  401cba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  401cbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  401cc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  401cc6:	f042 0201 	orr.w	r2, r2, #1
  401cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  401cce:	68da      	ldr	r2, [r3, #12]
  401cd0:	f042 0202 	orr.w	r2, r2, #2
  401cd4:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  401cd6:	69da      	ldr	r2, [r3, #28]
  401cd8:	f042 0202 	orr.w	r2, r2, #2
  401cdc:	61da      	str	r2, [r3, #28]
  401cde:	4770      	bx	lr
  401ce0:	40078000 	.word	0x40078000
  401ce4:	400e0f64 	.word	0x400e0f64
  401ce8:	20400494 	.word	0x20400494
  401cec:	aaaaaaab 	.word	0xaaaaaaab
  401cf0:	204004a8 	.word	0x204004a8
  401cf4:	204194a8 	.word	0x204194a8
  401cf8:	204324a8 	.word	0x204324a8
  401cfc:	22043001 	.word	0x22043001

00401d00 <imagingSensorItInit>:
void imagingSensorItInit() {
	//PIOA->PIO_PCIER = PIO_PCISR_DRDY; //Enable Data Ready Interrupt
	//PIOA->PIO_PCIDR |= (PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled

	//PIOA->PIO_PCIER = (PIO_PCIDR_OVRE); //Enable Data Ready Interrupt
	PIOA->PIO_PCIDR |= (PIO_PCIDR_DRDY)|(PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled
  401d00:	4a03      	ldr	r2, [pc, #12]	; (401d10 <imagingSensorItInit+0x10>)
  401d02:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
  401d06:	f043 030f 	orr.w	r3, r3, #15
  401d0a:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
  401d0e:	4770      	bx	lr
  401d10:	400e0e00 	.word	0x400e0e00

00401d14 <imageSensorVSyncItInit>:
}

void imageSensorVSyncItInit() {
	PIOA->PIO_PER		|= VSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  401d14:	4b12      	ldr	r3, [pc, #72]	; (401d60 <imageSensorVSyncItInit+0x4c>)
  401d16:	681a      	ldr	r2, [r3, #0]
  401d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d1c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= VSYNC_MASK; //Disables output on this pin.
  401d1e:	695a      	ldr	r2, [r3, #20]
  401d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d24:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= VSYNC_MASK; //Enables pulldown resistor
  401d26:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  401d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= VSYNC_MASK; //Enables the input change interrupt
  401d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  401d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d38:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= VSYNC_MASK; //Enables additional Interrupt modes
  401d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  401d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= VSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  401d46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  401d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= VSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  401d52:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  401d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d5a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401d5e:	4770      	bx	lr
  401d60:	400e0e00 	.word	0x400e0e00

00401d64 <imageSensorHSyncItInit>:
	//		printf("VSync is set as input");
	
}

void imageSensorHSyncItInit() {
	PIOA->PIO_PER		|= HSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  401d64:	4b12      	ldr	r3, [pc, #72]	; (401db0 <imageSensorHSyncItInit+0x4c>)
  401d66:	681a      	ldr	r2, [r3, #0]
  401d68:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d6c:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= HSYNC_MASK; //Disables output on this pin.
  401d6e:	695a      	ldr	r2, [r3, #20]
  401d70:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d74:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= HSYNC_MASK; //Enables pulldown resistor
  401d76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  401d7a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= HSYNC_MASK; //Enables the input change interrupt
  401d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  401d84:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d88:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= HSYNC_MASK; //Enables additional Interrupt modes
  401d8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  401d8e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= HSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  401d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  401d9a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401d9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= HSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  401da2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  401da6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  401daa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401dae:	4770      	bx	lr
  401db0:	400e0e00 	.word	0x400e0e00

00401db4 <imagingSensorLoadHeader>:
	
	
}
void imagingSensorLoadHeader(){
  401db4:	b500      	push	{lr}
  401db6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t headerTemp[SDMMC_BLOCK_SIZE] = {0};
  401dba:	f44f 7200 	mov.w	r2, #512	; 0x200
  401dbe:	2100      	movs	r1, #0
  401dc0:	4668      	mov	r0, sp
  401dc2:	4b0e      	ldr	r3, [pc, #56]	; (401dfc <imagingSensorLoadHeader+0x48>)
  401dc4:	4798      	blx	r3
	uint32_t *header = (uint32_t *)headerTemp;

	uint32_t writeKey[4] = {0};
	sd_mmc_init_read_blocks(SD_SLOT_NB,HEADER_SECTOR,1);
  401dc6:	2201      	movs	r2, #1
  401dc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
  401dcc:	2000      	movs	r0, #0
  401dce:	4b0c      	ldr	r3, [pc, #48]	; (401e00 <imagingSensorLoadHeader+0x4c>)
  401dd0:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerTemp,1);
  401dd2:	2101      	movs	r1, #1
  401dd4:	4668      	mov	r0, sp
  401dd6:	4b0b      	ldr	r3, [pc, #44]	; (401e04 <imagingSensorLoadHeader+0x50>)
  401dd8:	4798      	blx	r3
	sd_mmc_wait_end_of_read_blocks(false);
  401dda:	2000      	movs	r0, #0
  401ddc:	4b0a      	ldr	r3, [pc, #40]	; (401e08 <imagingSensorLoadHeader+0x54>)
  401dde:	4798      	blx	r3

	gain				= header[HEADER_GAIN_POS];
  401de0:	9a04      	ldr	r2, [sp, #16]
  401de2:	4b0a      	ldr	r3, [pc, #40]	; (401e0c <imagingSensorLoadHeader+0x58>)
  401de4:	601a      	str	r2, [r3, #0]
	//ledValue			= ((100- header[HEADER_LED_POS])*0x0FFF)/100; //header should be between 0 and 100; Used for DAC
	ledValue			= header[HEADER_LED_POS]; //header should be between 0 and 255;
  401de6:	9a05      	ldr	r2, [sp, #20]
  401de8:	4b09      	ldr	r3, [pc, #36]	; (401e10 <imagingSensorLoadHeader+0x5c>)
  401dea:	601a      	str	r2, [r3, #0]
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];
  401dec:	9a06      	ldr	r2, [sp, #24]
  401dee:	4b09      	ldr	r3, [pc, #36]	; (401e14 <imagingSensorLoadHeader+0x60>)
  401df0:	601a      	str	r2, [r3, #0]


}
  401df2:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
  401df6:	f85d fb04 	ldr.w	pc, [sp], #4
  401dfa:	bf00      	nop
  401dfc:	004024ad 	.word	0x004024ad
  401e00:	0040094d 	.word	0x0040094d
  401e04:	00400a1d 	.word	0x00400a1d
  401e08:	00400a45 	.word	0x00400a45
  401e0c:	20400008 	.word	0x20400008
  401e10:	2044b4a8 	.word	0x2044b4a8
  401e14:	204004a4 	.word	0x204004a4

00401e18 <imagingSensorCaptureEnable>:
void imagingSensorCaptureEnable() {
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN ;
  401e18:	4a03      	ldr	r2, [pc, #12]	; (401e28 <imagingSensorCaptureEnable+0x10>)
  401e1a:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401e1e:	f043 0301 	orr.w	r3, r3, #1
  401e22:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401e26:	4770      	bx	lr
  401e28:	400e0e00 	.word	0x400e0e00

00401e2c <imagingSensorCaptureDisable>:
	
}

void imagingSensorCaptureDisable() {
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
  401e2c:	4a03      	ldr	r2, [pc, #12]	; (401e3c <imagingSensorCaptureDisable+0x10>)
  401e2e:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  401e32:	f023 0301 	bic.w	r3, r3, #1
  401e36:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  401e3a:	4770      	bx	lr
  401e3c:	400e0e00 	.word	0x400e0e00

00401e40 <imagingSensorSetup>:
	packetCMOS.length = 1;
	while (twihs_master_write(TWIHS1,&packetCMOS)  != TWIHS_SUCCESS) {
	}
}

void imagingSensorSetup() {
  401e40:	b508      	push	{r3, lr}
	
	imagingSensorCaptureDisable();//makes sure PIo Capture is disabled
  401e42:	4b0f      	ldr	r3, [pc, #60]	; (401e80 <imagingSensorSetup+0x40>)
  401e44:	4798      	blx	r3
	
	pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
  401e46:	200a      	movs	r0, #10
  401e48:	4b0e      	ldr	r3, [pc, #56]	; (401e84 <imagingSensorSetup+0x44>)
  401e4a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401e4c:	4b0e      	ldr	r3, [pc, #56]	; (401e88 <imagingSensorSetup+0x48>)
  401e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401e52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401e56:	2140      	movs	r1, #64	; 0x40
  401e58:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401e5c:	601a      	str	r2, [r3, #0]
	//NVIC_DisableIRQ( PIOA_IRQn );
	NVIC_ClearPendingIRQ(PIOA_IRQn);
	NVIC_SetPriority(PIOA_IRQn, 2);
	NVIC_EnableIRQ( PIOA_IRQn );

	imagingSensorItInit(); //Sets up interrupts //Might need to change interrupts for DMA transfer
  401e5e:	4b0b      	ldr	r3, [pc, #44]	; (401e8c <imagingSensorSetup+0x4c>)
  401e60:	4798      	blx	r3
	imagingSensorDMAInit();
  401e62:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <imagingSensorSetup+0x50>)
  401e64:	4798      	blx	r3
	imagingSensorParamInit(); //Configures PIO Capture settings
  401e66:	4b0b      	ldr	r3, [pc, #44]	; (401e94 <imagingSensorSetup+0x54>)
  401e68:	4798      	blx	r3
	imageSensorVSyncItInit();//Sets up VSync interrupt to detect end of frame
  401e6a:	4b0b      	ldr	r3, [pc, #44]	; (401e98 <imagingSensorSetup+0x58>)
  401e6c:	4798      	blx	r3
	imageSensorHSyncItInit();
  401e6e:	4b0b      	ldr	r3, [pc, #44]	; (401e9c <imagingSensorSetup+0x5c>)
  401e70:	4798      	blx	r3
	
	
	packetCMOS.chip = IMAGING_SENSOR_ADR;
  401e72:	4b0b      	ldr	r3, [pc, #44]	; (401ea0 <imagingSensorSetup+0x60>)
  401e74:	2218      	movs	r2, #24
  401e76:	741a      	strb	r2, [r3, #16]
	packetCMOS.addr_length = 1;
  401e78:	2201      	movs	r2, #1
  401e7a:	605a      	str	r2, [r3, #4]
  401e7c:	bd08      	pop	{r3, pc}
  401e7e:	bf00      	nop
  401e80:	00401e2d 	.word	0x00401e2d
  401e84:	004014f5 	.word	0x004014f5
  401e88:	e000e100 	.word	0xe000e100
  401e8c:	00401d01 	.word	0x00401d01
  401e90:	00401c2d 	.word	0x00401c2d
  401e94:	00401c19 	.word	0x00401c19
  401e98:	00401d15 	.word	0x00401d15
  401e9c:	00401d65 	.word	0x00401d65
  401ea0:	2044b4f0 	.word	0x2044b4f0

00401ea4 <checkVSync>:

void imagingSensorCaptureDisable() {
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
}

void checkVSync() {
  401ea4:	b508      	push	{r3, lr}
	if (pcISR & VSYNC_MASK) { //VSync signal is detected. End of frame capture
  401ea6:	4b3a      	ldr	r3, [pc, #232]	; (401f90 <checkVSync+0xec>)
  401ea8:	681b      	ldr	r3, [r3, #0]
  401eaa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401eae:	d06e      	beq.n	401f8e <checkVSync+0xea>
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) {
  401eb0:	4b38      	ldr	r3, [pc, #224]	; (401f94 <checkVSync+0xf0>)
  401eb2:	781b      	ldrb	r3, [r3, #0]
  401eb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  401eb8:	d058      	beq.n	401f6c <checkVSync+0xc8>
  401eba:	4b37      	ldr	r3, [pc, #220]	; (401f98 <checkVSync+0xf4>)
  401ebc:	781b      	ldrb	r3, [r3, #0]
  401ebe:	f013 0fff 	tst.w	r3, #255	; 0xff
  401ec2:	d053      	beq.n	401f6c <checkVSync+0xc8>
			
			// -------------- For initial testing ------------
			captureEnabled = 0;
  401ec4:	2300      	movs	r3, #0
  401ec6:	4a33      	ldr	r2, [pc, #204]	; (401f94 <checkVSync+0xf0>)
  401ec8:	7013      	strb	r3, [r2, #0]
			startRecording = 0;
  401eca:	4a33      	ldr	r2, [pc, #204]	; (401f98 <checkVSync+0xf4>)
  401ecc:	7013      	strb	r3, [r2, #0]
			imagingSensorCaptureDisable();
  401ece:	4b33      	ldr	r3, [pc, #204]	; (401f9c <checkVSync+0xf8>)
  401ed0:	4798      	blx	r3
				imageBuffer[buffSize-3] = lineCount;
				imageBuffer[buffSize-4] = xferDMAComplete; //Overflow flag
			#endif

			#ifdef EV76C454_SUBSAMP
				switch (frameNumber%3)
  401ed2:	4b33      	ldr	r3, [pc, #204]	; (401fa0 <checkVSync+0xfc>)
  401ed4:	681a      	ldr	r2, [r3, #0]
  401ed6:	4b33      	ldr	r3, [pc, #204]	; (401fa4 <checkVSync+0x100>)
  401ed8:	fba3 1302 	umull	r1, r3, r3, r2
  401edc:	085b      	lsrs	r3, r3, #1
  401ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401ee2:	1ad3      	subs	r3, r2, r3
  401ee4:	2b01      	cmp	r3, #1
  401ee6:	d011      	beq.n	401f0c <checkVSync+0x68>
  401ee8:	b113      	cbz	r3, 401ef0 <checkVSync+0x4c>
  401eea:	2b02      	cmp	r3, #2
  401eec:	d01c      	beq.n	401f28 <checkVSync+0x84>
  401eee:	e028      	b.n	401f42 <checkVSync+0x9e>
				{
				case (0):
					imageBuffer0[buffSize-1] = frameNumber;
  401ef0:	4b2b      	ldr	r3, [pc, #172]	; (401fa0 <checkVSync+0xfc>)
  401ef2:	6819      	ldr	r1, [r3, #0]
  401ef4:	4b2c      	ldr	r3, [pc, #176]	; (401fa8 <checkVSync+0x104>)
  401ef6:	4a2d      	ldr	r2, [pc, #180]	; (401fac <checkVSync+0x108>)
  401ef8:	5099      	str	r1, [r3, r2]
					imageBuffer0[buffSize-3] = lineCount;
  401efa:	4a2d      	ldr	r2, [pc, #180]	; (401fb0 <checkVSync+0x10c>)
  401efc:	6811      	ldr	r1, [r2, #0]
  401efe:	4a2d      	ldr	r2, [pc, #180]	; (401fb4 <checkVSync+0x110>)
  401f00:	5099      	str	r1, [r3, r2]
					imageBuffer0[buffSize-4] = xferDMAComplete; //Overflow flag
  401f02:	4a2d      	ldr	r2, [pc, #180]	; (401fb8 <checkVSync+0x114>)
  401f04:	6811      	ldr	r1, [r2, #0]
  401f06:	4a2d      	ldr	r2, [pc, #180]	; (401fbc <checkVSync+0x118>)
  401f08:	5099      	str	r1, [r3, r2]
					break;
  401f0a:	e01a      	b.n	401f42 <checkVSync+0x9e>
				case (1):
					imageBuffer1[buffSize-1] = frameNumber;
  401f0c:	4b24      	ldr	r3, [pc, #144]	; (401fa0 <checkVSync+0xfc>)
  401f0e:	6819      	ldr	r1, [r3, #0]
  401f10:	4b2b      	ldr	r3, [pc, #172]	; (401fc0 <checkVSync+0x11c>)
  401f12:	4a26      	ldr	r2, [pc, #152]	; (401fac <checkVSync+0x108>)
  401f14:	5099      	str	r1, [r3, r2]
					imageBuffer1[buffSize-3] = lineCount;
  401f16:	4a26      	ldr	r2, [pc, #152]	; (401fb0 <checkVSync+0x10c>)
  401f18:	6811      	ldr	r1, [r2, #0]
  401f1a:	4a26      	ldr	r2, [pc, #152]	; (401fb4 <checkVSync+0x110>)
  401f1c:	5099      	str	r1, [r3, r2]
					imageBuffer1[buffSize-4] = xferDMAComplete; //Overflow flag
  401f1e:	4a26      	ldr	r2, [pc, #152]	; (401fb8 <checkVSync+0x114>)
  401f20:	6811      	ldr	r1, [r2, #0]
  401f22:	4a26      	ldr	r2, [pc, #152]	; (401fbc <checkVSync+0x118>)
  401f24:	5099      	str	r1, [r3, r2]
					break;
  401f26:	e00c      	b.n	401f42 <checkVSync+0x9e>
				case (2):
					imageBuffer2[buffSize-1] = frameNumber;
  401f28:	4b1d      	ldr	r3, [pc, #116]	; (401fa0 <checkVSync+0xfc>)
  401f2a:	6819      	ldr	r1, [r3, #0]
  401f2c:	4b25      	ldr	r3, [pc, #148]	; (401fc4 <checkVSync+0x120>)
  401f2e:	4a1f      	ldr	r2, [pc, #124]	; (401fac <checkVSync+0x108>)
  401f30:	5099      	str	r1, [r3, r2]
					imageBuffer2[buffSize-3] = lineCount;
  401f32:	4a1f      	ldr	r2, [pc, #124]	; (401fb0 <checkVSync+0x10c>)
  401f34:	6811      	ldr	r1, [r2, #0]
  401f36:	4a1f      	ldr	r2, [pc, #124]	; (401fb4 <checkVSync+0x110>)
  401f38:	5099      	str	r1, [r3, r2]
					imageBuffer2[buffSize-4] = xferDMAComplete; //Overflow flag
  401f3a:	4a1f      	ldr	r2, [pc, #124]	; (401fb8 <checkVSync+0x114>)
  401f3c:	6811      	ldr	r1, [r2, #0]
  401f3e:	4a1f      	ldr	r2, [pc, #124]	; (401fbc <checkVSync+0x118>)
  401f40:	5099      	str	r1, [r3, r2]
					break;
				}
			#endif

			lineCount = 0;
  401f42:	2300      	movs	r3, #0
  401f44:	4a1a      	ldr	r2, [pc, #104]	; (401fb0 <checkVSync+0x10c>)
  401f46:	6013      	str	r3, [r2, #0]
			frameNumber++;
  401f48:	4915      	ldr	r1, [pc, #84]	; (401fa0 <checkVSync+0xfc>)
  401f4a:	680a      	ldr	r2, [r1, #0]
  401f4c:	3201      	adds	r2, #1
  401f4e:	600a      	str	r2, [r1, #0]
			overflowCount = 0;
  401f50:	4a1d      	ldr	r2, [pc, #116]	; (401fc8 <checkVSync+0x124>)
  401f52:	6013      	str	r3, [r2, #0]
			xferDMAComplete = 0;
  401f54:	4a18      	ldr	r2, [pc, #96]	; (401fb8 <checkVSync+0x114>)
  401f56:	6013      	str	r3, [r2, #0]
			
			#ifdef EV76C454_SUBSAMP //immediately start recording of next frame
				startRecording = 1;
  401f58:	2301      	movs	r3, #1
  401f5a:	4a0f      	ldr	r2, [pc, #60]	; (401f98 <checkVSync+0xf4>)
  401f5c:	7013      	strb	r3, [r2, #0]
				captureEnabled = 1;
  401f5e:	4a0d      	ldr	r2, [pc, #52]	; (401f94 <checkVSync+0xf0>)
  401f60:	7013      	strb	r3, [r2, #0]
				imagingSensorStartDMA();
  401f62:	4b1a      	ldr	r3, [pc, #104]	; (401fcc <checkVSync+0x128>)
  401f64:	4798      	blx	r3
				imagingSensorCaptureEnable();
  401f66:	4b1a      	ldr	r3, [pc, #104]	; (401fd0 <checkVSync+0x12c>)
  401f68:	4798      	blx	r3
  401f6a:	bd08      	pop	{r3, pc}

			#endif
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) { //waits for the first VSync to start capture. This makes sure we capture a full first frame
  401f6c:	4b0a      	ldr	r3, [pc, #40]	; (401f98 <checkVSync+0xf4>)
  401f6e:	781b      	ldrb	r3, [r3, #0]
  401f70:	f013 0fff 	tst.w	r3, #255	; 0xff
  401f74:	d00b      	beq.n	401f8e <checkVSync+0xea>
			captureEnabled = 1;
  401f76:	2201      	movs	r2, #1
  401f78:	4b06      	ldr	r3, [pc, #24]	; (401f94 <checkVSync+0xf0>)
  401f7a:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  401f7c:	2300      	movs	r3, #0
  401f7e:	4a0c      	ldr	r2, [pc, #48]	; (401fb0 <checkVSync+0x10c>)
  401f80:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  401f82:	4a11      	ldr	r2, [pc, #68]	; (401fc8 <checkVSync+0x124>)
  401f84:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  401f86:	4b11      	ldr	r3, [pc, #68]	; (401fcc <checkVSync+0x128>)
  401f88:	4798      	blx	r3
			imagingSensorCaptureEnable();
  401f8a:	4b11      	ldr	r3, [pc, #68]	; (401fd0 <checkVSync+0x12c>)
  401f8c:	4798      	blx	r3
  401f8e:	bd08      	pop	{r3, pc}
  401f90:	2044b4b0 	.word	0x2044b4b0
  401f94:	20400490 	.word	0x20400490
  401f98:	2044b4ac 	.word	0x2044b4ac
  401f9c:	00401e2d 	.word	0x00401e2d
  401fa0:	20400494 	.word	0x20400494
  401fa4:	aaaaaaab 	.word	0xaaaaaaab
  401fa8:	204004a8 	.word	0x204004a8
  401fac:	00018ffc 	.word	0x00018ffc
  401fb0:	20400498 	.word	0x20400498
  401fb4:	00018ff4 	.word	0x00018ff4
  401fb8:	204004a0 	.word	0x204004a0
  401fbc:	00018ff0 	.word	0x00018ff0
  401fc0:	204194a8 	.word	0x204194a8
  401fc4:	204324a8 	.word	0x204324a8
  401fc8:	2040049c 	.word	0x2040049c
  401fcc:	00401c51 	.word	0x00401c51
  401fd0:	00401e19 	.word	0x00401e19

00401fd4 <PIOA_Handler>:
		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
void PIOA_Handler(void) {
  401fd4:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  401fd6:	4b0a      	ldr	r3, [pc, #40]	; (402000 <PIOA_Handler+0x2c>)
  401fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  401fda:	4b0a      	ldr	r3, [pc, #40]	; (402004 <PIOA_Handler+0x30>)
  401fdc:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK) {
  401fde:	681b      	ldr	r3, [r3, #0]
  401fe0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  401fe4:	d008      	beq.n	401ff8 <PIOA_Handler+0x24>
		if (captureEnabled == 1)
  401fe6:	4b08      	ldr	r3, [pc, #32]	; (402008 <PIOA_Handler+0x34>)
  401fe8:	781b      	ldrb	r3, [r3, #0]
  401fea:	b2db      	uxtb	r3, r3
  401fec:	2b01      	cmp	r3, #1
  401fee:	d103      	bne.n	401ff8 <PIOA_Handler+0x24>
			lineCount++;
  401ff0:	4a06      	ldr	r2, [pc, #24]	; (40200c <PIOA_Handler+0x38>)
  401ff2:	6813      	ldr	r3, [r2, #0]
  401ff4:	3301      	adds	r3, #1
  401ff6:	6013      	str	r3, [r2, #0]
	}
	checkVSync();
  401ff8:	4b05      	ldr	r3, [pc, #20]	; (402010 <PIOA_Handler+0x3c>)
  401ffa:	4798      	blx	r3
  401ffc:	bd08      	pop	{r3, pc}
  401ffe:	bf00      	nop
  402000:	400e0e00 	.word	0x400e0e00
  402004:	2044b4b0 	.word	0x2044b4b0
  402008:	20400490 	.word	0x20400490
  40200c:	20400498 	.word	0x20400498
  402010:	00401ea5 	.word	0x00401ea5

00402014 <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  402014:	4b04      	ldr	r3, [pc, #16]	; (402028 <XDMAC_Handler+0x14>)
  402016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) {
  40201a:	f013 0f01 	tst.w	r3, #1
  40201e:	d002      	beq.n	402026 <XDMAC_Handler+0x12>
		xferDMAComplete = 1;
  402020:	2201      	movs	r2, #1
  402022:	4b02      	ldr	r3, [pc, #8]	; (40202c <XDMAC_Handler+0x18>)
  402024:	601a      	str	r2, [r3, #0]
  402026:	4770      	bx	lr
  402028:	40078000 	.word	0x40078000
  40202c:	204004a0 	.word	0x204004a0

00402030 <PWM_Init>:
volatile uint32_t test[128];

//Holds PWM channel information
pwm_channel_t g_pwm_channel_led;

void PWM_Init() {
  402030:	b570      	push	{r4, r5, r6, lr}
  402032:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM0);
  402034:	201f      	movs	r0, #31
  402036:	4b20      	ldr	r3, [pc, #128]	; (4020b8 <PWM_Init+0x88>)
  402038:	4798      	blx	r3

	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO12);
  40203a:	4b20      	ldr	r3, [pc, #128]	; (4020bc <PWM_Init+0x8c>)
  40203c:	4798      	blx	r3
  40203e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  402042:	4b1f      	ldr	r3, [pc, #124]	; (4020c0 <PWM_Init+0x90>)
  402044:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402046:	4b1f      	ldr	r3, [pc, #124]	; (4020c4 <PWM_Init+0x94>)
  402048:	2401      	movs	r4, #1
  40204a:	661c      	str	r4, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40204c:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402050:	655c      	str	r4, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402052:	625c      	str	r4, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402054:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40205a:	f022 0201 	bic.w	r2, r2, #1
  40205e:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402060:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402062:	f022 0201 	bic.w	r2, r2, #1
  402066:	675a      	str	r2, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402068:	605c      	str	r4, [r3, #4]
	ioport_set_pin_mode(PWM_LED_PIN,PWM_LED_MODE); //Sets GPIO PIN to PWM Peripheral
	ioport_disable_pin(PWM_LED_PIN);

	pwm_channel_disable(PWM0, PWM_LED_CHANNEL);
  40206a:	4e17      	ldr	r6, [pc, #92]	; (4020c8 <PWM_Init+0x98>)
  40206c:	2100      	movs	r1, #0
  40206e:	4630      	mov	r0, r6
  402070:	4b16      	ldr	r3, [pc, #88]	; (4020cc <PWM_Init+0x9c>)
  402072:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
  402074:	4b16      	ldr	r3, [pc, #88]	; (4020d0 <PWM_Init+0xa0>)
  402076:	9301      	str	r3, [sp, #4]
  402078:	2500      	movs	r5, #0
  40207a:	9502      	str	r5, [sp, #8]
  40207c:	4b15      	ldr	r3, [pc, #84]	; (4020d4 <PWM_Init+0xa4>)
  40207e:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()/2 //Might need or not need to divide by 2 to get the correct clock
	};

	pwm_init(PWM0, &clock_setting);
  402080:	a901      	add	r1, sp, #4
  402082:	4630      	mov	r0, r6
  402084:	4b14      	ldr	r3, [pc, #80]	; (4020d8 <PWM_Init+0xa8>)
  402086:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  402088:	4914      	ldr	r1, [pc, #80]	; (4020dc <PWM_Init+0xac>)
  40208a:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  40208c:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  40208e:	230b      	movs	r3, #11
  402090:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PWM_PERIOD_VALUE;
  402092:	23ff      	movs	r3, #255	; 0xff
  402094:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  402096:	2305      	movs	r3, #5
  402098:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_led.channel = PWM_LED_CHANNEL;
  40209a:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  40209c:	4630      	mov	r0, r6
  40209e:	4b10      	ldr	r3, [pc, #64]	; (4020e0 <PWM_Init+0xb0>)
  4020a0:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PWM_LED_CHANNEL, 0);
  4020a2:	462a      	mov	r2, r5
  4020a4:	4629      	mov	r1, r5
  4020a6:	4630      	mov	r0, r6
  4020a8:	4b0e      	ldr	r3, [pc, #56]	; (4020e4 <PWM_Init+0xb4>)
  4020aa:	4798      	blx	r3
	//Enable PWM output
	pwm_channel_enable(PWM0,PWM_LED_CHANNEL);
  4020ac:	4629      	mov	r1, r5
  4020ae:	4630      	mov	r0, r6
  4020b0:	4b0d      	ldr	r3, [pc, #52]	; (4020e8 <PWM_Init+0xb8>)
  4020b2:	4798      	blx	r3
	
}
  4020b4:	b004      	add	sp, #16
  4020b6:	bd70      	pop	{r4, r5, r6, pc}
  4020b8:	004014f5 	.word	0x004014f5
  4020bc:	004010a5 	.word	0x004010a5
  4020c0:	00401081 	.word	0x00401081
  4020c4:	400e0e00 	.word	0x400e0e00
  4020c8:	40020000 	.word	0x40020000
  4020cc:	004012e1 	.word	0x004012e1
  4020d0:	0003e418 	.word	0x0003e418
  4020d4:	044aa200 	.word	0x044aa200
  4020d8:	00401109 	.word	0x00401109
  4020dc:	2044b4b4 	.word	0x2044b4b4
  4020e0:	00401155 	.word	0x00401155
  4020e4:	004012ed 	.word	0x004012ed
  4020e8:	004012d5 	.word	0x004012d5

004020ec <TWIHS_init>:
		//wait for DACC to be ready to receive new data
	}
	DACC->DACC_CDR[channel] = value&0x0FFF;
}

void TWIHS_init() { //Make sure you have correct TWIHS 
  4020ec:	b500      	push	{lr}
  4020ee:	b085      	sub	sp, #20
	twihs_options_t twihsOpt;
	twihsOpt.master_clk = sysclk_get_cpu_hz()/2; //make sure this is the correct clock to be checking
  4020f0:	4b1b      	ldr	r3, [pc, #108]	; (402160 <TWIHS_init+0x74>)
  4020f2:	9301      	str	r3, [sp, #4]
	twihsOpt.speed = 100000; //100KHz
  4020f4:	4b1b      	ldr	r3, [pc, #108]	; (402164 <TWIHS_init+0x78>)
  4020f6:	9302      	str	r3, [sp, #8]
		////ioport_toggle_pin_level(TWCK_PIN);
		////ioport_toggle_pin_level(TWD_PIN);
//
	//}

	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  4020f8:	4b1b      	ldr	r3, [pc, #108]	; (402168 <TWIHS_init+0x7c>)
  4020fa:	4798      	blx	r3
  4020fc:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  402100:	4b1a      	ldr	r3, [pc, #104]	; (40216c <TWIHS_init+0x80>)
  402102:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402104:	4b1a      	ldr	r3, [pc, #104]	; (402170 <TWIHS_init+0x84>)
  402106:	2220      	movs	r2, #32
  402108:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40210a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40210e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402110:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402116:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402118:	f021 0120 	bic.w	r1, r1, #32
  40211c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40211e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402120:	f021 0120 	bic.w	r1, r1, #32
  402124:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402126:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402128:	2210      	movs	r2, #16
  40212a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40212c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402130:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402132:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402138:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40213a:	f021 0110 	bic.w	r1, r1, #16
  40213e:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402140:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402142:	f021 0110 	bic.w	r1, r1, #16
  402146:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402148:	605a      	str	r2, [r3, #4]
	ioport_set_pin_mode(TWCK_PIN,TWCK_MODE);
	ioport_disable_pin(TWCK_PIN);
	ioport_set_pin_mode(TWD_PIN,TWD_MODE);
	ioport_disable_pin(TWD_PIN);

	pmc_enable_periph_clk(ID_TWIHS1);
  40214a:	2014      	movs	r0, #20
  40214c:	4b09      	ldr	r3, [pc, #36]	; (402174 <TWIHS_init+0x88>)
  40214e:	4798      	blx	r3

	twihs_master_init(TWIHS1,&twihsOpt);
  402150:	a901      	add	r1, sp, #4
  402152:	4809      	ldr	r0, [pc, #36]	; (402178 <TWIHS_init+0x8c>)
  402154:	4b09      	ldr	r3, [pc, #36]	; (40217c <TWIHS_init+0x90>)
  402156:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS1);
}
  402158:	b005      	add	sp, #20
  40215a:	f85d fb04 	ldr.w	pc, [sp], #4
  40215e:	bf00      	nop
  402160:	044aa200 	.word	0x044aa200
  402164:	000186a0 	.word	0x000186a0
  402168:	004010a5 	.word	0x004010a5
  40216c:	00401081 	.word	0x00401081
  402170:	400e1000 	.word	0x400e1000
  402174:	004014f5 	.word	0x004014f5
  402178:	4001c000 	.word	0x4001c000
  40217c:	00401591 	.word	0x00401591

00402180 <main>:

int main (void)
{
  402180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402184:	b083      	sub	sp, #12

	uint32_t writeNum = 0;
	uint32_t writeFrameNum = 0;
	WDT->WDT_MR = WDT_MR_WDDIS; //Disables WDT
  402186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40218a:	4b8e      	ldr	r3, [pc, #568]	; (4023c4 <main+0x244>)
  40218c:	605a      	str	r2, [r3, #4]

	//SCB_EnableICache();
	//SCB_EnableDCache();

	irq_initialize_vectors();
	cpu_irq_enable();
  40218e:	2201      	movs	r2, #1
  402190:	4b8d      	ldr	r3, [pc, #564]	; (4023c8 <main+0x248>)
  402192:	701a      	strb	r2, [r3, #0]
  402194:	f3bf 8f5f 	dmb	sy
  402198:	b662      	cpsie	i

	sysclk_init();
  40219a:	4b8c      	ldr	r3, [pc, #560]	; (4023cc <main+0x24c>)
  40219c:	4798      	blx	r3
	board_init();
  40219e:	4b8c      	ldr	r3, [pc, #560]	; (4023d0 <main+0x250>)
  4021a0:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4021a2:	200a      	movs	r0, #10
  4021a4:	4c8b      	ldr	r4, [pc, #556]	; (4023d4 <main+0x254>)
  4021a6:	47a0      	blx	r4
  4021a8:	200b      	movs	r0, #11
  4021aa:	47a0      	blx	r4
  4021ac:	2010      	movs	r0, #16
  4021ae:	47a0      	blx	r4
	ioport_init(); //turns on all peripheral clocks. could remove this to save power

	//----- CMOS Sensor Stuff
	enableSourceClk(); //Turns on SCK1 from MCU to drive CMOS sensor
  4021b0:	4b89      	ldr	r3, [pc, #548]	; (4023d8 <main+0x258>)
  4021b2:	4798      	blx	r3
	//


	time_tick_init();
  4021b4:	4b89      	ldr	r3, [pc, #548]	; (4023dc <main+0x25c>)
  4021b6:	4798      	blx	r3
	PWM_Init();
  4021b8:	4b89      	ldr	r3, [pc, #548]	; (4023e0 <main+0x260>)
  4021ba:	4798      	blx	r3
	//DACC_init(); //The DAC cannot run at 1.8V. This needs to be replaced with PWM to drive the LED current source
	//DACC_updateOutput(0x0FFF,1);

	TWIHS_init();
  4021bc:	4b89      	ldr	r3, [pc, #548]	; (4023e4 <main+0x264>)
  4021be:	4798      	blx	r3

	//tick_start = time_tick_get();
	//time_ms = time_tick_calc_delay(tick_start, time_tick_get());

	//----- Enable control of LED
	pmc_enable_periph_clk(ID_PIOD);	
  4021c0:	2010      	movs	r0, #16
  4021c2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021c4:	4b88      	ldr	r3, [pc, #544]	; (4023e8 <main+0x268>)
  4021c6:	2202      	movs	r2, #2
  4021c8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021ce:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LED_PIN, 0);
	//-----

	tick_start = time_tick_get();
  4021d0:	4b86      	ldr	r3, [pc, #536]	; (4023ec <main+0x26c>)
  4021d2:	4798      	blx	r3
  4021d4:	4b86      	ldr	r3, [pc, #536]	; (4023f0 <main+0x270>)
  4021d6:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <100) {}
  4021d8:	461e      	mov	r6, r3
  4021da:	4d84      	ldr	r5, [pc, #528]	; (4023ec <main+0x26c>)
  4021dc:	4c85      	ldr	r4, [pc, #532]	; (4023f4 <main+0x274>)
  4021de:	6837      	ldr	r7, [r6, #0]
  4021e0:	47a8      	blx	r5
  4021e2:	4601      	mov	r1, r0
  4021e4:	4638      	mov	r0, r7
  4021e6:	47a0      	blx	r4
  4021e8:	2863      	cmp	r0, #99	; 0x63
  4021ea:	d9f8      	bls.n	4021de <main+0x5e>

	//----- Enable control of enable pin for LED Driver
	pmc_enable_periph_clk(ID_PIOB);
  4021ec:	200b      	movs	r0, #11
  4021ee:	4e79      	ldr	r6, [pc, #484]	; (4023d4 <main+0x254>)
  4021f0:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021f2:	4c81      	ldr	r4, [pc, #516]	; (4023f8 <main+0x278>)
  4021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021f8:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021fe:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402200:	2502      	movs	r5, #2
  402202:	4b79      	ldr	r3, [pc, #484]	; (4023e8 <main+0x268>)
  402204:	631d      	str	r5, [r3, #48]	; 0x30

	ioport_set_pin_level(LED_PIN,1);
	//-----

	//----- Enable control of sensor control pins
	pmc_enable_periph_clk(ID_PIOB);
  402206:	200b      	movs	r0, #11
  402208:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40220a:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40220c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402210:	6365      	str	r5, [r4, #52]	; 0x34

	ioport_set_pin_dir(RESETB_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESETB_PIN, 0); //not sure if this can stay high the whole time.

	tick_start = time_tick_get();
  402212:	4b76      	ldr	r3, [pc, #472]	; (4023ec <main+0x26c>)
  402214:	4798      	blx	r3
  402216:	4b76      	ldr	r3, [pc, #472]	; (4023f0 <main+0x270>)
  402218:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <100) {}
  40221a:	461e      	mov	r6, r3
  40221c:	4d73      	ldr	r5, [pc, #460]	; (4023ec <main+0x26c>)
  40221e:	4c75      	ldr	r4, [pc, #468]	; (4023f4 <main+0x274>)
  402220:	6837      	ldr	r7, [r6, #0]
  402222:	47a8      	blx	r5
  402224:	4601      	mov	r1, r0
  402226:	4638      	mov	r0, r7
  402228:	47a0      	blx	r4
  40222a:	2863      	cmp	r0, #99	; 0x63
  40222c:	d9f8      	bls.n	402220 <main+0xa0>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40222e:	4b72      	ldr	r3, [pc, #456]	; (4023f8 <main+0x278>)
  402230:	2202      	movs	r2, #2
  402232:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402234:	2201      	movs	r2, #1
  402236:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40223c:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40223e:	2204      	movs	r2, #4
  402240:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402246:	635a      	str	r2, [r3, #52]	; 0x34

	//pmc_switch_pck_to_mck(ID_PIOA, 1);


	//----- SD Init Stuff
	sd_mmc_init();
  402248:	4b6c      	ldr	r3, [pc, #432]	; (4023fc <main+0x27c>)
  40224a:	4798      	blx	r3
	//
	
	//--------------------------------------------Remove comments below after debugging I2C
	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK) {
  40224c:	2500      	movs	r5, #0
  40224e:	4c6c      	ldr	r4, [pc, #432]	; (402400 <main+0x280>)
  402250:	4628      	mov	r0, r5
  402252:	47a0      	blx	r4
  402254:	2800      	cmp	r0, #0
  402256:	d1fb      	bne.n	402250 <main+0xd0>
		////Maybe turn LED off
	}
	//
//
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC)) {
  402258:	4b6a      	ldr	r3, [pc, #424]	; (402404 <main+0x284>)
  40225a:	4798      	blx	r3
	////This is the correct type of card (SDHC)
	//
	}
	//
	//-------------------------------------------------------------------------------------------
	uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB); //in KB
  40225c:	2000      	movs	r0, #0
  40225e:	4b6a      	ldr	r3, [pc, #424]	; (402408 <main+0x288>)
  402260:	4798      	blx	r3
	////	testPoint++;
	////}
	////----- CMOS Sensor Stuff
	////enableSourceClk(); //Turns on SCK1 from MCU to drive CMOS sensor

	imagingSensorLoadHeader();
  402262:	4b6a      	ldr	r3, [pc, #424]	; (40240c <main+0x28c>)
  402264:	4798      	blx	r3
	if (ledValue >= PWM_PERIOD_VALUE)
  402266:	4b6a      	ldr	r3, [pc, #424]	; (402410 <main+0x290>)
  402268:	681b      	ldr	r3, [r3, #0]
  40226a:	2bfe      	cmp	r3, #254	; 0xfe
  40226c:	d902      	bls.n	402274 <main+0xf4>
		ledValue = 0;
  40226e:	2200      	movs	r2, #0
  402270:	4b67      	ldr	r3, [pc, #412]	; (402410 <main+0x290>)
  402272:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ledValue);
  402274:	4b66      	ldr	r3, [pc, #408]	; (402410 <main+0x290>)
  402276:	681a      	ldr	r2, [r3, #0]
  402278:	4966      	ldr	r1, [pc, #408]	; (402414 <main+0x294>)
  40227a:	4867      	ldr	r0, [pc, #412]	; (402418 <main+0x298>)
  40227c:	4b67      	ldr	r3, [pc, #412]	; (40241c <main+0x29c>)
  40227e:	4798      	blx	r3

	imagingSensorSetup(); //sets interrupts, configs IO pins for DMA CMOS sensor
  402280:	4b67      	ldr	r3, [pc, #412]	; (402420 <main+0x2a0>)
  402282:	4798      	blx	r3

	imagingSensorConfigure(); //I2C config sensor
  402284:	4b67      	ldr	r3, [pc, #412]	; (402424 <main+0x2a4>)
  402286:	4798      	blx	r3

	tick_start = time_tick_get();
  402288:	4b58      	ldr	r3, [pc, #352]	; (4023ec <main+0x26c>)
  40228a:	4798      	blx	r3
  40228c:	4b58      	ldr	r3, [pc, #352]	; (4023f0 <main+0x270>)
  40228e:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) <5000) {}
  402290:	461e      	mov	r6, r3
  402292:	4d56      	ldr	r5, [pc, #344]	; (4023ec <main+0x26c>)
  402294:	4c57      	ldr	r4, [pc, #348]	; (4023f4 <main+0x274>)
  402296:	6837      	ldr	r7, [r6, #0]
  402298:	47a8      	blx	r5
  40229a:	4601      	mov	r1, r0
  40229c:	4638      	mov	r0, r7
  40229e:	47a0      	blx	r4
  4022a0:	f241 3387 	movw	r3, #4999	; 0x1387
  4022a4:	4298      	cmp	r0, r3
  4022a6:	d9f6      	bls.n	402296 <main+0x116>
	//numFramesToRecord  =300;
	
	//DACC_updateOutput(ledValue,1);
//
	
	sd_mmc_init_write_blocks(SD_SLOT_NB,STARTING_BLOCK,50*NB_BLOCKS_PER_FRAME);	
  4022a8:	f242 7210 	movw	r2, #10000	; 0x2710
  4022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4022b0:	2000      	movs	r0, #0
  4022b2:	4b5d      	ldr	r3, [pc, #372]	; (402428 <main+0x2a8>)
  4022b4:	4798      	blx	r3
	uint32_t curBlock = STARTING_BLOCK;
	uint32_t writeLineCount = 0;
	uint32_t writeCount = 0;
	tick_start = time_tick_get();
  4022b6:	4b4d      	ldr	r3, [pc, #308]	; (4023ec <main+0x26c>)
  4022b8:	4798      	blx	r3
  4022ba:	4b4d      	ldr	r3, [pc, #308]	; (4023f0 <main+0x270>)
  4022bc:	6018      	str	r0, [r3, #0]
	startRecording = 1;
  4022be:	2201      	movs	r2, #1
  4022c0:	4b5a      	ldr	r3, [pc, #360]	; (40242c <main+0x2ac>)
  4022c2:	701a      	strb	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022c4:	4b4c      	ldr	r3, [pc, #304]	; (4023f8 <main+0x278>)
  4022c6:	2204      	movs	r2, #4
  4022c8:	631a      	str	r2, [r3, #48]	; 0x30
  4022ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4022ce:	631a      	str	r2, [r3, #48]	; 0x30
  4022d0:	2202      	movs	r2, #2
  4022d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4022d6:	631a      	str	r2, [r3, #48]	; 0x30
	
	//DACC_updateOutput(ledValue,1);
//
	
	sd_mmc_init_write_blocks(SD_SLOT_NB,STARTING_BLOCK,50*NB_BLOCKS_PER_FRAME);	
	uint32_t curBlock = STARTING_BLOCK;
  4022d8:	f44f 6980 	mov.w	r9, #1024	; 0x400

int main (void)
{

	uint32_t writeNum = 0;
	uint32_t writeFrameNum = 0;
  4022dc:	2400      	movs	r4, #0
				case (0):
					imageBuffer0[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
					sd_mmc_start_write_blocks(&imageBuffer0[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
					break;
				case (1):
					imageBuffer1[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  4022de:	4f44      	ldr	r7, [pc, #272]	; (4023f0 <main+0x270>)
  4022e0:	4e42      	ldr	r6, [pc, #264]	; (4023ec <main+0x26c>)
  4022e2:	4d44      	ldr	r5, [pc, #272]	; (4023f4 <main+0x274>)
  4022e4:	f8df a16c 	ldr.w	sl, [pc, #364]	; 402454 <main+0x2d4>
  4022e8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 402458 <main+0x2d8>
  4022ec:	eb0a 0b08 	add.w	fp, sl, r8
				//}
				//startRecording = 1;
			//}
		//}
		
		if (frameNumber > writeFrameNum) {
  4022f0:	4b4f      	ldr	r3, [pc, #316]	; (402430 <main+0x2b0>)
  4022f2:	681b      	ldr	r3, [r3, #0]
  4022f4:	429c      	cmp	r4, r3
  4022f6:	d24a      	bcs.n	40238e <main+0x20e>
				imageBuffer[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
				sd_mmc_start_write_blocks(&imageBuffer[0*NB_BLOCKS_PER_WRITE*128],NB_BLOCKS_PER_WRITE*5);//NB_BLOCKS_PER_WRITE
			#endif

			#ifdef EV76C454_SUBSAMP
				switch (writeFrameNum%3)
  4022f8:	4b4e      	ldr	r3, [pc, #312]	; (402434 <main+0x2b4>)
  4022fa:	fba3 2304 	umull	r2, r3, r3, r4
  4022fe:	085b      	lsrs	r3, r3, #1
  402300:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402304:	1ae3      	subs	r3, r4, r3
  402306:	2b01      	cmp	r3, #1
  402308:	d011      	beq.n	40232e <main+0x1ae>
  40230a:	b113      	cbz	r3, 402312 <main+0x192>
  40230c:	2b02      	cmp	r3, #2
  40230e:	d01b      	beq.n	402348 <main+0x1c8>
  402310:	e027      	b.n	402362 <main+0x1e2>
				{
				case (0):
					imageBuffer0[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  402312:	683b      	ldr	r3, [r7, #0]
  402314:	9301      	str	r3, [sp, #4]
  402316:	47b0      	blx	r6
  402318:	4601      	mov	r1, r0
  40231a:	9801      	ldr	r0, [sp, #4]
  40231c:	47a8      	blx	r5
  40231e:	4b46      	ldr	r3, [pc, #280]	; (402438 <main+0x2b8>)
  402320:	f843 0008 	str.w	r0, [r3, r8]
					sd_mmc_start_write_blocks(&imageBuffer0[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  402324:	21c8      	movs	r1, #200	; 0xc8
  402326:	4618      	mov	r0, r3
  402328:	4b44      	ldr	r3, [pc, #272]	; (40243c <main+0x2bc>)
  40232a:	4798      	blx	r3
					break;
  40232c:	e019      	b.n	402362 <main+0x1e2>
				case (1):
					imageBuffer1[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  40232e:	683b      	ldr	r3, [r7, #0]
  402330:	9301      	str	r3, [sp, #4]
  402332:	47b0      	blx	r6
  402334:	4601      	mov	r1, r0
  402336:	9801      	ldr	r0, [sp, #4]
  402338:	47a8      	blx	r5
  40233a:	f8cb 0000 	str.w	r0, [fp]
					sd_mmc_start_write_blocks(&imageBuffer1[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  40233e:	21c8      	movs	r1, #200	; 0xc8
  402340:	4650      	mov	r0, sl
  402342:	4b3e      	ldr	r3, [pc, #248]	; (40243c <main+0x2bc>)
  402344:	4798      	blx	r3
					break;
  402346:	e00c      	b.n	402362 <main+0x1e2>
				case (2):
					imageBuffer2[buffSize-2] = time_tick_calc_delay(tick_start, time_tick_get());
  402348:	683b      	ldr	r3, [r7, #0]
  40234a:	9301      	str	r3, [sp, #4]
  40234c:	47b0      	blx	r6
  40234e:	4601      	mov	r1, r0
  402350:	9801      	ldr	r0, [sp, #4]
  402352:	47a8      	blx	r5
  402354:	4b3a      	ldr	r3, [pc, #232]	; (402440 <main+0x2c0>)
  402356:	f843 0008 	str.w	r0, [r3, r8]
					sd_mmc_start_write_blocks(&imageBuffer2[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
  40235a:	21c8      	movs	r1, #200	; 0xc8
  40235c:	4618      	mov	r0, r3
  40235e:	4b37      	ldr	r3, [pc, #220]	; (40243c <main+0x2bc>)
  402360:	4798      	blx	r3
					break;
				}
				
			#endif
			sd_mmc_wait_end_of_write_blocks(false);
  402362:	2000      	movs	r0, #0
  402364:	4b37      	ldr	r3, [pc, #220]	; (402444 <main+0x2c4>)
  402366:	4798      	blx	r3
			writeFrameNum++;	
  402368:	3401      	adds	r4, #1

			startRecording = 1;
  40236a:	2201      	movs	r2, #1
  40236c:	4b2f      	ldr	r3, [pc, #188]	; (40242c <main+0x2ac>)
  40236e:	701a      	strb	r2, [r3, #0]
			
			if (writeFrameNum%50 == 0) {
  402370:	4b35      	ldr	r3, [pc, #212]	; (402448 <main+0x2c8>)
  402372:	fba3 2304 	umull	r2, r3, r3, r4
  402376:	091b      	lsrs	r3, r3, #4
  402378:	2232      	movs	r2, #50	; 0x32
  40237a:	fb02 4313 	mls	r3, r2, r3, r4
  40237e:	b933      	cbnz	r3, 40238e <main+0x20e>
				curBlock+= 50*NB_BLOCKS_PER_FRAME;
  402380:	f242 7210 	movw	r2, #10000	; 0x2710
  402384:	4491      	add	r9, r2
				sd_mmc_init_write_blocks(SD_SLOT_NB,curBlock,50*NB_BLOCKS_PER_FRAME);
  402386:	4649      	mov	r1, r9
  402388:	2000      	movs	r0, #0
  40238a:	4b27      	ldr	r3, [pc, #156]	; (402428 <main+0x2a8>)
  40238c:	4798      	blx	r3

		//valueLED = (valueLED+400)&0x0FFF; //higher value less bright
		//DACC_updateOutput(valueLED,1);

		//if (frameNumber>=numFramesToRecord){ //end at number of frames
		if (time_tick_calc_delay(tick_start, time_tick_get())>=numFramesToRecord*1000){
  40238e:	683b      	ldr	r3, [r7, #0]
  402390:	9301      	str	r3, [sp, #4]
  402392:	47b0      	blx	r6
  402394:	4601      	mov	r1, r0
  402396:	9801      	ldr	r0, [sp, #4]
  402398:	47a8      	blx	r5
  40239a:	4b2c      	ldr	r3, [pc, #176]	; (40244c <main+0x2cc>)
  40239c:	681a      	ldr	r2, [r3, #0]
  40239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4023a2:	fb03 f302 	mul.w	r3, r3, r2
  4023a6:	4298      	cmp	r0, r3
  4023a8:	d308      	bcc.n	4023bc <main+0x23c>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4023aa:	2202      	movs	r2, #2
  4023ac:	4b0e      	ldr	r3, [pc, #56]	; (4023e8 <main+0x268>)
  4023ae:	635a      	str	r2, [r3, #52]	; 0x34
  4023b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4023b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4023b8:	635a      	str	r2, [r3, #52]	; 0x34
  4023ba:	e7fe      	b.n	4023ba <main+0x23a>
			while(1){}
		}
//			startRecording = 1;


		testPoint = 0;	
  4023bc:	2200      	movs	r2, #0
  4023be:	4b24      	ldr	r3, [pc, #144]	; (402450 <main+0x2d0>)
  4023c0:	601a      	str	r2, [r3, #0]
					
	}
  4023c2:	e795      	b.n	4022f0 <main+0x170>
  4023c4:	400e1850 	.word	0x400e1850
  4023c8:	20400000 	.word	0x20400000
  4023cc:	00401359 	.word	0x00401359
  4023d0:	004016bd 	.word	0x004016bd
  4023d4:	004014f5 	.word	0x004014f5
  4023d8:	004019e9 	.word	0x004019e9
  4023dc:	00401311 	.word	0x00401311
  4023e0:	00402031 	.word	0x00402031
  4023e4:	004020ed 	.word	0x004020ed
  4023e8:	400e1400 	.word	0x400e1400
  4023ec:	0040133d 	.word	0x0040133d
  4023f0:	2044b508 	.word	0x2044b508
  4023f4:	00401349 	.word	0x00401349
  4023f8:	400e1000 	.word	0x400e1000
  4023fc:	00400265 	.word	0x00400265
  402400:	00400285 	.word	0x00400285
  402404:	00400905 	.word	0x00400905
  402408:	00400929 	.word	0x00400929
  40240c:	00401db5 	.word	0x00401db5
  402410:	2044b4a8 	.word	0x2044b4a8
  402414:	2044b4b4 	.word	0x2044b4b4
  402418:	40020000 	.word	0x40020000
  40241c:	004012b9 	.word	0x004012b9
  402420:	00401e41 	.word	0x00401e41
  402424:	00401a2d 	.word	0x00401a2d
  402428:	00400aa9 	.word	0x00400aa9
  40242c:	2044b4ac 	.word	0x2044b4ac
  402430:	20400494 	.word	0x20400494
  402434:	aaaaaaab 	.word	0xaaaaaaab
  402438:	204004a8 	.word	0x204004a8
  40243c:	00400b35 	.word	0x00400b35
  402440:	204324a8 	.word	0x204324a8
  402444:	00400b5d 	.word	0x00400b5d
  402448:	51eb851f 	.word	0x51eb851f
  40244c:	204004a4 	.word	0x204004a4
  402450:	2040048c 	.word	0x2040048c
  402454:	204194a8 	.word	0x204194a8
  402458:	00018ff8 	.word	0x00018ff8

0040245c <__libc_init_array>:
  40245c:	b570      	push	{r4, r5, r6, lr}
  40245e:	4e0f      	ldr	r6, [pc, #60]	; (40249c <__libc_init_array+0x40>)
  402460:	4d0f      	ldr	r5, [pc, #60]	; (4024a0 <__libc_init_array+0x44>)
  402462:	1b76      	subs	r6, r6, r5
  402464:	10b6      	asrs	r6, r6, #2
  402466:	bf18      	it	ne
  402468:	2400      	movne	r4, #0
  40246a:	d005      	beq.n	402478 <__libc_init_array+0x1c>
  40246c:	3401      	adds	r4, #1
  40246e:	f855 3b04 	ldr.w	r3, [r5], #4
  402472:	4798      	blx	r3
  402474:	42a6      	cmp	r6, r4
  402476:	d1f9      	bne.n	40246c <__libc_init_array+0x10>
  402478:	4e0a      	ldr	r6, [pc, #40]	; (4024a4 <__libc_init_array+0x48>)
  40247a:	4d0b      	ldr	r5, [pc, #44]	; (4024a8 <__libc_init_array+0x4c>)
  40247c:	1b76      	subs	r6, r6, r5
  40247e:	f000 f941 	bl	402704 <_init>
  402482:	10b6      	asrs	r6, r6, #2
  402484:	bf18      	it	ne
  402486:	2400      	movne	r4, #0
  402488:	d006      	beq.n	402498 <__libc_init_array+0x3c>
  40248a:	3401      	adds	r4, #1
  40248c:	f855 3b04 	ldr.w	r3, [r5], #4
  402490:	4798      	blx	r3
  402492:	42a6      	cmp	r6, r4
  402494:	d1f9      	bne.n	40248a <__libc_init_array+0x2e>
  402496:	bd70      	pop	{r4, r5, r6, pc}
  402498:	bd70      	pop	{r4, r5, r6, pc}
  40249a:	bf00      	nop
  40249c:	00402710 	.word	0x00402710
  4024a0:	00402710 	.word	0x00402710
  4024a4:	00402718 	.word	0x00402718
  4024a8:	00402710 	.word	0x00402710

004024ac <memset>:
  4024ac:	b470      	push	{r4, r5, r6}
  4024ae:	0784      	lsls	r4, r0, #30
  4024b0:	d046      	beq.n	402540 <memset+0x94>
  4024b2:	1e54      	subs	r4, r2, #1
  4024b4:	2a00      	cmp	r2, #0
  4024b6:	d041      	beq.n	40253c <memset+0x90>
  4024b8:	b2cd      	uxtb	r5, r1
  4024ba:	4603      	mov	r3, r0
  4024bc:	e002      	b.n	4024c4 <memset+0x18>
  4024be:	1e62      	subs	r2, r4, #1
  4024c0:	b3e4      	cbz	r4, 40253c <memset+0x90>
  4024c2:	4614      	mov	r4, r2
  4024c4:	f803 5b01 	strb.w	r5, [r3], #1
  4024c8:	079a      	lsls	r2, r3, #30
  4024ca:	d1f8      	bne.n	4024be <memset+0x12>
  4024cc:	2c03      	cmp	r4, #3
  4024ce:	d92e      	bls.n	40252e <memset+0x82>
  4024d0:	b2cd      	uxtb	r5, r1
  4024d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4024d6:	2c0f      	cmp	r4, #15
  4024d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4024dc:	d919      	bls.n	402512 <memset+0x66>
  4024de:	f103 0210 	add.w	r2, r3, #16
  4024e2:	4626      	mov	r6, r4
  4024e4:	3e10      	subs	r6, #16
  4024e6:	2e0f      	cmp	r6, #15
  4024e8:	f842 5c10 	str.w	r5, [r2, #-16]
  4024ec:	f842 5c0c 	str.w	r5, [r2, #-12]
  4024f0:	f842 5c08 	str.w	r5, [r2, #-8]
  4024f4:	f842 5c04 	str.w	r5, [r2, #-4]
  4024f8:	f102 0210 	add.w	r2, r2, #16
  4024fc:	d8f2      	bhi.n	4024e4 <memset+0x38>
  4024fe:	f1a4 0210 	sub.w	r2, r4, #16
  402502:	f022 020f 	bic.w	r2, r2, #15
  402506:	f004 040f 	and.w	r4, r4, #15
  40250a:	3210      	adds	r2, #16
  40250c:	2c03      	cmp	r4, #3
  40250e:	4413      	add	r3, r2
  402510:	d90d      	bls.n	40252e <memset+0x82>
  402512:	461e      	mov	r6, r3
  402514:	4622      	mov	r2, r4
  402516:	3a04      	subs	r2, #4
  402518:	2a03      	cmp	r2, #3
  40251a:	f846 5b04 	str.w	r5, [r6], #4
  40251e:	d8fa      	bhi.n	402516 <memset+0x6a>
  402520:	1f22      	subs	r2, r4, #4
  402522:	f022 0203 	bic.w	r2, r2, #3
  402526:	3204      	adds	r2, #4
  402528:	4413      	add	r3, r2
  40252a:	f004 0403 	and.w	r4, r4, #3
  40252e:	b12c      	cbz	r4, 40253c <memset+0x90>
  402530:	b2c9      	uxtb	r1, r1
  402532:	441c      	add	r4, r3
  402534:	f803 1b01 	strb.w	r1, [r3], #1
  402538:	42a3      	cmp	r3, r4
  40253a:	d1fb      	bne.n	402534 <memset+0x88>
  40253c:	bc70      	pop	{r4, r5, r6}
  40253e:	4770      	bx	lr
  402540:	4614      	mov	r4, r2
  402542:	4603      	mov	r3, r0
  402544:	e7c2      	b.n	4024cc <memset+0x20>
  402546:	bf00      	nop

00402548 <register_fini>:
  402548:	4b02      	ldr	r3, [pc, #8]	; (402554 <register_fini+0xc>)
  40254a:	b113      	cbz	r3, 402552 <register_fini+0xa>
  40254c:	4802      	ldr	r0, [pc, #8]	; (402558 <register_fini+0x10>)
  40254e:	f000 b805 	b.w	40255c <atexit>
  402552:	4770      	bx	lr
  402554:	00000000 	.word	0x00000000
  402558:	00402569 	.word	0x00402569

0040255c <atexit>:
  40255c:	2300      	movs	r3, #0
  40255e:	4601      	mov	r1, r0
  402560:	461a      	mov	r2, r3
  402562:	4618      	mov	r0, r3
  402564:	f000 b814 	b.w	402590 <__register_exitproc>

00402568 <__libc_fini_array>:
  402568:	b538      	push	{r3, r4, r5, lr}
  40256a:	4d07      	ldr	r5, [pc, #28]	; (402588 <__libc_fini_array+0x20>)
  40256c:	4c07      	ldr	r4, [pc, #28]	; (40258c <__libc_fini_array+0x24>)
  40256e:	1b2c      	subs	r4, r5, r4
  402570:	10a4      	asrs	r4, r4, #2
  402572:	d005      	beq.n	402580 <__libc_fini_array+0x18>
  402574:	3c01      	subs	r4, #1
  402576:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40257a:	4798      	blx	r3
  40257c:	2c00      	cmp	r4, #0
  40257e:	d1f9      	bne.n	402574 <__libc_fini_array+0xc>
  402580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402584:	f000 b8c8 	b.w	402718 <_fini>
  402588:	00402728 	.word	0x00402728
  40258c:	00402724 	.word	0x00402724

00402590 <__register_exitproc>:
  402590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402594:	4c25      	ldr	r4, [pc, #148]	; (40262c <__register_exitproc+0x9c>)
  402596:	6825      	ldr	r5, [r4, #0]
  402598:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40259c:	4606      	mov	r6, r0
  40259e:	4688      	mov	r8, r1
  4025a0:	4692      	mov	sl, r2
  4025a2:	4699      	mov	r9, r3
  4025a4:	b3c4      	cbz	r4, 402618 <__register_exitproc+0x88>
  4025a6:	6860      	ldr	r0, [r4, #4]
  4025a8:	281f      	cmp	r0, #31
  4025aa:	dc17      	bgt.n	4025dc <__register_exitproc+0x4c>
  4025ac:	1c43      	adds	r3, r0, #1
  4025ae:	b176      	cbz	r6, 4025ce <__register_exitproc+0x3e>
  4025b0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4025b4:	2201      	movs	r2, #1
  4025b6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4025ba:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4025be:	4082      	lsls	r2, r0
  4025c0:	4311      	orrs	r1, r2
  4025c2:	2e02      	cmp	r6, #2
  4025c4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4025c8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4025cc:	d01e      	beq.n	40260c <__register_exitproc+0x7c>
  4025ce:	3002      	adds	r0, #2
  4025d0:	6063      	str	r3, [r4, #4]
  4025d2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4025d6:	2000      	movs	r0, #0
  4025d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025dc:	4b14      	ldr	r3, [pc, #80]	; (402630 <__register_exitproc+0xa0>)
  4025de:	b303      	cbz	r3, 402622 <__register_exitproc+0x92>
  4025e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4025e4:	f3af 8000 	nop.w
  4025e8:	4604      	mov	r4, r0
  4025ea:	b1d0      	cbz	r0, 402622 <__register_exitproc+0x92>
  4025ec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4025f0:	2700      	movs	r7, #0
  4025f2:	e880 0088 	stmia.w	r0, {r3, r7}
  4025f6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4025fa:	4638      	mov	r0, r7
  4025fc:	2301      	movs	r3, #1
  4025fe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402602:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402606:	2e00      	cmp	r6, #0
  402608:	d0e1      	beq.n	4025ce <__register_exitproc+0x3e>
  40260a:	e7d1      	b.n	4025b0 <__register_exitproc+0x20>
  40260c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402610:	430a      	orrs	r2, r1
  402612:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402616:	e7da      	b.n	4025ce <__register_exitproc+0x3e>
  402618:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40261c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402620:	e7c1      	b.n	4025a6 <__register_exitproc+0x16>
  402622:	f04f 30ff 	mov.w	r0, #4294967295
  402626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40262a:	bf00      	nop
  40262c:	00402700 	.word	0x00402700
  402630:	00000000 	.word	0x00000000

00402634 <sd_trans_multipliers>:
  402634:	00000000 0000000a 0000000c 0000000d     ................
  402644:	0000000f 00000014 00000019 0000001e     ................
  402654:	00000023 00000028 0000002d 00000032     #...(...-...2...
  402664:	00000037 0000003c 00000046 00000050     7...<...F...P...

00402674 <sd_mmc_trans_units>:
  402674:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00402690 <mmc_trans_multipliers>:
  402690:	00000000 0000000a 0000000c 0000000d     ................
  4026a0:	0000000f 00000014 0000001a 0000001e     ................
  4026b0:	00000023 00000028 0000002d 00000034     #...(...-...4...
  4026c0:	00000037 0000003c 00000046 00000050     7...<...F...P...
  4026d0:	00000001 00000002 00000004 00000008     ................
  4026e0:	00000010 00000020 00000040 00000080     .... ...@.......
  4026f0:	00000100 00000200 00000400 00000043     ............C...

00402700 <_global_impure_ptr>:
  402700:	20400010                                ..@ 

00402704 <_init>:
  402704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402706:	bf00      	nop
  402708:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40270a:	bc08      	pop	{r3}
  40270c:	469e      	mov	lr, r3
  40270e:	4770      	bx	lr

00402710 <__init_array_start>:
  402710:	00402549 	.word	0x00402549

00402714 <__frame_dummy_init_array_entry>:
  402714:	00400165                                e.@.

00402718 <_fini>:
  402718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40271a:	bf00      	nop
  40271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40271e:	bc08      	pop	{r3}
  402720:	469e      	mov	lr, r3
  402722:	4770      	bx	lr

00402724 <__fini_array_start>:
  402724:	00400141 	.word	0x00400141
