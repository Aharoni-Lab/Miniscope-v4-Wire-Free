
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000453c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000453c  0000453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  00004544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
  5 .bss          00028ba4  20000040  00004590  00020040  2**4
                  ALLOC
  6 .stack        00010004  20028be4  0002d134  00020040  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
  9 .debug_info   00040e38  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005540  00000000  00000000  00060ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018cdd  00000000  00000000  00066437  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013a8  00000000  00000000  0007f114  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001468  00000000  00000000  000804bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000328ae  00000000  00000000  00081924  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e3eb  00000000  00000000  000b41d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001009e3  00000000  00000000  000d25bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000341c  00000000  00000000  001d2fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 39 1d 00 00     ............9...
      8c:	45 1d 00 00 e5 02 00 00 51 1d 00 00 e5 02 00 00     E.......Q.......
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 5d 1d 00 00     ............]...
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	d9 1a 00 00 e5 1a 00 00 f1 1a 00 00 fd 1a 00 00     ................
      cc:	09 1b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	b5 1f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 61 28 00 00 75 28 00 00 89 28 00 00     ....a(..u(...(..
     154:	9d 28 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .(..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 b9 2d 00 00     .............-..
     1f0:	cd 2d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .-..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 89 1f 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	00004544 	.word	0x00004544

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004544 	.word	0x00004544
     2c4:	20000044 	.word	0x20000044
     2c8:	00004544 	.word	0x00004544
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	00003e75 	.word	0x00003e75

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00004544 	.word	0x00004544
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028be4 	.word	0x20028be4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	000041a1 	.word	0x000041a1
     360:	00003941 	.word	0x00003941

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002d73 	.word	0x00002d73
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	000011e5 	.word	0x000011e5

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	00001461 	.word	0x00001461
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	00002d77 	.word	0x00002d77
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	000010e9 	.word	0x000010e9

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	000018fd 	.word	0x000018fd
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	000041e8 	.word	0x000041e8
     c6c:	000014f5 	.word	0x000014f5
     c70:	00001825 	.word	0x00001825

00000c74 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
	ASSERT(descr);
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3

	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	000041e8 	.word	0x000041e8
     c98:	000014f5 	.word	0x000014f5
     c9c:	0000185d 	.word	0x0000185d

00000ca0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
	uint16_t offset = 0;
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
		buffer[offset] = result;
     d10:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>

	return offset;
}
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	000014f5 	.word	0x000014f5
     d2c:	00001873 	.word	0x00001873
     d30:	00001893 	.word	0x00001893
     d34:	00001887 	.word	0x00001887
     d38:	000018a9 	.word	0x000018a9
     d3c:	000041e8 	.word	0x000041e8

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	00004204 	.word	0x00004204
     d94:	000014f5 	.word	0x000014f5
     d98:	00001f51 	.word	0x00001f51
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	000028c5 	.word	0x000028c5

00000db4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     db4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	000018d1 	.word	0x000018d1
     dd0:	000028d1 	.word	0x000028d1

00000dd4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     dd4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	000018ed 	.word	0x000018ed
     df0:	000028d1 	.word	0x000028d1

00000df4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     df4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0

	while (upper >= lower) {
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
			lower = middle + 1;
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
{
     e38:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
}
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001bd9 	.word	0x00001bd9

00000e6c <ext_irq_register>:
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     e72:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     e92:	2701      	movs	r7, #1
			break;
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
	bool    found = false;
     e96:	2700      	movs	r7, #0
	if (NULL == cb) {
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
	if (!found) {
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
		if (!found) {
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
				found           = true;
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
	if (!found) {
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
}
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001ce1 	.word	0x00001ce1

00000f3c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
}
     f58:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
     f64:	00004224 	.word	0x00004224
     f68:	000014f5 	.word	0x000014f5
     f6c:	0000220d 	.word	0x0000220d

00000f70 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
	ASSERT(mci);
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
}
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	00004224 	.word	0x00004224
     fa4:	000014f5 	.word	0x000014f5
     fa8:	00002275 	.word	0x00002275

00000fac <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(mci);
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
}
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
     fcc:	00004224 	.word	0x00004224
     fd0:	000014f5 	.word	0x000014f5
     fd4:	00002309 	.word	0x00002309

00000fd8 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
     fd8:	b570      	push	{r4, r5, r6, lr}
     fda:	460d      	mov	r5, r1
     fdc:	4616      	mov	r6, r2
	ASSERT(mci);
     fde:	4604      	mov	r4, r0
     fe0:	2272      	movs	r2, #114	; 0x72
     fe2:	4906      	ldr	r1, [pc, #24]	; (ffc <mci_sync_send_cmd+0x24>)
     fe4:	3000      	adds	r0, #0
     fe6:	bf18      	it	ne
     fe8:	2001      	movne	r0, #1
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <mci_sync_send_cmd+0x28>)
     fec:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
     fee:	4632      	mov	r2, r6
     ff0:	4629      	mov	r1, r5
     ff2:	4620      	mov	r0, r4
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <mci_sync_send_cmd+0x2c>)
     ff6:	4798      	blx	r3
}
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	bf00      	nop
     ffc:	00004224 	.word	0x00004224
    1000:	000014f5 	.word	0x000014f5
    1004:	0000230d 	.word	0x0000230d

00001008 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1008:	b510      	push	{r4, lr}
	ASSERT(mci);
    100a:	4604      	mov	r4, r0
    100c:	227b      	movs	r2, #123	; 0x7b
    100e:	4905      	ldr	r1, [pc, #20]	; (1024 <mci_sync_get_response+0x1c>)
    1010:	3000      	adds	r0, #0
    1012:	bf18      	it	ne
    1014:	2001      	movne	r0, #1
    1016:	4b04      	ldr	r3, [pc, #16]	; (1028 <mci_sync_get_response+0x20>)
    1018:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    101a:	4620      	mov	r0, r4
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <mci_sync_get_response+0x24>)
    101e:	4798      	blx	r3
}
    1020:	bd10      	pop	{r4, pc}
    1022:	bf00      	nop
    1024:	00004224 	.word	0x00004224
    1028:	000014f5 	.word	0x000014f5
    102c:	00002365 	.word	0x00002365

00001030 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	b083      	sub	sp, #12
    1034:	460d      	mov	r5, r1
    1036:	4616      	mov	r6, r2
    1038:	461f      	mov	r7, r3
	ASSERT(mci);
    103a:	4604      	mov	r4, r0
    103c:	2290      	movs	r2, #144	; 0x90
    103e:	490a      	ldr	r1, [pc, #40]	; (1068 <mci_sync_adtc_start+0x38>)
    1040:	3000      	adds	r0, #0
    1042:	bf18      	it	ne
    1044:	2001      	movne	r0, #1
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <mci_sync_adtc_start+0x3c>)
    1048:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    104a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    104e:	9301      	str	r3, [sp, #4]
    1050:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1054:	9300      	str	r3, [sp, #0]
    1056:	463b      	mov	r3, r7
    1058:	4632      	mov	r2, r6
    105a:	4629      	mov	r1, r5
    105c:	4620      	mov	r0, r4
    105e:	4c04      	ldr	r4, [pc, #16]	; (1070 <mci_sync_adtc_start+0x40>)
    1060:	47a0      	blx	r4
}
    1062:	b003      	add	sp, #12
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	bf00      	nop
    1068:	00004224 	.word	0x00004224
    106c:	000014f5 	.word	0x000014f5
    1070:	00002391 	.word	0x00002391

00001074 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	460c      	mov	r4, r1
    1078:	4616      	mov	r6, r2
	ASSERT(mci && src);
    107a:	4605      	mov	r5, r0
    107c:	b168      	cbz	r0, 109a <mci_sync_start_write_blocks+0x26>
    107e:	b151      	cbz	r1, 1096 <mci_sync_start_write_blocks+0x22>
    1080:	2001      	movs	r0, #1
    1082:	22be      	movs	r2, #190	; 0xbe
    1084:	4906      	ldr	r1, [pc, #24]	; (10a0 <mci_sync_start_write_blocks+0x2c>)
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <mci_sync_start_write_blocks+0x30>)
    1088:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    108a:	4632      	mov	r2, r6
    108c:	4621      	mov	r1, r4
    108e:	4628      	mov	r0, r5
    1090:	4b05      	ldr	r3, [pc, #20]	; (10a8 <mci_sync_start_write_blocks+0x34>)
    1092:	4798      	blx	r3
}
    1094:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    1096:	2000      	movs	r0, #0
    1098:	e7f3      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109a:	2000      	movs	r0, #0
    109c:	e7f1      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109e:	bf00      	nop
    10a0:	00004224 	.word	0x00004224
    10a4:	000014f5 	.word	0x000014f5
    10a8:	000024f9 	.word	0x000024f9

000010ac <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    10ac:	b510      	push	{r4, lr}
	ASSERT(mci);
    10ae:	4604      	mov	r4, r0
    10b0:	22d0      	movs	r2, #208	; 0xd0
    10b2:	4905      	ldr	r1, [pc, #20]	; (10c8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    10b4:	3000      	adds	r0, #0
    10b6:	bf18      	it	ne
    10b8:	2001      	movne	r0, #1
    10ba:	4b04      	ldr	r3, [pc, #16]	; (10cc <mci_sync_wait_end_of_write_blocks+0x20>)
    10bc:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    10be:	4620      	mov	r0, r4
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <mci_sync_wait_end_of_write_blocks+0x24>)
    10c2:	4798      	blx	r3
}
    10c4:	bd10      	pop	{r4, pc}
    10c6:	bf00      	nop
    10c8:	00004224 	.word	0x00004224
    10cc:	000014f5 	.word	0x000014f5
    10d0:	00002579 	.word	0x00002579

000010d4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    10d4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    10d6:	6943      	ldr	r3, [r0, #20]
    10d8:	b103      	cbz	r3, 10dc <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    10da:	4798      	blx	r3
    10dc:	bd08      	pop	{r3, pc}

000010de <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    10de:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    10e0:	6983      	ldr	r3, [r0, #24]
    10e2:	b103      	cbz	r3, 10e6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    10e4:	4798      	blx	r3
    10e6:	bd08      	pop	{r3, pc}

000010e8 <pwm_init>:
{
    10e8:	b538      	push	{r3, r4, r5, lr}
    10ea:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    10ec:	4604      	mov	r4, r0
    10ee:	b188      	cbz	r0, 1114 <pwm_init+0x2c>
    10f0:	b171      	cbz	r1, 1110 <pwm_init+0x28>
    10f2:	2001      	movs	r0, #1
    10f4:	2233      	movs	r2, #51	; 0x33
    10f6:	4908      	ldr	r1, [pc, #32]	; (1118 <pwm_init+0x30>)
    10f8:	4b08      	ldr	r3, [pc, #32]	; (111c <pwm_init+0x34>)
    10fa:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    10fc:	4629      	mov	r1, r5
    10fe:	4620      	mov	r0, r4
    1100:	4b07      	ldr	r3, [pc, #28]	; (1120 <pwm_init+0x38>)
    1102:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1104:	4b07      	ldr	r3, [pc, #28]	; (1124 <pwm_init+0x3c>)
    1106:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1108:	4b07      	ldr	r3, [pc, #28]	; (1128 <pwm_init+0x40>)
    110a:	6063      	str	r3, [r4, #4]
}
    110c:	2000      	movs	r0, #0
    110e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1110:	2000      	movs	r0, #0
    1112:	e7ef      	b.n	10f4 <pwm_init+0xc>
    1114:	2000      	movs	r0, #0
    1116:	e7ed      	b.n	10f4 <pwm_init+0xc>
    1118:	00004240 	.word	0x00004240
    111c:	000014f5 	.word	0x000014f5
    1120:	00002bcd 	.word	0x00002bcd
    1124:	000010d5 	.word	0x000010d5
    1128:	000010df 	.word	0x000010df

0000112c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    112e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1130:	b117      	cbz	r7, 1138 <timer_add_timer_task+0xc>
    1132:	463c      	mov	r4, r7
    1134:	2600      	movs	r6, #0
    1136:	e00b      	b.n	1150 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    1138:	4b0e      	ldr	r3, [pc, #56]	; (1174 <timer_add_timer_task+0x48>)
    113a:	4798      	blx	r3
		return;
    113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    113e:	68a5      	ldr	r5, [r4, #8]
    1140:	442b      	add	r3, r5
    1142:	1a9b      	subs	r3, r3, r2
    1144:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    1146:	688d      	ldr	r5, [r1, #8]
    1148:	42ab      	cmp	r3, r5
    114a:	d209      	bcs.n	1160 <timer_add_timer_task+0x34>
			break;
		prev = it;
    114c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    114e:	6824      	ldr	r4, [r4, #0]
    1150:	b134      	cbz	r4, 1160 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    1152:	6863      	ldr	r3, [r4, #4]
    1154:	4293      	cmp	r3, r2
    1156:	d8f2      	bhi.n	113e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    1158:	68a5      	ldr	r5, [r4, #8]
    115a:	1a9b      	subs	r3, r3, r2
    115c:	442b      	add	r3, r5
    115e:	e7f2      	b.n	1146 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    1160:	42bc      	cmp	r4, r7
    1162:	d003      	beq.n	116c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1164:	4630      	mov	r0, r6
    1166:	4b04      	ldr	r3, [pc, #16]	; (1178 <timer_add_timer_task+0x4c>)
    1168:	4798      	blx	r3
    116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    116c:	4b01      	ldr	r3, [pc, #4]	; (1174 <timer_add_timer_task+0x48>)
    116e:	4798      	blx	r3
    1170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1172:	bf00      	nop
    1174:	00001511 	.word	0x00001511
    1178:	0000153d 	.word	0x0000153d

0000117c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    117e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1180:	6906      	ldr	r6, [r0, #16]
    1182:	3601      	adds	r6, #1
    1184:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1186:	7e03      	ldrb	r3, [r0, #24]
    1188:	f013 0f01 	tst.w	r3, #1
    118c:	d105      	bne.n	119a <timer_process_counted+0x1e>
    118e:	7e03      	ldrb	r3, [r0, #24]
    1190:	f013 0f02 	tst.w	r3, #2
    1194:	d101      	bne.n	119a <timer_process_counted+0x1e>
    1196:	4605      	mov	r5, r0
    1198:	e009      	b.n	11ae <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    119a:	7e03      	ldrb	r3, [r0, #24]
    119c:	f043 0302 	orr.w	r3, r3, #2
    11a0:	7603      	strb	r3, [r0, #24]
		return;
    11a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11a4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    11a6:	68e3      	ldr	r3, [r4, #12]
    11a8:	4620      	mov	r0, r4
    11aa:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    11ac:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    11ae:	b19c      	cbz	r4, 11d8 <timer_process_counted+0x5c>
    11b0:	6863      	ldr	r3, [r4, #4]
    11b2:	1af3      	subs	r3, r6, r3
    11b4:	68a2      	ldr	r2, [r4, #8]
    11b6:	4293      	cmp	r3, r2
    11b8:	d30e      	bcc.n	11d8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    11ba:	f105 0714 	add.w	r7, r5, #20
    11be:	4638      	mov	r0, r7
    11c0:	4b06      	ldr	r3, [pc, #24]	; (11dc <timer_process_counted+0x60>)
    11c2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    11c4:	7c23      	ldrb	r3, [r4, #16]
    11c6:	2b01      	cmp	r3, #1
    11c8:	d1ec      	bne.n	11a4 <timer_process_counted+0x28>
			tmp->time_label = time;
    11ca:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    11cc:	4632      	mov	r2, r6
    11ce:	4621      	mov	r1, r4
    11d0:	4638      	mov	r0, r7
    11d2:	4b03      	ldr	r3, [pc, #12]	; (11e0 <timer_process_counted+0x64>)
    11d4:	4798      	blx	r3
    11d6:	e7e5      	b.n	11a4 <timer_process_counted+0x28>
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11da:	bf00      	nop
    11dc:	00001545 	.word	0x00001545
    11e0:	0000112d 	.word	0x0000112d

000011e4 <timer_init>:
{
    11e4:	b538      	push	{r3, r4, r5, lr}
    11e6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11e8:	4604      	mov	r4, r0
    11ea:	b180      	cbz	r0, 120e <timer_init+0x2a>
    11ec:	b169      	cbz	r1, 120a <timer_init+0x26>
    11ee:	2001      	movs	r0, #1
    11f0:	223b      	movs	r2, #59	; 0x3b
    11f2:	4908      	ldr	r1, [pc, #32]	; (1214 <timer_init+0x30>)
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <timer_init+0x34>)
    11f6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    11f8:	4629      	mov	r1, r5
    11fa:	4620      	mov	r0, r4
    11fc:	4b07      	ldr	r3, [pc, #28]	; (121c <timer_init+0x38>)
    11fe:	4798      	blx	r3
	descr->time                           = 0;
    1200:	2000      	movs	r0, #0
    1202:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <timer_init+0x3c>)
    1206:	6023      	str	r3, [r4, #0]
}
    1208:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    120a:	2000      	movs	r0, #0
    120c:	e7f0      	b.n	11f0 <timer_init+0xc>
    120e:	2000      	movs	r0, #0
    1210:	e7ee      	b.n	11f0 <timer_init+0xc>
    1212:	bf00      	nop
    1214:	00004258 	.word	0x00004258
    1218:	000014f5 	.word	0x000014f5
    121c:	000029f9 	.word	0x000029f9
    1220:	0000117d 	.word	0x0000117d

00001224 <timer_start>:
{
    1224:	b510      	push	{r4, lr}
	ASSERT(descr);
    1226:	4604      	mov	r4, r0
    1228:	2253      	movs	r2, #83	; 0x53
    122a:	4909      	ldr	r1, [pc, #36]	; (1250 <timer_start+0x2c>)
    122c:	3000      	adds	r0, #0
    122e:	bf18      	it	ne
    1230:	2001      	movne	r0, #1
    1232:	4b08      	ldr	r3, [pc, #32]	; (1254 <timer_start+0x30>)
    1234:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1236:	4620      	mov	r0, r4
    1238:	4b07      	ldr	r3, [pc, #28]	; (1258 <timer_start+0x34>)
    123a:	4798      	blx	r3
    123c:	b920      	cbnz	r0, 1248 <timer_start+0x24>
	_timer_start(&descr->device);
    123e:	4620      	mov	r0, r4
    1240:	4b06      	ldr	r3, [pc, #24]	; (125c <timer_start+0x38>)
    1242:	4798      	blx	r3
	return ERR_NONE;
    1244:	2000      	movs	r0, #0
    1246:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1248:	f06f 0010 	mvn.w	r0, #16
}
    124c:	bd10      	pop	{r4, pc}
    124e:	bf00      	nop
    1250:	00004258 	.word	0x00004258
    1254:	000014f5 	.word	0x000014f5
    1258:	00002d61 	.word	0x00002d61
    125c:	00002d4d 	.word	0x00002d4d

00001260 <timer_add_task>:
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	b082      	sub	sp, #8
    1264:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1266:	4604      	mov	r4, r0
    1268:	b320      	cbz	r0, 12b4 <timer_add_task+0x54>
    126a:	b309      	cbz	r1, 12b0 <timer_add_task+0x50>
    126c:	2001      	movs	r0, #1
    126e:	227a      	movs	r2, #122	; 0x7a
    1270:	491f      	ldr	r1, [pc, #124]	; (12f0 <timer_add_task+0x90>)
    1272:	4b20      	ldr	r3, [pc, #128]	; (12f4 <timer_add_task+0x94>)
    1274:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1276:	7e23      	ldrb	r3, [r4, #24]
    1278:	f043 0301 	orr.w	r3, r3, #1
    127c:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    127e:	f104 0614 	add.w	r6, r4, #20
    1282:	4629      	mov	r1, r5
    1284:	4630      	mov	r0, r6
    1286:	4b1c      	ldr	r3, [pc, #112]	; (12f8 <timer_add_task+0x98>)
    1288:	4798      	blx	r3
    128a:	b9a8      	cbnz	r0, 12b8 <timer_add_task+0x58>
	task->time_label = descr->time;
    128c:	6923      	ldr	r3, [r4, #16]
    128e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1290:	6922      	ldr	r2, [r4, #16]
    1292:	4629      	mov	r1, r5
    1294:	4630      	mov	r0, r6
    1296:	4b19      	ldr	r3, [pc, #100]	; (12fc <timer_add_task+0x9c>)
    1298:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    129a:	7e23      	ldrb	r3, [r4, #24]
    129c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    12a0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    12a2:	7e23      	ldrb	r3, [r4, #24]
    12a4:	f013 0f02 	tst.w	r3, #2
    12a8:	d112      	bne.n	12d0 <timer_add_task+0x70>
	return ERR_NONE;
    12aa:	2000      	movs	r0, #0
}
    12ac:	b002      	add	sp, #8
    12ae:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    12b0:	2000      	movs	r0, #0
    12b2:	e7dc      	b.n	126e <timer_add_task+0xe>
    12b4:	2000      	movs	r0, #0
    12b6:	e7da      	b.n	126e <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    12b8:	7e23      	ldrb	r3, [r4, #24]
    12ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    12be:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    12c0:	227f      	movs	r2, #127	; 0x7f
    12c2:	490b      	ldr	r1, [pc, #44]	; (12f0 <timer_add_task+0x90>)
    12c4:	2000      	movs	r0, #0
    12c6:	4b0b      	ldr	r3, [pc, #44]	; (12f4 <timer_add_task+0x94>)
    12c8:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    12ca:	f06f 0011 	mvn.w	r0, #17
    12ce:	e7ed      	b.n	12ac <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    12d0:	a801      	add	r0, sp, #4
    12d2:	4b0b      	ldr	r3, [pc, #44]	; (1300 <timer_add_task+0xa0>)
    12d4:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    12d6:	7e23      	ldrb	r3, [r4, #24]
    12d8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    12dc:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    12de:	4620      	mov	r0, r4
    12e0:	4b08      	ldr	r3, [pc, #32]	; (1304 <timer_add_task+0xa4>)
    12e2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    12e4:	a801      	add	r0, sp, #4
    12e6:	4b08      	ldr	r3, [pc, #32]	; (1308 <timer_add_task+0xa8>)
    12e8:	4798      	blx	r3
	return ERR_NONE;
    12ea:	2000      	movs	r0, #0
    12ec:	e7de      	b.n	12ac <timer_add_task+0x4c>
    12ee:	bf00      	nop
    12f0:	00004258 	.word	0x00004258
    12f4:	000014f5 	.word	0x000014f5
    12f8:	000014fb 	.word	0x000014fb
    12fc:	0000112d 	.word	0x0000112d
    1300:	00000d41 	.word	0x00000d41
    1304:	00002d7d 	.word	0x00002d7d
    1308:	00000d4f 	.word	0x00000d4f

0000130c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    130c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    130e:	2300      	movs	r3, #0
    1310:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1312:	69c3      	ldr	r3, [r0, #28]
    1314:	b11b      	cbz	r3, 131e <usart_transmission_complete+0x12>
    1316:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    131a:	4610      	mov	r0, r2
    131c:	4798      	blx	r3
    131e:	bd08      	pop	{r3, pc}

00001320 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1320:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1322:	2300      	movs	r3, #0
    1324:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1326:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1328:	b11b      	cbz	r3, 1332 <usart_error+0x12>
    132a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    132e:	4610      	mov	r0, r2
    1330:	4798      	blx	r3
    1332:	bd08      	pop	{r3, pc}

00001334 <usart_fill_rx_buffer>:
{
    1334:	b538      	push	{r3, r4, r5, lr}
    1336:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1338:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    133c:	302c      	adds	r0, #44	; 0x2c
    133e:	4b03      	ldr	r3, [pc, #12]	; (134c <usart_fill_rx_buffer+0x18>)
    1340:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1342:	6a23      	ldr	r3, [r4, #32]
    1344:	b10b      	cbz	r3, 134a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1346:	4628      	mov	r0, r5
    1348:	4798      	blx	r3
    134a:	bd38      	pop	{r3, r4, r5, pc}
    134c:	000015e1 	.word	0x000015e1

00001350 <usart_async_write>:
{
    1350:	b570      	push	{r4, r5, r6, lr}
    1352:	460e      	mov	r6, r1
    1354:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1356:	4604      	mov	r4, r0
    1358:	b1d8      	cbz	r0, 1392 <usart_async_write+0x42>
    135a:	b1e1      	cbz	r1, 1396 <usart_async_write+0x46>
    135c:	b9ea      	cbnz	r2, 139a <usart_async_write+0x4a>
    135e:	2000      	movs	r0, #0
    1360:	f240 123b 	movw	r2, #315	; 0x13b
    1364:	490f      	ldr	r1, [pc, #60]	; (13a4 <usart_async_write+0x54>)
    1366:	4b10      	ldr	r3, [pc, #64]	; (13a8 <usart_async_write+0x58>)
    1368:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    136a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    136e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1372:	429a      	cmp	r2, r3
    1374:	d113      	bne.n	139e <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    1376:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1378:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    137c:	2300      	movs	r3, #0
    137e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1382:	2301      	movs	r3, #1
    1384:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1386:	f104 0008 	add.w	r0, r4, #8
    138a:	4b08      	ldr	r3, [pc, #32]	; (13ac <usart_async_write+0x5c>)
    138c:	4798      	blx	r3
	return (int32_t)length;
    138e:	4628      	mov	r0, r5
    1390:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1392:	2000      	movs	r0, #0
    1394:	e7e4      	b.n	1360 <usart_async_write+0x10>
    1396:	2000      	movs	r0, #0
    1398:	e7e2      	b.n	1360 <usart_async_write+0x10>
    139a:	2001      	movs	r0, #1
    139c:	e7e0      	b.n	1360 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    139e:	f06f 001b 	mvn.w	r0, #27
}
    13a2:	bd70      	pop	{r4, r5, r6, pc}
    13a4:	00004270 	.word	0x00004270
    13a8:	000014f5 	.word	0x000014f5
    13ac:	0000284f 	.word	0x0000284f

000013b0 <usart_process_byte_sent>:
{
    13b0:	b510      	push	{r4, lr}
    13b2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    13b4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    13b6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    13ba:	4293      	cmp	r3, r2
    13bc:	d009      	beq.n	13d2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    13be:	6c02      	ldr	r2, [r0, #64]	; 0x40
    13c0:	1c59      	adds	r1, r3, #1
    13c2:	8781      	strh	r1, [r0, #60]	; 0x3c
    13c4:	5cd1      	ldrb	r1, [r2, r3]
    13c6:	4b04      	ldr	r3, [pc, #16]	; (13d8 <usart_process_byte_sent+0x28>)
    13c8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    13ca:	4620      	mov	r0, r4
    13cc:	4b03      	ldr	r3, [pc, #12]	; (13dc <usart_process_byte_sent+0x2c>)
    13ce:	4798      	blx	r3
    13d0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    13d2:	4b03      	ldr	r3, [pc, #12]	; (13e0 <usart_process_byte_sent+0x30>)
    13d4:	4798      	blx	r3
    13d6:	bd10      	pop	{r4, pc}
    13d8:	00002849 	.word	0x00002849
    13dc:	0000284f 	.word	0x0000284f
    13e0:	00002857 	.word	0x00002857

000013e4 <usart_async_read>:
{
    13e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13e8:	b082      	sub	sp, #8
    13ea:	4688      	mov	r8, r1
    13ec:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    13ee:	4605      	mov	r5, r0
    13f0:	b1a0      	cbz	r0, 141c <usart_async_read+0x38>
    13f2:	b1a9      	cbz	r1, 1420 <usart_async_read+0x3c>
    13f4:	b9b2      	cbnz	r2, 1424 <usart_async_read+0x40>
    13f6:	2000      	movs	r0, #0
    13f8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    13fc:	4912      	ldr	r1, [pc, #72]	; (1448 <usart_async_read+0x64>)
    13fe:	4b13      	ldr	r3, [pc, #76]	; (144c <usart_async_read+0x68>)
    1400:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1402:	a801      	add	r0, sp, #4
    1404:	4b12      	ldr	r3, [pc, #72]	; (1450 <usart_async_read+0x6c>)
    1406:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1408:	3534      	adds	r5, #52	; 0x34
    140a:	4628      	mov	r0, r5
    140c:	4b11      	ldr	r3, [pc, #68]	; (1454 <usart_async_read+0x70>)
    140e:	4798      	blx	r3
    1410:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    1412:	a801      	add	r0, sp, #4
    1414:	4b10      	ldr	r3, [pc, #64]	; (1458 <usart_async_read+0x74>)
    1416:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1418:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    141a:	e00b      	b.n	1434 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    141c:	2000      	movs	r0, #0
    141e:	e7eb      	b.n	13f8 <usart_async_read+0x14>
    1420:	2000      	movs	r0, #0
    1422:	e7e9      	b.n	13f8 <usart_async_read+0x14>
    1424:	2001      	movs	r0, #1
    1426:	e7e7      	b.n	13f8 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1428:	3401      	adds	r4, #1
    142a:	b2a4      	uxth	r4, r4
    142c:	4441      	add	r1, r8
    142e:	4628      	mov	r0, r5
    1430:	4b0a      	ldr	r3, [pc, #40]	; (145c <usart_async_read+0x78>)
    1432:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1434:	4621      	mov	r1, r4
    1436:	42a7      	cmp	r7, r4
    1438:	d901      	bls.n	143e <usart_async_read+0x5a>
    143a:	42b4      	cmp	r4, r6
    143c:	d3f4      	bcc.n	1428 <usart_async_read+0x44>
}
    143e:	4620      	mov	r0, r4
    1440:	b002      	add	sp, #8
    1442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1446:	bf00      	nop
    1448:	00004270 	.word	0x00004270
    144c:	000014f5 	.word	0x000014f5
    1450:	00000d41 	.word	0x00000d41
    1454:	00001621 	.word	0x00001621
    1458:	00000d4f 	.word	0x00000d4f
    145c:	00001599 	.word	0x00001599

00001460 <usart_async_init>:
{
    1460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1462:	460d      	mov	r5, r1
    1464:	4616      	mov	r6, r2
    1466:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1468:	4604      	mov	r4, r0
    146a:	b318      	cbz	r0, 14b4 <usart_async_init+0x54>
    146c:	b321      	cbz	r1, 14b8 <usart_async_init+0x58>
    146e:	b32a      	cbz	r2, 14bc <usart_async_init+0x5c>
    1470:	bb33      	cbnz	r3, 14c0 <usart_async_init+0x60>
    1472:	2000      	movs	r0, #0
    1474:	223a      	movs	r2, #58	; 0x3a
    1476:	4915      	ldr	r1, [pc, #84]	; (14cc <usart_async_init+0x6c>)
    1478:	4b15      	ldr	r3, [pc, #84]	; (14d0 <usart_async_init+0x70>)
    147a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    147c:	463a      	mov	r2, r7
    147e:	4631      	mov	r1, r6
    1480:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1484:	4b13      	ldr	r3, [pc, #76]	; (14d4 <usart_async_init+0x74>)
    1486:	4798      	blx	r3
    1488:	b9e0      	cbnz	r0, 14c4 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    148a:	4629      	mov	r1, r5
    148c:	f104 0008 	add.w	r0, r4, #8
    1490:	4b11      	ldr	r3, [pc, #68]	; (14d8 <usart_async_init+0x78>)
    1492:	4798      	blx	r3
	if (init_status) {
    1494:	4603      	mov	r3, r0
    1496:	b958      	cbnz	r0, 14b0 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    1498:	4a10      	ldr	r2, [pc, #64]	; (14dc <usart_async_init+0x7c>)
    149a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    149c:	4a10      	ldr	r2, [pc, #64]	; (14e0 <usart_async_init+0x80>)
    149e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    14a0:	4a10      	ldr	r2, [pc, #64]	; (14e4 <usart_async_init+0x84>)
    14a2:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    14a4:	4a10      	ldr	r2, [pc, #64]	; (14e8 <usart_async_init+0x88>)
    14a6:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    14a8:	4a10      	ldr	r2, [pc, #64]	; (14ec <usart_async_init+0x8c>)
    14aa:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    14ac:	4a10      	ldr	r2, [pc, #64]	; (14f0 <usart_async_init+0x90>)
    14ae:	6162      	str	r2, [r4, #20]
}
    14b0:	4618      	mov	r0, r3
    14b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    14b4:	2000      	movs	r0, #0
    14b6:	e7dd      	b.n	1474 <usart_async_init+0x14>
    14b8:	2000      	movs	r0, #0
    14ba:	e7db      	b.n	1474 <usart_async_init+0x14>
    14bc:	2000      	movs	r0, #0
    14be:	e7d9      	b.n	1474 <usart_async_init+0x14>
    14c0:	2001      	movs	r0, #1
    14c2:	e7d7      	b.n	1474 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    14c4:	f06f 030c 	mvn.w	r3, #12
    14c8:	e7f2      	b.n	14b0 <usart_async_init+0x50>
    14ca:	bf00      	nop
    14cc:	00004270 	.word	0x00004270
    14d0:	000014f5 	.word	0x000014f5
    14d4:	00001555 	.word	0x00001555
    14d8:	000027c5 	.word	0x000027c5
    14dc:	000013e5 	.word	0x000013e5
    14e0:	00001351 	.word	0x00001351
    14e4:	000013b1 	.word	0x000013b1
    14e8:	00001335 	.word	0x00001335
    14ec:	0000130d 	.word	0x0000130d
    14f0:	00001321 	.word	0x00001321

000014f4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    14f4:	b900      	cbnz	r0, 14f8 <assert+0x4>
		__asm("BKPT #0");
    14f6:	be00      	bkpt	0x0000
    14f8:	4770      	bx	lr

000014fa <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    14fa:	6803      	ldr	r3, [r0, #0]
    14fc:	b11b      	cbz	r3, 1506 <is_list_element+0xc>
		if (it == element) {
    14fe:	428b      	cmp	r3, r1
    1500:	d003      	beq.n	150a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	e7fa      	b.n	14fc <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1506:	2000      	movs	r0, #0
    1508:	4770      	bx	lr
			return true;
    150a:	2001      	movs	r0, #1
}
    150c:	4770      	bx	lr
	...

00001510 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1510:	b538      	push	{r3, r4, r5, lr}
    1512:	4604      	mov	r4, r0
    1514:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <list_insert_as_head+0x20>)
    1518:	4798      	blx	r3
    151a:	f080 0001 	eor.w	r0, r0, #1
    151e:	2239      	movs	r2, #57	; 0x39
    1520:	4904      	ldr	r1, [pc, #16]	; (1534 <list_insert_as_head+0x24>)
    1522:	b2c0      	uxtb	r0, r0
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <list_insert_as_head+0x28>)
    1526:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1528:	6823      	ldr	r3, [r4, #0]
    152a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    152c:	6025      	str	r5, [r4, #0]
    152e:	bd38      	pop	{r3, r4, r5, pc}
    1530:	000014fb 	.word	0x000014fb
    1534:	00004290 	.word	0x00004290
    1538:	000014f5 	.word	0x000014f5

0000153c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    153c:	6803      	ldr	r3, [r0, #0]
    153e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1540:	6001      	str	r1, [r0, #0]
    1542:	4770      	bx	lr

00001544 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1544:	6803      	ldr	r3, [r0, #0]
    1546:	b11b      	cbz	r3, 1550 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1548:	681a      	ldr	r2, [r3, #0]
    154a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    154c:	4618      	mov	r0, r3
    154e:	4770      	bx	lr
	}

	return NULL;
    1550:	2000      	movs	r0, #0
}
    1552:	4770      	bx	lr

00001554 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1554:	b570      	push	{r4, r5, r6, lr}
    1556:	460e      	mov	r6, r1
    1558:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    155a:	4604      	mov	r4, r0
    155c:	b178      	cbz	r0, 157e <ringbuffer_init+0x2a>
    155e:	b181      	cbz	r1, 1582 <ringbuffer_init+0x2e>
    1560:	b98a      	cbnz	r2, 1586 <ringbuffer_init+0x32>
    1562:	2000      	movs	r0, #0
    1564:	2228      	movs	r2, #40	; 0x28
    1566:	490a      	ldr	r1, [pc, #40]	; (1590 <ringbuffer_init+0x3c>)
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <ringbuffer_init+0x40>)
    156a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    156c:	1e6b      	subs	r3, r5, #1
    156e:	421d      	tst	r5, r3
    1570:	d10b      	bne.n	158a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1572:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1574:	2000      	movs	r0, #0
    1576:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1578:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    157a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    157c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    157e:	2000      	movs	r0, #0
    1580:	e7f0      	b.n	1564 <ringbuffer_init+0x10>
    1582:	2000      	movs	r0, #0
    1584:	e7ee      	b.n	1564 <ringbuffer_init+0x10>
    1586:	2001      	movs	r0, #1
    1588:	e7ec      	b.n	1564 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    158a:	f06f 000c 	mvn.w	r0, #12
}
    158e:	bd70      	pop	{r4, r5, r6, pc}
    1590:	000042b0 	.word	0x000042b0
    1594:	000014f5 	.word	0x000014f5

00001598 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1598:	b538      	push	{r3, r4, r5, lr}
    159a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    159c:	4604      	mov	r4, r0
    159e:	b1a8      	cbz	r0, 15cc <ringbuffer_get+0x34>
    15a0:	b191      	cbz	r1, 15c8 <ringbuffer_get+0x30>
    15a2:	2001      	movs	r0, #1
    15a4:	2240      	movs	r2, #64	; 0x40
    15a6:	490c      	ldr	r1, [pc, #48]	; (15d8 <ringbuffer_get+0x40>)
    15a8:	4b0c      	ldr	r3, [pc, #48]	; (15dc <ringbuffer_get+0x44>)
    15aa:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    15ac:	68e2      	ldr	r2, [r4, #12]
    15ae:	68a3      	ldr	r3, [r4, #8]
    15b0:	429a      	cmp	r2, r3
    15b2:	d00d      	beq.n	15d0 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    15b4:	6822      	ldr	r2, [r4, #0]
    15b6:	6861      	ldr	r1, [r4, #4]
    15b8:	400b      	ands	r3, r1
    15ba:	5cd3      	ldrb	r3, [r2, r3]
    15bc:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    15be:	68a3      	ldr	r3, [r4, #8]
    15c0:	3301      	adds	r3, #1
    15c2:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    15c4:	2000      	movs	r0, #0
    15c6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    15c8:	2000      	movs	r0, #0
    15ca:	e7eb      	b.n	15a4 <ringbuffer_get+0xc>
    15cc:	2000      	movs	r0, #0
    15ce:	e7e9      	b.n	15a4 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    15d0:	f06f 0009 	mvn.w	r0, #9
}
    15d4:	bd38      	pop	{r3, r4, r5, pc}
    15d6:	bf00      	nop
    15d8:	000042b0 	.word	0x000042b0
    15dc:	000014f5 	.word	0x000014f5

000015e0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    15e0:	b538      	push	{r3, r4, r5, lr}
    15e2:	460d      	mov	r5, r1
	ASSERT(rb);
    15e4:	4604      	mov	r4, r0
    15e6:	2251      	movs	r2, #81	; 0x51
    15e8:	490b      	ldr	r1, [pc, #44]	; (1618 <ringbuffer_put+0x38>)
    15ea:	3000      	adds	r0, #0
    15ec:	bf18      	it	ne
    15ee:	2001      	movne	r0, #1
    15f0:	4b0a      	ldr	r3, [pc, #40]	; (161c <ringbuffer_put+0x3c>)
    15f2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    15f4:	6822      	ldr	r2, [r4, #0]
    15f6:	68e3      	ldr	r3, [r4, #12]
    15f8:	6861      	ldr	r1, [r4, #4]
    15fa:	400b      	ands	r3, r1
    15fc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    15fe:	68e3      	ldr	r3, [r4, #12]
    1600:	68a2      	ldr	r2, [r4, #8]
    1602:	1a9a      	subs	r2, r3, r2
    1604:	6861      	ldr	r1, [r4, #4]
    1606:	428a      	cmp	r2, r1
    1608:	d901      	bls.n	160e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    160a:	1a59      	subs	r1, r3, r1
    160c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    160e:	3301      	adds	r3, #1
    1610:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1612:	2000      	movs	r0, #0
    1614:	bd38      	pop	{r3, r4, r5, pc}
    1616:	bf00      	nop
    1618:	000042b0 	.word	0x000042b0
    161c:	000014f5 	.word	0x000014f5

00001620 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1620:	b510      	push	{r4, lr}
	ASSERT(rb);
    1622:	4604      	mov	r4, r0
    1624:	2267      	movs	r2, #103	; 0x67
    1626:	4905      	ldr	r1, [pc, #20]	; (163c <ringbuffer_num+0x1c>)
    1628:	3000      	adds	r0, #0
    162a:	bf18      	it	ne
    162c:	2001      	movne	r0, #1
    162e:	4b04      	ldr	r3, [pc, #16]	; (1640 <ringbuffer_num+0x20>)
    1630:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1632:	68e0      	ldr	r0, [r4, #12]
    1634:	68a3      	ldr	r3, [r4, #8]
}
    1636:	1ac0      	subs	r0, r0, r3
    1638:	bd10      	pop	{r4, pc}
    163a:	bf00      	nop
    163c:	000042b0 	.word	0x000042b0
    1640:	000014f5 	.word	0x000014f5

00001644 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1644:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1648:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    164c:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1650:	4770      	bx	lr
	...

00001654 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1654:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    1656:	4b60      	ldr	r3, [pc, #384]	; (17d8 <_adc_init+0x184>)
    1658:	4298      	cmp	r0, r3
    165a:	f000 809c 	beq.w	1796 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    165e:	4b5f      	ldr	r3, [pc, #380]	; (17dc <_adc_init+0x188>)
    1660:	4298      	cmp	r0, r3
    1662:	f000 80a8 	beq.w	17b6 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    1666:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1668:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    166a:	f013 0f01 	tst.w	r3, #1
    166e:	d11b      	bne.n	16a8 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1670:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1672:	f013 0f03 	tst.w	r3, #3
    1676:	d1fb      	bne.n	1670 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1678:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    167a:	f013 0f02 	tst.w	r3, #2
    167e:	d00d      	beq.n	169c <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1680:	8803      	ldrh	r3, [r0, #0]
    1682:	b29b      	uxth	r3, r3
    1684:	f023 0302 	bic.w	r3, r3, #2
    1688:	b29b      	uxth	r3, r3
    168a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    168c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    168e:	f013 0f03 	tst.w	r3, #3
    1692:	d1fb      	bne.n	168c <_adc_init+0x38>
    1694:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1696:	f013 0f02 	tst.w	r3, #2
    169a:	d1fb      	bne.n	1694 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    169c:	2301      	movs	r3, #1
    169e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16a2:	f013 0f03 	tst.w	r3, #3
    16a6:	d1fb      	bne.n	16a0 <_adc_init+0x4c>
    16a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16aa:	f013 0f01 	tst.w	r3, #1
    16ae:	d1fb      	bne.n	16a8 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    16b0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    16b4:	2316      	movs	r3, #22
    16b6:	4a4a      	ldr	r2, [pc, #296]	; (17e0 <_adc_init+0x18c>)
    16b8:	fb03 2301 	mla	r3, r3, r1, r2
    16bc:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    16be:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    16c6:	2b00      	cmp	r3, #0
    16c8:	d1fa      	bne.n	16c0 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    16ca:	2316      	movs	r3, #22
    16cc:	4a44      	ldr	r2, [pc, #272]	; (17e0 <_adc_init+0x18c>)
    16ce:	fb03 2301 	mla	r3, r3, r1, r2
    16d2:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    16d4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    16dc:	2b00      	cmp	r3, #0
    16de:	d1fa      	bne.n	16d6 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    16e0:	2316      	movs	r3, #22
    16e2:	4a3f      	ldr	r2, [pc, #252]	; (17e0 <_adc_init+0x18c>)
    16e4:	fb03 2301 	mla	r3, r3, r1, r2
    16e8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    16ea:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    16ec:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    16ee:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    16f6:	2b00      	cmp	r3, #0
    16f8:	d1fa      	bne.n	16f0 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    16fa:	2316      	movs	r3, #22
    16fc:	4a38      	ldr	r2, [pc, #224]	; (17e0 <_adc_init+0x18c>)
    16fe:	fb03 2301 	mla	r3, r3, r1, r2
    1702:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1704:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1706:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1708:	f3c3 030b 	ubfx	r3, r3, #0, #12
    170c:	2b00      	cmp	r3, #0
    170e:	d1fa      	bne.n	1706 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1710:	2316      	movs	r3, #22
    1712:	4a33      	ldr	r2, [pc, #204]	; (17e0 <_adc_init+0x18c>)
    1714:	fb03 2301 	mla	r3, r3, r1, r2
    1718:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    171a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    171c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    171e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1722:	2b00      	cmp	r3, #0
    1724:	d1fa      	bne.n	171c <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1726:	2316      	movs	r3, #22
    1728:	4a2d      	ldr	r2, [pc, #180]	; (17e0 <_adc_init+0x18c>)
    172a:	fb03 2301 	mla	r3, r3, r1, r2
    172e:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    1730:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1732:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1734:	f013 0f80 	tst.w	r3, #128	; 0x80
    1738:	d1fb      	bne.n	1732 <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    173a:	2316      	movs	r3, #22
    173c:	4a28      	ldr	r2, [pc, #160]	; (17e0 <_adc_init+0x18c>)
    173e:	fb03 2301 	mla	r3, r3, r1, r2
    1742:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    1744:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1746:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1748:	f413 7f80 	tst.w	r3, #256	; 0x100
    174c:	d1fb      	bne.n	1746 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    174e:	2316      	movs	r3, #22
    1750:	4a23      	ldr	r2, [pc, #140]	; (17e0 <_adc_init+0x18c>)
    1752:	fb03 2301 	mla	r3, r3, r1, r2
    1756:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    1758:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    175a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    175c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1760:	d1fb      	bne.n	175a <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1762:	2316      	movs	r3, #22
    1764:	4a1e      	ldr	r2, [pc, #120]	; (17e0 <_adc_init+0x18c>)
    1766:	fb03 2301 	mla	r3, r3, r1, r2
    176a:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    176c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    176e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1770:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1774:	d1fb      	bne.n	176e <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1776:	2216      	movs	r2, #22
    1778:	4b19      	ldr	r3, [pc, #100]	; (17e0 <_adc_init+0x18c>)
    177a:	fb02 3101 	mla	r1, r2, r1, r3
    177e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1780:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1782:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1784:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1786:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1788:	f013 0f03 	tst.w	r3, #3
    178c:	d1fb      	bne.n	1786 <_adc_init+0x132>

	return ERR_NONE;
}
    178e:	2000      	movs	r0, #0
    1790:	f85d 4b04 	ldr.w	r4, [sp], #4
    1794:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1796:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	095a      	lsrs	r2, r3, #5
    179e:	0212      	lsls	r2, r2, #8
    17a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    17a4:	0a1c      	lsrs	r4, r3, #8
    17a6:	0124      	lsls	r4, r4, #4
    17a8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    17ac:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    17ae:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    17b2:	431a      	orrs	r2, r3
    17b4:	e758      	b.n	1668 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    17b6:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	0cda      	lsrs	r2, r3, #19
    17be:	0212      	lsls	r2, r2, #8
    17c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    17c4:	0d9c      	lsrs	r4, r3, #22
    17c6:	0124      	lsls	r4, r4, #4
    17c8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    17cc:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    17ce:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    17d2:	431a      	orrs	r2, r3
    17d4:	e748      	b.n	1668 <_adc_init+0x14>
    17d6:	bf00      	nop
    17d8:	43001c00 	.word	0x43001c00
    17dc:	43002000 	.word	0x43002000
    17e0:	000042d4 	.word	0x000042d4

000017e4 <_adc_get_regs>:
{
    17e4:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    17e6:	4b0b      	ldr	r3, [pc, #44]	; (1814 <_adc_get_regs+0x30>)
    17e8:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    17ea:	2300      	movs	r3, #0
    17ec:	b13b      	cbz	r3, 17fe <_adc_get_regs+0x1a>
	ASSERT(false);
    17ee:	2288      	movs	r2, #136	; 0x88
    17f0:	4909      	ldr	r1, [pc, #36]	; (1818 <_adc_get_regs+0x34>)
    17f2:	2000      	movs	r0, #0
    17f4:	4b09      	ldr	r3, [pc, #36]	; (181c <_adc_get_regs+0x38>)
    17f6:	4798      	blx	r3
	return 0;
    17f8:	2300      	movs	r3, #0
}
    17fa:	4618      	mov	r0, r3
    17fc:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    17fe:	2216      	movs	r2, #22
    1800:	fb02 f203 	mul.w	r2, r2, r3
    1804:	4906      	ldr	r1, [pc, #24]	; (1820 <_adc_get_regs+0x3c>)
    1806:	5c8a      	ldrb	r2, [r1, r2]
    1808:	4290      	cmp	r0, r2
    180a:	d0f6      	beq.n	17fa <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    180c:	3301      	adds	r3, #1
    180e:	b2db      	uxtb	r3, r3
    1810:	e7ec      	b.n	17ec <_adc_get_regs+0x8>
    1812:	bf00      	nop
    1814:	00001645 	.word	0x00001645
    1818:	000042ec 	.word	0x000042ec
    181c:	000014f5 	.word	0x000014f5
    1820:	000042d4 	.word	0x000042d4

00001824 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1824:	b538      	push	{r3, r4, r5, lr}
    1826:	460c      	mov	r4, r1
	ASSERT(device);
    1828:	4605      	mov	r5, r0
    182a:	22d9      	movs	r2, #217	; 0xd9
    182c:	4907      	ldr	r1, [pc, #28]	; (184c <_adc_sync_init+0x28>)
    182e:	3000      	adds	r0, #0
    1830:	bf18      	it	ne
    1832:	2001      	movne	r0, #1
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <_adc_sync_init+0x2c>)
    1836:	4798      	blx	r3

	device->hw = hw;
    1838:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    183a:	4620      	mov	r0, r4
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <_adc_sync_init+0x30>)
    183e:	4798      	blx	r3
    1840:	4601      	mov	r1, r0
    1842:	4620      	mov	r0, r4
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <_adc_sync_init+0x34>)
    1846:	4798      	blx	r3
}
    1848:	bd38      	pop	{r3, r4, r5, pc}
    184a:	bf00      	nop
    184c:	000042ec 	.word	0x000042ec
    1850:	000014f5 	.word	0x000014f5
    1854:	000017e5 	.word	0x000017e5
    1858:	00001655 	.word	0x00001655

0000185c <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    185c:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    185e:	8813      	ldrh	r3, [r2, #0]
    1860:	b29b      	uxth	r3, r3
    1862:	f043 0302 	orr.w	r3, r3, #2
    1866:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1868:	6b13      	ldr	r3, [r2, #48]	; 0x30
    186a:	f013 0f03 	tst.w	r3, #3
    186e:	d1fb      	bne.n	1868 <_adc_sync_enable_channel+0xc>
}
    1870:	4770      	bx	lr

00001872 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1872:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1874:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    1876:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    187a:	2b03      	cmp	r3, #3
    187c:	d001      	beq.n	1882 <_adc_sync_get_data_size+0x10>
    187e:	2002      	movs	r0, #2
}
    1880:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1882:	2001      	movs	r0, #1
    1884:	4770      	bx	lr

00001886 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1886:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1888:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    188c:	f000 0001 	and.w	r0, r0, #1
    1890:	4770      	bx	lr

00001892 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1892:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1894:	7d13      	ldrb	r3, [r2, #20]
    1896:	f043 0302 	orr.w	r3, r3, #2
    189a:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    189c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    18a2:	2b00      	cmp	r3, #0
    18a4:	d1fa      	bne.n	189c <_adc_sync_convert+0xa>
}
    18a6:	4770      	bx	lr

000018a8 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    18a8:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    18aa:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    18ae:	b280      	uxth	r0, r0
    18b0:	4770      	bx	lr
	...

000018b4 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18b4:	0943      	lsrs	r3, r0, #5
    18b6:	f000 001f 	and.w	r0, r0, #31
    18ba:	2201      	movs	r2, #1
    18bc:	fa02 f000 	lsl.w	r0, r2, r0
    18c0:	3340      	adds	r3, #64	; 0x40
    18c2:	4a02      	ldr	r2, [pc, #8]	; (18cc <_irq_set+0x18>)
    18c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	e000e100 	.word	0xe000e100

000018d0 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    18d0:	f44f 7316 	mov.w	r3, #600	; 0x258
    18d4:	fb03 f000 	mul.w	r0, r3, r0
    18d8:	3801      	subs	r0, #1
    18da:	4b03      	ldr	r3, [pc, #12]	; (18e8 <_get_cycles_for_us+0x18>)
    18dc:	fba3 3000 	umull	r3, r0, r3, r0
    18e0:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    18e2:	3001      	adds	r0, #1
    18e4:	4770      	bx	lr
    18e6:	bf00      	nop
    18e8:	cccccccd 	.word	0xcccccccd

000018ec <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    18ec:	f44f 7316 	mov.w	r3, #600	; 0x258
    18f0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    18f4:	2364      	movs	r3, #100	; 0x64
    18f6:	fb03 f000 	mul.w	r0, r3, r0
    18fa:	4770      	bx	lr

000018fc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    18fc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    18fe:	4a0d      	ldr	r2, [pc, #52]	; (1934 <_init_chip+0x38>)
    1900:	8813      	ldrh	r3, [r2, #0]
    1902:	b29b      	uxth	r3, r3
    1904:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1906:	4b0c      	ldr	r3, [pc, #48]	; (1938 <_init_chip+0x3c>)
    1908:	4798      	blx	r3
	_oscctrl_init_sources();
    190a:	4b0c      	ldr	r3, [pc, #48]	; (193c <_init_chip+0x40>)
    190c:	4798      	blx	r3
	_mclk_init();
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <_init_chip+0x44>)
    1910:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1912:	200c      	movs	r0, #12
    1914:	4c0b      	ldr	r4, [pc, #44]	; (1944 <_init_chip+0x48>)
    1916:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1918:	4b0b      	ldr	r3, [pc, #44]	; (1948 <_init_chip+0x4c>)
    191a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    191c:	f640 70f3 	movw	r0, #4083	; 0xff3
    1920:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1922:	4a0a      	ldr	r2, [pc, #40]	; (194c <_init_chip+0x50>)
    1924:	6913      	ldr	r3, [r2, #16]
    1926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    192a:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    192c:	4b08      	ldr	r3, [pc, #32]	; (1950 <_init_chip+0x54>)
    192e:	4798      	blx	r3
    1930:	bd10      	pop	{r4, pc}
    1932:	bf00      	nop
    1934:	41004000 	.word	0x41004000
    1938:	00001ded 	.word	0x00001ded
    193c:	00001e0d 	.word	0x00001e0d
    1940:	00001de1 	.word	0x00001de1
    1944:	00001d69 	.word	0x00001d69
    1948:	00001e11 	.word	0x00001e11
    194c:	40000800 	.word	0x40000800
    1950:	000019bd 	.word	0x000019bd

00001954 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1954:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1956:	4a17      	ldr	r2, [pc, #92]	; (19b4 <_dmac_handler+0x60>)
    1958:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    195a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    195e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1962:	0088      	lsls	r0, r1, #2
    1964:	4914      	ldr	r1, [pc, #80]	; (19b8 <_dmac_handler+0x64>)
    1966:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1968:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    196a:	f412 7f80 	tst.w	r2, #256	; 0x100
    196e:	d105      	bne.n	197c <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1970:	4a10      	ldr	r2, [pc, #64]	; (19b4 <_dmac_handler+0x60>)
    1972:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1974:	f412 7f00 	tst.w	r2, #512	; 0x200
    1978:	d10b      	bne.n	1992 <_dmac_handler+0x3e>
    197a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    197c:	011a      	lsls	r2, r3, #4
    197e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1982:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1986:	2101      	movs	r1, #1
    1988:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    198c:	6843      	ldr	r3, [r0, #4]
    198e:	4798      	blx	r3
    1990:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1992:	011a      	lsls	r2, r3, #4
    1994:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1998:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    199c:	2102      	movs	r1, #2
    199e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    19a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19a6:	fa03 f201 	lsl.w	r2, r3, r1
    19aa:	4b03      	ldr	r3, [pc, #12]	; (19b8 <_dmac_handler+0x64>)
    19ac:	589b      	ldr	r3, [r3, r2]
    19ae:	4798      	blx	r3
	}
}
    19b0:	e7e3      	b.n	197a <_dmac_handler+0x26>
    19b2:	bf00      	nop
    19b4:	4100a000 	.word	0x4100a000
    19b8:	20000090 	.word	0x20000090

000019bc <_dma_init>:
{
    19bc:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    19be:	4a3c      	ldr	r2, [pc, #240]	; (1ab0 <_dma_init+0xf4>)
    19c0:	8813      	ldrh	r3, [r2, #0]
    19c2:	b29b      	uxth	r3, r3
    19c4:	f023 0302 	bic.w	r3, r3, #2
    19c8:	b29b      	uxth	r3, r3
    19ca:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    19cc:	8853      	ldrh	r3, [r2, #2]
    19ce:	b29b      	uxth	r3, r3
    19d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    19d4:	b29b      	uxth	r3, r3
    19d6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    19d8:	8813      	ldrh	r3, [r2, #0]
    19da:	b29b      	uxth	r3, r3
    19dc:	f043 0301 	orr.w	r3, r3, #1
    19e0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    19e2:	4b33      	ldr	r3, [pc, #204]	; (1ab0 <_dma_init+0xf4>)
    19e4:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    19e6:	f013 0f01 	tst.w	r3, #1
    19ea:	d1fa      	bne.n	19e2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    19ec:	4a30      	ldr	r2, [pc, #192]	; (1ab0 <_dma_init+0xf4>)
    19ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    19f2:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    19f4:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    19f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    19fa:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    19fc:	2300      	movs	r3, #0
    19fe:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1a00:	492c      	ldr	r1, [pc, #176]	; (1ab4 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1a02:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1a04:	492c      	ldr	r1, [pc, #176]	; (1ab8 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1a06:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1a08:	e016      	b.n	1a38 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1a0a:	4a2c      	ldr	r2, [pc, #176]	; (1abc <_dma_init+0x100>)
    1a0c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1a10:	4c27      	ldr	r4, [pc, #156]	; (1ab0 <_dma_init+0xf4>)
    1a12:	1d19      	adds	r1, r3, #4
    1a14:	0109      	lsls	r1, r1, #4
    1a16:	1860      	adds	r0, r4, r1
    1a18:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1a1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1a1e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1a20:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1a22:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1a24:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1a26:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1a28:	4922      	ldr	r1, [pc, #136]	; (1ab4 <_dma_init+0xf8>)
    1a2a:	011a      	lsls	r2, r3, #4
    1a2c:	1888      	adds	r0, r1, r2
    1a2e:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1a30:	2200      	movs	r2, #0
    1a32:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1a34:	3301      	adds	r3, #1
    1a36:	b2db      	uxtb	r3, r3
    1a38:	2b1f      	cmp	r3, #31
    1a3a:	d9e6      	bls.n	1a0a <_dma_init+0x4e>
    1a3c:	2300      	movs	r3, #0
    1a3e:	e00a      	b.n	1a56 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1a40:	f103 011f 	add.w	r1, r3, #31
    1a44:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1a46:	2a00      	cmp	r2, #0
    1a48:	da10      	bge.n	1a6c <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1a4a:	2a00      	cmp	r2, #0
    1a4c:	da1c      	bge.n	1a88 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1a4e:	2a00      	cmp	r2, #0
    1a50:	da24      	bge.n	1a9c <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1a52:	3301      	adds	r3, #1
    1a54:	b2db      	uxtb	r3, r3
    1a56:	2b04      	cmp	r3, #4
    1a58:	d9f2      	bls.n	1a40 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1a5a:	4a15      	ldr	r2, [pc, #84]	; (1ab0 <_dma_init+0xf4>)
    1a5c:	8813      	ldrh	r3, [r2, #0]
    1a5e:	b29b      	uxth	r3, r3
    1a60:	f043 0302 	orr.w	r3, r3, #2
    1a64:	8013      	strh	r3, [r2, #0]
}
    1a66:	2000      	movs	r0, #0
    1a68:	bc30      	pop	{r4, r5}
    1a6a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a6c:	0950      	lsrs	r0, r2, #5
    1a6e:	f001 051f 	and.w	r5, r1, #31
    1a72:	2401      	movs	r4, #1
    1a74:	40ac      	lsls	r4, r5
    1a76:	3020      	adds	r0, #32
    1a78:	4d11      	ldr	r5, [pc, #68]	; (1ac0 <_dma_init+0x104>)
    1a7a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a82:	f3bf 8f6f 	isb	sy
    1a86:	e7e0      	b.n	1a4a <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a88:	0950      	lsrs	r0, r2, #5
    1a8a:	f001 051f 	and.w	r5, r1, #31
    1a8e:	2401      	movs	r4, #1
    1a90:	40ac      	lsls	r4, r5
    1a92:	3060      	adds	r0, #96	; 0x60
    1a94:	4d0a      	ldr	r5, [pc, #40]	; (1ac0 <_dma_init+0x104>)
    1a96:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1a9a:	e7d8      	b.n	1a4e <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a9c:	0952      	lsrs	r2, r2, #5
    1a9e:	f001 011f 	and.w	r1, r1, #31
    1aa2:	2001      	movs	r0, #1
    1aa4:	fa00 f101 	lsl.w	r1, r0, r1
    1aa8:	4805      	ldr	r0, [pc, #20]	; (1ac0 <_dma_init+0x104>)
    1aaa:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1aae:	e7d0      	b.n	1a52 <_dma_init+0x96>
    1ab0:	4100a000 	.word	0x4100a000
    1ab4:	20000760 	.word	0x20000760
    1ab8:	20000960 	.word	0x20000960
    1abc:	00004304 	.word	0x00004304
    1ac0:	e000e100 	.word	0xe000e100

00001ac4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1ac4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1ac8:	008a      	lsls	r2, r1, #2
    1aca:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <_dma_get_channel_resource+0x10>)
    1acc:	4413      	add	r3, r2
    1ace:	6003      	str	r3, [r0, #0]
}
    1ad0:	2000      	movs	r0, #0
    1ad2:	4770      	bx	lr
    1ad4:	20000090 	.word	0x20000090

00001ad8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1ad8:	b508      	push	{r3, lr}
	_dmac_handler();
    1ada:	4b01      	ldr	r3, [pc, #4]	; (1ae0 <DMAC_0_Handler+0x8>)
    1adc:	4798      	blx	r3
    1ade:	bd08      	pop	{r3, pc}
    1ae0:	00001955 	.word	0x00001955

00001ae4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1ae4:	b508      	push	{r3, lr}
	_dmac_handler();
    1ae6:	4b01      	ldr	r3, [pc, #4]	; (1aec <DMAC_1_Handler+0x8>)
    1ae8:	4798      	blx	r3
    1aea:	bd08      	pop	{r3, pc}
    1aec:	00001955 	.word	0x00001955

00001af0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1af0:	b508      	push	{r3, lr}
	_dmac_handler();
    1af2:	4b01      	ldr	r3, [pc, #4]	; (1af8 <DMAC_2_Handler+0x8>)
    1af4:	4798      	blx	r3
    1af6:	bd08      	pop	{r3, pc}
    1af8:	00001955 	.word	0x00001955

00001afc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1afc:	b508      	push	{r3, lr}
	_dmac_handler();
    1afe:	4b01      	ldr	r3, [pc, #4]	; (1b04 <DMAC_3_Handler+0x8>)
    1b00:	4798      	blx	r3
    1b02:	bd08      	pop	{r3, pc}
    1b04:	00001955 	.word	0x00001955

00001b08 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1b08:	b508      	push	{r3, lr}
	_dmac_handler();
    1b0a:	4b01      	ldr	r3, [pc, #4]	; (1b10 <DMAC_4_Handler+0x8>)
    1b0c:	4798      	blx	r3
    1b0e:	bd08      	pop	{r3, pc}
    1b10:	00001955 	.word	0x00001955

00001b14 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1b18:	4b2a      	ldr	r3, [pc, #168]	; (1bc4 <_ext_irq_handler+0xb0>)
    1b1a:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1b1c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1b1e:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1b20:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1b22:	4b29      	ldr	r3, [pc, #164]	; (1bc8 <_ext_irq_handler+0xb4>)
    1b24:	6818      	ldr	r0, [r3, #0]
    1b26:	22f4      	movs	r2, #244	; 0xf4
    1b28:	4928      	ldr	r1, [pc, #160]	; (1bcc <_ext_irq_handler+0xb8>)
    1b2a:	3000      	adds	r0, #0
    1b2c:	bf18      	it	ne
    1b2e:	2001      	movne	r0, #1
    1b30:	4b27      	ldr	r3, [pc, #156]	; (1bd0 <_ext_irq_handler+0xbc>)
    1b32:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1b34:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1b38:	e035      	b.n	1ba6 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1b3a:	4b26      	ldr	r3, [pc, #152]	; (1bd4 <_ext_irq_handler+0xc0>)
    1b3c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1b40:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1b42:	f1b5 3fff 	cmp.w	r5, #4294967295
    1b46:	d003      	beq.n	1b50 <_ext_irq_handler+0x3c>
				callback(pin);
    1b48:	4b1f      	ldr	r3, [pc, #124]	; (1bc8 <_ext_irq_handler+0xb4>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	4628      	mov	r0, r5
    1b4e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1b50:	2301      	movs	r3, #1
    1b52:	40a3      	lsls	r3, r4
    1b54:	9c01      	ldr	r4, [sp, #4]
    1b56:	ea24 0403 	bic.w	r4, r4, r3
    1b5a:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1b5c:	9b01      	ldr	r3, [sp, #4]
    1b5e:	fa93 f4a3 	rbit	r4, r3
    1b62:	fab4 f484 	clz	r4, r4
    1b66:	b90b      	cbnz	r3, 1b6c <_ext_irq_handler+0x58>
    1b68:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1b6c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1b70:	d014      	beq.n	1b9c <_ext_irq_handler+0x88>
    1b72:	2004      	movs	r0, #4
    1b74:	2100      	movs	r1, #0
    1b76:	e001      	b.n	1b7c <_ext_irq_handler+0x68>
					upper = middle - 1;
    1b78:	3b01      	subs	r3, #1
    1b7a:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1b7c:	4281      	cmp	r1, r0
    1b7e:	d8e0      	bhi.n	1b42 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1b80:	1843      	adds	r3, r0, r1
    1b82:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1b86:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1b88:	4a12      	ldr	r2, [pc, #72]	; (1bd4 <_ext_irq_handler+0xc0>)
    1b8a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1b8e:	42a2      	cmp	r2, r4
    1b90:	d0d3      	beq.n	1b3a <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1b92:	42a2      	cmp	r2, r4
    1b94:	daf0      	bge.n	1b78 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1b96:	3301      	adds	r3, #1
    1b98:	b2d9      	uxtb	r1, r3
    1b9a:	e7ef      	b.n	1b7c <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1b9c:	4b09      	ldr	r3, [pc, #36]	; (1bc4 <_ext_irq_handler+0xb0>)
    1b9e:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1ba0:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1ba2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1ba4:	615a      	str	r2, [r3, #20]
	while (flags) {
    1ba6:	9b01      	ldr	r3, [sp, #4]
    1ba8:	b14b      	cbz	r3, 1bbe <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1baa:	9b01      	ldr	r3, [sp, #4]
    1bac:	fa93 f4a3 	rbit	r4, r3
    1bb0:	fab4 f484 	clz	r4, r4
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d1d9      	bne.n	1b6c <_ext_irq_handler+0x58>
    1bb8:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1bbc:	e7d6      	b.n	1b6c <_ext_irq_handler+0x58>
	}
}
    1bbe:	b002      	add	sp, #8
    1bc0:	bd70      	pop	{r4, r5, r6, pc}
    1bc2:	bf00      	nop
    1bc4:	40002800 	.word	0x40002800
    1bc8:	20000210 	.word	0x20000210
    1bcc:	00004424 	.word	0x00004424
    1bd0:	000014f5 	.word	0x000014f5
    1bd4:	00004404 	.word	0x00004404

00001bd8 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1bd8:	4b3d      	ldr	r3, [pc, #244]	; (1cd0 <_ext_irq_init+0xf8>)
    1bda:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1bdc:	f013 0f01 	tst.w	r3, #1
    1be0:	d120      	bne.n	1c24 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1be2:	4b3b      	ldr	r3, [pc, #236]	; (1cd0 <_ext_irq_init+0xf8>)
    1be4:	685b      	ldr	r3, [r3, #4]
    1be6:	f013 0f03 	tst.w	r3, #3
    1bea:	d1fa      	bne.n	1be2 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1bec:	4b38      	ldr	r3, [pc, #224]	; (1cd0 <_ext_irq_init+0xf8>)
    1bee:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1bf0:	f013 0f02 	tst.w	r3, #2
    1bf4:	d00e      	beq.n	1c14 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1bf6:	4a36      	ldr	r2, [pc, #216]	; (1cd0 <_ext_irq_init+0xf8>)
    1bf8:	7813      	ldrb	r3, [r2, #0]
    1bfa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1bfe:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1c00:	4b33      	ldr	r3, [pc, #204]	; (1cd0 <_ext_irq_init+0xf8>)
    1c02:	685b      	ldr	r3, [r3, #4]
    1c04:	f013 0f03 	tst.w	r3, #3
    1c08:	d1fa      	bne.n	1c00 <_ext_irq_init+0x28>
    1c0a:	4b31      	ldr	r3, [pc, #196]	; (1cd0 <_ext_irq_init+0xf8>)
    1c0c:	685b      	ldr	r3, [r3, #4]
    1c0e:	f013 0f02 	tst.w	r3, #2
    1c12:	d1fa      	bne.n	1c0a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1c14:	2201      	movs	r2, #1
    1c16:	4b2e      	ldr	r3, [pc, #184]	; (1cd0 <_ext_irq_init+0xf8>)
    1c18:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1c1a:	4b2d      	ldr	r3, [pc, #180]	; (1cd0 <_ext_irq_init+0xf8>)
    1c1c:	685b      	ldr	r3, [r3, #4]
    1c1e:	f013 0f03 	tst.w	r3, #3
    1c22:	d1fa      	bne.n	1c1a <_ext_irq_init+0x42>
    1c24:	4b2a      	ldr	r3, [pc, #168]	; (1cd0 <_ext_irq_init+0xf8>)
    1c26:	685b      	ldr	r3, [r3, #4]
    1c28:	f013 0f01 	tst.w	r3, #1
    1c2c:	d1fa      	bne.n	1c24 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1c2e:	4a28      	ldr	r2, [pc, #160]	; (1cd0 <_ext_irq_init+0xf8>)
    1c30:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1c32:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1c36:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1c38:	4b25      	ldr	r3, [pc, #148]	; (1cd0 <_ext_irq_init+0xf8>)
    1c3a:	685b      	ldr	r3, [r3, #4]
    1c3c:	f013 0f03 	tst.w	r3, #3
    1c40:	d1fa      	bne.n	1c38 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1c42:	4b23      	ldr	r3, [pc, #140]	; (1cd0 <_ext_irq_init+0xf8>)
    1c44:	2200      	movs	r2, #0
    1c46:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1c48:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1c4a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1c4c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1c4e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1c50:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1c54:	61da      	str	r2, [r3, #28]
    1c56:	4a1f      	ldr	r2, [pc, #124]	; (1cd4 <_ext_irq_init+0xfc>)
    1c58:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1c5a:	781a      	ldrb	r2, [r3, #0]
    1c5c:	f042 0202 	orr.w	r2, r2, #2
    1c60:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1c62:	4b1b      	ldr	r3, [pc, #108]	; (1cd0 <_ext_irq_init+0xf8>)
    1c64:	685b      	ldr	r3, [r3, #4]
    1c66:	f013 0f03 	tst.w	r3, #3
    1c6a:	d1fa      	bne.n	1c62 <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c6c:	4b1a      	ldr	r3, [pc, #104]	; (1cd8 <_ext_irq_init+0x100>)
    1c6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c7a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c82:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c90:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c98:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ca2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ca6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1caa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cae:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1cb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cbc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cc4:	601a      	str	r2, [r3, #0]
	callback = cb;
    1cc6:	4b05      	ldr	r3, [pc, #20]	; (1cdc <_ext_irq_init+0x104>)
    1cc8:	6018      	str	r0, [r3, #0]
}
    1cca:	2000      	movs	r0, #0
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop
    1cd0:	40002800 	.word	0x40002800
    1cd4:	0a0000b0 	.word	0x0a0000b0
    1cd8:	e000e100 	.word	0xe000e100
    1cdc:	20000210 	.word	0x20000210

00001ce0 <_ext_irq_enable>:
{
    1ce0:	b410      	push	{r4}
	uint8_t i      = 0;
    1ce2:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1ce4:	2b03      	cmp	r3, #3
    1ce6:	d80d      	bhi.n	1d04 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1ce8:	461c      	mov	r4, r3
    1cea:	4a11      	ldr	r2, [pc, #68]	; (1d30 <_ext_irq_enable+0x50>)
    1cec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1cf0:	6852      	ldr	r2, [r2, #4]
    1cf2:	4282      	cmp	r2, r0
    1cf4:	d002      	beq.n	1cfc <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1cf6:	3301      	adds	r3, #1
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	e7f3      	b.n	1ce4 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1cfc:	4b0c      	ldr	r3, [pc, #48]	; (1d30 <_ext_irq_enable+0x50>)
    1cfe:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1d02:	e000      	b.n	1d06 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1d04:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1d06:	2aff      	cmp	r2, #255	; 0xff
    1d08:	d00f      	beq.n	1d2a <_ext_irq_enable+0x4a>
	if (enable) {
    1d0a:	b941      	cbnz	r1, 1d1e <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1d0c:	2301      	movs	r3, #1
    1d0e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1d10:	4a08      	ldr	r2, [pc, #32]	; (1d34 <_ext_irq_enable+0x54>)
    1d12:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d14:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1d16:	2000      	movs	r0, #0
}
    1d18:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d1c:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1d1e:	2301      	movs	r3, #1
    1d20:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1d22:	4a04      	ldr	r2, [pc, #16]	; (1d34 <_ext_irq_enable+0x54>)
    1d24:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1d26:	2000      	movs	r0, #0
    1d28:	e7f6      	b.n	1d18 <_ext_irq_enable+0x38>
		return -1;
    1d2a:	f04f 30ff 	mov.w	r0, #4294967295
    1d2e:	e7f3      	b.n	1d18 <_ext_irq_enable+0x38>
    1d30:	00004404 	.word	0x00004404
    1d34:	40002800 	.word	0x40002800

00001d38 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1d38:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1d3a:	4b01      	ldr	r3, [pc, #4]	; (1d40 <EIC_6_Handler+0x8>)
    1d3c:	4798      	blx	r3
    1d3e:	bd08      	pop	{r3, pc}
    1d40:	00001b15 	.word	0x00001b15

00001d44 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1d44:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1d46:	4b01      	ldr	r3, [pc, #4]	; (1d4c <EIC_7_Handler+0x8>)
    1d48:	4798      	blx	r3
    1d4a:	bd08      	pop	{r3, pc}
    1d4c:	00001b15 	.word	0x00001b15

00001d50 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1d50:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1d52:	4b01      	ldr	r3, [pc, #4]	; (1d58 <EIC_9_Handler+0x8>)
    1d54:	4798      	blx	r3
    1d56:	bd08      	pop	{r3, pc}
    1d58:	00001b15 	.word	0x00001b15

00001d5c <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1d5c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1d5e:	4b01      	ldr	r3, [pc, #4]	; (1d64 <EIC_14_Handler+0x8>)
    1d60:	4798      	blx	r3
    1d62:	bd08      	pop	{r3, pc}
    1d64:	00001b15 	.word	0x00001b15

00001d68 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1d68:	f010 0f01 	tst.w	r0, #1
    1d6c:	d008      	beq.n	1d80 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1d6e:	4a17      	ldr	r2, [pc, #92]	; (1dcc <_gclk_init_generators_by_fref+0x64>)
    1d70:	4b17      	ldr	r3, [pc, #92]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1d72:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d74:	4b16      	ldr	r3, [pc, #88]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1d76:	685a      	ldr	r2, [r3, #4]
    1d78:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1d7c:	421a      	tst	r2, r3
    1d7e:	d1f9      	bne.n	1d74 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1d80:	f010 0f02 	tst.w	r0, #2
    1d84:	d008      	beq.n	1d98 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1d86:	4a13      	ldr	r2, [pc, #76]	; (1dd4 <_gclk_init_generators_by_fref+0x6c>)
    1d88:	4b11      	ldr	r3, [pc, #68]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1d8a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d8c:	4b10      	ldr	r3, [pc, #64]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1d8e:	685a      	ldr	r2, [r3, #4]
    1d90:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1d94:	421a      	tst	r2, r3
    1d96:	d1f9      	bne.n	1d8c <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1d98:	f010 0f04 	tst.w	r0, #4
    1d9c:	d008      	beq.n	1db0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1d9e:	4a0e      	ldr	r2, [pc, #56]	; (1dd8 <_gclk_init_generators_by_fref+0x70>)
    1da0:	4b0b      	ldr	r3, [pc, #44]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1da2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1da4:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1da6:	685a      	ldr	r2, [r3, #4]
    1da8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1dac:	421a      	tst	r2, r3
    1dae:	d1f9      	bne.n	1da4 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1db0:	f010 0f08 	tst.w	r0, #8
    1db4:	d008      	beq.n	1dc8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1db6:	4a09      	ldr	r2, [pc, #36]	; (1ddc <_gclk_init_generators_by_fref+0x74>)
    1db8:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1dba:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1dbc:	4b04      	ldr	r3, [pc, #16]	; (1dd0 <_gclk_init_generators_by_fref+0x68>)
    1dbe:	685a      	ldr	r2, [r3, #4]
    1dc0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1dc4:	421a      	tst	r2, r3
    1dc6:	d1f9      	bne.n	1dbc <_gclk_init_generators_by_fref+0x54>
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	00020107 	.word	0x00020107
    1dd0:	40001c00 	.word	0x40001c00
    1dd4:	00020b07 	.word	0x00020b07
    1dd8:	00010105 	.word	0x00010105
    1ddc:	00100106 	.word	0x00100106

00001de0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1de0:	2201      	movs	r2, #1
    1de2:	4b01      	ldr	r3, [pc, #4]	; (1de8 <_mclk_init+0x8>)
    1de4:	715a      	strb	r2, [r3, #5]
    1de6:	4770      	bx	lr
    1de8:	40000800 	.word	0x40000800

00001dec <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1dec:	4b06      	ldr	r3, [pc, #24]	; (1e08 <_osc32kctrl_init_sources+0x1c>)
    1dee:	f242 228e 	movw	r2, #8846	; 0x228e
    1df2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1df4:	2200      	movs	r2, #0
    1df6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1df8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1dfa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1dfc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1e00:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1e02:	2201      	movs	r2, #1
    1e04:	741a      	strb	r2, [r3, #16]
    1e06:	4770      	bx	lr
    1e08:	40001400 	.word	0x40001400

00001e0c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1e0c:	4770      	bx	lr
	...

00001e10 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1e10:	4a49      	ldr	r2, [pc, #292]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1e12:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1e14:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1e18:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1e1c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e1e:	4b46      	ldr	r3, [pc, #280]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1e20:	685a      	ldr	r2, [r3, #4]
    1e22:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e26:	421a      	tst	r2, r3
    1e28:	d1f9      	bne.n	1e1e <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1e2a:	4b43      	ldr	r3, [pc, #268]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1e2c:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1e2e:	f013 0f04 	tst.w	r3, #4
    1e32:	d1fa      	bne.n	1e2a <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1e34:	4b41      	ldr	r3, [pc, #260]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e36:	2200      	movs	r2, #0
    1e38:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1e3a:	2142      	movs	r1, #66	; 0x42
    1e3c:	4a3e      	ldr	r2, [pc, #248]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1e3e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1e42:	4a3f      	ldr	r2, [pc, #252]	; (1f40 <_oscctrl_init_referenced_generators+0x130>)
    1e44:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1e46:	4b3d      	ldr	r3, [pc, #244]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1e4c:	f013 0f10 	tst.w	r3, #16
    1e50:	d1f9      	bne.n	1e46 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1e52:	2200      	movs	r2, #0
    1e54:	4b39      	ldr	r3, [pc, #228]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e56:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1e5a:	4b38      	ldr	r3, [pc, #224]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1e60:	f013 0f04 	tst.w	r3, #4
    1e64:	d1f9      	bne.n	1e5a <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1e66:	2202      	movs	r2, #2
    1e68:	4b34      	ldr	r3, [pc, #208]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e6a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1e6c:	4b33      	ldr	r3, [pc, #204]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1e72:	f013 0f02 	tst.w	r3, #2
    1e76:	d1f9      	bne.n	1e6c <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1e78:	4b30      	ldr	r3, [pc, #192]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1e7c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1e7e:	4b2f      	ldr	r3, [pc, #188]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1e84:	f013 0f08 	tst.w	r3, #8
    1e88:	d1f9      	bne.n	1e7e <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1e8a:	2281      	movs	r2, #129	; 0x81
    1e8c:	4b2b      	ldr	r3, [pc, #172]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e8e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1e92:	4b2a      	ldr	r3, [pc, #168]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1e94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1e98:	f013 0f04 	tst.w	r3, #4
    1e9c:	d1f9      	bne.n	1e92 <_oscctrl_init_referenced_generators+0x82>
    1e9e:	2243      	movs	r2, #67	; 0x43
    1ea0:	4b25      	ldr	r3, [pc, #148]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1ea6:	2227      	movs	r2, #39	; 0x27
    1ea8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1eac:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1eae:	4b23      	ldr	r3, [pc, #140]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1eb2:	f013 0f06 	tst.w	r3, #6
    1eb6:	d1fa      	bne.n	1eae <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1eb8:	4b20      	ldr	r3, [pc, #128]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1eba:	2200      	movs	r2, #0
    1ebc:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1ebe:	2202      	movs	r2, #2
    1ec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1ec4:	4b1d      	ldr	r3, [pc, #116]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1ec8:	f013 0f02 	tst.w	r3, #2
    1ecc:	d1fa      	bne.n	1ec4 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1ece:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1ed4:	f013 0f01 	tst.w	r3, #1
    1ed8:	d027      	beq.n	1f2a <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1eda:	4b18      	ldr	r3, [pc, #96]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1edc:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    1ede:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1ee2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1ee6:	d1f8      	bne.n	1eda <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1ee8:	4b14      	ldr	r3, [pc, #80]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1eec:	f013 0f01 	tst.w	r3, #1
    1ef0:	d104      	bne.n	1efc <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1ef2:	4b12      	ldr	r3, [pc, #72]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ef6:	f013 0f02 	tst.w	r3, #2
    1efa:	d0f5      	beq.n	1ee8 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1efc:	4b0e      	ldr	r3, [pc, #56]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1efe:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1f00:	2b00      	cmp	r3, #0
    1f02:	d1fb      	bne.n	1efc <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1f04:	4a0c      	ldr	r2, [pc, #48]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1f06:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1f08:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1f0c:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1f10:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f12:	4b09      	ldr	r3, [pc, #36]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1f14:	685a      	ldr	r2, [r3, #4]
    1f16:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f1a:	421a      	tst	r2, r3
    1f1c:	d1f9      	bne.n	1f12 <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1f1e:	4b06      	ldr	r3, [pc, #24]	; (1f38 <_oscctrl_init_referenced_generators+0x128>)
    1f20:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1f22:	f013 0f04 	tst.w	r3, #4
    1f26:	d1fa      	bne.n	1f1e <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    1f28:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1f2a:	4b04      	ldr	r3, [pc, #16]	; (1f3c <_oscctrl_init_referenced_generators+0x12c>)
    1f2c:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1f2e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f32:	d0fa      	beq.n	1f2a <_oscctrl_init_referenced_generators+0x11a>
    1f34:	e7d8      	b.n	1ee8 <_oscctrl_init_referenced_generators+0xd8>
    1f36:	bf00      	nop
    1f38:	40001c00 	.word	0x40001c00
    1f3c:	40001000 	.word	0x40001000
    1f40:	7c7f05b9 	.word	0x7c7f05b9

00001f44 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1f44:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1f46:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1f48:	6803      	ldr	r3, [r0, #0]
    1f4a:	2100      	movs	r1, #0
    1f4c:	4798      	blx	r3
    1f4e:	bd08      	pop	{r3, pc}

00001f50 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1f50:	b538      	push	{r3, r4, r5, lr}
    1f52:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1f54:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1f56:	4b07      	ldr	r3, [pc, #28]	; (1f74 <_camera_async_init+0x24>)
    1f58:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    1f5a:	4b07      	ldr	r3, [pc, #28]	; (1f78 <_camera_async_init+0x28>)
    1f5c:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    1f5e:	4d07      	ldr	r5, [pc, #28]	; (1f7c <_camera_async_init+0x2c>)
    1f60:	2100      	movs	r1, #0
    1f62:	4628      	mov	r0, r5
    1f64:	4b06      	ldr	r3, [pc, #24]	; (1f80 <_camera_async_init+0x30>)
    1f66:	4798      	blx	r3
	resource->back                 = device;
    1f68:	682b      	ldr	r3, [r5, #0]
    1f6a:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    1f6c:	4a05      	ldr	r2, [pc, #20]	; (1f84 <_camera_async_init+0x34>)
    1f6e:	601a      	str	r2, [r3, #0]
    1f70:	bd38      	pop	{r3, r4, r5, pc}
    1f72:	bf00      	nop
    1f74:	c0000020 	.word	0xc0000020
    1f78:	20000214 	.word	0x20000214
    1f7c:	20000b60 	.word	0x20000b60
    1f80:	00001ac5 	.word	0x00001ac5
    1f84:	00001f45 	.word	0x00001f45

00001f88 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    1f88:	b500      	push	{lr}
    1f8a:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    1f8c:	4b08      	ldr	r3, [pc, #32]	; (1fb0 <PCC_Handler+0x28>)
    1f8e:	6818      	ldr	r0, [r3, #0]
    1f90:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1f92:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1f94:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    1f96:	2201      	movs	r2, #1
    1f98:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    1f9a:	9b01      	ldr	r3, [sp, #4]
    1f9c:	f013 0f01 	tst.w	r3, #1
    1fa0:	d003      	beq.n	1faa <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1fa2:	6803      	ldr	r3, [r0, #0]
    1fa4:	b10b      	cbz	r3, 1faa <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1fa6:	2100      	movs	r1, #0
    1fa8:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    1faa:	b003      	add	sp, #12
    1fac:	f85d fb04 	ldr.w	pc, [sp], #4
    1fb0:	20000214 	.word	0x20000214

00001fb4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1fb4:	b500      	push	{lr}
    1fb6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1fb8:	4b0d      	ldr	r3, [pc, #52]	; (1ff0 <RAMECC_Handler+0x3c>)
    1fba:	789b      	ldrb	r3, [r3, #2]
    1fbc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1fbe:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1fc0:	9b01      	ldr	r3, [sp, #4]
    1fc2:	f013 0f02 	tst.w	r3, #2
    1fc6:	d006      	beq.n	1fd6 <RAMECC_Handler+0x22>
    1fc8:	4b0a      	ldr	r3, [pc, #40]	; (1ff4 <RAMECC_Handler+0x40>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	b11b      	cbz	r3, 1fd6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1fce:	4a08      	ldr	r2, [pc, #32]	; (1ff0 <RAMECC_Handler+0x3c>)
    1fd0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1fd2:	4798      	blx	r3
    1fd4:	e009      	b.n	1fea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1fd6:	9b01      	ldr	r3, [sp, #4]
    1fd8:	f013 0f01 	tst.w	r3, #1
    1fdc:	d005      	beq.n	1fea <RAMECC_Handler+0x36>
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <RAMECC_Handler+0x40>)
    1fe0:	685b      	ldr	r3, [r3, #4]
    1fe2:	b113      	cbz	r3, 1fea <RAMECC_Handler+0x36>
    1fe4:	4a02      	ldr	r2, [pc, #8]	; (1ff0 <RAMECC_Handler+0x3c>)
    1fe6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1fe8:	4798      	blx	r3
	} else {
		return;
	}
}
    1fea:	b003      	add	sp, #12
    1fec:	f85d fb04 	ldr.w	pc, [sp], #4
    1ff0:	41020000 	.word	0x41020000
    1ff4:	20000b64 	.word	0x20000b64

00001ff8 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    1ff8:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    1ffa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    1ffc:	f013 0f04 	tst.w	r3, #4
    2000:	d009      	beq.n	2016 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    2002:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2004:	f014 0f03 	tst.w	r4, #3
    2008:	d1fb      	bne.n	2002 <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    200a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    200c:	b2a4      	uxth	r4, r4
    200e:	f024 0404 	bic.w	r4, r4, #4
    2012:	b2a4      	uxth	r4, r4
    2014:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2016:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2018:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    201c:	2c00      	cmp	r4, #0
    201e:	d135      	bne.n	208c <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    2020:	4b22      	ldr	r3, [pc, #136]	; (20ac <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    2022:	2a00      	cmp	r2, #0
    2024:	d134      	bne.n	2090 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2026:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2028:	b292      	uxth	r2, r2
    202a:	f022 0220 	bic.w	r2, r2, #32
    202e:	b292      	uxth	r2, r2
    2030:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    2032:	fbb3 f1f1 	udiv	r1, r3, r1
    2036:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2038:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    203c:	f013 0f04 	tst.w	r3, #4
    2040:	d001      	beq.n	2046 <_mci_set_speed+0x4e>
    2042:	b901      	cbnz	r1, 2046 <_mci_set_speed+0x4e>
		div = 1;
    2044:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    2046:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    2048:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    204a:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    204c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2050:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    2052:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    2054:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    2058:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    205a:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    205c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2060:	0189      	lsls	r1, r1, #6
    2062:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    2066:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    2068:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    206a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    206c:	b29b      	uxth	r3, r3
    206e:	f043 0301 	orr.w	r3, r3, #1
    2072:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2074:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    2076:	f013 0f02 	tst.w	r3, #2
    207a:	d0fb      	beq.n	2074 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    207c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    207e:	b29b      	uxth	r3, r3
    2080:	f043 0304 	orr.w	r3, r3, #4
    2084:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    2086:	f85d 4b04 	ldr.w	r4, [sp], #4
    208a:	4770      	bx	lr
		clkbase = clkbase / 2;
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <_mci_set_speed+0xb8>)
    208e:	e7c8      	b.n	2022 <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    2090:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2092:	b292      	uxth	r2, r2
    2094:	f042 0220 	orr.w	r2, r2, #32
    2098:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    209a:	fb04 3303 	mla	r3, r4, r3, r3
    209e:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    20a2:	2900      	cmp	r1, #0
    20a4:	d0c8      	beq.n	2038 <_mci_set_speed+0x40>
			div = div - 1;
    20a6:	3901      	subs	r1, #1
    20a8:	e7c6      	b.n	2038 <_mci_set_speed+0x40>
    20aa:	bf00      	nop
    20ac:	0393a000 	.word	0x0393a000
    20b0:	01c9d000 	.word	0x01c9d000

000020b4 <_mci_reset>:
{
    20b4:	b510      	push	{r4, lr}
	ASSERT(hw);
    20b6:	4604      	mov	r4, r0
    20b8:	2234      	movs	r2, #52	; 0x34
    20ba:	4906      	ldr	r1, [pc, #24]	; (20d4 <_mci_reset+0x20>)
    20bc:	3000      	adds	r0, #0
    20be:	bf18      	it	ne
    20c0:	2001      	movne	r0, #1
    20c2:	4b05      	ldr	r3, [pc, #20]	; (20d8 <_mci_reset+0x24>)
    20c4:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    20c6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    20ca:	f043 0302 	orr.w	r3, r3, #2
    20ce:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    20d2:	bd10      	pop	{r4, pc}
    20d4:	0000443c 	.word	0x0000443c
    20d8:	000014f5 	.word	0x000014f5

000020dc <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    20dc:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    20de:	4604      	mov	r4, r0
    20e0:	227f      	movs	r2, #127	; 0x7f
    20e2:	490b      	ldr	r1, [pc, #44]	; (2110 <_mci_wait_busy+0x34>)
    20e4:	3000      	adds	r0, #0
    20e6:	bf18      	it	ne
    20e8:	2001      	movne	r0, #1
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <_mci_wait_busy+0x38>)
    20ec:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    20ee:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    20f2:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    20f4:	1e59      	subs	r1, r3, #1
    20f6:	b12b      	cbz	r3, 2104 <_mci_wait_busy+0x28>
    20f8:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    20fa:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    20fe:	d0f8      	beq.n	20f2 <_mci_wait_busy+0x16>
	return true;
    2100:	2001      	movs	r0, #1
}
    2102:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    2104:	4620      	mov	r0, r4
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <_mci_wait_busy+0x3c>)
    2108:	4798      	blx	r3
			return false;
    210a:	2000      	movs	r0, #0
    210c:	bd10      	pop	{r4, pc}
    210e:	bf00      	nop
    2110:	0000443c 	.word	0x0000443c
    2114:	000014f5 	.word	0x000014f5
    2118:	000020b5 	.word	0x000020b5

0000211c <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	460f      	mov	r7, r1
    2120:	4615      	mov	r5, r2
    2122:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    2124:	4604      	mov	r4, r0
    2126:	2299      	movs	r2, #153	; 0x99
    2128:	4934      	ldr	r1, [pc, #208]	; (21fc <_mci_send_cmd_execute+0xe0>)
    212a:	3000      	adds	r0, #0
    212c:	bf18      	it	ne
    212e:	2001      	movne	r0, #1
    2130:	4b33      	ldr	r3, [pc, #204]	; (2200 <_mci_send_cmd_execute+0xe4>)
    2132:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2134:	0229      	lsls	r1, r5, #8
    2136:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    213a:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    213c:	f415 7f80 	tst.w	r5, #256	; 0x100
    2140:	d004      	beq.n	214c <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    2142:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2146:	d00e      	beq.n	2166 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2148:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    214c:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    2150:	d012      	beq.n	2178 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    2152:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    2156:	f043 0310 	orr.w	r3, r3, #16
    215a:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    215e:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2160:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    2162:	81e3      	strh	r3, [r4, #14]
    2164:	e017      	b.n	2196 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    2166:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    216a:	d002      	beq.n	2172 <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    216c:	f041 0103 	orr.w	r1, r1, #3
    2170:	e7ec      	b.n	214c <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2172:	f041 0102 	orr.w	r1, r1, #2
    2176:	e7e9      	b.n	214c <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    2178:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    217c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2180:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    2184:	e7eb      	b.n	215e <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2186:	f240 227f 	movw	r2, #639	; 0x27f
    218a:	4213      	tst	r3, r2
    218c:	d118      	bne.n	21c0 <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    218e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    2190:	f013 0f01 	tst.w	r3, #1
    2194:	d120      	bne.n	21d8 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2196:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2198:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    219a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    219e:	d0f2      	beq.n	2186 <_mci_send_cmd_execute+0x6a>
			if (sr
    21a0:	f240 225d 	movw	r2, #605	; 0x25d
    21a4:	4213      	tst	r3, r2
    21a6:	d0f2      	beq.n	218e <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    21a8:	4620      	mov	r0, r4
    21aa:	4b16      	ldr	r3, [pc, #88]	; (2204 <_mci_send_cmd_execute+0xe8>)
    21ac:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    21ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    21b0:	b29b      	uxth	r3, r3
    21b2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    21b6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    21ba:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    21bc:	2000      	movs	r0, #0
    21be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    21c0:	4620      	mov	r0, r4
    21c2:	4b10      	ldr	r3, [pc, #64]	; (2204 <_mci_send_cmd_execute+0xe8>)
    21c4:	4798      	blx	r3
    21c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    21c8:	b29b      	uxth	r3, r3
    21ca:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    21ce:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    21d2:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    21d4:	2000      	movs	r0, #0
    21d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    21d8:	f011 0f20 	tst.w	r1, #32
    21dc:	d104      	bne.n	21e8 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    21de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    21e0:	b29b      	uxth	r3, r3
    21e2:	f043 0301 	orr.w	r3, r3, #1
    21e6:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    21e8:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    21ec:	d101      	bne.n	21f2 <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    21ee:	2001      	movs	r0, #1
}
    21f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    21f2:	4620      	mov	r0, r4
    21f4:	4b04      	ldr	r3, [pc, #16]	; (2208 <_mci_send_cmd_execute+0xec>)
    21f6:	4798      	blx	r3
    21f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21fa:	bf00      	nop
    21fc:	0000443c 	.word	0x0000443c
    2200:	000014f5 	.word	0x000014f5
    2204:	000020b5 	.word	0x000020b5
    2208:	000020dd 	.word	0x000020dd

0000220c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    220c:	b538      	push	{r3, r4, r5, lr}
    220e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2210:	4605      	mov	r5, r0
    2212:	b348      	cbz	r0, 2268 <_mci_sync_init+0x5c>
    2214:	b331      	cbz	r1, 2264 <_mci_sync_init+0x58>
    2216:	2001      	movs	r0, #1
    2218:	22d8      	movs	r2, #216	; 0xd8
    221a:	4914      	ldr	r1, [pc, #80]	; (226c <_mci_sync_init+0x60>)
    221c:	4b14      	ldr	r3, [pc, #80]	; (2270 <_mci_sync_init+0x64>)
    221e:	4798      	blx	r3

	mci_dev->hw = hw;
    2220:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2222:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2226:	f043 0301 	orr.w	r3, r3, #1
    222a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    222e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2232:	f013 0f01 	tst.w	r3, #1
    2236:	d1fa      	bne.n	222e <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2238:	230e      	movs	r3, #14
    223a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    223e:	230f      	movs	r3, #15
    2240:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2244:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2246:	b29b      	uxth	r3, r3
    2248:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    224c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2250:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    2252:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2254:	b29b      	uxth	r3, r3
    2256:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    225a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    225e:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2260:	2000      	movs	r0, #0
    2262:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    2264:	2000      	movs	r0, #0
    2266:	e7d7      	b.n	2218 <_mci_sync_init+0xc>
    2268:	2000      	movs	r0, #0
    226a:	e7d5      	b.n	2218 <_mci_sync_init+0xc>
    226c:	0000443c 	.word	0x0000443c
    2270:	000014f5 	.word	0x000014f5

00002274 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2276:	4616      	mov	r6, r2
    2278:	461d      	mov	r5, r3
    227a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    227e:	4604      	mov	r4, r0
    2280:	b1e0      	cbz	r0, 22bc <_mci_sync_select_device+0x48>
    2282:	6803      	ldr	r3, [r0, #0]
    2284:	b1c3      	cbz	r3, 22b8 <_mci_sync_select_device+0x44>
    2286:	2001      	movs	r0, #1
    2288:	f44f 7280 	mov.w	r2, #256	; 0x100
    228c:	491b      	ldr	r1, [pc, #108]	; (22fc <_mci_sync_select_device+0x88>)
    228e:	4b1c      	ldr	r3, [pc, #112]	; (2300 <_mci_sync_select_device+0x8c>)
    2290:	4798      	blx	r3
	hw = mci_dev->hw;
    2292:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    2294:	b1a7      	cbz	r7, 22c0 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2296:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    229a:	f043 0304 	orr.w	r3, r3, #4
    229e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    22a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    22a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22a8:	d011      	beq.n	22ce <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    22aa:	2d01      	cmp	r5, #1
    22ac:	d015      	beq.n	22da <_mci_sync_select_device+0x66>
    22ae:	2d04      	cmp	r5, #4
    22b0:	d01b      	beq.n	22ea <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    22b2:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    22b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    22b8:	2000      	movs	r0, #0
    22ba:	e7e5      	b.n	2288 <_mci_sync_select_device+0x14>
    22bc:	2000      	movs	r0, #0
    22be:	e7e3      	b.n	2288 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    22c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    22c4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    22c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    22cc:	e7e9      	b.n	22a2 <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    22ce:	2200      	movs	r2, #0
    22d0:	4631      	mov	r1, r6
    22d2:	4620      	mov	r0, r4
    22d4:	4b0b      	ldr	r3, [pc, #44]	; (2304 <_mci_sync_select_device+0x90>)
    22d6:	4798      	blx	r3
    22d8:	e7e7      	b.n	22aa <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    22da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    22de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    22e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    22e6:	2000      	movs	r0, #0
    22e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    22ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    22ee:	f043 0302 	orr.w	r3, r3, #2
    22f2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    22f6:	2000      	movs	r0, #0
    22f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fa:	bf00      	nop
    22fc:	0000443c 	.word	0x0000443c
    2300:	000014f5 	.word	0x000014f5
    2304:	00001ff9 	.word	0x00001ff9

00002308 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2308:	2000      	movs	r0, #0
    230a:	4770      	bx	lr

0000230c <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    230c:	b570      	push	{r4, r5, r6, lr}
    230e:	460d      	mov	r5, r1
    2310:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2312:	4604      	mov	r4, r0
    2314:	b180      	cbz	r0, 2338 <_mci_sync_send_cmd+0x2c>
    2316:	6803      	ldr	r3, [r0, #0]
    2318:	b163      	cbz	r3, 2334 <_mci_sync_send_cmd+0x28>
    231a:	2001      	movs	r0, #1
    231c:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2320:	490d      	ldr	r1, [pc, #52]	; (2358 <_mci_sync_send_cmd+0x4c>)
    2322:	4b0e      	ldr	r3, [pc, #56]	; (235c <_mci_sync_send_cmd+0x50>)
    2324:	4798      	blx	r3
	hw = mci_dev->hw;
    2326:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2328:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    232a:	f013 0f01 	tst.w	r3, #1
    232e:	d005      	beq.n	233c <_mci_sync_send_cmd+0x30>
		return false;
    2330:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    2332:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2334:	2000      	movs	r0, #0
    2336:	e7f1      	b.n	231c <_mci_sync_send_cmd+0x10>
    2338:	2000      	movs	r0, #0
    233a:	e7ef      	b.n	231c <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    233c:	8983      	ldrh	r3, [r0, #12]
    233e:	b29b      	uxth	r3, r3
    2340:	f023 0301 	bic.w	r3, r3, #1
    2344:	b29b      	uxth	r3, r3
    2346:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2348:	2100      	movs	r1, #0
    234a:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    234c:	4633      	mov	r3, r6
    234e:	462a      	mov	r2, r5
    2350:	4c03      	ldr	r4, [pc, #12]	; (2360 <_mci_sync_send_cmd+0x54>)
    2352:	47a0      	blx	r4
    2354:	bd70      	pop	{r4, r5, r6, pc}
    2356:	bf00      	nop
    2358:	0000443c 	.word	0x0000443c
    235c:	000014f5 	.word	0x000014f5
    2360:	0000211d 	.word	0x0000211d

00002364 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    2364:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2366:	4604      	mov	r4, r0
    2368:	b160      	cbz	r0, 2384 <_mci_sync_get_response+0x20>
    236a:	6803      	ldr	r3, [r0, #0]
    236c:	b143      	cbz	r3, 2380 <_mci_sync_get_response+0x1c>
    236e:	2001      	movs	r0, #1
    2370:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    2374:	4904      	ldr	r1, [pc, #16]	; (2388 <_mci_sync_get_response+0x24>)
    2376:	4b05      	ldr	r3, [pc, #20]	; (238c <_mci_sync_get_response+0x28>)
    2378:	4798      	blx	r3
	hw = mci_dev->hw;
    237a:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    237c:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    237e:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2380:	2000      	movs	r0, #0
    2382:	e7f5      	b.n	2370 <_mci_sync_get_response+0xc>
    2384:	2000      	movs	r0, #0
    2386:	e7f3      	b.n	2370 <_mci_sync_get_response+0xc>
    2388:	0000443c 	.word	0x0000443c
    238c:	000014f5 	.word	0x000014f5

00002390 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    2390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2394:	460d      	mov	r5, r1
    2396:	4690      	mov	r8, r2
    2398:	461f      	mov	r7, r3
    239a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    239e:	4604      	mov	r4, r0
    23a0:	2800      	cmp	r0, #0
    23a2:	d031      	beq.n	2408 <_mci_sync_adtc_start+0x78>
    23a4:	6803      	ldr	r3, [r0, #0]
    23a6:	b36b      	cbz	r3, 2404 <_mci_sync_adtc_start+0x74>
    23a8:	2001      	movs	r0, #1
    23aa:	f240 1293 	movw	r2, #403	; 0x193
    23ae:	4921      	ldr	r1, [pc, #132]	; (2434 <_mci_sync_adtc_start+0xa4>)
    23b0:	4b21      	ldr	r3, [pc, #132]	; (2438 <_mci_sync_adtc_start+0xa8>)
    23b2:	4798      	blx	r3
	hw = mci_dev->hw;
    23b4:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    23b6:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    23b8:	f013 0f01 	tst.w	r3, #1
    23bc:	d131      	bne.n	2422 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    23be:	6a43      	ldr	r3, [r0, #36]	; 0x24
    23c0:	f013 0f02 	tst.w	r3, #2
    23c4:	d130      	bne.n	2428 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    23c6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    23ca:	d01f      	beq.n	240c <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    23cc:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    23ce:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    23d2:	d104      	bne.n	23de <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    23d4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    23d8:	d01a      	beq.n	2410 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    23da:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    23de:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    23e0:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    23e2:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    23e6:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    23e8:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    23ea:	2200      	movs	r2, #0
    23ec:	2300      	movs	r3, #0
    23ee:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    23f2:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    23f4:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    23f6:	4643      	mov	r3, r8
    23f8:	462a      	mov	r2, r5
    23fa:	2120      	movs	r1, #32
    23fc:	4c0f      	ldr	r4, [pc, #60]	; (243c <_mci_sync_adtc_start+0xac>)
    23fe:	47a0      	blx	r4
    2400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2404:	2000      	movs	r0, #0
    2406:	e7d0      	b.n	23aa <_mci_sync_adtc_start+0x1a>
    2408:	2000      	movs	r0, #0
    240a:	e7ce      	b.n	23aa <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    240c:	2310      	movs	r3, #16
    240e:	e7de      	b.n	23ce <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2410:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2414:	d1e3      	bne.n	23de <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    2416:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    241a:	d008      	beq.n	242e <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    241c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2420:	e7dd      	b.n	23de <_mci_sync_adtc_start+0x4e>
		return false;
    2422:	2000      	movs	r0, #0
    2424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2428:	2000      	movs	r0, #0
    242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    242e:	2000      	movs	r0, #0
}
    2430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2434:	0000443c 	.word	0x0000443c
    2438:	000014f5 	.word	0x000014f5
    243c:	0000211d 	.word	0x0000211d

00002440 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2442:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2444:	4605      	mov	r5, r0
    2446:	2800      	cmp	r0, #0
    2448:	d03f      	beq.n	24ca <_mci_sync_write_word+0x8a>
    244a:	6803      	ldr	r3, [r0, #0]
    244c:	2b00      	cmp	r3, #0
    244e:	d03a      	beq.n	24c6 <_mci_sync_write_word+0x86>
    2450:	2001      	movs	r0, #1
    2452:	f240 220f 	movw	r2, #527	; 0x20f
    2456:	4924      	ldr	r1, [pc, #144]	; (24e8 <_mci_sync_write_word+0xa8>)
    2458:	4b24      	ldr	r3, [pc, #144]	; (24ec <_mci_sync_write_word+0xac>)
    245a:	4798      	blx	r3
	hw = mci_dev->hw;
    245c:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    245e:	8a2a      	ldrh	r2, [r5, #16]
    2460:	2300      	movs	r3, #0
    2462:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2466:	4e22      	ldr	r6, [pc, #136]	; (24f0 <_mci_sync_write_word+0xb0>)
    2468:	47b0      	blx	r6
    246a:	4313      	orrs	r3, r2
    246c:	d10c      	bne.n	2488 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    246e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2470:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2474:	bb5b      	cbnz	r3, 24ce <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2476:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    2478:	f013 0f10 	tst.w	r3, #16
    247c:	d0f7      	beq.n	246e <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    247e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2480:	b29b      	uxth	r3, r3
    2482:	f043 0310 	orr.w	r3, r3, #16
    2486:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    2488:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    248a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    248e:	3204      	adds	r2, #4
    2490:	f143 0300 	adc.w	r3, r3, #0
    2494:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2498:	8a28      	ldrh	r0, [r5, #16]
    249a:	8a6e      	ldrh	r6, [r5, #18]
    249c:	fba0 0106 	umull	r0, r1, r0, r6
    24a0:	428b      	cmp	r3, r1
    24a2:	bf08      	it	eq
    24a4:	4282      	cmpeq	r2, r0
    24a6:	d31c      	bcc.n	24e2 <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    24a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    24aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
    24ae:	b99b      	cbnz	r3, 24d8 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    24b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    24b2:	f013 0f02 	tst.w	r3, #2
    24b6:	d0f7      	beq.n	24a8 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    24b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24ba:	b29b      	uxth	r3, r3
    24bc:	f043 0302 	orr.w	r3, r3, #2
    24c0:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    24c2:	2001      	movs	r0, #1
    24c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    24c6:	2000      	movs	r0, #0
    24c8:	e7c3      	b.n	2452 <_mci_sync_write_word+0x12>
    24ca:	2000      	movs	r0, #0
    24cc:	e7c1      	b.n	2452 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    24ce:	4620      	mov	r0, r4
    24d0:	4b08      	ldr	r3, [pc, #32]	; (24f4 <_mci_sync_write_word+0xb4>)
    24d2:	4798      	blx	r3
				return false;
    24d4:	2000      	movs	r0, #0
    24d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    24d8:	4620      	mov	r0, r4
    24da:	4b06      	ldr	r3, [pc, #24]	; (24f4 <_mci_sync_write_word+0xb4>)
    24dc:	4798      	blx	r3
			return false;
    24de:	2000      	movs	r0, #0
    24e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    24e2:	2001      	movs	r0, #1
}
    24e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24e6:	bf00      	nop
    24e8:	0000443c 	.word	0x0000443c
    24ec:	000014f5 	.word	0x000014f5
    24f0:	00003e91 	.word	0x00003e91
    24f4:	000020b5 	.word	0x000020b5

000024f8 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    24f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24fc:	460e      	mov	r6, r1
    24fe:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2500:	4607      	mov	r7, r0
    2502:	b1f0      	cbz	r0, 2542 <_mci_sync_start_write_blocks+0x4a>
    2504:	6803      	ldr	r3, [r0, #0]
    2506:	b1d3      	cbz	r3, 253e <_mci_sync_start_write_blocks+0x46>
    2508:	2001      	movs	r0, #1
    250a:	4d18      	ldr	r5, [pc, #96]	; (256c <_mci_sync_start_write_blocks+0x74>)
    250c:	f240 225a 	movw	r2, #602	; 0x25a
    2510:	4629      	mov	r1, r5
    2512:	4c17      	ldr	r4, [pc, #92]	; (2570 <_mci_sync_start_write_blocks+0x78>)
    2514:	47a0      	blx	r4
	ASSERT(nb_block);
    2516:	f240 225b 	movw	r2, #603	; 0x25b
    251a:	4629      	mov	r1, r5
    251c:	f118 0000 	adds.w	r0, r8, #0
    2520:	bf18      	it	ne
    2522:	2001      	movne	r0, #1
    2524:	47a0      	blx	r4
	ASSERT(src);
    2526:	f44f 7217 	mov.w	r2, #604	; 0x25c
    252a:	4629      	mov	r1, r5
    252c:	1c30      	adds	r0, r6, #0
    252e:	bf18      	it	ne
    2530:	2001      	movne	r0, #1
    2532:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    2534:	8a3d      	ldrh	r5, [r7, #16]
    2536:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    253a:	2404      	movs	r4, #4

	while (nb_data) {
    253c:	e005      	b.n	254a <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    253e:	2000      	movs	r0, #0
    2540:	e7e3      	b.n	250a <_mci_sync_start_write_blocks+0x12>
    2542:	2000      	movs	r0, #0
    2544:	e7e1      	b.n	250a <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    2546:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2548:	4426      	add	r6, r4
	while (nb_data) {
    254a:	b165      	cbz	r5, 2566 <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    254c:	6831      	ldr	r1, [r6, #0]
    254e:	4638      	mov	r0, r7
    2550:	4b08      	ldr	r3, [pc, #32]	; (2574 <_mci_sync_start_write_blocks+0x7c>)
    2552:	4798      	blx	r3
		if (nb_data < nbytes) {
    2554:	42a5      	cmp	r5, r4
    2556:	d2f6      	bcs.n	2546 <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2558:	8a3b      	ldrh	r3, [r7, #16]
    255a:	fb93 f2f4 	sdiv	r2, r3, r4
    255e:	fb04 3412 	mls	r4, r4, r2, r3
    2562:	b2e4      	uxtb	r4, r4
    2564:	e7ef      	b.n	2546 <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    2566:	2001      	movs	r0, #1
    2568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    256c:	0000443c 	.word	0x0000443c
    2570:	000014f5 	.word	0x000014f5
    2574:	00002441 	.word	0x00002441

00002578 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    2578:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    257a:	b158      	cbz	r0, 2594 <_mci_sync_wait_end_of_write_blocks+0x1c>
    257c:	6803      	ldr	r3, [r0, #0]
    257e:	b13b      	cbz	r3, 2590 <_mci_sync_wait_end_of_write_blocks+0x18>
    2580:	2001      	movs	r0, #1
    2582:	f44f 721f 	mov.w	r2, #636	; 0x27c
    2586:	4904      	ldr	r1, [pc, #16]	; (2598 <_mci_sync_wait_end_of_write_blocks+0x20>)
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <_mci_sync_wait_end_of_write_blocks+0x24>)
    258a:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    258c:	2001      	movs	r0, #1
    258e:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2590:	2000      	movs	r0, #0
    2592:	e7f6      	b.n	2582 <_mci_sync_wait_end_of_write_blocks+0xa>
    2594:	2000      	movs	r0, #0
    2596:	e7f4      	b.n	2582 <_mci_sync_wait_end_of_write_blocks+0xa>
    2598:	0000443c 	.word	0x0000443c
    259c:	000014f5 	.word	0x000014f5

000025a0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    25a0:	b470      	push	{r4, r5, r6}
    25a2:	b087      	sub	sp, #28
    25a4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    25a6:	466c      	mov	r4, sp
    25a8:	4d0c      	ldr	r5, [pc, #48]	; (25dc <_sercom_get_hardware_index+0x3c>)
    25aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    25ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    25ae:	e895 0003 	ldmia.w	r5, {r0, r1}
    25b2:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25b6:	2000      	movs	r0, #0
    25b8:	2805      	cmp	r0, #5
    25ba:	d80a      	bhi.n	25d2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    25bc:	ab06      	add	r3, sp, #24
    25be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    25c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
    25c6:	42b3      	cmp	r3, r6
    25c8:	d001      	beq.n	25ce <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25ca:	3001      	adds	r0, #1
    25cc:	e7f4      	b.n	25b8 <_sercom_get_hardware_index+0x18>
			return i;
    25ce:	b2c0      	uxtb	r0, r0
    25d0:	e000      	b.n	25d4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    25d2:	2000      	movs	r0, #0
}
    25d4:	b007      	add	sp, #28
    25d6:	bc70      	pop	{r4, r5, r6}
    25d8:	4770      	bx	lr
    25da:	bf00      	nop
    25dc:	00004454 	.word	0x00004454

000025e0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    25e0:	b510      	push	{r4, lr}
	void *hw = device->hw;
    25e2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    25e4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    25e6:	f013 0f01 	tst.w	r3, #1
    25ea:	d003      	beq.n	25f4 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    25ec:	7da3      	ldrb	r3, [r4, #22]
    25ee:	f013 0f01 	tst.w	r3, #1
    25f2:	d112      	bne.n	261a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    25f4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    25f6:	f013 0f02 	tst.w	r3, #2
    25fa:	d003      	beq.n	2604 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    25fc:	7da3      	ldrb	r3, [r4, #22]
    25fe:	f013 0f02 	tst.w	r3, #2
    2602:	d10f      	bne.n	2624 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2604:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2606:	f013 0f04 	tst.w	r3, #4
    260a:	d015      	beq.n	2638 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    260c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    260e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2612:	b163      	cbz	r3, 262e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2614:	23ff      	movs	r3, #255	; 0xff
    2616:	8363      	strh	r3, [r4, #26]
    2618:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    261a:	2301      	movs	r3, #1
    261c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    261e:	6803      	ldr	r3, [r0, #0]
    2620:	4798      	blx	r3
    2622:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2624:	2302      	movs	r3, #2
    2626:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2628:	6883      	ldr	r3, [r0, #8]
    262a:	4798      	blx	r3
    262c:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    262e:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2630:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2632:	b2c9      	uxtb	r1, r1
    2634:	4798      	blx	r3
    2636:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2638:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    263a:	09db      	lsrs	r3, r3, #7
    263c:	d100      	bne.n	2640 <_sercom_usart_interrupt_handler+0x60>
    263e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2640:	2380      	movs	r3, #128	; 0x80
    2642:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    2644:	68c3      	ldr	r3, [r0, #12]
    2646:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2648:	8b63      	ldrh	r3, [r4, #26]
    264a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    264c:	8363      	strh	r3, [r4, #26]
    264e:	e7f6      	b.n	263e <_sercom_usart_interrupt_handler+0x5e>

00002650 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <_sercom_init_irq_param+0x10>)
    2652:	4298      	cmp	r0, r3
    2654:	d000      	beq.n	2658 <_sercom_init_irq_param+0x8>
    2656:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2658:	4b02      	ldr	r3, [pc, #8]	; (2664 <_sercom_init_irq_param+0x14>)
    265a:	6019      	str	r1, [r3, #0]
	}
}
    265c:	e7fb      	b.n	2656 <_sercom_init_irq_param+0x6>
    265e:	bf00      	nop
    2660:	43000400 	.word	0x43000400
    2664:	20000218 	.word	0x20000218

00002668 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2668:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    266a:	4b04      	ldr	r3, [pc, #16]	; (267c <_sercom_get_irq_num+0x14>)
    266c:	4798      	blx	r3
    266e:	0080      	lsls	r0, r0, #2
    2670:	b2c0      	uxtb	r0, r0
    2672:	302e      	adds	r0, #46	; 0x2e
}
    2674:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2678:	bd08      	pop	{r3, pc}
    267a:	bf00      	nop
    267c:	000025a1 	.word	0x000025a1

00002680 <_get_sercom_index>:
{
    2680:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2682:	4b0c      	ldr	r3, [pc, #48]	; (26b4 <_get_sercom_index+0x34>)
    2684:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2686:	2300      	movs	r3, #0
    2688:	b143      	cbz	r3, 269c <_get_sercom_index+0x1c>
	ASSERT(false);
    268a:	f240 226b 	movw	r2, #619	; 0x26b
    268e:	490a      	ldr	r1, [pc, #40]	; (26b8 <_get_sercom_index+0x38>)
    2690:	2000      	movs	r0, #0
    2692:	4b0a      	ldr	r3, [pc, #40]	; (26bc <_get_sercom_index+0x3c>)
    2694:	4798      	blx	r3
	return 0;
    2696:	2300      	movs	r3, #0
}
    2698:	4618      	mov	r0, r3
    269a:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    269c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    26a0:	00d1      	lsls	r1, r2, #3
    26a2:	4a07      	ldr	r2, [pc, #28]	; (26c0 <_get_sercom_index+0x40>)
    26a4:	440a      	add	r2, r1
    26a6:	7e12      	ldrb	r2, [r2, #24]
    26a8:	4290      	cmp	r0, r2
    26aa:	d0f5      	beq.n	2698 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    26ac:	3301      	adds	r3, #1
    26ae:	b2db      	uxtb	r3, r3
    26b0:	e7ea      	b.n	2688 <_get_sercom_index+0x8>
    26b2:	bf00      	nop
    26b4:	000025a1 	.word	0x000025a1
    26b8:	000044c0 	.word	0x000044c0
    26bc:	000014f5 	.word	0x000014f5
    26c0:	00004454 	.word	0x00004454

000026c4 <_usart_init>:
{
    26c4:	b538      	push	{r3, r4, r5, lr}
    26c6:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    26c8:	4b3c      	ldr	r3, [pc, #240]	; (27bc <_usart_init+0xf8>)
    26ca:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    26cc:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    26ce:	f013 0f01 	tst.w	r3, #1
    26d2:	d122      	bne.n	271a <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    26d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    26d8:	00da      	lsls	r2, r3, #3
    26da:	4b39      	ldr	r3, [pc, #228]	; (27c0 <_usart_init+0xfc>)
    26dc:	4413      	add	r3, r2
    26de:	69da      	ldr	r2, [r3, #28]
    26e0:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    26e4:	69e3      	ldr	r3, [r4, #28]
    26e6:	f013 0f03 	tst.w	r3, #3
    26ea:	d1fb      	bne.n	26e4 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    26ec:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    26ee:	f013 0f02 	tst.w	r3, #2
    26f2:	d00b      	beq.n	270c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    26f4:	6823      	ldr	r3, [r4, #0]
    26f6:	f023 0302 	bic.w	r3, r3, #2
    26fa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    26fc:	69e3      	ldr	r3, [r4, #28]
    26fe:	f013 0f03 	tst.w	r3, #3
    2702:	d1fb      	bne.n	26fc <_usart_init+0x38>
    2704:	69e3      	ldr	r3, [r4, #28]
    2706:	f013 0f02 	tst.w	r3, #2
    270a:	d1fb      	bne.n	2704 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    270c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2710:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2712:	69e3      	ldr	r3, [r4, #28]
    2714:	f013 0f03 	tst.w	r3, #3
    2718:	d1fb      	bne.n	2712 <_usart_init+0x4e>
    271a:	69e3      	ldr	r3, [r4, #28]
    271c:	f013 0f01 	tst.w	r3, #1
    2720:	d1fb      	bne.n	271a <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2722:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2726:	00da      	lsls	r2, r3, #3
    2728:	4b25      	ldr	r3, [pc, #148]	; (27c0 <_usart_init+0xfc>)
    272a:	4413      	add	r3, r2
    272c:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    272e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2730:	69e3      	ldr	r3, [r4, #28]
    2732:	f013 0f03 	tst.w	r3, #3
    2736:	d1fb      	bne.n	2730 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2738:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    273c:	00da      	lsls	r2, r3, #3
    273e:	4b20      	ldr	r3, [pc, #128]	; (27c0 <_usart_init+0xfc>)
    2740:	4413      	add	r3, r2
    2742:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2744:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2746:	69e3      	ldr	r3, [r4, #28]
    2748:	f013 0f1f 	tst.w	r3, #31
    274c:	d1fb      	bne.n	2746 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    274e:	0042      	lsls	r2, r0, #1
    2750:	4402      	add	r2, r0
    2752:	00d1      	lsls	r1, r2, #3
    2754:	4b1a      	ldr	r3, [pc, #104]	; (27c0 <_usart_init+0xfc>)
    2756:	440b      	add	r3, r1
    2758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    275a:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    275c:	69db      	ldr	r3, [r3, #28]
    275e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2762:	d10a      	bne.n	277a <_usart_init+0xb6>
    2764:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2768:	d107      	bne.n	277a <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    276a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    276e:	00da      	lsls	r2, r3, #3
    2770:	4b13      	ldr	r3, [pc, #76]	; (27c0 <_usart_init+0xfc>)
    2772:	4413      	add	r3, r2
    2774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2776:	81a3      	strh	r3, [r4, #12]
    2778:	e00f      	b.n	279a <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    277a:	0042      	lsls	r2, r0, #1
    277c:	4402      	add	r2, r0
    277e:	00d1      	lsls	r1, r2, #3
    2780:	4b0f      	ldr	r3, [pc, #60]	; (27c0 <_usart_init+0xfc>)
    2782:	440b      	add	r3, r1
    2784:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2786:	89a2      	ldrh	r2, [r4, #12]
    2788:	f361 020c 	bfi	r2, r1, #0, #13
    278c:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    278e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    2792:	89a3      	ldrh	r3, [r4, #12]
    2794:	f362 334f 	bfi	r3, r2, #13, #3
    2798:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    279a:	4a09      	ldr	r2, [pc, #36]	; (27c0 <_usart_init+0xfc>)
    279c:	0043      	lsls	r3, r0, #1
    279e:	181d      	adds	r5, r3, r0
    27a0:	00e9      	lsls	r1, r5, #3
    27a2:	460d      	mov	r5, r1
    27a4:	4411      	add	r1, r2
    27a6:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    27aa:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    27ac:	442a      	add	r2, r5
    27ae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    27b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    27b6:	2000      	movs	r0, #0
    27b8:	bd38      	pop	{r3, r4, r5, pc}
    27ba:	bf00      	nop
    27bc:	00002681 	.word	0x00002681
    27c0:	00004454 	.word	0x00004454

000027c4 <_usart_async_init>:
{
    27c4:	b570      	push	{r4, r5, r6, lr}
    27c6:	460c      	mov	r4, r1
	ASSERT(device);
    27c8:	4606      	mov	r6, r0
    27ca:	22cb      	movs	r2, #203	; 0xcb
    27cc:	4918      	ldr	r1, [pc, #96]	; (2830 <_usart_async_init+0x6c>)
    27ce:	3000      	adds	r0, #0
    27d0:	bf18      	it	ne
    27d2:	2001      	movne	r0, #1
    27d4:	4b17      	ldr	r3, [pc, #92]	; (2834 <_usart_async_init+0x70>)
    27d6:	4798      	blx	r3
	init_status = _usart_init(hw);
    27d8:	4620      	mov	r0, r4
    27da:	4b17      	ldr	r3, [pc, #92]	; (2838 <_usart_async_init+0x74>)
    27dc:	4798      	blx	r3
	if (init_status) {
    27de:	4605      	mov	r5, r0
    27e0:	b108      	cbz	r0, 27e6 <_usart_async_init+0x22>
}
    27e2:	4628      	mov	r0, r5
    27e4:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    27e6:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    27e8:	4631      	mov	r1, r6
    27ea:	4620      	mov	r0, r4
    27ec:	4b13      	ldr	r3, [pc, #76]	; (283c <_usart_async_init+0x78>)
    27ee:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    27f0:	4620      	mov	r0, r4
    27f2:	4b13      	ldr	r3, [pc, #76]	; (2840 <_usart_async_init+0x7c>)
    27f4:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    27f6:	2400      	movs	r4, #0
    27f8:	e016      	b.n	2828 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27fa:	0941      	lsrs	r1, r0, #5
    27fc:	f000 021f 	and.w	r2, r0, #31
    2800:	2301      	movs	r3, #1
    2802:	4093      	lsls	r3, r2
    2804:	4a0f      	ldr	r2, [pc, #60]	; (2844 <_usart_async_init+0x80>)
    2806:	f101 0620 	add.w	r6, r1, #32
    280a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    280e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2812:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2816:	f101 0660 	add.w	r6, r1, #96	; 0x60
    281a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    281e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    2822:	3001      	adds	r0, #1
    2824:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2826:	3401      	adds	r4, #1
    2828:	2c03      	cmp	r4, #3
    282a:	d9e6      	bls.n	27fa <_usart_async_init+0x36>
    282c:	e7d9      	b.n	27e2 <_usart_async_init+0x1e>
    282e:	bf00      	nop
    2830:	000044c0 	.word	0x000044c0
    2834:	000014f5 	.word	0x000014f5
    2838:	000026c5 	.word	0x000026c5
    283c:	00002651 	.word	0x00002651
    2840:	00002669 	.word	0x00002669
    2844:	e000e100 	.word	0xe000e100

00002848 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2848:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    284a:	6299      	str	r1, [r3, #40]	; 0x28
    284c:	4770      	bx	lr

0000284e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    284e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2850:	2201      	movs	r2, #1
    2852:	759a      	strb	r2, [r3, #22]
    2854:	4770      	bx	lr

00002856 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2856:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2858:	2202      	movs	r2, #2
    285a:	759a      	strb	r2, [r3, #22]
    285c:	4770      	bx	lr
	...

00002860 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2860:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2862:	4b02      	ldr	r3, [pc, #8]	; (286c <SERCOM5_0_Handler+0xc>)
    2864:	6818      	ldr	r0, [r3, #0]
    2866:	4b02      	ldr	r3, [pc, #8]	; (2870 <SERCOM5_0_Handler+0x10>)
    2868:	4798      	blx	r3
    286a:	bd08      	pop	{r3, pc}
    286c:	20000218 	.word	0x20000218
    2870:	000025e1 	.word	0x000025e1

00002874 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2874:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2876:	4b02      	ldr	r3, [pc, #8]	; (2880 <SERCOM5_1_Handler+0xc>)
    2878:	6818      	ldr	r0, [r3, #0]
    287a:	4b02      	ldr	r3, [pc, #8]	; (2884 <SERCOM5_1_Handler+0x10>)
    287c:	4798      	blx	r3
    287e:	bd08      	pop	{r3, pc}
    2880:	20000218 	.word	0x20000218
    2884:	000025e1 	.word	0x000025e1

00002888 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2888:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    288a:	4b02      	ldr	r3, [pc, #8]	; (2894 <SERCOM5_2_Handler+0xc>)
    288c:	6818      	ldr	r0, [r3, #0]
    288e:	4b02      	ldr	r3, [pc, #8]	; (2898 <SERCOM5_2_Handler+0x10>)
    2890:	4798      	blx	r3
    2892:	bd08      	pop	{r3, pc}
    2894:	20000218 	.word	0x20000218
    2898:	000025e1 	.word	0x000025e1

0000289c <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    289c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    289e:	4b02      	ldr	r3, [pc, #8]	; (28a8 <SERCOM5_3_Handler+0xc>)
    28a0:	6818      	ldr	r0, [r3, #0]
    28a2:	4b02      	ldr	r3, [pc, #8]	; (28ac <SERCOM5_3_Handler+0x10>)
    28a4:	4798      	blx	r3
    28a6:	bd08      	pop	{r3, pc}
    28a8:	20000218 	.word	0x20000218
    28ac:	000025e1 	.word	0x000025e1

000028b0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    28b0:	4b03      	ldr	r3, [pc, #12]	; (28c0 <_system_time_init+0x10>)
    28b2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    28b6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    28b8:	2205      	movs	r2, #5
    28ba:	601a      	str	r2, [r3, #0]
    28bc:	4770      	bx	lr
    28be:	bf00      	nop
    28c0:	e000e010 	.word	0xe000e010

000028c4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    28c4:	b508      	push	{r3, lr}
	_system_time_init(hw);
    28c6:	4b01      	ldr	r3, [pc, #4]	; (28cc <_delay_init+0x8>)
    28c8:	4798      	blx	r3
    28ca:	bd08      	pop	{r3, pc}
    28cc:	000028b1 	.word	0x000028b1

000028d0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    28d0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    28d2:	e00d      	b.n	28f0 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    28d4:	4b0d      	ldr	r3, [pc, #52]	; (290c <_delay_cycles+0x3c>)
    28d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    28da:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    28dc:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    28de:	4b0b      	ldr	r3, [pc, #44]	; (290c <_delay_cycles+0x3c>)
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    28e6:	d0fa      	beq.n	28de <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    28e8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    28ec:	3101      	adds	r1, #1
	while (n--) {
    28ee:	4610      	mov	r0, r2
    28f0:	1e43      	subs	r3, r0, #1
    28f2:	b2da      	uxtb	r2, r3
    28f4:	2800      	cmp	r0, #0
    28f6:	d1ed      	bne.n	28d4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <_delay_cycles+0x3c>)
    28fa:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    28fc:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    28fe:	4b03      	ldr	r3, [pc, #12]	; (290c <_delay_cycles+0x3c>)
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2906:	d0fa      	beq.n	28fe <_delay_cycles+0x2e>
		;
}
    2908:	4770      	bx	lr
    290a:	bf00      	nop
    290c:	e000e010 	.word	0xe000e010

00002910 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2910:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2912:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2914:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2916:	f012 0f01 	tst.w	r2, #1
    291a:	d100      	bne.n	291e <tc_interrupt_handler+0xe>
    291c:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    291e:	2201      	movs	r2, #1
    2920:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2922:	6803      	ldr	r3, [r0, #0]
    2924:	4798      	blx	r3
	}
}
    2926:	e7f9      	b.n	291c <tc_interrupt_handler+0xc>

00002928 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    292c:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    292e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2930:	f013 0f01 	tst.w	r3, #1
    2934:	d004      	beq.n	2940 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2936:	2301      	movs	r3, #1
    2938:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    293a:	6803      	ldr	r3, [r0, #0]
    293c:	b103      	cbz	r3, 2940 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    293e:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2940:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2942:	f013 0f02 	tst.w	r3, #2
    2946:	d005      	beq.n	2954 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2948:	2302      	movs	r3, #2
    294a:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    294c:	686b      	ldr	r3, [r5, #4]
    294e:	b10b      	cbz	r3, 2954 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2950:	4628      	mov	r0, r5
    2952:	4798      	blx	r3
    2954:	bd38      	pop	{r3, r4, r5, pc}
	...

00002958 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <_tc_init_irq_param+0x1c>)
    295a:	4298      	cmp	r0, r3
    295c:	d003      	beq.n	2966 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    295e:	4b06      	ldr	r3, [pc, #24]	; (2978 <_tc_init_irq_param+0x20>)
    2960:	4298      	cmp	r0, r3
    2962:	d003      	beq.n	296c <_tc_init_irq_param+0x14>
    2964:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2966:	4b05      	ldr	r3, [pc, #20]	; (297c <_tc_init_irq_param+0x24>)
    2968:	6019      	str	r1, [r3, #0]
    296a:	e7f8      	b.n	295e <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    296c:	4b03      	ldr	r3, [pc, #12]	; (297c <_tc_init_irq_param+0x24>)
    296e:	6059      	str	r1, [r3, #4]
	}
}
    2970:	e7f8      	b.n	2964 <_tc_init_irq_param+0xc>
    2972:	bf00      	nop
    2974:	40003800 	.word	0x40003800
    2978:	40003c00 	.word	0x40003c00
    297c:	2000021c 	.word	0x2000021c

00002980 <get_tc_index>:
{
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	b086      	sub	sp, #24
    2984:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2986:	466c      	mov	r4, sp
    2988:	4d17      	ldr	r5, [pc, #92]	; (29e8 <get_tc_index+0x68>)
    298a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    298c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    298e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2992:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2996:	2300      	movs	r3, #0
    2998:	2b05      	cmp	r3, #5
    299a:	d80a      	bhi.n	29b2 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    299c:	aa06      	add	r2, sp, #24
    299e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    29a2:	f852 2c18 	ldr.w	r2, [r2, #-24]
    29a6:	42b2      	cmp	r2, r6
    29a8:	d001      	beq.n	29ae <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    29aa:	3301      	adds	r3, #1
    29ac:	e7f4      	b.n	2998 <get_tc_index+0x18>
			return i;
    29ae:	b2db      	uxtb	r3, r3
    29b0:	e000      	b.n	29b4 <get_tc_index+0x34>
		}
	}
	return 0;
    29b2:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    29b4:	2200      	movs	r2, #0
    29b6:	2a01      	cmp	r2, #1
    29b8:	d80b      	bhi.n	29d2 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    29ba:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    29be:	0081      	lsls	r1, r0, #2
    29c0:	480a      	ldr	r0, [pc, #40]	; (29ec <get_tc_index+0x6c>)
    29c2:	5c41      	ldrb	r1, [r0, r1]
    29c4:	4299      	cmp	r1, r3
    29c6:	d002      	beq.n	29ce <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    29c8:	3201      	adds	r2, #1
    29ca:	b2d2      	uxtb	r2, r2
    29cc:	e7f3      	b.n	29b6 <get_tc_index+0x36>
			return i;
    29ce:	b250      	sxtb	r0, r2
    29d0:	e007      	b.n	29e2 <get_tc_index+0x62>
	ASSERT(false);
    29d2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    29d6:	4906      	ldr	r1, [pc, #24]	; (29f0 <get_tc_index+0x70>)
    29d8:	2000      	movs	r0, #0
    29da:	4b06      	ldr	r3, [pc, #24]	; (29f4 <get_tc_index+0x74>)
    29dc:	4798      	blx	r3
	return -1;
    29de:	f04f 30ff 	mov.w	r0, #4294967295
}
    29e2:	b006      	add	sp, #24
    29e4:	bd70      	pop	{r4, r5, r6, pc}
    29e6:	bf00      	nop
    29e8:	000044dc 	.word	0x000044dc
    29ec:	20000000 	.word	0x20000000
    29f0:	000044f4 	.word	0x000044f4
    29f4:	000014f5 	.word	0x000014f5

000029f8 <_timer_init>:
{
    29f8:	b570      	push	{r4, r5, r6, lr}
    29fa:	4606      	mov	r6, r0
    29fc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    29fe:	4608      	mov	r0, r1
    2a00:	4b6c      	ldr	r3, [pc, #432]	; (2bb4 <_timer_init+0x1bc>)
    2a02:	4798      	blx	r3
    2a04:	4605      	mov	r5, r0
	device->hw = hw;
    2a06:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2a08:	228f      	movs	r2, #143	; 0x8f
    2a0a:	496b      	ldr	r1, [pc, #428]	; (2bb8 <_timer_init+0x1c0>)
    2a0c:	2001      	movs	r0, #1
    2a0e:	4b6b      	ldr	r3, [pc, #428]	; (2bbc <_timer_init+0x1c4>)
    2a10:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2a12:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2a14:	f013 0f01 	tst.w	r3, #1
    2a18:	d119      	bne.n	2a4e <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a1a:	6923      	ldr	r3, [r4, #16]
    2a1c:	f013 0f03 	tst.w	r3, #3
    2a20:	d1fb      	bne.n	2a1a <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2a22:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2a24:	f013 0f02 	tst.w	r3, #2
    2a28:	d00b      	beq.n	2a42 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2a2a:	6823      	ldr	r3, [r4, #0]
    2a2c:	f023 0302 	bic.w	r3, r3, #2
    2a30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a32:	6923      	ldr	r3, [r4, #16]
    2a34:	f013 0f03 	tst.w	r3, #3
    2a38:	d1fb      	bne.n	2a32 <_timer_init+0x3a>
    2a3a:	6923      	ldr	r3, [r4, #16]
    2a3c:	f013 0f02 	tst.w	r3, #2
    2a40:	d1fb      	bne.n	2a3a <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2a42:	2301      	movs	r3, #1
    2a44:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a46:	6923      	ldr	r3, [r4, #16]
    2a48:	f013 0f03 	tst.w	r3, #3
    2a4c:	d1fb      	bne.n	2a46 <_timer_init+0x4e>
    2a4e:	6923      	ldr	r3, [r4, #16]
    2a50:	f013 0f01 	tst.w	r3, #1
    2a54:	d1fb      	bne.n	2a4e <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2a56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a5a:	009a      	lsls	r2, r3, #2
    2a5c:	4b58      	ldr	r3, [pc, #352]	; (2bc0 <_timer_init+0x1c8>)
    2a5e:	4413      	add	r3, r2
    2a60:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2a62:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a64:	6923      	ldr	r3, [r4, #16]
    2a66:	f013 0f03 	tst.w	r3, #3
    2a6a:	d1fb      	bne.n	2a64 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2a6c:	00aa      	lsls	r2, r5, #2
    2a6e:	442a      	add	r2, r5
    2a70:	0091      	lsls	r1, r2, #2
    2a72:	4b53      	ldr	r3, [pc, #332]	; (2bc0 <_timer_init+0x1c8>)
    2a74:	440b      	add	r3, r1
    2a76:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2a78:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2a7a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2a7c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2a7e:	2201      	movs	r2, #1
    2a80:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2a82:	685b      	ldr	r3, [r3, #4]
    2a84:	f003 030c 	and.w	r3, r3, #12
    2a88:	2b08      	cmp	r3, #8
    2a8a:	d05b      	beq.n	2b44 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d16d      	bne.n	2b6c <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2a90:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a94:	009a      	lsls	r2, r3, #2
    2a96:	4b4a      	ldr	r3, [pc, #296]	; (2bc0 <_timer_init+0x1c8>)
    2a98:	4413      	add	r3, r2
    2a9a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a9c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a9e:	6923      	ldr	r3, [r4, #16]
    2aa0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2aa4:	d1fb      	bne.n	2a9e <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2aa6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2aaa:	009a      	lsls	r2, r3, #2
    2aac:	4b44      	ldr	r3, [pc, #272]	; (2bc0 <_timer_init+0x1c8>)
    2aae:	4413      	add	r3, r2
    2ab0:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2ab2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ab4:	6923      	ldr	r3, [r4, #16]
    2ab6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2aba:	d1fb      	bne.n	2ab4 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2abc:	2301      	movs	r3, #1
    2abe:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2ac0:	4631      	mov	r1, r6
    2ac2:	4620      	mov	r0, r4
    2ac4:	4b3f      	ldr	r3, [pc, #252]	; (2bc4 <_timer_init+0x1cc>)
    2ac6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2ac8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2acc:	009a      	lsls	r2, r3, #2
    2ace:	4b3c      	ldr	r3, [pc, #240]	; (2bc0 <_timer_init+0x1c8>)
    2ad0:	4413      	add	r3, r2
    2ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	db0d      	blt.n	2af6 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ada:	095a      	lsrs	r2, r3, #5
    2adc:	f003 031f 	and.w	r3, r3, #31
    2ae0:	2101      	movs	r1, #1
    2ae2:	fa01 f303 	lsl.w	r3, r1, r3
    2ae6:	3220      	adds	r2, #32
    2ae8:	4937      	ldr	r1, [pc, #220]	; (2bc8 <_timer_init+0x1d0>)
    2aea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2aee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2af2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2af6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2afa:	009a      	lsls	r2, r3, #2
    2afc:	4b30      	ldr	r3, [pc, #192]	; (2bc0 <_timer_init+0x1c8>)
    2afe:	4413      	add	r3, r2
    2b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b04:	2b00      	cmp	r3, #0
    2b06:	db09      	blt.n	2b1c <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b08:	095a      	lsrs	r2, r3, #5
    2b0a:	f003 031f 	and.w	r3, r3, #31
    2b0e:	2101      	movs	r1, #1
    2b10:	fa01 f303 	lsl.w	r3, r1, r3
    2b14:	3260      	adds	r2, #96	; 0x60
    2b16:	492c      	ldr	r1, [pc, #176]	; (2bc8 <_timer_init+0x1d0>)
    2b18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2b1c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b20:	00aa      	lsls	r2, r5, #2
    2b22:	4b27      	ldr	r3, [pc, #156]	; (2bc0 <_timer_init+0x1c8>)
    2b24:	4413      	add	r3, r2
    2b26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	db08      	blt.n	2b40 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b2e:	0959      	lsrs	r1, r3, #5
    2b30:	f003 031f 	and.w	r3, r3, #31
    2b34:	2201      	movs	r2, #1
    2b36:	fa02 f303 	lsl.w	r3, r2, r3
    2b3a:	4a23      	ldr	r2, [pc, #140]	; (2bc8 <_timer_init+0x1d0>)
    2b3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2b40:	2000      	movs	r0, #0
    2b42:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2b44:	4b1e      	ldr	r3, [pc, #120]	; (2bc0 <_timer_init+0x1c8>)
    2b46:	440b      	add	r3, r1
    2b48:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b4a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b4c:	6923      	ldr	r3, [r4, #16]
    2b4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b52:	d1fb      	bne.n	2b4c <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2b54:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b58:	009a      	lsls	r2, r3, #2
    2b5a:	4b19      	ldr	r3, [pc, #100]	; (2bc0 <_timer_init+0x1c8>)
    2b5c:	4413      	add	r3, r2
    2b5e:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b60:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b62:	6923      	ldr	r3, [r4, #16]
    2b64:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b68:	d1fb      	bne.n	2b62 <_timer_init+0x16a>
    2b6a:	e7a7      	b.n	2abc <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2b6c:	2b04      	cmp	r3, #4
    2b6e:	d1a5      	bne.n	2abc <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2b70:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b74:	009a      	lsls	r2, r3, #2
    2b76:	4b12      	ldr	r3, [pc, #72]	; (2bc0 <_timer_init+0x1c8>)
    2b78:	4413      	add	r3, r2
    2b7a:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2b7c:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b7e:	6923      	ldr	r3, [r4, #16]
    2b80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b84:	d1fb      	bne.n	2b7e <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2b86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b8a:	009a      	lsls	r2, r3, #2
    2b8c:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <_timer_init+0x1c8>)
    2b8e:	4413      	add	r3, r2
    2b90:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2b92:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b94:	6923      	ldr	r3, [r4, #16]
    2b96:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b9a:	d1fb      	bne.n	2b94 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2b9c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ba0:	009a      	lsls	r2, r3, #2
    2ba2:	4b07      	ldr	r3, [pc, #28]	; (2bc0 <_timer_init+0x1c8>)
    2ba4:	4413      	add	r3, r2
    2ba6:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2ba8:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2baa:	6923      	ldr	r3, [r4, #16]
    2bac:	f013 0f20 	tst.w	r3, #32
    2bb0:	d1fb      	bne.n	2baa <_timer_init+0x1b2>
    2bb2:	e783      	b.n	2abc <_timer_init+0xc4>
    2bb4:	00002981 	.word	0x00002981
    2bb8:	000044f4 	.word	0x000044f4
    2bbc:	000014f5 	.word	0x000014f5
    2bc0:	20000000 	.word	0x20000000
    2bc4:	00002959 	.word	0x00002959
    2bc8:	e000e100 	.word	0xe000e100

00002bcc <_pwm_init>:
{
    2bcc:	b570      	push	{r4, r5, r6, lr}
    2bce:	4606      	mov	r6, r0
    2bd0:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2bd2:	4608      	mov	r0, r1
    2bd4:	4b59      	ldr	r3, [pc, #356]	; (2d3c <_pwm_init+0x170>)
    2bd6:	4798      	blx	r3
    2bd8:	4605      	mov	r5, r0
	device->hw = hw;
    2bda:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2bdc:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2bde:	f013 0f01 	tst.w	r3, #1
    2be2:	d119      	bne.n	2c18 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2be4:	6923      	ldr	r3, [r4, #16]
    2be6:	f013 0f03 	tst.w	r3, #3
    2bea:	d1fb      	bne.n	2be4 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2bec:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2bee:	f013 0f02 	tst.w	r3, #2
    2bf2:	d00b      	beq.n	2c0c <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2bf4:	6823      	ldr	r3, [r4, #0]
    2bf6:	f023 0302 	bic.w	r3, r3, #2
    2bfa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bfc:	6923      	ldr	r3, [r4, #16]
    2bfe:	f013 0f03 	tst.w	r3, #3
    2c02:	d1fb      	bne.n	2bfc <_pwm_init+0x30>
    2c04:	6923      	ldr	r3, [r4, #16]
    2c06:	f013 0f02 	tst.w	r3, #2
    2c0a:	d1fb      	bne.n	2c04 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2c0c:	2301      	movs	r3, #1
    2c0e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c10:	6923      	ldr	r3, [r4, #16]
    2c12:	f013 0f03 	tst.w	r3, #3
    2c16:	d1fb      	bne.n	2c10 <_pwm_init+0x44>
    2c18:	6923      	ldr	r3, [r4, #16]
    2c1a:	f013 0f01 	tst.w	r3, #1
    2c1e:	d1fb      	bne.n	2c18 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2c20:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c24:	009a      	lsls	r2, r3, #2
    2c26:	4b46      	ldr	r3, [pc, #280]	; (2d40 <_pwm_init+0x174>)
    2c28:	4413      	add	r3, r2
    2c2a:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2c2c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c2e:	6923      	ldr	r3, [r4, #16]
    2c30:	f013 0f03 	tst.w	r3, #3
    2c34:	d1fb      	bne.n	2c2e <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2c36:	00aa      	lsls	r2, r5, #2
    2c38:	442a      	add	r2, r5
    2c3a:	0091      	lsls	r1, r2, #2
    2c3c:	4b40      	ldr	r3, [pc, #256]	; (2d40 <_pwm_init+0x174>)
    2c3e:	440b      	add	r3, r1
    2c40:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2c42:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2c44:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2c46:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2c48:	2203      	movs	r2, #3
    2c4a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2c4c:	685b      	ldr	r3, [r3, #4]
    2c4e:	f003 030c 	and.w	r3, r3, #12
    2c52:	2b08      	cmp	r3, #8
    2c54:	d059      	beq.n	2d0a <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2c56:	2b00      	cmp	r3, #0
    2c58:	d16b      	bne.n	2d32 <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2c5a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c5e:	009a      	lsls	r2, r3, #2
    2c60:	4b37      	ldr	r3, [pc, #220]	; (2d40 <_pwm_init+0x174>)
    2c62:	4413      	add	r3, r2
    2c64:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2c66:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c68:	6923      	ldr	r3, [r4, #16]
    2c6a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c6e:	d1fb      	bne.n	2c68 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2c70:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c74:	009a      	lsls	r2, r3, #2
    2c76:	4b32      	ldr	r3, [pc, #200]	; (2d40 <_pwm_init+0x174>)
    2c78:	4413      	add	r3, r2
    2c7a:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2c7c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c7e:	6923      	ldr	r3, [r4, #16]
    2c80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c84:	d1fb      	bne.n	2c7e <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2c86:	4631      	mov	r1, r6
    2c88:	4620      	mov	r0, r4
    2c8a:	4b2e      	ldr	r3, [pc, #184]	; (2d44 <_pwm_init+0x178>)
    2c8c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2c8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c92:	009a      	lsls	r2, r3, #2
    2c94:	4b2a      	ldr	r3, [pc, #168]	; (2d40 <_pwm_init+0x174>)
    2c96:	4413      	add	r3, r2
    2c98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	db0d      	blt.n	2cbc <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ca0:	095a      	lsrs	r2, r3, #5
    2ca2:	f003 031f 	and.w	r3, r3, #31
    2ca6:	2101      	movs	r1, #1
    2ca8:	fa01 f303 	lsl.w	r3, r1, r3
    2cac:	3220      	adds	r2, #32
    2cae:	4926      	ldr	r1, [pc, #152]	; (2d48 <_pwm_init+0x17c>)
    2cb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2cb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cb8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2cbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cc0:	009a      	lsls	r2, r3, #2
    2cc2:	4b1f      	ldr	r3, [pc, #124]	; (2d40 <_pwm_init+0x174>)
    2cc4:	4413      	add	r3, r2
    2cc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2cca:	2b00      	cmp	r3, #0
    2ccc:	db09      	blt.n	2ce2 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cce:	095a      	lsrs	r2, r3, #5
    2cd0:	f003 031f 	and.w	r3, r3, #31
    2cd4:	2101      	movs	r1, #1
    2cd6:	fa01 f303 	lsl.w	r3, r1, r3
    2cda:	3260      	adds	r2, #96	; 0x60
    2cdc:	491a      	ldr	r1, [pc, #104]	; (2d48 <_pwm_init+0x17c>)
    2cde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2ce2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2ce6:	00aa      	lsls	r2, r5, #2
    2ce8:	4b15      	ldr	r3, [pc, #84]	; (2d40 <_pwm_init+0x174>)
    2cea:	4413      	add	r3, r2
    2cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	db21      	blt.n	2d38 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cf4:	0959      	lsrs	r1, r3, #5
    2cf6:	f003 031f 	and.w	r3, r3, #31
    2cfa:	2201      	movs	r2, #1
    2cfc:	fa02 f303 	lsl.w	r3, r2, r3
    2d00:	4a11      	ldr	r2, [pc, #68]	; (2d48 <_pwm_init+0x17c>)
    2d02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2d06:	2000      	movs	r0, #0
    2d08:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2d0a:	4b0d      	ldr	r3, [pc, #52]	; (2d40 <_pwm_init+0x174>)
    2d0c:	440b      	add	r3, r1
    2d0e:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2d10:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d12:	6923      	ldr	r3, [r4, #16]
    2d14:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d18:	d1fb      	bne.n	2d12 <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2d1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d1e:	009a      	lsls	r2, r3, #2
    2d20:	4b07      	ldr	r3, [pc, #28]	; (2d40 <_pwm_init+0x174>)
    2d22:	4413      	add	r3, r2
    2d24:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2d26:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d28:	6923      	ldr	r3, [r4, #16]
    2d2a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d2e:	d1fb      	bne.n	2d28 <_pwm_init+0x15c>
    2d30:	e7a9      	b.n	2c86 <_pwm_init+0xba>
		return -1;
    2d32:	f04f 30ff 	mov.w	r0, #4294967295
    2d36:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2d38:	2000      	movs	r0, #0
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
    2d3c:	00002981 	.word	0x00002981
    2d40:	20000000 	.word	0x20000000
    2d44:	00002959 	.word	0x00002959
    2d48:	e000e100 	.word	0xe000e100

00002d4c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2d4c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2d4e:	6813      	ldr	r3, [r2, #0]
    2d50:	f043 0302 	orr.w	r3, r3, #2
    2d54:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d56:	6913      	ldr	r3, [r2, #16]
    2d58:	f013 0f03 	tst.w	r3, #3
    2d5c:	d1fb      	bne.n	2d56 <_timer_start+0xa>
}
    2d5e:	4770      	bx	lr

00002d60 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2d60:	68c2      	ldr	r2, [r0, #12]
    2d62:	6913      	ldr	r3, [r2, #16]
    2d64:	f013 0f03 	tst.w	r3, #3
    2d68:	d1fb      	bne.n	2d62 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2d6a:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2d6c:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    2d70:	4770      	bx	lr

00002d72 <_tc_get_timer>:
}
    2d72:	2000      	movs	r0, #0
    2d74:	4770      	bx	lr

00002d76 <_tc_get_pwm>:
}
    2d76:	2000      	movs	r0, #0
    2d78:	4770      	bx	lr
	...

00002d7c <_timer_set_irq>:
{
    2d7c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2d7e:	68c0      	ldr	r0, [r0, #12]
    2d80:	4b08      	ldr	r3, [pc, #32]	; (2da4 <_timer_set_irq+0x28>)
    2d82:	4798      	blx	r3
    2d84:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2d86:	f240 129d 	movw	r2, #413	; 0x19d
    2d8a:	4907      	ldr	r1, [pc, #28]	; (2da8 <_timer_set_irq+0x2c>)
    2d8c:	2001      	movs	r0, #1
    2d8e:	4b07      	ldr	r3, [pc, #28]	; (2dac <_timer_set_irq+0x30>)
    2d90:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2d92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2d96:	00a2      	lsls	r2, r4, #2
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <_timer_set_irq+0x34>)
    2d9a:	4413      	add	r3, r2
    2d9c:	7898      	ldrb	r0, [r3, #2]
    2d9e:	4b05      	ldr	r3, [pc, #20]	; (2db4 <_timer_set_irq+0x38>)
    2da0:	4798      	blx	r3
    2da2:	bd10      	pop	{r4, pc}
    2da4:	00002981 	.word	0x00002981
    2da8:	000044f4 	.word	0x000044f4
    2dac:	000014f5 	.word	0x000014f5
    2db0:	20000000 	.word	0x20000000
    2db4:	000018b5 	.word	0x000018b5

00002db8 <TC0_Handler>:
{
    2db8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2dba:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <TC0_Handler+0xc>)
    2dbc:	6818      	ldr	r0, [r3, #0]
    2dbe:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <TC0_Handler+0x10>)
    2dc0:	4798      	blx	r3
    2dc2:	bd08      	pop	{r3, pc}
    2dc4:	2000021c 	.word	0x2000021c
    2dc8:	00002929 	.word	0x00002929

00002dcc <TC1_Handler>:
{
    2dcc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    2dce:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <TC1_Handler+0xc>)
    2dd0:	6858      	ldr	r0, [r3, #4]
    2dd2:	4b02      	ldr	r3, [pc, #8]	; (2ddc <TC1_Handler+0x10>)
    2dd4:	4798      	blx	r3
    2dd6:	bd08      	pop	{r3, pc}
    2dd8:	2000021c 	.word	0x2000021c
    2ddc:	00002911 	.word	0x00002911

00002de0 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    2de0:	4a02      	ldr	r2, [pc, #8]	; (2dec <millisecondTimer_cb+0xc>)
    2de2:	6813      	ldr	r3, [r2, #0]
    2de4:	3301      	adds	r3, #1
    2de6:	6013      	str	r3, [r2, #0]
    2de8:	4770      	bx	lr
    2dea:	bf00      	nop
    2dec:	20000224 	.word	0x20000224

00002df0 <battCharging_cb>:
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
	}
}

static void battCharging_cb(void)
{
    2df0:	b510      	push	{r4, lr}
    2df2:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2df4:	a801      	add	r0, sp, #4
    2df6:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <battCharging_cb+0x44>)
    2df8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2dfa:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <battCharging_cb+0x48>)
    2dfc:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e00:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e04:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2e08:	4054      	eors	r4, r2
    2e0a:	400c      	ands	r4, r1
    2e0c:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2e0e:	a801      	add	r0, sp, #4
    2e10:	4b0a      	ldr	r3, [pc, #40]	; (2e3c <battCharging_cb+0x4c>)
    2e12:	4798      	blx	r3
	bool pinState = gpio_get_pin_level(nCHRG);
	if (pinState == true) {
    2e14:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    2e18:	d106      	bne.n	2e28 <battCharging_cb+0x38>
		// Not charging
		deviceState &= !(DEVICE_STATE_CHARGING);
	}
	else {
		// charging
		deviceState |= DEVICE_STATE_CHARGING;
    2e1a:	4a09      	ldr	r2, [pc, #36]	; (2e40 <battCharging_cb+0x50>)
    2e1c:	6813      	ldr	r3, [r2, #0]
    2e1e:	f043 0320 	orr.w	r3, r3, #32
    2e22:	6013      	str	r3, [r2, #0]
	}
}
    2e24:	b002      	add	sp, #8
    2e26:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    2e28:	4b05      	ldr	r3, [pc, #20]	; (2e40 <battCharging_cb+0x50>)
    2e2a:	681a      	ldr	r2, [r3, #0]
    2e2c:	2200      	movs	r2, #0
    2e2e:	601a      	str	r2, [r3, #0]
    2e30:	e7f8      	b.n	2e24 <battCharging_cb+0x34>
    2e32:	bf00      	nop
    2e34:	00000d41 	.word	0x00000d41
    2e38:	41008000 	.word	0x41008000
    2e3c:	00000d4f 	.word	0x00000d4f
    2e40:	20000028 	.word	0x20000028

00002e44 <checkBattVoltage_cb>:
{
    2e44:	b510      	push	{r4, lr}
    2e46:	b082      	sub	sp, #8
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    2e48:	2301      	movs	r3, #1
    2e4a:	f10d 0207 	add.w	r2, sp, #7
    2e4e:	2100      	movs	r1, #0
    2e50:	4807      	ldr	r0, [pc, #28]	; (2e70 <checkBattVoltage_cb+0x2c>)
    2e52:	4c08      	ldr	r4, [pc, #32]	; (2e74 <checkBattVoltage_cb+0x30>)
    2e54:	47a0      	blx	r4
	battVolt = adcValue;
    2e56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e5a:	4a07      	ldr	r2, [pc, #28]	; (2e78 <checkBattVoltage_cb+0x34>)
    2e5c:	7013      	strb	r3, [r2, #0]
	if (adcValue < 158) {
    2e5e:	2b9d      	cmp	r3, #157	; 0x9d
    2e60:	d804      	bhi.n	2e6c <checkBattVoltage_cb+0x28>
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    2e62:	4a06      	ldr	r2, [pc, #24]	; (2e7c <checkBattVoltage_cb+0x38>)
    2e64:	6813      	ldr	r3, [r2, #0]
    2e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2e6a:	6013      	str	r3, [r2, #0]
}
    2e6c:	b002      	add	sp, #8
    2e6e:	bd10      	pop	{r4, pc}
    2e70:	200006c8 	.word	0x200006c8
    2e74:	00000ca1 	.word	0x00000ca1
    2e78:	20000b7a 	.word	0x20000b7a
    2e7c:	20000028 	.word	0x20000028

00002e80 <frameValid_cb>:
		
	}
}

static void frameValid_cb(void)
{
    2e80:	b500      	push	{lr}
    2e82:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2e84:	a801      	add	r0, sp, #4
    2e86:	4b07      	ldr	r3, [pc, #28]	; (2ea4 <frameValid_cb+0x24>)
    2e88:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2e8a:	4b07      	ldr	r3, [pc, #28]	; (2ea8 <frameValid_cb+0x28>)
    2e8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2e90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    2e98:	a801      	add	r0, sp, #4
    2e9a:	4b04      	ldr	r3, [pc, #16]	; (2eac <frameValid_cb+0x2c>)
    2e9c:	4798      	blx	r3
			deviceState &= !(DEVICE_STATE_START_RECORDING_WAITING);
			deviceState |= DEVICE_STATE_RECORDING;
		}
	}
	*/
}
    2e9e:	b003      	add	sp, #12
    2ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    2ea4:	00000d41 	.word	0x00000d41
    2ea8:	41008000 	.word	0x41008000
    2eac:	00000d4f 	.word	0x00000d4f

00002eb0 <irReceive_cb>:
{
    2eb0:	b500      	push	{lr}
    2eb2:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2eb4:	a801      	add	r0, sp, #4
    2eb6:	4b07      	ldr	r3, [pc, #28]	; (2ed4 <irReceive_cb+0x24>)
    2eb8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2eba:	4b07      	ldr	r3, [pc, #28]	; (2ed8 <irReceive_cb+0x28>)
    2ebc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ec0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    2ec8:	a801      	add	r0, sp, #4
    2eca:	4b04      	ldr	r3, [pc, #16]	; (2edc <irReceive_cb+0x2c>)
    2ecc:	4798      	blx	r3
}
    2ece:	b003      	add	sp, #12
    2ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    2ed4:	00000d41 	.word	0x00000d41
    2ed8:	41008000 	.word	0x41008000
    2edc:	00000d4f 	.word	0x00000d4f

00002ee0 <pushButton_cb>:
{
    2ee0:	b500      	push	{lr}
    2ee2:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    2ee4:	a801      	add	r0, sp, #4
    2ee6:	4b06      	ldr	r3, [pc, #24]	; (2f00 <pushButton_cb+0x20>)
    2ee8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2eea:	4b06      	ldr	r3, [pc, #24]	; (2f04 <pushButton_cb+0x24>)
    2eec:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2eee:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2ef0:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    2ef2:	a801      	add	r0, sp, #4
    2ef4:	4b04      	ldr	r3, [pc, #16]	; (2f08 <pushButton_cb+0x28>)
    2ef6:	4798      	blx	r3
}
    2ef8:	b003      	add	sp, #12
    2efa:	f85d fb04 	ldr.w	pc, [sp], #4
    2efe:	bf00      	nop
    2f00:	00000d41 	.word	0x00000d41
    2f04:	41008000 	.word	0x41008000
    2f08:	00000d4f 	.word	0x00000d4f

00002f0c <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
    2f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f10:	4607      	mov	r7, r0
    2f12:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f14:	4d2f      	ldr	r5, [pc, #188]	; (2fd4 <spi_BB_Write+0xc8>)
    2f16:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    2f1a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    2f1e:	200a      	movs	r0, #10
    2f20:	4c2d      	ldr	r4, [pc, #180]	; (2fd8 <spi_BB_Write+0xcc>)
    2f22:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f24:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    2f28:	200a      	movs	r0, #10
    2f2a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2f2c:	2408      	movs	r4, #8
    2f2e:	e00c      	b.n	2f4a <spi_BB_Write+0x3e>
    2f30:	2210      	movs	r2, #16
    2f32:	4b28      	ldr	r3, [pc, #160]	; (2fd4 <spi_BB_Write+0xc8>)
    2f34:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    2f36:	200a      	movs	r0, #10
    2f38:	4d27      	ldr	r5, [pc, #156]	; (2fd8 <spi_BB_Write+0xcc>)
    2f3a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f3c:	2220      	movs	r2, #32
    2f3e:	4b25      	ldr	r3, [pc, #148]	; (2fd4 <spi_BB_Write+0xc8>)
    2f40:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2f42:	200a      	movs	r0, #10
    2f44:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    2f46:	3c01      	subs	r4, #1
    2f48:	b264      	sxtb	r4, r4
    2f4a:	2c00      	cmp	r4, #0
    2f4c:	db0b      	blt.n	2f66 <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f4e:	2220      	movs	r2, #32
    2f50:	4b20      	ldr	r3, [pc, #128]	; (2fd4 <spi_BB_Write+0xc8>)
    2f52:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    2f54:	fa47 f304 	asr.w	r3, r7, r4
    2f58:	f013 0f01 	tst.w	r3, #1
    2f5c:	d0e8      	beq.n	2f30 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f5e:	2210      	movs	r2, #16
    2f60:	4b1c      	ldr	r3, [pc, #112]	; (2fd4 <spi_BB_Write+0xc8>)
    2f62:	619a      	str	r2, [r3, #24]
    2f64:	e7e7      	b.n	2f36 <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f66:	4c1b      	ldr	r4, [pc, #108]	; (2fd4 <spi_BB_Write+0xc8>)
    2f68:	2720      	movs	r7, #32
    2f6a:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f6c:	2310      	movs	r3, #16
    2f6e:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    2f70:	200a      	movs	r0, #10
    2f72:	4d19      	ldr	r5, [pc, #100]	; (2fd8 <spi_BB_Write+0xcc>)
    2f74:	47a8      	blx	r5
    2f76:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    2f78:	200a      	movs	r0, #10
    2f7a:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    2f7c:	240f      	movs	r4, #15
    2f7e:	e00c      	b.n	2f9a <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f80:	2210      	movs	r2, #16
    2f82:	4b14      	ldr	r3, [pc, #80]	; (2fd4 <spi_BB_Write+0xc8>)
    2f84:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    2f86:	200a      	movs	r0, #10
    2f88:	4d13      	ldr	r5, [pc, #76]	; (2fd8 <spi_BB_Write+0xcc>)
    2f8a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f8c:	2220      	movs	r2, #32
    2f8e:	4b11      	ldr	r3, [pc, #68]	; (2fd4 <spi_BB_Write+0xc8>)
    2f90:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    2f92:	200a      	movs	r0, #10
    2f94:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    2f96:	3c01      	subs	r4, #1
    2f98:	b264      	sxtb	r4, r4
    2f9a:	2c00      	cmp	r4, #0
    2f9c:	db0b      	blt.n	2fb6 <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f9e:	2220      	movs	r2, #32
    2fa0:	4b0c      	ldr	r3, [pc, #48]	; (2fd4 <spi_BB_Write+0xc8>)
    2fa2:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    2fa4:	fa46 f304 	asr.w	r3, r6, r4
    2fa8:	f013 0f01 	tst.w	r3, #1
    2fac:	d0e8      	beq.n	2f80 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2fae:	2210      	movs	r2, #16
    2fb0:	4b08      	ldr	r3, [pc, #32]	; (2fd4 <spi_BB_Write+0xc8>)
    2fb2:	619a      	str	r2, [r3, #24]
    2fb4:	e7e7      	b.n	2f86 <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2fb6:	4c07      	ldr	r4, [pc, #28]	; (2fd4 <spi_BB_Write+0xc8>)
    2fb8:	2320      	movs	r3, #32
    2fba:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    2fbc:	200a      	movs	r0, #10
    2fbe:	4d06      	ldr	r5, [pc, #24]	; (2fd8 <spi_BB_Write+0xcc>)
    2fc0:	47a8      	blx	r5
	delay_us(10);
    2fc2:	200a      	movs	r0, #10
    2fc4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    2fca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    2fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fd2:	bf00      	nop
    2fd4:	41008000 	.word	0x41008000
    2fd8:	00000db5 	.word	0x00000db5

00002fdc <python480SetGain>:
{
    2fdc:	b508      	push	{r3, lr}
	switch (value)
    2fde:	2802      	cmp	r0, #2
    2fe0:	d00d      	beq.n	2ffe <python480SetGain+0x22>
    2fe2:	2804      	cmp	r0, #4
    2fe4:	d010      	beq.n	3008 <python480SetGain+0x2c>
    2fe6:	2801      	cmp	r0, #1
    2fe8:	d004      	beq.n	2ff4 <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    2fea:	21e1      	movs	r1, #225	; 0xe1
    2fec:	20cc      	movs	r0, #204	; 0xcc
    2fee:	4b09      	ldr	r3, [pc, #36]	; (3014 <python480SetGain+0x38>)
    2ff0:	4798      	blx	r3
    2ff2:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    2ff4:	21e1      	movs	r1, #225	; 0xe1
    2ff6:	20cc      	movs	r0, #204	; 0xcc
    2ff8:	4b06      	ldr	r3, [pc, #24]	; (3014 <python480SetGain+0x38>)
    2ffa:	4798      	blx	r3
		break;
    2ffc:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    2ffe:	21e4      	movs	r1, #228	; 0xe4
    3000:	20cc      	movs	r0, #204	; 0xcc
    3002:	4b04      	ldr	r3, [pc, #16]	; (3014 <python480SetGain+0x38>)
    3004:	4798      	blx	r3
		break;
    3006:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    3008:	2124      	movs	r1, #36	; 0x24
    300a:	20cc      	movs	r0, #204	; 0xcc
    300c:	4b01      	ldr	r3, [pc, #4]	; (3014 <python480SetGain+0x38>)
    300e:	4798      	blx	r3
		break;
    3010:	bd08      	pop	{r3, pc}
    3012:	bf00      	nop
    3014:	00002f0d 	.word	0x00002f0d

00003018 <python480SetFPS>:
{
    3018:	b508      	push	{r3, lr}
	switch (value)
    301a:	280a      	cmp	r0, #10
    301c:	d00a      	beq.n	3034 <python480SetFPS+0x1c>
    301e:	280f      	cmp	r0, #15
    3020:	d00e      	beq.n	3040 <python480SetFPS+0x28>
    3022:	2805      	cmp	r0, #5
    3024:	d000      	beq.n	3028 <python480SetFPS+0x10>
    3026:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 20000);
    3028:	f644 6120 	movw	r1, #20000	; 0x4e20
    302c:	20c9      	movs	r0, #201	; 0xc9
    302e:	4b07      	ldr	r3, [pc, #28]	; (304c <python480SetFPS+0x34>)
    3030:	4798      	blx	r3
		break;
    3032:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    3034:	f242 7110 	movw	r1, #10000	; 0x2710
    3038:	20c9      	movs	r0, #201	; 0xc9
    303a:	4b04      	ldr	r3, [pc, #16]	; (304c <python480SetFPS+0x34>)
    303c:	4798      	blx	r3
		break;
    303e:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    3040:	f641 210b 	movw	r1, #6667	; 0x1a0b
    3044:	20c9      	movs	r0, #201	; 0xc9
    3046:	4b01      	ldr	r3, [pc, #4]	; (304c <python480SetFPS+0x34>)
    3048:	4798      	blx	r3
}
    304a:	e7ec      	b.n	3026 <python480SetFPS+0xe>
    304c:	00002f0d 	.word	0x00002f0d

00003050 <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
    3050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3054:	b082      	sub	sp, #8
    3056:	4606      	mov	r6, r0
    3058:	4d33      	ldr	r5, [pc, #204]	; (3128 <spi_BB_Read+0xd8>)
    305a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    305e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    3062:	200a      	movs	r0, #10
    3064:	4c31      	ldr	r4, [pc, #196]	; (312c <spi_BB_Read+0xdc>)
    3066:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3068:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    306c:	200a      	movs	r0, #10
    306e:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3070:	2408      	movs	r4, #8
    3072:	e00c      	b.n	308e <spi_BB_Read+0x3e>
    3074:	2210      	movs	r2, #16
    3076:	4b2c      	ldr	r3, [pc, #176]	; (3128 <spi_BB_Read+0xd8>)
    3078:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    307a:	200a      	movs	r0, #10
    307c:	4d2b      	ldr	r5, [pc, #172]	; (312c <spi_BB_Read+0xdc>)
    307e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3080:	2220      	movs	r2, #32
    3082:	4b29      	ldr	r3, [pc, #164]	; (3128 <spi_BB_Read+0xd8>)
    3084:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3086:	200a      	movs	r0, #10
    3088:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    308a:	3c01      	subs	r4, #1
    308c:	b264      	sxtb	r4, r4
    308e:	2c00      	cmp	r4, #0
    3090:	db0b      	blt.n	30aa <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3092:	2220      	movs	r2, #32
    3094:	4b24      	ldr	r3, [pc, #144]	; (3128 <spi_BB_Read+0xd8>)
    3096:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3098:	fa46 f304 	asr.w	r3, r6, r4
    309c:	f013 0f01 	tst.w	r3, #1
    30a0:	d0e8      	beq.n	3074 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30a2:	2210      	movs	r2, #16
    30a4:	4b20      	ldr	r3, [pc, #128]	; (3128 <spi_BB_Read+0xd8>)
    30a6:	619a      	str	r2, [r3, #24]
    30a8:	e7e7      	b.n	307a <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30aa:	4c1f      	ldr	r4, [pc, #124]	; (3128 <spi_BB_Read+0xd8>)
    30ac:	2620      	movs	r6, #32
    30ae:	6166      	str	r6, [r4, #20]
    30b0:	2310      	movs	r3, #16
    30b2:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    30b4:	200a      	movs	r0, #10
    30b6:	4d1d      	ldr	r5, [pc, #116]	; (312c <spi_BB_Read+0xdc>)
    30b8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30ba:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    30bc:	200a      	movs	r0, #10
    30be:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30c0:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    30c2:	200a      	movs	r0, #10
    30c4:	47a8      	blx	r5
	uint16_t value = 0;
    30c6:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    30c8:	250f      	movs	r5, #15
    30ca:	e01e      	b.n	310a <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30cc:	4c16      	ldr	r4, [pc, #88]	; (3128 <spi_BB_Read+0xd8>)
    30ce:	f04f 0820 	mov.w	r8, #32
    30d2:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    30d6:	200a      	movs	r0, #10
    30d8:	4e14      	ldr	r6, [pc, #80]	; (312c <spi_BB_Read+0xdc>)
    30da:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30dc:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    30e0:	a801      	add	r0, sp, #4
    30e2:	4b13      	ldr	r3, [pc, #76]	; (3130 <spi_BB_Read+0xe0>)
    30e4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    30e6:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    30e8:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    30ea:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    30ec:	405c      	eors	r4, r3
    30ee:	4014      	ands	r4, r2
    30f0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    30f2:	a801      	add	r0, sp, #4
    30f4:	4b0f      	ldr	r3, [pc, #60]	; (3134 <spi_BB_Read+0xe4>)
    30f6:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    30f8:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    30fc:	40ac      	lsls	r4, r5
    30fe:	433c      	orrs	r4, r7
    3100:	b2a7      	uxth	r7, r4
		delay_us(10);	
    3102:	200a      	movs	r0, #10
    3104:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    3106:	3d01      	subs	r5, #1
    3108:	b26d      	sxtb	r5, r5
    310a:	2d00      	cmp	r5, #0
    310c:	dade      	bge.n	30cc <spi_BB_Read+0x7c>
	}
	delay_us(10);
    310e:	200a      	movs	r0, #10
    3110:	4b06      	ldr	r3, [pc, #24]	; (312c <spi_BB_Read+0xdc>)
    3112:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3118:	4b03      	ldr	r3, [pc, #12]	; (3128 <spi_BB_Read+0xd8>)
    311a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    311e:	4638      	mov	r0, r7
    3120:	b002      	add	sp, #8
    3122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3126:	bf00      	nop
    3128:	41008000 	.word	0x41008000
    312c:	00000db5 	.word	0x00000db5
    3130:	00000d41 	.word	0x00000d41
    3134:	00000d4f 	.word	0x00000d4f

00003138 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    3138:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    313a:	2100      	movs	r1, #0
    313c:	2002      	movs	r0, #2
    313e:	4c0e      	ldr	r4, [pc, #56]	; (3178 <EnableClockMngmnt1+0x40>)
    3140:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    3142:	f242 1113 	movw	r1, #8467	; 0x2113
    3146:	2011      	movs	r0, #17
    3148:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    314a:	2100      	movs	r1, #0
    314c:	2014      	movs	r0, #20
    314e:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    3150:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    3154:	201a      	movs	r0, #26
    3156:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    3158:	f643 512d 	movw	r1, #15661	; 0x3d2d
    315c:	201b      	movs	r0, #27
    315e:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    3160:	f247 011c 	movw	r1, #28700	; 0x701c
    3164:	2020      	movs	r0, #32
    3166:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    3168:	2100      	movs	r1, #0
    316a:	2008      	movs	r0, #8
    316c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    316e:	2107      	movs	r1, #7
    3170:	2010      	movs	r0, #16
    3172:	47a0      	blx	r4
    3174:	bd10      	pop	{r4, pc}
    3176:	bf00      	nop
    3178:	00002f0d 	.word	0x00002f0d

0000317c <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    317c:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    317e:	2100      	movs	r1, #0
    3180:	2009      	movs	r0, #9
    3182:	4c05      	ldr	r4, [pc, #20]	; (3198 <EnableClockMngmnt2+0x1c>)
    3184:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    3186:	f247 010e 	movw	r1, #28686	; 0x700e
    318a:	2020      	movs	r0, #32
    318c:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    318e:	2101      	movs	r1, #1
    3190:	2022      	movs	r0, #34	; 0x22
    3192:	47a0      	blx	r4
    3194:	bd10      	pop	{r4, pc}
    3196:	bf00      	nop
    3198:	00002f0d 	.word	0x00002f0d

0000319c <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    319c:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    319e:	2100      	movs	r1, #0
    31a0:	2002      	movs	r0, #2
    31a2:	4ccd      	ldr	r4, [pc, #820]	; (34d8 <RequiredUploads+0x33c>)
    31a4:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    31a6:	2100      	movs	r1, #0
    31a8:	2008      	movs	r0, #8
    31aa:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    31ac:	2100      	movs	r1, #0
    31ae:	2009      	movs	r0, #9
    31b0:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    31b2:	2100      	movs	r1, #0
    31b4:	200a      	movs	r0, #10
    31b6:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    31b8:	2100      	movs	r1, #0
    31ba:	2014      	movs	r0, #20
    31bc:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    31be:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    31c2:	201a      	movs	r0, #26
    31c4:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    31c6:	f643 512d 	movw	r1, #15661	; 0x3d2d
    31ca:	201b      	movs	r0, #27
    31cc:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    31ce:	f247 010f 	movw	r1, #28687	; 0x700f
    31d2:	2020      	movs	r0, #32
    31d4:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    31d6:	2101      	movs	r1, #1
    31d8:	2022      	movs	r0, #34	; 0x22
    31da:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    31dc:	2107      	movs	r1, #7
    31de:	2028      	movs	r0, #40	; 0x28
    31e0:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    31e2:	f640 015f 	movw	r1, #2143	; 0x85f
    31e6:	2029      	movs	r0, #41	; 0x29
    31e8:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    31ea:	f244 1103 	movw	r1, #16643	; 0x4103
    31ee:	202a      	movs	r0, #42	; 0x2a
    31f0:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    31f2:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    31f6:	202b      	movs	r0, #43	; 0x2b
    31f8:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    31fa:	2101      	movs	r1, #1
    31fc:	2030      	movs	r0, #48	; 0x30
    31fe:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3200:	2101      	movs	r1, #1
    3202:	2040      	movs	r0, #64	; 0x40
    3204:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3206:	f643 012a 	movw	r1, #14378	; 0x382a
    320a:	2041      	movs	r0, #65	; 0x41
    320c:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    320e:	f245 31c8 	movw	r1, #21448	; 0x53c8
    3212:	2042      	movs	r0, #66	; 0x42
    3214:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    3216:	f240 6165 	movw	r1, #1637	; 0x665
    321a:	2043      	movs	r0, #67	; 0x43
    321c:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    321e:	2185      	movs	r1, #133	; 0x85
    3220:	2044      	movs	r0, #68	; 0x44
    3222:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    3224:	f640 0188 	movw	r1, #2184	; 0x888
    3228:	2045      	movs	r0, #69	; 0x45
    322a:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    322c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    3230:	2046      	movs	r0, #70	; 0x46
    3232:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    3234:	f648 0188 	movw	r1, #34952	; 0x8888
    3238:	2047      	movs	r0, #71	; 0x47
    323a:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    323c:	f240 1117 	movw	r1, #279	; 0x117
    3240:	2048      	movs	r0, #72	; 0x48
    3242:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    3244:	2100      	movs	r1, #0
    3246:	2070      	movs	r0, #112	; 0x70
    3248:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    324a:	f244 710a 	movw	r1, #18186	; 0x470a
    324e:	2080      	movs	r0, #128	; 0x80
    3250:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    3252:	f248 0101 	movw	r1, #32769	; 0x8001
    3256:	2081      	movs	r0, #129	; 0x81
    3258:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    325a:	2115      	movs	r1, #21
    325c:	2082      	movs	r0, #130	; 0x82
    325e:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function
    3260:	f640 0101 	movw	r1, #2049	; 0x801
    3264:	20c0      	movs	r0, #192	; 0xc0
    3266:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    3268:	21e4      	movs	r1, #228	; 0xe4
    326a:	20c2      	movs	r0, #194	; 0xc2
    326c:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    326e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3272:	20c5      	movs	r0, #197	; 0xc5
    3274:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    3276:	21a7      	movs	r1, #167	; 0xa7
    3278:	20c7      	movs	r0, #199	; 0xc7
    327a:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    327c:	f640 41e4 	movw	r1, #3300	; 0xce4
    3280:	20c8      	movs	r0, #200	; 0xc8
    3282:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    3284:	f640 41e4 	movw	r1, #3300	; 0xce4
    3288:	20c9      	movs	r0, #201	; 0xc9
    328a:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    328c:	21e4      	movs	r1, #228	; 0xe4
    328e:	20cc      	movs	r0, #204	; 0xcc
    3290:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    3292:	2114      	movs	r1, #20
    3294:	20cf      	movs	r0, #207	; 0xcf
    3296:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3298:	f44f 7180 	mov.w	r1, #256	; 0x100
    329c:	20d6      	movs	r0, #214	; 0xd6
    329e:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    32a0:	f241 011f 	movw	r1, #4127	; 0x101f
    32a4:	20d7      	movs	r0, #215	; 0xd7
    32a6:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    32a8:	2100      	movs	r1, #0
    32aa:	20d8      	movs	r0, #216	; 0xd8
    32ac:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    32ae:	2123      	movs	r1, #35	; 0x23
    32b0:	20db      	movs	r0, #219	; 0xdb
    32b2:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    32b4:	f643 412b 	movw	r1, #15403	; 0x3c2b
    32b8:	20dc      	movs	r0, #220	; 0xdc
    32ba:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    32bc:	f642 314d 	movw	r1, #11085	; 0x2b4d
    32c0:	20dd      	movs	r0, #221	; 0xdd
    32c2:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    32c4:	f643 615e 	movw	r1, #15966	; 0x3e5e
    32c8:	20e0      	movs	r0, #224	; 0xe0
    32ca:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    32cc:	2149      	movs	r1, #73	; 0x49
    32ce:	20d3      	movs	r0, #211	; 0xd3
    32d0:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    32d2:	2100      	movs	r1, #0
    32d4:	20d8      	movs	r0, #216	; 0xd8
    32d6:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    32d8:	2123      	movs	r1, #35	; 0x23
    32da:	20db      	movs	r0, #219	; 0xdb
    32dc:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    32de:	f643 412b 	movw	r1, #15403	; 0x3c2b
    32e2:	20dc      	movs	r0, #220	; 0xdc
    32e4:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    32e6:	f642 314d 	movw	r1, #11085	; 0x2b4d
    32ea:	20dd      	movs	r0, #221	; 0xdd
    32ec:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    32ee:	f240 2199 	movw	r1, #665	; 0x299
    32f2:	20e6      	movs	r0, #230	; 0xe6
    32f4:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    32f6:	f44f 7154 	mov.w	r1, #848	; 0x350
    32fa:	20e7      	movs	r0, #231	; 0xe7
    32fc:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    32fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3302:	20e8      	movs	r0, #232	; 0xe8
    3304:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3306:	21e1      	movs	r1, #225	; 0xe1
    3308:	20eb      	movs	r0, #235	; 0xeb
    330a:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    330c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3310:	f44f 7080 	mov.w	r0, #256	; 0x100
    3314:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    3316:	f24b 0119 	movw	r1, #45081	; 0xb019
    331a:	f44f 7081 	mov.w	r0, #258	; 0x102
    331e:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    3320:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3324:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3328:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    332a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    332e:	f240 1081 	movw	r0, #385	; 0x181
    3332:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3334:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3338:	f44f 70c1 	mov.w	r0, #386	; 0x182
    333c:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    333e:	f64f 3112 	movw	r1, #64274	; 0xfb12
    3342:	f240 1083 	movw	r0, #387	; 0x183
    3346:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3348:	f64f 1112 	movw	r1, #63762	; 0xf912
    334c:	f44f 70c2 	mov.w	r0, #388	; 0x184
    3350:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    3352:	f64f 1103 	movw	r1, #63747	; 0xf903
    3356:	f240 1085 	movw	r0, #389	; 0x185
    335a:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    335c:	f64f 0102 	movw	r1, #63490	; 0xf802
    3360:	f44f 70c3 	mov.w	r0, #390	; 0x186
    3364:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    3366:	f24f 310f 	movw	r1, #62223	; 0xf30f
    336a:	f240 1087 	movw	r0, #391	; 0x187
    336e:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    3370:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3374:	f44f 70c4 	mov.w	r0, #392	; 0x188
    3378:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    337a:	f24f 310f 	movw	r1, #62223	; 0xf30f
    337e:	f240 1089 	movw	r0, #393	; 0x189
    3382:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3384:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3388:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    338c:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    338e:	f24f 1101 	movw	r1, #61697	; 0xf101
    3392:	f240 108b 	movw	r0, #395	; 0x18b
    3396:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3398:	f24f 010a 	movw	r1, #61450	; 0xf00a
    339c:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    33a0:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    33a2:	f24f 214b 	movw	r1, #62027	; 0xf24b
    33a6:	f240 108d 	movw	r0, #397	; 0x18d
    33aa:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    33ac:	f24f 2101 	movw	r1, #61953	; 0xf201
    33b0:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    33b4:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    33b6:	f24f 2126 	movw	r1, #61990	; 0xf226
    33ba:	f240 108f 	movw	r0, #399	; 0x18f
    33be:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    33c0:	f24f 0121 	movw	r1, #61473	; 0xf021
    33c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    33c8:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    33ca:	f24f 0101 	movw	r1, #61441	; 0xf001
    33ce:	f240 1091 	movw	r0, #401	; 0x191
    33d2:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    33d4:	f24f 4102 	movw	r1, #62466	; 0xf402
    33d8:	f44f 70c9 	mov.w	r0, #402	; 0x192
    33dc:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    33de:	f24f 0107 	movw	r1, #61447	; 0xf007
    33e2:	f240 1093 	movw	r0, #403	; 0x193
    33e6:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    33e8:	f24f 210f 	movw	r1, #61967	; 0xf20f
    33ec:	f44f 70ca 	mov.w	r0, #404	; 0x194
    33f0:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    33f2:	f24f 210f 	movw	r1, #61967	; 0xf20f
    33f6:	f240 1095 	movw	r0, #405	; 0x195
    33fa:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    33fc:	f24f 2102 	movw	r1, #61954	; 0xf202
    3400:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3404:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3406:	f24f 0106 	movw	r1, #61446	; 0xf006
    340a:	f240 1097 	movw	r0, #407	; 0x197
    340e:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3410:	f64e 4108 	movw	r1, #60424	; 0xec08
    3414:	f44f 70cc 	mov.w	r0, #408	; 0x198
    3418:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    341a:	f64c 0101 	movw	r1, #51201	; 0xc801
    341e:	f240 1099 	movw	r0, #409	; 0x199
    3422:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3424:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3428:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    342c:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    342e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3432:	f240 10a3 	movw	r0, #419	; 0x1a3
    3436:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3438:	f64c 4102 	movw	r1, #52226	; 0xcc02
    343c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    3440:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    3442:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3446:	f240 10a5 	movw	r0, #421	; 0x1a5
    344a:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    344c:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3450:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    3454:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    3456:	f64c 4101 	movw	r1, #52225	; 0xcc01
    345a:	f240 10a7 	movw	r0, #423	; 0x1a7
    345e:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    3460:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3464:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    3468:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    346a:	f64c 0105 	movw	r1, #51205	; 0xc805
    346e:	f240 10a9 	movw	r0, #425	; 0x1a9
    3472:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3474:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3478:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    347c:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    347e:	2130      	movs	r1, #48	; 0x30
    3480:	f240 10ab 	movw	r0, #427	; 0x1ab
    3484:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3486:	f242 017b 	movw	r1, #8315	; 0x207b
    348a:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    348e:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    3490:	f242 0171 	movw	r1, #8305	; 0x2071
    3494:	f240 10ad 	movw	r0, #429	; 0x1ad
    3498:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    349a:	2171      	movs	r1, #113	; 0x71
    349c:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    34a0:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    34a2:	f241 017f 	movw	r1, #4223	; 0x107f
    34a6:	f240 10af 	movw	r0, #431	; 0x1af
    34aa:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    34ac:	f241 0172 	movw	r1, #4210	; 0x1072
    34b0:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    34b4:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    34b6:	f241 0174 	movw	r1, #4212	; 0x1074
    34ba:	f240 10b1 	movw	r0, #433	; 0x1b1
    34be:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    34c0:	2171      	movs	r1, #113	; 0x71
    34c2:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    34c6:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    34c8:	2131      	movs	r1, #49	; 0x31
    34ca:	f240 10b3 	movw	r0, #435	; 0x1b3
    34ce:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    34d0:	f242 11bb 	movw	r1, #8635	; 0x21bb
    34d4:	e002      	b.n	34dc <RequiredUploads+0x340>
    34d6:	bf00      	nop
    34d8:	00002f0d 	.word	0x00002f0d
    34dc:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    34e0:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    34e2:	f242 01b1 	movw	r1, #8369	; 0x20b1
    34e6:	f240 10b5 	movw	r0, #437	; 0x1b5
    34ea:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    34ec:	21b1      	movs	r1, #177	; 0xb1
    34ee:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    34f2:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    34f4:	f241 01bf 	movw	r1, #4287	; 0x10bf
    34f8:	f240 10b7 	movw	r0, #439	; 0x1b7
    34fc:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    34fe:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3502:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3506:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3508:	f241 01b4 	movw	r1, #4276	; 0x10b4
    350c:	f240 10b9 	movw	r0, #441	; 0x1b9
    3510:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    3512:	21b1      	movs	r1, #177	; 0xb1
    3514:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    3518:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    351a:	2130      	movs	r1, #48	; 0x30
    351c:	f240 10bb 	movw	r0, #443	; 0x1bb
    3520:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    3522:	2130      	movs	r1, #48	; 0x30
    3524:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    3528:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    352a:	f242 117b 	movw	r1, #8571	; 0x217b
    352e:	f240 10bd 	movw	r0, #445	; 0x1bd
    3532:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3534:	f242 0171 	movw	r1, #8305	; 0x2071
    3538:	f44f 70df 	mov.w	r0, #446	; 0x1be
    353c:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    353e:	2171      	movs	r1, #113	; 0x71
    3540:	f240 10bf 	movw	r0, #447	; 0x1bf
    3544:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3546:	f241 017f 	movw	r1, #4223	; 0x107f
    354a:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    354e:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3550:	f241 0172 	movw	r1, #4210	; 0x1072
    3554:	f240 10c1 	movw	r0, #449	; 0x1c1
    3558:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    355a:	f241 0174 	movw	r1, #4212	; 0x1074
    355e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    3562:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3564:	2171      	movs	r1, #113	; 0x71
    3566:	f240 10c3 	movw	r0, #451	; 0x1c3
    356a:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    356c:	2131      	movs	r1, #49	; 0x31
    356e:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    3572:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3574:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3578:	f240 10c5 	movw	r0, #453	; 0x1c5
    357c:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    357e:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3582:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3586:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3588:	21b1      	movs	r1, #177	; 0xb1
    358a:	f240 10c7 	movw	r0, #455	; 0x1c7
    358e:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    3590:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3594:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3598:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    359a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    359e:	f240 10c9 	movw	r0, #457	; 0x1c9
    35a2:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    35a4:	f241 01b4 	movw	r1, #4276	; 0x10b4
    35a8:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    35ac:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    35ae:	21b1      	movs	r1, #177	; 0xb1
    35b0:	f240 10cb 	movw	r0, #459	; 0x1cb
    35b4:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    35b6:	2130      	movs	r1, #48	; 0x30
    35b8:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    35bc:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    35be:	2130      	movs	r1, #48	; 0x30
    35c0:	f240 10cd 	movw	r0, #461	; 0x1cd
    35c4:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    35c6:	f242 117b 	movw	r1, #8571	; 0x217b
    35ca:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    35ce:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    35d0:	f242 0171 	movw	r1, #8305	; 0x2071
    35d4:	f240 10cf 	movw	r0, #463	; 0x1cf
    35d8:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    35da:	2171      	movs	r1, #113	; 0x71
    35dc:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    35e0:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    35e2:	f241 0171 	movw	r1, #4209	; 0x1071
    35e6:	f240 10d1 	movw	r0, #465	; 0x1d1
    35ea:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    35ec:	2171      	movs	r1, #113	; 0x71
    35ee:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    35f2:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    35f4:	2131      	movs	r1, #49	; 0x31
    35f6:	f240 10d3 	movw	r0, #467	; 0x1d3
    35fa:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    35fc:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3600:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3604:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3606:	f242 01b1 	movw	r1, #8369	; 0x20b1
    360a:	f240 10d5 	movw	r0, #469	; 0x1d5
    360e:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3610:	21b1      	movs	r1, #177	; 0xb1
    3612:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    3616:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    3618:	f241 01b3 	movw	r1, #4275	; 0x10b3
    361c:	f240 10d7 	movw	r0, #471	; 0x1d7
    3620:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    3622:	f241 01b1 	movw	r1, #4273	; 0x10b1
    3626:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    362a:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    362c:	21b1      	movs	r1, #177	; 0xb1
    362e:	f240 10d9 	movw	r0, #473	; 0x1d9
    3632:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3634:	213f      	movs	r1, #63	; 0x3f
    3636:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    363a:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    363c:	2132      	movs	r1, #50	; 0x32
    363e:	f240 10db 	movw	r0, #475	; 0x1db
    3642:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3644:	2130      	movs	r1, #48	; 0x30
    3646:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    364a:	47a0      	blx	r4
    364c:	bd10      	pop	{r4, pc}
    364e:	bf00      	nop

00003650 <SoftPowerUp>:
}

void SoftPowerUp() {
    3650:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3652:	2100      	movs	r1, #0
    3654:	200a      	movs	r0, #10
    3656:	4c0d      	ldr	r4, [pc, #52]	; (368c <SoftPowerUp+0x3c>)
    3658:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    365a:	f247 010f 	movw	r1, #28687	; 0x700f
    365e:	2020      	movs	r0, #32
    3660:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    3662:	2107      	movs	r1, #7
    3664:	2028      	movs	r0, #40	; 0x28
    3666:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3668:	f244 1113 	movw	r1, #16659	; 0x4113
    366c:	202a      	movs	r0, #42	; 0x2a
    366e:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    3670:	2101      	movs	r1, #1
    3672:	2030      	movs	r0, #48	; 0x30
    3674:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3676:	2101      	movs	r1, #1
    3678:	2040      	movs	r0, #64	; 0x40
    367a:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    367c:	f240 1127 	movw	r1, #295	; 0x127
    3680:	2048      	movs	r0, #72	; 0x48
    3682:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3684:	2100      	movs	r1, #0
    3686:	2070      	movs	r0, #112	; 0x70
    3688:	47a0      	blx	r4
    368a:	bd10      	pop	{r4, pc}
    368c:	00002f0d 	.word	0x00002f0d

00003690 <python480Init>:
{
    3690:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    3692:	4b06      	ldr	r3, [pc, #24]	; (36ac <python480Init+0x1c>)
    3694:	4798      	blx	r3
	delay_ms(10);
    3696:	200a      	movs	r0, #10
    3698:	4b05      	ldr	r3, [pc, #20]	; (36b0 <python480Init+0x20>)
    369a:	4798      	blx	r3
	EnableClockMngmnt2();
    369c:	4b05      	ldr	r3, [pc, #20]	; (36b4 <python480Init+0x24>)
    369e:	4798      	blx	r3
	RequiredUploads();
    36a0:	4b05      	ldr	r3, [pc, #20]	; (36b8 <python480Init+0x28>)
    36a2:	4798      	blx	r3
	SoftPowerUp();
    36a4:	4b05      	ldr	r3, [pc, #20]	; (36bc <python480Init+0x2c>)
    36a6:	4798      	blx	r3
    36a8:	bd08      	pop	{r3, pc}
    36aa:	bf00      	nop
    36ac:	00003139 	.word	0x00003139
    36b0:	00000dd5 	.word	0x00000dd5
    36b4:	0000317d 	.word	0x0000317d
    36b8:	0000319d 	.word	0x0000319d
    36bc:	00003651 	.word	0x00003651

000036c0 <getCurrentTimeMS>:
	return timeMS;
    36c0:	4b01      	ldr	r3, [pc, #4]	; (36c8 <getCurrentTimeMS+0x8>)
    36c2:	6818      	ldr	r0, [r3, #0]
}
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	20000224 	.word	0x20000224

000036cc <getPropFromHeader>:
	return header32bit[headerPos];
    36cc:	4b02      	ldr	r3, [pc, #8]	; (36d8 <getPropFromHeader+0xc>)
    36ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    36d2:	6840      	ldr	r0, [r0, #4]
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop
    36d8:	20000224 	.word	0x20000224

000036dc <setStatusLED>:
	if (level) {
    36dc:	b928      	cbnz	r0, 36ea <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36de:	f44f 7200 	mov.w	r2, #512	; 0x200
    36e2:	4b05      	ldr	r3, [pc, #20]	; (36f8 <setStatusLED+0x1c>)
    36e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    36e8:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    36ee:	4b02      	ldr	r3, [pc, #8]	; (36f8 <setStatusLED+0x1c>)
    36f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	41008000 	.word	0x41008000

000036fc <startRecording>:
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void startRecording()
{
    36fc:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    36fe:	2400      	movs	r4, #0
    3700:	4b0a      	ldr	r3, [pc, #40]	; (372c <startRecording+0x30>)
    3702:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    3704:	4b0a      	ldr	r3, [pc, #40]	; (3730 <startRecording+0x34>)
    3706:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    3708:	4b0a      	ldr	r3, [pc, #40]	; (3734 <startRecording+0x38>)
    370a:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    370c:	4b0a      	ldr	r3, [pc, #40]	; (3738 <startRecording+0x3c>)
    370e:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    3710:	4b0a      	ldr	r3, [pc, #40]	; (373c <startRecording+0x40>)
    3712:	601c      	str	r4, [r3, #0]
	
	startTimeMS = getCurrentTimeMS();
    3714:	4b0a      	ldr	r3, [pc, #40]	; (3740 <startRecording+0x44>)
    3716:	4798      	blx	r3
    3718:	4b0a      	ldr	r3, [pc, #40]	; (3744 <startRecording+0x48>)
    371a:	6018      	str	r0, [r3, #0]
	
	deviceState &= !(DEVICE_STATE_START_RECORDING);
    371c:	4b0a      	ldr	r3, [pc, #40]	; (3748 <startRecording+0x4c>)
    371e:	681a      	ldr	r2, [r3, #0]
    3720:	601c      	str	r4, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3722:	681a      	ldr	r2, [r3, #0]
    3724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3728:	601a      	str	r2, [r3, #0]
    372a:	bd10      	pop	{r4, pc}
    372c:	20000bd8 	.word	0x20000bd8
    3730:	20000bd4 	.word	0x20000bd4
    3734:	20000b84 	.word	0x20000b84
    3738:	20000bd0 	.word	0x20000bd0
    373c:	20000b80 	.word	0x20000b80
    3740:	000036c1 	.word	0x000036c1
    3744:	20000bcc 	.word	0x20000bcc
    3748:	20000028 	.word	0x20000028

0000374c <stopRecording>:
}

void stopRecording()
{
    374c:	b510      	push	{r4, lr}
	// TODO: Change status LEDs
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
    374e:	4b0f      	ldr	r3, [pc, #60]	; (378c <stopRecording+0x40>)
    3750:	681b      	ldr	r3, [r3, #0]
    3752:	b2db      	uxtb	r3, r3
    3754:	4c0e      	ldr	r4, [pc, #56]	; (3790 <stopRecording+0x44>)
    3756:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    375a:	4b0e      	ldr	r3, [pc, #56]	; (3794 <stopRecording+0x48>)
    375c:	681b      	ldr	r3, [r3, #0]
    375e:	b2db      	uxtb	r3, r3
    3760:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    3764:	2201      	movs	r2, #1
    3766:	f44f 6180 	mov.w	r1, #1024	; 0x400
    376a:	2000      	movs	r0, #0
    376c:	4b0a      	ldr	r3, [pc, #40]	; (3798 <stopRecording+0x4c>)
    376e:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3770:	2101      	movs	r1, #1
    3772:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3776:	4b09      	ldr	r3, [pc, #36]	; (379c <stopRecording+0x50>)
    3778:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    377a:	2000      	movs	r0, #0
    377c:	4b08      	ldr	r3, [pc, #32]	; (37a0 <stopRecording+0x54>)
    377e:	4798      	blx	r3
	
	deviceState |= DEVICE_STATE_STOP_RECORDING;
    3780:	4a08      	ldr	r2, [pc, #32]	; (37a4 <stopRecording+0x58>)
    3782:	6813      	ldr	r3, [r2, #0]
    3784:	f043 0310 	orr.w	r3, r3, #16
    3788:	6013      	str	r3, [r2, #0]
    378a:	bd10      	pop	{r4, pc}
    378c:	20000bd4 	.word	0x20000bd4
    3790:	20000224 	.word	0x20000224
    3794:	20000b84 	.word	0x20000b84
    3798:	00003d21 	.word	0x00003d21
    379c:	00003dc1 	.word	0x00003dc1
    37a0:	00003e0d 	.word	0x00003e0d
    37a4:	20000028 	.word	0x20000028

000037a8 <recording>:
//	deviceState &= !(DEVICE_STATE_RECORDING);	
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    37a8:	4b56      	ldr	r3, [pc, #344]	; (3904 <recording+0x15c>)
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	4a56      	ldr	r2, [pc, #344]	; (3908 <recording+0x160>)
    37ae:	6812      	ldr	r2, [r2, #0]
    37b0:	4413      	add	r3, r2
    37b2:	4a56      	ldr	r2, [pc, #344]	; (390c <recording+0x164>)
    37b4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    37b8:	4293      	cmp	r3, r2
    37ba:	f080 80a2 	bcs.w	3902 <recording+0x15a>
{
    37be:	b510      	push	{r4, lr}
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    37c0:	4b50      	ldr	r3, [pc, #320]	; (3904 <recording+0x15c>)
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	4a50      	ldr	r2, [pc, #320]	; (3908 <recording+0x160>)
    37c6:	6812      	ldr	r2, [r2, #0]
    37c8:	4413      	add	r3, r2
    37ca:	3304      	adds	r3, #4
    37cc:	4a4f      	ldr	r2, [pc, #316]	; (390c <recording+0x164>)
    37ce:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    37d2:	4293      	cmp	r3, r2
    37d4:	d221      	bcs.n	381a <recording+0x72>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
    37d6:	4b4b      	ldr	r3, [pc, #300]	; (3904 <recording+0x15c>)
    37d8:	681b      	ldr	r3, [r3, #0]
    37da:	4a4b      	ldr	r2, [pc, #300]	; (3908 <recording+0x160>)
    37dc:	6811      	ldr	r1, [r2, #0]
    37de:	440b      	add	r3, r1
    37e0:	f003 0303 	and.w	r3, r3, #3
    37e4:	f1c3 0304 	rsb	r3, r3, #4
    37e8:	6811      	ldr	r1, [r2, #0]
    37ea:	440b      	add	r3, r1
    37ec:	6013      	str	r3, [r2, #0]
			//writeFrameNum = bufferToWrite[BUFFER_HEADER_FRAME_NUM_POS];
			writeBufferCount++;
			
		}
		
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    37ee:	4b48      	ldr	r3, [pc, #288]	; (3910 <recording+0x168>)
    37f0:	4798      	blx	r3
    37f2:	4b48      	ldr	r3, [pc, #288]	; (3914 <recording+0x16c>)
    37f4:	681c      	ldr	r4, [r3, #0]
    37f6:	1b04      	subs	r4, r0, r4
    37f8:	2007      	movs	r0, #7
    37fa:	4b47      	ldr	r3, [pc, #284]	; (3918 <recording+0x170>)
    37fc:	4798      	blx	r3
    37fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3802:	fb03 f300 	mul.w	r3, r3, r0
    3806:	429c      	cmp	r4, r3
    3808:	bf34      	ite	cc
    380a:	2400      	movcc	r4, #0
    380c:	2401      	movcs	r4, #1
    380e:	2800      	cmp	r0, #0
    3810:	bf08      	it	eq
    3812:	2400      	moveq	r4, #0
    3814:	2c00      	cmp	r4, #0
    3816:	d171      	bne.n	38fc <recording+0x154>
    3818:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    381a:	4c3a      	ldr	r4, [pc, #232]	; (3904 <recording+0x15c>)
    381c:	6823      	ldr	r3, [r4, #0]
    381e:	493a      	ldr	r1, [pc, #232]	; (3908 <recording+0x160>)
    3820:	680a      	ldr	r2, [r1, #0]
    3822:	4413      	add	r3, r2
    3824:	f003 0303 	and.w	r3, r3, #3
    3828:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    382c:	0358      	lsls	r0, r3, #13
    382e:	4b3b      	ldr	r3, [pc, #236]	; (391c <recording+0x174>)
    3830:	4418      	add	r0, r3
    3832:	4b3b      	ldr	r3, [pc, #236]	; (3920 <recording+0x178>)
    3834:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3836:	6a03      	ldr	r3, [r0, #32]
    3838:	f203 2323 	addw	r3, r3, #547	; 0x223
    383c:	0a5b      	lsrs	r3, r3, #9
    383e:	4a39      	ldr	r2, [pc, #228]	; (3924 <recording+0x17c>)
    3840:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3842:	6823      	ldr	r3, [r4, #0]
    3844:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3846:	680b      	ldr	r3, [r1, #0]
    3848:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    384a:	6812      	ldr	r2, [r2, #0]
    384c:	4b36      	ldr	r3, [pc, #216]	; (3928 <recording+0x180>)
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	429a      	cmp	r2, r3
    3852:	d219      	bcs.n	3888 <recording+0xe0>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    3854:	4b33      	ldr	r3, [pc, #204]	; (3924 <recording+0x17c>)
    3856:	6819      	ldr	r1, [r3, #0]
    3858:	b289      	uxth	r1, r1
    385a:	4b34      	ldr	r3, [pc, #208]	; (392c <recording+0x184>)
    385c:	4798      	blx	r3
    385e:	b978      	cbnz	r0, 3880 <recording+0xd8>
				initBlocksRemaining -= numBlocks;
    3860:	4a30      	ldr	r2, [pc, #192]	; (3924 <recording+0x17c>)
    3862:	6810      	ldr	r0, [r2, #0]
    3864:	4930      	ldr	r1, [pc, #192]	; (3928 <recording+0x180>)
    3866:	680b      	ldr	r3, [r1, #0]
    3868:	1a1b      	subs	r3, r3, r0
    386a:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    386c:	6813      	ldr	r3, [r2, #0]
    386e:	4a30      	ldr	r2, [pc, #192]	; (3930 <recording+0x188>)
    3870:	6851      	ldr	r1, [r2, #4]
    3872:	440b      	add	r3, r1
    3874:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    3876:	4a23      	ldr	r2, [pc, #140]	; (3904 <recording+0x15c>)
    3878:	6813      	ldr	r3, [r2, #0]
    387a:	3301      	adds	r3, #1
    387c:	6013      	str	r3, [r2, #0]
    387e:	e7b6      	b.n	37ee <recording+0x46>
				sd_mmc_wait_end_of_write_blocks(false);
    3880:	2000      	movs	r0, #0
    3882:	4b2c      	ldr	r3, [pc, #176]	; (3934 <recording+0x18c>)
    3884:	4798      	blx	r3
    3886:	e7eb      	b.n	3860 <recording+0xb8>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    3888:	4b27      	ldr	r3, [pc, #156]	; (3928 <recording+0x180>)
    388a:	6819      	ldr	r1, [r3, #0]
    388c:	b289      	uxth	r1, r1
    388e:	4b27      	ldr	r3, [pc, #156]	; (392c <recording+0x184>)
    3890:	4798      	blx	r3
    3892:	b9e0      	cbnz	r0, 38ce <recording+0x126>
				currentBlock += initBlocksRemaining;
    3894:	4b24      	ldr	r3, [pc, #144]	; (3928 <recording+0x180>)
    3896:	681a      	ldr	r2, [r3, #0]
    3898:	4b25      	ldr	r3, [pc, #148]	; (3930 <recording+0x188>)
    389a:	6859      	ldr	r1, [r3, #4]
    389c:	440a      	add	r2, r1
    389e:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    38a0:	6859      	ldr	r1, [r3, #4]
    38a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    38a6:	2000      	movs	r0, #0
    38a8:	4b23      	ldr	r3, [pc, #140]	; (3938 <recording+0x190>)
    38aa:	4798      	blx	r3
    38ac:	b998      	cbnz	r0, 38d6 <recording+0x12e>
				currentBlock += numBlocks - initBlocksRemaining;
    38ae:	491d      	ldr	r1, [pc, #116]	; (3924 <recording+0x17c>)
    38b0:	680b      	ldr	r3, [r1, #0]
    38b2:	4a1d      	ldr	r2, [pc, #116]	; (3928 <recording+0x180>)
    38b4:	6810      	ldr	r0, [r2, #0]
    38b6:	1a1b      	subs	r3, r3, r0
    38b8:	481d      	ldr	r0, [pc, #116]	; (3930 <recording+0x188>)
    38ba:	6844      	ldr	r4, [r0, #4]
    38bc:	4423      	add	r3, r4
    38be:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    38c0:	6813      	ldr	r3, [r2, #0]
    38c2:	6809      	ldr	r1, [r1, #0]
    38c4:	1a5b      	subs	r3, r3, r1
    38c6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    38ca:	6013      	str	r3, [r2, #0]
    38cc:	e7d3      	b.n	3876 <recording+0xce>
				sd_mmc_wait_end_of_write_blocks(false);
    38ce:	2000      	movs	r0, #0
    38d0:	4b18      	ldr	r3, [pc, #96]	; (3934 <recording+0x18c>)
    38d2:	4798      	blx	r3
    38d4:	e7de      	b.n	3894 <recording+0xec>
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    38d6:	4b12      	ldr	r3, [pc, #72]	; (3920 <recording+0x178>)
    38d8:	681a      	ldr	r2, [r3, #0]
    38da:	4b13      	ldr	r3, [pc, #76]	; (3928 <recording+0x180>)
    38dc:	6818      	ldr	r0, [r3, #0]
    38de:	4911      	ldr	r1, [pc, #68]	; (3924 <recording+0x17c>)
    38e0:	6809      	ldr	r1, [r1, #0]
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	1ac9      	subs	r1, r1, r3
    38e6:	b289      	uxth	r1, r1
    38e8:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    38ec:	4b0f      	ldr	r3, [pc, #60]	; (392c <recording+0x184>)
    38ee:	4798      	blx	r3
    38f0:	2800      	cmp	r0, #0
    38f2:	d0dc      	beq.n	38ae <recording+0x106>
				sd_mmc_wait_end_of_write_blocks(false);
    38f4:	2000      	movs	r0, #0
    38f6:	4b0f      	ldr	r3, [pc, #60]	; (3934 <recording+0x18c>)
    38f8:	4798      	blx	r3
    38fa:	e7d8      	b.n	38ae <recording+0x106>
			// Recording time has elapsed
			stopRecording();			
    38fc:	4b0f      	ldr	r3, [pc, #60]	; (393c <recording+0x194>)
    38fe:	4798      	blx	r3
			
		}
		
	}
	
}
    3900:	e78a      	b.n	3818 <recording+0x70>
    3902:	4770      	bx	lr
    3904:	20000bd4 	.word	0x20000bd4
    3908:	20000b84 	.word	0x20000b84
    390c:	20000224 	.word	0x20000224
    3910:	000036c1 	.word	0x000036c1
    3914:	20000bcc 	.word	0x20000bcc
    3918:	000036cd 	.word	0x000036cd
    391c:	20000bdc 	.word	0x20000bdc
    3920:	20000bc8 	.word	0x20000bc8
    3924:	20028bdc 	.word	0x20028bdc
    3928:	20028be0 	.word	0x20028be0
    392c:	00003dc1 	.word	0x00003dc1
    3930:	20000028 	.word	0x20000028
    3934:	00003e0d 	.word	0x00003e0d
    3938:	00003d21 	.word	0x00003d21
    393c:	0000374d 	.word	0x0000374d

00003940 <main>:

int main(void)
{
    3940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3944:	b082      	sub	sp, #8
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3946:	4b4d      	ldr	r3, [pc, #308]	; (3a7c <main+0x13c>)
    3948:	4798      	blx	r3
    394a:	4e4d      	ldr	r6, [pc, #308]	; (3a80 <main+0x140>)
    394c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3950:	61b3      	str	r3, [r6, #24]
	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	setStatusLED(1);
    3952:	2001      	movs	r0, #1
    3954:	4b4b      	ldr	r3, [pc, #300]	; (3a84 <main+0x144>)
    3956:	4798      	blx	r3
	/*
	I2C_BB_init();
	*/
	
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3958:	2100      	movs	r1, #0
    395a:	484b      	ldr	r0, [pc, #300]	; (3a88 <main+0x148>)
    395c:	4b4b      	ldr	r3, [pc, #300]	; (3a8c <main+0x14c>)
    395e:	4798      	blx	r3
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
	*/
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    3960:	4c4b      	ldr	r4, [pc, #300]	; (3a90 <main+0x150>)
    3962:	2501      	movs	r5, #1
    3964:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3968:	4b4a      	ldr	r3, [pc, #296]	; (3a94 <main+0x154>)
    396a:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    396e:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    3972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3976:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    397a:	4b47      	ldr	r3, [pc, #284]	; (3a98 <main+0x158>)
    397c:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3980:	f884 5434 	strb.w	r5, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3984:	4f45      	ldr	r7, [pc, #276]	; (3a9c <main+0x15c>)
    3986:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    398a:	4638      	mov	r0, r7
    398c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3aec <main+0x1ac>
    3990:	47c0      	blx	r8
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3992:	f204 4124 	addw	r1, r4, #1060	; 0x424
    3996:	4638      	mov	r0, r7
    3998:	47c0      	blx	r8
	timer_start(&TIMER_0);
    399a:	4638      	mov	r0, r7
    399c:	4b40      	ldr	r3, [pc, #256]	; (3aa0 <main+0x160>)
    399e:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    39a0:	4940      	ldr	r1, [pc, #256]	; (3aa4 <main+0x164>)
    39a2:	2036      	movs	r0, #54	; 0x36
    39a4:	4c40      	ldr	r4, [pc, #256]	; (3aa8 <main+0x168>)
    39a6:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    39a8:	4940      	ldr	r1, [pc, #256]	; (3aac <main+0x16c>)
    39aa:	2037      	movs	r0, #55	; 0x37
    39ac:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    39ae:	4940      	ldr	r1, [pc, #256]	; (3ab0 <main+0x170>)
    39b0:	202e      	movs	r0, #46	; 0x2e
    39b2:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    39b4:	493f      	ldr	r1, [pc, #252]	; (3ab4 <main+0x174>)
    39b6:	2019      	movs	r0, #25
    39b8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39ba:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    39be:	f8c6 4094 	str.w	r4, [r6, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
    39c2:	2064      	movs	r0, #100	; 0x64
    39c4:	4b3c      	ldr	r3, [pc, #240]	; (3ab8 <main+0x178>)
    39c6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    39c8:	f8c6 4098 	str.w	r4, [r6, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    39cc:	2064      	movs	r0, #100	; 0x64
    39ce:	4b3b      	ldr	r3, [pc, #236]	; (3abc <main+0x17c>)
    39d0:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    39d2:	2000      	movs	r0, #0
    39d4:	4c3a      	ldr	r4, [pc, #232]	; (3ac0 <main+0x180>)
    39d6:	47a0      	blx	r4
    39d8:	4b3a      	ldr	r3, [pc, #232]	; (3ac4 <main+0x184>)
    39da:	8018      	strh	r0, [r3, #0]
	regValue[0] = spi_BB_Read(32);
    39dc:	2020      	movs	r0, #32
    39de:	47a0      	blx	r4
    39e0:	4e39      	ldr	r6, [pc, #228]	; (3ac8 <main+0x188>)
    39e2:	8030      	strh	r0, [r6, #0]
	python480Init();
    39e4:	4b39      	ldr	r3, [pc, #228]	; (3acc <main+0x18c>)
    39e6:	4798      	blx	r3
	regValue[1] = spi_BB_Read(32);
    39e8:	2020      	movs	r0, #32
    39ea:	47a0      	blx	r4
    39ec:	8070      	strh	r0, [r6, #2]
	python480SetGain(1); //getPropFromHeader(HEADER_GAIN_POS));
    39ee:	4628      	mov	r0, r5
    39f0:	4b37      	ldr	r3, [pc, #220]	; (3ad0 <main+0x190>)
    39f2:	4798      	blx	r3
	python480SetFPS(10); //getPropFromHeader(HEADER_FRAME_RATE_POS));
    39f4:	200a      	movs	r0, #10
    39f6:	4b37      	ldr	r3, [pc, #220]	; (3ad4 <main+0x194>)
    39f8:	4798      	blx	r3
	bool lastMonitor0 = 0;
    39fa:	2500      	movs	r5, #0
    39fc:	e009      	b.n	3a12 <main+0xd2>
	sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
	sd_mmc_wait_end_of_write_blocks(false);
	*/
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING)
			startRecording();
    39fe:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <main+0x198>)
    3a00:	4798      	blx	r3
    3a02:	e00b      	b.n	3a1c <main+0xdc>
		if (deviceState & DEVICE_STATE_RECORDING) {
			recording();
    3a04:	4b35      	ldr	r3, [pc, #212]	; (3adc <main+0x19c>)
    3a06:	4798      	blx	r3
    3a08:	e00d      	b.n	3a26 <main+0xe6>
			
			if (gpio_get_pin_level(LED_STATUS) == 1) {
				setStatusLED(0);
			}
			else {
				setStatusLED(1);
    3a0a:	2001      	movs	r0, #1
    3a0c:	4b1d      	ldr	r3, [pc, #116]	; (3a84 <main+0x144>)
    3a0e:	4798      	blx	r3
{
    3a10:	4625      	mov	r5, r4
		if (deviceState & DEVICE_STATE_START_RECORDING)
    3a12:	4b33      	ldr	r3, [pc, #204]	; (3ae0 <main+0x1a0>)
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	f013 0f04 	tst.w	r3, #4
    3a1a:	d1f0      	bne.n	39fe <main+0xbe>
		if (deviceState & DEVICE_STATE_RECORDING) {
    3a1c:	4b30      	ldr	r3, [pc, #192]	; (3ae0 <main+0x1a0>)
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	f013 0f08 	tst.w	r3, #8
    3a24:	d1ee      	bne.n	3a04 <main+0xc4>
	CRITICAL_SECTION_ENTER();
    3a26:	4668      	mov	r0, sp
    3a28:	4b2e      	ldr	r3, [pc, #184]	; (3ae4 <main+0x1a4>)
    3a2a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a2c:	4b14      	ldr	r3, [pc, #80]	; (3a80 <main+0x140>)
    3a2e:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a30:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a32:	691c      	ldr	r4, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3a34:	4054      	eors	r4, r2
    3a36:	400c      	ands	r4, r1
    3a38:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3a3a:	4668      	mov	r0, sp
    3a3c:	4b2a      	ldr	r3, [pc, #168]	; (3ae8 <main+0x1a8>)
    3a3e:	4798      	blx	r3
    3a40:	f3c4 14c0 	ubfx	r4, r4, #7, #1
		if ((lastMonitor0 != thisMonitor0) && lastMonitor0 == 0) {
    3a44:	42a5      	cmp	r5, r4
    3a46:	d0e3      	beq.n	3a10 <main+0xd0>
    3a48:	2d00      	cmp	r5, #0
    3a4a:	d1e1      	bne.n	3a10 <main+0xd0>
	CRITICAL_SECTION_ENTER();
    3a4c:	a801      	add	r0, sp, #4
    3a4e:	4b25      	ldr	r3, [pc, #148]	; (3ae4 <main+0x1a4>)
    3a50:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a52:	4b0b      	ldr	r3, [pc, #44]	; (3a80 <main+0x140>)
    3a54:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a5c:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3a60:	4055      	eors	r5, r2
    3a62:	400d      	ands	r5, r1
    3a64:	4055      	eors	r5, r2
	CRITICAL_SECTION_LEAVE();
    3a66:	a801      	add	r0, sp, #4
    3a68:	4b1f      	ldr	r3, [pc, #124]	; (3ae8 <main+0x1a8>)
    3a6a:	4798      	blx	r3
			if (gpio_get_pin_level(LED_STATUS) == 1) {
    3a6c:	f415 7f00 	tst.w	r5, #512	; 0x200
    3a70:	d0cb      	beq.n	3a0a <main+0xca>
				setStatusLED(0);
    3a72:	2000      	movs	r0, #0
    3a74:	4b03      	ldr	r3, [pc, #12]	; (3a84 <main+0x144>)
    3a76:	4798      	blx	r3
    3a78:	e7ca      	b.n	3a10 <main+0xd0>
    3a7a:	bf00      	nop
    3a7c:	000002d1 	.word	0x000002d1
    3a80:	41008000 	.word	0x41008000
    3a84:	000036dd 	.word	0x000036dd
    3a88:	200006c8 	.word	0x200006c8
    3a8c:	00000c75 	.word	0x00000c75
    3a90:	20000224 	.word	0x20000224
    3a94:	00002de1 	.word	0x00002de1
    3a98:	00002e45 	.word	0x00002e45
    3a9c:	20000738 	.word	0x20000738
    3aa0:	00001225 	.word	0x00001225
    3aa4:	00002eb1 	.word	0x00002eb1
    3aa8:	00000e6d 	.word	0x00000e6d
    3aac:	00002df1 	.word	0x00002df1
    3ab0:	00002e81 	.word	0x00002e81
    3ab4:	00002ee1 	.word	0x00002ee1
    3ab8:	00000dd5 	.word	0x00000dd5
    3abc:	00000db5 	.word	0x00000db5
    3ac0:	00003051 	.word	0x00003051
    3ac4:	20000b78 	.word	0x20000b78
    3ac8:	20000b7c 	.word	0x20000b7c
    3acc:	00003691 	.word	0x00003691
    3ad0:	00002fdd 	.word	0x00002fdd
    3ad4:	00003019 	.word	0x00003019
    3ad8:	000036fd 	.word	0x000036fd
    3adc:	000037a9 	.word	0x000037a9
    3ae0:	20000028 	.word	0x20000028
    3ae4:	00000d41 	.word	0x00000d41
    3ae8:	00000d4f 	.word	0x00000d4f
    3aec:	00001261 	.word	0x00001261

00003af0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3af0:	b510      	push	{r4, lr}
    3af2:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    3af4:	4807      	ldr	r0, [pc, #28]	; (3b14 <sd_mmc_configure_slot+0x24>)
    3af6:	6802      	ldr	r2, [r0, #0]
    3af8:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    3afa:	7b53      	ldrb	r3, [r2, #13]
    3afc:	6812      	ldr	r2, [r2, #0]
    3afe:	7901      	ldrb	r1, [r0, #4]
    3b00:	6880      	ldr	r0, [r0, #8]
    3b02:	3400      	adds	r4, #0
    3b04:	bf18      	it	ne
    3b06:	2401      	movne	r4, #1
    3b08:	9400      	str	r4, [sp, #0]
    3b0a:	4c03      	ldr	r4, [pc, #12]	; (3b18 <sd_mmc_configure_slot+0x28>)
    3b0c:	47a0      	blx	r4
}
    3b0e:	b002      	add	sp, #8
    3b10:	bd10      	pop	{r4, pc}
    3b12:	bf00      	nop
    3b14:	2000065c 	.word	0x2000065c
    3b18:	00000f71 	.word	0x00000f71

00003b1c <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    3b1c:	b108      	cbz	r0, 3b22 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    3b1e:	2004      	movs	r0, #4
    3b20:	4770      	bx	lr
{
    3b22:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b24:	b083      	sub	sp, #12
    3b26:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    3b28:	4b45      	ldr	r3, [pc, #276]	; (3c40 <sd_mmc_select_slot+0x124>)
    3b2a:	68db      	ldr	r3, [r3, #12]
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d050      	beq.n	3bd2 <sd_mmc_select_slot+0xb6>
    3b30:	0087      	lsls	r7, r0, #2
    3b32:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3b36:	f1b5 3fff 	cmp.w	r5, #4294967295
    3b3a:	d04a      	beq.n	3bd2 <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    3b3c:	b2ed      	uxtb	r5, r5
    3b3e:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    3b40:	a801      	add	r0, sp, #4
    3b42:	4b40      	ldr	r3, [pc, #256]	; (3c44 <sd_mmc_select_slot+0x128>)
    3b44:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3b46:	4940      	ldr	r1, [pc, #256]	; (3c48 <sd_mmc_select_slot+0x12c>)
    3b48:	01f3      	lsls	r3, r6, #7
    3b4a:	18ca      	adds	r2, r1, r3
    3b4c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b4e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3b50:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3b52:	405e      	eors	r6, r3
    3b54:	400e      	ands	r6, r1
    3b56:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    3b58:	a801      	add	r0, sp, #4
    3b5a:	4b3c      	ldr	r3, [pc, #240]	; (3c4c <sd_mmc_select_slot+0x130>)
    3b5c:	4798      	blx	r3
    3b5e:	f005 051f 	and.w	r5, r5, #31
    3b62:	2301      	movs	r3, #1
    3b64:	fa03 f505 	lsl.w	r5, r3, r5
    3b68:	4235      	tst	r5, r6
    3b6a:	bf14      	ite	ne
    3b6c:	461a      	movne	r2, r3
    3b6e:	2200      	moveq	r2, #0
    3b70:	4b33      	ldr	r3, [pc, #204]	; (3c40 <sd_mmc_select_slot+0x124>)
    3b72:	68db      	ldr	r3, [r3, #12]
    3b74:	441f      	add	r7, r3
    3b76:	887b      	ldrh	r3, [r7, #2]
    3b78:	429a      	cmp	r2, r3
    3b7a:	d006      	beq.n	3b8a <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3b7c:	4b30      	ldr	r3, [pc, #192]	; (3c40 <sd_mmc_select_slot+0x124>)
    3b7e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3b82:	2304      	movs	r3, #4
    3b84:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3b86:	2002      	movs	r0, #2
    3b88:	e047      	b.n	3c1a <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    3b8a:	4b2d      	ldr	r3, [pc, #180]	; (3c40 <sd_mmc_select_slot+0x124>)
    3b8c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3b90:	7e9b      	ldrb	r3, [r3, #26]
    3b92:	2b04      	cmp	r3, #4
    3b94:	d009      	beq.n	3baa <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    3b96:	2b01      	cmp	r3, #1
    3b98:	d00e      	beq.n	3bb8 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    3b9a:	4b29      	ldr	r3, [pc, #164]	; (3c40 <sd_mmc_select_slot+0x124>)
    3b9c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3ba0:	7e9b      	ldrb	r3, [r3, #26]
    3ba2:	2b03      	cmp	r3, #3
    3ba4:	d11d      	bne.n	3be2 <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3ba6:	2003      	movs	r0, #3
    3ba8:	e037      	b.n	3c1a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    3baa:	4b25      	ldr	r3, [pc, #148]	; (3c40 <sd_mmc_select_slot+0x124>)
    3bac:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3bb0:	2301      	movs	r3, #1
    3bb2:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3bb4:	2002      	movs	r0, #2
    3bb6:	e030      	b.n	3c1a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3bb8:	4b21      	ldr	r3, [pc, #132]	; (3c40 <sd_mmc_select_slot+0x124>)
    3bba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3bbe:	2202      	movs	r2, #2
    3bc0:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3bc2:	4a23      	ldr	r2, [pc, #140]	; (3c50 <sd_mmc_select_slot+0x134>)
    3bc4:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3bc6:	2201      	movs	r2, #1
    3bc8:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3bca:	2200      	movs	r2, #0
    3bcc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3bd0:	e7e3      	b.n	3b9a <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3bd2:	4b1b      	ldr	r3, [pc, #108]	; (3c40 <sd_mmc_select_slot+0x124>)
    3bd4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3bd8:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    3bda:	3b03      	subs	r3, #3
    3bdc:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3bde:	2b01      	cmp	r3, #1
    3be0:	d91d      	bls.n	3c1e <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3be2:	4b17      	ldr	r3, [pc, #92]	; (3c40 <sd_mmc_select_slot+0x124>)
    3be4:	791b      	ldrb	r3, [r3, #4]
    3be6:	429c      	cmp	r4, r3
    3be8:	d026      	beq.n	3c38 <sd_mmc_select_slot+0x11c>
    3bea:	4b15      	ldr	r3, [pc, #84]	; (3c40 <sd_mmc_select_slot+0x124>)
    3bec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3bee:	bb2b      	cbnz	r3, 3c3c <sd_mmc_select_slot+0x120>
    3bf0:	2001      	movs	r0, #1
    3bf2:	f240 422c 	movw	r2, #1068	; 0x42c
    3bf6:	4917      	ldr	r1, [pc, #92]	; (3c54 <sd_mmc_select_slot+0x138>)
    3bf8:	4b17      	ldr	r3, [pc, #92]	; (3c58 <sd_mmc_select_slot+0x13c>)
    3bfa:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    3bfc:	4d10      	ldr	r5, [pc, #64]	; (3c40 <sd_mmc_select_slot+0x124>)
    3bfe:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    3c00:	f105 0310 	add.w	r3, r5, #16
    3c04:	0164      	lsls	r4, r4, #5
    3c06:	4423      	add	r3, r4
    3c08:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    3c0a:	4b14      	ldr	r3, [pc, #80]	; (3c5c <sd_mmc_select_slot+0x140>)
    3c0c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    3c0e:	442c      	add	r4, r5
    3c10:	7ea0      	ldrb	r0, [r4, #26]
    3c12:	2802      	cmp	r0, #2
    3c14:	bf14      	ite	ne
    3c16:	2000      	movne	r0, #0
    3c18:	2001      	moveq	r0, #1
}
    3c1a:	b003      	add	sp, #12
    3c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3c1e:	4b08      	ldr	r3, [pc, #32]	; (3c40 <sd_mmc_select_slot+0x124>)
    3c20:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3c24:	2202      	movs	r2, #2
    3c26:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3c28:	4a09      	ldr	r2, [pc, #36]	; (3c50 <sd_mmc_select_slot+0x134>)
    3c2a:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3c2c:	2201      	movs	r2, #1
    3c2e:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3c30:	2200      	movs	r2, #0
    3c32:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3c36:	e7d4      	b.n	3be2 <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3c38:	2001      	movs	r0, #1
    3c3a:	e7da      	b.n	3bf2 <sd_mmc_select_slot+0xd6>
    3c3c:	2000      	movs	r0, #0
    3c3e:	e7d8      	b.n	3bf2 <sd_mmc_select_slot+0xd6>
    3c40:	2000065c 	.word	0x2000065c
    3c44:	00000d41 	.word	0x00000d41
    3c48:	41008000 	.word	0x41008000
    3c4c:	00000d4f 	.word	0x00000d4f
    3c50:	00061a80 	.word	0x00061a80
    3c54:	00004508 	.word	0x00004508
    3c58:	000014f5 	.word	0x000014f5
    3c5c:	00003af1 	.word	0x00003af1

00003c60 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    3c60:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    3c62:	4b04      	ldr	r3, [pc, #16]	; (3c74 <sd_mmc_deselect_slot+0x14>)
    3c64:	7919      	ldrb	r1, [r3, #4]
    3c66:	b101      	cbz	r1, 3c6a <sd_mmc_deselect_slot+0xa>
    3c68:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    3c6a:	6898      	ldr	r0, [r3, #8]
    3c6c:	4b02      	ldr	r3, [pc, #8]	; (3c78 <sd_mmc_deselect_slot+0x18>)
    3c6e:	4798      	blx	r3
	}
}
    3c70:	e7fa      	b.n	3c68 <sd_mmc_deselect_slot+0x8>
    3c72:	bf00      	nop
    3c74:	2000065c 	.word	0x2000065c
    3c78:	00000fad 	.word	0x00000fad

00003c7c <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    3c7c:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    3c7e:	2300      	movs	r3, #0
    3c80:	b13b      	cbz	r3, 3c92 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    3c82:	4b08      	ldr	r3, [pc, #32]	; (3ca4 <sd_mmc_init+0x28>)
    3c84:	24ff      	movs	r4, #255	; 0xff
    3c86:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    3c88:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    3c8a:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    3c8c:	635a      	str	r2, [r3, #52]	; 0x34
}
    3c8e:	bc30      	pop	{r4, r5}
    3c90:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3c92:	4c04      	ldr	r4, [pc, #16]	; (3ca4 <sd_mmc_init+0x28>)
    3c94:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    3c98:	2504      	movs	r5, #4
    3c9a:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    3c9c:	3301      	adds	r3, #1
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	e7ee      	b.n	3c80 <sd_mmc_init+0x4>
    3ca2:	bf00      	nop
    3ca4:	2000065c 	.word	0x2000065c

00003ca8 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    3ca8:	4b19      	ldr	r3, [pc, #100]	; (3d10 <sd_mmc_is_write_protected+0x68>)
    3caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3cac:	b35b      	cbz	r3, 3d06 <sd_mmc_is_write_protected+0x5e>
{
    3cae:	b570      	push	{r4, r5, r6, lr}
    3cb0:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    3cb2:	0085      	lsls	r5, r0, #2
    3cb4:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    3cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    3cbc:	d025      	beq.n	3d0a <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    3cbe:	b2de      	uxtb	r6, r3
    3cc0:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    3cc2:	a801      	add	r0, sp, #4
    3cc4:	4b13      	ldr	r3, [pc, #76]	; (3d14 <sd_mmc_is_write_protected+0x6c>)
    3cc6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3cc8:	4913      	ldr	r1, [pc, #76]	; (3d18 <sd_mmc_is_write_protected+0x70>)
    3cca:	01e3      	lsls	r3, r4, #7
    3ccc:	18ca      	adds	r2, r1, r3
    3cce:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3cd0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3cd2:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3cd4:	405c      	eors	r4, r3
    3cd6:	400c      	ands	r4, r1
    3cd8:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3cda:	a801      	add	r0, sp, #4
    3cdc:	4b0f      	ldr	r3, [pc, #60]	; (3d1c <sd_mmc_is_write_protected+0x74>)
    3cde:	4798      	blx	r3
    3ce0:	f006 031f 	and.w	r3, r6, #31
    3ce4:	2201      	movs	r2, #1
    3ce6:	fa02 f303 	lsl.w	r3, r2, r3
    3cea:	4223      	tst	r3, r4
    3cec:	bf08      	it	eq
    3cee:	2200      	moveq	r2, #0
    3cf0:	4b07      	ldr	r3, [pc, #28]	; (3d10 <sd_mmc_is_write_protected+0x68>)
    3cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3cf4:	441d      	add	r5, r3
    3cf6:	886b      	ldrh	r3, [r5, #2]
    3cf8:	429a      	cmp	r2, r3
    3cfa:	d002      	beq.n	3d02 <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    3cfc:	2000      	movs	r0, #0
}
    3cfe:	b002      	add	sp, #8
    3d00:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    3d02:	2001      	movs	r0, #1
    3d04:	e7fb      	b.n	3cfe <sd_mmc_is_write_protected+0x56>
		return false;
    3d06:	2000      	movs	r0, #0
    3d08:	4770      	bx	lr
    3d0a:	2000      	movs	r0, #0
    3d0c:	e7f7      	b.n	3cfe <sd_mmc_is_write_protected+0x56>
    3d0e:	bf00      	nop
    3d10:	2000065c 	.word	0x2000065c
    3d14:	00000d41 	.word	0x00000d41
    3d18:	41008000 	.word	0x41008000
    3d1c:	00000d4f 	.word	0x00000d4f

00003d20 <sd_mmc_init_write_blocks>:
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    3d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d22:	b083      	sub	sp, #12
    3d24:	4607      	mov	r7, r0
    3d26:	460e      	mov	r6, r1
    3d28:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    3d2a:	4b1c      	ldr	r3, [pc, #112]	; (3d9c <sd_mmc_init_write_blocks+0x7c>)
    3d2c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    3d2e:	4604      	mov	r4, r0
    3d30:	b110      	cbz	r0, 3d38 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    3d32:	4620      	mov	r0, r4
    3d34:	b003      	add	sp, #12
    3d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    3d38:	4638      	mov	r0, r7
    3d3a:	4b19      	ldr	r3, [pc, #100]	; (3da0 <sd_mmc_init_write_blocks+0x80>)
    3d3c:	4798      	blx	r3
    3d3e:	b9c0      	cbnz	r0, 3d72 <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    3d40:	2d01      	cmp	r5, #1
    3d42:	d91a      	bls.n	3d7a <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    3d44:	4917      	ldr	r1, [pc, #92]	; (3da4 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    3d46:	4b18      	ldr	r3, [pc, #96]	; (3da8 <sd_mmc_init_write_blocks+0x88>)
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	7adb      	ldrb	r3, [r3, #11]
    3d4c:	f013 0f08 	tst.w	r3, #8
    3d50:	d100      	bne.n	3d54 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    3d52:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    3d54:	4b14      	ldr	r3, [pc, #80]	; (3da8 <sd_mmc_init_write_blocks+0x88>)
    3d56:	6898      	ldr	r0, [r3, #8]
    3d58:	2301      	movs	r3, #1
    3d5a:	9301      	str	r3, [sp, #4]
    3d5c:	9500      	str	r5, [sp, #0]
    3d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    3d62:	4632      	mov	r2, r6
    3d64:	4e11      	ldr	r6, [pc, #68]	; (3dac <sd_mmc_init_write_blocks+0x8c>)
    3d66:	47b0      	blx	r6
    3d68:	b948      	cbnz	r0, 3d7e <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    3d6a:	4b11      	ldr	r3, [pc, #68]	; (3db0 <sd_mmc_init_write_blocks+0x90>)
    3d6c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3d6e:	2405      	movs	r4, #5
    3d70:	e7df      	b.n	3d32 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    3d72:	4b0f      	ldr	r3, [pc, #60]	; (3db0 <sd_mmc_init_write_blocks+0x90>)
    3d74:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    3d76:	2407      	movs	r4, #7
    3d78:	e7db      	b.n	3d32 <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    3d7a:	490e      	ldr	r1, [pc, #56]	; (3db4 <sd_mmc_init_write_blocks+0x94>)
    3d7c:	e7e3      	b.n	3d46 <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    3d7e:	4b0a      	ldr	r3, [pc, #40]	; (3da8 <sd_mmc_init_write_blocks+0x88>)
    3d80:	6898      	ldr	r0, [r3, #8]
    3d82:	4b0d      	ldr	r3, [pc, #52]	; (3db8 <sd_mmc_init_write_blocks+0x98>)
    3d84:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    3d86:	4b0d      	ldr	r3, [pc, #52]	; (3dbc <sd_mmc_init_write_blocks+0x9c>)
    3d88:	4003      	ands	r3, r0
    3d8a:	b91b      	cbnz	r3, 3d94 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    3d8c:	4b06      	ldr	r3, [pc, #24]	; (3da8 <sd_mmc_init_write_blocks+0x88>)
    3d8e:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    3d90:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    3d92:	e7ce      	b.n	3d32 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    3d94:	4b06      	ldr	r3, [pc, #24]	; (3db0 <sd_mmc_init_write_blocks+0x90>)
    3d96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3d98:	2405      	movs	r4, #5
    3d9a:	e7ca      	b.n	3d32 <sd_mmc_init_write_blocks+0x12>
    3d9c:	00003b1d 	.word	0x00003b1d
    3da0:	00003ca9 	.word	0x00003ca9
    3da4:	00109119 	.word	0x00109119
    3da8:	2000065c 	.word	0x2000065c
    3dac:	00001031 	.word	0x00001031
    3db0:	00003c61 	.word	0x00003c61
    3db4:	00089118 	.word	0x00089118
    3db8:	00001009 	.word	0x00001009
    3dbc:	e4580000 	.word	0xe4580000

00003dc0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    3dc0:	b570      	push	{r4, r5, r6, lr}
    3dc2:	4606      	mov	r6, r0
    3dc4:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    3dc6:	4d0d      	ldr	r5, [pc, #52]	; (3dfc <sd_mmc_start_write_blocks+0x3c>)
    3dc8:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    3dca:	f240 52fa 	movw	r2, #1530	; 0x5fa
    3dce:	490c      	ldr	r1, [pc, #48]	; (3e00 <sd_mmc_start_write_blocks+0x40>)
    3dd0:	42a0      	cmp	r0, r4
    3dd2:	bf34      	ite	cc
    3dd4:	2000      	movcc	r0, #0
    3dd6:	2001      	movcs	r0, #1
    3dd8:	4b0a      	ldr	r3, [pc, #40]	; (3e04 <sd_mmc_start_write_blocks+0x44>)
    3dda:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    3ddc:	4622      	mov	r2, r4
    3dde:	4631      	mov	r1, r6
    3de0:	68a8      	ldr	r0, [r5, #8]
    3de2:	4b09      	ldr	r3, [pc, #36]	; (3e08 <sd_mmc_start_write_blocks+0x48>)
    3de4:	4798      	blx	r3
    3de6:	b918      	cbnz	r0, 3df0 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    3de8:	2200      	movs	r2, #0
    3dea:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    3dec:	2005      	movs	r0, #5
    3dee:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    3df0:	4a02      	ldr	r2, [pc, #8]	; (3dfc <sd_mmc_start_write_blocks+0x3c>)
    3df2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    3df4:	1b1c      	subs	r4, r3, r4
    3df6:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    3df8:	2000      	movs	r0, #0
}
    3dfa:	bd70      	pop	{r4, r5, r6, pc}
    3dfc:	2000065c 	.word	0x2000065c
    3e00:	00004508 	.word	0x00004508
    3e04:	000014f5 	.word	0x000014f5
    3e08:	00001075 	.word	0x00001075

00003e0c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    3e0c:	b510      	push	{r4, lr}
    3e0e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    3e10:	4b14      	ldr	r3, [pc, #80]	; (3e64 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3e12:	6898      	ldr	r0, [r3, #8]
    3e14:	4b14      	ldr	r3, [pc, #80]	; (3e68 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    3e16:	4798      	blx	r3
    3e18:	b908      	cbnz	r0, 3e1e <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    3e1a:	2005      	movs	r0, #5
    3e1c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    3e1e:	b194      	cbz	r4, 3e46 <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    3e20:	2200      	movs	r2, #0
    3e22:	4b10      	ldr	r3, [pc, #64]	; (3e64 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3e24:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    3e26:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3e28:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    3e2a:	2b01      	cmp	r3, #1
    3e2c:	d011      	beq.n	3e52 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    3e2e:	2200      	movs	r2, #0
    3e30:	f243 110c 	movw	r1, #12556	; 0x310c
    3e34:	4b0b      	ldr	r3, [pc, #44]	; (3e64 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3e36:	6898      	ldr	r0, [r3, #8]
    3e38:	4b0c      	ldr	r3, [pc, #48]	; (3e6c <sd_mmc_wait_end_of_write_blocks+0x60>)
    3e3a:	4798      	blx	r3
    3e3c:	b968      	cbnz	r0, 3e5a <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    3e3e:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <sd_mmc_wait_end_of_write_blocks+0x64>)
    3e40:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3e42:	2005      	movs	r0, #5
    3e44:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    3e46:	4b07      	ldr	r3, [pc, #28]	; (3e64 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3e48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d0eb      	beq.n	3e26 <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    3e4e:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    3e50:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <sd_mmc_wait_end_of_write_blocks+0x64>)
    3e54:	4798      	blx	r3
		return SD_MMC_OK;
    3e56:	2000      	movs	r0, #0
    3e58:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    3e5a:	4b05      	ldr	r3, [pc, #20]	; (3e70 <sd_mmc_wait_end_of_write_blocks+0x64>)
    3e5c:	4798      	blx	r3
	return SD_MMC_OK;
    3e5e:	2000      	movs	r0, #0
    3e60:	bd10      	pop	{r4, pc}
    3e62:	bf00      	nop
    3e64:	2000065c 	.word	0x2000065c
    3e68:	000010ad 	.word	0x000010ad
    3e6c:	00000fd9 	.word	0x00000fd9
    3e70:	00003c61 	.word	0x00003c61

00003e74 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    3e74:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    3e76:	4903      	ldr	r1, [pc, #12]	; (3e84 <sd_mmc_stack_init+0x10>)
    3e78:	460a      	mov	r2, r1
    3e7a:	3104      	adds	r1, #4
    3e7c:	4802      	ldr	r0, [pc, #8]	; (3e88 <sd_mmc_stack_init+0x14>)
    3e7e:	4b03      	ldr	r3, [pc, #12]	; (3e8c <sd_mmc_stack_init+0x18>)
    3e80:	4798      	blx	r3
    3e82:	bd08      	pop	{r3, pc}
    3e84:	20000030 	.word	0x20000030
    3e88:	20000720 	.word	0x20000720
    3e8c:	00003c7d 	.word	0x00003c7d

00003e90 <__aeabi_uldivmod>:
    3e90:	b953      	cbnz	r3, 3ea8 <__aeabi_uldivmod+0x18>
    3e92:	b94a      	cbnz	r2, 3ea8 <__aeabi_uldivmod+0x18>
    3e94:	2900      	cmp	r1, #0
    3e96:	bf08      	it	eq
    3e98:	2800      	cmpeq	r0, #0
    3e9a:	bf1c      	itt	ne
    3e9c:	f04f 31ff 	movne.w	r1, #4294967295
    3ea0:	f04f 30ff 	movne.w	r0, #4294967295
    3ea4:	f000 b97a 	b.w	419c <__aeabi_idiv0>
    3ea8:	f1ad 0c08 	sub.w	ip, sp, #8
    3eac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3eb0:	f000 f806 	bl	3ec0 <__udivmoddi4>
    3eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
    3eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3ebc:	b004      	add	sp, #16
    3ebe:	4770      	bx	lr

00003ec0 <__udivmoddi4>:
    3ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ec4:	468c      	mov	ip, r1
    3ec6:	460d      	mov	r5, r1
    3ec8:	4604      	mov	r4, r0
    3eca:	9e08      	ldr	r6, [sp, #32]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d151      	bne.n	3f74 <__udivmoddi4+0xb4>
    3ed0:	428a      	cmp	r2, r1
    3ed2:	4617      	mov	r7, r2
    3ed4:	d96d      	bls.n	3fb2 <__udivmoddi4+0xf2>
    3ed6:	fab2 fe82 	clz	lr, r2
    3eda:	f1be 0f00 	cmp.w	lr, #0
    3ede:	d00b      	beq.n	3ef8 <__udivmoddi4+0x38>
    3ee0:	f1ce 0c20 	rsb	ip, lr, #32
    3ee4:	fa01 f50e 	lsl.w	r5, r1, lr
    3ee8:	fa20 fc0c 	lsr.w	ip, r0, ip
    3eec:	fa02 f70e 	lsl.w	r7, r2, lr
    3ef0:	ea4c 0c05 	orr.w	ip, ip, r5
    3ef4:	fa00 f40e 	lsl.w	r4, r0, lr
    3ef8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    3efc:	0c25      	lsrs	r5, r4, #16
    3efe:	fbbc f8fa 	udiv	r8, ip, sl
    3f02:	fa1f f987 	uxth.w	r9, r7
    3f06:	fb0a cc18 	mls	ip, sl, r8, ip
    3f0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    3f0e:	fb08 f309 	mul.w	r3, r8, r9
    3f12:	42ab      	cmp	r3, r5
    3f14:	d90a      	bls.n	3f2c <__udivmoddi4+0x6c>
    3f16:	19ed      	adds	r5, r5, r7
    3f18:	f108 32ff 	add.w	r2, r8, #4294967295
    3f1c:	f080 8123 	bcs.w	4166 <__udivmoddi4+0x2a6>
    3f20:	42ab      	cmp	r3, r5
    3f22:	f240 8120 	bls.w	4166 <__udivmoddi4+0x2a6>
    3f26:	f1a8 0802 	sub.w	r8, r8, #2
    3f2a:	443d      	add	r5, r7
    3f2c:	1aed      	subs	r5, r5, r3
    3f2e:	b2a4      	uxth	r4, r4
    3f30:	fbb5 f0fa 	udiv	r0, r5, sl
    3f34:	fb0a 5510 	mls	r5, sl, r0, r5
    3f38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3f3c:	fb00 f909 	mul.w	r9, r0, r9
    3f40:	45a1      	cmp	r9, r4
    3f42:	d909      	bls.n	3f58 <__udivmoddi4+0x98>
    3f44:	19e4      	adds	r4, r4, r7
    3f46:	f100 33ff 	add.w	r3, r0, #4294967295
    3f4a:	f080 810a 	bcs.w	4162 <__udivmoddi4+0x2a2>
    3f4e:	45a1      	cmp	r9, r4
    3f50:	f240 8107 	bls.w	4162 <__udivmoddi4+0x2a2>
    3f54:	3802      	subs	r0, #2
    3f56:	443c      	add	r4, r7
    3f58:	eba4 0409 	sub.w	r4, r4, r9
    3f5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    3f60:	2100      	movs	r1, #0
    3f62:	2e00      	cmp	r6, #0
    3f64:	d061      	beq.n	402a <__udivmoddi4+0x16a>
    3f66:	fa24 f40e 	lsr.w	r4, r4, lr
    3f6a:	2300      	movs	r3, #0
    3f6c:	6034      	str	r4, [r6, #0]
    3f6e:	6073      	str	r3, [r6, #4]
    3f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f74:	428b      	cmp	r3, r1
    3f76:	d907      	bls.n	3f88 <__udivmoddi4+0xc8>
    3f78:	2e00      	cmp	r6, #0
    3f7a:	d054      	beq.n	4026 <__udivmoddi4+0x166>
    3f7c:	2100      	movs	r1, #0
    3f7e:	e886 0021 	stmia.w	r6, {r0, r5}
    3f82:	4608      	mov	r0, r1
    3f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f88:	fab3 f183 	clz	r1, r3
    3f8c:	2900      	cmp	r1, #0
    3f8e:	f040 808e 	bne.w	40ae <__udivmoddi4+0x1ee>
    3f92:	42ab      	cmp	r3, r5
    3f94:	d302      	bcc.n	3f9c <__udivmoddi4+0xdc>
    3f96:	4282      	cmp	r2, r0
    3f98:	f200 80fa 	bhi.w	4190 <__udivmoddi4+0x2d0>
    3f9c:	1a84      	subs	r4, r0, r2
    3f9e:	eb65 0503 	sbc.w	r5, r5, r3
    3fa2:	2001      	movs	r0, #1
    3fa4:	46ac      	mov	ip, r5
    3fa6:	2e00      	cmp	r6, #0
    3fa8:	d03f      	beq.n	402a <__udivmoddi4+0x16a>
    3faa:	e886 1010 	stmia.w	r6, {r4, ip}
    3fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fb2:	b912      	cbnz	r2, 3fba <__udivmoddi4+0xfa>
    3fb4:	2701      	movs	r7, #1
    3fb6:	fbb7 f7f2 	udiv	r7, r7, r2
    3fba:	fab7 fe87 	clz	lr, r7
    3fbe:	f1be 0f00 	cmp.w	lr, #0
    3fc2:	d134      	bne.n	402e <__udivmoddi4+0x16e>
    3fc4:	1beb      	subs	r3, r5, r7
    3fc6:	0c3a      	lsrs	r2, r7, #16
    3fc8:	fa1f fc87 	uxth.w	ip, r7
    3fcc:	2101      	movs	r1, #1
    3fce:	fbb3 f8f2 	udiv	r8, r3, r2
    3fd2:	0c25      	lsrs	r5, r4, #16
    3fd4:	fb02 3318 	mls	r3, r2, r8, r3
    3fd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    3fdc:	fb0c f308 	mul.w	r3, ip, r8
    3fe0:	42ab      	cmp	r3, r5
    3fe2:	d907      	bls.n	3ff4 <__udivmoddi4+0x134>
    3fe4:	19ed      	adds	r5, r5, r7
    3fe6:	f108 30ff 	add.w	r0, r8, #4294967295
    3fea:	d202      	bcs.n	3ff2 <__udivmoddi4+0x132>
    3fec:	42ab      	cmp	r3, r5
    3fee:	f200 80d1 	bhi.w	4194 <__udivmoddi4+0x2d4>
    3ff2:	4680      	mov	r8, r0
    3ff4:	1aed      	subs	r5, r5, r3
    3ff6:	b2a3      	uxth	r3, r4
    3ff8:	fbb5 f0f2 	udiv	r0, r5, r2
    3ffc:	fb02 5510 	mls	r5, r2, r0, r5
    4000:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    4004:	fb0c fc00 	mul.w	ip, ip, r0
    4008:	45a4      	cmp	ip, r4
    400a:	d907      	bls.n	401c <__udivmoddi4+0x15c>
    400c:	19e4      	adds	r4, r4, r7
    400e:	f100 33ff 	add.w	r3, r0, #4294967295
    4012:	d202      	bcs.n	401a <__udivmoddi4+0x15a>
    4014:	45a4      	cmp	ip, r4
    4016:	f200 80b8 	bhi.w	418a <__udivmoddi4+0x2ca>
    401a:	4618      	mov	r0, r3
    401c:	eba4 040c 	sub.w	r4, r4, ip
    4020:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4024:	e79d      	b.n	3f62 <__udivmoddi4+0xa2>
    4026:	4631      	mov	r1, r6
    4028:	4630      	mov	r0, r6
    402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    402e:	f1ce 0420 	rsb	r4, lr, #32
    4032:	fa05 f30e 	lsl.w	r3, r5, lr
    4036:	fa07 f70e 	lsl.w	r7, r7, lr
    403a:	fa20 f804 	lsr.w	r8, r0, r4
    403e:	0c3a      	lsrs	r2, r7, #16
    4040:	fa25 f404 	lsr.w	r4, r5, r4
    4044:	ea48 0803 	orr.w	r8, r8, r3
    4048:	fbb4 f1f2 	udiv	r1, r4, r2
    404c:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4050:	fb02 4411 	mls	r4, r2, r1, r4
    4054:	fa1f fc87 	uxth.w	ip, r7
    4058:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    405c:	fb01 f30c 	mul.w	r3, r1, ip
    4060:	42ab      	cmp	r3, r5
    4062:	fa00 f40e 	lsl.w	r4, r0, lr
    4066:	d909      	bls.n	407c <__udivmoddi4+0x1bc>
    4068:	19ed      	adds	r5, r5, r7
    406a:	f101 30ff 	add.w	r0, r1, #4294967295
    406e:	f080 808a 	bcs.w	4186 <__udivmoddi4+0x2c6>
    4072:	42ab      	cmp	r3, r5
    4074:	f240 8087 	bls.w	4186 <__udivmoddi4+0x2c6>
    4078:	3902      	subs	r1, #2
    407a:	443d      	add	r5, r7
    407c:	1aeb      	subs	r3, r5, r3
    407e:	fa1f f588 	uxth.w	r5, r8
    4082:	fbb3 f0f2 	udiv	r0, r3, r2
    4086:	fb02 3310 	mls	r3, r2, r0, r3
    408a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    408e:	fb00 f30c 	mul.w	r3, r0, ip
    4092:	42ab      	cmp	r3, r5
    4094:	d907      	bls.n	40a6 <__udivmoddi4+0x1e6>
    4096:	19ed      	adds	r5, r5, r7
    4098:	f100 38ff 	add.w	r8, r0, #4294967295
    409c:	d26f      	bcs.n	417e <__udivmoddi4+0x2be>
    409e:	42ab      	cmp	r3, r5
    40a0:	d96d      	bls.n	417e <__udivmoddi4+0x2be>
    40a2:	3802      	subs	r0, #2
    40a4:	443d      	add	r5, r7
    40a6:	1aeb      	subs	r3, r5, r3
    40a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    40ac:	e78f      	b.n	3fce <__udivmoddi4+0x10e>
    40ae:	f1c1 0720 	rsb	r7, r1, #32
    40b2:	fa22 f807 	lsr.w	r8, r2, r7
    40b6:	408b      	lsls	r3, r1
    40b8:	fa05 f401 	lsl.w	r4, r5, r1
    40bc:	ea48 0303 	orr.w	r3, r8, r3
    40c0:	fa20 fe07 	lsr.w	lr, r0, r7
    40c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    40c8:	40fd      	lsrs	r5, r7
    40ca:	ea4e 0e04 	orr.w	lr, lr, r4
    40ce:	fbb5 f9fc 	udiv	r9, r5, ip
    40d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
    40d6:	fb0c 5519 	mls	r5, ip, r9, r5
    40da:	fa1f f883 	uxth.w	r8, r3
    40de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    40e2:	fb09 f408 	mul.w	r4, r9, r8
    40e6:	42ac      	cmp	r4, r5
    40e8:	fa02 f201 	lsl.w	r2, r2, r1
    40ec:	fa00 fa01 	lsl.w	sl, r0, r1
    40f0:	d908      	bls.n	4104 <__udivmoddi4+0x244>
    40f2:	18ed      	adds	r5, r5, r3
    40f4:	f109 30ff 	add.w	r0, r9, #4294967295
    40f8:	d243      	bcs.n	4182 <__udivmoddi4+0x2c2>
    40fa:	42ac      	cmp	r4, r5
    40fc:	d941      	bls.n	4182 <__udivmoddi4+0x2c2>
    40fe:	f1a9 0902 	sub.w	r9, r9, #2
    4102:	441d      	add	r5, r3
    4104:	1b2d      	subs	r5, r5, r4
    4106:	fa1f fe8e 	uxth.w	lr, lr
    410a:	fbb5 f0fc 	udiv	r0, r5, ip
    410e:	fb0c 5510 	mls	r5, ip, r0, r5
    4112:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    4116:	fb00 f808 	mul.w	r8, r0, r8
    411a:	45a0      	cmp	r8, r4
    411c:	d907      	bls.n	412e <__udivmoddi4+0x26e>
    411e:	18e4      	adds	r4, r4, r3
    4120:	f100 35ff 	add.w	r5, r0, #4294967295
    4124:	d229      	bcs.n	417a <__udivmoddi4+0x2ba>
    4126:	45a0      	cmp	r8, r4
    4128:	d927      	bls.n	417a <__udivmoddi4+0x2ba>
    412a:	3802      	subs	r0, #2
    412c:	441c      	add	r4, r3
    412e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4132:	eba4 0408 	sub.w	r4, r4, r8
    4136:	fba0 8902 	umull	r8, r9, r0, r2
    413a:	454c      	cmp	r4, r9
    413c:	46c6      	mov	lr, r8
    413e:	464d      	mov	r5, r9
    4140:	d315      	bcc.n	416e <__udivmoddi4+0x2ae>
    4142:	d012      	beq.n	416a <__udivmoddi4+0x2aa>
    4144:	b156      	cbz	r6, 415c <__udivmoddi4+0x29c>
    4146:	ebba 030e 	subs.w	r3, sl, lr
    414a:	eb64 0405 	sbc.w	r4, r4, r5
    414e:	fa04 f707 	lsl.w	r7, r4, r7
    4152:	40cb      	lsrs	r3, r1
    4154:	431f      	orrs	r7, r3
    4156:	40cc      	lsrs	r4, r1
    4158:	6037      	str	r7, [r6, #0]
    415a:	6074      	str	r4, [r6, #4]
    415c:	2100      	movs	r1, #0
    415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4162:	4618      	mov	r0, r3
    4164:	e6f8      	b.n	3f58 <__udivmoddi4+0x98>
    4166:	4690      	mov	r8, r2
    4168:	e6e0      	b.n	3f2c <__udivmoddi4+0x6c>
    416a:	45c2      	cmp	sl, r8
    416c:	d2ea      	bcs.n	4144 <__udivmoddi4+0x284>
    416e:	ebb8 0e02 	subs.w	lr, r8, r2
    4172:	eb69 0503 	sbc.w	r5, r9, r3
    4176:	3801      	subs	r0, #1
    4178:	e7e4      	b.n	4144 <__udivmoddi4+0x284>
    417a:	4628      	mov	r0, r5
    417c:	e7d7      	b.n	412e <__udivmoddi4+0x26e>
    417e:	4640      	mov	r0, r8
    4180:	e791      	b.n	40a6 <__udivmoddi4+0x1e6>
    4182:	4681      	mov	r9, r0
    4184:	e7be      	b.n	4104 <__udivmoddi4+0x244>
    4186:	4601      	mov	r1, r0
    4188:	e778      	b.n	407c <__udivmoddi4+0x1bc>
    418a:	3802      	subs	r0, #2
    418c:	443c      	add	r4, r7
    418e:	e745      	b.n	401c <__udivmoddi4+0x15c>
    4190:	4608      	mov	r0, r1
    4192:	e708      	b.n	3fa6 <__udivmoddi4+0xe6>
    4194:	f1a8 0802 	sub.w	r8, r8, #2
    4198:	443d      	add	r5, r7
    419a:	e72b      	b.n	3ff4 <__udivmoddi4+0x134>

0000419c <__aeabi_idiv0>:
    419c:	4770      	bx	lr
    419e:	bf00      	nop

000041a0 <__libc_init_array>:
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	4e0d      	ldr	r6, [pc, #52]	; (41d8 <__libc_init_array+0x38>)
    41a4:	4c0d      	ldr	r4, [pc, #52]	; (41dc <__libc_init_array+0x3c>)
    41a6:	1ba4      	subs	r4, r4, r6
    41a8:	10a4      	asrs	r4, r4, #2
    41aa:	2500      	movs	r5, #0
    41ac:	42a5      	cmp	r5, r4
    41ae:	d109      	bne.n	41c4 <__libc_init_array+0x24>
    41b0:	4e0b      	ldr	r6, [pc, #44]	; (41e0 <__libc_init_array+0x40>)
    41b2:	4c0c      	ldr	r4, [pc, #48]	; (41e4 <__libc_init_array+0x44>)
    41b4:	f000 f9b2 	bl	451c <_init>
    41b8:	1ba4      	subs	r4, r4, r6
    41ba:	10a4      	asrs	r4, r4, #2
    41bc:	2500      	movs	r5, #0
    41be:	42a5      	cmp	r5, r4
    41c0:	d105      	bne.n	41ce <__libc_init_array+0x2e>
    41c2:	bd70      	pop	{r4, r5, r6, pc}
    41c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41c8:	4798      	blx	r3
    41ca:	3501      	adds	r5, #1
    41cc:	e7ee      	b.n	41ac <__libc_init_array+0xc>
    41ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41d2:	4798      	blx	r3
    41d4:	3501      	adds	r5, #1
    41d6:	e7f2      	b.n	41be <__libc_init_array+0x1e>
    41d8:	00004528 	.word	0x00004528
    41dc:	00004528 	.word	0x00004528
    41e0:	00004528 	.word	0x00004528
    41e4:	0000452c 	.word	0x0000452c
    41e8:	682f2e2e 	.word	0x682f2e2e
    41ec:	732f6c61 	.word	0x732f6c61
    41f0:	682f6372 	.word	0x682f6372
    41f4:	615f6c61 	.word	0x615f6c61
    41f8:	735f6364 	.word	0x735f6364
    41fc:	2e636e79 	.word	0x2e636e79
    4200:	00000063 	.word	0x00000063
    4204:	682f2e2e 	.word	0x682f2e2e
    4208:	732f6c61 	.word	0x732f6c61
    420c:	682f6372 	.word	0x682f6372
    4210:	635f6c61 	.word	0x635f6c61
    4214:	72656d61 	.word	0x72656d61
    4218:	73615f61 	.word	0x73615f61
    421c:	2e636e79 	.word	0x2e636e79
    4220:	00000063 	.word	0x00000063
    4224:	682f2e2e 	.word	0x682f2e2e
    4228:	732f6c61 	.word	0x732f6c61
    422c:	682f6372 	.word	0x682f6372
    4230:	6d5f6c61 	.word	0x6d5f6c61
    4234:	735f6963 	.word	0x735f6963
    4238:	2e636e79 	.word	0x2e636e79
    423c:	00000063 	.word	0x00000063
    4240:	682f2e2e 	.word	0x682f2e2e
    4244:	732f6c61 	.word	0x732f6c61
    4248:	682f6372 	.word	0x682f6372
    424c:	705f6c61 	.word	0x705f6c61
    4250:	632e6d77 	.word	0x632e6d77
    4254:	00000000 	.word	0x00000000
    4258:	682f2e2e 	.word	0x682f2e2e
    425c:	732f6c61 	.word	0x732f6c61
    4260:	682f6372 	.word	0x682f6372
    4264:	745f6c61 	.word	0x745f6c61
    4268:	72656d69 	.word	0x72656d69
    426c:	0000632e 	.word	0x0000632e
    4270:	682f2e2e 	.word	0x682f2e2e
    4274:	732f6c61 	.word	0x732f6c61
    4278:	682f6372 	.word	0x682f6372
    427c:	755f6c61 	.word	0x755f6c61
    4280:	74726173 	.word	0x74726173
    4284:	7973615f 	.word	0x7973615f
    4288:	632e636e 	.word	0x632e636e
    428c:	00000000 	.word	0x00000000
    4290:	682f2e2e 	.word	0x682f2e2e
    4294:	752f6c61 	.word	0x752f6c61
    4298:	736c6974 	.word	0x736c6974
    429c:	6372732f 	.word	0x6372732f
    42a0:	6974752f 	.word	0x6974752f
    42a4:	6c5f736c 	.word	0x6c5f736c
    42a8:	2e747369 	.word	0x2e747369
    42ac:	00000063 	.word	0x00000063
    42b0:	682f2e2e 	.word	0x682f2e2e
    42b4:	752f6c61 	.word	0x752f6c61
    42b8:	736c6974 	.word	0x736c6974
    42bc:	6372732f 	.word	0x6372732f
    42c0:	6974752f 	.word	0x6974752f
    42c4:	725f736c 	.word	0x725f736c
    42c8:	62676e69 	.word	0x62676e69
    42cc:	65666675 	.word	0x65666675
    42d0:	00632e72 	.word	0x00632e72

000042d4 <_adcs>:
    42d4:	00000000 00000018 00001800 00000000     ................
	...
    42ec:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    42fc:	632e6364 00000000                       dc.c....

00004304 <_cfgs>:
    4304:	00205000 0a000000 00000000 00000000     .P .............
	...

00004404 <_map>:
    4404:	00000006 00000036 00000007 00000037     ....6.......7...
    4414:	00000009 00000019 0000000e 0000002e     ................
    4424:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    4434:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    4444:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    4454:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4464:	43000000 43000400                       ...C...C

0000446c <_usarts>:
    446c:	00000005 40100004 00030000 00700002     .......@......p.
    447c:	0000ff58 00000000                       X.......

00004484 <_i2cms>:
	...

0000449c <_i2css>:
	...

000044ac <sercomspi_regs>:
	...
    44c0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    44d0:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    44e0:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    44f0:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    4500:	63745f6c 0000632e 732f2e2e 6d6d5f64     l_tc.c..../sd_mm
    4510:	64732f63 636d6d5f 0000632e              c/sd_mmc.c..

0000451c <_init>:
    451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451e:	bf00      	nop
    4520:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4522:	bc08      	pop	{r3}
    4524:	469e      	mov	lr, r3
    4526:	4770      	bx	lr

00004528 <__init_array_start>:
    4528:	00000289 	.word	0x00000289

0000452c <_fini>:
    452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452e:	bf00      	nop
    4530:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4532:	bc08      	pop	{r3}
    4534:	469e      	mov	lr, r3
    4536:	4770      	bx	lr

00004538 <__fini_array_start>:
    4538:	00000265 	.word	0x00000265
