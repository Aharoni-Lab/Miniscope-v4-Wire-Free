
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005288  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005288  00005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  00005290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
  5 .bss          00028b9c  20000040  000052d0  00020038  2**4
                  ALLOC
  6 .stack        00010004  20028bdc  0002de6c  00020038  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
  9 .debug_info   00040c94  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005508  00000000  00000000  00060d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018cb3  00000000  00000000  0006625b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013a8  00000000  00000000  0007ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001468  00000000  00000000  000802b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000328b4  00000000  00000000  0008171e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e3b3  00000000  00000000  000b3fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100a37  00000000  00000000  000d2385  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003440  00000000  00000000  001d2dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 49 1e 00 00     ............I...
      8c:	55 1e 00 00 e5 02 00 00 61 1e 00 00 e5 02 00 00     U.......a.......
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 6d 1e 00 00     ............m...
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e9 1b 00 00 f5 1b 00 00 01 1c 00 00 0d 1c 00 00     ................
      cc:	19 1c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	c5 20 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     . ..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 c1 2b 00 00 d5 2b 00 00 e9 2b 00 00     .....+...+...+..
     154:	fd 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 19 31 00 00     .............1..
     1f0:	2d 31 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     -1..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 99 20 00 00 e5 02 00 00 e5 02 00 00     ..... ..........
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	00005290 	.word	0x00005290

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005290 	.word	0x00005290
     2c4:	20000044 	.word	0x20000044
     2c8:	00005290 	.word	0x00005290
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	00004b15 	.word	0x00004b15

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00005290 	.word	0x00005290
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028bdc 	.word	0x20028bdc
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	00004e41 	.word	0x00004e41
     360:	00003c51 	.word	0x00003c51

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	000030d3 	.word	0x000030d3
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	000012f5 	.word	0x000012f5

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	00001571 	.word	0x00001571
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	000030d7 	.word	0x000030d7
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	000011f9 	.word	0x000011f9

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001a0d 	.word	0x00001a0d
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	00004e98 	.word	0x00004e98
     c6c:	00001605 	.word	0x00001605
     c70:	00001935 	.word	0x00001935

00000c74 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
	ASSERT(descr);
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3

	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	00004e98 	.word	0x00004e98
     c98:	00001605 	.word	0x00001605
     c9c:	0000196d 	.word	0x0000196d

00000ca0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
	uint16_t offset = 0;
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
		buffer[offset] = result;
     d10:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>

	return offset;
}
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	00001605 	.word	0x00001605
     d2c:	00001983 	.word	0x00001983
     d30:	000019a3 	.word	0x000019a3
     d34:	00001997 	.word	0x00001997
     d38:	000019b9 	.word	0x000019b9
     d3c:	00004e98 	.word	0x00004e98

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	00004eb4 	.word	0x00004eb4
     d94:	00001605 	.word	0x00001605
     d98:	00002061 	.word	0x00002061
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	00002c25 	.word	0x00002c25

00000db4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     db4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	000019e1 	.word	0x000019e1
     dd0:	00002c31 	.word	0x00002c31

00000dd4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     dd4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	000019fd 	.word	0x000019fd
     df0:	00002c31 	.word	0x00002c31

00000df4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     df4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0

	while (upper >= lower) {
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
			lower = middle + 1;
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
{
     e38:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
}
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001ce9 	.word	0x00001ce9

00000e6c <ext_irq_register>:
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     e72:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     e92:	2701      	movs	r7, #1
			break;
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
	bool    found = false;
     e96:	2700      	movs	r7, #0
	if (NULL == cb) {
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
	if (!found) {
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
		if (!found) {
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
				found           = true;
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
	if (!found) {
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
}
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001df1 	.word	0x00001df1

00000f3c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
}
     f58:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
     f64:	00004ed4 	.word	0x00004ed4
     f68:	00001605 	.word	0x00001605
     f6c:	0000231d 	.word	0x0000231d

00000f70 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
	ASSERT(mci);
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
}
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	00004ed4 	.word	0x00004ed4
     fa4:	00001605 	.word	0x00001605
     fa8:	00002385 	.word	0x00002385

00000fac <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(mci);
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
}
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
     fcc:	00004ed4 	.word	0x00004ed4
     fd0:	00001605 	.word	0x00001605
     fd4:	00002419 	.word	0x00002419

00000fd8 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
     fd8:	b538      	push	{r3, r4, r5, lr}
     fda:	460d      	mov	r5, r1
	ASSERT(mci);
     fdc:	4604      	mov	r4, r0
     fde:	2256      	movs	r2, #86	; 0x56
     fe0:	4905      	ldr	r1, [pc, #20]	; (ff8 <mci_sync_get_bus_width+0x20>)
     fe2:	3000      	adds	r0, #0
     fe4:	bf18      	it	ne
     fe6:	2001      	movne	r0, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <mci_sync_get_bus_width+0x24>)
     fea:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
     fec:	4629      	mov	r1, r5
     fee:	4620      	mov	r0, r4
     ff0:	4b03      	ldr	r3, [pc, #12]	; (1000 <mci_sync_get_bus_width+0x28>)
     ff2:	4798      	blx	r3
}
     ff4:	bd38      	pop	{r3, r4, r5, pc}
     ff6:	bf00      	nop
     ff8:	00004ed4 	.word	0x00004ed4
     ffc:	00001605 	.word	0x00001605
    1000:	0000241d 	.word	0x0000241d

00001004 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    1004:	b510      	push	{r4, lr}
	ASSERT(mci);
    1006:	4604      	mov	r4, r0
    1008:	2260      	movs	r2, #96	; 0x60
    100a:	4905      	ldr	r1, [pc, #20]	; (1020 <mci_sync_is_high_speed_capable+0x1c>)
    100c:	3000      	adds	r0, #0
    100e:	bf18      	it	ne
    1010:	2001      	movne	r0, #1
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <mci_sync_is_high_speed_capable+0x20>)
    1014:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    1016:	4620      	mov	r0, r4
    1018:	4b03      	ldr	r3, [pc, #12]	; (1028 <mci_sync_is_high_speed_capable+0x24>)
    101a:	4798      	blx	r3
}
    101c:	bd10      	pop	{r4, pc}
    101e:	bf00      	nop
    1020:	00004ed4 	.word	0x00004ed4
    1024:	00001605 	.word	0x00001605
    1028:	00002427 	.word	0x00002427

0000102c <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    102c:	b510      	push	{r4, lr}
	ASSERT(mci);
    102e:	4604      	mov	r4, r0
    1030:	2269      	movs	r2, #105	; 0x69
    1032:	4905      	ldr	r1, [pc, #20]	; (1048 <mci_sync_send_clock+0x1c>)
    1034:	3000      	adds	r0, #0
    1036:	bf18      	it	ne
    1038:	2001      	movne	r0, #1
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <mci_sync_send_clock+0x20>)
    103c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    103e:	4620      	mov	r0, r4
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <mci_sync_send_clock+0x24>)
    1042:	4798      	blx	r3
    1044:	bd10      	pop	{r4, pc}
    1046:	bf00      	nop
    1048:	00004ed4 	.word	0x00004ed4
    104c:	00001605 	.word	0x00001605
    1050:	00002431 	.word	0x00002431

00001054 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    1054:	b570      	push	{r4, r5, r6, lr}
    1056:	460d      	mov	r5, r1
    1058:	4616      	mov	r6, r2
	ASSERT(mci);
    105a:	4604      	mov	r4, r0
    105c:	2272      	movs	r2, #114	; 0x72
    105e:	4906      	ldr	r1, [pc, #24]	; (1078 <mci_sync_send_cmd+0x24>)
    1060:	3000      	adds	r0, #0
    1062:	bf18      	it	ne
    1064:	2001      	movne	r0, #1
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <mci_sync_send_cmd+0x28>)
    1068:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    106a:	4632      	mov	r2, r6
    106c:	4629      	mov	r1, r5
    106e:	4620      	mov	r0, r4
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <mci_sync_send_cmd+0x2c>)
    1072:	4798      	blx	r3
}
    1074:	bd70      	pop	{r4, r5, r6, pc}
    1076:	bf00      	nop
    1078:	00004ed4 	.word	0x00004ed4
    107c:	00001605 	.word	0x00001605
    1080:	00002469 	.word	0x00002469

00001084 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1084:	b510      	push	{r4, lr}
	ASSERT(mci);
    1086:	4604      	mov	r4, r0
    1088:	227b      	movs	r2, #123	; 0x7b
    108a:	4905      	ldr	r1, [pc, #20]	; (10a0 <mci_sync_get_response+0x1c>)
    108c:	3000      	adds	r0, #0
    108e:	bf18      	it	ne
    1090:	2001      	movne	r0, #1
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <mci_sync_get_response+0x20>)
    1094:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    1096:	4620      	mov	r0, r4
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <mci_sync_get_response+0x24>)
    109a:	4798      	blx	r3
}
    109c:	bd10      	pop	{r4, pc}
    109e:	bf00      	nop
    10a0:	00004ed4 	.word	0x00004ed4
    10a4:	00001605 	.word	0x00001605
    10a8:	000024c1 	.word	0x000024c1

000010ac <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    10ac:	b538      	push	{r3, r4, r5, lr}
    10ae:	460c      	mov	r4, r1
	ASSERT(mci && response);
    10b0:	4605      	mov	r5, r0
    10b2:	b160      	cbz	r0, 10ce <mci_sync_get_response_128+0x22>
    10b4:	b149      	cbz	r1, 10ca <mci_sync_get_response_128+0x1e>
    10b6:	2001      	movs	r0, #1
    10b8:	2284      	movs	r2, #132	; 0x84
    10ba:	4906      	ldr	r1, [pc, #24]	; (10d4 <mci_sync_get_response_128+0x28>)
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <mci_sync_get_response_128+0x2c>)
    10be:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    10c0:	4621      	mov	r1, r4
    10c2:	4628      	mov	r0, r5
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <mci_sync_get_response_128+0x30>)
    10c6:	4798      	blx	r3
    10c8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    10ca:	2000      	movs	r0, #0
    10cc:	e7f4      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10ce:	2000      	movs	r0, #0
    10d0:	e7f2      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10d2:	bf00      	nop
    10d4:	00004ed4 	.word	0x00004ed4
    10d8:	00001605 	.word	0x00001605
    10dc:	000024ed 	.word	0x000024ed

000010e0 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	b083      	sub	sp, #12
    10e4:	460d      	mov	r5, r1
    10e6:	4616      	mov	r6, r2
    10e8:	461f      	mov	r7, r3
	ASSERT(mci);
    10ea:	4604      	mov	r4, r0
    10ec:	2290      	movs	r2, #144	; 0x90
    10ee:	490a      	ldr	r1, [pc, #40]	; (1118 <mci_sync_adtc_start+0x38>)
    10f0:	3000      	adds	r0, #0
    10f2:	bf18      	it	ne
    10f4:	2001      	movne	r0, #1
    10f6:	4b09      	ldr	r3, [pc, #36]	; (111c <mci_sync_adtc_start+0x3c>)
    10f8:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    10fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    10fe:	9301      	str	r3, [sp, #4]
    1100:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1104:	9300      	str	r3, [sp, #0]
    1106:	463b      	mov	r3, r7
    1108:	4632      	mov	r2, r6
    110a:	4629      	mov	r1, r5
    110c:	4620      	mov	r0, r4
    110e:	4c04      	ldr	r4, [pc, #16]	; (1120 <mci_sync_adtc_start+0x40>)
    1110:	47a0      	blx	r4
}
    1112:	b003      	add	sp, #12
    1114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1116:	bf00      	nop
    1118:	00004ed4 	.word	0x00004ed4
    111c:	00001605 	.word	0x00001605
    1120:	00002545 	.word	0x00002545

00001124 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	460c      	mov	r4, r1
    1128:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    112a:	4605      	mov	r5, r0
    112c:	b168      	cbz	r0, 114a <mci_sync_start_read_blocks+0x26>
    112e:	b151      	cbz	r1, 1146 <mci_sync_start_read_blocks+0x22>
    1130:	2001      	movs	r0, #1
    1132:	22b5      	movs	r2, #181	; 0xb5
    1134:	4906      	ldr	r1, [pc, #24]	; (1150 <mci_sync_start_read_blocks+0x2c>)
    1136:	4b07      	ldr	r3, [pc, #28]	; (1154 <mci_sync_start_read_blocks+0x30>)
    1138:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    113a:	4632      	mov	r2, r6
    113c:	4621      	mov	r1, r4
    113e:	4628      	mov	r0, r5
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <mci_sync_start_read_blocks+0x34>)
    1142:	4798      	blx	r3
}
    1144:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    1146:	2000      	movs	r0, #0
    1148:	e7f3      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114a:	2000      	movs	r0, #0
    114c:	e7f1      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114e:	bf00      	nop
    1150:	00004ed4 	.word	0x00004ed4
    1154:	00001605 	.word	0x00001605
    1158:	000027b1 	.word	0x000027b1

0000115c <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    115c:	b570      	push	{r4, r5, r6, lr}
    115e:	460c      	mov	r4, r1
    1160:	4616      	mov	r6, r2
	ASSERT(mci && src);
    1162:	4605      	mov	r5, r0
    1164:	b168      	cbz	r0, 1182 <mci_sync_start_write_blocks+0x26>
    1166:	b151      	cbz	r1, 117e <mci_sync_start_write_blocks+0x22>
    1168:	2001      	movs	r0, #1
    116a:	22be      	movs	r2, #190	; 0xbe
    116c:	4906      	ldr	r1, [pc, #24]	; (1188 <mci_sync_start_write_blocks+0x2c>)
    116e:	4b07      	ldr	r3, [pc, #28]	; (118c <mci_sync_start_write_blocks+0x30>)
    1170:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    1172:	4632      	mov	r2, r6
    1174:	4621      	mov	r1, r4
    1176:	4628      	mov	r0, r5
    1178:	4b05      	ldr	r3, [pc, #20]	; (1190 <mci_sync_start_write_blocks+0x34>)
    117a:	4798      	blx	r3
}
    117c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    117e:	2000      	movs	r0, #0
    1180:	e7f3      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1182:	2000      	movs	r0, #0
    1184:	e7f1      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1186:	bf00      	nop
    1188:	00004ed4 	.word	0x00004ed4
    118c:	00001605 	.word	0x00001605
    1190:	00002831 	.word	0x00002831

00001194 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    1194:	b510      	push	{r4, lr}
	ASSERT(mci);
    1196:	4604      	mov	r4, r0
    1198:	22c7      	movs	r2, #199	; 0xc7
    119a:	4905      	ldr	r1, [pc, #20]	; (11b0 <mci_sync_wait_end_of_read_blocks+0x1c>)
    119c:	3000      	adds	r0, #0
    119e:	bf18      	it	ne
    11a0:	2001      	movne	r0, #1
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <mci_sync_wait_end_of_read_blocks+0x20>)
    11a4:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    11a6:	4620      	mov	r0, r4
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <mci_sync_wait_end_of_read_blocks+0x24>)
    11aa:	4798      	blx	r3
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	bf00      	nop
    11b0:	00004ed4 	.word	0x00004ed4
    11b4:	00001605 	.word	0x00001605
    11b8:	000028b1 	.word	0x000028b1

000011bc <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    11bc:	b510      	push	{r4, lr}
	ASSERT(mci);
    11be:	4604      	mov	r4, r0
    11c0:	22d0      	movs	r2, #208	; 0xd0
    11c2:	4905      	ldr	r1, [pc, #20]	; (11d8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    11c4:	3000      	adds	r0, #0
    11c6:	bf18      	it	ne
    11c8:	2001      	movne	r0, #1
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <mci_sync_wait_end_of_write_blocks+0x20>)
    11cc:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    11ce:	4620      	mov	r0, r4
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <mci_sync_wait_end_of_write_blocks+0x24>)
    11d2:	4798      	blx	r3
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	bf00      	nop
    11d8:	00004ed4 	.word	0x00004ed4
    11dc:	00001605 	.word	0x00001605
    11e0:	000028d9 	.word	0x000028d9

000011e4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    11e4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    11e6:	6943      	ldr	r3, [r0, #20]
    11e8:	b103      	cbz	r3, 11ec <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    11ea:	4798      	blx	r3
    11ec:	bd08      	pop	{r3, pc}

000011ee <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    11ee:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    11f0:	6983      	ldr	r3, [r0, #24]
    11f2:	b103      	cbz	r3, 11f6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    11f4:	4798      	blx	r3
    11f6:	bd08      	pop	{r3, pc}

000011f8 <pwm_init>:
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11fc:	4604      	mov	r4, r0
    11fe:	b188      	cbz	r0, 1224 <pwm_init+0x2c>
    1200:	b171      	cbz	r1, 1220 <pwm_init+0x28>
    1202:	2001      	movs	r0, #1
    1204:	2233      	movs	r2, #51	; 0x33
    1206:	4908      	ldr	r1, [pc, #32]	; (1228 <pwm_init+0x30>)
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <pwm_init+0x34>)
    120a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    120c:	4629      	mov	r1, r5
    120e:	4620      	mov	r0, r4
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <pwm_init+0x38>)
    1212:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1214:	4b07      	ldr	r3, [pc, #28]	; (1234 <pwm_init+0x3c>)
    1216:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1218:	4b07      	ldr	r3, [pc, #28]	; (1238 <pwm_init+0x40>)
    121a:	6063      	str	r3, [r4, #4]
}
    121c:	2000      	movs	r0, #0
    121e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1220:	2000      	movs	r0, #0
    1222:	e7ef      	b.n	1204 <pwm_init+0xc>
    1224:	2000      	movs	r0, #0
    1226:	e7ed      	b.n	1204 <pwm_init+0xc>
    1228:	00004ef0 	.word	0x00004ef0
    122c:	00001605 	.word	0x00001605
    1230:	00002f2d 	.word	0x00002f2d
    1234:	000011e5 	.word	0x000011e5
    1238:	000011ef 	.word	0x000011ef

0000123c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    123e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1240:	b117      	cbz	r7, 1248 <timer_add_timer_task+0xc>
    1242:	463c      	mov	r4, r7
    1244:	2600      	movs	r6, #0
    1246:	e00b      	b.n	1260 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    1248:	4b0e      	ldr	r3, [pc, #56]	; (1284 <timer_add_timer_task+0x48>)
    124a:	4798      	blx	r3
		return;
    124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    124e:	68a5      	ldr	r5, [r4, #8]
    1250:	442b      	add	r3, r5
    1252:	1a9b      	subs	r3, r3, r2
    1254:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    1256:	688d      	ldr	r5, [r1, #8]
    1258:	42ab      	cmp	r3, r5
    125a:	d209      	bcs.n	1270 <timer_add_timer_task+0x34>
			break;
		prev = it;
    125c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    125e:	6824      	ldr	r4, [r4, #0]
    1260:	b134      	cbz	r4, 1270 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    1262:	6863      	ldr	r3, [r4, #4]
    1264:	4293      	cmp	r3, r2
    1266:	d8f2      	bhi.n	124e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    1268:	68a5      	ldr	r5, [r4, #8]
    126a:	1a9b      	subs	r3, r3, r2
    126c:	442b      	add	r3, r5
    126e:	e7f2      	b.n	1256 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    1270:	42bc      	cmp	r4, r7
    1272:	d003      	beq.n	127c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1274:	4630      	mov	r0, r6
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <timer_add_timer_task+0x4c>)
    1278:	4798      	blx	r3
    127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    127c:	4b01      	ldr	r3, [pc, #4]	; (1284 <timer_add_timer_task+0x48>)
    127e:	4798      	blx	r3
    1280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1282:	bf00      	nop
    1284:	00001621 	.word	0x00001621
    1288:	0000164d 	.word	0x0000164d

0000128c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1290:	6906      	ldr	r6, [r0, #16]
    1292:	3601      	adds	r6, #1
    1294:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1296:	7e03      	ldrb	r3, [r0, #24]
    1298:	f013 0f01 	tst.w	r3, #1
    129c:	d105      	bne.n	12aa <timer_process_counted+0x1e>
    129e:	7e03      	ldrb	r3, [r0, #24]
    12a0:	f013 0f02 	tst.w	r3, #2
    12a4:	d101      	bne.n	12aa <timer_process_counted+0x1e>
    12a6:	4605      	mov	r5, r0
    12a8:	e009      	b.n	12be <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    12aa:	7e03      	ldrb	r3, [r0, #24]
    12ac:	f043 0302 	orr.w	r3, r3, #2
    12b0:	7603      	strb	r3, [r0, #24]
		return;
    12b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12b4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    12b6:	68e3      	ldr	r3, [r4, #12]
    12b8:	4620      	mov	r0, r4
    12ba:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    12bc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    12be:	b19c      	cbz	r4, 12e8 <timer_process_counted+0x5c>
    12c0:	6863      	ldr	r3, [r4, #4]
    12c2:	1af3      	subs	r3, r6, r3
    12c4:	68a2      	ldr	r2, [r4, #8]
    12c6:	4293      	cmp	r3, r2
    12c8:	d30e      	bcc.n	12e8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    12ca:	f105 0714 	add.w	r7, r5, #20
    12ce:	4638      	mov	r0, r7
    12d0:	4b06      	ldr	r3, [pc, #24]	; (12ec <timer_process_counted+0x60>)
    12d2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12d4:	7c23      	ldrb	r3, [r4, #16]
    12d6:	2b01      	cmp	r3, #1
    12d8:	d1ec      	bne.n	12b4 <timer_process_counted+0x28>
			tmp->time_label = time;
    12da:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12dc:	4632      	mov	r2, r6
    12de:	4621      	mov	r1, r4
    12e0:	4638      	mov	r0, r7
    12e2:	4b03      	ldr	r3, [pc, #12]	; (12f0 <timer_process_counted+0x64>)
    12e4:	4798      	blx	r3
    12e6:	e7e5      	b.n	12b4 <timer_process_counted+0x28>
    12e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ea:	bf00      	nop
    12ec:	00001655 	.word	0x00001655
    12f0:	0000123d 	.word	0x0000123d

000012f4 <timer_init>:
{
    12f4:	b538      	push	{r3, r4, r5, lr}
    12f6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    12f8:	4604      	mov	r4, r0
    12fa:	b180      	cbz	r0, 131e <timer_init+0x2a>
    12fc:	b169      	cbz	r1, 131a <timer_init+0x26>
    12fe:	2001      	movs	r0, #1
    1300:	223b      	movs	r2, #59	; 0x3b
    1302:	4908      	ldr	r1, [pc, #32]	; (1324 <timer_init+0x30>)
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <timer_init+0x34>)
    1306:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1308:	4629      	mov	r1, r5
    130a:	4620      	mov	r0, r4
    130c:	4b07      	ldr	r3, [pc, #28]	; (132c <timer_init+0x38>)
    130e:	4798      	blx	r3
	descr->time                           = 0;
    1310:	2000      	movs	r0, #0
    1312:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <timer_init+0x3c>)
    1316:	6023      	str	r3, [r4, #0]
}
    1318:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    131a:	2000      	movs	r0, #0
    131c:	e7f0      	b.n	1300 <timer_init+0xc>
    131e:	2000      	movs	r0, #0
    1320:	e7ee      	b.n	1300 <timer_init+0xc>
    1322:	bf00      	nop
    1324:	00004f08 	.word	0x00004f08
    1328:	00001605 	.word	0x00001605
    132c:	00002d59 	.word	0x00002d59
    1330:	0000128d 	.word	0x0000128d

00001334 <timer_start>:
{
    1334:	b510      	push	{r4, lr}
	ASSERT(descr);
    1336:	4604      	mov	r4, r0
    1338:	2253      	movs	r2, #83	; 0x53
    133a:	4909      	ldr	r1, [pc, #36]	; (1360 <timer_start+0x2c>)
    133c:	3000      	adds	r0, #0
    133e:	bf18      	it	ne
    1340:	2001      	movne	r0, #1
    1342:	4b08      	ldr	r3, [pc, #32]	; (1364 <timer_start+0x30>)
    1344:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1346:	4620      	mov	r0, r4
    1348:	4b07      	ldr	r3, [pc, #28]	; (1368 <timer_start+0x34>)
    134a:	4798      	blx	r3
    134c:	b920      	cbnz	r0, 1358 <timer_start+0x24>
	_timer_start(&descr->device);
    134e:	4620      	mov	r0, r4
    1350:	4b06      	ldr	r3, [pc, #24]	; (136c <timer_start+0x38>)
    1352:	4798      	blx	r3
	return ERR_NONE;
    1354:	2000      	movs	r0, #0
    1356:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1358:	f06f 0010 	mvn.w	r0, #16
}
    135c:	bd10      	pop	{r4, pc}
    135e:	bf00      	nop
    1360:	00004f08 	.word	0x00004f08
    1364:	00001605 	.word	0x00001605
    1368:	000030c1 	.word	0x000030c1
    136c:	000030ad 	.word	0x000030ad

00001370 <timer_add_task>:
{
    1370:	b570      	push	{r4, r5, r6, lr}
    1372:	b082      	sub	sp, #8
    1374:	460d      	mov	r5, r1
	ASSERT(descr && task);
    1376:	4604      	mov	r4, r0
    1378:	b320      	cbz	r0, 13c4 <timer_add_task+0x54>
    137a:	b309      	cbz	r1, 13c0 <timer_add_task+0x50>
    137c:	2001      	movs	r0, #1
    137e:	227a      	movs	r2, #122	; 0x7a
    1380:	491f      	ldr	r1, [pc, #124]	; (1400 <timer_add_task+0x90>)
    1382:	4b20      	ldr	r3, [pc, #128]	; (1404 <timer_add_task+0x94>)
    1384:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1386:	7e23      	ldrb	r3, [r4, #24]
    1388:	f043 0301 	orr.w	r3, r3, #1
    138c:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    138e:	f104 0614 	add.w	r6, r4, #20
    1392:	4629      	mov	r1, r5
    1394:	4630      	mov	r0, r6
    1396:	4b1c      	ldr	r3, [pc, #112]	; (1408 <timer_add_task+0x98>)
    1398:	4798      	blx	r3
    139a:	b9a8      	cbnz	r0, 13c8 <timer_add_task+0x58>
	task->time_label = descr->time;
    139c:	6923      	ldr	r3, [r4, #16]
    139e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    13a0:	6922      	ldr	r2, [r4, #16]
    13a2:	4629      	mov	r1, r5
    13a4:	4630      	mov	r0, r6
    13a6:	4b19      	ldr	r3, [pc, #100]	; (140c <timer_add_task+0x9c>)
    13a8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    13aa:	7e23      	ldrb	r3, [r4, #24]
    13ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    13b0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    13b2:	7e23      	ldrb	r3, [r4, #24]
    13b4:	f013 0f02 	tst.w	r3, #2
    13b8:	d112      	bne.n	13e0 <timer_add_task+0x70>
	return ERR_NONE;
    13ba:	2000      	movs	r0, #0
}
    13bc:	b002      	add	sp, #8
    13be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    13c0:	2000      	movs	r0, #0
    13c2:	e7dc      	b.n	137e <timer_add_task+0xe>
    13c4:	2000      	movs	r0, #0
    13c6:	e7da      	b.n	137e <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    13c8:	7e23      	ldrb	r3, [r4, #24]
    13ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    13ce:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    13d0:	227f      	movs	r2, #127	; 0x7f
    13d2:	490b      	ldr	r1, [pc, #44]	; (1400 <timer_add_task+0x90>)
    13d4:	2000      	movs	r0, #0
    13d6:	4b0b      	ldr	r3, [pc, #44]	; (1404 <timer_add_task+0x94>)
    13d8:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    13da:	f06f 0011 	mvn.w	r0, #17
    13de:	e7ed      	b.n	13bc <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    13e0:	a801      	add	r0, sp, #4
    13e2:	4b0b      	ldr	r3, [pc, #44]	; (1410 <timer_add_task+0xa0>)
    13e4:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    13e6:	7e23      	ldrb	r3, [r4, #24]
    13e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    13ec:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    13ee:	4620      	mov	r0, r4
    13f0:	4b08      	ldr	r3, [pc, #32]	; (1414 <timer_add_task+0xa4>)
    13f2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    13f4:	a801      	add	r0, sp, #4
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <timer_add_task+0xa8>)
    13f8:	4798      	blx	r3
	return ERR_NONE;
    13fa:	2000      	movs	r0, #0
    13fc:	e7de      	b.n	13bc <timer_add_task+0x4c>
    13fe:	bf00      	nop
    1400:	00004f08 	.word	0x00004f08
    1404:	00001605 	.word	0x00001605
    1408:	0000160b 	.word	0x0000160b
    140c:	0000123d 	.word	0x0000123d
    1410:	00000d41 	.word	0x00000d41
    1414:	000030dd 	.word	0x000030dd
    1418:	00000d4f 	.word	0x00000d4f

0000141c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    141c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    141e:	2300      	movs	r3, #0
    1420:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1422:	69c3      	ldr	r3, [r0, #28]
    1424:	b11b      	cbz	r3, 142e <usart_transmission_complete+0x12>
    1426:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    142a:	4610      	mov	r0, r2
    142c:	4798      	blx	r3
    142e:	bd08      	pop	{r3, pc}

00001430 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1430:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1432:	2300      	movs	r3, #0
    1434:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1436:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1438:	b11b      	cbz	r3, 1442 <usart_error+0x12>
    143a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    143e:	4610      	mov	r0, r2
    1440:	4798      	blx	r3
    1442:	bd08      	pop	{r3, pc}

00001444 <usart_fill_rx_buffer>:
{
    1444:	b538      	push	{r3, r4, r5, lr}
    1446:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1448:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    144c:	302c      	adds	r0, #44	; 0x2c
    144e:	4b03      	ldr	r3, [pc, #12]	; (145c <usart_fill_rx_buffer+0x18>)
    1450:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1452:	6a23      	ldr	r3, [r4, #32]
    1454:	b10b      	cbz	r3, 145a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1456:	4628      	mov	r0, r5
    1458:	4798      	blx	r3
    145a:	bd38      	pop	{r3, r4, r5, pc}
    145c:	000016f1 	.word	0x000016f1

00001460 <usart_async_write>:
{
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	460e      	mov	r6, r1
    1464:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1466:	4604      	mov	r4, r0
    1468:	b1d8      	cbz	r0, 14a2 <usart_async_write+0x42>
    146a:	b1e1      	cbz	r1, 14a6 <usart_async_write+0x46>
    146c:	b9ea      	cbnz	r2, 14aa <usart_async_write+0x4a>
    146e:	2000      	movs	r0, #0
    1470:	f240 123b 	movw	r2, #315	; 0x13b
    1474:	490f      	ldr	r1, [pc, #60]	; (14b4 <usart_async_write+0x54>)
    1476:	4b10      	ldr	r3, [pc, #64]	; (14b8 <usart_async_write+0x58>)
    1478:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    147a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    147e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1482:	429a      	cmp	r2, r3
    1484:	d113      	bne.n	14ae <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    1486:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1488:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    148c:	2300      	movs	r3, #0
    148e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1492:	2301      	movs	r3, #1
    1494:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1496:	f104 0008 	add.w	r0, r4, #8
    149a:	4b08      	ldr	r3, [pc, #32]	; (14bc <usart_async_write+0x5c>)
    149c:	4798      	blx	r3
	return (int32_t)length;
    149e:	4628      	mov	r0, r5
    14a0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    14a2:	2000      	movs	r0, #0
    14a4:	e7e4      	b.n	1470 <usart_async_write+0x10>
    14a6:	2000      	movs	r0, #0
    14a8:	e7e2      	b.n	1470 <usart_async_write+0x10>
    14aa:	2001      	movs	r0, #1
    14ac:	e7e0      	b.n	1470 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    14ae:	f06f 001b 	mvn.w	r0, #27
}
    14b2:	bd70      	pop	{r4, r5, r6, pc}
    14b4:	00004f20 	.word	0x00004f20
    14b8:	00001605 	.word	0x00001605
    14bc:	00002baf 	.word	0x00002baf

000014c0 <usart_process_byte_sent>:
{
    14c0:	b510      	push	{r4, lr}
    14c2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    14c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    14c6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    14ca:	4293      	cmp	r3, r2
    14cc:	d009      	beq.n	14e2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    14ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    14d0:	1c59      	adds	r1, r3, #1
    14d2:	8781      	strh	r1, [r0, #60]	; 0x3c
    14d4:	5cd1      	ldrb	r1, [r2, r3]
    14d6:	4b04      	ldr	r3, [pc, #16]	; (14e8 <usart_process_byte_sent+0x28>)
    14d8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    14da:	4620      	mov	r0, r4
    14dc:	4b03      	ldr	r3, [pc, #12]	; (14ec <usart_process_byte_sent+0x2c>)
    14de:	4798      	blx	r3
    14e0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    14e2:	4b03      	ldr	r3, [pc, #12]	; (14f0 <usart_process_byte_sent+0x30>)
    14e4:	4798      	blx	r3
    14e6:	bd10      	pop	{r4, pc}
    14e8:	00002ba9 	.word	0x00002ba9
    14ec:	00002baf 	.word	0x00002baf
    14f0:	00002bb7 	.word	0x00002bb7

000014f4 <usart_async_read>:
{
    14f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14f8:	b082      	sub	sp, #8
    14fa:	4688      	mov	r8, r1
    14fc:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    14fe:	4605      	mov	r5, r0
    1500:	b1a0      	cbz	r0, 152c <usart_async_read+0x38>
    1502:	b1a9      	cbz	r1, 1530 <usart_async_read+0x3c>
    1504:	b9b2      	cbnz	r2, 1534 <usart_async_read+0x40>
    1506:	2000      	movs	r0, #0
    1508:	f44f 72ac 	mov.w	r2, #344	; 0x158
    150c:	4912      	ldr	r1, [pc, #72]	; (1558 <usart_async_read+0x64>)
    150e:	4b13      	ldr	r3, [pc, #76]	; (155c <usart_async_read+0x68>)
    1510:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1512:	a801      	add	r0, sp, #4
    1514:	4b12      	ldr	r3, [pc, #72]	; (1560 <usart_async_read+0x6c>)
    1516:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1518:	3534      	adds	r5, #52	; 0x34
    151a:	4628      	mov	r0, r5
    151c:	4b11      	ldr	r3, [pc, #68]	; (1564 <usart_async_read+0x70>)
    151e:	4798      	blx	r3
    1520:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    1522:	a801      	add	r0, sp, #4
    1524:	4b10      	ldr	r3, [pc, #64]	; (1568 <usart_async_read+0x74>)
    1526:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1528:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    152a:	e00b      	b.n	1544 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    152c:	2000      	movs	r0, #0
    152e:	e7eb      	b.n	1508 <usart_async_read+0x14>
    1530:	2000      	movs	r0, #0
    1532:	e7e9      	b.n	1508 <usart_async_read+0x14>
    1534:	2001      	movs	r0, #1
    1536:	e7e7      	b.n	1508 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1538:	3401      	adds	r4, #1
    153a:	b2a4      	uxth	r4, r4
    153c:	4441      	add	r1, r8
    153e:	4628      	mov	r0, r5
    1540:	4b0a      	ldr	r3, [pc, #40]	; (156c <usart_async_read+0x78>)
    1542:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1544:	4621      	mov	r1, r4
    1546:	42a7      	cmp	r7, r4
    1548:	d901      	bls.n	154e <usart_async_read+0x5a>
    154a:	42b4      	cmp	r4, r6
    154c:	d3f4      	bcc.n	1538 <usart_async_read+0x44>
}
    154e:	4620      	mov	r0, r4
    1550:	b002      	add	sp, #8
    1552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1556:	bf00      	nop
    1558:	00004f20 	.word	0x00004f20
    155c:	00001605 	.word	0x00001605
    1560:	00000d41 	.word	0x00000d41
    1564:	00001731 	.word	0x00001731
    1568:	00000d4f 	.word	0x00000d4f
    156c:	000016a9 	.word	0x000016a9

00001570 <usart_async_init>:
{
    1570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1572:	460d      	mov	r5, r1
    1574:	4616      	mov	r6, r2
    1576:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1578:	4604      	mov	r4, r0
    157a:	b318      	cbz	r0, 15c4 <usart_async_init+0x54>
    157c:	b321      	cbz	r1, 15c8 <usart_async_init+0x58>
    157e:	b32a      	cbz	r2, 15cc <usart_async_init+0x5c>
    1580:	bb33      	cbnz	r3, 15d0 <usart_async_init+0x60>
    1582:	2000      	movs	r0, #0
    1584:	223a      	movs	r2, #58	; 0x3a
    1586:	4915      	ldr	r1, [pc, #84]	; (15dc <usart_async_init+0x6c>)
    1588:	4b15      	ldr	r3, [pc, #84]	; (15e0 <usart_async_init+0x70>)
    158a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    158c:	463a      	mov	r2, r7
    158e:	4631      	mov	r1, r6
    1590:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1594:	4b13      	ldr	r3, [pc, #76]	; (15e4 <usart_async_init+0x74>)
    1596:	4798      	blx	r3
    1598:	b9e0      	cbnz	r0, 15d4 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    159a:	4629      	mov	r1, r5
    159c:	f104 0008 	add.w	r0, r4, #8
    15a0:	4b11      	ldr	r3, [pc, #68]	; (15e8 <usart_async_init+0x78>)
    15a2:	4798      	blx	r3
	if (init_status) {
    15a4:	4603      	mov	r3, r0
    15a6:	b958      	cbnz	r0, 15c0 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    15a8:	4a10      	ldr	r2, [pc, #64]	; (15ec <usart_async_init+0x7c>)
    15aa:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    15ac:	4a10      	ldr	r2, [pc, #64]	; (15f0 <usart_async_init+0x80>)
    15ae:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    15b0:	4a10      	ldr	r2, [pc, #64]	; (15f4 <usart_async_init+0x84>)
    15b2:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    15b4:	4a10      	ldr	r2, [pc, #64]	; (15f8 <usart_async_init+0x88>)
    15b6:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    15b8:	4a10      	ldr	r2, [pc, #64]	; (15fc <usart_async_init+0x8c>)
    15ba:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    15bc:	4a10      	ldr	r2, [pc, #64]	; (1600 <usart_async_init+0x90>)
    15be:	6162      	str	r2, [r4, #20]
}
    15c0:	4618      	mov	r0, r3
    15c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    15c4:	2000      	movs	r0, #0
    15c6:	e7dd      	b.n	1584 <usart_async_init+0x14>
    15c8:	2000      	movs	r0, #0
    15ca:	e7db      	b.n	1584 <usart_async_init+0x14>
    15cc:	2000      	movs	r0, #0
    15ce:	e7d9      	b.n	1584 <usart_async_init+0x14>
    15d0:	2001      	movs	r0, #1
    15d2:	e7d7      	b.n	1584 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    15d4:	f06f 030c 	mvn.w	r3, #12
    15d8:	e7f2      	b.n	15c0 <usart_async_init+0x50>
    15da:	bf00      	nop
    15dc:	00004f20 	.word	0x00004f20
    15e0:	00001605 	.word	0x00001605
    15e4:	00001665 	.word	0x00001665
    15e8:	00002b25 	.word	0x00002b25
    15ec:	000014f5 	.word	0x000014f5
    15f0:	00001461 	.word	0x00001461
    15f4:	000014c1 	.word	0x000014c1
    15f8:	00001445 	.word	0x00001445
    15fc:	0000141d 	.word	0x0000141d
    1600:	00001431 	.word	0x00001431

00001604 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1604:	b900      	cbnz	r0, 1608 <assert+0x4>
		__asm("BKPT #0");
    1606:	be00      	bkpt	0x0000
    1608:	4770      	bx	lr

0000160a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    160a:	6803      	ldr	r3, [r0, #0]
    160c:	b11b      	cbz	r3, 1616 <is_list_element+0xc>
		if (it == element) {
    160e:	428b      	cmp	r3, r1
    1610:	d003      	beq.n	161a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	e7fa      	b.n	160c <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1616:	2000      	movs	r0, #0
    1618:	4770      	bx	lr
			return true;
    161a:	2001      	movs	r0, #1
}
    161c:	4770      	bx	lr
	...

00001620 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1620:	b538      	push	{r3, r4, r5, lr}
    1622:	4604      	mov	r4, r0
    1624:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1626:	4b06      	ldr	r3, [pc, #24]	; (1640 <list_insert_as_head+0x20>)
    1628:	4798      	blx	r3
    162a:	f080 0001 	eor.w	r0, r0, #1
    162e:	2239      	movs	r2, #57	; 0x39
    1630:	4904      	ldr	r1, [pc, #16]	; (1644 <list_insert_as_head+0x24>)
    1632:	b2c0      	uxtb	r0, r0
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <list_insert_as_head+0x28>)
    1636:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1638:	6823      	ldr	r3, [r4, #0]
    163a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    163c:	6025      	str	r5, [r4, #0]
    163e:	bd38      	pop	{r3, r4, r5, pc}
    1640:	0000160b 	.word	0x0000160b
    1644:	00004f40 	.word	0x00004f40
    1648:	00001605 	.word	0x00001605

0000164c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    164c:	6803      	ldr	r3, [r0, #0]
    164e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1650:	6001      	str	r1, [r0, #0]
    1652:	4770      	bx	lr

00001654 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1654:	6803      	ldr	r3, [r0, #0]
    1656:	b11b      	cbz	r3, 1660 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1658:	681a      	ldr	r2, [r3, #0]
    165a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    165c:	4618      	mov	r0, r3
    165e:	4770      	bx	lr
	}

	return NULL;
    1660:	2000      	movs	r0, #0
}
    1662:	4770      	bx	lr

00001664 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1664:	b570      	push	{r4, r5, r6, lr}
    1666:	460e      	mov	r6, r1
    1668:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    166a:	4604      	mov	r4, r0
    166c:	b178      	cbz	r0, 168e <ringbuffer_init+0x2a>
    166e:	b181      	cbz	r1, 1692 <ringbuffer_init+0x2e>
    1670:	b98a      	cbnz	r2, 1696 <ringbuffer_init+0x32>
    1672:	2000      	movs	r0, #0
    1674:	2228      	movs	r2, #40	; 0x28
    1676:	490a      	ldr	r1, [pc, #40]	; (16a0 <ringbuffer_init+0x3c>)
    1678:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <ringbuffer_init+0x40>)
    167a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    167c:	1e6b      	subs	r3, r5, #1
    167e:	421d      	tst	r5, r3
    1680:	d10b      	bne.n	169a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1682:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1684:	2000      	movs	r0, #0
    1686:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1688:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    168a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    168c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    168e:	2000      	movs	r0, #0
    1690:	e7f0      	b.n	1674 <ringbuffer_init+0x10>
    1692:	2000      	movs	r0, #0
    1694:	e7ee      	b.n	1674 <ringbuffer_init+0x10>
    1696:	2001      	movs	r0, #1
    1698:	e7ec      	b.n	1674 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    169a:	f06f 000c 	mvn.w	r0, #12
}
    169e:	bd70      	pop	{r4, r5, r6, pc}
    16a0:	00004f60 	.word	0x00004f60
    16a4:	00001605 	.word	0x00001605

000016a8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    16a8:	b538      	push	{r3, r4, r5, lr}
    16aa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    16ac:	4604      	mov	r4, r0
    16ae:	b1a8      	cbz	r0, 16dc <ringbuffer_get+0x34>
    16b0:	b191      	cbz	r1, 16d8 <ringbuffer_get+0x30>
    16b2:	2001      	movs	r0, #1
    16b4:	2240      	movs	r2, #64	; 0x40
    16b6:	490c      	ldr	r1, [pc, #48]	; (16e8 <ringbuffer_get+0x40>)
    16b8:	4b0c      	ldr	r3, [pc, #48]	; (16ec <ringbuffer_get+0x44>)
    16ba:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    16bc:	68e2      	ldr	r2, [r4, #12]
    16be:	68a3      	ldr	r3, [r4, #8]
    16c0:	429a      	cmp	r2, r3
    16c2:	d00d      	beq.n	16e0 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    16c4:	6822      	ldr	r2, [r4, #0]
    16c6:	6861      	ldr	r1, [r4, #4]
    16c8:	400b      	ands	r3, r1
    16ca:	5cd3      	ldrb	r3, [r2, r3]
    16cc:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    16ce:	68a3      	ldr	r3, [r4, #8]
    16d0:	3301      	adds	r3, #1
    16d2:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    16d4:	2000      	movs	r0, #0
    16d6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    16d8:	2000      	movs	r0, #0
    16da:	e7eb      	b.n	16b4 <ringbuffer_get+0xc>
    16dc:	2000      	movs	r0, #0
    16de:	e7e9      	b.n	16b4 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    16e0:	f06f 0009 	mvn.w	r0, #9
}
    16e4:	bd38      	pop	{r3, r4, r5, pc}
    16e6:	bf00      	nop
    16e8:	00004f60 	.word	0x00004f60
    16ec:	00001605 	.word	0x00001605

000016f0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    16f0:	b538      	push	{r3, r4, r5, lr}
    16f2:	460d      	mov	r5, r1
	ASSERT(rb);
    16f4:	4604      	mov	r4, r0
    16f6:	2251      	movs	r2, #81	; 0x51
    16f8:	490b      	ldr	r1, [pc, #44]	; (1728 <ringbuffer_put+0x38>)
    16fa:	3000      	adds	r0, #0
    16fc:	bf18      	it	ne
    16fe:	2001      	movne	r0, #1
    1700:	4b0a      	ldr	r3, [pc, #40]	; (172c <ringbuffer_put+0x3c>)
    1702:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1704:	6822      	ldr	r2, [r4, #0]
    1706:	68e3      	ldr	r3, [r4, #12]
    1708:	6861      	ldr	r1, [r4, #4]
    170a:	400b      	ands	r3, r1
    170c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    170e:	68e3      	ldr	r3, [r4, #12]
    1710:	68a2      	ldr	r2, [r4, #8]
    1712:	1a9a      	subs	r2, r3, r2
    1714:	6861      	ldr	r1, [r4, #4]
    1716:	428a      	cmp	r2, r1
    1718:	d901      	bls.n	171e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    171a:	1a59      	subs	r1, r3, r1
    171c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    171e:	3301      	adds	r3, #1
    1720:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1722:	2000      	movs	r0, #0
    1724:	bd38      	pop	{r3, r4, r5, pc}
    1726:	bf00      	nop
    1728:	00004f60 	.word	0x00004f60
    172c:	00001605 	.word	0x00001605

00001730 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1730:	b510      	push	{r4, lr}
	ASSERT(rb);
    1732:	4604      	mov	r4, r0
    1734:	2267      	movs	r2, #103	; 0x67
    1736:	4905      	ldr	r1, [pc, #20]	; (174c <ringbuffer_num+0x1c>)
    1738:	3000      	adds	r0, #0
    173a:	bf18      	it	ne
    173c:	2001      	movne	r0, #1
    173e:	4b04      	ldr	r3, [pc, #16]	; (1750 <ringbuffer_num+0x20>)
    1740:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1742:	68e0      	ldr	r0, [r4, #12]
    1744:	68a3      	ldr	r3, [r4, #8]
}
    1746:	1ac0      	subs	r0, r0, r3
    1748:	bd10      	pop	{r4, pc}
    174a:	bf00      	nop
    174c:	00004f60 	.word	0x00004f60
    1750:	00001605 	.word	0x00001605

00001754 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1754:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1758:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    175c:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1760:	4770      	bx	lr
	...

00001764 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1764:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    1766:	4b60      	ldr	r3, [pc, #384]	; (18e8 <_adc_init+0x184>)
    1768:	4298      	cmp	r0, r3
    176a:	f000 809c 	beq.w	18a6 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    176e:	4b5f      	ldr	r3, [pc, #380]	; (18ec <_adc_init+0x188>)
    1770:	4298      	cmp	r0, r3
    1772:	f000 80a8 	beq.w	18c6 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    1776:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1778:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    177a:	f013 0f01 	tst.w	r3, #1
    177e:	d11b      	bne.n	17b8 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1780:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1782:	f013 0f03 	tst.w	r3, #3
    1786:	d1fb      	bne.n	1780 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1788:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    178a:	f013 0f02 	tst.w	r3, #2
    178e:	d00d      	beq.n	17ac <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1790:	8803      	ldrh	r3, [r0, #0]
    1792:	b29b      	uxth	r3, r3
    1794:	f023 0302 	bic.w	r3, r3, #2
    1798:	b29b      	uxth	r3, r3
    179a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    179c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    179e:	f013 0f03 	tst.w	r3, #3
    17a2:	d1fb      	bne.n	179c <_adc_init+0x38>
    17a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17a6:	f013 0f02 	tst.w	r3, #2
    17aa:	d1fb      	bne.n	17a4 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    17ac:	2301      	movs	r3, #1
    17ae:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17b2:	f013 0f03 	tst.w	r3, #3
    17b6:	d1fb      	bne.n	17b0 <_adc_init+0x4c>
    17b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17ba:	f013 0f01 	tst.w	r3, #1
    17be:	d1fb      	bne.n	17b8 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    17c0:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    17c4:	2316      	movs	r3, #22
    17c6:	4a4a      	ldr	r2, [pc, #296]	; (18f0 <_adc_init+0x18c>)
    17c8:	fb03 2301 	mla	r3, r3, r1, r2
    17cc:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    17ce:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    17d6:	2b00      	cmp	r3, #0
    17d8:	d1fa      	bne.n	17d0 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    17da:	2316      	movs	r3, #22
    17dc:	4a44      	ldr	r2, [pc, #272]	; (18f0 <_adc_init+0x18c>)
    17de:	fb03 2301 	mla	r3, r3, r1, r2
    17e2:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    17e4:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    17ec:	2b00      	cmp	r3, #0
    17ee:	d1fa      	bne.n	17e6 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    17f0:	2316      	movs	r3, #22
    17f2:	4a3f      	ldr	r2, [pc, #252]	; (18f0 <_adc_init+0x18c>)
    17f4:	fb03 2301 	mla	r3, r3, r1, r2
    17f8:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    17fa:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    17fc:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    17fe:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1800:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1802:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1806:	2b00      	cmp	r3, #0
    1808:	d1fa      	bne.n	1800 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    180a:	2316      	movs	r3, #22
    180c:	4a38      	ldr	r2, [pc, #224]	; (18f0 <_adc_init+0x18c>)
    180e:	fb03 2301 	mla	r3, r3, r1, r2
    1812:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1814:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1816:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1818:	f3c3 030b 	ubfx	r3, r3, #0, #12
    181c:	2b00      	cmp	r3, #0
    181e:	d1fa      	bne.n	1816 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1820:	2316      	movs	r3, #22
    1822:	4a33      	ldr	r2, [pc, #204]	; (18f0 <_adc_init+0x18c>)
    1824:	fb03 2301 	mla	r3, r3, r1, r2
    1828:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    182a:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    182c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1832:	2b00      	cmp	r3, #0
    1834:	d1fa      	bne.n	182c <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1836:	2316      	movs	r3, #22
    1838:	4a2d      	ldr	r2, [pc, #180]	; (18f0 <_adc_init+0x18c>)
    183a:	fb03 2301 	mla	r3, r3, r1, r2
    183e:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    1840:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1842:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1844:	f013 0f80 	tst.w	r3, #128	; 0x80
    1848:	d1fb      	bne.n	1842 <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    184a:	2316      	movs	r3, #22
    184c:	4a28      	ldr	r2, [pc, #160]	; (18f0 <_adc_init+0x18c>)
    184e:	fb03 2301 	mla	r3, r3, r1, r2
    1852:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    1854:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1856:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1858:	f413 7f80 	tst.w	r3, #256	; 0x100
    185c:	d1fb      	bne.n	1856 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    185e:	2316      	movs	r3, #22
    1860:	4a23      	ldr	r2, [pc, #140]	; (18f0 <_adc_init+0x18c>)
    1862:	fb03 2301 	mla	r3, r3, r1, r2
    1866:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    1868:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    186a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    186c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1870:	d1fb      	bne.n	186a <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1872:	2316      	movs	r3, #22
    1874:	4a1e      	ldr	r2, [pc, #120]	; (18f0 <_adc_init+0x18c>)
    1876:	fb03 2301 	mla	r3, r3, r1, r2
    187a:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    187c:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    187e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1880:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1884:	d1fb      	bne.n	187e <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1886:	2216      	movs	r2, #22
    1888:	4b19      	ldr	r3, [pc, #100]	; (18f0 <_adc_init+0x18c>)
    188a:	fb02 3101 	mla	r1, r2, r1, r3
    188e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1890:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1892:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1894:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1896:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1898:	f013 0f03 	tst.w	r3, #3
    189c:	d1fb      	bne.n	1896 <_adc_init+0x132>

	return ERR_NONE;
}
    189e:	2000      	movs	r0, #0
    18a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    18a4:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    18a6:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	095a      	lsrs	r2, r3, #5
    18ae:	0212      	lsls	r2, r2, #8
    18b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    18b4:	0a1c      	lsrs	r4, r3, #8
    18b6:	0124      	lsls	r4, r4, #4
    18b8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    18bc:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    18be:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    18c2:	431a      	orrs	r2, r3
    18c4:	e758      	b.n	1778 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    18c6:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    18ca:	681b      	ldr	r3, [r3, #0]
    18cc:	0cda      	lsrs	r2, r3, #19
    18ce:	0212      	lsls	r2, r2, #8
    18d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    18d4:	0d9c      	lsrs	r4, r3, #22
    18d6:	0124      	lsls	r4, r4, #4
    18d8:	f004 0470 	and.w	r4, r4, #112	; 0x70
    18dc:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    18de:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    18e2:	431a      	orrs	r2, r3
    18e4:	e748      	b.n	1778 <_adc_init+0x14>
    18e6:	bf00      	nop
    18e8:	43001c00 	.word	0x43001c00
    18ec:	43002000 	.word	0x43002000
    18f0:	00004f84 	.word	0x00004f84

000018f4 <_adc_get_regs>:
{
    18f4:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    18f6:	4b0b      	ldr	r3, [pc, #44]	; (1924 <_adc_get_regs+0x30>)
    18f8:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    18fa:	2300      	movs	r3, #0
    18fc:	b13b      	cbz	r3, 190e <_adc_get_regs+0x1a>
	ASSERT(false);
    18fe:	2288      	movs	r2, #136	; 0x88
    1900:	4909      	ldr	r1, [pc, #36]	; (1928 <_adc_get_regs+0x34>)
    1902:	2000      	movs	r0, #0
    1904:	4b09      	ldr	r3, [pc, #36]	; (192c <_adc_get_regs+0x38>)
    1906:	4798      	blx	r3
	return 0;
    1908:	2300      	movs	r3, #0
}
    190a:	4618      	mov	r0, r3
    190c:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    190e:	2216      	movs	r2, #22
    1910:	fb02 f203 	mul.w	r2, r2, r3
    1914:	4906      	ldr	r1, [pc, #24]	; (1930 <_adc_get_regs+0x3c>)
    1916:	5c8a      	ldrb	r2, [r1, r2]
    1918:	4290      	cmp	r0, r2
    191a:	d0f6      	beq.n	190a <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    191c:	3301      	adds	r3, #1
    191e:	b2db      	uxtb	r3, r3
    1920:	e7ec      	b.n	18fc <_adc_get_regs+0x8>
    1922:	bf00      	nop
    1924:	00001755 	.word	0x00001755
    1928:	00004f9c 	.word	0x00004f9c
    192c:	00001605 	.word	0x00001605
    1930:	00004f84 	.word	0x00004f84

00001934 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1934:	b538      	push	{r3, r4, r5, lr}
    1936:	460c      	mov	r4, r1
	ASSERT(device);
    1938:	4605      	mov	r5, r0
    193a:	22d9      	movs	r2, #217	; 0xd9
    193c:	4907      	ldr	r1, [pc, #28]	; (195c <_adc_sync_init+0x28>)
    193e:	3000      	adds	r0, #0
    1940:	bf18      	it	ne
    1942:	2001      	movne	r0, #1
    1944:	4b06      	ldr	r3, [pc, #24]	; (1960 <_adc_sync_init+0x2c>)
    1946:	4798      	blx	r3

	device->hw = hw;
    1948:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    194a:	4620      	mov	r0, r4
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <_adc_sync_init+0x30>)
    194e:	4798      	blx	r3
    1950:	4601      	mov	r1, r0
    1952:	4620      	mov	r0, r4
    1954:	4b04      	ldr	r3, [pc, #16]	; (1968 <_adc_sync_init+0x34>)
    1956:	4798      	blx	r3
}
    1958:	bd38      	pop	{r3, r4, r5, pc}
    195a:	bf00      	nop
    195c:	00004f9c 	.word	0x00004f9c
    1960:	00001605 	.word	0x00001605
    1964:	000018f5 	.word	0x000018f5
    1968:	00001765 	.word	0x00001765

0000196c <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    196c:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    196e:	8813      	ldrh	r3, [r2, #0]
    1970:	b29b      	uxth	r3, r3
    1972:	f043 0302 	orr.w	r3, r3, #2
    1976:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1978:	6b13      	ldr	r3, [r2, #48]	; 0x30
    197a:	f013 0f03 	tst.w	r3, #3
    197e:	d1fb      	bne.n	1978 <_adc_sync_enable_channel+0xc>
}
    1980:	4770      	bx	lr

00001982 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1982:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1984:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    1986:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    198a:	2b03      	cmp	r3, #3
    198c:	d001      	beq.n	1992 <_adc_sync_get_data_size+0x10>
    198e:	2002      	movs	r0, #2
}
    1990:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1992:	2001      	movs	r0, #1
    1994:	4770      	bx	lr

00001996 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1996:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1998:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    199c:	f000 0001 	and.w	r0, r0, #1
    19a0:	4770      	bx	lr

000019a2 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    19a2:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    19a4:	7d13      	ldrb	r3, [r2, #20]
    19a6:	f043 0302 	orr.w	r3, r3, #2
    19aa:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    19b2:	2b00      	cmp	r3, #0
    19b4:	d1fa      	bne.n	19ac <_adc_sync_convert+0xa>
}
    19b6:	4770      	bx	lr

000019b8 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    19b8:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    19ba:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    19be:	b280      	uxth	r0, r0
    19c0:	4770      	bx	lr
	...

000019c4 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19c4:	0943      	lsrs	r3, r0, #5
    19c6:	f000 001f 	and.w	r0, r0, #31
    19ca:	2201      	movs	r2, #1
    19cc:	fa02 f000 	lsl.w	r0, r2, r0
    19d0:	3340      	adds	r3, #64	; 0x40
    19d2:	4a02      	ldr	r2, [pc, #8]	; (19dc <_irq_set+0x18>)
    19d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    19d8:	4770      	bx	lr
    19da:	bf00      	nop
    19dc:	e000e100 	.word	0xe000e100

000019e0 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    19e0:	f44f 7316 	mov.w	r3, #600	; 0x258
    19e4:	fb03 f000 	mul.w	r0, r3, r0
    19e8:	3801      	subs	r0, #1
    19ea:	4b03      	ldr	r3, [pc, #12]	; (19f8 <_get_cycles_for_us+0x18>)
    19ec:	fba3 3000 	umull	r3, r0, r3, r0
    19f0:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    19f2:	3001      	adds	r0, #1
    19f4:	4770      	bx	lr
    19f6:	bf00      	nop
    19f8:	cccccccd 	.word	0xcccccccd

000019fc <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    19fc:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a00:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a04:	2364      	movs	r3, #100	; 0x64
    1a06:	fb03 f000 	mul.w	r0, r3, r0
    1a0a:	4770      	bx	lr

00001a0c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a0c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1a0e:	4a0d      	ldr	r2, [pc, #52]	; (1a44 <_init_chip+0x38>)
    1a10:	8813      	ldrh	r3, [r2, #0]
    1a12:	b29b      	uxth	r3, r3
    1a14:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1a16:	4b0c      	ldr	r3, [pc, #48]	; (1a48 <_init_chip+0x3c>)
    1a18:	4798      	blx	r3
	_oscctrl_init_sources();
    1a1a:	4b0c      	ldr	r3, [pc, #48]	; (1a4c <_init_chip+0x40>)
    1a1c:	4798      	blx	r3
	_mclk_init();
    1a1e:	4b0c      	ldr	r3, [pc, #48]	; (1a50 <_init_chip+0x44>)
    1a20:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1a22:	200c      	movs	r0, #12
    1a24:	4c0b      	ldr	r4, [pc, #44]	; (1a54 <_init_chip+0x48>)
    1a26:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1a28:	4b0b      	ldr	r3, [pc, #44]	; (1a58 <_init_chip+0x4c>)
    1a2a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1a2c:	f640 70f3 	movw	r0, #4083	; 0xff3
    1a30:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1a32:	4a0a      	ldr	r2, [pc, #40]	; (1a5c <_init_chip+0x50>)
    1a34:	6913      	ldr	r3, [r2, #16]
    1a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1a3a:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <_init_chip+0x54>)
    1a3e:	4798      	blx	r3
    1a40:	bd10      	pop	{r4, pc}
    1a42:	bf00      	nop
    1a44:	41004000 	.word	0x41004000
    1a48:	00001efd 	.word	0x00001efd
    1a4c:	00001f1d 	.word	0x00001f1d
    1a50:	00001ef1 	.word	0x00001ef1
    1a54:	00001e79 	.word	0x00001e79
    1a58:	00001f21 	.word	0x00001f21
    1a5c:	40000800 	.word	0x40000800
    1a60:	00001acd 	.word	0x00001acd

00001a64 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1a64:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1a66:	4a17      	ldr	r2, [pc, #92]	; (1ac4 <_dmac_handler+0x60>)
    1a68:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1a6a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1a6e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1a72:	0088      	lsls	r0, r1, #2
    1a74:	4914      	ldr	r1, [pc, #80]	; (1ac8 <_dmac_handler+0x64>)
    1a76:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1a78:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1a7a:	f412 7f80 	tst.w	r2, #256	; 0x100
    1a7e:	d105      	bne.n	1a8c <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1a80:	4a10      	ldr	r2, [pc, #64]	; (1ac4 <_dmac_handler+0x60>)
    1a82:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1a84:	f412 7f00 	tst.w	r2, #512	; 0x200
    1a88:	d10b      	bne.n	1aa2 <_dmac_handler+0x3e>
    1a8a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1a8c:	011a      	lsls	r2, r3, #4
    1a8e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a92:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1a96:	2101      	movs	r1, #1
    1a98:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1a9c:	6843      	ldr	r3, [r0, #4]
    1a9e:	4798      	blx	r3
    1aa0:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1aa2:	011a      	lsls	r2, r3, #4
    1aa4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1aa8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1aac:	2102      	movs	r1, #2
    1aae:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1ab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1ab6:	fa03 f201 	lsl.w	r2, r3, r1
    1aba:	4b03      	ldr	r3, [pc, #12]	; (1ac8 <_dmac_handler+0x64>)
    1abc:	589b      	ldr	r3, [r3, r2]
    1abe:	4798      	blx	r3
	}
}
    1ac0:	e7e3      	b.n	1a8a <_dmac_handler+0x26>
    1ac2:	bf00      	nop
    1ac4:	4100a000 	.word	0x4100a000
    1ac8:	20000090 	.word	0x20000090

00001acc <_dma_init>:
{
    1acc:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1ace:	4a3c      	ldr	r2, [pc, #240]	; (1bc0 <_dma_init+0xf4>)
    1ad0:	8813      	ldrh	r3, [r2, #0]
    1ad2:	b29b      	uxth	r3, r3
    1ad4:	f023 0302 	bic.w	r3, r3, #2
    1ad8:	b29b      	uxth	r3, r3
    1ada:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1adc:	8853      	ldrh	r3, [r2, #2]
    1ade:	b29b      	uxth	r3, r3
    1ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1ae4:	b29b      	uxth	r3, r3
    1ae6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1ae8:	8813      	ldrh	r3, [r2, #0]
    1aea:	b29b      	uxth	r3, r3
    1aec:	f043 0301 	orr.w	r3, r3, #1
    1af0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1af2:	4b33      	ldr	r3, [pc, #204]	; (1bc0 <_dma_init+0xf4>)
    1af4:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1af6:	f013 0f01 	tst.w	r3, #1
    1afa:	d1fa      	bne.n	1af2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1afc:	4a30      	ldr	r2, [pc, #192]	; (1bc0 <_dma_init+0xf4>)
    1afe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1b02:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1b04:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1b06:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1b0a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1b0c:	2300      	movs	r3, #0
    1b0e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1b10:	492c      	ldr	r1, [pc, #176]	; (1bc4 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1b12:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1b14:	492c      	ldr	r1, [pc, #176]	; (1bc8 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1b16:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1b18:	e016      	b.n	1b48 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1b1a:	4a2c      	ldr	r2, [pc, #176]	; (1bcc <_dma_init+0x100>)
    1b1c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1b20:	4c27      	ldr	r4, [pc, #156]	; (1bc0 <_dma_init+0xf4>)
    1b22:	1d19      	adds	r1, r3, #4
    1b24:	0109      	lsls	r1, r1, #4
    1b26:	1860      	adds	r0, r4, r1
    1b28:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1b2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b2e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1b30:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1b32:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1b34:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1b36:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1b38:	4922      	ldr	r1, [pc, #136]	; (1bc4 <_dma_init+0xf8>)
    1b3a:	011a      	lsls	r2, r3, #4
    1b3c:	1888      	adds	r0, r1, r2
    1b3e:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1b40:	2200      	movs	r2, #0
    1b42:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1b44:	3301      	adds	r3, #1
    1b46:	b2db      	uxtb	r3, r3
    1b48:	2b1f      	cmp	r3, #31
    1b4a:	d9e6      	bls.n	1b1a <_dma_init+0x4e>
    1b4c:	2300      	movs	r3, #0
    1b4e:	e00a      	b.n	1b66 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1b50:	f103 011f 	add.w	r1, r3, #31
    1b54:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1b56:	2a00      	cmp	r2, #0
    1b58:	da10      	bge.n	1b7c <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1b5a:	2a00      	cmp	r2, #0
    1b5c:	da1c      	bge.n	1b98 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1b5e:	2a00      	cmp	r2, #0
    1b60:	da24      	bge.n	1bac <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1b62:	3301      	adds	r3, #1
    1b64:	b2db      	uxtb	r3, r3
    1b66:	2b04      	cmp	r3, #4
    1b68:	d9f2      	bls.n	1b50 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1b6a:	4a15      	ldr	r2, [pc, #84]	; (1bc0 <_dma_init+0xf4>)
    1b6c:	8813      	ldrh	r3, [r2, #0]
    1b6e:	b29b      	uxth	r3, r3
    1b70:	f043 0302 	orr.w	r3, r3, #2
    1b74:	8013      	strh	r3, [r2, #0]
}
    1b76:	2000      	movs	r0, #0
    1b78:	bc30      	pop	{r4, r5}
    1b7a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b7c:	0950      	lsrs	r0, r2, #5
    1b7e:	f001 051f 	and.w	r5, r1, #31
    1b82:	2401      	movs	r4, #1
    1b84:	40ac      	lsls	r4, r5
    1b86:	3020      	adds	r0, #32
    1b88:	4d11      	ldr	r5, [pc, #68]	; (1bd0 <_dma_init+0x104>)
    1b8a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b92:	f3bf 8f6f 	isb	sy
    1b96:	e7e0      	b.n	1b5a <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b98:	0950      	lsrs	r0, r2, #5
    1b9a:	f001 051f 	and.w	r5, r1, #31
    1b9e:	2401      	movs	r4, #1
    1ba0:	40ac      	lsls	r4, r5
    1ba2:	3060      	adds	r0, #96	; 0x60
    1ba4:	4d0a      	ldr	r5, [pc, #40]	; (1bd0 <_dma_init+0x104>)
    1ba6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1baa:	e7d8      	b.n	1b5e <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bac:	0952      	lsrs	r2, r2, #5
    1bae:	f001 011f 	and.w	r1, r1, #31
    1bb2:	2001      	movs	r0, #1
    1bb4:	fa00 f101 	lsl.w	r1, r0, r1
    1bb8:	4805      	ldr	r0, [pc, #20]	; (1bd0 <_dma_init+0x104>)
    1bba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1bbe:	e7d0      	b.n	1b62 <_dma_init+0x96>
    1bc0:	4100a000 	.word	0x4100a000
    1bc4:	20000760 	.word	0x20000760
    1bc8:	20000960 	.word	0x20000960
    1bcc:	00004fb4 	.word	0x00004fb4
    1bd0:	e000e100 	.word	0xe000e100

00001bd4 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1bd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1bd8:	008a      	lsls	r2, r1, #2
    1bda:	4b02      	ldr	r3, [pc, #8]	; (1be4 <_dma_get_channel_resource+0x10>)
    1bdc:	4413      	add	r3, r2
    1bde:	6003      	str	r3, [r0, #0]
}
    1be0:	2000      	movs	r0, #0
    1be2:	4770      	bx	lr
    1be4:	20000090 	.word	0x20000090

00001be8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1be8:	b508      	push	{r3, lr}
	_dmac_handler();
    1bea:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <DMAC_0_Handler+0x8>)
    1bec:	4798      	blx	r3
    1bee:	bd08      	pop	{r3, pc}
    1bf0:	00001a65 	.word	0x00001a65

00001bf4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1bf4:	b508      	push	{r3, lr}
	_dmac_handler();
    1bf6:	4b01      	ldr	r3, [pc, #4]	; (1bfc <DMAC_1_Handler+0x8>)
    1bf8:	4798      	blx	r3
    1bfa:	bd08      	pop	{r3, pc}
    1bfc:	00001a65 	.word	0x00001a65

00001c00 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1c00:	b508      	push	{r3, lr}
	_dmac_handler();
    1c02:	4b01      	ldr	r3, [pc, #4]	; (1c08 <DMAC_2_Handler+0x8>)
    1c04:	4798      	blx	r3
    1c06:	bd08      	pop	{r3, pc}
    1c08:	00001a65 	.word	0x00001a65

00001c0c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1c0c:	b508      	push	{r3, lr}
	_dmac_handler();
    1c0e:	4b01      	ldr	r3, [pc, #4]	; (1c14 <DMAC_3_Handler+0x8>)
    1c10:	4798      	blx	r3
    1c12:	bd08      	pop	{r3, pc}
    1c14:	00001a65 	.word	0x00001a65

00001c18 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1c18:	b508      	push	{r3, lr}
	_dmac_handler();
    1c1a:	4b01      	ldr	r3, [pc, #4]	; (1c20 <DMAC_4_Handler+0x8>)
    1c1c:	4798      	blx	r3
    1c1e:	bd08      	pop	{r3, pc}
    1c20:	00001a65 	.word	0x00001a65

00001c24 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
    1c26:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1c28:	4b2a      	ldr	r3, [pc, #168]	; (1cd4 <_ext_irq_handler+0xb0>)
    1c2a:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1c2c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c2e:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1c30:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1c32:	4b29      	ldr	r3, [pc, #164]	; (1cd8 <_ext_irq_handler+0xb4>)
    1c34:	6818      	ldr	r0, [r3, #0]
    1c36:	22f4      	movs	r2, #244	; 0xf4
    1c38:	4928      	ldr	r1, [pc, #160]	; (1cdc <_ext_irq_handler+0xb8>)
    1c3a:	3000      	adds	r0, #0
    1c3c:	bf18      	it	ne
    1c3e:	2001      	movne	r0, #1
    1c40:	4b27      	ldr	r3, [pc, #156]	; (1ce0 <_ext_irq_handler+0xbc>)
    1c42:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1c44:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1c48:	e035      	b.n	1cb6 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1c4a:	4b26      	ldr	r3, [pc, #152]	; (1ce4 <_ext_irq_handler+0xc0>)
    1c4c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1c50:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1c52:	f1b5 3fff 	cmp.w	r5, #4294967295
    1c56:	d003      	beq.n	1c60 <_ext_irq_handler+0x3c>
				callback(pin);
    1c58:	4b1f      	ldr	r3, [pc, #124]	; (1cd8 <_ext_irq_handler+0xb4>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	4628      	mov	r0, r5
    1c5e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1c60:	2301      	movs	r3, #1
    1c62:	40a3      	lsls	r3, r4
    1c64:	9c01      	ldr	r4, [sp, #4]
    1c66:	ea24 0403 	bic.w	r4, r4, r3
    1c6a:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1c6c:	9b01      	ldr	r3, [sp, #4]
    1c6e:	fa93 f4a3 	rbit	r4, r3
    1c72:	fab4 f484 	clz	r4, r4
    1c76:	b90b      	cbnz	r3, 1c7c <_ext_irq_handler+0x58>
    1c78:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1c7c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1c80:	d014      	beq.n	1cac <_ext_irq_handler+0x88>
    1c82:	2004      	movs	r0, #4
    1c84:	2100      	movs	r1, #0
    1c86:	e001      	b.n	1c8c <_ext_irq_handler+0x68>
					upper = middle - 1;
    1c88:	3b01      	subs	r3, #1
    1c8a:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1c8c:	4281      	cmp	r1, r0
    1c8e:	d8e0      	bhi.n	1c52 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1c90:	1843      	adds	r3, r0, r1
    1c92:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1c96:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1c98:	4a12      	ldr	r2, [pc, #72]	; (1ce4 <_ext_irq_handler+0xc0>)
    1c9a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1c9e:	42a2      	cmp	r2, r4
    1ca0:	d0d3      	beq.n	1c4a <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1ca2:	42a2      	cmp	r2, r4
    1ca4:	daf0      	bge.n	1c88 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1ca6:	3301      	adds	r3, #1
    1ca8:	b2d9      	uxtb	r1, r3
    1caa:	e7ef      	b.n	1c8c <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1cac:	4b09      	ldr	r3, [pc, #36]	; (1cd4 <_ext_irq_handler+0xb0>)
    1cae:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1cb0:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1cb2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1cb4:	615a      	str	r2, [r3, #20]
	while (flags) {
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	b14b      	cbz	r3, 1cce <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1cba:	9b01      	ldr	r3, [sp, #4]
    1cbc:	fa93 f4a3 	rbit	r4, r3
    1cc0:	fab4 f484 	clz	r4, r4
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d1d9      	bne.n	1c7c <_ext_irq_handler+0x58>
    1cc8:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1ccc:	e7d6      	b.n	1c7c <_ext_irq_handler+0x58>
	}
}
    1cce:	b002      	add	sp, #8
    1cd0:	bd70      	pop	{r4, r5, r6, pc}
    1cd2:	bf00      	nop
    1cd4:	40002800 	.word	0x40002800
    1cd8:	20000210 	.word	0x20000210
    1cdc:	000050d4 	.word	0x000050d4
    1ce0:	00001605 	.word	0x00001605
    1ce4:	000050b4 	.word	0x000050b4

00001ce8 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1ce8:	4b3d      	ldr	r3, [pc, #244]	; (1de0 <_ext_irq_init+0xf8>)
    1cea:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1cec:	f013 0f01 	tst.w	r3, #1
    1cf0:	d120      	bne.n	1d34 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1cf2:	4b3b      	ldr	r3, [pc, #236]	; (1de0 <_ext_irq_init+0xf8>)
    1cf4:	685b      	ldr	r3, [r3, #4]
    1cf6:	f013 0f03 	tst.w	r3, #3
    1cfa:	d1fa      	bne.n	1cf2 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1cfc:	4b38      	ldr	r3, [pc, #224]	; (1de0 <_ext_irq_init+0xf8>)
    1cfe:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1d00:	f013 0f02 	tst.w	r3, #2
    1d04:	d00e      	beq.n	1d24 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1d06:	4a36      	ldr	r2, [pc, #216]	; (1de0 <_ext_irq_init+0xf8>)
    1d08:	7813      	ldrb	r3, [r2, #0]
    1d0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1d0e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d10:	4b33      	ldr	r3, [pc, #204]	; (1de0 <_ext_irq_init+0xf8>)
    1d12:	685b      	ldr	r3, [r3, #4]
    1d14:	f013 0f03 	tst.w	r3, #3
    1d18:	d1fa      	bne.n	1d10 <_ext_irq_init+0x28>
    1d1a:	4b31      	ldr	r3, [pc, #196]	; (1de0 <_ext_irq_init+0xf8>)
    1d1c:	685b      	ldr	r3, [r3, #4]
    1d1e:	f013 0f02 	tst.w	r3, #2
    1d22:	d1fa      	bne.n	1d1a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1d24:	2201      	movs	r2, #1
    1d26:	4b2e      	ldr	r3, [pc, #184]	; (1de0 <_ext_irq_init+0xf8>)
    1d28:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d2a:	4b2d      	ldr	r3, [pc, #180]	; (1de0 <_ext_irq_init+0xf8>)
    1d2c:	685b      	ldr	r3, [r3, #4]
    1d2e:	f013 0f03 	tst.w	r3, #3
    1d32:	d1fa      	bne.n	1d2a <_ext_irq_init+0x42>
    1d34:	4b2a      	ldr	r3, [pc, #168]	; (1de0 <_ext_irq_init+0xf8>)
    1d36:	685b      	ldr	r3, [r3, #4]
    1d38:	f013 0f01 	tst.w	r3, #1
    1d3c:	d1fa      	bne.n	1d34 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1d3e:	4a28      	ldr	r2, [pc, #160]	; (1de0 <_ext_irq_init+0xf8>)
    1d40:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1d42:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1d46:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d48:	4b25      	ldr	r3, [pc, #148]	; (1de0 <_ext_irq_init+0xf8>)
    1d4a:	685b      	ldr	r3, [r3, #4]
    1d4c:	f013 0f03 	tst.w	r3, #3
    1d50:	d1fa      	bne.n	1d48 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1d52:	4b23      	ldr	r3, [pc, #140]	; (1de0 <_ext_irq_init+0xf8>)
    1d54:	2200      	movs	r2, #0
    1d56:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1d58:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1d5a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1d5c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1d5e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1d60:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1d64:	61da      	str	r2, [r3, #28]
    1d66:	4a1f      	ldr	r2, [pc, #124]	; (1de4 <_ext_irq_init+0xfc>)
    1d68:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1d6a:	781a      	ldrb	r2, [r3, #0]
    1d6c:	f042 0202 	orr.w	r2, r2, #2
    1d70:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d72:	4b1b      	ldr	r3, [pc, #108]	; (1de0 <_ext_irq_init+0xf8>)
    1d74:	685b      	ldr	r3, [r3, #4]
    1d76:	f013 0f03 	tst.w	r3, #3
    1d7a:	d1fa      	bne.n	1d72 <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d7c:	4b1a      	ldr	r3, [pc, #104]	; (1de8 <_ext_irq_init+0x100>)
    1d7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d8a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d92:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1da0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da8:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1db6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dbe:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1dc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dcc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dd0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dd4:	601a      	str	r2, [r3, #0]
	callback = cb;
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <_ext_irq_init+0x104>)
    1dd8:	6018      	str	r0, [r3, #0]
}
    1dda:	2000      	movs	r0, #0
    1ddc:	4770      	bx	lr
    1dde:	bf00      	nop
    1de0:	40002800 	.word	0x40002800
    1de4:	0a0000b0 	.word	0x0a0000b0
    1de8:	e000e100 	.word	0xe000e100
    1dec:	20000210 	.word	0x20000210

00001df0 <_ext_irq_enable>:
{
    1df0:	b410      	push	{r4}
	uint8_t i      = 0;
    1df2:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1df4:	2b03      	cmp	r3, #3
    1df6:	d80d      	bhi.n	1e14 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1df8:	461c      	mov	r4, r3
    1dfa:	4a11      	ldr	r2, [pc, #68]	; (1e40 <_ext_irq_enable+0x50>)
    1dfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1e00:	6852      	ldr	r2, [r2, #4]
    1e02:	4282      	cmp	r2, r0
    1e04:	d002      	beq.n	1e0c <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1e06:	3301      	adds	r3, #1
    1e08:	b2db      	uxtb	r3, r3
    1e0a:	e7f3      	b.n	1df4 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1e0c:	4b0c      	ldr	r3, [pc, #48]	; (1e40 <_ext_irq_enable+0x50>)
    1e0e:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1e12:	e000      	b.n	1e16 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1e14:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1e16:	2aff      	cmp	r2, #255	; 0xff
    1e18:	d00f      	beq.n	1e3a <_ext_irq_enable+0x4a>
	if (enable) {
    1e1a:	b941      	cbnz	r1, 1e2e <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1e1c:	2301      	movs	r3, #1
    1e1e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1e20:	4a08      	ldr	r2, [pc, #32]	; (1e44 <_ext_irq_enable+0x54>)
    1e22:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1e24:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1e26:	2000      	movs	r0, #0
}
    1e28:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e2c:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1e2e:	2301      	movs	r3, #1
    1e30:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1e32:	4a04      	ldr	r2, [pc, #16]	; (1e44 <_ext_irq_enable+0x54>)
    1e34:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1e36:	2000      	movs	r0, #0
    1e38:	e7f6      	b.n	1e28 <_ext_irq_enable+0x38>
		return -1;
    1e3a:	f04f 30ff 	mov.w	r0, #4294967295
    1e3e:	e7f3      	b.n	1e28 <_ext_irq_enable+0x38>
    1e40:	000050b4 	.word	0x000050b4
    1e44:	40002800 	.word	0x40002800

00001e48 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1e48:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e4a:	4b01      	ldr	r3, [pc, #4]	; (1e50 <EIC_6_Handler+0x8>)
    1e4c:	4798      	blx	r3
    1e4e:	bd08      	pop	{r3, pc}
    1e50:	00001c25 	.word	0x00001c25

00001e54 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1e54:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e56:	4b01      	ldr	r3, [pc, #4]	; (1e5c <EIC_7_Handler+0x8>)
    1e58:	4798      	blx	r3
    1e5a:	bd08      	pop	{r3, pc}
    1e5c:	00001c25 	.word	0x00001c25

00001e60 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1e60:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e62:	4b01      	ldr	r3, [pc, #4]	; (1e68 <EIC_9_Handler+0x8>)
    1e64:	4798      	blx	r3
    1e66:	bd08      	pop	{r3, pc}
    1e68:	00001c25 	.word	0x00001c25

00001e6c <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1e6c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e6e:	4b01      	ldr	r3, [pc, #4]	; (1e74 <EIC_14_Handler+0x8>)
    1e70:	4798      	blx	r3
    1e72:	bd08      	pop	{r3, pc}
    1e74:	00001c25 	.word	0x00001c25

00001e78 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1e78:	f010 0f01 	tst.w	r0, #1
    1e7c:	d008      	beq.n	1e90 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e7e:	4a17      	ldr	r2, [pc, #92]	; (1edc <_gclk_init_generators_by_fref+0x64>)
    1e80:	4b17      	ldr	r3, [pc, #92]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1e82:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e84:	4b16      	ldr	r3, [pc, #88]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1e86:	685a      	ldr	r2, [r3, #4]
    1e88:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e8c:	421a      	tst	r2, r3
    1e8e:	d1f9      	bne.n	1e84 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1e90:	f010 0f02 	tst.w	r0, #2
    1e94:	d008      	beq.n	1ea8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e96:	4a13      	ldr	r2, [pc, #76]	; (1ee4 <_gclk_init_generators_by_fref+0x6c>)
    1e98:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1e9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e9c:	4b10      	ldr	r3, [pc, #64]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1e9e:	685a      	ldr	r2, [r3, #4]
    1ea0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ea4:	421a      	tst	r2, r3
    1ea6:	d1f9      	bne.n	1e9c <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1ea8:	f010 0f04 	tst.w	r0, #4
    1eac:	d008      	beq.n	1ec0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1eae:	4a0e      	ldr	r2, [pc, #56]	; (1ee8 <_gclk_init_generators_by_fref+0x70>)
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1eb2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1eb4:	4b0a      	ldr	r3, [pc, #40]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1eb6:	685a      	ldr	r2, [r3, #4]
    1eb8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ebc:	421a      	tst	r2, r3
    1ebe:	d1f9      	bne.n	1eb4 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1ec0:	f010 0f08 	tst.w	r0, #8
    1ec4:	d008      	beq.n	1ed8 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ec6:	4a09      	ldr	r2, [pc, #36]	; (1eec <_gclk_init_generators_by_fref+0x74>)
    1ec8:	4b05      	ldr	r3, [pc, #20]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1eca:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ecc:	4b04      	ldr	r3, [pc, #16]	; (1ee0 <_gclk_init_generators_by_fref+0x68>)
    1ece:	685a      	ldr	r2, [r3, #4]
    1ed0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ed4:	421a      	tst	r2, r3
    1ed6:	d1f9      	bne.n	1ecc <_gclk_init_generators_by_fref+0x54>
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop
    1edc:	00020107 	.word	0x00020107
    1ee0:	40001c00 	.word	0x40001c00
    1ee4:	000a0907 	.word	0x000a0907
    1ee8:	00010105 	.word	0x00010105
    1eec:	00100106 	.word	0x00100106

00001ef0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1ef0:	2201      	movs	r2, #1
    1ef2:	4b01      	ldr	r3, [pc, #4]	; (1ef8 <_mclk_init+0x8>)
    1ef4:	715a      	strb	r2, [r3, #5]
    1ef6:	4770      	bx	lr
    1ef8:	40000800 	.word	0x40000800

00001efc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1efc:	4b06      	ldr	r3, [pc, #24]	; (1f18 <_osc32kctrl_init_sources+0x1c>)
    1efe:	f242 228e 	movw	r2, #8846	; 0x228e
    1f02:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1f04:	2200      	movs	r2, #0
    1f06:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1f08:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1f0a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1f0c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1f10:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1f12:	2201      	movs	r2, #1
    1f14:	741a      	strb	r2, [r3, #16]
    1f16:	4770      	bx	lr
    1f18:	40001400 	.word	0x40001400

00001f1c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1f1c:	4770      	bx	lr
	...

00001f20 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1f20:	4a49      	ldr	r2, [pc, #292]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    1f22:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1f24:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1f28:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1f2c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f2e:	4b46      	ldr	r3, [pc, #280]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    1f30:	685a      	ldr	r2, [r3, #4]
    1f32:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f36:	421a      	tst	r2, r3
    1f38:	d1f9      	bne.n	1f2e <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1f3a:	4b43      	ldr	r3, [pc, #268]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    1f3c:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1f3e:	f013 0f04 	tst.w	r3, #4
    1f42:	d1fa      	bne.n	1f3a <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1f44:	4b41      	ldr	r3, [pc, #260]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f46:	2200      	movs	r2, #0
    1f48:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1f4a:	2142      	movs	r1, #66	; 0x42
    1f4c:	4a3e      	ldr	r2, [pc, #248]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    1f4e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1f52:	4a3f      	ldr	r2, [pc, #252]	; (2050 <_oscctrl_init_referenced_generators+0x130>)
    1f54:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f56:	4b3d      	ldr	r3, [pc, #244]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1f5c:	f013 0f10 	tst.w	r3, #16
    1f60:	d1f9      	bne.n	1f56 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1f62:	2200      	movs	r2, #0
    1f64:	4b39      	ldr	r3, [pc, #228]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f66:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f6a:	4b38      	ldr	r3, [pc, #224]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1f70:	f013 0f04 	tst.w	r3, #4
    1f74:	d1f9      	bne.n	1f6a <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1f76:	2202      	movs	r2, #2
    1f78:	4b34      	ldr	r3, [pc, #208]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f7a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f7c:	4b33      	ldr	r3, [pc, #204]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1f82:	f013 0f02 	tst.w	r3, #2
    1f86:	d1f9      	bne.n	1f7c <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1f88:	4b30      	ldr	r3, [pc, #192]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1f8c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f8e:	4b2f      	ldr	r3, [pc, #188]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1f94:	f013 0f08 	tst.w	r3, #8
    1f98:	d1f9      	bne.n	1f8e <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1f9a:	2281      	movs	r2, #129	; 0x81
    1f9c:	4b2b      	ldr	r3, [pc, #172]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1f9e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fa2:	4b2a      	ldr	r3, [pc, #168]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fa4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1fa8:	f013 0f04 	tst.w	r3, #4
    1fac:	d1f9      	bne.n	1fa2 <_oscctrl_init_referenced_generators+0x82>
    1fae:	2243      	movs	r2, #67	; 0x43
    1fb0:	4b25      	ldr	r3, [pc, #148]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    1fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1fb6:	2227      	movs	r2, #39	; 0x27
    1fb8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1fbc:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1fbe:	4b23      	ldr	r3, [pc, #140]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1fc2:	f013 0f06 	tst.w	r3, #6
    1fc6:	d1fa      	bne.n	1fbe <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1fc8:	4b20      	ldr	r3, [pc, #128]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fca:	2200      	movs	r2, #0
    1fcc:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1fce:	2202      	movs	r2, #2
    1fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1fd4:	4b1d      	ldr	r3, [pc, #116]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1fd8:	f013 0f02 	tst.w	r3, #2
    1fdc:	d1fa      	bne.n	1fd4 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1fde:	4b1b      	ldr	r3, [pc, #108]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1fe4:	f013 0f01 	tst.w	r3, #1
    1fe8:	d027      	beq.n	203a <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1fea:	4b18      	ldr	r3, [pc, #96]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1fec:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    1fee:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1ff2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1ff6:	d1f8      	bne.n	1fea <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1ff8:	4b14      	ldr	r3, [pc, #80]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    1ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1ffc:	f013 0f01 	tst.w	r3, #1
    2000:	d104      	bne.n	200c <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2002:	4b12      	ldr	r3, [pc, #72]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    2004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2006:	f013 0f02 	tst.w	r3, #2
    200a:	d0f5      	beq.n	1ff8 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    200c:	4b0e      	ldr	r3, [pc, #56]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    200e:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2010:	2b00      	cmp	r3, #0
    2012:	d1fb      	bne.n	200c <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2014:	4a0c      	ldr	r2, [pc, #48]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    2016:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2018:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    201c:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2020:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2022:	4b09      	ldr	r3, [pc, #36]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    2024:	685a      	ldr	r2, [r3, #4]
    2026:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    202a:	421a      	tst	r2, r3
    202c:	d1f9      	bne.n	2022 <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    202e:	4b06      	ldr	r3, [pc, #24]	; (2048 <_oscctrl_init_referenced_generators+0x128>)
    2030:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2032:	f013 0f04 	tst.w	r3, #4
    2036:	d1fa      	bne.n	202e <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    2038:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    203a:	4b04      	ldr	r3, [pc, #16]	; (204c <_oscctrl_init_referenced_generators+0x12c>)
    203c:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    203e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2042:	d0fa      	beq.n	203a <_oscctrl_init_referenced_generators+0x11a>
    2044:	e7d8      	b.n	1ff8 <_oscctrl_init_referenced_generators+0xd8>
    2046:	bf00      	nop
    2048:	40001c00 	.word	0x40001c00
    204c:	40001000 	.word	0x40001000
    2050:	7c7f05b9 	.word	0x7c7f05b9

00002054 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    2054:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    2056:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    2058:	6803      	ldr	r3, [r0, #0]
    205a:	2100      	movs	r1, #0
    205c:	4798      	blx	r3
    205e:	bd08      	pop	{r3, pc}

00002060 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    2060:	b538      	push	{r3, r4, r5, lr}
    2062:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    2064:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    2066:	4b07      	ldr	r3, [pc, #28]	; (2084 <_camera_async_init+0x24>)
    2068:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    206a:	4b07      	ldr	r3, [pc, #28]	; (2088 <_camera_async_init+0x28>)
    206c:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    206e:	4d07      	ldr	r5, [pc, #28]	; (208c <_camera_async_init+0x2c>)
    2070:	2100      	movs	r1, #0
    2072:	4628      	mov	r0, r5
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <_camera_async_init+0x30>)
    2076:	4798      	blx	r3
	resource->back                 = device;
    2078:	682b      	ldr	r3, [r5, #0]
    207a:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    207c:	4a05      	ldr	r2, [pc, #20]	; (2094 <_camera_async_init+0x34>)
    207e:	601a      	str	r2, [r3, #0]
    2080:	bd38      	pop	{r3, r4, r5, pc}
    2082:	bf00      	nop
    2084:	c0000020 	.word	0xc0000020
    2088:	20000214 	.word	0x20000214
    208c:	20000b60 	.word	0x20000b60
    2090:	00001bd5 	.word	0x00001bd5
    2094:	00002055 	.word	0x00002055

00002098 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    2098:	b500      	push	{lr}
    209a:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    209c:	4b08      	ldr	r3, [pc, #32]	; (20c0 <PCC_Handler+0x28>)
    209e:	6818      	ldr	r0, [r3, #0]
    20a0:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    20a2:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    20a4:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    20a6:	2201      	movs	r2, #1
    20a8:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    20aa:	9b01      	ldr	r3, [sp, #4]
    20ac:	f013 0f01 	tst.w	r3, #1
    20b0:	d003      	beq.n	20ba <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    20b2:	6803      	ldr	r3, [r0, #0]
    20b4:	b10b      	cbz	r3, 20ba <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    20b6:	2100      	movs	r1, #0
    20b8:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    20ba:	b003      	add	sp, #12
    20bc:	f85d fb04 	ldr.w	pc, [sp], #4
    20c0:	20000214 	.word	0x20000214

000020c4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    20c4:	b500      	push	{lr}
    20c6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    20c8:	4b0d      	ldr	r3, [pc, #52]	; (2100 <RAMECC_Handler+0x3c>)
    20ca:	789b      	ldrb	r3, [r3, #2]
    20cc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    20ce:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    20d0:	9b01      	ldr	r3, [sp, #4]
    20d2:	f013 0f02 	tst.w	r3, #2
    20d6:	d006      	beq.n	20e6 <RAMECC_Handler+0x22>
    20d8:	4b0a      	ldr	r3, [pc, #40]	; (2104 <RAMECC_Handler+0x40>)
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	b11b      	cbz	r3, 20e6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    20de:	4a08      	ldr	r2, [pc, #32]	; (2100 <RAMECC_Handler+0x3c>)
    20e0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    20e2:	4798      	blx	r3
    20e4:	e009      	b.n	20fa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	f013 0f01 	tst.w	r3, #1
    20ec:	d005      	beq.n	20fa <RAMECC_Handler+0x36>
    20ee:	4b05      	ldr	r3, [pc, #20]	; (2104 <RAMECC_Handler+0x40>)
    20f0:	685b      	ldr	r3, [r3, #4]
    20f2:	b113      	cbz	r3, 20fa <RAMECC_Handler+0x36>
    20f4:	4a02      	ldr	r2, [pc, #8]	; (2100 <RAMECC_Handler+0x3c>)
    20f6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    20f8:	4798      	blx	r3
	} else {
		return;
	}
}
    20fa:	b003      	add	sp, #12
    20fc:	f85d fb04 	ldr.w	pc, [sp], #4
    2100:	41020000 	.word	0x41020000
    2104:	20000b64 	.word	0x20000b64

00002108 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    2108:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    210a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    210c:	f013 0f04 	tst.w	r3, #4
    2110:	d009      	beq.n	2126 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    2112:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2114:	f014 0f03 	tst.w	r4, #3
    2118:	d1fb      	bne.n	2112 <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    211a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    211c:	b2a4      	uxth	r4, r4
    211e:	f024 0404 	bic.w	r4, r4, #4
    2122:	b2a4      	uxth	r4, r4
    2124:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2126:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2128:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    212c:	2c00      	cmp	r4, #0
    212e:	d135      	bne.n	219c <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    2130:	4b22      	ldr	r3, [pc, #136]	; (21bc <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    2132:	2a00      	cmp	r2, #0
    2134:	d134      	bne.n	21a0 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2136:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2138:	b292      	uxth	r2, r2
    213a:	f022 0220 	bic.w	r2, r2, #32
    213e:	b292      	uxth	r2, r2
    2140:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    2142:	fbb3 f1f1 	udiv	r1, r3, r1
    2146:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2148:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    214c:	f013 0f04 	tst.w	r3, #4
    2150:	d001      	beq.n	2156 <_mci_set_speed+0x4e>
    2152:	b901      	cbnz	r1, 2156 <_mci_set_speed+0x4e>
		div = 1;
    2154:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    2156:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    2158:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    215a:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    215c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2160:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    2162:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    2164:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    2168:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    216a:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    216c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2170:	0189      	lsls	r1, r1, #6
    2172:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    2176:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    2178:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    217a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    217c:	b29b      	uxth	r3, r3
    217e:	f043 0301 	orr.w	r3, r3, #1
    2182:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    2184:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    2186:	f013 0f02 	tst.w	r3, #2
    218a:	d0fb      	beq.n	2184 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    218c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    218e:	b29b      	uxth	r3, r3
    2190:	f043 0304 	orr.w	r3, r3, #4
    2194:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    2196:	f85d 4b04 	ldr.w	r4, [sp], #4
    219a:	4770      	bx	lr
		clkbase = clkbase / 2;
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <_mci_set_speed+0xb8>)
    219e:	e7c8      	b.n	2132 <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    21a0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    21a2:	b292      	uxth	r2, r2
    21a4:	f042 0220 	orr.w	r2, r2, #32
    21a8:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    21aa:	fb04 3303 	mla	r3, r4, r3, r3
    21ae:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    21b2:	2900      	cmp	r1, #0
    21b4:	d0c8      	beq.n	2148 <_mci_set_speed+0x40>
			div = div - 1;
    21b6:	3901      	subs	r1, #1
    21b8:	e7c6      	b.n	2148 <_mci_set_speed+0x40>
    21ba:	bf00      	nop
    21bc:	0393a000 	.word	0x0393a000
    21c0:	01c9d000 	.word	0x01c9d000

000021c4 <_mci_reset>:
{
    21c4:	b510      	push	{r4, lr}
	ASSERT(hw);
    21c6:	4604      	mov	r4, r0
    21c8:	2234      	movs	r2, #52	; 0x34
    21ca:	4906      	ldr	r1, [pc, #24]	; (21e4 <_mci_reset+0x20>)
    21cc:	3000      	adds	r0, #0
    21ce:	bf18      	it	ne
    21d0:	2001      	movne	r0, #1
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <_mci_reset+0x24>)
    21d4:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    21d6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    21da:	f043 0302 	orr.w	r3, r3, #2
    21de:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    21e2:	bd10      	pop	{r4, pc}
    21e4:	000050ec 	.word	0x000050ec
    21e8:	00001605 	.word	0x00001605

000021ec <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    21ec:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    21ee:	4604      	mov	r4, r0
    21f0:	227f      	movs	r2, #127	; 0x7f
    21f2:	490b      	ldr	r1, [pc, #44]	; (2220 <_mci_wait_busy+0x34>)
    21f4:	3000      	adds	r0, #0
    21f6:	bf18      	it	ne
    21f8:	2001      	movne	r0, #1
    21fa:	4b0a      	ldr	r3, [pc, #40]	; (2224 <_mci_wait_busy+0x38>)
    21fc:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    21fe:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    2202:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    2204:	1e59      	subs	r1, r3, #1
    2206:	b12b      	cbz	r3, 2214 <_mci_wait_busy+0x28>
    2208:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    220a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    220e:	d0f8      	beq.n	2202 <_mci_wait_busy+0x16>
	return true;
    2210:	2001      	movs	r0, #1
}
    2212:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    2214:	4620      	mov	r0, r4
    2216:	4b04      	ldr	r3, [pc, #16]	; (2228 <_mci_wait_busy+0x3c>)
    2218:	4798      	blx	r3
			return false;
    221a:	2000      	movs	r0, #0
    221c:	bd10      	pop	{r4, pc}
    221e:	bf00      	nop
    2220:	000050ec 	.word	0x000050ec
    2224:	00001605 	.word	0x00001605
    2228:	000021c5 	.word	0x000021c5

0000222c <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222e:	460f      	mov	r7, r1
    2230:	4615      	mov	r5, r2
    2232:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    2234:	4604      	mov	r4, r0
    2236:	2299      	movs	r2, #153	; 0x99
    2238:	4934      	ldr	r1, [pc, #208]	; (230c <_mci_send_cmd_execute+0xe0>)
    223a:	3000      	adds	r0, #0
    223c:	bf18      	it	ne
    223e:	2001      	movne	r0, #1
    2240:	4b33      	ldr	r3, [pc, #204]	; (2310 <_mci_send_cmd_execute+0xe4>)
    2242:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2244:	0229      	lsls	r1, r5, #8
    2246:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    224a:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    224c:	f415 7f80 	tst.w	r5, #256	; 0x100
    2250:	d004      	beq.n	225c <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    2252:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2256:	d00e      	beq.n	2276 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2258:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    225c:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    2260:	d012      	beq.n	2288 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    2262:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    2266:	f043 0310 	orr.w	r3, r3, #16
    226a:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    226e:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2270:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    2272:	81e3      	strh	r3, [r4, #14]
    2274:	e017      	b.n	22a6 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    2276:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    227a:	d002      	beq.n	2282 <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    227c:	f041 0103 	orr.w	r1, r1, #3
    2280:	e7ec      	b.n	225c <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    2282:	f041 0102 	orr.w	r1, r1, #2
    2286:	e7e9      	b.n	225c <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    2288:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    228c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2290:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    2294:	e7eb      	b.n	226e <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2296:	f240 227f 	movw	r2, #639	; 0x27f
    229a:	4213      	tst	r3, r2
    229c:	d118      	bne.n	22d0 <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    229e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    22a0:	f013 0f01 	tst.w	r3, #1
    22a4:	d120      	bne.n	22e8 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    22a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    22a8:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    22aa:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    22ae:	d0f2      	beq.n	2296 <_mci_send_cmd_execute+0x6a>
			if (sr
    22b0:	f240 225d 	movw	r2, #605	; 0x25d
    22b4:	4213      	tst	r3, r2
    22b6:	d0f2      	beq.n	229e <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    22b8:	4620      	mov	r0, r4
    22ba:	4b16      	ldr	r3, [pc, #88]	; (2314 <_mci_send_cmd_execute+0xe8>)
    22bc:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    22be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    22c0:	b29b      	uxth	r3, r3
    22c2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    22c6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    22ca:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    22cc:	2000      	movs	r0, #0
    22ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    22d0:	4620      	mov	r0, r4
    22d2:	4b10      	ldr	r3, [pc, #64]	; (2314 <_mci_send_cmd_execute+0xe8>)
    22d4:	4798      	blx	r3
    22d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    22d8:	b29b      	uxth	r3, r3
    22da:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    22de:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    22e2:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    22e4:	2000      	movs	r0, #0
    22e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    22e8:	f011 0f20 	tst.w	r1, #32
    22ec:	d104      	bne.n	22f8 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    22ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    22f0:	b29b      	uxth	r3, r3
    22f2:	f043 0301 	orr.w	r3, r3, #1
    22f6:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    22f8:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    22fc:	d101      	bne.n	2302 <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    22fe:	2001      	movs	r0, #1
}
    2300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    2302:	4620      	mov	r0, r4
    2304:	4b04      	ldr	r3, [pc, #16]	; (2318 <_mci_send_cmd_execute+0xec>)
    2306:	4798      	blx	r3
    2308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    230a:	bf00      	nop
    230c:	000050ec 	.word	0x000050ec
    2310:	00001605 	.word	0x00001605
    2314:	000021c5 	.word	0x000021c5
    2318:	000021ed 	.word	0x000021ed

0000231c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    231c:	b538      	push	{r3, r4, r5, lr}
    231e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2320:	4605      	mov	r5, r0
    2322:	b348      	cbz	r0, 2378 <_mci_sync_init+0x5c>
    2324:	b331      	cbz	r1, 2374 <_mci_sync_init+0x58>
    2326:	2001      	movs	r0, #1
    2328:	22d8      	movs	r2, #216	; 0xd8
    232a:	4914      	ldr	r1, [pc, #80]	; (237c <_mci_sync_init+0x60>)
    232c:	4b14      	ldr	r3, [pc, #80]	; (2380 <_mci_sync_init+0x64>)
    232e:	4798      	blx	r3

	mci_dev->hw = hw;
    2330:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2332:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2336:	f043 0301 	orr.w	r3, r3, #1
    233a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    233e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2342:	f013 0f01 	tst.w	r3, #1
    2346:	d1fa      	bne.n	233e <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2348:	230e      	movs	r3, #14
    234a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    234e:	230f      	movs	r3, #15
    2350:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2354:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2356:	b29b      	uxth	r3, r3
    2358:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    235c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2360:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    2362:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2364:	b29b      	uxth	r3, r3
    2366:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    236a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    236e:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2370:	2000      	movs	r0, #0
    2372:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    2374:	2000      	movs	r0, #0
    2376:	e7d7      	b.n	2328 <_mci_sync_init+0xc>
    2378:	2000      	movs	r0, #0
    237a:	e7d5      	b.n	2328 <_mci_sync_init+0xc>
    237c:	000050ec 	.word	0x000050ec
    2380:	00001605 	.word	0x00001605

00002384 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2386:	4616      	mov	r6, r2
    2388:	461d      	mov	r5, r3
    238a:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    238e:	4604      	mov	r4, r0
    2390:	b1e0      	cbz	r0, 23cc <_mci_sync_select_device+0x48>
    2392:	6803      	ldr	r3, [r0, #0]
    2394:	b1c3      	cbz	r3, 23c8 <_mci_sync_select_device+0x44>
    2396:	2001      	movs	r0, #1
    2398:	f44f 7280 	mov.w	r2, #256	; 0x100
    239c:	491b      	ldr	r1, [pc, #108]	; (240c <_mci_sync_select_device+0x88>)
    239e:	4b1c      	ldr	r3, [pc, #112]	; (2410 <_mci_sync_select_device+0x8c>)
    23a0:	4798      	blx	r3
	hw = mci_dev->hw;
    23a2:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    23a4:	b1a7      	cbz	r7, 23d0 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    23a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    23aa:	f043 0304 	orr.w	r3, r3, #4
    23ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    23b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    23b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23b8:	d011      	beq.n	23de <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    23ba:	2d01      	cmp	r5, #1
    23bc:	d015      	beq.n	23ea <_mci_sync_select_device+0x66>
    23be:	2d04      	cmp	r5, #4
    23c0:	d01b      	beq.n	23fa <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    23c2:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    23c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    23c8:	2000      	movs	r0, #0
    23ca:	e7e5      	b.n	2398 <_mci_sync_select_device+0x14>
    23cc:	2000      	movs	r0, #0
    23ce:	e7e3      	b.n	2398 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    23d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    23d4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    23d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    23dc:	e7e9      	b.n	23b2 <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    23de:	2200      	movs	r2, #0
    23e0:	4631      	mov	r1, r6
    23e2:	4620      	mov	r0, r4
    23e4:	4b0b      	ldr	r3, [pc, #44]	; (2414 <_mci_sync_select_device+0x90>)
    23e6:	4798      	blx	r3
    23e8:	e7e7      	b.n	23ba <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    23ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    23ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    23f2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    23f6:	2000      	movs	r0, #0
    23f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    23fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    23fe:	f043 0302 	orr.w	r3, r3, #2
    2402:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2406:	2000      	movs	r0, #0
    2408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    240a:	bf00      	nop
    240c:	000050ec 	.word	0x000050ec
    2410:	00001605 	.word	0x00001605
    2414:	00002109 	.word	0x00002109

00002418 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2418:	2000      	movs	r0, #0
    241a:	4770      	bx	lr

0000241c <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    241c:	b909      	cbnz	r1, 2422 <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    241e:	2004      	movs	r0, #4
    2420:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    2422:	2000      	movs	r0, #0
	}
}
    2424:	4770      	bx	lr

00002426 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2426:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2428:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    242a:	f3c0 5040 	ubfx	r0, r0, #21, #1
    242e:	4770      	bx	lr

00002430 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2430:	b500      	push	{lr}
    2432:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2434:	f240 1249 	movw	r2, #329	; 0x149
    2438:	4909      	ldr	r1, [pc, #36]	; (2460 <_mci_sync_send_clock+0x30>)
    243a:	3000      	adds	r0, #0
    243c:	bf18      	it	ne
    243e:	2001      	movne	r0, #1
    2440:	4b08      	ldr	r3, [pc, #32]	; (2464 <_mci_sync_send_clock+0x34>)
    2442:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    2444:	2300      	movs	r3, #0
    2446:	9301      	str	r3, [sp, #4]
    2448:	e002      	b.n	2450 <_mci_sync_send_clock+0x20>
    244a:	9b01      	ldr	r3, [sp, #4]
    244c:	3301      	adds	r3, #1
    244e:	9301      	str	r3, [sp, #4]
    2450:	9a01      	ldr	r2, [sp, #4]
    2452:	f241 3387 	movw	r3, #4999	; 0x1387
    2456:	429a      	cmp	r2, r3
    2458:	d9f7      	bls.n	244a <_mci_sync_send_clock+0x1a>
		;
}
    245a:	b003      	add	sp, #12
    245c:	f85d fb04 	ldr.w	pc, [sp], #4
    2460:	000050ec 	.word	0x000050ec
    2464:	00001605 	.word	0x00001605

00002468 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2468:	b570      	push	{r4, r5, r6, lr}
    246a:	460d      	mov	r5, r1
    246c:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    246e:	4604      	mov	r4, r0
    2470:	b180      	cbz	r0, 2494 <_mci_sync_send_cmd+0x2c>
    2472:	6803      	ldr	r3, [r0, #0]
    2474:	b163      	cbz	r3, 2490 <_mci_sync_send_cmd+0x28>
    2476:	2001      	movs	r0, #1
    2478:	f44f 72ab 	mov.w	r2, #342	; 0x156
    247c:	490d      	ldr	r1, [pc, #52]	; (24b4 <_mci_sync_send_cmd+0x4c>)
    247e:	4b0e      	ldr	r3, [pc, #56]	; (24b8 <_mci_sync_send_cmd+0x50>)
    2480:	4798      	blx	r3
	hw = mci_dev->hw;
    2482:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2484:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2486:	f013 0f01 	tst.w	r3, #1
    248a:	d005      	beq.n	2498 <_mci_sync_send_cmd+0x30>
		return false;
    248c:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    248e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2490:	2000      	movs	r0, #0
    2492:	e7f1      	b.n	2478 <_mci_sync_send_cmd+0x10>
    2494:	2000      	movs	r0, #0
    2496:	e7ef      	b.n	2478 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2498:	8983      	ldrh	r3, [r0, #12]
    249a:	b29b      	uxth	r3, r3
    249c:	f023 0301 	bic.w	r3, r3, #1
    24a0:	b29b      	uxth	r3, r3
    24a2:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    24a4:	2100      	movs	r1, #0
    24a6:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    24a8:	4633      	mov	r3, r6
    24aa:	462a      	mov	r2, r5
    24ac:	4c03      	ldr	r4, [pc, #12]	; (24bc <_mci_sync_send_cmd+0x54>)
    24ae:	47a0      	blx	r4
    24b0:	bd70      	pop	{r4, r5, r6, pc}
    24b2:	bf00      	nop
    24b4:	000050ec 	.word	0x000050ec
    24b8:	00001605 	.word	0x00001605
    24bc:	0000222d 	.word	0x0000222d

000024c0 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    24c0:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    24c2:	4604      	mov	r4, r0
    24c4:	b160      	cbz	r0, 24e0 <_mci_sync_get_response+0x20>
    24c6:	6803      	ldr	r3, [r0, #0]
    24c8:	b143      	cbz	r3, 24dc <_mci_sync_get_response+0x1c>
    24ca:	2001      	movs	r0, #1
    24cc:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    24d0:	4904      	ldr	r1, [pc, #16]	; (24e4 <_mci_sync_get_response+0x24>)
    24d2:	4b05      	ldr	r3, [pc, #20]	; (24e8 <_mci_sync_get_response+0x28>)
    24d4:	4798      	blx	r3
	hw = mci_dev->hw;
    24d6:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    24d8:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    24da:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    24dc:	2000      	movs	r0, #0
    24de:	e7f5      	b.n	24cc <_mci_sync_get_response+0xc>
    24e0:	2000      	movs	r0, #0
    24e2:	e7f3      	b.n	24cc <_mci_sync_get_response+0xc>
    24e4:	000050ec 	.word	0x000050ec
    24e8:	00001605 	.word	0x00001605

000024ec <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    24ec:	b538      	push	{r3, r4, r5, lr}
    24ee:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    24f0:	4605      	mov	r5, r0
    24f2:	b160      	cbz	r0, 250e <_mci_sync_get_response_128+0x22>
    24f4:	6803      	ldr	r3, [r0, #0]
    24f6:	b143      	cbz	r3, 250a <_mci_sync_get_response_128+0x1e>
    24f8:	2001      	movs	r0, #1
    24fa:	f240 1277 	movw	r2, #375	; 0x177
    24fe:	490f      	ldr	r1, [pc, #60]	; (253c <_mci_sync_get_response_128+0x50>)
    2500:	4b0f      	ldr	r3, [pc, #60]	; (2540 <_mci_sync_get_response_128+0x54>)
    2502:	4798      	blx	r3
	hw = mci_dev->hw;
    2504:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    2506:	2103      	movs	r1, #3
    2508:	e00b      	b.n	2522 <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    250a:	2000      	movs	r0, #0
    250c:	e7f5      	b.n	24fa <_mci_sync_get_response_128+0xe>
    250e:	2000      	movs	r0, #0
    2510:	e7f3      	b.n	24fa <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    2512:	0c11      	lsrs	r1, r2, #16
    2514:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2516:	0a11      	lsrs	r1, r2, #8
    2518:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    251a:	70a2      	strb	r2, [r4, #2]
		response++;
    251c:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    251e:	3b01      	subs	r3, #1
    2520:	b259      	sxtb	r1, r3
    2522:	2900      	cmp	r1, #0
    2524:	db09      	blt.n	253a <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    2526:	b2cb      	uxtb	r3, r1
    2528:	1d1a      	adds	r2, r3, #4
    252a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    252e:	2903      	cmp	r1, #3
    2530:	d0ef      	beq.n	2512 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    2532:	0e11      	lsrs	r1, r2, #24
    2534:	f804 1b01 	strb.w	r1, [r4], #1
    2538:	e7eb      	b.n	2512 <_mci_sync_get_response_128+0x26>
	}
}
    253a:	bd38      	pop	{r3, r4, r5, pc}
    253c:	000050ec 	.word	0x000050ec
    2540:	00001605 	.word	0x00001605

00002544 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    2544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2548:	460d      	mov	r5, r1
    254a:	4690      	mov	r8, r2
    254c:	461f      	mov	r7, r3
    254e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2552:	4604      	mov	r4, r0
    2554:	2800      	cmp	r0, #0
    2556:	d031      	beq.n	25bc <_mci_sync_adtc_start+0x78>
    2558:	6803      	ldr	r3, [r0, #0]
    255a:	b36b      	cbz	r3, 25b8 <_mci_sync_adtc_start+0x74>
    255c:	2001      	movs	r0, #1
    255e:	f240 1293 	movw	r2, #403	; 0x193
    2562:	4921      	ldr	r1, [pc, #132]	; (25e8 <_mci_sync_adtc_start+0xa4>)
    2564:	4b21      	ldr	r3, [pc, #132]	; (25ec <_mci_sync_adtc_start+0xa8>)
    2566:	4798      	blx	r3
	hw = mci_dev->hw;
    2568:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    256a:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    256c:	f013 0f01 	tst.w	r3, #1
    2570:	d131      	bne.n	25d6 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    2572:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2574:	f013 0f02 	tst.w	r3, #2
    2578:	d130      	bne.n	25dc <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    257a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    257e:	d01f      	beq.n	25c0 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    2580:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    2582:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    2586:	d104      	bne.n	2592 <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    2588:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    258c:	d01a      	beq.n	25c4 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    258e:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    2592:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    2594:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    2596:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    259a:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    259c:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    259e:	2200      	movs	r2, #0
    25a0:	2300      	movs	r3, #0
    25a2:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    25a6:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    25a8:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    25aa:	4643      	mov	r3, r8
    25ac:	462a      	mov	r2, r5
    25ae:	2120      	movs	r1, #32
    25b0:	4c0f      	ldr	r4, [pc, #60]	; (25f0 <_mci_sync_adtc_start+0xac>)
    25b2:	47a0      	blx	r4
    25b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    25b8:	2000      	movs	r0, #0
    25ba:	e7d0      	b.n	255e <_mci_sync_adtc_start+0x1a>
    25bc:	2000      	movs	r0, #0
    25be:	e7ce      	b.n	255e <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    25c0:	2310      	movs	r3, #16
    25c2:	e7de      	b.n	2582 <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    25c4:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    25c8:	d1e3      	bne.n	2592 <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    25ca:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    25ce:	d008      	beq.n	25e2 <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    25d0:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    25d4:	e7dd      	b.n	2592 <_mci_sync_adtc_start+0x4e>
		return false;
    25d6:	2000      	movs	r0, #0
    25d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25dc:	2000      	movs	r0, #0
    25de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    25e2:	2000      	movs	r0, #0
}
    25e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25e8:	000050ec 	.word	0x000050ec
    25ec:	00001605 	.word	0x00001605
    25f0:	0000222d 	.word	0x0000222d

000025f4 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    25f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25f8:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    25fa:	4605      	mov	r5, r0
    25fc:	2800      	cmp	r0, #0
    25fe:	d05d      	beq.n	26bc <_mci_sync_read_word+0xc8>
    2600:	6803      	ldr	r3, [r0, #0]
    2602:	2b00      	cmp	r3, #0
    2604:	d058      	beq.n	26b8 <_mci_sync_read_word+0xc4>
    2606:	2001      	movs	r0, #1
    2608:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    260c:	4936      	ldr	r1, [pc, #216]	; (26e8 <_mci_sync_read_word+0xf4>)
    260e:	4b37      	ldr	r3, [pc, #220]	; (26ec <_mci_sync_read_word+0xf8>)
    2610:	4798      	blx	r3
	hw = mci_dev->hw;
    2612:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2614:	8a2a      	ldrh	r2, [r5, #16]
    2616:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    261a:	fb08 f802 	mul.w	r8, r8, r2
    261e:	ea4f 79e8 	mov.w	r9, r8, asr #31
    2622:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2626:	ebb8 0800 	subs.w	r8, r8, r0
    262a:	eb69 0901 	sbc.w	r9, r9, r1
    262e:	f1b9 0f00 	cmp.w	r9, #0
    2632:	bf08      	it	eq
    2634:	f1b8 0f04 	cmpeq.w	r8, #4
    2638:	d242      	bcs.n	26c0 <_mci_sync_read_word+0xcc>
    263a:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    263e:	b292      	uxth	r2, r2
    2640:	2300      	movs	r3, #0
    2642:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 26f4 <_mci_sync_read_word+0x100>
    2646:	47c0      	blx	r8
    2648:	4313      	orrs	r3, r2
    264a:	d10d      	bne.n	2668 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    264c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    264e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2652:	2b00      	cmp	r3, #0
    2654:	d136      	bne.n	26c4 <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2656:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    2658:	f013 0f20 	tst.w	r3, #32
    265c:	d0f6      	beq.n	264c <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    265e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2660:	b29b      	uxth	r3, r3
    2662:	f043 0320 	orr.w	r3, r3, #32
    2666:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    2668:	2e04      	cmp	r6, #4
    266a:	d031      	beq.n	26d0 <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    266c:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    266e:	1e72      	subs	r2, r6, #1
    2670:	2a02      	cmp	r2, #2
    2672:	d801      	bhi.n	2678 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    2674:	b2db      	uxtb	r3, r3
    2676:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    2678:	b2f6      	uxtb	r6, r6
    267a:	2700      	movs	r7, #0
    267c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    2680:	18b6      	adds	r6, r6, r2
    2682:	415f      	adcs	r7, r3
    2684:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2688:	8a2a      	ldrh	r2, [r5, #16]
    268a:	8a68      	ldrh	r0, [r5, #18]
    268c:	fba2 2300 	umull	r2, r3, r2, r0
    2690:	429f      	cmp	r7, r3
    2692:	bf08      	it	eq
    2694:	4296      	cmpeq	r6, r2
    2696:	d324      	bcc.n	26e2 <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    2698:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    269a:	f003 0370 	and.w	r3, r3, #112	; 0x70
    269e:	b9d3      	cbnz	r3, 26d6 <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    26a0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    26a2:	f013 0f02 	tst.w	r3, #2
    26a6:	d0f7      	beq.n	2698 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    26a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26aa:	b29b      	uxth	r3, r3
    26ac:	f043 0302 	orr.w	r3, r3, #2
    26b0:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    26b2:	2001      	movs	r0, #1
    26b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    26b8:	2000      	movs	r0, #0
    26ba:	e7a5      	b.n	2608 <_mci_sync_read_word+0x14>
    26bc:	2000      	movs	r0, #0
    26be:	e7a3      	b.n	2608 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    26c0:	2604      	movs	r6, #4
    26c2:	e7bc      	b.n	263e <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    26c4:	4620      	mov	r0, r4
    26c6:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <_mci_sync_read_word+0xfc>)
    26c8:	4798      	blx	r3
				return false;
    26ca:	2000      	movs	r0, #0
    26cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    26d0:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    26d2:	603b      	str	r3, [r7, #0]
    26d4:	e7d0      	b.n	2678 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    26d6:	4620      	mov	r0, r4
    26d8:	4b05      	ldr	r3, [pc, #20]	; (26f0 <_mci_sync_read_word+0xfc>)
    26da:	4798      	blx	r3
			return false;
    26dc:	2000      	movs	r0, #0
    26de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    26e2:	2001      	movs	r0, #1
}
    26e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    26e8:	000050ec 	.word	0x000050ec
    26ec:	00001605 	.word	0x00001605
    26f0:	000021c5 	.word	0x000021c5
    26f4:	00004b31 	.word	0x00004b31

000026f8 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    26f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26fa:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    26fc:	4605      	mov	r5, r0
    26fe:	2800      	cmp	r0, #0
    2700:	d03f      	beq.n	2782 <_mci_sync_write_word+0x8a>
    2702:	6803      	ldr	r3, [r0, #0]
    2704:	2b00      	cmp	r3, #0
    2706:	d03a      	beq.n	277e <_mci_sync_write_word+0x86>
    2708:	2001      	movs	r0, #1
    270a:	f240 220f 	movw	r2, #527	; 0x20f
    270e:	4924      	ldr	r1, [pc, #144]	; (27a0 <_mci_sync_write_word+0xa8>)
    2710:	4b24      	ldr	r3, [pc, #144]	; (27a4 <_mci_sync_write_word+0xac>)
    2712:	4798      	blx	r3
	hw = mci_dev->hw;
    2714:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2716:	8a2a      	ldrh	r2, [r5, #16]
    2718:	2300      	movs	r3, #0
    271a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    271e:	4e22      	ldr	r6, [pc, #136]	; (27a8 <_mci_sync_write_word+0xb0>)
    2720:	47b0      	blx	r6
    2722:	4313      	orrs	r3, r2
    2724:	d10c      	bne.n	2740 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2726:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2728:	f003 0370 	and.w	r3, r3, #112	; 0x70
    272c:	bb5b      	cbnz	r3, 2786 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    272e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    2730:	f013 0f10 	tst.w	r3, #16
    2734:	d0f7      	beq.n	2726 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    2736:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2738:	b29b      	uxth	r3, r3
    273a:	f043 0310 	orr.w	r3, r3, #16
    273e:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    2740:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    2742:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    2746:	3204      	adds	r2, #4
    2748:	f143 0300 	adc.w	r3, r3, #0
    274c:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2750:	8a28      	ldrh	r0, [r5, #16]
    2752:	8a6e      	ldrh	r6, [r5, #18]
    2754:	fba0 0106 	umull	r0, r1, r0, r6
    2758:	428b      	cmp	r3, r1
    275a:	bf08      	it	eq
    275c:	4282      	cmpeq	r2, r0
    275e:	d31c      	bcc.n	279a <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    2760:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2762:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2766:	b99b      	cbnz	r3, 2790 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2768:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    276a:	f013 0f02 	tst.w	r3, #2
    276e:	d0f7      	beq.n	2760 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2770:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2772:	b29b      	uxth	r3, r3
    2774:	f043 0302 	orr.w	r3, r3, #2
    2778:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    277a:	2001      	movs	r0, #1
    277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    277e:	2000      	movs	r0, #0
    2780:	e7c3      	b.n	270a <_mci_sync_write_word+0x12>
    2782:	2000      	movs	r0, #0
    2784:	e7c1      	b.n	270a <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    2786:	4620      	mov	r0, r4
    2788:	4b08      	ldr	r3, [pc, #32]	; (27ac <_mci_sync_write_word+0xb4>)
    278a:	4798      	blx	r3
				return false;
    278c:	2000      	movs	r0, #0
    278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    2790:	4620      	mov	r0, r4
    2792:	4b06      	ldr	r3, [pc, #24]	; (27ac <_mci_sync_write_word+0xb4>)
    2794:	4798      	blx	r3
			return false;
    2796:	2000      	movs	r0, #0
    2798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    279a:	2001      	movs	r0, #1
}
    279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    279e:	bf00      	nop
    27a0:	000050ec 	.word	0x000050ec
    27a4:	00001605 	.word	0x00001605
    27a8:	00004b31 	.word	0x00004b31
    27ac:	000021c5 	.word	0x000021c5

000027b0 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    27b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27b4:	460e      	mov	r6, r1
    27b6:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    27b8:	4607      	mov	r7, r0
    27ba:	b1f0      	cbz	r0, 27fa <_mci_sync_start_read_blocks+0x4a>
    27bc:	6803      	ldr	r3, [r0, #0]
    27be:	b1d3      	cbz	r3, 27f6 <_mci_sync_start_read_blocks+0x46>
    27c0:	2001      	movs	r0, #1
    27c2:	4d18      	ldr	r5, [pc, #96]	; (2824 <_mci_sync_start_read_blocks+0x74>)
    27c4:	f240 223e 	movw	r2, #574	; 0x23e
    27c8:	4629      	mov	r1, r5
    27ca:	4c17      	ldr	r4, [pc, #92]	; (2828 <_mci_sync_start_read_blocks+0x78>)
    27cc:	47a0      	blx	r4
	ASSERT(nb_block);
    27ce:	f240 223f 	movw	r2, #575	; 0x23f
    27d2:	4629      	mov	r1, r5
    27d4:	f118 0000 	adds.w	r0, r8, #0
    27d8:	bf18      	it	ne
    27da:	2001      	movne	r0, #1
    27dc:	47a0      	blx	r4
	ASSERT(dst);
    27de:	f44f 7210 	mov.w	r2, #576	; 0x240
    27e2:	4629      	mov	r1, r5
    27e4:	1c30      	adds	r0, r6, #0
    27e6:	bf18      	it	ne
    27e8:	2001      	movne	r0, #1
    27ea:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    27ec:	8a3d      	ldrh	r5, [r7, #16]
    27ee:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    27f2:	2404      	movs	r4, #4

	while (nb_data) {
    27f4:	e005      	b.n	2802 <_mci_sync_start_read_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    27f6:	2000      	movs	r0, #0
    27f8:	e7e3      	b.n	27c2 <_mci_sync_start_read_blocks+0x12>
    27fa:	2000      	movs	r0, #0
    27fc:	e7e1      	b.n	27c2 <_mci_sync_start_read_blocks+0x12>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    27fe:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2800:	4426      	add	r6, r4
	while (nb_data) {
    2802:	b165      	cbz	r5, 281e <_mci_sync_start_read_blocks+0x6e>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    2804:	4631      	mov	r1, r6
    2806:	4638      	mov	r0, r7
    2808:	4b08      	ldr	r3, [pc, #32]	; (282c <_mci_sync_start_read_blocks+0x7c>)
    280a:	4798      	blx	r3
		if (nb_data < nbytes) {
    280c:	42a5      	cmp	r5, r4
    280e:	d2f6      	bcs.n	27fe <_mci_sync_start_read_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2810:	8a3b      	ldrh	r3, [r7, #16]
    2812:	fb93 f2f4 	sdiv	r2, r3, r4
    2816:	fb04 3412 	mls	r4, r4, r2, r3
    281a:	b2e4      	uxtb	r4, r4
    281c:	e7ef      	b.n	27fe <_mci_sync_start_read_blocks+0x4e>
	}

	return true;
}
    281e:	2001      	movs	r0, #1
    2820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2824:	000050ec 	.word	0x000050ec
    2828:	00001605 	.word	0x00001605
    282c:	000025f5 	.word	0x000025f5

00002830 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    2830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2834:	460e      	mov	r6, r1
    2836:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2838:	4607      	mov	r7, r0
    283a:	b1f0      	cbz	r0, 287a <_mci_sync_start_write_blocks+0x4a>
    283c:	6803      	ldr	r3, [r0, #0]
    283e:	b1d3      	cbz	r3, 2876 <_mci_sync_start_write_blocks+0x46>
    2840:	2001      	movs	r0, #1
    2842:	4d18      	ldr	r5, [pc, #96]	; (28a4 <_mci_sync_start_write_blocks+0x74>)
    2844:	f240 225a 	movw	r2, #602	; 0x25a
    2848:	4629      	mov	r1, r5
    284a:	4c17      	ldr	r4, [pc, #92]	; (28a8 <_mci_sync_start_write_blocks+0x78>)
    284c:	47a0      	blx	r4
	ASSERT(nb_block);
    284e:	f240 225b 	movw	r2, #603	; 0x25b
    2852:	4629      	mov	r1, r5
    2854:	f118 0000 	adds.w	r0, r8, #0
    2858:	bf18      	it	ne
    285a:	2001      	movne	r0, #1
    285c:	47a0      	blx	r4
	ASSERT(src);
    285e:	f44f 7217 	mov.w	r2, #604	; 0x25c
    2862:	4629      	mov	r1, r5
    2864:	1c30      	adds	r0, r6, #0
    2866:	bf18      	it	ne
    2868:	2001      	movne	r0, #1
    286a:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    286c:	8a3d      	ldrh	r5, [r7, #16]
    286e:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    2872:	2404      	movs	r4, #4

	while (nb_data) {
    2874:	e005      	b.n	2882 <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2876:	2000      	movs	r0, #0
    2878:	e7e3      	b.n	2842 <_mci_sync_start_write_blocks+0x12>
    287a:	2000      	movs	r0, #0
    287c:	e7e1      	b.n	2842 <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    287e:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2880:	4426      	add	r6, r4
	while (nb_data) {
    2882:	b165      	cbz	r5, 289e <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    2884:	6831      	ldr	r1, [r6, #0]
    2886:	4638      	mov	r0, r7
    2888:	4b08      	ldr	r3, [pc, #32]	; (28ac <_mci_sync_start_write_blocks+0x7c>)
    288a:	4798      	blx	r3
		if (nb_data < nbytes) {
    288c:	42a5      	cmp	r5, r4
    288e:	d2f6      	bcs.n	287e <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2890:	8a3b      	ldrh	r3, [r7, #16]
    2892:	fb93 f2f4 	sdiv	r2, r3, r4
    2896:	fb04 3412 	mls	r4, r4, r2, r3
    289a:	b2e4      	uxtb	r4, r4
    289c:	e7ef      	b.n	287e <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    289e:	2001      	movs	r0, #1
    28a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28a4:	000050ec 	.word	0x000050ec
    28a8:	00001605 	.word	0x00001605
    28ac:	000026f9 	.word	0x000026f9

000028b0 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    28b0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    28b2:	b158      	cbz	r0, 28cc <_mci_sync_wait_end_of_read_blocks+0x1c>
    28b4:	6803      	ldr	r3, [r0, #0]
    28b6:	b13b      	cbz	r3, 28c8 <_mci_sync_wait_end_of_read_blocks+0x18>
    28b8:	2001      	movs	r0, #1
    28ba:	f240 2271 	movw	r2, #625	; 0x271
    28be:	4904      	ldr	r1, [pc, #16]	; (28d0 <_mci_sync_wait_end_of_read_blocks+0x20>)
    28c0:	4b04      	ldr	r3, [pc, #16]	; (28d4 <_mci_sync_wait_end_of_read_blocks+0x24>)
    28c2:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    28c4:	2001      	movs	r0, #1
    28c6:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    28c8:	2000      	movs	r0, #0
    28ca:	e7f6      	b.n	28ba <_mci_sync_wait_end_of_read_blocks+0xa>
    28cc:	2000      	movs	r0, #0
    28ce:	e7f4      	b.n	28ba <_mci_sync_wait_end_of_read_blocks+0xa>
    28d0:	000050ec 	.word	0x000050ec
    28d4:	00001605 	.word	0x00001605

000028d8 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    28d8:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    28da:	b158      	cbz	r0, 28f4 <_mci_sync_wait_end_of_write_blocks+0x1c>
    28dc:	6803      	ldr	r3, [r0, #0]
    28de:	b13b      	cbz	r3, 28f0 <_mci_sync_wait_end_of_write_blocks+0x18>
    28e0:	2001      	movs	r0, #1
    28e2:	f44f 721f 	mov.w	r2, #636	; 0x27c
    28e6:	4904      	ldr	r1, [pc, #16]	; (28f8 <_mci_sync_wait_end_of_write_blocks+0x20>)
    28e8:	4b04      	ldr	r3, [pc, #16]	; (28fc <_mci_sync_wait_end_of_write_blocks+0x24>)
    28ea:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    28ec:	2001      	movs	r0, #1
    28ee:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    28f0:	2000      	movs	r0, #0
    28f2:	e7f6      	b.n	28e2 <_mci_sync_wait_end_of_write_blocks+0xa>
    28f4:	2000      	movs	r0, #0
    28f6:	e7f4      	b.n	28e2 <_mci_sync_wait_end_of_write_blocks+0xa>
    28f8:	000050ec 	.word	0x000050ec
    28fc:	00001605 	.word	0x00001605

00002900 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2900:	b470      	push	{r4, r5, r6}
    2902:	b087      	sub	sp, #28
    2904:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2906:	466c      	mov	r4, sp
    2908:	4d0c      	ldr	r5, [pc, #48]	; (293c <_sercom_get_hardware_index+0x3c>)
    290a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    290c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    290e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2912:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2916:	2000      	movs	r0, #0
    2918:	2805      	cmp	r0, #5
    291a:	d80a      	bhi.n	2932 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    291c:	ab06      	add	r3, sp, #24
    291e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2922:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2926:	42b3      	cmp	r3, r6
    2928:	d001      	beq.n	292e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    292a:	3001      	adds	r0, #1
    292c:	e7f4      	b.n	2918 <_sercom_get_hardware_index+0x18>
			return i;
    292e:	b2c0      	uxtb	r0, r0
    2930:	e000      	b.n	2934 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    2932:	2000      	movs	r0, #0
}
    2934:	b007      	add	sp, #28
    2936:	bc70      	pop	{r4, r5, r6}
    2938:	4770      	bx	lr
    293a:	bf00      	nop
    293c:	00005104 	.word	0x00005104

00002940 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2940:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2942:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2944:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2946:	f013 0f01 	tst.w	r3, #1
    294a:	d003      	beq.n	2954 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    294c:	7da3      	ldrb	r3, [r4, #22]
    294e:	f013 0f01 	tst.w	r3, #1
    2952:	d112      	bne.n	297a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2954:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2956:	f013 0f02 	tst.w	r3, #2
    295a:	d003      	beq.n	2964 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    295c:	7da3      	ldrb	r3, [r4, #22]
    295e:	f013 0f02 	tst.w	r3, #2
    2962:	d10f      	bne.n	2984 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2964:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2966:	f013 0f04 	tst.w	r3, #4
    296a:	d015      	beq.n	2998 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    296c:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    296e:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2972:	b163      	cbz	r3, 298e <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2974:	23ff      	movs	r3, #255	; 0xff
    2976:	8363      	strh	r3, [r4, #26]
    2978:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    297a:	2301      	movs	r3, #1
    297c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    297e:	6803      	ldr	r3, [r0, #0]
    2980:	4798      	blx	r3
    2982:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2984:	2302      	movs	r3, #2
    2986:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2988:	6883      	ldr	r3, [r0, #8]
    298a:	4798      	blx	r3
    298c:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    298e:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2990:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2992:	b2c9      	uxtb	r1, r1
    2994:	4798      	blx	r3
    2996:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2998:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    299a:	09db      	lsrs	r3, r3, #7
    299c:	d100      	bne.n	29a0 <_sercom_usart_interrupt_handler+0x60>
    299e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    29a0:	2380      	movs	r3, #128	; 0x80
    29a2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    29a4:	68c3      	ldr	r3, [r0, #12]
    29a6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    29a8:	8b63      	ldrh	r3, [r4, #26]
    29aa:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    29ac:	8363      	strh	r3, [r4, #26]
    29ae:	e7f6      	b.n	299e <_sercom_usart_interrupt_handler+0x5e>

000029b0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    29b0:	4b03      	ldr	r3, [pc, #12]	; (29c0 <_sercom_init_irq_param+0x10>)
    29b2:	4298      	cmp	r0, r3
    29b4:	d000      	beq.n	29b8 <_sercom_init_irq_param+0x8>
    29b6:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    29b8:	4b02      	ldr	r3, [pc, #8]	; (29c4 <_sercom_init_irq_param+0x14>)
    29ba:	6019      	str	r1, [r3, #0]
	}
}
    29bc:	e7fb      	b.n	29b6 <_sercom_init_irq_param+0x6>
    29be:	bf00      	nop
    29c0:	43000400 	.word	0x43000400
    29c4:	20000218 	.word	0x20000218

000029c8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    29c8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    29ca:	4b04      	ldr	r3, [pc, #16]	; (29dc <_sercom_get_irq_num+0x14>)
    29cc:	4798      	blx	r3
    29ce:	0080      	lsls	r0, r0, #2
    29d0:	b2c0      	uxtb	r0, r0
    29d2:	302e      	adds	r0, #46	; 0x2e
}
    29d4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    29d8:	bd08      	pop	{r3, pc}
    29da:	bf00      	nop
    29dc:	00002901 	.word	0x00002901

000029e0 <_get_sercom_index>:
{
    29e0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    29e2:	4b0c      	ldr	r3, [pc, #48]	; (2a14 <_get_sercom_index+0x34>)
    29e4:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    29e6:	2300      	movs	r3, #0
    29e8:	b143      	cbz	r3, 29fc <_get_sercom_index+0x1c>
	ASSERT(false);
    29ea:	f240 226b 	movw	r2, #619	; 0x26b
    29ee:	490a      	ldr	r1, [pc, #40]	; (2a18 <_get_sercom_index+0x38>)
    29f0:	2000      	movs	r0, #0
    29f2:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <_get_sercom_index+0x3c>)
    29f4:	4798      	blx	r3
	return 0;
    29f6:	2300      	movs	r3, #0
}
    29f8:	4618      	mov	r0, r3
    29fa:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    29fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2a00:	00d1      	lsls	r1, r2, #3
    2a02:	4a07      	ldr	r2, [pc, #28]	; (2a20 <_get_sercom_index+0x40>)
    2a04:	440a      	add	r2, r1
    2a06:	7e12      	ldrb	r2, [r2, #24]
    2a08:	4290      	cmp	r0, r2
    2a0a:	d0f5      	beq.n	29f8 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2a0c:	3301      	adds	r3, #1
    2a0e:	b2db      	uxtb	r3, r3
    2a10:	e7ea      	b.n	29e8 <_get_sercom_index+0x8>
    2a12:	bf00      	nop
    2a14:	00002901 	.word	0x00002901
    2a18:	00005170 	.word	0x00005170
    2a1c:	00001605 	.word	0x00001605
    2a20:	00005104 	.word	0x00005104

00002a24 <_usart_init>:
{
    2a24:	b538      	push	{r3, r4, r5, lr}
    2a26:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2a28:	4b3c      	ldr	r3, [pc, #240]	; (2b1c <_usart_init+0xf8>)
    2a2a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2a2c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2a2e:	f013 0f01 	tst.w	r3, #1
    2a32:	d122      	bne.n	2a7a <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2a34:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2a38:	00da      	lsls	r2, r3, #3
    2a3a:	4b39      	ldr	r3, [pc, #228]	; (2b20 <_usart_init+0xfc>)
    2a3c:	4413      	add	r3, r2
    2a3e:	69da      	ldr	r2, [r3, #28]
    2a40:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2a44:	69e3      	ldr	r3, [r4, #28]
    2a46:	f013 0f03 	tst.w	r3, #3
    2a4a:	d1fb      	bne.n	2a44 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2a4c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2a4e:	f013 0f02 	tst.w	r3, #2
    2a52:	d00b      	beq.n	2a6c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2a54:	6823      	ldr	r3, [r4, #0]
    2a56:	f023 0302 	bic.w	r3, r3, #2
    2a5a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2a5c:	69e3      	ldr	r3, [r4, #28]
    2a5e:	f013 0f03 	tst.w	r3, #3
    2a62:	d1fb      	bne.n	2a5c <_usart_init+0x38>
    2a64:	69e3      	ldr	r3, [r4, #28]
    2a66:	f013 0f02 	tst.w	r3, #2
    2a6a:	d1fb      	bne.n	2a64 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2a6c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2a70:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2a72:	69e3      	ldr	r3, [r4, #28]
    2a74:	f013 0f03 	tst.w	r3, #3
    2a78:	d1fb      	bne.n	2a72 <_usart_init+0x4e>
    2a7a:	69e3      	ldr	r3, [r4, #28]
    2a7c:	f013 0f01 	tst.w	r3, #1
    2a80:	d1fb      	bne.n	2a7a <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2a82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2a86:	00da      	lsls	r2, r3, #3
    2a88:	4b25      	ldr	r3, [pc, #148]	; (2b20 <_usart_init+0xfc>)
    2a8a:	4413      	add	r3, r2
    2a8c:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2a8e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2a90:	69e3      	ldr	r3, [r4, #28]
    2a92:	f013 0f03 	tst.w	r3, #3
    2a96:	d1fb      	bne.n	2a90 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2a98:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2a9c:	00da      	lsls	r2, r3, #3
    2a9e:	4b20      	ldr	r3, [pc, #128]	; (2b20 <_usart_init+0xfc>)
    2aa0:	4413      	add	r3, r2
    2aa2:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2aa4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2aa6:	69e3      	ldr	r3, [r4, #28]
    2aa8:	f013 0f1f 	tst.w	r3, #31
    2aac:	d1fb      	bne.n	2aa6 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2aae:	0042      	lsls	r2, r0, #1
    2ab0:	4402      	add	r2, r0
    2ab2:	00d1      	lsls	r1, r2, #3
    2ab4:	4b1a      	ldr	r3, [pc, #104]	; (2b20 <_usart_init+0xfc>)
    2ab6:	440b      	add	r3, r1
    2ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2aba:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2abc:	69db      	ldr	r3, [r3, #28]
    2abe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2ac2:	d10a      	bne.n	2ada <_usart_init+0xb6>
    2ac4:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2ac8:	d107      	bne.n	2ada <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2aca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2ace:	00da      	lsls	r2, r3, #3
    2ad0:	4b13      	ldr	r3, [pc, #76]	; (2b20 <_usart_init+0xfc>)
    2ad2:	4413      	add	r3, r2
    2ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2ad6:	81a3      	strh	r3, [r4, #12]
    2ad8:	e00f      	b.n	2afa <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2ada:	0042      	lsls	r2, r0, #1
    2adc:	4402      	add	r2, r0
    2ade:	00d1      	lsls	r1, r2, #3
    2ae0:	4b0f      	ldr	r3, [pc, #60]	; (2b20 <_usart_init+0xfc>)
    2ae2:	440b      	add	r3, r1
    2ae4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2ae6:	89a2      	ldrh	r2, [r4, #12]
    2ae8:	f361 020c 	bfi	r2, r1, #0, #13
    2aec:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2aee:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    2af2:	89a3      	ldrh	r3, [r4, #12]
    2af4:	f362 334f 	bfi	r3, r2, #13, #3
    2af8:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2afa:	4a09      	ldr	r2, [pc, #36]	; (2b20 <_usart_init+0xfc>)
    2afc:	0043      	lsls	r3, r0, #1
    2afe:	181d      	adds	r5, r3, r0
    2b00:	00e9      	lsls	r1, r5, #3
    2b02:	460d      	mov	r5, r1
    2b04:	4411      	add	r1, r2
    2b06:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    2b0a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2b0c:	442a      	add	r2, r5
    2b0e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2b12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2b16:	2000      	movs	r0, #0
    2b18:	bd38      	pop	{r3, r4, r5, pc}
    2b1a:	bf00      	nop
    2b1c:	000029e1 	.word	0x000029e1
    2b20:	00005104 	.word	0x00005104

00002b24 <_usart_async_init>:
{
    2b24:	b570      	push	{r4, r5, r6, lr}
    2b26:	460c      	mov	r4, r1
	ASSERT(device);
    2b28:	4606      	mov	r6, r0
    2b2a:	22cb      	movs	r2, #203	; 0xcb
    2b2c:	4918      	ldr	r1, [pc, #96]	; (2b90 <_usart_async_init+0x6c>)
    2b2e:	3000      	adds	r0, #0
    2b30:	bf18      	it	ne
    2b32:	2001      	movne	r0, #1
    2b34:	4b17      	ldr	r3, [pc, #92]	; (2b94 <_usart_async_init+0x70>)
    2b36:	4798      	blx	r3
	init_status = _usart_init(hw);
    2b38:	4620      	mov	r0, r4
    2b3a:	4b17      	ldr	r3, [pc, #92]	; (2b98 <_usart_async_init+0x74>)
    2b3c:	4798      	blx	r3
	if (init_status) {
    2b3e:	4605      	mov	r5, r0
    2b40:	b108      	cbz	r0, 2b46 <_usart_async_init+0x22>
}
    2b42:	4628      	mov	r0, r5
    2b44:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2b46:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2b48:	4631      	mov	r1, r6
    2b4a:	4620      	mov	r0, r4
    2b4c:	4b13      	ldr	r3, [pc, #76]	; (2b9c <_usart_async_init+0x78>)
    2b4e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2b50:	4620      	mov	r0, r4
    2b52:	4b13      	ldr	r3, [pc, #76]	; (2ba0 <_usart_async_init+0x7c>)
    2b54:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    2b56:	2400      	movs	r4, #0
    2b58:	e016      	b.n	2b88 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b5a:	0941      	lsrs	r1, r0, #5
    2b5c:	f000 021f 	and.w	r2, r0, #31
    2b60:	2301      	movs	r3, #1
    2b62:	4093      	lsls	r3, r2
    2b64:	4a0f      	ldr	r2, [pc, #60]	; (2ba4 <_usart_async_init+0x80>)
    2b66:	f101 0620 	add.w	r6, r1, #32
    2b6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b72:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b76:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2b7a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    2b82:	3001      	adds	r0, #1
    2b84:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2b86:	3401      	adds	r4, #1
    2b88:	2c03      	cmp	r4, #3
    2b8a:	d9e6      	bls.n	2b5a <_usart_async_init+0x36>
    2b8c:	e7d9      	b.n	2b42 <_usart_async_init+0x1e>
    2b8e:	bf00      	nop
    2b90:	00005170 	.word	0x00005170
    2b94:	00001605 	.word	0x00001605
    2b98:	00002a25 	.word	0x00002a25
    2b9c:	000029b1 	.word	0x000029b1
    2ba0:	000029c9 	.word	0x000029c9
    2ba4:	e000e100 	.word	0xe000e100

00002ba8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2ba8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2baa:	6299      	str	r1, [r3, #40]	; 0x28
    2bac:	4770      	bx	lr

00002bae <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2bae:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2bb0:	2201      	movs	r2, #1
    2bb2:	759a      	strb	r2, [r3, #22]
    2bb4:	4770      	bx	lr

00002bb6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2bb6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2bb8:	2202      	movs	r2, #2
    2bba:	759a      	strb	r2, [r3, #22]
    2bbc:	4770      	bx	lr
	...

00002bc0 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2bc0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2bc2:	4b02      	ldr	r3, [pc, #8]	; (2bcc <SERCOM5_0_Handler+0xc>)
    2bc4:	6818      	ldr	r0, [r3, #0]
    2bc6:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <SERCOM5_0_Handler+0x10>)
    2bc8:	4798      	blx	r3
    2bca:	bd08      	pop	{r3, pc}
    2bcc:	20000218 	.word	0x20000218
    2bd0:	00002941 	.word	0x00002941

00002bd4 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2bd4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2bd6:	4b02      	ldr	r3, [pc, #8]	; (2be0 <SERCOM5_1_Handler+0xc>)
    2bd8:	6818      	ldr	r0, [r3, #0]
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <SERCOM5_1_Handler+0x10>)
    2bdc:	4798      	blx	r3
    2bde:	bd08      	pop	{r3, pc}
    2be0:	20000218 	.word	0x20000218
    2be4:	00002941 	.word	0x00002941

00002be8 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2be8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2bea:	4b02      	ldr	r3, [pc, #8]	; (2bf4 <SERCOM5_2_Handler+0xc>)
    2bec:	6818      	ldr	r0, [r3, #0]
    2bee:	4b02      	ldr	r3, [pc, #8]	; (2bf8 <SERCOM5_2_Handler+0x10>)
    2bf0:	4798      	blx	r3
    2bf2:	bd08      	pop	{r3, pc}
    2bf4:	20000218 	.word	0x20000218
    2bf8:	00002941 	.word	0x00002941

00002bfc <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2bfc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2bfe:	4b02      	ldr	r3, [pc, #8]	; (2c08 <SERCOM5_3_Handler+0xc>)
    2c00:	6818      	ldr	r0, [r3, #0]
    2c02:	4b02      	ldr	r3, [pc, #8]	; (2c0c <SERCOM5_3_Handler+0x10>)
    2c04:	4798      	blx	r3
    2c06:	bd08      	pop	{r3, pc}
    2c08:	20000218 	.word	0x20000218
    2c0c:	00002941 	.word	0x00002941

00002c10 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2c10:	4b03      	ldr	r3, [pc, #12]	; (2c20 <_system_time_init+0x10>)
    2c12:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2c16:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2c18:	2205      	movs	r2, #5
    2c1a:	601a      	str	r2, [r3, #0]
    2c1c:	4770      	bx	lr
    2c1e:	bf00      	nop
    2c20:	e000e010 	.word	0xe000e010

00002c24 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2c24:	b508      	push	{r3, lr}
	_system_time_init(hw);
    2c26:	4b01      	ldr	r3, [pc, #4]	; (2c2c <_delay_init+0x8>)
    2c28:	4798      	blx	r3
    2c2a:	bd08      	pop	{r3, pc}
    2c2c:	00002c11 	.word	0x00002c11

00002c30 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2c30:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2c32:	e00d      	b.n	2c50 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    2c34:	4b0d      	ldr	r3, [pc, #52]	; (2c6c <_delay_cycles+0x3c>)
    2c36:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2c3a:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2c3c:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2c3e:	4b0b      	ldr	r3, [pc, #44]	; (2c6c <_delay_cycles+0x3c>)
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2c46:	d0fa      	beq.n	2c3e <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    2c48:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2c4c:	3101      	adds	r1, #1
	while (n--) {
    2c4e:	4610      	mov	r0, r2
    2c50:	1e43      	subs	r3, r0, #1
    2c52:	b2da      	uxtb	r2, r3
    2c54:	2800      	cmp	r0, #0
    2c56:	d1ed      	bne.n	2c34 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <_delay_cycles+0x3c>)
    2c5a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2c5c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2c5e:	4b03      	ldr	r3, [pc, #12]	; (2c6c <_delay_cycles+0x3c>)
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2c66:	d0fa      	beq.n	2c5e <_delay_cycles+0x2e>
		;
}
    2c68:	4770      	bx	lr
    2c6a:	bf00      	nop
    2c6c:	e000e010 	.word	0xe000e010

00002c70 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2c70:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2c72:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2c74:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2c76:	f012 0f01 	tst.w	r2, #1
    2c7a:	d100      	bne.n	2c7e <tc_interrupt_handler+0xe>
    2c7c:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2c7e:	2201      	movs	r2, #1
    2c80:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2c82:	6803      	ldr	r3, [r0, #0]
    2c84:	4798      	blx	r3
	}
}
    2c86:	e7f9      	b.n	2c7c <tc_interrupt_handler+0xc>

00002c88 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2c88:	b538      	push	{r3, r4, r5, lr}
    2c8a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2c8c:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2c8e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2c90:	f013 0f01 	tst.w	r3, #1
    2c94:	d004      	beq.n	2ca0 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2c96:	2301      	movs	r3, #1
    2c98:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2c9a:	6803      	ldr	r3, [r0, #0]
    2c9c:	b103      	cbz	r3, 2ca0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2c9e:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2ca0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2ca2:	f013 0f02 	tst.w	r3, #2
    2ca6:	d005      	beq.n	2cb4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2ca8:	2302      	movs	r3, #2
    2caa:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2cac:	686b      	ldr	r3, [r5, #4]
    2cae:	b10b      	cbz	r3, 2cb4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2cb0:	4628      	mov	r0, r5
    2cb2:	4798      	blx	r3
    2cb4:	bd38      	pop	{r3, r4, r5, pc}
	...

00002cb8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2cb8:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <_tc_init_irq_param+0x1c>)
    2cba:	4298      	cmp	r0, r3
    2cbc:	d003      	beq.n	2cc6 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2cbe:	4b06      	ldr	r3, [pc, #24]	; (2cd8 <_tc_init_irq_param+0x20>)
    2cc0:	4298      	cmp	r0, r3
    2cc2:	d003      	beq.n	2ccc <_tc_init_irq_param+0x14>
    2cc4:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2cc6:	4b05      	ldr	r3, [pc, #20]	; (2cdc <_tc_init_irq_param+0x24>)
    2cc8:	6019      	str	r1, [r3, #0]
    2cca:	e7f8      	b.n	2cbe <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2ccc:	4b03      	ldr	r3, [pc, #12]	; (2cdc <_tc_init_irq_param+0x24>)
    2cce:	6059      	str	r1, [r3, #4]
	}
}
    2cd0:	e7f8      	b.n	2cc4 <_tc_init_irq_param+0xc>
    2cd2:	bf00      	nop
    2cd4:	40003800 	.word	0x40003800
    2cd8:	40003c00 	.word	0x40003c00
    2cdc:	2000021c 	.word	0x2000021c

00002ce0 <get_tc_index>:
{
    2ce0:	b570      	push	{r4, r5, r6, lr}
    2ce2:	b086      	sub	sp, #24
    2ce4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2ce6:	466c      	mov	r4, sp
    2ce8:	4d17      	ldr	r5, [pc, #92]	; (2d48 <get_tc_index+0x68>)
    2cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cee:	e895 0003 	ldmia.w	r5, {r0, r1}
    2cf2:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2cf6:	2300      	movs	r3, #0
    2cf8:	2b05      	cmp	r3, #5
    2cfa:	d80a      	bhi.n	2d12 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2cfc:	aa06      	add	r2, sp, #24
    2cfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2d02:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2d06:	42b2      	cmp	r2, r6
    2d08:	d001      	beq.n	2d0e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2d0a:	3301      	adds	r3, #1
    2d0c:	e7f4      	b.n	2cf8 <get_tc_index+0x18>
			return i;
    2d0e:	b2db      	uxtb	r3, r3
    2d10:	e000      	b.n	2d14 <get_tc_index+0x34>
		}
	}
	return 0;
    2d12:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2d14:	2200      	movs	r2, #0
    2d16:	2a01      	cmp	r2, #1
    2d18:	d80b      	bhi.n	2d32 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2d1a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2d1e:	0081      	lsls	r1, r0, #2
    2d20:	480a      	ldr	r0, [pc, #40]	; (2d4c <get_tc_index+0x6c>)
    2d22:	5c41      	ldrb	r1, [r0, r1]
    2d24:	4299      	cmp	r1, r3
    2d26:	d002      	beq.n	2d2e <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2d28:	3201      	adds	r2, #1
    2d2a:	b2d2      	uxtb	r2, r2
    2d2c:	e7f3      	b.n	2d16 <get_tc_index+0x36>
			return i;
    2d2e:	b250      	sxtb	r0, r2
    2d30:	e007      	b.n	2d42 <get_tc_index+0x62>
	ASSERT(false);
    2d32:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2d36:	4906      	ldr	r1, [pc, #24]	; (2d50 <get_tc_index+0x70>)
    2d38:	2000      	movs	r0, #0
    2d3a:	4b06      	ldr	r3, [pc, #24]	; (2d54 <get_tc_index+0x74>)
    2d3c:	4798      	blx	r3
	return -1;
    2d3e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d42:	b006      	add	sp, #24
    2d44:	bd70      	pop	{r4, r5, r6, pc}
    2d46:	bf00      	nop
    2d48:	0000518c 	.word	0x0000518c
    2d4c:	20000000 	.word	0x20000000
    2d50:	000051a4 	.word	0x000051a4
    2d54:	00001605 	.word	0x00001605

00002d58 <_timer_init>:
{
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	4606      	mov	r6, r0
    2d5c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2d5e:	4608      	mov	r0, r1
    2d60:	4b6c      	ldr	r3, [pc, #432]	; (2f14 <_timer_init+0x1bc>)
    2d62:	4798      	blx	r3
    2d64:	4605      	mov	r5, r0
	device->hw = hw;
    2d66:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2d68:	228f      	movs	r2, #143	; 0x8f
    2d6a:	496b      	ldr	r1, [pc, #428]	; (2f18 <_timer_init+0x1c0>)
    2d6c:	2001      	movs	r0, #1
    2d6e:	4b6b      	ldr	r3, [pc, #428]	; (2f1c <_timer_init+0x1c4>)
    2d70:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2d72:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2d74:	f013 0f01 	tst.w	r3, #1
    2d78:	d119      	bne.n	2dae <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d7a:	6923      	ldr	r3, [r4, #16]
    2d7c:	f013 0f03 	tst.w	r3, #3
    2d80:	d1fb      	bne.n	2d7a <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2d82:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2d84:	f013 0f02 	tst.w	r3, #2
    2d88:	d00b      	beq.n	2da2 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2d8a:	6823      	ldr	r3, [r4, #0]
    2d8c:	f023 0302 	bic.w	r3, r3, #2
    2d90:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d92:	6923      	ldr	r3, [r4, #16]
    2d94:	f013 0f03 	tst.w	r3, #3
    2d98:	d1fb      	bne.n	2d92 <_timer_init+0x3a>
    2d9a:	6923      	ldr	r3, [r4, #16]
    2d9c:	f013 0f02 	tst.w	r3, #2
    2da0:	d1fb      	bne.n	2d9a <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2da2:	2301      	movs	r3, #1
    2da4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2da6:	6923      	ldr	r3, [r4, #16]
    2da8:	f013 0f03 	tst.w	r3, #3
    2dac:	d1fb      	bne.n	2da6 <_timer_init+0x4e>
    2dae:	6923      	ldr	r3, [r4, #16]
    2db0:	f013 0f01 	tst.w	r3, #1
    2db4:	d1fb      	bne.n	2dae <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2db6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2dba:	009a      	lsls	r2, r3, #2
    2dbc:	4b58      	ldr	r3, [pc, #352]	; (2f20 <_timer_init+0x1c8>)
    2dbe:	4413      	add	r3, r2
    2dc0:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2dc2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2dc4:	6923      	ldr	r3, [r4, #16]
    2dc6:	f013 0f03 	tst.w	r3, #3
    2dca:	d1fb      	bne.n	2dc4 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2dcc:	00aa      	lsls	r2, r5, #2
    2dce:	442a      	add	r2, r5
    2dd0:	0091      	lsls	r1, r2, #2
    2dd2:	4b53      	ldr	r3, [pc, #332]	; (2f20 <_timer_init+0x1c8>)
    2dd4:	440b      	add	r3, r1
    2dd6:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2dd8:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2dda:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2ddc:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2dde:	2201      	movs	r2, #1
    2de0:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2de2:	685b      	ldr	r3, [r3, #4]
    2de4:	f003 030c 	and.w	r3, r3, #12
    2de8:	2b08      	cmp	r3, #8
    2dea:	d05b      	beq.n	2ea4 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2dec:	2b00      	cmp	r3, #0
    2dee:	d16d      	bne.n	2ecc <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2df0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2df4:	009a      	lsls	r2, r3, #2
    2df6:	4b4a      	ldr	r3, [pc, #296]	; (2f20 <_timer_init+0x1c8>)
    2df8:	4413      	add	r3, r2
    2dfa:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2dfc:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2dfe:	6923      	ldr	r3, [r4, #16]
    2e00:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e04:	d1fb      	bne.n	2dfe <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2e06:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e0a:	009a      	lsls	r2, r3, #2
    2e0c:	4b44      	ldr	r3, [pc, #272]	; (2f20 <_timer_init+0x1c8>)
    2e0e:	4413      	add	r3, r2
    2e10:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2e12:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e14:	6923      	ldr	r3, [r4, #16]
    2e16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e1a:	d1fb      	bne.n	2e14 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2e1c:	2301      	movs	r3, #1
    2e1e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2e20:	4631      	mov	r1, r6
    2e22:	4620      	mov	r0, r4
    2e24:	4b3f      	ldr	r3, [pc, #252]	; (2f24 <_timer_init+0x1cc>)
    2e26:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2e28:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e2c:	009a      	lsls	r2, r3, #2
    2e2e:	4b3c      	ldr	r3, [pc, #240]	; (2f20 <_timer_init+0x1c8>)
    2e30:	4413      	add	r3, r2
    2e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2e36:	2b00      	cmp	r3, #0
    2e38:	db0d      	blt.n	2e56 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e3a:	095a      	lsrs	r2, r3, #5
    2e3c:	f003 031f 	and.w	r3, r3, #31
    2e40:	2101      	movs	r1, #1
    2e42:	fa01 f303 	lsl.w	r3, r1, r3
    2e46:	3220      	adds	r2, #32
    2e48:	4937      	ldr	r1, [pc, #220]	; (2f28 <_timer_init+0x1d0>)
    2e4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2e4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e52:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2e56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e5a:	009a      	lsls	r2, r3, #2
    2e5c:	4b30      	ldr	r3, [pc, #192]	; (2f20 <_timer_init+0x1c8>)
    2e5e:	4413      	add	r3, r2
    2e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2e64:	2b00      	cmp	r3, #0
    2e66:	db09      	blt.n	2e7c <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e68:	095a      	lsrs	r2, r3, #5
    2e6a:	f003 031f 	and.w	r3, r3, #31
    2e6e:	2101      	movs	r1, #1
    2e70:	fa01 f303 	lsl.w	r3, r1, r3
    2e74:	3260      	adds	r2, #96	; 0x60
    2e76:	492c      	ldr	r1, [pc, #176]	; (2f28 <_timer_init+0x1d0>)
    2e78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2e7c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2e80:	00aa      	lsls	r2, r5, #2
    2e82:	4b27      	ldr	r3, [pc, #156]	; (2f20 <_timer_init+0x1c8>)
    2e84:	4413      	add	r3, r2
    2e86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	db08      	blt.n	2ea0 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e8e:	0959      	lsrs	r1, r3, #5
    2e90:	f003 031f 	and.w	r3, r3, #31
    2e94:	2201      	movs	r2, #1
    2e96:	fa02 f303 	lsl.w	r3, r2, r3
    2e9a:	4a23      	ldr	r2, [pc, #140]	; (2f28 <_timer_init+0x1d0>)
    2e9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2ea0:	2000      	movs	r0, #0
    2ea2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2ea4:	4b1e      	ldr	r3, [pc, #120]	; (2f20 <_timer_init+0x1c8>)
    2ea6:	440b      	add	r3, r1
    2ea8:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2eaa:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2eac:	6923      	ldr	r3, [r4, #16]
    2eae:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2eb2:	d1fb      	bne.n	2eac <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2eb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2eb8:	009a      	lsls	r2, r3, #2
    2eba:	4b19      	ldr	r3, [pc, #100]	; (2f20 <_timer_init+0x1c8>)
    2ebc:	4413      	add	r3, r2
    2ebe:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2ec0:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ec2:	6923      	ldr	r3, [r4, #16]
    2ec4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2ec8:	d1fb      	bne.n	2ec2 <_timer_init+0x16a>
    2eca:	e7a7      	b.n	2e1c <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2ecc:	2b04      	cmp	r3, #4
    2ece:	d1a5      	bne.n	2e1c <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2ed0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ed4:	009a      	lsls	r2, r3, #2
    2ed6:	4b12      	ldr	r3, [pc, #72]	; (2f20 <_timer_init+0x1c8>)
    2ed8:	4413      	add	r3, r2
    2eda:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2edc:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ede:	6923      	ldr	r3, [r4, #16]
    2ee0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2ee4:	d1fb      	bne.n	2ede <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2ee6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2eea:	009a      	lsls	r2, r3, #2
    2eec:	4b0c      	ldr	r3, [pc, #48]	; (2f20 <_timer_init+0x1c8>)
    2eee:	4413      	add	r3, r2
    2ef0:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2ef2:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ef4:	6923      	ldr	r3, [r4, #16]
    2ef6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2efa:	d1fb      	bne.n	2ef4 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2efc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f00:	009a      	lsls	r2, r3, #2
    2f02:	4b07      	ldr	r3, [pc, #28]	; (2f20 <_timer_init+0x1c8>)
    2f04:	4413      	add	r3, r2
    2f06:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f08:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f0a:	6923      	ldr	r3, [r4, #16]
    2f0c:	f013 0f20 	tst.w	r3, #32
    2f10:	d1fb      	bne.n	2f0a <_timer_init+0x1b2>
    2f12:	e783      	b.n	2e1c <_timer_init+0xc4>
    2f14:	00002ce1 	.word	0x00002ce1
    2f18:	000051a4 	.word	0x000051a4
    2f1c:	00001605 	.word	0x00001605
    2f20:	20000000 	.word	0x20000000
    2f24:	00002cb9 	.word	0x00002cb9
    2f28:	e000e100 	.word	0xe000e100

00002f2c <_pwm_init>:
{
    2f2c:	b570      	push	{r4, r5, r6, lr}
    2f2e:	4606      	mov	r6, r0
    2f30:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2f32:	4608      	mov	r0, r1
    2f34:	4b59      	ldr	r3, [pc, #356]	; (309c <_pwm_init+0x170>)
    2f36:	4798      	blx	r3
    2f38:	4605      	mov	r5, r0
	device->hw = hw;
    2f3a:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2f3c:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2f3e:	f013 0f01 	tst.w	r3, #1
    2f42:	d119      	bne.n	2f78 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f44:	6923      	ldr	r3, [r4, #16]
    2f46:	f013 0f03 	tst.w	r3, #3
    2f4a:	d1fb      	bne.n	2f44 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2f4c:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2f4e:	f013 0f02 	tst.w	r3, #2
    2f52:	d00b      	beq.n	2f6c <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2f54:	6823      	ldr	r3, [r4, #0]
    2f56:	f023 0302 	bic.w	r3, r3, #2
    2f5a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f5c:	6923      	ldr	r3, [r4, #16]
    2f5e:	f013 0f03 	tst.w	r3, #3
    2f62:	d1fb      	bne.n	2f5c <_pwm_init+0x30>
    2f64:	6923      	ldr	r3, [r4, #16]
    2f66:	f013 0f02 	tst.w	r3, #2
    2f6a:	d1fb      	bne.n	2f64 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2f6c:	2301      	movs	r3, #1
    2f6e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f70:	6923      	ldr	r3, [r4, #16]
    2f72:	f013 0f03 	tst.w	r3, #3
    2f76:	d1fb      	bne.n	2f70 <_pwm_init+0x44>
    2f78:	6923      	ldr	r3, [r4, #16]
    2f7a:	f013 0f01 	tst.w	r3, #1
    2f7e:	d1fb      	bne.n	2f78 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2f80:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f84:	009a      	lsls	r2, r3, #2
    2f86:	4b46      	ldr	r3, [pc, #280]	; (30a0 <_pwm_init+0x174>)
    2f88:	4413      	add	r3, r2
    2f8a:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2f8c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f8e:	6923      	ldr	r3, [r4, #16]
    2f90:	f013 0f03 	tst.w	r3, #3
    2f94:	d1fb      	bne.n	2f8e <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f96:	00aa      	lsls	r2, r5, #2
    2f98:	442a      	add	r2, r5
    2f9a:	0091      	lsls	r1, r2, #2
    2f9c:	4b40      	ldr	r3, [pc, #256]	; (30a0 <_pwm_init+0x174>)
    2f9e:	440b      	add	r3, r1
    2fa0:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2fa2:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2fa4:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2fa6:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2fa8:	2203      	movs	r2, #3
    2faa:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2fac:	685b      	ldr	r3, [r3, #4]
    2fae:	f003 030c 	and.w	r3, r3, #12
    2fb2:	2b08      	cmp	r3, #8
    2fb4:	d059      	beq.n	306a <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d16b      	bne.n	3092 <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2fba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fbe:	009a      	lsls	r2, r3, #2
    2fc0:	4b37      	ldr	r3, [pc, #220]	; (30a0 <_pwm_init+0x174>)
    2fc2:	4413      	add	r3, r2
    2fc4:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2fc6:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fc8:	6923      	ldr	r3, [r4, #16]
    2fca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2fce:	d1fb      	bne.n	2fc8 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2fd0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fd4:	009a      	lsls	r2, r3, #2
    2fd6:	4b32      	ldr	r3, [pc, #200]	; (30a0 <_pwm_init+0x174>)
    2fd8:	4413      	add	r3, r2
    2fda:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2fdc:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fde:	6923      	ldr	r3, [r4, #16]
    2fe0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2fe4:	d1fb      	bne.n	2fde <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2fe6:	4631      	mov	r1, r6
    2fe8:	4620      	mov	r0, r4
    2fea:	4b2e      	ldr	r3, [pc, #184]	; (30a4 <_pwm_init+0x178>)
    2fec:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2fee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ff2:	009a      	lsls	r2, r3, #2
    2ff4:	4b2a      	ldr	r3, [pc, #168]	; (30a0 <_pwm_init+0x174>)
    2ff6:	4413      	add	r3, r2
    2ff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	db0d      	blt.n	301c <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3000:	095a      	lsrs	r2, r3, #5
    3002:	f003 031f 	and.w	r3, r3, #31
    3006:	2101      	movs	r1, #1
    3008:	fa01 f303 	lsl.w	r3, r1, r3
    300c:	3220      	adds	r2, #32
    300e:	4926      	ldr	r1, [pc, #152]	; (30a8 <_pwm_init+0x17c>)
    3010:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3018:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    301c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3020:	009a      	lsls	r2, r3, #2
    3022:	4b1f      	ldr	r3, [pc, #124]	; (30a0 <_pwm_init+0x174>)
    3024:	4413      	add	r3, r2
    3026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    302a:	2b00      	cmp	r3, #0
    302c:	db09      	blt.n	3042 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    302e:	095a      	lsrs	r2, r3, #5
    3030:	f003 031f 	and.w	r3, r3, #31
    3034:	2101      	movs	r1, #1
    3036:	fa01 f303 	lsl.w	r3, r1, r3
    303a:	3260      	adds	r2, #96	; 0x60
    303c:	491a      	ldr	r1, [pc, #104]	; (30a8 <_pwm_init+0x17c>)
    303e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    3042:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3046:	00aa      	lsls	r2, r5, #2
    3048:	4b15      	ldr	r3, [pc, #84]	; (30a0 <_pwm_init+0x174>)
    304a:	4413      	add	r3, r2
    304c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3050:	2b00      	cmp	r3, #0
    3052:	db21      	blt.n	3098 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3054:	0959      	lsrs	r1, r3, #5
    3056:	f003 031f 	and.w	r3, r3, #31
    305a:	2201      	movs	r2, #1
    305c:	fa02 f303 	lsl.w	r3, r2, r3
    3060:	4a11      	ldr	r2, [pc, #68]	; (30a8 <_pwm_init+0x17c>)
    3062:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3066:	2000      	movs	r0, #0
    3068:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    306a:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <_pwm_init+0x174>)
    306c:	440b      	add	r3, r1
    306e:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3070:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3072:	6923      	ldr	r3, [r4, #16]
    3074:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3078:	d1fb      	bne.n	3072 <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    307a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    307e:	009a      	lsls	r2, r3, #2
    3080:	4b07      	ldr	r3, [pc, #28]	; (30a0 <_pwm_init+0x174>)
    3082:	4413      	add	r3, r2
    3084:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3086:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3088:	6923      	ldr	r3, [r4, #16]
    308a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    308e:	d1fb      	bne.n	3088 <_pwm_init+0x15c>
    3090:	e7a9      	b.n	2fe6 <_pwm_init+0xba>
		return -1;
    3092:	f04f 30ff 	mov.w	r0, #4294967295
    3096:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3098:	2000      	movs	r0, #0
}
    309a:	bd70      	pop	{r4, r5, r6, pc}
    309c:	00002ce1 	.word	0x00002ce1
    30a0:	20000000 	.word	0x20000000
    30a4:	00002cb9 	.word	0x00002cb9
    30a8:	e000e100 	.word	0xe000e100

000030ac <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    30ac:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    30ae:	6813      	ldr	r3, [r2, #0]
    30b0:	f043 0302 	orr.w	r3, r3, #2
    30b4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30b6:	6913      	ldr	r3, [r2, #16]
    30b8:	f013 0f03 	tst.w	r3, #3
    30bc:	d1fb      	bne.n	30b6 <_timer_start+0xa>
}
    30be:	4770      	bx	lr

000030c0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    30c0:	68c2      	ldr	r2, [r0, #12]
    30c2:	6913      	ldr	r3, [r2, #16]
    30c4:	f013 0f03 	tst.w	r3, #3
    30c8:	d1fb      	bne.n	30c2 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    30ca:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    30cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    30d0:	4770      	bx	lr

000030d2 <_tc_get_timer>:
}
    30d2:	2000      	movs	r0, #0
    30d4:	4770      	bx	lr

000030d6 <_tc_get_pwm>:
}
    30d6:	2000      	movs	r0, #0
    30d8:	4770      	bx	lr
	...

000030dc <_timer_set_irq>:
{
    30dc:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    30de:	68c0      	ldr	r0, [r0, #12]
    30e0:	4b08      	ldr	r3, [pc, #32]	; (3104 <_timer_set_irq+0x28>)
    30e2:	4798      	blx	r3
    30e4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    30e6:	f240 129d 	movw	r2, #413	; 0x19d
    30ea:	4907      	ldr	r1, [pc, #28]	; (3108 <_timer_set_irq+0x2c>)
    30ec:	2001      	movs	r0, #1
    30ee:	4b07      	ldr	r3, [pc, #28]	; (310c <_timer_set_irq+0x30>)
    30f0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    30f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    30f6:	00a2      	lsls	r2, r4, #2
    30f8:	4b05      	ldr	r3, [pc, #20]	; (3110 <_timer_set_irq+0x34>)
    30fa:	4413      	add	r3, r2
    30fc:	7898      	ldrb	r0, [r3, #2]
    30fe:	4b05      	ldr	r3, [pc, #20]	; (3114 <_timer_set_irq+0x38>)
    3100:	4798      	blx	r3
    3102:	bd10      	pop	{r4, pc}
    3104:	00002ce1 	.word	0x00002ce1
    3108:	000051a4 	.word	0x000051a4
    310c:	00001605 	.word	0x00001605
    3110:	20000000 	.word	0x20000000
    3114:	000019c5 	.word	0x000019c5

00003118 <TC0_Handler>:
{
    3118:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC0_Handler+0xc>)
    311c:	6818      	ldr	r0, [r3, #0]
    311e:	4b02      	ldr	r3, [pc, #8]	; (3128 <TC0_Handler+0x10>)
    3120:	4798      	blx	r3
    3122:	bd08      	pop	{r3, pc}
    3124:	2000021c 	.word	0x2000021c
    3128:	00002c89 	.word	0x00002c89

0000312c <TC1_Handler>:
{
    312c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC1_Handler+0xc>)
    3130:	6858      	ldr	r0, [r3, #4]
    3132:	4b02      	ldr	r3, [pc, #8]	; (313c <TC1_Handler+0x10>)
    3134:	4798      	blx	r3
    3136:	bd08      	pop	{r3, pc}
    3138:	2000021c 	.word	0x2000021c
    313c:	00002c71 	.word	0x00002c71

00003140 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    3140:	4a02      	ldr	r2, [pc, #8]	; (314c <millisecondTimer_cb+0xc>)
    3142:	6813      	ldr	r3, [r2, #0]
    3144:	3301      	adds	r3, #1
    3146:	6013      	str	r3, [r2, #0]
    3148:	4770      	bx	lr
    314a:	bf00      	nop
    314c:	20000224 	.word	0x20000224

00003150 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    3150:	b510      	push	{r4, lr}
    3152:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3154:	2301      	movs	r3, #1
    3156:	f10d 0207 	add.w	r2, sp, #7
    315a:	2100      	movs	r1, #0
    315c:	4806      	ldr	r0, [pc, #24]	; (3178 <checkBattVoltage_cb+0x28>)
    315e:	4c07      	ldr	r4, [pc, #28]	; (317c <checkBattVoltage_cb+0x2c>)
    3160:	47a0      	blx	r4
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 158) {
    3162:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3166:	2b9d      	cmp	r3, #157	; 0x9d
    3168:	d804      	bhi.n	3174 <checkBattVoltage_cb+0x24>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    316a:	4a05      	ldr	r2, [pc, #20]	; (3180 <checkBattVoltage_cb+0x30>)
    316c:	6813      	ldr	r3, [r2, #0]
    316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3172:	6013      	str	r3, [r2, #0]
	}
}
    3174:	b002      	add	sp, #8
    3176:	bd10      	pop	{r4, pc}
    3178:	200006c8 	.word	0x200006c8
    317c:	00000ca1 	.word	0x00000ca1
    3180:	20000028 	.word	0x20000028

00003184 <irReceive_cb>:
		deviceState |= DEVICE_STATE_CHARGING;
	}
}

static void irReceive_cb(void)
{
    3184:	b500      	push	{lr}
    3186:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3188:	a801      	add	r0, sp, #4
    318a:	4b07      	ldr	r3, [pc, #28]	; (31a8 <irReceive_cb+0x24>)
    318c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    318e:	4b07      	ldr	r3, [pc, #28]	; (31ac <irReceive_cb+0x28>)
    3190:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3194:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    319c:	a801      	add	r0, sp, #4
    319e:	4b04      	ldr	r3, [pc, #16]	; (31b0 <irReceive_cb+0x2c>)
    31a0:	4798      	blx	r3
		
	}
	else {
		
	}	
}
    31a2:	b003      	add	sp, #12
    31a4:	f85d fb04 	ldr.w	pc, [sp], #4
    31a8:	00000d41 	.word	0x00000d41
    31ac:	41008000 	.word	0x41008000
    31b0:	00000d4f 	.word	0x00000d4f

000031b4 <pushButton_cb>:

static void pushButton_cb(void)
{
    31b4:	b500      	push	{lr}
    31b6:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    31b8:	a801      	add	r0, sp, #4
    31ba:	4b06      	ldr	r3, [pc, #24]	; (31d4 <pushButton_cb+0x20>)
    31bc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31be:	4b06      	ldr	r3, [pc, #24]	; (31d8 <pushButton_cb+0x24>)
    31c0:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31c2:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31c4:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    31c6:	a801      	add	r0, sp, #4
    31c8:	4b04      	ldr	r3, [pc, #16]	; (31dc <pushButton_cb+0x28>)
    31ca:	4798      	blx	r3
		
	}
	else {
		
	}
}
    31cc:	b003      	add	sp, #12
    31ce:	f85d fb04 	ldr.w	pc, [sp], #4
    31d2:	bf00      	nop
    31d4:	00000d41 	.word	0x00000d41
    31d8:	41008000 	.word	0x41008000
    31dc:	00000d4f 	.word	0x00000d4f

000031e0 <battCharging_cb>:
{
    31e0:	b510      	push	{r4, lr}
    31e2:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    31e4:	a801      	add	r0, sp, #4
    31e6:	4b0f      	ldr	r3, [pc, #60]	; (3224 <battCharging_cb+0x44>)
    31e8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31ea:	4b0f      	ldr	r3, [pc, #60]	; (3228 <battCharging_cb+0x48>)
    31ec:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31f4:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    31f8:	4054      	eors	r4, r2
    31fa:	400c      	ands	r4, r1
    31fc:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    31fe:	a801      	add	r0, sp, #4
    3200:	4b0a      	ldr	r3, [pc, #40]	; (322c <battCharging_cb+0x4c>)
    3202:	4798      	blx	r3
	if (pinState == true) {
    3204:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    3208:	d106      	bne.n	3218 <battCharging_cb+0x38>
		deviceState |= DEVICE_STATE_CHARGING;
    320a:	4a09      	ldr	r2, [pc, #36]	; (3230 <battCharging_cb+0x50>)
    320c:	6813      	ldr	r3, [r2, #0]
    320e:	f043 0320 	orr.w	r3, r3, #32
    3212:	6013      	str	r3, [r2, #0]
}
    3214:	b002      	add	sp, #8
    3216:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    3218:	4b05      	ldr	r3, [pc, #20]	; (3230 <battCharging_cb+0x50>)
    321a:	681a      	ldr	r2, [r3, #0]
    321c:	2200      	movs	r2, #0
    321e:	601a      	str	r2, [r3, #0]
    3220:	e7f8      	b.n	3214 <battCharging_cb+0x34>
    3222:	bf00      	nop
    3224:	00000d41 	.word	0x00000d41
    3228:	41008000 	.word	0x41008000
    322c:	00000d4f 	.word	0x00000d4f
    3230:	20000028 	.word	0x20000028

00003234 <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint8_t address, uint16_t value) 
{
    3234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3238:	4607      	mov	r7, r0
    323a:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    323c:	4d2f      	ldr	r5, [pc, #188]	; (32fc <spi_BB_Write+0xc8>)
    323e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    3242:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    3246:	200a      	movs	r0, #10
    3248:	4c2d      	ldr	r4, [pc, #180]	; (3300 <spi_BB_Write+0xcc>)
    324a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    324c:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3250:	200a      	movs	r0, #10
    3252:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3254:	2408      	movs	r4, #8
    3256:	e00c      	b.n	3272 <spi_BB_Write+0x3e>
    3258:	2210      	movs	r2, #16
    325a:	4b28      	ldr	r3, [pc, #160]	; (32fc <spi_BB_Write+0xc8>)
    325c:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    325e:	200a      	movs	r0, #10
    3260:	4d27      	ldr	r5, [pc, #156]	; (3300 <spi_BB_Write+0xcc>)
    3262:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3264:	2220      	movs	r2, #32
    3266:	4b25      	ldr	r3, [pc, #148]	; (32fc <spi_BB_Write+0xc8>)
    3268:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    326a:	200a      	movs	r0, #10
    326c:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    326e:	3c01      	subs	r4, #1
    3270:	b264      	sxtb	r4, r4
    3272:	2c00      	cmp	r4, #0
    3274:	db0b      	blt.n	328e <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3276:	2220      	movs	r2, #32
    3278:	4b20      	ldr	r3, [pc, #128]	; (32fc <spi_BB_Write+0xc8>)
    327a:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    327c:	fa47 f304 	asr.w	r3, r7, r4
    3280:	f013 0f01 	tst.w	r3, #1
    3284:	d0e8      	beq.n	3258 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3286:	2210      	movs	r2, #16
    3288:	4b1c      	ldr	r3, [pc, #112]	; (32fc <spi_BB_Write+0xc8>)
    328a:	619a      	str	r2, [r3, #24]
    328c:	e7e7      	b.n	325e <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    328e:	4c1b      	ldr	r4, [pc, #108]	; (32fc <spi_BB_Write+0xc8>)
    3290:	2720      	movs	r7, #32
    3292:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3294:	2310      	movs	r3, #16
    3296:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    3298:	200a      	movs	r0, #10
    329a:	4d19      	ldr	r5, [pc, #100]	; (3300 <spi_BB_Write+0xcc>)
    329c:	47a8      	blx	r5
    329e:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    32a0:	200a      	movs	r0, #10
    32a2:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    32a4:	240f      	movs	r4, #15
    32a6:	e00c      	b.n	32c2 <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32a8:	2210      	movs	r2, #16
    32aa:	4b14      	ldr	r3, [pc, #80]	; (32fc <spi_BB_Write+0xc8>)
    32ac:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    32ae:	200a      	movs	r0, #10
    32b0:	4d13      	ldr	r5, [pc, #76]	; (3300 <spi_BB_Write+0xcc>)
    32b2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32b4:	2220      	movs	r2, #32
    32b6:	4b11      	ldr	r3, [pc, #68]	; (32fc <spi_BB_Write+0xc8>)
    32b8:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    32ba:	200a      	movs	r0, #10
    32bc:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    32be:	3c01      	subs	r4, #1
    32c0:	b264      	sxtb	r4, r4
    32c2:	2c00      	cmp	r4, #0
    32c4:	db0b      	blt.n	32de <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32c6:	2220      	movs	r2, #32
    32c8:	4b0c      	ldr	r3, [pc, #48]	; (32fc <spi_BB_Write+0xc8>)
    32ca:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    32cc:	fa46 f304 	asr.w	r3, r6, r4
    32d0:	f013 0f01 	tst.w	r3, #1
    32d4:	d0e8      	beq.n	32a8 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32d6:	2210      	movs	r2, #16
    32d8:	4b08      	ldr	r3, [pc, #32]	; (32fc <spi_BB_Write+0xc8>)
    32da:	619a      	str	r2, [r3, #24]
    32dc:	e7e7      	b.n	32ae <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32de:	4c07      	ldr	r4, [pc, #28]	; (32fc <spi_BB_Write+0xc8>)
    32e0:	2320      	movs	r3, #32
    32e2:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    32e4:	200a      	movs	r0, #10
    32e6:	4d06      	ldr	r5, [pc, #24]	; (3300 <spi_BB_Write+0xcc>)
    32e8:	47a8      	blx	r5
	delay_us(10);
    32ea:	200a      	movs	r0, #10
    32ec:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    32f2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    32f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32fa:	bf00      	nop
    32fc:	41008000 	.word	0x41008000
    3300:	00000db5 	.word	0x00000db5

00003304 <python480SetGain>:
{
    3304:	b508      	push	{r3, lr}
	switch (value)
    3306:	2802      	cmp	r0, #2
    3308:	d00d      	beq.n	3326 <python480SetGain+0x22>
    330a:	2804      	cmp	r0, #4
    330c:	d010      	beq.n	3330 <python480SetGain+0x2c>
    330e:	2801      	cmp	r0, #1
    3310:	d004      	beq.n	331c <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    3312:	21e1      	movs	r1, #225	; 0xe1
    3314:	20cc      	movs	r0, #204	; 0xcc
    3316:	4b09      	ldr	r3, [pc, #36]	; (333c <python480SetGain+0x38>)
    3318:	4798      	blx	r3
    331a:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    331c:	21e1      	movs	r1, #225	; 0xe1
    331e:	20cc      	movs	r0, #204	; 0xcc
    3320:	4b06      	ldr	r3, [pc, #24]	; (333c <python480SetGain+0x38>)
    3322:	4798      	blx	r3
		break;
    3324:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    3326:	21e4      	movs	r1, #228	; 0xe4
    3328:	20cc      	movs	r0, #204	; 0xcc
    332a:	4b04      	ldr	r3, [pc, #16]	; (333c <python480SetGain+0x38>)
    332c:	4798      	blx	r3
		break;
    332e:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    3330:	2124      	movs	r1, #36	; 0x24
    3332:	20cc      	movs	r0, #204	; 0xcc
    3334:	4b01      	ldr	r3, [pc, #4]	; (333c <python480SetGain+0x38>)
    3336:	4798      	blx	r3
		break;
    3338:	bd08      	pop	{r3, pc}
    333a:	bf00      	nop
    333c:	00003235 	.word	0x00003235

00003340 <python480SetFPS>:
{
    3340:	b508      	push	{r3, lr}
	switch (value)
    3342:	280a      	cmp	r0, #10
    3344:	d00a      	beq.n	335c <python480SetFPS+0x1c>
    3346:	280f      	cmp	r0, #15
    3348:	d00e      	beq.n	3368 <python480SetFPS+0x28>
    334a:	2805      	cmp	r0, #5
    334c:	d000      	beq.n	3350 <python480SetFPS+0x10>
    334e:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 20000);
    3350:	f644 6120 	movw	r1, #20000	; 0x4e20
    3354:	20c9      	movs	r0, #201	; 0xc9
    3356:	4b07      	ldr	r3, [pc, #28]	; (3374 <python480SetFPS+0x34>)
    3358:	4798      	blx	r3
		break;
    335a:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    335c:	f242 7110 	movw	r1, #10000	; 0x2710
    3360:	20c9      	movs	r0, #201	; 0xc9
    3362:	4b04      	ldr	r3, [pc, #16]	; (3374 <python480SetFPS+0x34>)
    3364:	4798      	blx	r3
		break;
    3366:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    3368:	f641 210b 	movw	r1, #6667	; 0x1a0b
    336c:	20c9      	movs	r0, #201	; 0xc9
    336e:	4b01      	ldr	r3, [pc, #4]	; (3374 <python480SetFPS+0x34>)
    3370:	4798      	blx	r3
}
    3372:	e7ec      	b.n	334e <python480SetFPS+0xe>
    3374:	00003235 	.word	0x00003235

00003378 <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint8_t address)
{
    3378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    337c:	b082      	sub	sp, #8
    337e:	4606      	mov	r6, r0
    3380:	4d33      	ldr	r5, [pc, #204]	; (3450 <spi_BB_Read+0xd8>)
    3382:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    3386:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    338a:	200a      	movs	r0, #10
    338c:	4c31      	ldr	r4, [pc, #196]	; (3454 <spi_BB_Read+0xdc>)
    338e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3390:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3394:	200a      	movs	r0, #10
    3396:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3398:	2408      	movs	r4, #8
    339a:	e00c      	b.n	33b6 <spi_BB_Read+0x3e>
    339c:	2210      	movs	r2, #16
    339e:	4b2c      	ldr	r3, [pc, #176]	; (3450 <spi_BB_Read+0xd8>)
    33a0:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    33a2:	200a      	movs	r0, #10
    33a4:	4d2b      	ldr	r5, [pc, #172]	; (3454 <spi_BB_Read+0xdc>)
    33a6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33a8:	2220      	movs	r2, #32
    33aa:	4b29      	ldr	r3, [pc, #164]	; (3450 <spi_BB_Read+0xd8>)
    33ac:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    33ae:	200a      	movs	r0, #10
    33b0:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    33b2:	3c01      	subs	r4, #1
    33b4:	b264      	sxtb	r4, r4
    33b6:	2c00      	cmp	r4, #0
    33b8:	db0b      	blt.n	33d2 <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33ba:	2220      	movs	r2, #32
    33bc:	4b24      	ldr	r3, [pc, #144]	; (3450 <spi_BB_Read+0xd8>)
    33be:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    33c0:	fa46 f304 	asr.w	r3, r6, r4
    33c4:	f013 0f01 	tst.w	r3, #1
    33c8:	d0e8      	beq.n	339c <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ca:	2210      	movs	r2, #16
    33cc:	4b20      	ldr	r3, [pc, #128]	; (3450 <spi_BB_Read+0xd8>)
    33ce:	619a      	str	r2, [r3, #24]
    33d0:	e7e7      	b.n	33a2 <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33d2:	4c1f      	ldr	r4, [pc, #124]	; (3450 <spi_BB_Read+0xd8>)
    33d4:	2620      	movs	r6, #32
    33d6:	6166      	str	r6, [r4, #20]
    33d8:	2310      	movs	r3, #16
    33da:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    33dc:	200a      	movs	r0, #10
    33de:	4d1d      	ldr	r5, [pc, #116]	; (3454 <spi_BB_Read+0xdc>)
    33e0:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33e2:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    33e4:	200a      	movs	r0, #10
    33e6:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33e8:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    33ea:	200a      	movs	r0, #10
    33ec:	47a8      	blx	r5
	uint16_t value = 0;
    33ee:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    33f0:	250f      	movs	r5, #15
    33f2:	e01e      	b.n	3432 <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33f4:	4c16      	ldr	r4, [pc, #88]	; (3450 <spi_BB_Read+0xd8>)
    33f6:	f04f 0820 	mov.w	r8, #32
    33fa:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    33fe:	200a      	movs	r0, #10
    3400:	4e14      	ldr	r6, [pc, #80]	; (3454 <spi_BB_Read+0xdc>)
    3402:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3404:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    3408:	a801      	add	r0, sp, #4
    340a:	4b13      	ldr	r3, [pc, #76]	; (3458 <spi_BB_Read+0xe0>)
    340c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    340e:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3410:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3412:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3414:	405c      	eors	r4, r3
    3416:	4014      	ands	r4, r2
    3418:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    341a:	a801      	add	r0, sp, #4
    341c:	4b0f      	ldr	r3, [pc, #60]	; (345c <spi_BB_Read+0xe4>)
    341e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3420:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    3424:	40ac      	lsls	r4, r5
    3426:	433c      	orrs	r4, r7
    3428:	b2a7      	uxth	r7, r4
		delay_us(10);	
    342a:	200a      	movs	r0, #10
    342c:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    342e:	3d01      	subs	r5, #1
    3430:	b26d      	sxtb	r5, r5
    3432:	2d00      	cmp	r5, #0
    3434:	dade      	bge.n	33f4 <spi_BB_Read+0x7c>
	}
	delay_us(10);
    3436:	200a      	movs	r0, #10
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <spi_BB_Read+0xdc>)
    343a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    343c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <spi_BB_Read+0xd8>)
    3442:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    3446:	4638      	mov	r0, r7
    3448:	b002      	add	sp, #8
    344a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    344e:	bf00      	nop
    3450:	41008000 	.word	0x41008000
    3454:	00000db5 	.word	0x00000db5
    3458:	00000d41 	.word	0x00000d41
    345c:	00000d4f 	.word	0x00000d4f

00003460 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    3460:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    3462:	2100      	movs	r1, #0
    3464:	2002      	movs	r0, #2
    3466:	4c0e      	ldr	r4, [pc, #56]	; (34a0 <EnableClockMngmnt1+0x40>)
    3468:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    346a:	f242 1113 	movw	r1, #8467	; 0x2113
    346e:	2011      	movs	r0, #17
    3470:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    3472:	2100      	movs	r1, #0
    3474:	2014      	movs	r0, #20
    3476:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    3478:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    347c:	201a      	movs	r0, #26
    347e:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    3480:	f643 512d 	movw	r1, #15661	; 0x3d2d
    3484:	201b      	movs	r0, #27
    3486:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    3488:	f247 011c 	movw	r1, #28700	; 0x701c
    348c:	2020      	movs	r0, #32
    348e:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    3490:	2100      	movs	r1, #0
    3492:	2008      	movs	r0, #8
    3494:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    3496:	2107      	movs	r1, #7
    3498:	2010      	movs	r0, #16
    349a:	47a0      	blx	r4
    349c:	bd10      	pop	{r4, pc}
    349e:	bf00      	nop
    34a0:	00003235 	.word	0x00003235

000034a4 <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    34a4:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    34a6:	2100      	movs	r1, #0
    34a8:	2009      	movs	r0, #9
    34aa:	4c05      	ldr	r4, [pc, #20]	; (34c0 <EnableClockMngmnt2+0x1c>)
    34ac:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    34ae:	f247 010e 	movw	r1, #28686	; 0x700e
    34b2:	2020      	movs	r0, #32
    34b4:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    34b6:	2101      	movs	r1, #1
    34b8:	2022      	movs	r0, #34	; 0x22
    34ba:	47a0      	blx	r4
    34bc:	bd10      	pop	{r4, pc}
    34be:	bf00      	nop
    34c0:	00003235 	.word	0x00003235

000034c4 <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    34c4:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    34c6:	2100      	movs	r1, #0
    34c8:	2002      	movs	r0, #2
    34ca:	4cc8      	ldr	r4, [pc, #800]	; (37ec <RequiredUploads+0x328>)
    34cc:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    34ce:	2100      	movs	r1, #0
    34d0:	2008      	movs	r0, #8
    34d2:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    34d4:	2100      	movs	r1, #0
    34d6:	2009      	movs	r0, #9
    34d8:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    34da:	2100      	movs	r1, #0
    34dc:	200a      	movs	r0, #10
    34de:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    34e0:	2100      	movs	r1, #0
    34e2:	2014      	movs	r0, #20
    34e4:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    34e6:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    34ea:	201a      	movs	r0, #26
    34ec:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    34ee:	f643 512d 	movw	r1, #15661	; 0x3d2d
    34f2:	201b      	movs	r0, #27
    34f4:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    34f6:	f247 010f 	movw	r1, #28687	; 0x700f
    34fa:	2020      	movs	r0, #32
    34fc:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    34fe:	2101      	movs	r1, #1
    3500:	2022      	movs	r0, #34	; 0x22
    3502:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    3504:	2107      	movs	r1, #7
    3506:	2028      	movs	r0, #40	; 0x28
    3508:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    350a:	f640 015f 	movw	r1, #2143	; 0x85f
    350e:	2029      	movs	r0, #41	; 0x29
    3510:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    3512:	f244 1103 	movw	r1, #16643	; 0x4103
    3516:	202a      	movs	r0, #42	; 0x2a
    3518:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    351a:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    351e:	202b      	movs	r0, #43	; 0x2b
    3520:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    3522:	2101      	movs	r1, #1
    3524:	2030      	movs	r0, #48	; 0x30
    3526:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3528:	2101      	movs	r1, #1
    352a:	2040      	movs	r0, #64	; 0x40
    352c:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    352e:	f643 012a 	movw	r1, #14378	; 0x382a
    3532:	2041      	movs	r0, #65	; 0x41
    3534:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    3536:	f245 31c8 	movw	r1, #21448	; 0x53c8
    353a:	2042      	movs	r0, #66	; 0x42
    353c:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    353e:	f240 6165 	movw	r1, #1637	; 0x665
    3542:	2043      	movs	r0, #67	; 0x43
    3544:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    3546:	2185      	movs	r1, #133	; 0x85
    3548:	2044      	movs	r0, #68	; 0x44
    354a:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    354c:	f640 0188 	movw	r1, #2184	; 0x888
    3550:	2045      	movs	r0, #69	; 0x45
    3552:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    3554:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    3558:	2046      	movs	r0, #70	; 0x46
    355a:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    355c:	f648 0188 	movw	r1, #34952	; 0x8888
    3560:	2047      	movs	r0, #71	; 0x47
    3562:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    3564:	f240 1117 	movw	r1, #279	; 0x117
    3568:	2048      	movs	r0, #72	; 0x48
    356a:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    356c:	2100      	movs	r1, #0
    356e:	2070      	movs	r0, #112	; 0x70
    3570:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    3572:	f244 710a 	movw	r1, #18186	; 0x470a
    3576:	2080      	movs	r0, #128	; 0x80
    3578:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    357a:	f248 0101 	movw	r1, #32769	; 0x8001
    357e:	2081      	movs	r0, #129	; 0x81
    3580:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    3582:	2115      	movs	r1, #21
    3584:	2082      	movs	r0, #130	; 0x82
    3586:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function
    3588:	f640 0101 	movw	r1, #2049	; 0x801
    358c:	20c0      	movs	r0, #192	; 0xc0
    358e:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    3590:	21e4      	movs	r1, #228	; 0xe4
    3592:	20c2      	movs	r0, #194	; 0xc2
    3594:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    3596:	f44f 7182 	mov.w	r1, #260	; 0x104
    359a:	20c5      	movs	r0, #197	; 0xc5
    359c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    359e:	21a7      	movs	r1, #167	; 0xa7
    35a0:	20c7      	movs	r0, #199	; 0xc7
    35a2:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    35a4:	f640 41e4 	movw	r1, #3300	; 0xce4
    35a8:	20c8      	movs	r0, #200	; 0xc8
    35aa:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    35ac:	f640 41e4 	movw	r1, #3300	; 0xce4
    35b0:	20c9      	movs	r0, #201	; 0xc9
    35b2:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    35b4:	21e4      	movs	r1, #228	; 0xe4
    35b6:	20cc      	movs	r0, #204	; 0xcc
    35b8:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    35ba:	2114      	movs	r1, #20
    35bc:	20cf      	movs	r0, #207	; 0xcf
    35be:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    35c0:	f44f 7180 	mov.w	r1, #256	; 0x100
    35c4:	20d6      	movs	r0, #214	; 0xd6
    35c6:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    35c8:	f241 011f 	movw	r1, #4127	; 0x101f
    35cc:	20d7      	movs	r0, #215	; 0xd7
    35ce:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    35d0:	2100      	movs	r1, #0
    35d2:	20d8      	movs	r0, #216	; 0xd8
    35d4:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    35d6:	2123      	movs	r1, #35	; 0x23
    35d8:	20db      	movs	r0, #219	; 0xdb
    35da:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    35dc:	f643 412b 	movw	r1, #15403	; 0x3c2b
    35e0:	20dc      	movs	r0, #220	; 0xdc
    35e2:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    35e4:	f642 314d 	movw	r1, #11085	; 0x2b4d
    35e8:	20dd      	movs	r0, #221	; 0xdd
    35ea:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    35ec:	f643 615e 	movw	r1, #15966	; 0x3e5e
    35f0:	20e0      	movs	r0, #224	; 0xe0
    35f2:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    35f4:	2149      	movs	r1, #73	; 0x49
    35f6:	20d3      	movs	r0, #211	; 0xd3
    35f8:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    35fa:	2100      	movs	r1, #0
    35fc:	20d8      	movs	r0, #216	; 0xd8
    35fe:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3600:	2123      	movs	r1, #35	; 0x23
    3602:	20db      	movs	r0, #219	; 0xdb
    3604:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3606:	f643 412b 	movw	r1, #15403	; 0x3c2b
    360a:	20dc      	movs	r0, #220	; 0xdc
    360c:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    360e:	f642 314d 	movw	r1, #11085	; 0x2b4d
    3612:	20dd      	movs	r0, #221	; 0xdd
    3614:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    3616:	f240 2199 	movw	r1, #665	; 0x299
    361a:	20e6      	movs	r0, #230	; 0xe6
    361c:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    361e:	f44f 7154 	mov.w	r1, #848	; 0x350
    3622:	20e7      	movs	r0, #231	; 0xe7
    3624:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    3626:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    362a:	20e8      	movs	r0, #232	; 0xe8
    362c:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    362e:	21e1      	movs	r1, #225	; 0xe1
    3630:	20eb      	movs	r0, #235	; 0xeb
    3632:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    3634:	f24b 0119 	movw	r1, #45081	; 0xb019
    3638:	2000      	movs	r0, #0
    363a:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    363c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3640:	2002      	movs	r0, #2
    3642:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    3644:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3648:	2080      	movs	r0, #128	; 0x80
    364a:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    364c:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3650:	2081      	movs	r0, #129	; 0x81
    3652:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3654:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3658:	2082      	movs	r0, #130	; 0x82
    365a:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    365c:	f64f 3112 	movw	r1, #64274	; 0xfb12
    3660:	2083      	movs	r0, #131	; 0x83
    3662:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3664:	f64f 1112 	movw	r1, #63762	; 0xf912
    3668:	2084      	movs	r0, #132	; 0x84
    366a:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    366c:	f64f 1103 	movw	r1, #63747	; 0xf903
    3670:	2085      	movs	r0, #133	; 0x85
    3672:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    3674:	f64f 0102 	movw	r1, #63490	; 0xf802
    3678:	2086      	movs	r0, #134	; 0x86
    367a:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    367c:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3680:	2087      	movs	r0, #135	; 0x87
    3682:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    3684:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3688:	2088      	movs	r0, #136	; 0x88
    368a:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    368c:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3690:	2089      	movs	r0, #137	; 0x89
    3692:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3694:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3698:	208a      	movs	r0, #138	; 0x8a
    369a:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    369c:	f24f 1101 	movw	r1, #61697	; 0xf101
    36a0:	208b      	movs	r0, #139	; 0x8b
    36a2:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    36a4:	f24f 010a 	movw	r1, #61450	; 0xf00a
    36a8:	208c      	movs	r0, #140	; 0x8c
    36aa:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    36ac:	f24f 214b 	movw	r1, #62027	; 0xf24b
    36b0:	208d      	movs	r0, #141	; 0x8d
    36b2:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    36b4:	f24f 2101 	movw	r1, #61953	; 0xf201
    36b8:	208e      	movs	r0, #142	; 0x8e
    36ba:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    36bc:	f24f 2126 	movw	r1, #61990	; 0xf226
    36c0:	208f      	movs	r0, #143	; 0x8f
    36c2:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    36c4:	f24f 0121 	movw	r1, #61473	; 0xf021
    36c8:	2090      	movs	r0, #144	; 0x90
    36ca:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    36cc:	f24f 0101 	movw	r1, #61441	; 0xf001
    36d0:	2091      	movs	r0, #145	; 0x91
    36d2:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    36d4:	f24f 4102 	movw	r1, #62466	; 0xf402
    36d8:	2092      	movs	r0, #146	; 0x92
    36da:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    36dc:	f24f 0107 	movw	r1, #61447	; 0xf007
    36e0:	2093      	movs	r0, #147	; 0x93
    36e2:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    36e4:	f24f 210f 	movw	r1, #61967	; 0xf20f
    36e8:	2094      	movs	r0, #148	; 0x94
    36ea:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    36ec:	f24f 210f 	movw	r1, #61967	; 0xf20f
    36f0:	2095      	movs	r0, #149	; 0x95
    36f2:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    36f4:	f24f 2102 	movw	r1, #61954	; 0xf202
    36f8:	2096      	movs	r0, #150	; 0x96
    36fa:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    36fc:	f24f 0106 	movw	r1, #61446	; 0xf006
    3700:	2097      	movs	r0, #151	; 0x97
    3702:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3704:	f64e 4108 	movw	r1, #60424	; 0xec08
    3708:	2098      	movs	r0, #152	; 0x98
    370a:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    370c:	f64c 0101 	movw	r1, #51201	; 0xc801
    3710:	2099      	movs	r0, #153	; 0x99
    3712:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3714:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3718:	209a      	movs	r0, #154	; 0x9a
    371a:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    371c:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3720:	20a3      	movs	r0, #163	; 0xa3
    3722:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3724:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3728:	20a4      	movs	r0, #164	; 0xa4
    372a:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    372c:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3730:	20a5      	movs	r0, #165	; 0xa5
    3732:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    3734:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3738:	20a6      	movs	r0, #166	; 0xa6
    373a:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    373c:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3740:	20a7      	movs	r0, #167	; 0xa7
    3742:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    3744:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3748:	20a8      	movs	r0, #168	; 0xa8
    374a:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    374c:	f64c 0105 	movw	r1, #51205	; 0xc805
    3750:	20a9      	movs	r0, #169	; 0xa9
    3752:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3754:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3758:	20aa      	movs	r0, #170	; 0xaa
    375a:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    375c:	2130      	movs	r1, #48	; 0x30
    375e:	20ab      	movs	r0, #171	; 0xab
    3760:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3762:	f242 017b 	movw	r1, #8315	; 0x207b
    3766:	20ac      	movs	r0, #172	; 0xac
    3768:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    376a:	f242 0171 	movw	r1, #8305	; 0x2071
    376e:	20ad      	movs	r0, #173	; 0xad
    3770:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    3772:	2171      	movs	r1, #113	; 0x71
    3774:	20ae      	movs	r0, #174	; 0xae
    3776:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    3778:	f241 017f 	movw	r1, #4223	; 0x107f
    377c:	20af      	movs	r0, #175	; 0xaf
    377e:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    3780:	f241 0172 	movw	r1, #4210	; 0x1072
    3784:	20b0      	movs	r0, #176	; 0xb0
    3786:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    3788:	f241 0174 	movw	r1, #4212	; 0x1074
    378c:	20b1      	movs	r0, #177	; 0xb1
    378e:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    3790:	2171      	movs	r1, #113	; 0x71
    3792:	20b2      	movs	r0, #178	; 0xb2
    3794:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    3796:	2131      	movs	r1, #49	; 0x31
    3798:	20b3      	movs	r0, #179	; 0xb3
    379a:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    379c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    37a0:	20b4      	movs	r0, #180	; 0xb4
    37a2:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    37a4:	f242 01b1 	movw	r1, #8369	; 0x20b1
    37a8:	20b5      	movs	r0, #181	; 0xb5
    37aa:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    37ac:	21b1      	movs	r1, #177	; 0xb1
    37ae:	20b6      	movs	r0, #182	; 0xb6
    37b0:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    37b2:	f241 01bf 	movw	r1, #4287	; 0x10bf
    37b6:	20b7      	movs	r0, #183	; 0xb7
    37b8:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    37ba:	f241 01b2 	movw	r1, #4274	; 0x10b2
    37be:	20b8      	movs	r0, #184	; 0xb8
    37c0:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    37c2:	f241 01b4 	movw	r1, #4276	; 0x10b4
    37c6:	20b9      	movs	r0, #185	; 0xb9
    37c8:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    37ca:	21b1      	movs	r1, #177	; 0xb1
    37cc:	20ba      	movs	r0, #186	; 0xba
    37ce:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    37d0:	2130      	movs	r1, #48	; 0x30
    37d2:	20bb      	movs	r0, #187	; 0xbb
    37d4:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    37d6:	2130      	movs	r1, #48	; 0x30
    37d8:	20bc      	movs	r0, #188	; 0xbc
    37da:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    37dc:	f242 117b 	movw	r1, #8571	; 0x217b
    37e0:	20bd      	movs	r0, #189	; 0xbd
    37e2:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    37e4:	f242 0171 	movw	r1, #8305	; 0x2071
    37e8:	20be      	movs	r0, #190	; 0xbe
    37ea:	e001      	b.n	37f0 <RequiredUploads+0x32c>
    37ec:	00003235 	.word	0x00003235
    37f0:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    37f2:	2171      	movs	r1, #113	; 0x71
    37f4:	20bf      	movs	r0, #191	; 0xbf
    37f6:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    37f8:	f241 017f 	movw	r1, #4223	; 0x107f
    37fc:	20c0      	movs	r0, #192	; 0xc0
    37fe:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3800:	f241 0172 	movw	r1, #4210	; 0x1072
    3804:	20c1      	movs	r0, #193	; 0xc1
    3806:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    3808:	f241 0174 	movw	r1, #4212	; 0x1074
    380c:	20c2      	movs	r0, #194	; 0xc2
    380e:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3810:	2171      	movs	r1, #113	; 0x71
    3812:	20c3      	movs	r0, #195	; 0xc3
    3814:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    3816:	2131      	movs	r1, #49	; 0x31
    3818:	20c4      	movs	r0, #196	; 0xc4
    381a:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    381c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3820:	20c5      	movs	r0, #197	; 0xc5
    3822:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    3824:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3828:	20c6      	movs	r0, #198	; 0xc6
    382a:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    382c:	21b1      	movs	r1, #177	; 0xb1
    382e:	20c7      	movs	r0, #199	; 0xc7
    3830:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    3832:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3836:	20c8      	movs	r0, #200	; 0xc8
    3838:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    383a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    383e:	20c9      	movs	r0, #201	; 0xc9
    3840:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    3842:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3846:	20ca      	movs	r0, #202	; 0xca
    3848:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    384a:	21b1      	movs	r1, #177	; 0xb1
    384c:	20cb      	movs	r0, #203	; 0xcb
    384e:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    3850:	2130      	movs	r1, #48	; 0x30
    3852:	20cc      	movs	r0, #204	; 0xcc
    3854:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    3856:	2130      	movs	r1, #48	; 0x30
    3858:	20cd      	movs	r0, #205	; 0xcd
    385a:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    385c:	f242 117b 	movw	r1, #8571	; 0x217b
    3860:	20ce      	movs	r0, #206	; 0xce
    3862:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    3864:	f242 0171 	movw	r1, #8305	; 0x2071
    3868:	20cf      	movs	r0, #207	; 0xcf
    386a:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    386c:	2171      	movs	r1, #113	; 0x71
    386e:	20d0      	movs	r0, #208	; 0xd0
    3870:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    3872:	f241 0171 	movw	r1, #4209	; 0x1071
    3876:	20d1      	movs	r0, #209	; 0xd1
    3878:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    387a:	2171      	movs	r1, #113	; 0x71
    387c:	20d2      	movs	r0, #210	; 0xd2
    387e:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    3880:	2131      	movs	r1, #49	; 0x31
    3882:	20d3      	movs	r0, #211	; 0xd3
    3884:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    3886:	f242 11bb 	movw	r1, #8635	; 0x21bb
    388a:	20d4      	movs	r0, #212	; 0xd4
    388c:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    388e:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3892:	20d5      	movs	r0, #213	; 0xd5
    3894:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3896:	21b1      	movs	r1, #177	; 0xb1
    3898:	20d6      	movs	r0, #214	; 0xd6
    389a:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    389c:	f241 01b3 	movw	r1, #4275	; 0x10b3
    38a0:	20d7      	movs	r0, #215	; 0xd7
    38a2:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    38a4:	f241 01b1 	movw	r1, #4273	; 0x10b1
    38a8:	20d8      	movs	r0, #216	; 0xd8
    38aa:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    38ac:	21b1      	movs	r1, #177	; 0xb1
    38ae:	20d9      	movs	r0, #217	; 0xd9
    38b0:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    38b2:	213f      	movs	r1, #63	; 0x3f
    38b4:	20da      	movs	r0, #218	; 0xda
    38b6:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    38b8:	2132      	movs	r1, #50	; 0x32
    38ba:	20db      	movs	r0, #219	; 0xdb
    38bc:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    38be:	2130      	movs	r1, #48	; 0x30
    38c0:	20dc      	movs	r0, #220	; 0xdc
    38c2:	47a0      	blx	r4
    38c4:	bd10      	pop	{r4, pc}
    38c6:	bf00      	nop

000038c8 <SoftPowerUp>:
}

void SoftPowerUp() {
    38c8:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    38ca:	2100      	movs	r1, #0
    38cc:	200a      	movs	r0, #10
    38ce:	4c0d      	ldr	r4, [pc, #52]	; (3904 <SoftPowerUp+0x3c>)
    38d0:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    38d2:	f247 010f 	movw	r1, #28687	; 0x700f
    38d6:	2020      	movs	r0, #32
    38d8:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    38da:	2107      	movs	r1, #7
    38dc:	2028      	movs	r0, #40	; 0x28
    38de:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    38e0:	f244 1113 	movw	r1, #16659	; 0x4113
    38e4:	202a      	movs	r0, #42	; 0x2a
    38e6:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    38e8:	2101      	movs	r1, #1
    38ea:	2030      	movs	r0, #48	; 0x30
    38ec:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    38ee:	2101      	movs	r1, #1
    38f0:	2040      	movs	r0, #64	; 0x40
    38f2:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    38f4:	f240 1127 	movw	r1, #295	; 0x127
    38f8:	2048      	movs	r0, #72	; 0x48
    38fa:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    38fc:	2100      	movs	r1, #0
    38fe:	2070      	movs	r0, #112	; 0x70
    3900:	47a0      	blx	r4
    3902:	bd10      	pop	{r4, pc}
    3904:	00003235 	.word	0x00003235

00003908 <python480Init>:
{
    3908:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    390a:	4b06      	ldr	r3, [pc, #24]	; (3924 <python480Init+0x1c>)
    390c:	4798      	blx	r3
	delay_ms(10);
    390e:	200a      	movs	r0, #10
    3910:	4b05      	ldr	r3, [pc, #20]	; (3928 <python480Init+0x20>)
    3912:	4798      	blx	r3
	EnableClockMngmnt2();
    3914:	4b05      	ldr	r3, [pc, #20]	; (392c <python480Init+0x24>)
    3916:	4798      	blx	r3
	RequiredUploads();
    3918:	4b05      	ldr	r3, [pc, #20]	; (3930 <python480Init+0x28>)
    391a:	4798      	blx	r3
	SoftPowerUp();
    391c:	4b05      	ldr	r3, [pc, #20]	; (3934 <python480Init+0x2c>)
    391e:	4798      	blx	r3
    3920:	bd08      	pop	{r3, pc}
    3922:	bf00      	nop
    3924:	00003461 	.word	0x00003461
    3928:	00000dd5 	.word	0x00000dd5
    392c:	000034a5 	.word	0x000034a5
    3930:	000034c5 	.word	0x000034c5
    3934:	000038c9 	.word	0x000038c9

00003938 <getCurrentTimeMS>:
	return timeMS;
    3938:	4b01      	ldr	r3, [pc, #4]	; (3940 <getCurrentTimeMS+0x8>)
    393a:	6818      	ldr	r0, [r3, #0]
}
    393c:	4770      	bx	lr
    393e:	bf00      	nop
    3940:	20000224 	.word	0x20000224

00003944 <loadSDCardHeader>:
uint8_t loadSDCardHeader(void){
    3944:	b508      	push	{r3, lr}
	sd_mmc_init_read_blocks(0,HEADER_BLOCK,1);
    3946:	2201      	movs	r2, #1
    3948:	f240 31fe 	movw	r1, #1022	; 0x3fe
    394c:	2000      	movs	r0, #0
    394e:	4b07      	ldr	r3, [pc, #28]	; (396c <loadSDCardHeader+0x28>)
    3950:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerBlock,1);
    3952:	2101      	movs	r1, #1
    3954:	4806      	ldr	r0, [pc, #24]	; (3970 <loadSDCardHeader+0x2c>)
    3956:	4b07      	ldr	r3, [pc, #28]	; (3974 <loadSDCardHeader+0x30>)
    3958:	4798      	blx	r3
	if (sd_mmc_wait_end_of_read_blocks(false) == SD_MMC_OK)
    395a:	2000      	movs	r0, #0
    395c:	4b06      	ldr	r3, [pc, #24]	; (3978 <loadSDCardHeader+0x34>)
    395e:	4798      	blx	r3
    3960:	b108      	cbz	r0, 3966 <loadSDCardHeader+0x22>
		return MS_ERROR;
    3962:	2000      	movs	r0, #0
}
    3964:	bd08      	pop	{r3, pc}
		return MS_SUCCESS;
    3966:	2001      	movs	r0, #1
    3968:	bd08      	pop	{r3, pc}
    396a:	bf00      	nop
    396c:	00004869 	.word	0x00004869
    3970:	20000228 	.word	0x20000228
    3974:	00004905 	.word	0x00004905
    3978:	00004951 	.word	0x00004951

0000397c <getPropFromHeader>:
	return header32bit[headerPos];
    397c:	4b02      	ldr	r3, [pc, #8]	; (3988 <getPropFromHeader+0xc>)
    397e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3982:	6840      	ldr	r0, [r0, #4]
    3984:	4770      	bx	lr
    3986:	bf00      	nop
    3988:	20000224 	.word	0x20000224

0000398c <setStatusLED>:
	if (level) {
    398c:	b928      	cbnz	r0, 399a <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    398e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3992:	4b05      	ldr	r3, [pc, #20]	; (39a8 <setStatusLED+0x1c>)
    3994:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3998:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    399a:	f44f 7200 	mov.w	r2, #512	; 0x200
    399e:	4b02      	ldr	r3, [pc, #8]	; (39a8 <setStatusLED+0x1c>)
    39a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    39a4:	4770      	bx	lr
    39a6:	bf00      	nop
    39a8:	41008000 	.word	0x41008000

000039ac <frameValid_cb>:

static void frameValid_cb(void)
{
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    39b0:	a801      	add	r0, sp, #4
    39b2:	4c12      	ldr	r4, [pc, #72]	; (39fc <frameValid_cb+0x50>)
    39b4:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    39b6:	4d12      	ldr	r5, [pc, #72]	; (3a00 <frameValid_cb+0x54>)
    39b8:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    39bc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    39c0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    39c4:	a801      	add	r0, sp, #4
    39c6:	4e0f      	ldr	r6, [pc, #60]	; (3a04 <frameValid_cb+0x58>)
    39c8:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    39ca:	4668      	mov	r0, sp
    39cc:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    39ce:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    39d2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    39d6:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    39da:	405c      	eors	r4, r3
    39dc:	4014      	ands	r4, r2
    39de:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    39e0:	4668      	mov	r0, sp
    39e2:	47b0      	blx	r6
	bool pinState = gpio_get_pin_level(FrameValid);
	
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    39e4:	f414 7f00 	tst.w	r4, #512	; 0x200
    39e8:	d104      	bne.n	39f4 <frameValid_cb+0x48>
		setStatusLED(0);
		
	}
	else {
		setStatusLED(1);
    39ea:	2001      	movs	r0, #1
    39ec:	4b06      	ldr	r3, [pc, #24]	; (3a08 <frameValid_cb+0x5c>)
    39ee:	4798      	blx	r3
			deviceState &= !(DEVICE_STATE_START_RECORDING_WAITING);
			deviceState |= DEVICE_STATE_RECORDING;
		}
	}
	*/
}
    39f0:	b002      	add	sp, #8
    39f2:	bd70      	pop	{r4, r5, r6, pc}
		setStatusLED(0);
    39f4:	2000      	movs	r0, #0
    39f6:	4b04      	ldr	r3, [pc, #16]	; (3a08 <frameValid_cb+0x5c>)
    39f8:	4798      	blx	r3
    39fa:	e7f9      	b.n	39f0 <frameValid_cb+0x44>
    39fc:	00000d41 	.word	0x00000d41
    3a00:	41008000 	.word	0x41008000
    3a04:	00000d4f 	.word	0x00000d4f
    3a08:	0000398d 	.word	0x0000398d

00003a0c <startRecording>:
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void startRecording()
{
    3a0c:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    3a0e:	2400      	movs	r4, #0
    3a10:	4b0a      	ldr	r3, [pc, #40]	; (3a3c <startRecording+0x30>)
    3a12:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    3a14:	4b0a      	ldr	r3, [pc, #40]	; (3a40 <startRecording+0x34>)
    3a16:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    3a18:	4b0a      	ldr	r3, [pc, #40]	; (3a44 <startRecording+0x38>)
    3a1a:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    3a1c:	4b0a      	ldr	r3, [pc, #40]	; (3a48 <startRecording+0x3c>)
    3a1e:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    3a20:	4b0a      	ldr	r3, [pc, #40]	; (3a4c <startRecording+0x40>)
    3a22:	601c      	str	r4, [r3, #0]
	
	startTimeMS = getCurrentTimeMS();
    3a24:	4b0a      	ldr	r3, [pc, #40]	; (3a50 <startRecording+0x44>)
    3a26:	4798      	blx	r3
    3a28:	4b0a      	ldr	r3, [pc, #40]	; (3a54 <startRecording+0x48>)
    3a2a:	6018      	str	r0, [r3, #0]
	
	deviceState &= !(DEVICE_STATE_START_RECORDING);
    3a2c:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <startRecording+0x4c>)
    3a2e:	681a      	ldr	r2, [r3, #0]
    3a30:	601c      	str	r4, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3a32:	681a      	ldr	r2, [r3, #0]
    3a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3a38:	601a      	str	r2, [r3, #0]
    3a3a:	bd10      	pop	{r4, pc}
    3a3c:	20000bd0 	.word	0x20000bd0
    3a40:	20000bcc 	.word	0x20000bcc
    3a44:	20000b7c 	.word	0x20000b7c
    3a48:	20000bc8 	.word	0x20000bc8
    3a4c:	20000b78 	.word	0x20000b78
    3a50:	00003939 	.word	0x00003939
    3a54:	20000bc4 	.word	0x20000bc4
    3a58:	20000028 	.word	0x20000028

00003a5c <stopRecording>:
}

void stopRecording()
{
    3a5c:	b510      	push	{r4, lr}
	// TODO: Change status LEDs
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
    3a5e:	4b0f      	ldr	r3, [pc, #60]	; (3a9c <stopRecording+0x40>)
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	b2db      	uxtb	r3, r3
    3a64:	4c0e      	ldr	r4, [pc, #56]	; (3aa0 <stopRecording+0x44>)
    3a66:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    3a6a:	4b0e      	ldr	r3, [pc, #56]	; (3aa4 <stopRecording+0x48>)
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	b2db      	uxtb	r3, r3
    3a70:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    3a74:	2201      	movs	r2, #1
    3a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3a7a:	2000      	movs	r0, #0
    3a7c:	4b0a      	ldr	r3, [pc, #40]	; (3aa8 <stopRecording+0x4c>)
    3a7e:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3a80:	2101      	movs	r1, #1
    3a82:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3a86:	4b09      	ldr	r3, [pc, #36]	; (3aac <stopRecording+0x50>)
    3a88:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    3a8a:	2000      	movs	r0, #0
    3a8c:	4b08      	ldr	r3, [pc, #32]	; (3ab0 <stopRecording+0x54>)
    3a8e:	4798      	blx	r3
	
	deviceState |= DEVICE_STATE_STOP_RECORDING;
    3a90:	4a08      	ldr	r2, [pc, #32]	; (3ab4 <stopRecording+0x58>)
    3a92:	6813      	ldr	r3, [r2, #0]
    3a94:	f043 0310 	orr.w	r3, r3, #16
    3a98:	6013      	str	r3, [r2, #0]
    3a9a:	bd10      	pop	{r4, pc}
    3a9c:	20000bcc 	.word	0x20000bcc
    3aa0:	20000224 	.word	0x20000224
    3aa4:	20000b7c 	.word	0x20000b7c
    3aa8:	000049c1 	.word	0x000049c1
    3aac:	00004a61 	.word	0x00004a61
    3ab0:	00004aad 	.word	0x00004aad
    3ab4:	20000028 	.word	0x20000028

00003ab8 <recording>:
//	deviceState &= !(DEVICE_STATE_RECORDING);	
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    3ab8:	4b56      	ldr	r3, [pc, #344]	; (3c14 <recording+0x15c>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	4a56      	ldr	r2, [pc, #344]	; (3c18 <recording+0x160>)
    3abe:	6812      	ldr	r2, [r2, #0]
    3ac0:	4413      	add	r3, r2
    3ac2:	4a56      	ldr	r2, [pc, #344]	; (3c1c <recording+0x164>)
    3ac4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3ac8:	4293      	cmp	r3, r2
    3aca:	f080 80a2 	bcs.w	3c12 <recording+0x15a>
{
    3ace:	b510      	push	{r4, lr}
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    3ad0:	4b50      	ldr	r3, [pc, #320]	; (3c14 <recording+0x15c>)
    3ad2:	681b      	ldr	r3, [r3, #0]
    3ad4:	4a50      	ldr	r2, [pc, #320]	; (3c18 <recording+0x160>)
    3ad6:	6812      	ldr	r2, [r2, #0]
    3ad8:	4413      	add	r3, r2
    3ada:	3304      	adds	r3, #4
    3adc:	4a4f      	ldr	r2, [pc, #316]	; (3c1c <recording+0x164>)
    3ade:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3ae2:	4293      	cmp	r3, r2
    3ae4:	d221      	bcs.n	3b2a <recording+0x72>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
    3ae6:	4b4b      	ldr	r3, [pc, #300]	; (3c14 <recording+0x15c>)
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	4a4b      	ldr	r2, [pc, #300]	; (3c18 <recording+0x160>)
    3aec:	6811      	ldr	r1, [r2, #0]
    3aee:	440b      	add	r3, r1
    3af0:	f003 0303 	and.w	r3, r3, #3
    3af4:	f1c3 0304 	rsb	r3, r3, #4
    3af8:	6811      	ldr	r1, [r2, #0]
    3afa:	440b      	add	r3, r1
    3afc:	6013      	str	r3, [r2, #0]
			//writeFrameNum = bufferToWrite[BUFFER_HEADER_FRAME_NUM_POS];
			writeBufferCount++;
			
		}
		
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    3afe:	4b48      	ldr	r3, [pc, #288]	; (3c20 <recording+0x168>)
    3b00:	4798      	blx	r3
    3b02:	4b48      	ldr	r3, [pc, #288]	; (3c24 <recording+0x16c>)
    3b04:	681c      	ldr	r4, [r3, #0]
    3b06:	1b04      	subs	r4, r0, r4
    3b08:	2007      	movs	r0, #7
    3b0a:	4b47      	ldr	r3, [pc, #284]	; (3c28 <recording+0x170>)
    3b0c:	4798      	blx	r3
    3b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3b12:	fb03 f300 	mul.w	r3, r3, r0
    3b16:	429c      	cmp	r4, r3
    3b18:	bf34      	ite	cc
    3b1a:	2400      	movcc	r4, #0
    3b1c:	2401      	movcs	r4, #1
    3b1e:	2800      	cmp	r0, #0
    3b20:	bf08      	it	eq
    3b22:	2400      	moveq	r4, #0
    3b24:	2c00      	cmp	r4, #0
    3b26:	d171      	bne.n	3c0c <recording+0x154>
    3b28:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    3b2a:	4c3a      	ldr	r4, [pc, #232]	; (3c14 <recording+0x15c>)
    3b2c:	6823      	ldr	r3, [r4, #0]
    3b2e:	493a      	ldr	r1, [pc, #232]	; (3c18 <recording+0x160>)
    3b30:	680a      	ldr	r2, [r1, #0]
    3b32:	4413      	add	r3, r2
    3b34:	f003 0303 	and.w	r3, r3, #3
    3b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b3c:	0358      	lsls	r0, r3, #13
    3b3e:	4b3b      	ldr	r3, [pc, #236]	; (3c2c <recording+0x174>)
    3b40:	4418      	add	r0, r3
    3b42:	4b3b      	ldr	r3, [pc, #236]	; (3c30 <recording+0x178>)
    3b44:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3b46:	6a03      	ldr	r3, [r0, #32]
    3b48:	f203 2323 	addw	r3, r3, #547	; 0x223
    3b4c:	0a5b      	lsrs	r3, r3, #9
    3b4e:	4a39      	ldr	r2, [pc, #228]	; (3c34 <recording+0x17c>)
    3b50:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3b52:	6823      	ldr	r3, [r4, #0]
    3b54:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3b56:	680b      	ldr	r3, [r1, #0]
    3b58:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    3b5a:	6812      	ldr	r2, [r2, #0]
    3b5c:	4b36      	ldr	r3, [pc, #216]	; (3c38 <recording+0x180>)
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	429a      	cmp	r2, r3
    3b62:	d219      	bcs.n	3b98 <recording+0xe0>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    3b64:	4b33      	ldr	r3, [pc, #204]	; (3c34 <recording+0x17c>)
    3b66:	6819      	ldr	r1, [r3, #0]
    3b68:	b289      	uxth	r1, r1
    3b6a:	4b34      	ldr	r3, [pc, #208]	; (3c3c <recording+0x184>)
    3b6c:	4798      	blx	r3
    3b6e:	b978      	cbnz	r0, 3b90 <recording+0xd8>
				initBlocksRemaining -= numBlocks;
    3b70:	4a30      	ldr	r2, [pc, #192]	; (3c34 <recording+0x17c>)
    3b72:	6810      	ldr	r0, [r2, #0]
    3b74:	4930      	ldr	r1, [pc, #192]	; (3c38 <recording+0x180>)
    3b76:	680b      	ldr	r3, [r1, #0]
    3b78:	1a1b      	subs	r3, r3, r0
    3b7a:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    3b7c:	6813      	ldr	r3, [r2, #0]
    3b7e:	4a30      	ldr	r2, [pc, #192]	; (3c40 <recording+0x188>)
    3b80:	6851      	ldr	r1, [r2, #4]
    3b82:	440b      	add	r3, r1
    3b84:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    3b86:	4a23      	ldr	r2, [pc, #140]	; (3c14 <recording+0x15c>)
    3b88:	6813      	ldr	r3, [r2, #0]
    3b8a:	3301      	adds	r3, #1
    3b8c:	6013      	str	r3, [r2, #0]
    3b8e:	e7b6      	b.n	3afe <recording+0x46>
				sd_mmc_wait_end_of_write_blocks(false);
    3b90:	2000      	movs	r0, #0
    3b92:	4b2c      	ldr	r3, [pc, #176]	; (3c44 <recording+0x18c>)
    3b94:	4798      	blx	r3
    3b96:	e7eb      	b.n	3b70 <recording+0xb8>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    3b98:	4b27      	ldr	r3, [pc, #156]	; (3c38 <recording+0x180>)
    3b9a:	6819      	ldr	r1, [r3, #0]
    3b9c:	b289      	uxth	r1, r1
    3b9e:	4b27      	ldr	r3, [pc, #156]	; (3c3c <recording+0x184>)
    3ba0:	4798      	blx	r3
    3ba2:	b9e0      	cbnz	r0, 3bde <recording+0x126>
				currentBlock += initBlocksRemaining;
    3ba4:	4b24      	ldr	r3, [pc, #144]	; (3c38 <recording+0x180>)
    3ba6:	681a      	ldr	r2, [r3, #0]
    3ba8:	4b25      	ldr	r3, [pc, #148]	; (3c40 <recording+0x188>)
    3baa:	6859      	ldr	r1, [r3, #4]
    3bac:	440a      	add	r2, r1
    3bae:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    3bb0:	6859      	ldr	r1, [r3, #4]
    3bb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3bb6:	2000      	movs	r0, #0
    3bb8:	4b23      	ldr	r3, [pc, #140]	; (3c48 <recording+0x190>)
    3bba:	4798      	blx	r3
    3bbc:	b998      	cbnz	r0, 3be6 <recording+0x12e>
				currentBlock += numBlocks - initBlocksRemaining;
    3bbe:	491d      	ldr	r1, [pc, #116]	; (3c34 <recording+0x17c>)
    3bc0:	680b      	ldr	r3, [r1, #0]
    3bc2:	4a1d      	ldr	r2, [pc, #116]	; (3c38 <recording+0x180>)
    3bc4:	6810      	ldr	r0, [r2, #0]
    3bc6:	1a1b      	subs	r3, r3, r0
    3bc8:	481d      	ldr	r0, [pc, #116]	; (3c40 <recording+0x188>)
    3bca:	6844      	ldr	r4, [r0, #4]
    3bcc:	4423      	add	r3, r4
    3bce:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    3bd0:	6813      	ldr	r3, [r2, #0]
    3bd2:	6809      	ldr	r1, [r1, #0]
    3bd4:	1a5b      	subs	r3, r3, r1
    3bd6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    3bda:	6013      	str	r3, [r2, #0]
    3bdc:	e7d3      	b.n	3b86 <recording+0xce>
				sd_mmc_wait_end_of_write_blocks(false);
    3bde:	2000      	movs	r0, #0
    3be0:	4b18      	ldr	r3, [pc, #96]	; (3c44 <recording+0x18c>)
    3be2:	4798      	blx	r3
    3be4:	e7de      	b.n	3ba4 <recording+0xec>
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    3be6:	4b12      	ldr	r3, [pc, #72]	; (3c30 <recording+0x178>)
    3be8:	681a      	ldr	r2, [r3, #0]
    3bea:	4b13      	ldr	r3, [pc, #76]	; (3c38 <recording+0x180>)
    3bec:	6818      	ldr	r0, [r3, #0]
    3bee:	4911      	ldr	r1, [pc, #68]	; (3c34 <recording+0x17c>)
    3bf0:	6809      	ldr	r1, [r1, #0]
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	1ac9      	subs	r1, r1, r3
    3bf6:	b289      	uxth	r1, r1
    3bf8:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    3bfc:	4b0f      	ldr	r3, [pc, #60]	; (3c3c <recording+0x184>)
    3bfe:	4798      	blx	r3
    3c00:	2800      	cmp	r0, #0
    3c02:	d0dc      	beq.n	3bbe <recording+0x106>
				sd_mmc_wait_end_of_write_blocks(false);
    3c04:	2000      	movs	r0, #0
    3c06:	4b0f      	ldr	r3, [pc, #60]	; (3c44 <recording+0x18c>)
    3c08:	4798      	blx	r3
    3c0a:	e7d8      	b.n	3bbe <recording+0x106>
			// Recording time has elapsed
			stopRecording();			
    3c0c:	4b0f      	ldr	r3, [pc, #60]	; (3c4c <recording+0x194>)
    3c0e:	4798      	blx	r3
			
		}
		
	}
	
}
    3c10:	e78a      	b.n	3b28 <recording+0x70>
    3c12:	4770      	bx	lr
    3c14:	20000bcc 	.word	0x20000bcc
    3c18:	20000b7c 	.word	0x20000b7c
    3c1c:	20000224 	.word	0x20000224
    3c20:	00003939 	.word	0x00003939
    3c24:	20000bc4 	.word	0x20000bc4
    3c28:	0000397d 	.word	0x0000397d
    3c2c:	20000bd4 	.word	0x20000bd4
    3c30:	20000bc0 	.word	0x20000bc0
    3c34:	20028bd4 	.word	0x20028bd4
    3c38:	20028bd8 	.word	0x20028bd8
    3c3c:	00004a61 	.word	0x00004a61
    3c40:	20000028 	.word	0x20000028
    3c44:	00004aad 	.word	0x00004aad
    3c48:	000049c1 	.word	0x000049c1
    3c4c:	00003a5d 	.word	0x00003a5d

00003c50 <main>:
int main(void)
{
    3c50:	b570      	push	{r4, r5, r6, lr}
    3c52:	b082      	sub	sp, #8
	uint32_t lastTime = 0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3c54:	4b3f      	ldr	r3, [pc, #252]	; (3d54 <main+0x104>)
    3c56:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3c5c:	4b3e      	ldr	r3, [pc, #248]	; (3d58 <main+0x108>)
    3c5e:	619a      	str	r2, [r3, #24]
	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	setStatusLED(1);
    3c60:	2001      	movs	r0, #1
    3c62:	4b3e      	ldr	r3, [pc, #248]	; (3d5c <main+0x10c>)
    3c64:	4798      	blx	r3
	/*
	I2C_BB_init();
	*/
	
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3c66:	2100      	movs	r1, #0
    3c68:	483d      	ldr	r0, [pc, #244]	; (3d60 <main+0x110>)
    3c6a:	4b3e      	ldr	r3, [pc, #248]	; (3d64 <main+0x114>)
    3c6c:	4798      	blx	r3
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
	*/
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    3c6e:	4c3e      	ldr	r4, [pc, #248]	; (3d68 <main+0x118>)
    3c70:	2301      	movs	r3, #1
    3c72:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3c76:	4a3d      	ldr	r2, [pc, #244]	; (3d6c <main+0x11c>)
    3c78:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    3c7c:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    3c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c84:	f8c4 242c 	str.w	r2, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3c88:	4a39      	ldr	r2, [pc, #228]	; (3d70 <main+0x120>)
    3c8a:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3c8e:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3c92:	4d38      	ldr	r5, [pc, #224]	; (3d74 <main+0x124>)
    3c94:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    3c98:	4628      	mov	r0, r5
    3c9a:	4e37      	ldr	r6, [pc, #220]	; (3d78 <main+0x128>)
    3c9c:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3c9e:	f204 4124 	addw	r1, r4, #1060	; 0x424
    3ca2:	4628      	mov	r0, r5
    3ca4:	47b0      	blx	r6
	timer_start(&TIMER_0);
    3ca6:	4628      	mov	r0, r5
    3ca8:	4b34      	ldr	r3, [pc, #208]	; (3d7c <main+0x12c>)
    3caa:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    3cac:	4934      	ldr	r1, [pc, #208]	; (3d80 <main+0x130>)
    3cae:	2036      	movs	r0, #54	; 0x36
    3cb0:	4c34      	ldr	r4, [pc, #208]	; (3d84 <main+0x134>)
    3cb2:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    3cb4:	4934      	ldr	r1, [pc, #208]	; (3d88 <main+0x138>)
    3cb6:	2037      	movs	r0, #55	; 0x37
    3cb8:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    3cba:	4934      	ldr	r1, [pc, #208]	; (3d8c <main+0x13c>)
    3cbc:	202e      	movs	r0, #46	; 0x2e
    3cbe:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    3cc0:	4933      	ldr	r1, [pc, #204]	; (3d90 <main+0x140>)
    3cc2:	2019      	movs	r0, #25
    3cc4:	47a0      	blx	r4
	
	
	// Wait for SD Card and then load config from it
	while (SD_MMC_OK != sd_mmc_check(0)) {}
    3cc6:	2000      	movs	r0, #0
    3cc8:	4b32      	ldr	r3, [pc, #200]	; (3d94 <main+0x144>)
    3cca:	4798      	blx	r3
    3ccc:	2800      	cmp	r0, #0
    3cce:	d1fa      	bne.n	3cc6 <main+0x76>
	if (loadSDCardHeader() == MS_SUCCESS)
    3cd0:	4b31      	ldr	r3, [pc, #196]	; (3d98 <main+0x148>)
    3cd2:	4798      	blx	r3
    3cd4:	2801      	cmp	r0, #1
    3cd6:	d126      	bne.n	3d26 <main+0xd6>
		deviceState |= DEVICE_STATE_CONFIG_LOADED;
    3cd8:	4a30      	ldr	r2, [pc, #192]	; (3d9c <main+0x14c>)
    3cda:	6813      	ldr	r3, [r2, #0]
    3cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3ce0:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ce2:	4c1d      	ldr	r4, [pc, #116]	; (3d58 <main+0x108>)
    3ce4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    3ce8:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
    3cec:	2064      	movs	r0, #100	; 0x64
    3cee:	4b2c      	ldr	r3, [pc, #176]	; (3da0 <main+0x150>)
    3cf0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cf2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    3cf6:	2064      	movs	r0, #100	; 0x64
    3cf8:	4b2a      	ldr	r3, [pc, #168]	; (3da4 <main+0x154>)
    3cfa:	4798      	blx	r3
	volatile uint16_t chip_id = spi_BB_Read(0x00);
    3cfc:	2000      	movs	r0, #0
    3cfe:	4b2a      	ldr	r3, [pc, #168]	; (3da8 <main+0x158>)
    3d00:	4798      	blx	r3
    3d02:	f8ad 0006 	strh.w	r0, [sp, #6]
	chip_id += 1;
    3d06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3d0a:	b29b      	uxth	r3, r3
    3d0c:	3301      	adds	r3, #1
    3d0e:	b29b      	uxth	r3, r3
    3d10:	f8ad 3006 	strh.w	r3, [sp, #6]
	python480Init();
    3d14:	4b25      	ldr	r3, [pc, #148]	; (3dac <main+0x15c>)
    3d16:	4798      	blx	r3
	python480SetGain(1); //getPropFromHeader(HEADER_GAIN_POS));
    3d18:	2001      	movs	r0, #1
    3d1a:	4b25      	ldr	r3, [pc, #148]	; (3db0 <main+0x160>)
    3d1c:	4798      	blx	r3
	python480SetFPS(10); //getPropFromHeader(HEADER_FRAME_RATE_POS));
    3d1e:	200a      	movs	r0, #10
    3d20:	4b24      	ldr	r3, [pc, #144]	; (3db4 <main+0x164>)
    3d22:	4798      	blx	r3
    3d24:	e00a      	b.n	3d3c <main+0xec>
		deviceState |= DEVICE_STATE_ERROR;
    3d26:	4a1d      	ldr	r2, [pc, #116]	; (3d9c <main+0x14c>)
    3d28:	6813      	ldr	r3, [r2, #0]
    3d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3d2e:	6013      	str	r3, [r2, #0]
    3d30:	e7d7      	b.n	3ce2 <main+0x92>
	sd_mmc_wait_end_of_write_blocks(false);
	*/
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING)
			startRecording();
		if (deviceState & DEVICE_STATE_RECORDING) {
    3d32:	4b1a      	ldr	r3, [pc, #104]	; (3d9c <main+0x14c>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	f013 0f08 	tst.w	r3, #8
    3d3a:	d107      	bne.n	3d4c <main+0xfc>
		if (deviceState & DEVICE_STATE_START_RECORDING)
    3d3c:	4b17      	ldr	r3, [pc, #92]	; (3d9c <main+0x14c>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	f013 0f04 	tst.w	r3, #4
    3d44:	d0f5      	beq.n	3d32 <main+0xe2>
			startRecording();
    3d46:	4b1c      	ldr	r3, [pc, #112]	; (3db8 <main+0x168>)
    3d48:	4798      	blx	r3
    3d4a:	e7f2      	b.n	3d32 <main+0xe2>
			recording();
    3d4c:	4b1b      	ldr	r3, [pc, #108]	; (3dbc <main+0x16c>)
    3d4e:	4798      	blx	r3
    3d50:	e7f4      	b.n	3d3c <main+0xec>
    3d52:	bf00      	nop
    3d54:	000002d1 	.word	0x000002d1
    3d58:	41008000 	.word	0x41008000
    3d5c:	0000398d 	.word	0x0000398d
    3d60:	200006c8 	.word	0x200006c8
    3d64:	00000c75 	.word	0x00000c75
    3d68:	20000224 	.word	0x20000224
    3d6c:	00003141 	.word	0x00003141
    3d70:	00003151 	.word	0x00003151
    3d74:	20000738 	.word	0x20000738
    3d78:	00001371 	.word	0x00001371
    3d7c:	00001335 	.word	0x00001335
    3d80:	00003185 	.word	0x00003185
    3d84:	00000e6d 	.word	0x00000e6d
    3d88:	000031e1 	.word	0x000031e1
    3d8c:	000039ad 	.word	0x000039ad
    3d90:	000031b5 	.word	0x000031b5
    3d94:	000047a9 	.word	0x000047a9
    3d98:	00003945 	.word	0x00003945
    3d9c:	20000028 	.word	0x20000028
    3da0:	00000dd5 	.word	0x00000dd5
    3da4:	00000db5 	.word	0x00000db5
    3da8:	00003379 	.word	0x00003379
    3dac:	00003909 	.word	0x00003909
    3db0:	00003305 	.word	0x00003305
    3db4:	00003341 	.word	0x00003341
    3db8:	00003a0d 	.word	0x00003a0d
    3dbc:	00003ab9 	.word	0x00003ab9

00003dc0 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    3dc0:	4b1f      	ldr	r3, [pc, #124]	; (3e40 <sd_decode_csd+0x80>)
    3dc2:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3dc4:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    3dc6:	f001 0007 	and.w	r0, r1, #7
    3dca:	4b1e      	ldr	r3, [pc, #120]	; (3e44 <sd_decode_csd+0x84>)
    3dcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    3dd0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    3dd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3dd8:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    3dda:	fb01 f100 	mul.w	r1, r1, r0
    3dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3de2:	fb03 f301 	mul.w	r3, r3, r1
    3de6:	6013      	str	r3, [r2, #0]
    3de8:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    3dea:	099b      	lsrs	r3, r3, #6
    3dec:	d11a      	bne.n	3e24 <sd_decode_csd+0x64>
    3dee:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3df0:	7d53      	ldrb	r3, [r2, #21]
    3df2:	009b      	lsls	r3, r3, #2
    3df4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3df8:	7d11      	ldrb	r1, [r2, #20]
    3dfa:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    3dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    3e02:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3e04:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3e06:	7dd1      	ldrb	r1, [r2, #23]
    3e08:	0049      	lsls	r1, r1, #1
    3e0a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    3e0e:	f001 0107 	and.w	r1, r1, #7
    3e12:	3102      	adds	r1, #2
		uint32_t blocknr
    3e14:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3e16:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    3e18:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    3e1c:	408b      	lsls	r3, r1
    3e1e:	0a9b      	lsrs	r3, r3, #10
    3e20:	6053      	str	r3, [r2, #4]
    3e22:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3e24:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3e26:	7d91      	ldrb	r1, [r2, #22]
    3e28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3e2c:	7d51      	ldrb	r1, [r2, #21]
    3e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    3e32:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    3e36:	3301      	adds	r3, #1
    3e38:	025b      	lsls	r3, r3, #9
    3e3a:	6053      	str	r3, [r2, #4]
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop
    3e40:	2000065c 	.word	0x2000065c
    3e44:	000051b8 	.word	0x000051b8

00003e48 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3e48:	b510      	push	{r4, lr}
    3e4a:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    3e4c:	4807      	ldr	r0, [pc, #28]	; (3e6c <sd_mmc_configure_slot+0x24>)
    3e4e:	6802      	ldr	r2, [r0, #0]
    3e50:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    3e52:	7b53      	ldrb	r3, [r2, #13]
    3e54:	6812      	ldr	r2, [r2, #0]
    3e56:	7901      	ldrb	r1, [r0, #4]
    3e58:	6880      	ldr	r0, [r0, #8]
    3e5a:	3400      	adds	r4, #0
    3e5c:	bf18      	it	ne
    3e5e:	2401      	movne	r4, #1
    3e60:	9400      	str	r4, [sp, #0]
    3e62:	4c03      	ldr	r4, [pc, #12]	; (3e70 <sd_mmc_configure_slot+0x28>)
    3e64:	47a0      	blx	r4
}
    3e66:	b002      	add	sp, #8
    3e68:	bd10      	pop	{r4, pc}
    3e6a:	bf00      	nop
    3e6c:	2000065c 	.word	0x2000065c
    3e70:	00000f71 	.word	0x00000f71

00003e74 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    3e74:	b108      	cbz	r0, 3e7a <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    3e76:	2004      	movs	r0, #4
    3e78:	4770      	bx	lr
{
    3e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7c:	b083      	sub	sp, #12
    3e7e:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    3e80:	4b45      	ldr	r3, [pc, #276]	; (3f98 <sd_mmc_select_slot+0x124>)
    3e82:	68db      	ldr	r3, [r3, #12]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d050      	beq.n	3f2a <sd_mmc_select_slot+0xb6>
    3e88:	0087      	lsls	r7, r0, #2
    3e8a:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3e8e:	f1b5 3fff 	cmp.w	r5, #4294967295
    3e92:	d04a      	beq.n	3f2a <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    3e94:	b2ed      	uxtb	r5, r5
    3e96:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    3e98:	a801      	add	r0, sp, #4
    3e9a:	4b40      	ldr	r3, [pc, #256]	; (3f9c <sd_mmc_select_slot+0x128>)
    3e9c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3e9e:	4940      	ldr	r1, [pc, #256]	; (3fa0 <sd_mmc_select_slot+0x12c>)
    3ea0:	01f3      	lsls	r3, r6, #7
    3ea2:	18ca      	adds	r2, r1, r3
    3ea4:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3ea6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3ea8:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3eaa:	405e      	eors	r6, r3
    3eac:	400e      	ands	r6, r1
    3eae:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    3eb0:	a801      	add	r0, sp, #4
    3eb2:	4b3c      	ldr	r3, [pc, #240]	; (3fa4 <sd_mmc_select_slot+0x130>)
    3eb4:	4798      	blx	r3
    3eb6:	f005 051f 	and.w	r5, r5, #31
    3eba:	2301      	movs	r3, #1
    3ebc:	fa03 f505 	lsl.w	r5, r3, r5
    3ec0:	4235      	tst	r5, r6
    3ec2:	bf14      	ite	ne
    3ec4:	461a      	movne	r2, r3
    3ec6:	2200      	moveq	r2, #0
    3ec8:	4b33      	ldr	r3, [pc, #204]	; (3f98 <sd_mmc_select_slot+0x124>)
    3eca:	68db      	ldr	r3, [r3, #12]
    3ecc:	441f      	add	r7, r3
    3ece:	887b      	ldrh	r3, [r7, #2]
    3ed0:	429a      	cmp	r2, r3
    3ed2:	d006      	beq.n	3ee2 <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3ed4:	4b30      	ldr	r3, [pc, #192]	; (3f98 <sd_mmc_select_slot+0x124>)
    3ed6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3eda:	2304      	movs	r3, #4
    3edc:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3ede:	2002      	movs	r0, #2
    3ee0:	e047      	b.n	3f72 <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    3ee2:	4b2d      	ldr	r3, [pc, #180]	; (3f98 <sd_mmc_select_slot+0x124>)
    3ee4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3ee8:	7e9b      	ldrb	r3, [r3, #26]
    3eea:	2b04      	cmp	r3, #4
    3eec:	d009      	beq.n	3f02 <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    3eee:	2b01      	cmp	r3, #1
    3ef0:	d00e      	beq.n	3f10 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    3ef2:	4b29      	ldr	r3, [pc, #164]	; (3f98 <sd_mmc_select_slot+0x124>)
    3ef4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3ef8:	7e9b      	ldrb	r3, [r3, #26]
    3efa:	2b03      	cmp	r3, #3
    3efc:	d11d      	bne.n	3f3a <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3efe:	2003      	movs	r0, #3
    3f00:	e037      	b.n	3f72 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    3f02:	4b25      	ldr	r3, [pc, #148]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f04:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3f08:	2301      	movs	r3, #1
    3f0a:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3f0c:	2002      	movs	r0, #2
    3f0e:	e030      	b.n	3f72 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3f10:	4b21      	ldr	r3, [pc, #132]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f12:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f16:	2202      	movs	r2, #2
    3f18:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3f1a:	4a23      	ldr	r2, [pc, #140]	; (3fa8 <sd_mmc_select_slot+0x134>)
    3f1c:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3f1e:	2201      	movs	r2, #1
    3f20:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3f22:	2200      	movs	r2, #0
    3f24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f28:	e7e3      	b.n	3ef2 <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3f2a:	4b1b      	ldr	r3, [pc, #108]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f2c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f30:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    3f32:	3b03      	subs	r3, #3
    3f34:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3f36:	2b01      	cmp	r3, #1
    3f38:	d91d      	bls.n	3f76 <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3f3a:	4b17      	ldr	r3, [pc, #92]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f3c:	791b      	ldrb	r3, [r3, #4]
    3f3e:	429c      	cmp	r4, r3
    3f40:	d026      	beq.n	3f90 <sd_mmc_select_slot+0x11c>
    3f42:	4b15      	ldr	r3, [pc, #84]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f44:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3f46:	bb2b      	cbnz	r3, 3f94 <sd_mmc_select_slot+0x120>
    3f48:	2001      	movs	r0, #1
    3f4a:	f240 422c 	movw	r2, #1068	; 0x42c
    3f4e:	4917      	ldr	r1, [pc, #92]	; (3fac <sd_mmc_select_slot+0x138>)
    3f50:	4b17      	ldr	r3, [pc, #92]	; (3fb0 <sd_mmc_select_slot+0x13c>)
    3f52:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    3f54:	4d10      	ldr	r5, [pc, #64]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f56:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    3f58:	f105 0310 	add.w	r3, r5, #16
    3f5c:	0164      	lsls	r4, r4, #5
    3f5e:	4423      	add	r3, r4
    3f60:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    3f62:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <sd_mmc_select_slot+0x140>)
    3f64:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    3f66:	442c      	add	r4, r5
    3f68:	7ea0      	ldrb	r0, [r4, #26]
    3f6a:	2802      	cmp	r0, #2
    3f6c:	bf14      	ite	ne
    3f6e:	2000      	movne	r0, #0
    3f70:	2001      	moveq	r0, #1
}
    3f72:	b003      	add	sp, #12
    3f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3f76:	4b08      	ldr	r3, [pc, #32]	; (3f98 <sd_mmc_select_slot+0x124>)
    3f78:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f7c:	2202      	movs	r2, #2
    3f7e:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3f80:	4a09      	ldr	r2, [pc, #36]	; (3fa8 <sd_mmc_select_slot+0x134>)
    3f82:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3f84:	2201      	movs	r2, #1
    3f86:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3f88:	2200      	movs	r2, #0
    3f8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f8e:	e7d4      	b.n	3f3a <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3f90:	2001      	movs	r0, #1
    3f92:	e7da      	b.n	3f4a <sd_mmc_select_slot+0xd6>
    3f94:	2000      	movs	r0, #0
    3f96:	e7d8      	b.n	3f4a <sd_mmc_select_slot+0xd6>
    3f98:	2000065c 	.word	0x2000065c
    3f9c:	00000d41 	.word	0x00000d41
    3fa0:	41008000 	.word	0x41008000
    3fa4:	00000d4f 	.word	0x00000d4f
    3fa8:	00061a80 	.word	0x00061a80
    3fac:	00005254 	.word	0x00005254
    3fb0:	00001605 	.word	0x00001605
    3fb4:	00003e49 	.word	0x00003e49

00003fb8 <sd_acmd6>:
{
    3fb8:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    3fba:	4b0e      	ldr	r3, [pc, #56]	; (3ff4 <sd_acmd6+0x3c>)
    3fbc:	681a      	ldr	r2, [r3, #0]
    3fbe:	8912      	ldrh	r2, [r2, #8]
    3fc0:	0412      	lsls	r2, r2, #16
    3fc2:	f241 1137 	movw	r1, #4407	; 0x1137
    3fc6:	6898      	ldr	r0, [r3, #8]
    3fc8:	4b0b      	ldr	r3, [pc, #44]	; (3ff8 <sd_acmd6+0x40>)
    3fca:	4798      	blx	r3
    3fcc:	4603      	mov	r3, r0
    3fce:	b908      	cbnz	r0, 3fd4 <sd_acmd6+0x1c>
}
    3fd0:	4618      	mov	r0, r3
    3fd2:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    3fd4:	2202      	movs	r2, #2
    3fd6:	f241 1106 	movw	r1, #4358	; 0x1106
    3fda:	4b06      	ldr	r3, [pc, #24]	; (3ff4 <sd_acmd6+0x3c>)
    3fdc:	6898      	ldr	r0, [r3, #8]
    3fde:	4b06      	ldr	r3, [pc, #24]	; (3ff8 <sd_acmd6+0x40>)
    3fe0:	4798      	blx	r3
    3fe2:	4603      	mov	r3, r0
    3fe4:	2800      	cmp	r0, #0
    3fe6:	d0f3      	beq.n	3fd0 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    3fe8:	4a02      	ldr	r2, [pc, #8]	; (3ff4 <sd_acmd6+0x3c>)
    3fea:	6812      	ldr	r2, [r2, #0]
    3fec:	2104      	movs	r1, #4
    3fee:	7351      	strb	r1, [r2, #13]
	return true;
    3ff0:	e7ee      	b.n	3fd0 <sd_acmd6+0x18>
    3ff2:	bf00      	nop
    3ff4:	2000065c 	.word	0x2000065c
    3ff8:	00001055 	.word	0x00001055

00003ffc <sdio_cmd52>:
{
    3ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4000:	4680      	mov	r8, r0
    4002:	460f      	mov	r7, r1
    4004:	4615      	mov	r5, r2
    4006:	461e      	mov	r6, r3
    4008:	9c06      	ldr	r4, [sp, #24]
	ASSERT(io_data != NULL);
    400a:	f240 3276 	movw	r2, #886	; 0x376
    400e:	4910      	ldr	r1, [pc, #64]	; (4050 <sdio_cmd52+0x54>)
    4010:	1c20      	adds	r0, r4, #0
    4012:	bf18      	it	ne
    4014:	2001      	movne	r0, #1
    4016:	4b0f      	ldr	r3, [pc, #60]	; (4054 <sdio_cmd52+0x58>)
    4018:	4798      	blx	r3
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    401a:	7822      	ldrb	r2, [r4, #0]
    401c:	ea42 72c8 	orr.w	r2, r2, r8, lsl #31
	                         | ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
    4020:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
	                         | ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
    4024:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
	if (!driver_send_cmd(sd_mmc_hal,
    4028:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
    402c:	f241 3134 	movw	r1, #4916	; 0x1334
    4030:	4b09      	ldr	r3, [pc, #36]	; (4058 <sdio_cmd52+0x5c>)
    4032:	6898      	ldr	r0, [r3, #8]
    4034:	4b09      	ldr	r3, [pc, #36]	; (405c <sdio_cmd52+0x60>)
    4036:	4798      	blx	r3
    4038:	4605      	mov	r5, r0
    403a:	b910      	cbnz	r0, 4042 <sdio_cmd52+0x46>
}
    403c:	4628      	mov	r0, r5
    403e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    4042:	4b05      	ldr	r3, [pc, #20]	; (4058 <sdio_cmd52+0x5c>)
    4044:	6898      	ldr	r0, [r3, #8]
    4046:	4b06      	ldr	r3, [pc, #24]	; (4060 <sdio_cmd52+0x64>)
    4048:	4798      	blx	r3
    404a:	7020      	strb	r0, [r4, #0]
	return true;
    404c:	e7f6      	b.n	403c <sdio_cmd52+0x40>
    404e:	bf00      	nop
    4050:	00005254 	.word	0x00005254
    4054:	00001605 	.word	0x00001605
    4058:	2000065c 	.word	0x2000065c
    405c:	00001055 	.word	0x00001055
    4060:	00001085 	.word	0x00001085

00004064 <sdio_get_max_speed>:
{
    4064:	b5f0      	push	{r4, r5, r6, r7, lr}
    4066:	b087      	sub	sp, #28
	for (i = 0; i < 4; i++) {
    4068:	2400      	movs	r4, #0
	addr_old = SDIO_CCCR_CIS_PTR;
    406a:	2509      	movs	r5, #9
	for (i = 0; i < 4; i++) {
    406c:	e00b      	b.n	4086 <sdio_get_max_speed+0x22>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    406e:	ab03      	add	r3, sp, #12
    4070:	4423      	add	r3, r4
    4072:	9300      	str	r3, [sp, #0]
    4074:	2300      	movs	r3, #0
    4076:	462a      	mov	r2, r5
    4078:	4619      	mov	r1, r3
    407a:	4618      	mov	r0, r3
    407c:	4e35      	ldr	r6, [pc, #212]	; (4154 <sdio_get_max_speed+0xf0>)
    407e:	47b0      	blx	r6
		addr_old++;
    4080:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    4082:	3401      	adds	r4, #1
    4084:	b2e4      	uxtb	r4, r4
    4086:	2c03      	cmp	r4, #3
    4088:	d9f1      	bls.n	406e <sdio_get_max_speed+0xa>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    408a:	f89d 700c 	ldrb.w	r7, [sp, #12]
    408e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4092:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    4096:	f89d 300e 	ldrb.w	r3, [sp, #14]
    409a:	eb07 4703 	add.w	r7, r7, r3, lsl #16
    409e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    40a2:	eb07 6703 	add.w	r7, r7, r3, lsl #24
	addr_new = addr_old;
    40a6:	463d      	mov	r5, r7
    40a8:	e01d      	b.n	40e6 <sdio_get_max_speed+0x82>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    40aa:	ab04      	add	r3, sp, #16
    40ac:	4423      	add	r3, r4
    40ae:	9300      	str	r3, [sp, #0]
    40b0:	2300      	movs	r3, #0
    40b2:	462a      	mov	r2, r5
    40b4:	4619      	mov	r1, r3
    40b6:	4618      	mov	r0, r3
    40b8:	4e26      	ldr	r6, [pc, #152]	; (4154 <sdio_get_max_speed+0xf0>)
    40ba:	47b0      	blx	r6
			addr_new++;
    40bc:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    40be:	3401      	adds	r4, #1
    40c0:	b2e4      	uxtb	r4, r4
    40c2:	2c02      	cmp	r4, #2
    40c4:	d9f1      	bls.n	40aa <sdio_get_max_speed+0x46>
		if (buf[0] == SDIO_CISTPL_END) {
    40c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    40ca:	2bff      	cmp	r3, #255	; 0xff
    40cc:	d03b      	beq.n	4146 <sdio_get_max_speed+0xe2>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    40ce:	2b22      	cmp	r3, #34	; 0x22
    40d0:	d00b      	beq.n	40ea <sdio_get_max_speed+0x86>
		if (buf[1] == 0) {
    40d2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d038      	beq.n	414c <sdio_get_max_speed+0xe8>
		addr_new += buf[1] - 1;
    40da:	441d      	add	r5, r3
    40dc:	3d01      	subs	r5, #1
		if (addr_new > (addr_old + 256)) {
    40de:	f507 7380 	add.w	r3, r7, #256	; 0x100
    40e2:	429d      	cmp	r5, r3
    40e4:	d834      	bhi.n	4150 <sdio_get_max_speed+0xec>
		for (i = 0; i < 3; i++) {
    40e6:	2400      	movs	r4, #0
    40e8:	e7eb      	b.n	40c2 <sdio_get_max_speed+0x5e>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    40ea:	f89d 4012 	ldrb.w	r4, [sp, #18]
    40ee:	2c00      	cmp	r4, #0
    40f0:	d1ef      	bne.n	40d2 <sdio_get_max_speed+0x6e>
	addr_new -= 3;
    40f2:	3d03      	subs	r5, #3
	for (i = 0; i < 6; i++) {
    40f4:	2c05      	cmp	r4, #5
    40f6:	d80c      	bhi.n	4112 <sdio_get_max_speed+0xae>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    40f8:	ab04      	add	r3, sp, #16
    40fa:	4423      	add	r3, r4
    40fc:	9300      	str	r3, [sp, #0]
    40fe:	2300      	movs	r3, #0
    4100:	462a      	mov	r2, r5
    4102:	4619      	mov	r1, r3
    4104:	4618      	mov	r0, r3
    4106:	4e13      	ldr	r6, [pc, #76]	; (4154 <sdio_get_max_speed+0xf0>)
    4108:	47b0      	blx	r6
		addr_new++;
    410a:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    410c:	3401      	adds	r4, #1
    410e:	b2e4      	uxtb	r4, r4
    4110:	e7f0      	b.n	40f4 <sdio_get_max_speed+0x90>
	tplfe_max_tran_speed = buf[5];
    4112:	f89d 3015 	ldrb.w	r3, [sp, #21]
	if (tplfe_max_tran_speed > 0x32) {
    4116:	2b32      	cmp	r3, #50	; 0x32
    4118:	d900      	bls.n	411c <sdio_get_max_speed+0xb8>
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
    411a:	2332      	movs	r3, #50	; 0x32
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    411c:	f003 0107 	and.w	r1, r3, #7
    4120:	4a0d      	ldr	r2, [pc, #52]	; (4158 <sdio_get_max_speed+0xf4>)
    4122:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    4126:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    412a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    412e:	69db      	ldr	r3, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    4130:	4a0a      	ldr	r2, [pc, #40]	; (415c <sdio_get_max_speed+0xf8>)
    4132:	6811      	ldr	r1, [r2, #0]
    4134:	fb03 f200 	mul.w	r2, r3, r0
    4138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    413c:	fb03 f302 	mul.w	r3, r3, r2
    4140:	600b      	str	r3, [r1, #0]
	return true;
    4142:	2001      	movs	r0, #1
    4144:	e000      	b.n	4148 <sdio_get_max_speed+0xe4>
			return false; /* Tuple error */
    4146:	2000      	movs	r0, #0
}
    4148:	b007      	add	sp, #28
    414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false; /* Tuple error */
    414c:	2000      	movs	r0, #0
    414e:	e7fb      	b.n	4148 <sdio_get_max_speed+0xe4>
			return false; /* Outoff CIS area */
    4150:	2000      	movs	r0, #0
    4152:	e7f9      	b.n	4148 <sdio_get_max_speed+0xe4>
    4154:	00003ffd 	.word	0x00003ffd
    4158:	000051b8 	.word	0x000051b8
    415c:	2000065c 	.word	0x2000065c

00004160 <sdio_cmd52_set_bus_width>:
{
    4160:	b510      	push	{r4, lr}
    4162:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    4164:	f10d 030f 	add.w	r3, sp, #15
    4168:	9300      	str	r3, [sp, #0]
    416a:	2300      	movs	r3, #0
    416c:	2208      	movs	r2, #8
    416e:	4619      	mov	r1, r3
    4170:	4618      	mov	r0, r3
    4172:	4c0e      	ldr	r4, [pc, #56]	; (41ac <sdio_cmd52_set_bus_width+0x4c>)
    4174:	47a0      	blx	r4
    4176:	4603      	mov	r3, r0
    4178:	b118      	cbz	r0, 4182 <sdio_cmd52_set_bus_width+0x22>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    417a:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    417e:	2a00      	cmp	r2, #0
    4180:	db02      	blt.n	4188 <sdio_cmd52_set_bus_width+0x28>
}
    4182:	4618      	mov	r0, r3
    4184:	b004      	add	sp, #16
    4186:	bd10      	pop	{r4, pc}
	u8_value = SDIO_BUSWIDTH_4B;
    4188:	ab04      	add	r3, sp, #16
    418a:	2202      	movs	r2, #2
    418c:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    4190:	9300      	str	r3, [sp, #0]
    4192:	2301      	movs	r3, #1
    4194:	2207      	movs	r2, #7
    4196:	2100      	movs	r1, #0
    4198:	4618      	mov	r0, r3
    419a:	47a0      	blx	r4
    419c:	4603      	mov	r3, r0
    419e:	2800      	cmp	r0, #0
    41a0:	d0ef      	beq.n	4182 <sdio_cmd52_set_bus_width+0x22>
	sd_mmc_card->bus_width = 4;
    41a2:	4a03      	ldr	r2, [pc, #12]	; (41b0 <sdio_cmd52_set_bus_width+0x50>)
    41a4:	6812      	ldr	r2, [r2, #0]
    41a6:	2104      	movs	r1, #4
    41a8:	7351      	strb	r1, [r2, #13]
	return true;
    41aa:	e7ea      	b.n	4182 <sdio_cmd52_set_bus_width+0x22>
    41ac:	00003ffd 	.word	0x00003ffd
    41b0:	2000065c 	.word	0x2000065c

000041b4 <sdio_cmd52_set_high_speed>:
{
    41b4:	b510      	push	{r4, lr}
    41b6:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    41b8:	f10d 030f 	add.w	r3, sp, #15
    41bc:	9300      	str	r3, [sp, #0]
    41be:	2300      	movs	r3, #0
    41c0:	2213      	movs	r2, #19
    41c2:	4619      	mov	r1, r3
    41c4:	4618      	mov	r0, r3
    41c6:	4c0f      	ldr	r4, [pc, #60]	; (4204 <sdio_cmd52_set_high_speed+0x50>)
    41c8:	47a0      	blx	r4
    41ca:	4601      	mov	r1, r0
    41cc:	b1b8      	cbz	r0, 41fe <sdio_cmd52_set_high_speed+0x4a>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    41ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    41d2:	f013 0f01 	tst.w	r3, #1
    41d6:	d012      	beq.n	41fe <sdio_cmd52_set_high_speed+0x4a>
	u8_value = SDIO_EHS;
    41d8:	ab04      	add	r3, sp, #16
    41da:	2202      	movs	r2, #2
    41dc:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    41e0:	9300      	str	r3, [sp, #0]
    41e2:	2301      	movs	r3, #1
    41e4:	2213      	movs	r2, #19
    41e6:	2100      	movs	r1, #0
    41e8:	4618      	mov	r0, r3
    41ea:	47a0      	blx	r4
    41ec:	4601      	mov	r1, r0
    41ee:	b130      	cbz	r0, 41fe <sdio_cmd52_set_high_speed+0x4a>
	sd_mmc_card->high_speed = 1;
    41f0:	4b05      	ldr	r3, [pc, #20]	; (4208 <sdio_cmd52_set_high_speed+0x54>)
    41f2:	681b      	ldr	r3, [r3, #0]
    41f4:	2201      	movs	r2, #1
    41f6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    41f8:	681a      	ldr	r2, [r3, #0]
    41fa:	0052      	lsls	r2, r2, #1
    41fc:	601a      	str	r2, [r3, #0]
}
    41fe:	4608      	mov	r0, r1
    4200:	b004      	add	sp, #16
    4202:	bd10      	pop	{r4, pc}
    4204:	00003ffd 	.word	0x00003ffd
    4208:	2000065c 	.word	0x2000065c

0000420c <sd_cmd8>:
{
    420c:	b538      	push	{r3, r4, r5, lr}
    420e:	4605      	mov	r5, r0
	*v2 = 0;
    4210:	2300      	movs	r3, #0
    4212:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4214:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    4218:	f245 5108 	movw	r1, #21768	; 0x5508
    421c:	4b0c      	ldr	r3, [pc, #48]	; (4250 <sd_cmd8+0x44>)
    421e:	6898      	ldr	r0, [r3, #8]
    4220:	4b0c      	ldr	r3, [pc, #48]	; (4254 <sd_cmd8+0x48>)
    4222:	4798      	blx	r3
    4224:	b910      	cbnz	r0, 422c <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    4226:	2401      	movs	r4, #1
}
    4228:	4620      	mov	r0, r4
    422a:	bd38      	pop	{r3, r4, r5, pc}
    422c:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    422e:	4b08      	ldr	r3, [pc, #32]	; (4250 <sd_cmd8+0x44>)
    4230:	6898      	ldr	r0, [r3, #8]
    4232:	4b09      	ldr	r3, [pc, #36]	; (4258 <sd_cmd8+0x4c>)
    4234:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    4236:	f1b0 3fff 	cmp.w	r0, #4294967295
    423a:	d0f5      	beq.n	4228 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    423c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    4240:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    4244:	d001      	beq.n	424a <sd_cmd8+0x3e>
		return false;
    4246:	2400      	movs	r4, #0
    4248:	e7ee      	b.n	4228 <sd_cmd8+0x1c>
	*v2 = 1;
    424a:	2301      	movs	r3, #1
    424c:	702b      	strb	r3, [r5, #0]
	return true;
    424e:	e7eb      	b.n	4228 <sd_cmd8+0x1c>
    4250:	2000065c 	.word	0x2000065c
    4254:	00001055 	.word	0x00001055
    4258:	00001085 	.word	0x00001085

0000425c <sdio_op_cond>:
{
    425c:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    425e:	2200      	movs	r2, #0
    4260:	f244 5105 	movw	r1, #17669	; 0x4505
    4264:	4b1a      	ldr	r3, [pc, #104]	; (42d0 <sdio_op_cond+0x74>)
    4266:	6898      	ldr	r0, [r3, #8]
    4268:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <sdio_op_cond+0x78>)
    426a:	4798      	blx	r3
    426c:	b910      	cbnz	r0, 4274 <sdio_op_cond+0x18>
		return true; /* No error but card type not updated */
    426e:	2501      	movs	r5, #1
}
    4270:	4628      	mov	r0, r5
    4272:	bd38      	pop	{r3, r4, r5, pc}
    4274:	4605      	mov	r5, r0
	resp = driver_get_response(sd_mmc_hal);
    4276:	4b16      	ldr	r3, [pc, #88]	; (42d0 <sdio_op_cond+0x74>)
    4278:	6898      	ldr	r0, [r3, #8]
    427a:	4b17      	ldr	r3, [pc, #92]	; (42d8 <sdio_op_cond+0x7c>)
    427c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    427e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    4282:	d0f5      	beq.n	4270 <sdio_op_cond+0x14>
    4284:	f241 3488 	movw	r4, #5000	; 0x1388
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    4288:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    428c:	f244 5105 	movw	r1, #17669	; 0x4505
    4290:	4b0f      	ldr	r3, [pc, #60]	; (42d0 <sdio_op_cond+0x74>)
    4292:	6898      	ldr	r0, [r3, #8]
    4294:	4b0f      	ldr	r3, [pc, #60]	; (42d4 <sdio_op_cond+0x78>)
    4296:	4798      	blx	r3
    4298:	4605      	mov	r5, r0
    429a:	2800      	cmp	r0, #0
    429c:	d0e8      	beq.n	4270 <sdio_op_cond+0x14>
		resp = driver_get_response(sd_mmc_hal);
    429e:	4b0c      	ldr	r3, [pc, #48]	; (42d0 <sdio_op_cond+0x74>)
    42a0:	6898      	ldr	r0, [r3, #8]
    42a2:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <sdio_op_cond+0x7c>)
    42a4:	4798      	blx	r3
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    42a6:	2800      	cmp	r0, #0
    42a8:	db03      	blt.n	42b2 <sdio_op_cond+0x56>
		if (cmd5_retry-- == 0) {
    42aa:	1e63      	subs	r3, r4, #1
    42ac:	b174      	cbz	r4, 42cc <sdio_op_cond+0x70>
    42ae:	461c      	mov	r4, r3
    42b0:	e7ea      	b.n	4288 <sdio_op_cond+0x2c>
	if ((resp & OCR_SDIO_MP) > 0) {
    42b2:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    42b6:	d104      	bne.n	42c2 <sdio_op_cond+0x66>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    42b8:	4b05      	ldr	r3, [pc, #20]	; (42d0 <sdio_op_cond+0x74>)
    42ba:	681b      	ldr	r3, [r3, #0]
    42bc:	2204      	movs	r2, #4
    42be:	72da      	strb	r2, [r3, #11]
    42c0:	e7d6      	b.n	4270 <sdio_op_cond+0x14>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    42c2:	4b03      	ldr	r3, [pc, #12]	; (42d0 <sdio_op_cond+0x74>)
    42c4:	681b      	ldr	r3, [r3, #0]
    42c6:	2205      	movs	r2, #5
    42c8:	72da      	strb	r2, [r3, #11]
    42ca:	e7d1      	b.n	4270 <sdio_op_cond+0x14>
			return false;
    42cc:	2500      	movs	r5, #0
    42ce:	e7cf      	b.n	4270 <sdio_op_cond+0x14>
    42d0:	2000065c 	.word	0x2000065c
    42d4:	00001055 	.word	0x00001055
    42d8:	00001085 	.word	0x00001085

000042dc <sd_mci_op_cond>:
{
    42dc:	b570      	push	{r4, r5, r6, lr}
    42de:	4606      	mov	r6, r0
	retry = 2100;
    42e0:	f640 0434 	movw	r4, #2100	; 0x834
    42e4:	e011      	b.n	430a <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    42e6:	4a16      	ldr	r2, [pc, #88]	; (4340 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    42e8:	f244 5129 	movw	r1, #17705	; 0x4529
    42ec:	4b15      	ldr	r3, [pc, #84]	; (4344 <sd_mci_op_cond+0x68>)
    42ee:	6898      	ldr	r0, [r3, #8]
    42f0:	4b15      	ldr	r3, [pc, #84]	; (4348 <sd_mci_op_cond+0x6c>)
    42f2:	4798      	blx	r3
    42f4:	4605      	mov	r5, r0
    42f6:	b1f8      	cbz	r0, 4338 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    42f8:	4b12      	ldr	r3, [pc, #72]	; (4344 <sd_mci_op_cond+0x68>)
    42fa:	6898      	ldr	r0, [r3, #8]
    42fc:	4b13      	ldr	r3, [pc, #76]	; (434c <sd_mci_op_cond+0x70>)
    42fe:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    4300:	2800      	cmp	r0, #0
    4302:	db10      	blt.n	4326 <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    4304:	1e63      	subs	r3, r4, #1
    4306:	b1cc      	cbz	r4, 433c <sd_mci_op_cond+0x60>
    4308:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    430a:	2200      	movs	r2, #0
    430c:	f241 1137 	movw	r1, #4407	; 0x1137
    4310:	4b0c      	ldr	r3, [pc, #48]	; (4344 <sd_mci_op_cond+0x68>)
    4312:	6898      	ldr	r0, [r3, #8]
    4314:	4b0c      	ldr	r3, [pc, #48]	; (4348 <sd_mci_op_cond+0x6c>)
    4316:	4798      	blx	r3
    4318:	4605      	mov	r5, r0
    431a:	b168      	cbz	r0, 4338 <sd_mci_op_cond+0x5c>
		if (v2) {
    431c:	2e00      	cmp	r6, #0
    431e:	d1e2      	bne.n	42e6 <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    4320:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    4324:	e7e0      	b.n	42e8 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    4326:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    432a:	d005      	beq.n	4338 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    432c:	4b05      	ldr	r3, [pc, #20]	; (4344 <sd_mci_op_cond+0x68>)
    432e:	681a      	ldr	r2, [r3, #0]
    4330:	7ad3      	ldrb	r3, [r2, #11]
    4332:	f043 0308 	orr.w	r3, r3, #8
    4336:	72d3      	strb	r3, [r2, #11]
}
    4338:	4628      	mov	r0, r5
    433a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    433c:	2500      	movs	r5, #0
    433e:	e7fb      	b.n	4338 <sd_mci_op_cond+0x5c>
    4340:	401f8000 	.word	0x401f8000
    4344:	2000065c 	.word	0x2000065c
    4348:	00001055 	.word	0x00001055
    434c:	00001085 	.word	0x00001085

00004350 <sd_mmc_cmd13>:
{
    4350:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    4352:	4c0d      	ldr	r4, [pc, #52]	; (4388 <sd_mmc_cmd13+0x38>)
    4354:	e000      	b.n	4358 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    4356:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    4358:	4b0c      	ldr	r3, [pc, #48]	; (438c <sd_mmc_cmd13+0x3c>)
    435a:	681a      	ldr	r2, [r3, #0]
    435c:	8912      	ldrh	r2, [r2, #8]
    435e:	0412      	lsls	r2, r2, #16
    4360:	f241 110d 	movw	r1, #4365	; 0x110d
    4364:	6898      	ldr	r0, [r3, #8]
    4366:	4b0a      	ldr	r3, [pc, #40]	; (4390 <sd_mmc_cmd13+0x40>)
    4368:	4798      	blx	r3
    436a:	4605      	mov	r5, r0
    436c:	b150      	cbz	r0, 4384 <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    436e:	4b07      	ldr	r3, [pc, #28]	; (438c <sd_mmc_cmd13+0x3c>)
    4370:	6898      	ldr	r0, [r3, #8]
    4372:	4b08      	ldr	r3, [pc, #32]	; (4394 <sd_mmc_cmd13+0x44>)
    4374:	4798      	blx	r3
    4376:	f410 7f80 	tst.w	r0, #256	; 0x100
    437a:	d103      	bne.n	4384 <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    437c:	1e63      	subs	r3, r4, #1
    437e:	2c00      	cmp	r4, #0
    4380:	d1e9      	bne.n	4356 <sd_mmc_cmd13+0x6>
			return false;
    4382:	2500      	movs	r5, #0
}
    4384:	4628      	mov	r0, r5
    4386:	bd38      	pop	{r3, r4, r5, pc}
    4388:	00030d40 	.word	0x00030d40
    438c:	2000065c 	.word	0x2000065c
    4390:	00001055 	.word	0x00001055
    4394:	00001085 	.word	0x00001085

00004398 <sd_mmc_cmd9_mci>:
{
    4398:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    439a:	4b0a      	ldr	r3, [pc, #40]	; (43c4 <sd_mmc_cmd9_mci+0x2c>)
    439c:	681a      	ldr	r2, [r3, #0]
    439e:	8912      	ldrh	r2, [r2, #8]
    43a0:	0412      	lsls	r2, r2, #16
    43a2:	f641 3109 	movw	r1, #6921	; 0x1b09
    43a6:	6898      	ldr	r0, [r3, #8]
    43a8:	4b07      	ldr	r3, [pc, #28]	; (43c8 <sd_mmc_cmd9_mci+0x30>)
    43aa:	4798      	blx	r3
    43ac:	4604      	mov	r4, r0
    43ae:	b908      	cbnz	r0, 43b4 <sd_mmc_cmd9_mci+0x1c>
}
    43b0:	4620      	mov	r0, r4
    43b2:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    43b4:	4b03      	ldr	r3, [pc, #12]	; (43c4 <sd_mmc_cmd9_mci+0x2c>)
    43b6:	6819      	ldr	r1, [r3, #0]
    43b8:	310e      	adds	r1, #14
    43ba:	6898      	ldr	r0, [r3, #8]
    43bc:	4b03      	ldr	r3, [pc, #12]	; (43cc <sd_mmc_cmd9_mci+0x34>)
    43be:	4798      	blx	r3
	return true;
    43c0:	e7f6      	b.n	43b0 <sd_mmc_cmd9_mci+0x18>
    43c2:	bf00      	nop
    43c4:	2000065c 	.word	0x2000065c
    43c8:	00001055 	.word	0x00001055
    43cc:	000010ad 	.word	0x000010ad

000043d0 <sd_acmd51>:
{
    43d0:	b510      	push	{r4, lr}
    43d2:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    43d4:	4b28      	ldr	r3, [pc, #160]	; (4478 <sd_acmd51+0xa8>)
    43d6:	681a      	ldr	r2, [r3, #0]
    43d8:	8912      	ldrh	r2, [r2, #8]
    43da:	0412      	lsls	r2, r2, #16
    43dc:	f241 1137 	movw	r1, #4407	; 0x1137
    43e0:	6898      	ldr	r0, [r3, #8]
    43e2:	4b26      	ldr	r3, [pc, #152]	; (447c <sd_acmd51+0xac>)
    43e4:	4798      	blx	r3
    43e6:	4603      	mov	r3, r0
    43e8:	b910      	cbnz	r0, 43f0 <sd_acmd51+0x20>
}
    43ea:	4618      	mov	r0, r3
    43ec:	b004      	add	sp, #16
    43ee:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    43f0:	4b21      	ldr	r3, [pc, #132]	; (4478 <sd_acmd51+0xa8>)
    43f2:	6898      	ldr	r0, [r3, #8]
    43f4:	2301      	movs	r3, #1
    43f6:	9301      	str	r3, [sp, #4]
    43f8:	9300      	str	r3, [sp, #0]
    43fa:	2308      	movs	r3, #8
    43fc:	2200      	movs	r2, #0
    43fe:	4920      	ldr	r1, [pc, #128]	; (4480 <sd_acmd51+0xb0>)
    4400:	4c20      	ldr	r4, [pc, #128]	; (4484 <sd_acmd51+0xb4>)
    4402:	47a0      	blx	r4
    4404:	4603      	mov	r3, r0
    4406:	2800      	cmp	r0, #0
    4408:	d0ef      	beq.n	43ea <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    440a:	2201      	movs	r2, #1
    440c:	a902      	add	r1, sp, #8
    440e:	4b1a      	ldr	r3, [pc, #104]	; (4478 <sd_acmd51+0xa8>)
    4410:	6898      	ldr	r0, [r3, #8]
    4412:	4b1d      	ldr	r3, [pc, #116]	; (4488 <sd_acmd51+0xb8>)
    4414:	4798      	blx	r3
    4416:	4603      	mov	r3, r0
    4418:	2800      	cmp	r0, #0
    441a:	d0e6      	beq.n	43ea <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    441c:	4b16      	ldr	r3, [pc, #88]	; (4478 <sd_acmd51+0xa8>)
    441e:	6898      	ldr	r0, [r3, #8]
    4420:	4b1a      	ldr	r3, [pc, #104]	; (448c <sd_acmd51+0xbc>)
    4422:	4798      	blx	r3
    4424:	4603      	mov	r3, r0
    4426:	2800      	cmp	r0, #0
    4428:	d0df      	beq.n	43ea <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    442a:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    442e:	f002 020f 	and.w	r2, r2, #15
    4432:	2a01      	cmp	r2, #1
    4434:	d00c      	beq.n	4450 <sd_acmd51+0x80>
    4436:	b132      	cbz	r2, 4446 <sd_acmd51+0x76>
    4438:	2a02      	cmp	r2, #2
    443a:	d00e      	beq.n	445a <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    443c:	4a0e      	ldr	r2, [pc, #56]	; (4478 <sd_acmd51+0xa8>)
    443e:	6812      	ldr	r2, [r2, #0]
    4440:	2110      	movs	r1, #16
    4442:	7311      	strb	r1, [r2, #12]
		break;
    4444:	e7d1      	b.n	43ea <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4446:	4a0c      	ldr	r2, [pc, #48]	; (4478 <sd_acmd51+0xa8>)
    4448:	6812      	ldr	r2, [r2, #0]
    444a:	2110      	movs	r1, #16
    444c:	7311      	strb	r1, [r2, #12]
		break;
    444e:	e7cc      	b.n	43ea <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    4450:	4a09      	ldr	r2, [pc, #36]	; (4478 <sd_acmd51+0xa8>)
    4452:	6812      	ldr	r2, [r2, #0]
    4454:	211a      	movs	r1, #26
    4456:	7311      	strb	r1, [r2, #12]
		break;
    4458:	e7c7      	b.n	43ea <sd_acmd51+0x1a>
    445a:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    445e:	09d2      	lsrs	r2, r2, #7
    4460:	d104      	bne.n	446c <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    4462:	4a05      	ldr	r2, [pc, #20]	; (4478 <sd_acmd51+0xa8>)
    4464:	6812      	ldr	r2, [r2, #0]
    4466:	2120      	movs	r1, #32
    4468:	7311      	strb	r1, [r2, #12]
    446a:	e7be      	b.n	43ea <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    446c:	4a02      	ldr	r2, [pc, #8]	; (4478 <sd_acmd51+0xa8>)
    446e:	6812      	ldr	r2, [r2, #0]
    4470:	2130      	movs	r1, #48	; 0x30
    4472:	7311      	strb	r1, [r2, #12]
    4474:	e7b9      	b.n	43ea <sd_acmd51+0x1a>
    4476:	bf00      	nop
    4478:	2000065c 	.word	0x2000065c
    447c:	00001055 	.word	0x00001055
    4480:	00081133 	.word	0x00081133
    4484:	000010e1 	.word	0x000010e1
    4488:	00001125 	.word	0x00001125
    448c:	00001195 	.word	0x00001195

00004490 <sd_cm6_set_high_speed>:
{
    4490:	b530      	push	{r4, r5, lr}
    4492:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    4494:	2440      	movs	r4, #64	; 0x40
    4496:	4622      	mov	r2, r4
    4498:	2100      	movs	r1, #0
    449a:	a802      	add	r0, sp, #8
    449c:	4b20      	ldr	r3, [pc, #128]	; (4520 <sd_cm6_set_high_speed+0x90>)
    449e:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    44a0:	2301      	movs	r3, #1
    44a2:	9301      	str	r3, [sp, #4]
    44a4:	9300      	str	r3, [sp, #0]
    44a6:	4623      	mov	r3, r4
    44a8:	4a1e      	ldr	r2, [pc, #120]	; (4524 <sd_cm6_set_high_speed+0x94>)
    44aa:	491f      	ldr	r1, [pc, #124]	; (4528 <sd_cm6_set_high_speed+0x98>)
    44ac:	481f      	ldr	r0, [pc, #124]	; (452c <sd_cm6_set_high_speed+0x9c>)
    44ae:	6880      	ldr	r0, [r0, #8]
    44b0:	4c1f      	ldr	r4, [pc, #124]	; (4530 <sd_cm6_set_high_speed+0xa0>)
    44b2:	47a0      	blx	r4
    44b4:	4604      	mov	r4, r0
    44b6:	b358      	cbz	r0, 4510 <sd_cm6_set_high_speed+0x80>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    44b8:	2201      	movs	r2, #1
    44ba:	a902      	add	r1, sp, #8
    44bc:	4b1b      	ldr	r3, [pc, #108]	; (452c <sd_cm6_set_high_speed+0x9c>)
    44be:	6898      	ldr	r0, [r3, #8]
    44c0:	4b1c      	ldr	r3, [pc, #112]	; (4534 <sd_cm6_set_high_speed+0xa4>)
    44c2:	4798      	blx	r3
    44c4:	4604      	mov	r4, r0
    44c6:	b318      	cbz	r0, 4510 <sd_cm6_set_high_speed+0x80>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    44c8:	4b18      	ldr	r3, [pc, #96]	; (452c <sd_cm6_set_high_speed+0x9c>)
    44ca:	6898      	ldr	r0, [r3, #8]
    44cc:	4b1a      	ldr	r3, [pc, #104]	; (4538 <sd_cm6_set_high_speed+0xa8>)
    44ce:	4798      	blx	r3
    44d0:	4604      	mov	r4, r0
    44d2:	b1e8      	cbz	r0, 4510 <sd_cm6_set_high_speed+0x80>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    44d4:	4b15      	ldr	r3, [pc, #84]	; (452c <sd_cm6_set_high_speed+0x9c>)
    44d6:	6898      	ldr	r0, [r3, #8]
    44d8:	4b18      	ldr	r3, [pc, #96]	; (453c <sd_cm6_set_high_speed+0xac>)
    44da:	4798      	blx	r3
    44dc:	f010 0f80 	tst.w	r0, #128	; 0x80
    44e0:	d119      	bne.n	4516 <sd_cm6_set_high_speed+0x86>
    44e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    44e6:	f003 030f 	and.w	r3, r3, #15
    44ea:	2b0f      	cmp	r3, #15
    44ec:	d010      	beq.n	4510 <sd_cm6_set_high_speed+0x80>
    44ee:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    44f2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    44f6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    44fa:	d10e      	bne.n	451a <sd_cm6_set_high_speed+0x8a>
	driver_send_clock(sd_mmc_hal);
    44fc:	4d0b      	ldr	r5, [pc, #44]	; (452c <sd_cm6_set_high_speed+0x9c>)
    44fe:	68a8      	ldr	r0, [r5, #8]
    4500:	4b0f      	ldr	r3, [pc, #60]	; (4540 <sd_cm6_set_high_speed+0xb0>)
    4502:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    4504:	682b      	ldr	r3, [r5, #0]
    4506:	2201      	movs	r2, #1
    4508:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    450a:	681a      	ldr	r2, [r3, #0]
    450c:	0052      	lsls	r2, r2, #1
    450e:	601a      	str	r2, [r3, #0]
}
    4510:	4620      	mov	r0, r4
    4512:	b013      	add	sp, #76	; 0x4c
    4514:	bd30      	pop	{r4, r5, pc}
		return false;
    4516:	2400      	movs	r4, #0
    4518:	e7fa      	b.n	4510 <sd_cm6_set_high_speed+0x80>
		return false;
    451a:	2400      	movs	r4, #0
    451c:	e7f8      	b.n	4510 <sd_cm6_set_high_speed+0x80>
    451e:	bf00      	nop
    4520:	00004e89 	.word	0x00004e89
    4524:	80ffff01 	.word	0x80ffff01
    4528:	00081106 	.word	0x00081106
    452c:	2000065c 	.word	0x2000065c
    4530:	000010e1 	.word	0x000010e1
    4534:	00001125 	.word	0x00001125
    4538:	00001195 	.word	0x00001195
    453c:	00001085 	.word	0x00001085
    4540:	0000102d 	.word	0x0000102d

00004544 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    4544:	b5f0      	push	{r4, r5, r6, r7, lr}
    4546:	b085      	sub	sp, #20
	uint8_t v2 = 0;
    4548:	2400      	movs	r4, #0
    454a:	f88d 400f 	strb.w	r4, [sp, #15]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
    454e:	ae04      	add	r6, sp, #16
    4550:	2308      	movs	r3, #8
    4552:	f806 3d02 	strb.w	r3, [r6, #-2]!
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    4556:	4d6f      	ldr	r5, [pc, #444]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4558:	682b      	ldr	r3, [r5, #0]
    455a:	2701      	movs	r7, #1
    455c:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    455e:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    4560:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    4562:	68a8      	ldr	r0, [r5, #8]
    4564:	4b6c      	ldr	r3, [pc, #432]	; (4718 <sd_mmc_mci_card_init+0x1d4>)
    4566:	4798      	blx	r3

#if (CONF_SDIO_SUPPORT == 1)
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    4568:	9600      	str	r6, [sp, #0]
    456a:	4623      	mov	r3, r4
    456c:	2206      	movs	r2, #6
    456e:	4621      	mov	r1, r4
    4570:	4638      	mov	r0, r7
    4572:	4e6a      	ldr	r6, [pc, #424]	; (471c <sd_mmc_mci_card_init+0x1d8>)
    4574:	47b0      	blx	r6
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    4576:	4622      	mov	r2, r4
    4578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    457c:	68a8      	ldr	r0, [r5, #8]
    457e:	4b68      	ldr	r3, [pc, #416]	; (4720 <sd_mmc_mci_card_init+0x1dc>)
    4580:	4798      	blx	r3
    4582:	4604      	mov	r4, r0
    4584:	b910      	cbnz	r0, 458c <sd_mmc_mci_card_init+0x48>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    4586:	4620      	mov	r0, r4
    4588:	b005      	add	sp, #20
    458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_cmd8(&v2)) {
    458c:	f10d 000f 	add.w	r0, sp, #15
    4590:	4b64      	ldr	r3, [pc, #400]	; (4724 <sd_mmc_mci_card_init+0x1e0>)
    4592:	4798      	blx	r3
    4594:	4604      	mov	r4, r0
    4596:	2800      	cmp	r0, #0
    4598:	d0f5      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
	if (!sdio_op_cond()) {
    459a:	4b63      	ldr	r3, [pc, #396]	; (4728 <sd_mmc_mci_card_init+0x1e4>)
    459c:	4798      	blx	r3
    459e:	4604      	mov	r4, r0
    45a0:	2800      	cmp	r0, #0
    45a2:	d0f0      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    45a4:	682b      	ldr	r3, [r5, #0]
    45a6:	7adb      	ldrb	r3, [r3, #11]
    45a8:	f013 0f01 	tst.w	r3, #1
    45ac:	f040 8089 	bne.w	46c2 <sd_mmc_mci_card_init+0x17e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    45b0:	4b58      	ldr	r3, [pc, #352]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	7adb      	ldrb	r3, [r3, #11]
    45b6:	f013 0f01 	tst.w	r3, #1
    45ba:	d009      	beq.n	45d0 <sd_mmc_mci_card_init+0x8c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    45bc:	2200      	movs	r2, #0
    45be:	f645 3102 	movw	r1, #23298	; 0x5b02
    45c2:	4b54      	ldr	r3, [pc, #336]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    45c4:	6898      	ldr	r0, [r3, #8]
    45c6:	4b56      	ldr	r3, [pc, #344]	; (4720 <sd_mmc_mci_card_init+0x1dc>)
    45c8:	4798      	blx	r3
    45ca:	4604      	mov	r4, r0
    45cc:	2800      	cmp	r0, #0
    45ce:	d0da      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    45d0:	2200      	movs	r2, #0
    45d2:	f245 1103 	movw	r1, #20739	; 0x5103
    45d6:	4b4f      	ldr	r3, [pc, #316]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    45d8:	6898      	ldr	r0, [r3, #8]
    45da:	4b51      	ldr	r3, [pc, #324]	; (4720 <sd_mmc_mci_card_init+0x1dc>)
    45dc:	4798      	blx	r3
    45de:	4604      	mov	r4, r0
    45e0:	2800      	cmp	r0, #0
    45e2:	d0d0      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    45e4:	4c4b      	ldr	r4, [pc, #300]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    45e6:	6825      	ldr	r5, [r4, #0]
    45e8:	68a0      	ldr	r0, [r4, #8]
    45ea:	4b50      	ldr	r3, [pc, #320]	; (472c <sd_mmc_mci_card_init+0x1e8>)
    45ec:	4798      	blx	r3
    45ee:	0c00      	lsrs	r0, r0, #16
    45f0:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    45f2:	6823      	ldr	r3, [r4, #0]
    45f4:	7adb      	ldrb	r3, [r3, #11]
    45f6:	f013 0f01 	tst.w	r3, #1
    45fa:	d006      	beq.n	460a <sd_mmc_mci_card_init+0xc6>
		if (!sd_mmc_cmd9_mci()) {
    45fc:	4b4c      	ldr	r3, [pc, #304]	; (4730 <sd_mmc_mci_card_init+0x1ec>)
    45fe:	4798      	blx	r3
    4600:	4604      	mov	r4, r0
    4602:	2800      	cmp	r0, #0
    4604:	d0bf      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
		sd_decode_csd();
    4606:	4b4b      	ldr	r3, [pc, #300]	; (4734 <sd_mmc_mci_card_init+0x1f0>)
    4608:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    460a:	4b42      	ldr	r3, [pc, #264]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    460c:	681a      	ldr	r2, [r3, #0]
    460e:	8912      	ldrh	r2, [r2, #8]
    4610:	0412      	lsls	r2, r2, #16
    4612:	f243 1107 	movw	r1, #12551	; 0x3107
    4616:	6898      	ldr	r0, [r3, #8]
    4618:	4b41      	ldr	r3, [pc, #260]	; (4720 <sd_mmc_mci_card_init+0x1dc>)
    461a:	4798      	blx	r3
    461c:	4604      	mov	r4, r0
    461e:	2800      	cmp	r0, #0
    4620:	d0b1      	beq.n	4586 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4622:	4b3c      	ldr	r3, [pc, #240]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	7adb      	ldrb	r3, [r3, #11]
    4628:	f013 0f01 	tst.w	r3, #1
    462c:	d155      	bne.n	46da <sd_mmc_mci_card_init+0x196>
	if (IS_SDIO()) {
    462e:	4b39      	ldr	r3, [pc, #228]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	7adb      	ldrb	r3, [r3, #11]
    4634:	f013 0f04 	tst.w	r3, #4
    4638:	d003      	beq.n	4642 <sd_mmc_mci_card_init+0xfe>
		if (!sdio_get_max_speed()) {
    463a:	4b3f      	ldr	r3, [pc, #252]	; (4738 <sd_mmc_mci_card_init+0x1f4>)
    463c:	4798      	blx	r3
    463e:	2800      	cmp	r0, #0
    4640:	d063      	beq.n	470a <sd_mmc_mci_card_init+0x1c6>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4642:	4b34      	ldr	r3, [pc, #208]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4644:	7919      	ldrb	r1, [r3, #4]
    4646:	6898      	ldr	r0, [r3, #8]
    4648:	4b3c      	ldr	r3, [pc, #240]	; (473c <sd_mmc_mci_card_init+0x1f8>)
    464a:	4798      	blx	r3
    464c:	2803      	cmp	r0, #3
    464e:	d911      	bls.n	4674 <sd_mmc_mci_card_init+0x130>
		if (IS_SDIO()) {
    4650:	4b30      	ldr	r3, [pc, #192]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4652:	681b      	ldr	r3, [r3, #0]
    4654:	7adb      	ldrb	r3, [r3, #11]
    4656:	f013 0f04 	tst.w	r3, #4
    465a:	d144      	bne.n	46e6 <sd_mmc_mci_card_init+0x1a2>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    465c:	4b2d      	ldr	r3, [pc, #180]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	7adb      	ldrb	r3, [r3, #11]
    4662:	f013 0f01 	tst.w	r3, #1
    4666:	d003      	beq.n	4670 <sd_mmc_mci_card_init+0x12c>
			if (!sd_acmd6()) {
    4668:	4b35      	ldr	r3, [pc, #212]	; (4740 <sd_mmc_mci_card_init+0x1fc>)
    466a:	4798      	blx	r3
    466c:	2800      	cmp	r0, #0
    466e:	d04e      	beq.n	470e <sd_mmc_mci_card_init+0x1ca>
		sd_mmc_configure_slot();
    4670:	4b34      	ldr	r3, [pc, #208]	; (4744 <sd_mmc_mci_card_init+0x200>)
    4672:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    4674:	4b27      	ldr	r3, [pc, #156]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4676:	6898      	ldr	r0, [r3, #8]
    4678:	4b33      	ldr	r3, [pc, #204]	; (4748 <sd_mmc_mci_card_init+0x204>)
    467a:	4798      	blx	r3
    467c:	b180      	cbz	r0, 46a0 <sd_mmc_mci_card_init+0x15c>
		if (IS_SDIO()) {
    467e:	4b25      	ldr	r3, [pc, #148]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    4680:	681b      	ldr	r3, [r3, #0]
    4682:	7adb      	ldrb	r3, [r3, #11]
    4684:	f013 0f04 	tst.w	r3, #4
    4688:	d133      	bne.n	46f2 <sd_mmc_mci_card_init+0x1ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    468a:	4b22      	ldr	r3, [pc, #136]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    468c:	681b      	ldr	r3, [r3, #0]
    468e:	7ada      	ldrb	r2, [r3, #11]
    4690:	f012 0f01 	tst.w	r2, #1
    4694:	d002      	beq.n	469c <sd_mmc_mci_card_init+0x158>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    4696:	7b1b      	ldrb	r3, [r3, #12]
    4698:	2b10      	cmp	r3, #16
    469a:	d830      	bhi.n	46fe <sd_mmc_mci_card_init+0x1ba>
		sd_mmc_configure_slot();
    469c:	4b29      	ldr	r3, [pc, #164]	; (4744 <sd_mmc_mci_card_init+0x200>)
    469e:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    46a0:	4b1c      	ldr	r3, [pc, #112]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    46a2:	681b      	ldr	r3, [r3, #0]
    46a4:	7adb      	ldrb	r3, [r3, #11]
    46a6:	f013 0f01 	tst.w	r3, #1
    46aa:	f43f af6c 	beq.w	4586 <sd_mmc_mci_card_init+0x42>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    46ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    46b2:	f241 1110 	movw	r1, #4368	; 0x1110
    46b6:	4b17      	ldr	r3, [pc, #92]	; (4714 <sd_mmc_mci_card_init+0x1d0>)
    46b8:	6898      	ldr	r0, [r3, #8]
    46ba:	4b19      	ldr	r3, [pc, #100]	; (4720 <sd_mmc_mci_card_init+0x1dc>)
    46bc:	4798      	blx	r3
    46be:	4604      	mov	r4, r0
    46c0:	e761      	b.n	4586 <sd_mmc_mci_card_init+0x42>
		if (!sd_mci_op_cond(v2)) {
    46c2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    46c6:	4b21      	ldr	r3, [pc, #132]	; (474c <sd_mmc_mci_card_init+0x208>)
    46c8:	4798      	blx	r3
    46ca:	4604      	mov	r4, r0
    46cc:	2800      	cmp	r0, #0
    46ce:	f47f af6f 	bne.w	45b0 <sd_mmc_mci_card_init+0x6c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    46d2:	682b      	ldr	r3, [r5, #0]
    46d4:	2200      	movs	r2, #0
    46d6:	72da      	strb	r2, [r3, #11]
			return false;
    46d8:	e755      	b.n	4586 <sd_mmc_mci_card_init+0x42>
		if (!sd_acmd51()) {
    46da:	4b1d      	ldr	r3, [pc, #116]	; (4750 <sd_mmc_mci_card_init+0x20c>)
    46dc:	4798      	blx	r3
    46de:	2800      	cmp	r0, #0
    46e0:	d1a5      	bne.n	462e <sd_mmc_mci_card_init+0xea>
			return false;
    46e2:	4604      	mov	r4, r0
    46e4:	e74f      	b.n	4586 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_bus_width()) {
    46e6:	4b1b      	ldr	r3, [pc, #108]	; (4754 <sd_mmc_mci_card_init+0x210>)
    46e8:	4798      	blx	r3
    46ea:	2800      	cmp	r0, #0
    46ec:	d1b6      	bne.n	465c <sd_mmc_mci_card_init+0x118>
				return false;
    46ee:	4604      	mov	r4, r0
    46f0:	e749      	b.n	4586 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_high_speed()) {
    46f2:	4b19      	ldr	r3, [pc, #100]	; (4758 <sd_mmc_mci_card_init+0x214>)
    46f4:	4798      	blx	r3
    46f6:	2800      	cmp	r0, #0
    46f8:	d1c7      	bne.n	468a <sd_mmc_mci_card_init+0x146>
				return false;
    46fa:	4604      	mov	r4, r0
    46fc:	e743      	b.n	4586 <sd_mmc_mci_card_init+0x42>
				if (!sd_cm6_set_high_speed()) {
    46fe:	4b17      	ldr	r3, [pc, #92]	; (475c <sd_mmc_mci_card_init+0x218>)
    4700:	4798      	blx	r3
    4702:	2800      	cmp	r0, #0
    4704:	d1ca      	bne.n	469c <sd_mmc_mci_card_init+0x158>
					return false;
    4706:	4604      	mov	r4, r0
    4708:	e73d      	b.n	4586 <sd_mmc_mci_card_init+0x42>
			return false;
    470a:	4604      	mov	r4, r0
    470c:	e73b      	b.n	4586 <sd_mmc_mci_card_init+0x42>
				return false;
    470e:	4604      	mov	r4, r0
    4710:	e739      	b.n	4586 <sd_mmc_mci_card_init+0x42>
    4712:	bf00      	nop
    4714:	2000065c 	.word	0x2000065c
    4718:	0000102d 	.word	0x0000102d
    471c:	00003ffd 	.word	0x00003ffd
    4720:	00001055 	.word	0x00001055
    4724:	0000420d 	.word	0x0000420d
    4728:	0000425d 	.word	0x0000425d
    472c:	00001085 	.word	0x00001085
    4730:	00004399 	.word	0x00004399
    4734:	00003dc1 	.word	0x00003dc1
    4738:	00004065 	.word	0x00004065
    473c:	00000fd9 	.word	0x00000fd9
    4740:	00003fb9 	.word	0x00003fb9
    4744:	00003e49 	.word	0x00003e49
    4748:	00001005 	.word	0x00001005
    474c:	000042dd 	.word	0x000042dd
    4750:	000043d1 	.word	0x000043d1
    4754:	00004161 	.word	0x00004161
    4758:	000041b5 	.word	0x000041b5
    475c:	00004491 	.word	0x00004491

00004760 <sd_mmc_deselect_slot>:
{
    4760:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4762:	4b04      	ldr	r3, [pc, #16]	; (4774 <sd_mmc_deselect_slot+0x14>)
    4764:	7919      	ldrb	r1, [r3, #4]
    4766:	b101      	cbz	r1, 476a <sd_mmc_deselect_slot+0xa>
    4768:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    476a:	6898      	ldr	r0, [r3, #8]
    476c:	4b02      	ldr	r3, [pc, #8]	; (4778 <sd_mmc_deselect_slot+0x18>)
    476e:	4798      	blx	r3
}
    4770:	e7fa      	b.n	4768 <sd_mmc_deselect_slot+0x8>
    4772:	bf00      	nop
    4774:	2000065c 	.word	0x2000065c
    4778:	00000fad 	.word	0x00000fad

0000477c <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    477c:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    477e:	2300      	movs	r3, #0
    4780:	b13b      	cbz	r3, 4792 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4782:	4b08      	ldr	r3, [pc, #32]	; (47a4 <sd_mmc_init+0x28>)
    4784:	24ff      	movs	r4, #255	; 0xff
    4786:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4788:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    478a:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    478c:	635a      	str	r2, [r3, #52]	; 0x34
}
    478e:	bc30      	pop	{r4, r5}
    4790:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4792:	4c04      	ldr	r4, [pc, #16]	; (47a4 <sd_mmc_init+0x28>)
    4794:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    4798:	2504      	movs	r5, #4
    479a:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    479c:	3301      	adds	r3, #1
    479e:	b2db      	uxtb	r3, r3
    47a0:	e7ee      	b.n	4780 <sd_mmc_init+0x4>
    47a2:	bf00      	nop
    47a4:	2000065c 	.word	0x2000065c

000047a8 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    47a8:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    47aa:	4b0d      	ldr	r3, [pc, #52]	; (47e0 <sd_mmc_check+0x38>)
    47ac:	4798      	blx	r3
    47ae:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    47b0:	2801      	cmp	r0, #1
    47b2:	d003      	beq.n	47bc <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    47b4:	4b0b      	ldr	r3, [pc, #44]	; (47e4 <sd_mmc_check+0x3c>)
    47b6:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    47b8:	4620      	mov	r0, r4
    47ba:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    47bc:	4b0a      	ldr	r3, [pc, #40]	; (47e8 <sd_mmc_check+0x40>)
    47be:	4798      	blx	r3
    47c0:	b930      	cbnz	r0, 47d0 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    47c2:	4b0a      	ldr	r3, [pc, #40]	; (47ec <sd_mmc_check+0x44>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	2403      	movs	r4, #3
    47c8:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    47ca:	4b06      	ldr	r3, [pc, #24]	; (47e4 <sd_mmc_check+0x3c>)
    47cc:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    47ce:	e7f3      	b.n	47b8 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    47d0:	4b06      	ldr	r3, [pc, #24]	; (47ec <sd_mmc_check+0x44>)
    47d2:	681b      	ldr	r3, [r3, #0]
    47d4:	2200      	movs	r2, #0
    47d6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    47d8:	4b02      	ldr	r3, [pc, #8]	; (47e4 <sd_mmc_check+0x3c>)
    47da:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    47dc:	e7ec      	b.n	47b8 <sd_mmc_check+0x10>
    47de:	bf00      	nop
    47e0:	00003e75 	.word	0x00003e75
    47e4:	00004761 	.word	0x00004761
    47e8:	00004545 	.word	0x00004545
    47ec:	2000065c 	.word	0x2000065c

000047f0 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    47f0:	4b19      	ldr	r3, [pc, #100]	; (4858 <sd_mmc_is_write_protected+0x68>)
    47f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    47f4:	b35b      	cbz	r3, 484e <sd_mmc_is_write_protected+0x5e>
{
    47f6:	b570      	push	{r4, r5, r6, lr}
    47f8:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    47fa:	0085      	lsls	r5, r0, #2
    47fc:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4800:	f1b3 3fff 	cmp.w	r3, #4294967295
    4804:	d025      	beq.n	4852 <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    4806:	b2de      	uxtb	r6, r3
    4808:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    480a:	a801      	add	r0, sp, #4
    480c:	4b13      	ldr	r3, [pc, #76]	; (485c <sd_mmc_is_write_protected+0x6c>)
    480e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4810:	4913      	ldr	r1, [pc, #76]	; (4860 <sd_mmc_is_write_protected+0x70>)
    4812:	01e3      	lsls	r3, r4, #7
    4814:	18ca      	adds	r2, r1, r3
    4816:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4818:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    481a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    481c:	405c      	eors	r4, r3
    481e:	400c      	ands	r4, r1
    4820:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4822:	a801      	add	r0, sp, #4
    4824:	4b0f      	ldr	r3, [pc, #60]	; (4864 <sd_mmc_is_write_protected+0x74>)
    4826:	4798      	blx	r3
    4828:	f006 031f 	and.w	r3, r6, #31
    482c:	2201      	movs	r2, #1
    482e:	fa02 f303 	lsl.w	r3, r2, r3
    4832:	4223      	tst	r3, r4
    4834:	bf08      	it	eq
    4836:	2200      	moveq	r2, #0
    4838:	4b07      	ldr	r3, [pc, #28]	; (4858 <sd_mmc_is_write_protected+0x68>)
    483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    483c:	441d      	add	r5, r3
    483e:	886b      	ldrh	r3, [r5, #2]
    4840:	429a      	cmp	r2, r3
    4842:	d002      	beq.n	484a <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    4844:	2000      	movs	r0, #0
}
    4846:	b002      	add	sp, #8
    4848:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    484a:	2001      	movs	r0, #1
    484c:	e7fb      	b.n	4846 <sd_mmc_is_write_protected+0x56>
		return false;
    484e:	2000      	movs	r0, #0
    4850:	4770      	bx	lr
    4852:	2000      	movs	r0, #0
    4854:	e7f7      	b.n	4846 <sd_mmc_is_write_protected+0x56>
    4856:	bf00      	nop
    4858:	2000065c 	.word	0x2000065c
    485c:	00000d41 	.word	0x00000d41
    4860:	41008000 	.word	0x41008000
    4864:	00000d4f 	.word	0x00000d4f

00004868 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4868:	b570      	push	{r4, r5, r6, lr}
    486a:	b082      	sub	sp, #8
    486c:	460e      	mov	r6, r1
    486e:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4870:	4b1b      	ldr	r3, [pc, #108]	; (48e0 <sd_mmc_init_read_blocks+0x78>)
    4872:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4874:	4604      	mov	r4, r0
    4876:	b110      	cbz	r0, 487e <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    4878:	4620      	mov	r0, r4
    487a:	b002      	add	sp, #8
    487c:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    487e:	4b19      	ldr	r3, [pc, #100]	; (48e4 <sd_mmc_init_read_blocks+0x7c>)
    4880:	4798      	blx	r3
    4882:	b1c0      	cbz	r0, 48b6 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    4884:	2d01      	cmp	r5, #1
    4886:	d91a      	bls.n	48be <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    4888:	4917      	ldr	r1, [pc, #92]	; (48e8 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    488a:	4b18      	ldr	r3, [pc, #96]	; (48ec <sd_mmc_init_read_blocks+0x84>)
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	7adb      	ldrb	r3, [r3, #11]
    4890:	f013 0f08 	tst.w	r3, #8
    4894:	d100      	bne.n	4898 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4896:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4898:	4b14      	ldr	r3, [pc, #80]	; (48ec <sd_mmc_init_read_blocks+0x84>)
    489a:	6898      	ldr	r0, [r3, #8]
    489c:	2301      	movs	r3, #1
    489e:	9301      	str	r3, [sp, #4]
    48a0:	9500      	str	r5, [sp, #0]
    48a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    48a6:	4632      	mov	r2, r6
    48a8:	4e11      	ldr	r6, [pc, #68]	; (48f0 <sd_mmc_init_read_blocks+0x88>)
    48aa:	47b0      	blx	r6
    48ac:	b948      	cbnz	r0, 48c2 <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    48ae:	4b11      	ldr	r3, [pc, #68]	; (48f4 <sd_mmc_init_read_blocks+0x8c>)
    48b0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    48b2:	2405      	movs	r4, #5
    48b4:	e7e0      	b.n	4878 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    48b6:	4b0f      	ldr	r3, [pc, #60]	; (48f4 <sd_mmc_init_read_blocks+0x8c>)
    48b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    48ba:	2405      	movs	r4, #5
    48bc:	e7dc      	b.n	4878 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    48be:	490e      	ldr	r1, [pc, #56]	; (48f8 <sd_mmc_init_read_blocks+0x90>)
    48c0:	e7e3      	b.n	488a <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    48c2:	4b0a      	ldr	r3, [pc, #40]	; (48ec <sd_mmc_init_read_blocks+0x84>)
    48c4:	6898      	ldr	r0, [r3, #8]
    48c6:	4b0d      	ldr	r3, [pc, #52]	; (48fc <sd_mmc_init_read_blocks+0x94>)
    48c8:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    48ca:	4b0d      	ldr	r3, [pc, #52]	; (4900 <sd_mmc_init_read_blocks+0x98>)
    48cc:	4003      	ands	r3, r0
    48ce:	b91b      	cbnz	r3, 48d8 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    48d0:	4b06      	ldr	r3, [pc, #24]	; (48ec <sd_mmc_init_read_blocks+0x84>)
    48d2:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    48d4:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    48d6:	e7cf      	b.n	4878 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    48d8:	4b06      	ldr	r3, [pc, #24]	; (48f4 <sd_mmc_init_read_blocks+0x8c>)
    48da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    48dc:	2405      	movs	r4, #5
    48de:	e7cb      	b.n	4878 <sd_mmc_init_read_blocks+0x10>
    48e0:	00003e75 	.word	0x00003e75
    48e4:	00004351 	.word	0x00004351
    48e8:	00101112 	.word	0x00101112
    48ec:	2000065c 	.word	0x2000065c
    48f0:	000010e1 	.word	0x000010e1
    48f4:	00004761 	.word	0x00004761
    48f8:	00081111 	.word	0x00081111
    48fc:	00001085 	.word	0x00001085
    4900:	e4580000 	.word	0xe4580000

00004904 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    4904:	b570      	push	{r4, r5, r6, lr}
    4906:	4606      	mov	r6, r0
    4908:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    490a:	4d0d      	ldr	r5, [pc, #52]	; (4940 <sd_mmc_start_read_blocks+0x3c>)
    490c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    490e:	f240 52a7 	movw	r2, #1447	; 0x5a7
    4912:	490c      	ldr	r1, [pc, #48]	; (4944 <sd_mmc_start_read_blocks+0x40>)
    4914:	42a0      	cmp	r0, r4
    4916:	bf34      	ite	cc
    4918:	2000      	movcc	r0, #0
    491a:	2001      	movcs	r0, #1
    491c:	4b0a      	ldr	r3, [pc, #40]	; (4948 <sd_mmc_start_read_blocks+0x44>)
    491e:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    4920:	4622      	mov	r2, r4
    4922:	4631      	mov	r1, r6
    4924:	68a8      	ldr	r0, [r5, #8]
    4926:	4b09      	ldr	r3, [pc, #36]	; (494c <sd_mmc_start_read_blocks+0x48>)
    4928:	4798      	blx	r3
    492a:	b918      	cbnz	r0, 4934 <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    492c:	2200      	movs	r2, #0
    492e:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4930:	2005      	movs	r0, #5
    4932:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4934:	4a02      	ldr	r2, [pc, #8]	; (4940 <sd_mmc_start_read_blocks+0x3c>)
    4936:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4938:	1b1c      	subs	r4, r3, r4
    493a:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    493c:	2000      	movs	r0, #0
}
    493e:	bd70      	pop	{r4, r5, r6, pc}
    4940:	2000065c 	.word	0x2000065c
    4944:	00005254 	.word	0x00005254
    4948:	00001605 	.word	0x00001605
    494c:	00001125 	.word	0x00001125

00004950 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    4950:	b510      	push	{r4, lr}
    4952:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4954:	4b16      	ldr	r3, [pc, #88]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4956:	6898      	ldr	r0, [r3, #8]
    4958:	4b16      	ldr	r3, [pc, #88]	; (49b4 <sd_mmc_wait_end_of_read_blocks+0x64>)
    495a:	4798      	blx	r3
    495c:	b908      	cbnz	r0, 4962 <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    495e:	2005      	movs	r0, #5
    4960:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4962:	b194      	cbz	r4, 498a <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4964:	2200      	movs	r2, #0
    4966:	4b12      	ldr	r3, [pc, #72]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4968:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    496a:	4b11      	ldr	r3, [pc, #68]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    496c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    496e:	2b01      	cmp	r3, #1
    4970:	d011      	beq.n	4996 <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4972:	2200      	movs	r2, #0
    4974:	f243 110c 	movw	r1, #12556	; 0x310c
    4978:	4b0d      	ldr	r3, [pc, #52]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    497a:	6898      	ldr	r0, [r3, #8]
    497c:	4b0e      	ldr	r3, [pc, #56]	; (49b8 <sd_mmc_wait_end_of_read_blocks+0x68>)
    497e:	4798      	blx	r3
    4980:	b168      	cbz	r0, 499e <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    4982:	4b0e      	ldr	r3, [pc, #56]	; (49bc <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4984:	4798      	blx	r3
	return SD_MMC_OK;
    4986:	2000      	movs	r0, #0
    4988:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    498a:	4b09      	ldr	r3, [pc, #36]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    498c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    498e:	2b00      	cmp	r3, #0
    4990:	d0eb      	beq.n	496a <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    4992:	2000      	movs	r0, #0
}
    4994:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4996:	4b09      	ldr	r3, [pc, #36]	; (49bc <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4998:	4798      	blx	r3
		return SD_MMC_OK;
    499a:	2000      	movs	r0, #0
    499c:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    499e:	2200      	movs	r2, #0
    49a0:	f243 110c 	movw	r1, #12556	; 0x310c
    49a4:	4b02      	ldr	r3, [pc, #8]	; (49b0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    49a6:	6898      	ldr	r0, [r3, #8]
    49a8:	4b03      	ldr	r3, [pc, #12]	; (49b8 <sd_mmc_wait_end_of_read_blocks+0x68>)
    49aa:	4798      	blx	r3
    49ac:	e7e9      	b.n	4982 <sd_mmc_wait_end_of_read_blocks+0x32>
    49ae:	bf00      	nop
    49b0:	2000065c 	.word	0x2000065c
    49b4:	00001195 	.word	0x00001195
    49b8:	00001055 	.word	0x00001055
    49bc:	00004761 	.word	0x00004761

000049c0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    49c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49c2:	b083      	sub	sp, #12
    49c4:	4607      	mov	r7, r0
    49c6:	460e      	mov	r6, r1
    49c8:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    49ca:	4b1c      	ldr	r3, [pc, #112]	; (4a3c <sd_mmc_init_write_blocks+0x7c>)
    49cc:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    49ce:	4604      	mov	r4, r0
    49d0:	b110      	cbz	r0, 49d8 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    49d2:	4620      	mov	r0, r4
    49d4:	b003      	add	sp, #12
    49d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    49d8:	4638      	mov	r0, r7
    49da:	4b19      	ldr	r3, [pc, #100]	; (4a40 <sd_mmc_init_write_blocks+0x80>)
    49dc:	4798      	blx	r3
    49de:	b9c0      	cbnz	r0, 4a12 <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    49e0:	2d01      	cmp	r5, #1
    49e2:	d91a      	bls.n	4a1a <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    49e4:	4917      	ldr	r1, [pc, #92]	; (4a44 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    49e6:	4b18      	ldr	r3, [pc, #96]	; (4a48 <sd_mmc_init_write_blocks+0x88>)
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	7adb      	ldrb	r3, [r3, #11]
    49ec:	f013 0f08 	tst.w	r3, #8
    49f0:	d100      	bne.n	49f4 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    49f2:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    49f4:	4b14      	ldr	r3, [pc, #80]	; (4a48 <sd_mmc_init_write_blocks+0x88>)
    49f6:	6898      	ldr	r0, [r3, #8]
    49f8:	2301      	movs	r3, #1
    49fa:	9301      	str	r3, [sp, #4]
    49fc:	9500      	str	r5, [sp, #0]
    49fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    4a02:	4632      	mov	r2, r6
    4a04:	4e11      	ldr	r6, [pc, #68]	; (4a4c <sd_mmc_init_write_blocks+0x8c>)
    4a06:	47b0      	blx	r6
    4a08:	b948      	cbnz	r0, 4a1e <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    4a0a:	4b11      	ldr	r3, [pc, #68]	; (4a50 <sd_mmc_init_write_blocks+0x90>)
    4a0c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4a0e:	2405      	movs	r4, #5
    4a10:	e7df      	b.n	49d2 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4a12:	4b0f      	ldr	r3, [pc, #60]	; (4a50 <sd_mmc_init_write_blocks+0x90>)
    4a14:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    4a16:	2407      	movs	r4, #7
    4a18:	e7db      	b.n	49d2 <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    4a1a:	490e      	ldr	r1, [pc, #56]	; (4a54 <sd_mmc_init_write_blocks+0x94>)
    4a1c:	e7e3      	b.n	49e6 <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    4a1e:	4b0a      	ldr	r3, [pc, #40]	; (4a48 <sd_mmc_init_write_blocks+0x88>)
    4a20:	6898      	ldr	r0, [r3, #8]
    4a22:	4b0d      	ldr	r3, [pc, #52]	; (4a58 <sd_mmc_init_write_blocks+0x98>)
    4a24:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4a26:	4b0d      	ldr	r3, [pc, #52]	; (4a5c <sd_mmc_init_write_blocks+0x9c>)
    4a28:	4003      	ands	r3, r0
    4a2a:	b91b      	cbnz	r3, 4a34 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    4a2c:	4b06      	ldr	r3, [pc, #24]	; (4a48 <sd_mmc_init_write_blocks+0x88>)
    4a2e:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4a30:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4a32:	e7ce      	b.n	49d2 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4a34:	4b06      	ldr	r3, [pc, #24]	; (4a50 <sd_mmc_init_write_blocks+0x90>)
    4a36:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4a38:	2405      	movs	r4, #5
    4a3a:	e7ca      	b.n	49d2 <sd_mmc_init_write_blocks+0x12>
    4a3c:	00003e75 	.word	0x00003e75
    4a40:	000047f1 	.word	0x000047f1
    4a44:	00109119 	.word	0x00109119
    4a48:	2000065c 	.word	0x2000065c
    4a4c:	000010e1 	.word	0x000010e1
    4a50:	00004761 	.word	0x00004761
    4a54:	00089118 	.word	0x00089118
    4a58:	00001085 	.word	0x00001085
    4a5c:	e4580000 	.word	0xe4580000

00004a60 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    4a60:	b570      	push	{r4, r5, r6, lr}
    4a62:	4606      	mov	r6, r0
    4a64:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4a66:	4d0d      	ldr	r5, [pc, #52]	; (4a9c <sd_mmc_start_write_blocks+0x3c>)
    4a68:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4a6a:	f240 52fa 	movw	r2, #1530	; 0x5fa
    4a6e:	490c      	ldr	r1, [pc, #48]	; (4aa0 <sd_mmc_start_write_blocks+0x40>)
    4a70:	42a0      	cmp	r0, r4
    4a72:	bf34      	ite	cc
    4a74:	2000      	movcc	r0, #0
    4a76:	2001      	movcs	r0, #1
    4a78:	4b0a      	ldr	r3, [pc, #40]	; (4aa4 <sd_mmc_start_write_blocks+0x44>)
    4a7a:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    4a7c:	4622      	mov	r2, r4
    4a7e:	4631      	mov	r1, r6
    4a80:	68a8      	ldr	r0, [r5, #8]
    4a82:	4b09      	ldr	r3, [pc, #36]	; (4aa8 <sd_mmc_start_write_blocks+0x48>)
    4a84:	4798      	blx	r3
    4a86:	b918      	cbnz	r0, 4a90 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4a88:	2200      	movs	r2, #0
    4a8a:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4a8c:	2005      	movs	r0, #5
    4a8e:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4a90:	4a02      	ldr	r2, [pc, #8]	; (4a9c <sd_mmc_start_write_blocks+0x3c>)
    4a92:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4a94:	1b1c      	subs	r4, r3, r4
    4a96:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4a98:	2000      	movs	r0, #0
}
    4a9a:	bd70      	pop	{r4, r5, r6, pc}
    4a9c:	2000065c 	.word	0x2000065c
    4aa0:	00005254 	.word	0x00005254
    4aa4:	00001605 	.word	0x00001605
    4aa8:	0000115d 	.word	0x0000115d

00004aac <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    4aac:	b510      	push	{r4, lr}
    4aae:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    4ab0:	4b14      	ldr	r3, [pc, #80]	; (4b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4ab2:	6898      	ldr	r0, [r3, #8]
    4ab4:	4b14      	ldr	r3, [pc, #80]	; (4b08 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    4ab6:	4798      	blx	r3
    4ab8:	b908      	cbnz	r0, 4abe <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    4aba:	2005      	movs	r0, #5
    4abc:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4abe:	b194      	cbz	r4, 4ae6 <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4ac0:	2200      	movs	r2, #0
    4ac2:	4b10      	ldr	r3, [pc, #64]	; (4b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4ac4:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    4ac6:	4b0f      	ldr	r3, [pc, #60]	; (4b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4ac8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4aca:	2b01      	cmp	r3, #1
    4acc:	d011      	beq.n	4af2 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4ace:	2200      	movs	r2, #0
    4ad0:	f243 110c 	movw	r1, #12556	; 0x310c
    4ad4:	4b0b      	ldr	r3, [pc, #44]	; (4b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4ad6:	6898      	ldr	r0, [r3, #8]
    4ad8:	4b0c      	ldr	r3, [pc, #48]	; (4b0c <sd_mmc_wait_end_of_write_blocks+0x60>)
    4ada:	4798      	blx	r3
    4adc:	b968      	cbnz	r0, 4afa <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    4ade:	4b0c      	ldr	r3, [pc, #48]	; (4b10 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4ae0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4ae2:	2005      	movs	r0, #5
    4ae4:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    4ae6:	4b07      	ldr	r3, [pc, #28]	; (4b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4ae8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4aea:	2b00      	cmp	r3, #0
    4aec:	d0eb      	beq.n	4ac6 <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    4aee:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    4af0:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4af2:	4b07      	ldr	r3, [pc, #28]	; (4b10 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4af4:	4798      	blx	r3
		return SD_MMC_OK;
    4af6:	2000      	movs	r0, #0
    4af8:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    4afa:	4b05      	ldr	r3, [pc, #20]	; (4b10 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4afc:	4798      	blx	r3
	return SD_MMC_OK;
    4afe:	2000      	movs	r0, #0
    4b00:	bd10      	pop	{r4, pc}
    4b02:	bf00      	nop
    4b04:	2000065c 	.word	0x2000065c
    4b08:	000011bd 	.word	0x000011bd
    4b0c:	00001055 	.word	0x00001055
    4b10:	00004761 	.word	0x00004761

00004b14 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    4b14:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    4b16:	4903      	ldr	r1, [pc, #12]	; (4b24 <sd_mmc_stack_init+0x10>)
    4b18:	460a      	mov	r2, r1
    4b1a:	3104      	adds	r1, #4
    4b1c:	4802      	ldr	r0, [pc, #8]	; (4b28 <sd_mmc_stack_init+0x14>)
    4b1e:	4b03      	ldr	r3, [pc, #12]	; (4b2c <sd_mmc_stack_init+0x18>)
    4b20:	4798      	blx	r3
    4b22:	bd08      	pop	{r3, pc}
    4b24:	20000030 	.word	0x20000030
    4b28:	20000720 	.word	0x20000720
    4b2c:	0000477d 	.word	0x0000477d

00004b30 <__aeabi_uldivmod>:
    4b30:	b953      	cbnz	r3, 4b48 <__aeabi_uldivmod+0x18>
    4b32:	b94a      	cbnz	r2, 4b48 <__aeabi_uldivmod+0x18>
    4b34:	2900      	cmp	r1, #0
    4b36:	bf08      	it	eq
    4b38:	2800      	cmpeq	r0, #0
    4b3a:	bf1c      	itt	ne
    4b3c:	f04f 31ff 	movne.w	r1, #4294967295
    4b40:	f04f 30ff 	movne.w	r0, #4294967295
    4b44:	f000 b97a 	b.w	4e3c <__aeabi_idiv0>
    4b48:	f1ad 0c08 	sub.w	ip, sp, #8
    4b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4b50:	f000 f806 	bl	4b60 <__udivmoddi4>
    4b54:	f8dd e004 	ldr.w	lr, [sp, #4]
    4b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4b5c:	b004      	add	sp, #16
    4b5e:	4770      	bx	lr

00004b60 <__udivmoddi4>:
    4b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b64:	468c      	mov	ip, r1
    4b66:	460d      	mov	r5, r1
    4b68:	4604      	mov	r4, r0
    4b6a:	9e08      	ldr	r6, [sp, #32]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d151      	bne.n	4c14 <__udivmoddi4+0xb4>
    4b70:	428a      	cmp	r2, r1
    4b72:	4617      	mov	r7, r2
    4b74:	d96d      	bls.n	4c52 <__udivmoddi4+0xf2>
    4b76:	fab2 fe82 	clz	lr, r2
    4b7a:	f1be 0f00 	cmp.w	lr, #0
    4b7e:	d00b      	beq.n	4b98 <__udivmoddi4+0x38>
    4b80:	f1ce 0c20 	rsb	ip, lr, #32
    4b84:	fa01 f50e 	lsl.w	r5, r1, lr
    4b88:	fa20 fc0c 	lsr.w	ip, r0, ip
    4b8c:	fa02 f70e 	lsl.w	r7, r2, lr
    4b90:	ea4c 0c05 	orr.w	ip, ip, r5
    4b94:	fa00 f40e 	lsl.w	r4, r0, lr
    4b98:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4b9c:	0c25      	lsrs	r5, r4, #16
    4b9e:	fbbc f8fa 	udiv	r8, ip, sl
    4ba2:	fa1f f987 	uxth.w	r9, r7
    4ba6:	fb0a cc18 	mls	ip, sl, r8, ip
    4baa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    4bae:	fb08 f309 	mul.w	r3, r8, r9
    4bb2:	42ab      	cmp	r3, r5
    4bb4:	d90a      	bls.n	4bcc <__udivmoddi4+0x6c>
    4bb6:	19ed      	adds	r5, r5, r7
    4bb8:	f108 32ff 	add.w	r2, r8, #4294967295
    4bbc:	f080 8123 	bcs.w	4e06 <__udivmoddi4+0x2a6>
    4bc0:	42ab      	cmp	r3, r5
    4bc2:	f240 8120 	bls.w	4e06 <__udivmoddi4+0x2a6>
    4bc6:	f1a8 0802 	sub.w	r8, r8, #2
    4bca:	443d      	add	r5, r7
    4bcc:	1aed      	subs	r5, r5, r3
    4bce:	b2a4      	uxth	r4, r4
    4bd0:	fbb5 f0fa 	udiv	r0, r5, sl
    4bd4:	fb0a 5510 	mls	r5, sl, r0, r5
    4bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4bdc:	fb00 f909 	mul.w	r9, r0, r9
    4be0:	45a1      	cmp	r9, r4
    4be2:	d909      	bls.n	4bf8 <__udivmoddi4+0x98>
    4be4:	19e4      	adds	r4, r4, r7
    4be6:	f100 33ff 	add.w	r3, r0, #4294967295
    4bea:	f080 810a 	bcs.w	4e02 <__udivmoddi4+0x2a2>
    4bee:	45a1      	cmp	r9, r4
    4bf0:	f240 8107 	bls.w	4e02 <__udivmoddi4+0x2a2>
    4bf4:	3802      	subs	r0, #2
    4bf6:	443c      	add	r4, r7
    4bf8:	eba4 0409 	sub.w	r4, r4, r9
    4bfc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4c00:	2100      	movs	r1, #0
    4c02:	2e00      	cmp	r6, #0
    4c04:	d061      	beq.n	4cca <__udivmoddi4+0x16a>
    4c06:	fa24 f40e 	lsr.w	r4, r4, lr
    4c0a:	2300      	movs	r3, #0
    4c0c:	6034      	str	r4, [r6, #0]
    4c0e:	6073      	str	r3, [r6, #4]
    4c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c14:	428b      	cmp	r3, r1
    4c16:	d907      	bls.n	4c28 <__udivmoddi4+0xc8>
    4c18:	2e00      	cmp	r6, #0
    4c1a:	d054      	beq.n	4cc6 <__udivmoddi4+0x166>
    4c1c:	2100      	movs	r1, #0
    4c1e:	e886 0021 	stmia.w	r6, {r0, r5}
    4c22:	4608      	mov	r0, r1
    4c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c28:	fab3 f183 	clz	r1, r3
    4c2c:	2900      	cmp	r1, #0
    4c2e:	f040 808e 	bne.w	4d4e <__udivmoddi4+0x1ee>
    4c32:	42ab      	cmp	r3, r5
    4c34:	d302      	bcc.n	4c3c <__udivmoddi4+0xdc>
    4c36:	4282      	cmp	r2, r0
    4c38:	f200 80fa 	bhi.w	4e30 <__udivmoddi4+0x2d0>
    4c3c:	1a84      	subs	r4, r0, r2
    4c3e:	eb65 0503 	sbc.w	r5, r5, r3
    4c42:	2001      	movs	r0, #1
    4c44:	46ac      	mov	ip, r5
    4c46:	2e00      	cmp	r6, #0
    4c48:	d03f      	beq.n	4cca <__udivmoddi4+0x16a>
    4c4a:	e886 1010 	stmia.w	r6, {r4, ip}
    4c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c52:	b912      	cbnz	r2, 4c5a <__udivmoddi4+0xfa>
    4c54:	2701      	movs	r7, #1
    4c56:	fbb7 f7f2 	udiv	r7, r7, r2
    4c5a:	fab7 fe87 	clz	lr, r7
    4c5e:	f1be 0f00 	cmp.w	lr, #0
    4c62:	d134      	bne.n	4cce <__udivmoddi4+0x16e>
    4c64:	1beb      	subs	r3, r5, r7
    4c66:	0c3a      	lsrs	r2, r7, #16
    4c68:	fa1f fc87 	uxth.w	ip, r7
    4c6c:	2101      	movs	r1, #1
    4c6e:	fbb3 f8f2 	udiv	r8, r3, r2
    4c72:	0c25      	lsrs	r5, r4, #16
    4c74:	fb02 3318 	mls	r3, r2, r8, r3
    4c78:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4c7c:	fb0c f308 	mul.w	r3, ip, r8
    4c80:	42ab      	cmp	r3, r5
    4c82:	d907      	bls.n	4c94 <__udivmoddi4+0x134>
    4c84:	19ed      	adds	r5, r5, r7
    4c86:	f108 30ff 	add.w	r0, r8, #4294967295
    4c8a:	d202      	bcs.n	4c92 <__udivmoddi4+0x132>
    4c8c:	42ab      	cmp	r3, r5
    4c8e:	f200 80d1 	bhi.w	4e34 <__udivmoddi4+0x2d4>
    4c92:	4680      	mov	r8, r0
    4c94:	1aed      	subs	r5, r5, r3
    4c96:	b2a3      	uxth	r3, r4
    4c98:	fbb5 f0f2 	udiv	r0, r5, r2
    4c9c:	fb02 5510 	mls	r5, r2, r0, r5
    4ca0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    4ca4:	fb0c fc00 	mul.w	ip, ip, r0
    4ca8:	45a4      	cmp	ip, r4
    4caa:	d907      	bls.n	4cbc <__udivmoddi4+0x15c>
    4cac:	19e4      	adds	r4, r4, r7
    4cae:	f100 33ff 	add.w	r3, r0, #4294967295
    4cb2:	d202      	bcs.n	4cba <__udivmoddi4+0x15a>
    4cb4:	45a4      	cmp	ip, r4
    4cb6:	f200 80b8 	bhi.w	4e2a <__udivmoddi4+0x2ca>
    4cba:	4618      	mov	r0, r3
    4cbc:	eba4 040c 	sub.w	r4, r4, ip
    4cc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4cc4:	e79d      	b.n	4c02 <__udivmoddi4+0xa2>
    4cc6:	4631      	mov	r1, r6
    4cc8:	4630      	mov	r0, r6
    4cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cce:	f1ce 0420 	rsb	r4, lr, #32
    4cd2:	fa05 f30e 	lsl.w	r3, r5, lr
    4cd6:	fa07 f70e 	lsl.w	r7, r7, lr
    4cda:	fa20 f804 	lsr.w	r8, r0, r4
    4cde:	0c3a      	lsrs	r2, r7, #16
    4ce0:	fa25 f404 	lsr.w	r4, r5, r4
    4ce4:	ea48 0803 	orr.w	r8, r8, r3
    4ce8:	fbb4 f1f2 	udiv	r1, r4, r2
    4cec:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4cf0:	fb02 4411 	mls	r4, r2, r1, r4
    4cf4:	fa1f fc87 	uxth.w	ip, r7
    4cf8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4cfc:	fb01 f30c 	mul.w	r3, r1, ip
    4d00:	42ab      	cmp	r3, r5
    4d02:	fa00 f40e 	lsl.w	r4, r0, lr
    4d06:	d909      	bls.n	4d1c <__udivmoddi4+0x1bc>
    4d08:	19ed      	adds	r5, r5, r7
    4d0a:	f101 30ff 	add.w	r0, r1, #4294967295
    4d0e:	f080 808a 	bcs.w	4e26 <__udivmoddi4+0x2c6>
    4d12:	42ab      	cmp	r3, r5
    4d14:	f240 8087 	bls.w	4e26 <__udivmoddi4+0x2c6>
    4d18:	3902      	subs	r1, #2
    4d1a:	443d      	add	r5, r7
    4d1c:	1aeb      	subs	r3, r5, r3
    4d1e:	fa1f f588 	uxth.w	r5, r8
    4d22:	fbb3 f0f2 	udiv	r0, r3, r2
    4d26:	fb02 3310 	mls	r3, r2, r0, r3
    4d2a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4d2e:	fb00 f30c 	mul.w	r3, r0, ip
    4d32:	42ab      	cmp	r3, r5
    4d34:	d907      	bls.n	4d46 <__udivmoddi4+0x1e6>
    4d36:	19ed      	adds	r5, r5, r7
    4d38:	f100 38ff 	add.w	r8, r0, #4294967295
    4d3c:	d26f      	bcs.n	4e1e <__udivmoddi4+0x2be>
    4d3e:	42ab      	cmp	r3, r5
    4d40:	d96d      	bls.n	4e1e <__udivmoddi4+0x2be>
    4d42:	3802      	subs	r0, #2
    4d44:	443d      	add	r5, r7
    4d46:	1aeb      	subs	r3, r5, r3
    4d48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4d4c:	e78f      	b.n	4c6e <__udivmoddi4+0x10e>
    4d4e:	f1c1 0720 	rsb	r7, r1, #32
    4d52:	fa22 f807 	lsr.w	r8, r2, r7
    4d56:	408b      	lsls	r3, r1
    4d58:	fa05 f401 	lsl.w	r4, r5, r1
    4d5c:	ea48 0303 	orr.w	r3, r8, r3
    4d60:	fa20 fe07 	lsr.w	lr, r0, r7
    4d64:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4d68:	40fd      	lsrs	r5, r7
    4d6a:	ea4e 0e04 	orr.w	lr, lr, r4
    4d6e:	fbb5 f9fc 	udiv	r9, r5, ip
    4d72:	ea4f 441e 	mov.w	r4, lr, lsr #16
    4d76:	fb0c 5519 	mls	r5, ip, r9, r5
    4d7a:	fa1f f883 	uxth.w	r8, r3
    4d7e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    4d82:	fb09 f408 	mul.w	r4, r9, r8
    4d86:	42ac      	cmp	r4, r5
    4d88:	fa02 f201 	lsl.w	r2, r2, r1
    4d8c:	fa00 fa01 	lsl.w	sl, r0, r1
    4d90:	d908      	bls.n	4da4 <__udivmoddi4+0x244>
    4d92:	18ed      	adds	r5, r5, r3
    4d94:	f109 30ff 	add.w	r0, r9, #4294967295
    4d98:	d243      	bcs.n	4e22 <__udivmoddi4+0x2c2>
    4d9a:	42ac      	cmp	r4, r5
    4d9c:	d941      	bls.n	4e22 <__udivmoddi4+0x2c2>
    4d9e:	f1a9 0902 	sub.w	r9, r9, #2
    4da2:	441d      	add	r5, r3
    4da4:	1b2d      	subs	r5, r5, r4
    4da6:	fa1f fe8e 	uxth.w	lr, lr
    4daa:	fbb5 f0fc 	udiv	r0, r5, ip
    4dae:	fb0c 5510 	mls	r5, ip, r0, r5
    4db2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    4db6:	fb00 f808 	mul.w	r8, r0, r8
    4dba:	45a0      	cmp	r8, r4
    4dbc:	d907      	bls.n	4dce <__udivmoddi4+0x26e>
    4dbe:	18e4      	adds	r4, r4, r3
    4dc0:	f100 35ff 	add.w	r5, r0, #4294967295
    4dc4:	d229      	bcs.n	4e1a <__udivmoddi4+0x2ba>
    4dc6:	45a0      	cmp	r8, r4
    4dc8:	d927      	bls.n	4e1a <__udivmoddi4+0x2ba>
    4dca:	3802      	subs	r0, #2
    4dcc:	441c      	add	r4, r3
    4dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4dd2:	eba4 0408 	sub.w	r4, r4, r8
    4dd6:	fba0 8902 	umull	r8, r9, r0, r2
    4dda:	454c      	cmp	r4, r9
    4ddc:	46c6      	mov	lr, r8
    4dde:	464d      	mov	r5, r9
    4de0:	d315      	bcc.n	4e0e <__udivmoddi4+0x2ae>
    4de2:	d012      	beq.n	4e0a <__udivmoddi4+0x2aa>
    4de4:	b156      	cbz	r6, 4dfc <__udivmoddi4+0x29c>
    4de6:	ebba 030e 	subs.w	r3, sl, lr
    4dea:	eb64 0405 	sbc.w	r4, r4, r5
    4dee:	fa04 f707 	lsl.w	r7, r4, r7
    4df2:	40cb      	lsrs	r3, r1
    4df4:	431f      	orrs	r7, r3
    4df6:	40cc      	lsrs	r4, r1
    4df8:	6037      	str	r7, [r6, #0]
    4dfa:	6074      	str	r4, [r6, #4]
    4dfc:	2100      	movs	r1, #0
    4dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e02:	4618      	mov	r0, r3
    4e04:	e6f8      	b.n	4bf8 <__udivmoddi4+0x98>
    4e06:	4690      	mov	r8, r2
    4e08:	e6e0      	b.n	4bcc <__udivmoddi4+0x6c>
    4e0a:	45c2      	cmp	sl, r8
    4e0c:	d2ea      	bcs.n	4de4 <__udivmoddi4+0x284>
    4e0e:	ebb8 0e02 	subs.w	lr, r8, r2
    4e12:	eb69 0503 	sbc.w	r5, r9, r3
    4e16:	3801      	subs	r0, #1
    4e18:	e7e4      	b.n	4de4 <__udivmoddi4+0x284>
    4e1a:	4628      	mov	r0, r5
    4e1c:	e7d7      	b.n	4dce <__udivmoddi4+0x26e>
    4e1e:	4640      	mov	r0, r8
    4e20:	e791      	b.n	4d46 <__udivmoddi4+0x1e6>
    4e22:	4681      	mov	r9, r0
    4e24:	e7be      	b.n	4da4 <__udivmoddi4+0x244>
    4e26:	4601      	mov	r1, r0
    4e28:	e778      	b.n	4d1c <__udivmoddi4+0x1bc>
    4e2a:	3802      	subs	r0, #2
    4e2c:	443c      	add	r4, r7
    4e2e:	e745      	b.n	4cbc <__udivmoddi4+0x15c>
    4e30:	4608      	mov	r0, r1
    4e32:	e708      	b.n	4c46 <__udivmoddi4+0xe6>
    4e34:	f1a8 0802 	sub.w	r8, r8, #2
    4e38:	443d      	add	r5, r7
    4e3a:	e72b      	b.n	4c94 <__udivmoddi4+0x134>

00004e3c <__aeabi_idiv0>:
    4e3c:	4770      	bx	lr
    4e3e:	bf00      	nop

00004e40 <__libc_init_array>:
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	4e0d      	ldr	r6, [pc, #52]	; (4e78 <__libc_init_array+0x38>)
    4e44:	4c0d      	ldr	r4, [pc, #52]	; (4e7c <__libc_init_array+0x3c>)
    4e46:	1ba4      	subs	r4, r4, r6
    4e48:	10a4      	asrs	r4, r4, #2
    4e4a:	2500      	movs	r5, #0
    4e4c:	42a5      	cmp	r5, r4
    4e4e:	d109      	bne.n	4e64 <__libc_init_array+0x24>
    4e50:	4e0b      	ldr	r6, [pc, #44]	; (4e80 <__libc_init_array+0x40>)
    4e52:	4c0c      	ldr	r4, [pc, #48]	; (4e84 <__libc_init_array+0x44>)
    4e54:	f000 fa08 	bl	5268 <_init>
    4e58:	1ba4      	subs	r4, r4, r6
    4e5a:	10a4      	asrs	r4, r4, #2
    4e5c:	2500      	movs	r5, #0
    4e5e:	42a5      	cmp	r5, r4
    4e60:	d105      	bne.n	4e6e <__libc_init_array+0x2e>
    4e62:	bd70      	pop	{r4, r5, r6, pc}
    4e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4e68:	4798      	blx	r3
    4e6a:	3501      	adds	r5, #1
    4e6c:	e7ee      	b.n	4e4c <__libc_init_array+0xc>
    4e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4e72:	4798      	blx	r3
    4e74:	3501      	adds	r5, #1
    4e76:	e7f2      	b.n	4e5e <__libc_init_array+0x1e>
    4e78:	00005274 	.word	0x00005274
    4e7c:	00005274 	.word	0x00005274
    4e80:	00005274 	.word	0x00005274
    4e84:	00005278 	.word	0x00005278

00004e88 <memset>:
    4e88:	4402      	add	r2, r0
    4e8a:	4603      	mov	r3, r0
    4e8c:	4293      	cmp	r3, r2
    4e8e:	d100      	bne.n	4e92 <memset+0xa>
    4e90:	4770      	bx	lr
    4e92:	f803 1b01 	strb.w	r1, [r3], #1
    4e96:	e7f9      	b.n	4e8c <memset+0x4>
    4e98:	682f2e2e 	.word	0x682f2e2e
    4e9c:	732f6c61 	.word	0x732f6c61
    4ea0:	682f6372 	.word	0x682f6372
    4ea4:	615f6c61 	.word	0x615f6c61
    4ea8:	735f6364 	.word	0x735f6364
    4eac:	2e636e79 	.word	0x2e636e79
    4eb0:	00000063 	.word	0x00000063
    4eb4:	682f2e2e 	.word	0x682f2e2e
    4eb8:	732f6c61 	.word	0x732f6c61
    4ebc:	682f6372 	.word	0x682f6372
    4ec0:	635f6c61 	.word	0x635f6c61
    4ec4:	72656d61 	.word	0x72656d61
    4ec8:	73615f61 	.word	0x73615f61
    4ecc:	2e636e79 	.word	0x2e636e79
    4ed0:	00000063 	.word	0x00000063
    4ed4:	682f2e2e 	.word	0x682f2e2e
    4ed8:	732f6c61 	.word	0x732f6c61
    4edc:	682f6372 	.word	0x682f6372
    4ee0:	6d5f6c61 	.word	0x6d5f6c61
    4ee4:	735f6963 	.word	0x735f6963
    4ee8:	2e636e79 	.word	0x2e636e79
    4eec:	00000063 	.word	0x00000063
    4ef0:	682f2e2e 	.word	0x682f2e2e
    4ef4:	732f6c61 	.word	0x732f6c61
    4ef8:	682f6372 	.word	0x682f6372
    4efc:	705f6c61 	.word	0x705f6c61
    4f00:	632e6d77 	.word	0x632e6d77
    4f04:	00000000 	.word	0x00000000
    4f08:	682f2e2e 	.word	0x682f2e2e
    4f0c:	732f6c61 	.word	0x732f6c61
    4f10:	682f6372 	.word	0x682f6372
    4f14:	745f6c61 	.word	0x745f6c61
    4f18:	72656d69 	.word	0x72656d69
    4f1c:	0000632e 	.word	0x0000632e
    4f20:	682f2e2e 	.word	0x682f2e2e
    4f24:	732f6c61 	.word	0x732f6c61
    4f28:	682f6372 	.word	0x682f6372
    4f2c:	755f6c61 	.word	0x755f6c61
    4f30:	74726173 	.word	0x74726173
    4f34:	7973615f 	.word	0x7973615f
    4f38:	632e636e 	.word	0x632e636e
    4f3c:	00000000 	.word	0x00000000
    4f40:	682f2e2e 	.word	0x682f2e2e
    4f44:	752f6c61 	.word	0x752f6c61
    4f48:	736c6974 	.word	0x736c6974
    4f4c:	6372732f 	.word	0x6372732f
    4f50:	6974752f 	.word	0x6974752f
    4f54:	6c5f736c 	.word	0x6c5f736c
    4f58:	2e747369 	.word	0x2e747369
    4f5c:	00000063 	.word	0x00000063
    4f60:	682f2e2e 	.word	0x682f2e2e
    4f64:	752f6c61 	.word	0x752f6c61
    4f68:	736c6974 	.word	0x736c6974
    4f6c:	6372732f 	.word	0x6372732f
    4f70:	6974752f 	.word	0x6974752f
    4f74:	725f736c 	.word	0x725f736c
    4f78:	62676e69 	.word	0x62676e69
    4f7c:	65666675 	.word	0x65666675
    4f80:	00632e72 	.word	0x00632e72

00004f84 <_adcs>:
    4f84:	00000000 00000018 00001800 00000000     ................
	...
    4f9c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    4fac:	632e6364 00000000                       dc.c....

00004fb4 <_cfgs>:
    4fb4:	00205000 0a000000 00000000 00000000     .P .............
	...

000050b4 <_map>:
    50b4:	00000006 00000036 00000007 00000037     ....6.......7...
    50c4:	00000009 00000019 0000000e 0000002e     ................
    50d4:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    50e4:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    50f4:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    5104:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    5114:	43000000 43000400                       ...C...C

0000511c <_usarts>:
    511c:	00000005 40100004 00030000 00700002     .......@......p.
    512c:	0000ff58 00000000                       X.......

00005134 <_i2cms>:
	...

0000514c <_i2css>:
	...

0000515c <sercomspi_regs>:
	...
    5170:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5180:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    5190:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    51a0:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    51b0:	63745f6c 0000632e                       l_tc.c..

000051b8 <sd_mmc_trans_units>:
    51b8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000051d4 <sd_trans_multipliers>:
    51d4:	00000000 0000000a 0000000c 0000000d     ................
    51e4:	0000000f 00000014 00000019 0000001e     ................
    51f4:	00000023 00000028 0000002d 00000032     #...(...-...2...
    5204:	00000037 0000003c 00000046 00000050     7...<...F...P...

00005214 <mmc_trans_multipliers>:
    5214:	00000000 0000000a 0000000c 0000000d     ................
    5224:	0000000f 00000014 0000001a 0000001e     ................
    5234:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5244:	00000037 0000003c 00000046 00000050     7...<...F...P...
    5254:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    5264:	0000632e                                .c..

00005268 <_init>:
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    526a:	bf00      	nop
    526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    526e:	bc08      	pop	{r3}
    5270:	469e      	mov	lr, r3
    5272:	4770      	bx	lr

00005274 <__init_array_start>:
    5274:	00000289 	.word	0x00000289

00005278 <_fini>:
    5278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    527a:	bf00      	nop
    527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    527e:	bc08      	pop	{r3}
    5280:	469e      	mov	lr, r3
    5282:	4770      	bx	lr

00005284 <__fini_array_start>:
    5284:	00000265 	.word	0x00000265
