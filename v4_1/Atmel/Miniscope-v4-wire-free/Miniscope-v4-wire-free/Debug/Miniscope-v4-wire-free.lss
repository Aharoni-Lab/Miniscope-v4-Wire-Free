
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000045c4  000045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  000045cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
  5 .bss          00028b9c  20000040  00004610  00020040  2**4
                  ALLOC
  6 .stack        00010004  20028bdc  0002d1ac  00020040  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003f8e3  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000057a9  00000000  00000000  0005f9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018420  00000000  00000000  0006514b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001410  00000000  00000000  0007d56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014c0  00000000  00000000  0007e97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00032f00  00000000  00000000  0007fe3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001ed6c  00000000  00000000  000b2d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100763  00000000  00000000  000d1aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000034ec  00000000  00000000  001d220c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 41 1e 00 00     ............A...
      8c:	4d 1e 00 00 e5 02 00 00 59 1e 00 00 e5 02 00 00     M.......Y.......
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 65 1e 00 00     ............e...
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e1 1b 00 00 ed 1b 00 00 f9 1b 00 00 05 1c 00 00     ................
      cc:	11 1c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	ed 1f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 89 29 00 00 9d 29 00 00 b1 29 00 00     .....)...)...)..
     154:	c5 29 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .)..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e1 2e 00 00     ................
     1f0:	f5 2e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 c1 1f 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	000045cc 	.word	0x000045cc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000045cc 	.word	0x000045cc
     2c4:	20000044 	.word	0x20000044
     2c8:	000045cc 	.word	0x000045cc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	00003e51 	.word	0x00003e51

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	000045cc 	.word	0x000045cc
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028bdc 	.word	0x20028bdc
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	0000417d 	.word	0x0000417d
     360:	000031cd 	.word	0x000031cd

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002e9b 	.word	0x00002e9b
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	00001275 	.word	0x00001275

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e19 	.word	0x00000e19

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	000014f1 	.word	0x000014f1
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000f1d 	.word	0x00000f1d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	00002e9f 	.word	0x00002e9f
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	00001179 	.word	0x00001179

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	0000197d 	.word	0x0000197d
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	000041d4 	.word	0x000041d4
     c6c:	00001585 	.word	0x00001585
     c70:	000018b5 	.word	0x000018b5

00000c74 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
	ASSERT(descr);
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3

	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	000041d4 	.word	0x000041d4
     c98:	00001585 	.word	0x00001585
     c9c:	000018ed 	.word	0x000018ed

00000ca0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
	uint16_t offset = 0;
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
		buffer[offset] = result;
     d10:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>

	return offset;
}
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	00001585 	.word	0x00001585
     d2c:	00001903 	.word	0x00001903
     d30:	00001923 	.word	0x00001923
     d34:	00001917 	.word	0x00001917
     d38:	00001939 	.word	0x00001939
     d3c:	000041d4 	.word	0x000041d4

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	000041f0 	.word	0x000041f0
     d94:	00001585 	.word	0x00001585
     d98:	00001f89 	.word	0x00001f89
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	000029ed 	.word	0x000029ed

00000db4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     db4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	00001961 	.word	0x00001961
     dd0:	000029f9 	.word	0x000029f9

00000dd4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     dd4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     dd6:	2504      	movs	r5, #4
     dd8:	2400      	movs	r4, #0

	while (upper >= lower) {
     dda:	e007      	b.n	dec <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     ddc:	4a0d      	ldr	r2, [pc, #52]	; (e14 <process_ext_irq+0x40>)
     dde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     de2:	b1b3      	cbz	r3, e12 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     de4:	4798      	blx	r3
     de6:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     de8:	3a01      	subs	r2, #1
     dea:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     dec:	42ac      	cmp	r4, r5
     dee:	d810      	bhi.n	e12 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     df0:	192b      	adds	r3, r5, r4
     df2:	105b      	asrs	r3, r3, #1
     df4:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     df6:	2a03      	cmp	r2, #3
     df8:	d80b      	bhi.n	e12 <process_ext_irq+0x3e>
     dfa:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     dfc:	4905      	ldr	r1, [pc, #20]	; (e14 <process_ext_irq+0x40>)
     dfe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e02:	6849      	ldr	r1, [r1, #4]
     e04:	4281      	cmp	r1, r0
     e06:	d0e9      	beq.n	ddc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     e08:	4281      	cmp	r1, r0
     e0a:	d2ed      	bcs.n	de8 <process_ext_irq+0x14>
			lower = middle + 1;
     e0c:	3201      	adds	r2, #1
     e0e:	b2d4      	uxtb	r4, r2
     e10:	e7ec      	b.n	dec <process_ext_irq+0x18>
     e12:	bd38      	pop	{r3, r4, r5, pc}
     e14:	20000070 	.word	0x20000070

00000e18 <ext_irq_init>:
{
     e18:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e1a:	2300      	movs	r3, #0
     e1c:	e00a      	b.n	e34 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e1e:	4a08      	ldr	r2, [pc, #32]	; (e40 <ext_irq_init+0x28>)
     e20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e24:	f04f 30ff 	mov.w	r0, #4294967295
     e28:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     e2a:	2100      	movs	r1, #0
     e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e30:	3301      	adds	r3, #1
     e32:	b29b      	uxth	r3, r3
     e34:	2b03      	cmp	r3, #3
     e36:	d9f2      	bls.n	e1e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     e38:	4802      	ldr	r0, [pc, #8]	; (e44 <ext_irq_init+0x2c>)
     e3a:	4b03      	ldr	r3, [pc, #12]	; (e48 <ext_irq_init+0x30>)
     e3c:	4798      	blx	r3
}
     e3e:	bd08      	pop	{r3, pc}
     e40:	20000070 	.word	0x20000070
     e44:	00000dd5 	.word	0x00000dd5
     e48:	00001ce1 	.word	0x00001ce1

00000e4c <ext_irq_register>:
{
     e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4e:	b083      	sub	sp, #12
     e50:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     e52:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e54:	2b03      	cmp	r3, #3
     e56:	d80e      	bhi.n	e76 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     e58:	4618      	mov	r0, r3
     e5a:	4a2e      	ldr	r2, [pc, #184]	; (f14 <ext_irq_register+0xc8>)
     e5c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e60:	6852      	ldr	r2, [r2, #4]
     e62:	42a2      	cmp	r2, r4
     e64:	d002      	beq.n	e6c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e66:	3301      	adds	r3, #1
     e68:	b2db      	uxtb	r3, r3
     e6a:	e7f3      	b.n	e54 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     e6c:	4b29      	ldr	r3, [pc, #164]	; (f14 <ext_irq_register+0xc8>)
     e6e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     e72:	2701      	movs	r7, #1
			break;
     e74:	e000      	b.n	e78 <ext_irq_register+0x2c>
	bool    found = false;
     e76:	2700      	movs	r7, #0
	if (NULL == cb) {
     e78:	b159      	cbz	r1, e92 <ext_irq_register+0x46>
	if (!found) {
     e7a:	2f00      	cmp	r7, #0
     e7c:	d13d      	bne.n	efa <ext_irq_register+0xae>
     e7e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e80:	2b03      	cmp	r3, #3
     e82:	d813      	bhi.n	eac <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     e84:	4a23      	ldr	r2, [pc, #140]	; (f14 <ext_irq_register+0xc8>)
     e86:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     e8a:	b142      	cbz	r2, e9e <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e8c:	3301      	adds	r3, #1
     e8e:	b2db      	uxtb	r3, r3
     e90:	e7f6      	b.n	e80 <ext_irq_register+0x34>
		if (!found) {
     e92:	2f00      	cmp	r7, #0
     e94:	d038      	beq.n	f08 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     e96:	4620      	mov	r0, r4
     e98:	4b1f      	ldr	r3, [pc, #124]	; (f18 <ext_irq_register+0xcc>)
     e9a:	4798      	blx	r3
     e9c:	e032      	b.n	f04 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     e9e:	4a1d      	ldr	r2, [pc, #116]	; (f14 <ext_irq_register+0xc8>)
     ea0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     ea4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ea8:	6054      	str	r4, [r2, #4]
				found           = true;
     eaa:	2701      	movs	r7, #1
     eac:	2200      	movs	r2, #0
     eae:	e001      	b.n	eb4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     eb0:	3201      	adds	r2, #1
     eb2:	b2d2      	uxtb	r2, r2
     eb4:	2a03      	cmp	r2, #3
     eb6:	d820      	bhi.n	efa <ext_irq_register+0xae>
     eb8:	2b03      	cmp	r3, #3
     eba:	d81e      	bhi.n	efa <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     ebc:	469e      	mov	lr, r3
     ebe:	4915      	ldr	r1, [pc, #84]	; (f14 <ext_irq_register+0xc8>)
     ec0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ec4:	6840      	ldr	r0, [r0, #4]
     ec6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eca:	6849      	ldr	r1, [r1, #4]
     ecc:	4288      	cmp	r0, r1
     ece:	d2ef      	bcs.n	eb0 <ext_irq_register+0x64>
     ed0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ed4:	d0ec      	beq.n	eb0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     ed6:	4e0f      	ldr	r6, [pc, #60]	; (f14 <ext_irq_register+0xc8>)
     ed8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     edc:	e895 0003 	ldmia.w	r5, {r0, r1}
     ee0:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     ee4:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     ee8:	e896 0003 	ldmia.w	r6, {r0, r1}
     eec:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     ef0:	e89d 0003 	ldmia.w	sp, {r0, r1}
     ef4:	e886 0003 	stmia.w	r6, {r0, r1}
     ef8:	e7da      	b.n	eb0 <ext_irq_register+0x64>
	if (!found) {
     efa:	b147      	cbz	r7, f0e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     efc:	2101      	movs	r1, #1
     efe:	4620      	mov	r0, r4
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <ext_irq_register+0xcc>)
     f02:	4798      	blx	r3
}
     f04:	b003      	add	sp, #12
     f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     f08:	f06f 000c 	mvn.w	r0, #12
     f0c:	e7fa      	b.n	f04 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     f0e:	f06f 000c 	mvn.w	r0, #12
     f12:	e7f7      	b.n	f04 <ext_irq_register+0xb8>
     f14:	20000070 	.word	0x20000070
     f18:	00001de9 	.word	0x00001de9

00000f1c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     f1c:	b538      	push	{r3, r4, r5, lr}
     f1e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     f20:	4605      	mov	r5, r0
     f22:	b160      	cbz	r0, f3e <mci_sync_init+0x22>
     f24:	b149      	cbz	r1, f3a <mci_sync_init+0x1e>
     f26:	2001      	movs	r0, #1
     f28:	2231      	movs	r2, #49	; 0x31
     f2a:	4906      	ldr	r1, [pc, #24]	; (f44 <mci_sync_init+0x28>)
     f2c:	4b06      	ldr	r3, [pc, #24]	; (f48 <mci_sync_init+0x2c>)
     f2e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     f30:	4621      	mov	r1, r4
     f32:	4628      	mov	r0, r5
     f34:	4b05      	ldr	r3, [pc, #20]	; (f4c <mci_sync_init+0x30>)
     f36:	4798      	blx	r3
}
     f38:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     f3a:	2000      	movs	r0, #0
     f3c:	e7f4      	b.n	f28 <mci_sync_init+0xc>
     f3e:	2000      	movs	r0, #0
     f40:	e7f2      	b.n	f28 <mci_sync_init+0xc>
     f42:	bf00      	nop
     f44:	00004210 	.word	0x00004210
     f48:	00001585 	.word	0x00001585
     f4c:	00002245 	.word	0x00002245

00000f50 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     f50:	b5f0      	push	{r4, r5, r6, r7, lr}
     f52:	b083      	sub	sp, #12
     f54:	460d      	mov	r5, r1
     f56:	4616      	mov	r6, r2
     f58:	461f      	mov	r7, r3
	ASSERT(mci);
     f5a:	4604      	mov	r4, r0
     f5c:	2244      	movs	r2, #68	; 0x44
     f5e:	4908      	ldr	r1, [pc, #32]	; (f80 <mci_sync_select_device+0x30>)
     f60:	3000      	adds	r0, #0
     f62:	bf18      	it	ne
     f64:	2001      	movne	r0, #1
     f66:	4b07      	ldr	r3, [pc, #28]	; (f84 <mci_sync_select_device+0x34>)
     f68:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     f6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f6e:	9300      	str	r3, [sp, #0]
     f70:	463b      	mov	r3, r7
     f72:	4632      	mov	r2, r6
     f74:	4629      	mov	r1, r5
     f76:	4620      	mov	r0, r4
     f78:	4c03      	ldr	r4, [pc, #12]	; (f88 <mci_sync_select_device+0x38>)
     f7a:	47a0      	blx	r4
}
     f7c:	b003      	add	sp, #12
     f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f80:	00004210 	.word	0x00004210
     f84:	00001585 	.word	0x00001585
     f88:	000022ad 	.word	0x000022ad

00000f8c <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     f8c:	b538      	push	{r3, r4, r5, lr}
     f8e:	460d      	mov	r5, r1
	ASSERT(mci);
     f90:	4604      	mov	r4, r0
     f92:	224d      	movs	r2, #77	; 0x4d
     f94:	4905      	ldr	r1, [pc, #20]	; (fac <mci_sync_deselect_device+0x20>)
     f96:	3000      	adds	r0, #0
     f98:	bf18      	it	ne
     f9a:	2001      	movne	r0, #1
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <mci_sync_deselect_device+0x24>)
     f9e:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     fa0:	4629      	mov	r1, r5
     fa2:	4620      	mov	r0, r4
     fa4:	4b03      	ldr	r3, [pc, #12]	; (fb4 <mci_sync_deselect_device+0x28>)
     fa6:	4798      	blx	r3
}
     fa8:	bd38      	pop	{r3, r4, r5, pc}
     faa:	bf00      	nop
     fac:	00004210 	.word	0x00004210
     fb0:	00001585 	.word	0x00001585
     fb4:	00002341 	.word	0x00002341

00000fb8 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
     fb8:	b538      	push	{r3, r4, r5, lr}
     fba:	460d      	mov	r5, r1
	ASSERT(mci);
     fbc:	4604      	mov	r4, r0
     fbe:	2256      	movs	r2, #86	; 0x56
     fc0:	4905      	ldr	r1, [pc, #20]	; (fd8 <mci_sync_get_bus_width+0x20>)
     fc2:	3000      	adds	r0, #0
     fc4:	bf18      	it	ne
     fc6:	2001      	movne	r0, #1
     fc8:	4b04      	ldr	r3, [pc, #16]	; (fdc <mci_sync_get_bus_width+0x24>)
     fca:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
     fcc:	4629      	mov	r1, r5
     fce:	4620      	mov	r0, r4
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <mci_sync_get_bus_width+0x28>)
     fd2:	4798      	blx	r3
}
     fd4:	bd38      	pop	{r3, r4, r5, pc}
     fd6:	bf00      	nop
     fd8:	00004210 	.word	0x00004210
     fdc:	00001585 	.word	0x00001585
     fe0:	00002345 	.word	0x00002345

00000fe4 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
     fe4:	b510      	push	{r4, lr}
	ASSERT(mci);
     fe6:	4604      	mov	r4, r0
     fe8:	2260      	movs	r2, #96	; 0x60
     fea:	4905      	ldr	r1, [pc, #20]	; (1000 <mci_sync_is_high_speed_capable+0x1c>)
     fec:	3000      	adds	r0, #0
     fee:	bf18      	it	ne
     ff0:	2001      	movne	r0, #1
     ff2:	4b04      	ldr	r3, [pc, #16]	; (1004 <mci_sync_is_high_speed_capable+0x20>)
     ff4:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
     ff6:	4620      	mov	r0, r4
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <mci_sync_is_high_speed_capable+0x24>)
     ffa:	4798      	blx	r3
}
     ffc:	bd10      	pop	{r4, pc}
     ffe:	bf00      	nop
    1000:	00004210 	.word	0x00004210
    1004:	00001585 	.word	0x00001585
    1008:	0000234f 	.word	0x0000234f

0000100c <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    100c:	b510      	push	{r4, lr}
	ASSERT(mci);
    100e:	4604      	mov	r4, r0
    1010:	2269      	movs	r2, #105	; 0x69
    1012:	4905      	ldr	r1, [pc, #20]	; (1028 <mci_sync_send_clock+0x1c>)
    1014:	3000      	adds	r0, #0
    1016:	bf18      	it	ne
    1018:	2001      	movne	r0, #1
    101a:	4b04      	ldr	r3, [pc, #16]	; (102c <mci_sync_send_clock+0x20>)
    101c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    101e:	4620      	mov	r0, r4
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <mci_sync_send_clock+0x24>)
    1022:	4798      	blx	r3
    1024:	bd10      	pop	{r4, pc}
    1026:	bf00      	nop
    1028:	00004210 	.word	0x00004210
    102c:	00001585 	.word	0x00001585
    1030:	00002359 	.word	0x00002359

00001034 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    1034:	b570      	push	{r4, r5, r6, lr}
    1036:	460d      	mov	r5, r1
    1038:	4616      	mov	r6, r2
	ASSERT(mci);
    103a:	4604      	mov	r4, r0
    103c:	2272      	movs	r2, #114	; 0x72
    103e:	4906      	ldr	r1, [pc, #24]	; (1058 <mci_sync_send_cmd+0x24>)
    1040:	3000      	adds	r0, #0
    1042:	bf18      	it	ne
    1044:	2001      	movne	r0, #1
    1046:	4b05      	ldr	r3, [pc, #20]	; (105c <mci_sync_send_cmd+0x28>)
    1048:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    104a:	4632      	mov	r2, r6
    104c:	4629      	mov	r1, r5
    104e:	4620      	mov	r0, r4
    1050:	4b03      	ldr	r3, [pc, #12]	; (1060 <mci_sync_send_cmd+0x2c>)
    1052:	4798      	blx	r3
}
    1054:	bd70      	pop	{r4, r5, r6, pc}
    1056:	bf00      	nop
    1058:	00004210 	.word	0x00004210
    105c:	00001585 	.word	0x00001585
    1060:	00002391 	.word	0x00002391

00001064 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1064:	b510      	push	{r4, lr}
	ASSERT(mci);
    1066:	4604      	mov	r4, r0
    1068:	227b      	movs	r2, #123	; 0x7b
    106a:	4905      	ldr	r1, [pc, #20]	; (1080 <mci_sync_get_response+0x1c>)
    106c:	3000      	adds	r0, #0
    106e:	bf18      	it	ne
    1070:	2001      	movne	r0, #1
    1072:	4b04      	ldr	r3, [pc, #16]	; (1084 <mci_sync_get_response+0x20>)
    1074:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    1076:	4620      	mov	r0, r4
    1078:	4b03      	ldr	r3, [pc, #12]	; (1088 <mci_sync_get_response+0x24>)
    107a:	4798      	blx	r3
}
    107c:	bd10      	pop	{r4, pc}
    107e:	bf00      	nop
    1080:	00004210 	.word	0x00004210
    1084:	00001585 	.word	0x00001585
    1088:	000023e9 	.word	0x000023e9

0000108c <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    108c:	b538      	push	{r3, r4, r5, lr}
    108e:	460c      	mov	r4, r1
	ASSERT(mci && response);
    1090:	4605      	mov	r5, r0
    1092:	b160      	cbz	r0, 10ae <mci_sync_get_response_128+0x22>
    1094:	b149      	cbz	r1, 10aa <mci_sync_get_response_128+0x1e>
    1096:	2001      	movs	r0, #1
    1098:	2284      	movs	r2, #132	; 0x84
    109a:	4906      	ldr	r1, [pc, #24]	; (10b4 <mci_sync_get_response_128+0x28>)
    109c:	4b06      	ldr	r3, [pc, #24]	; (10b8 <mci_sync_get_response_128+0x2c>)
    109e:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    10a0:	4621      	mov	r1, r4
    10a2:	4628      	mov	r0, r5
    10a4:	4b05      	ldr	r3, [pc, #20]	; (10bc <mci_sync_get_response_128+0x30>)
    10a6:	4798      	blx	r3
    10a8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    10aa:	2000      	movs	r0, #0
    10ac:	e7f4      	b.n	1098 <mci_sync_get_response_128+0xc>
    10ae:	2000      	movs	r0, #0
    10b0:	e7f2      	b.n	1098 <mci_sync_get_response_128+0xc>
    10b2:	bf00      	nop
    10b4:	00004210 	.word	0x00004210
    10b8:	00001585 	.word	0x00001585
    10bc:	00002415 	.word	0x00002415

000010c0 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	b083      	sub	sp, #12
    10c4:	460d      	mov	r5, r1
    10c6:	4616      	mov	r6, r2
    10c8:	461f      	mov	r7, r3
	ASSERT(mci);
    10ca:	4604      	mov	r4, r0
    10cc:	2290      	movs	r2, #144	; 0x90
    10ce:	490a      	ldr	r1, [pc, #40]	; (10f8 <mci_sync_adtc_start+0x38>)
    10d0:	3000      	adds	r0, #0
    10d2:	bf18      	it	ne
    10d4:	2001      	movne	r0, #1
    10d6:	4b09      	ldr	r3, [pc, #36]	; (10fc <mci_sync_adtc_start+0x3c>)
    10d8:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    10da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    10de:	9301      	str	r3, [sp, #4]
    10e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    10e4:	9300      	str	r3, [sp, #0]
    10e6:	463b      	mov	r3, r7
    10e8:	4632      	mov	r2, r6
    10ea:	4629      	mov	r1, r5
    10ec:	4620      	mov	r0, r4
    10ee:	4c04      	ldr	r4, [pc, #16]	; (1100 <mci_sync_adtc_start+0x40>)
    10f0:	47a0      	blx	r4
}
    10f2:	b003      	add	sp, #12
    10f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f6:	bf00      	nop
    10f8:	00004210 	.word	0x00004210
    10fc:	00001585 	.word	0x00001585
    1100:	0000246d 	.word	0x0000246d

00001104 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    1104:	b570      	push	{r4, r5, r6, lr}
    1106:	460c      	mov	r4, r1
    1108:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    110a:	4605      	mov	r5, r0
    110c:	b168      	cbz	r0, 112a <mci_sync_start_read_blocks+0x26>
    110e:	b151      	cbz	r1, 1126 <mci_sync_start_read_blocks+0x22>
    1110:	2001      	movs	r0, #1
    1112:	22b5      	movs	r2, #181	; 0xb5
    1114:	4906      	ldr	r1, [pc, #24]	; (1130 <mci_sync_start_read_blocks+0x2c>)
    1116:	4b07      	ldr	r3, [pc, #28]	; (1134 <mci_sync_start_read_blocks+0x30>)
    1118:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    111a:	4632      	mov	r2, r6
    111c:	4621      	mov	r1, r4
    111e:	4628      	mov	r0, r5
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <mci_sync_start_read_blocks+0x34>)
    1122:	4798      	blx	r3
}
    1124:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    1126:	2000      	movs	r0, #0
    1128:	e7f3      	b.n	1112 <mci_sync_start_read_blocks+0xe>
    112a:	2000      	movs	r0, #0
    112c:	e7f1      	b.n	1112 <mci_sync_start_read_blocks+0xe>
    112e:	bf00      	nop
    1130:	00004210 	.word	0x00004210
    1134:	00001585 	.word	0x00001585
    1138:	00002621 	.word	0x00002621

0000113c <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    113c:	b510      	push	{r4, lr}
	ASSERT(mci);
    113e:	4604      	mov	r4, r0
    1140:	22c7      	movs	r2, #199	; 0xc7
    1142:	4905      	ldr	r1, [pc, #20]	; (1158 <mci_sync_wait_end_of_read_blocks+0x1c>)
    1144:	3000      	adds	r0, #0
    1146:	bf18      	it	ne
    1148:	2001      	movne	r0, #1
    114a:	4b04      	ldr	r3, [pc, #16]	; (115c <mci_sync_wait_end_of_read_blocks+0x20>)
    114c:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    114e:	4620      	mov	r0, r4
    1150:	4b03      	ldr	r3, [pc, #12]	; (1160 <mci_sync_wait_end_of_read_blocks+0x24>)
    1152:	4798      	blx	r3
}
    1154:	bd10      	pop	{r4, pc}
    1156:	bf00      	nop
    1158:	00004210 	.word	0x00004210
    115c:	00001585 	.word	0x00001585
    1160:	000026a1 	.word	0x000026a1

00001164 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1164:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1166:	6943      	ldr	r3, [r0, #20]
    1168:	b103      	cbz	r3, 116c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    116a:	4798      	blx	r3
    116c:	bd08      	pop	{r3, pc}

0000116e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    116e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1170:	6983      	ldr	r3, [r0, #24]
    1172:	b103      	cbz	r3, 1176 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1174:	4798      	blx	r3
    1176:	bd08      	pop	{r3, pc}

00001178 <pwm_init>:
{
    1178:	b538      	push	{r3, r4, r5, lr}
    117a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    117c:	4604      	mov	r4, r0
    117e:	b188      	cbz	r0, 11a4 <pwm_init+0x2c>
    1180:	b171      	cbz	r1, 11a0 <pwm_init+0x28>
    1182:	2001      	movs	r0, #1
    1184:	2233      	movs	r2, #51	; 0x33
    1186:	4908      	ldr	r1, [pc, #32]	; (11a8 <pwm_init+0x30>)
    1188:	4b08      	ldr	r3, [pc, #32]	; (11ac <pwm_init+0x34>)
    118a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    118c:	4629      	mov	r1, r5
    118e:	4620      	mov	r0, r4
    1190:	4b07      	ldr	r3, [pc, #28]	; (11b0 <pwm_init+0x38>)
    1192:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1194:	4b07      	ldr	r3, [pc, #28]	; (11b4 <pwm_init+0x3c>)
    1196:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1198:	4b07      	ldr	r3, [pc, #28]	; (11b8 <pwm_init+0x40>)
    119a:	6063      	str	r3, [r4, #4]
}
    119c:	2000      	movs	r0, #0
    119e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    11a0:	2000      	movs	r0, #0
    11a2:	e7ef      	b.n	1184 <pwm_init+0xc>
    11a4:	2000      	movs	r0, #0
    11a6:	e7ed      	b.n	1184 <pwm_init+0xc>
    11a8:	0000422c 	.word	0x0000422c
    11ac:	00001585 	.word	0x00001585
    11b0:	00002cf5 	.word	0x00002cf5
    11b4:	00001165 	.word	0x00001165
    11b8:	0000116f 	.word	0x0000116f

000011bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    11bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    11be:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    11c0:	b117      	cbz	r7, 11c8 <timer_add_timer_task+0xc>
    11c2:	463c      	mov	r4, r7
    11c4:	2600      	movs	r6, #0
    11c6:	e00b      	b.n	11e0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    11c8:	4b0e      	ldr	r3, [pc, #56]	; (1204 <timer_add_timer_task+0x48>)
    11ca:	4798      	blx	r3
		return;
    11cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    11ce:	68a5      	ldr	r5, [r4, #8]
    11d0:	442b      	add	r3, r5
    11d2:	1a9b      	subs	r3, r3, r2
    11d4:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    11d6:	688d      	ldr	r5, [r1, #8]
    11d8:	42ab      	cmp	r3, r5
    11da:	d209      	bcs.n	11f0 <timer_add_timer_task+0x34>
			break;
		prev = it;
    11dc:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    11de:	6824      	ldr	r4, [r4, #0]
    11e0:	b134      	cbz	r4, 11f0 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    11e2:	6863      	ldr	r3, [r4, #4]
    11e4:	4293      	cmp	r3, r2
    11e6:	d8f2      	bhi.n	11ce <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    11e8:	68a5      	ldr	r5, [r4, #8]
    11ea:	1a9b      	subs	r3, r3, r2
    11ec:	442b      	add	r3, r5
    11ee:	e7f2      	b.n	11d6 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    11f0:	42bc      	cmp	r4, r7
    11f2:	d003      	beq.n	11fc <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    11f4:	4630      	mov	r0, r6
    11f6:	4b04      	ldr	r3, [pc, #16]	; (1208 <timer_add_timer_task+0x4c>)
    11f8:	4798      	blx	r3
    11fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    11fc:	4b01      	ldr	r3, [pc, #4]	; (1204 <timer_add_timer_task+0x48>)
    11fe:	4798      	blx	r3
    1200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1202:	bf00      	nop
    1204:	000015a1 	.word	0x000015a1
    1208:	000015cd 	.word	0x000015cd

0000120c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    120e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1210:	6906      	ldr	r6, [r0, #16]
    1212:	3601      	adds	r6, #1
    1214:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1216:	7e03      	ldrb	r3, [r0, #24]
    1218:	f013 0f01 	tst.w	r3, #1
    121c:	d105      	bne.n	122a <timer_process_counted+0x1e>
    121e:	7e03      	ldrb	r3, [r0, #24]
    1220:	f013 0f02 	tst.w	r3, #2
    1224:	d101      	bne.n	122a <timer_process_counted+0x1e>
    1226:	4605      	mov	r5, r0
    1228:	e009      	b.n	123e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    122a:	7e03      	ldrb	r3, [r0, #24]
    122c:	f043 0302 	orr.w	r3, r3, #2
    1230:	7603      	strb	r3, [r0, #24]
		return;
    1232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1234:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1236:	68e3      	ldr	r3, [r4, #12]
    1238:	4620      	mov	r0, r4
    123a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    123c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    123e:	b19c      	cbz	r4, 1268 <timer_process_counted+0x5c>
    1240:	6863      	ldr	r3, [r4, #4]
    1242:	1af3      	subs	r3, r6, r3
    1244:	68a2      	ldr	r2, [r4, #8]
    1246:	4293      	cmp	r3, r2
    1248:	d30e      	bcc.n	1268 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    124a:	f105 0714 	add.w	r7, r5, #20
    124e:	4638      	mov	r0, r7
    1250:	4b06      	ldr	r3, [pc, #24]	; (126c <timer_process_counted+0x60>)
    1252:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1254:	7c23      	ldrb	r3, [r4, #16]
    1256:	2b01      	cmp	r3, #1
    1258:	d1ec      	bne.n	1234 <timer_process_counted+0x28>
			tmp->time_label = time;
    125a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    125c:	4632      	mov	r2, r6
    125e:	4621      	mov	r1, r4
    1260:	4638      	mov	r0, r7
    1262:	4b03      	ldr	r3, [pc, #12]	; (1270 <timer_process_counted+0x64>)
    1264:	4798      	blx	r3
    1266:	e7e5      	b.n	1234 <timer_process_counted+0x28>
    1268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    126a:	bf00      	nop
    126c:	000015d5 	.word	0x000015d5
    1270:	000011bd 	.word	0x000011bd

00001274 <timer_init>:
{
    1274:	b538      	push	{r3, r4, r5, lr}
    1276:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1278:	4604      	mov	r4, r0
    127a:	b180      	cbz	r0, 129e <timer_init+0x2a>
    127c:	b169      	cbz	r1, 129a <timer_init+0x26>
    127e:	2001      	movs	r0, #1
    1280:	223b      	movs	r2, #59	; 0x3b
    1282:	4908      	ldr	r1, [pc, #32]	; (12a4 <timer_init+0x30>)
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <timer_init+0x34>)
    1286:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1288:	4629      	mov	r1, r5
    128a:	4620      	mov	r0, r4
    128c:	4b07      	ldr	r3, [pc, #28]	; (12ac <timer_init+0x38>)
    128e:	4798      	blx	r3
	descr->time                           = 0;
    1290:	2000      	movs	r0, #0
    1292:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1294:	4b06      	ldr	r3, [pc, #24]	; (12b0 <timer_init+0x3c>)
    1296:	6023      	str	r3, [r4, #0]
}
    1298:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    129a:	2000      	movs	r0, #0
    129c:	e7f0      	b.n	1280 <timer_init+0xc>
    129e:	2000      	movs	r0, #0
    12a0:	e7ee      	b.n	1280 <timer_init+0xc>
    12a2:	bf00      	nop
    12a4:	00004244 	.word	0x00004244
    12a8:	00001585 	.word	0x00001585
    12ac:	00002b21 	.word	0x00002b21
    12b0:	0000120d 	.word	0x0000120d

000012b4 <timer_start>:
{
    12b4:	b510      	push	{r4, lr}
	ASSERT(descr);
    12b6:	4604      	mov	r4, r0
    12b8:	2253      	movs	r2, #83	; 0x53
    12ba:	4909      	ldr	r1, [pc, #36]	; (12e0 <timer_start+0x2c>)
    12bc:	3000      	adds	r0, #0
    12be:	bf18      	it	ne
    12c0:	2001      	movne	r0, #1
    12c2:	4b08      	ldr	r3, [pc, #32]	; (12e4 <timer_start+0x30>)
    12c4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    12c6:	4620      	mov	r0, r4
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <timer_start+0x34>)
    12ca:	4798      	blx	r3
    12cc:	b920      	cbnz	r0, 12d8 <timer_start+0x24>
	_timer_start(&descr->device);
    12ce:	4620      	mov	r0, r4
    12d0:	4b06      	ldr	r3, [pc, #24]	; (12ec <timer_start+0x38>)
    12d2:	4798      	blx	r3
	return ERR_NONE;
    12d4:	2000      	movs	r0, #0
    12d6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    12d8:	f06f 0010 	mvn.w	r0, #16
}
    12dc:	bd10      	pop	{r4, pc}
    12de:	bf00      	nop
    12e0:	00004244 	.word	0x00004244
    12e4:	00001585 	.word	0x00001585
    12e8:	00002e89 	.word	0x00002e89
    12ec:	00002e75 	.word	0x00002e75

000012f0 <timer_add_task>:
{
    12f0:	b570      	push	{r4, r5, r6, lr}
    12f2:	b082      	sub	sp, #8
    12f4:	460d      	mov	r5, r1
	ASSERT(descr && task);
    12f6:	4604      	mov	r4, r0
    12f8:	b320      	cbz	r0, 1344 <timer_add_task+0x54>
    12fa:	b309      	cbz	r1, 1340 <timer_add_task+0x50>
    12fc:	2001      	movs	r0, #1
    12fe:	227a      	movs	r2, #122	; 0x7a
    1300:	491f      	ldr	r1, [pc, #124]	; (1380 <timer_add_task+0x90>)
    1302:	4b20      	ldr	r3, [pc, #128]	; (1384 <timer_add_task+0x94>)
    1304:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1306:	7e23      	ldrb	r3, [r4, #24]
    1308:	f043 0301 	orr.w	r3, r3, #1
    130c:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    130e:	f104 0614 	add.w	r6, r4, #20
    1312:	4629      	mov	r1, r5
    1314:	4630      	mov	r0, r6
    1316:	4b1c      	ldr	r3, [pc, #112]	; (1388 <timer_add_task+0x98>)
    1318:	4798      	blx	r3
    131a:	b9a8      	cbnz	r0, 1348 <timer_add_task+0x58>
	task->time_label = descr->time;
    131c:	6923      	ldr	r3, [r4, #16]
    131e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1320:	6922      	ldr	r2, [r4, #16]
    1322:	4629      	mov	r1, r5
    1324:	4630      	mov	r0, r6
    1326:	4b19      	ldr	r3, [pc, #100]	; (138c <timer_add_task+0x9c>)
    1328:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    132a:	7e23      	ldrb	r3, [r4, #24]
    132c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1330:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1332:	7e23      	ldrb	r3, [r4, #24]
    1334:	f013 0f02 	tst.w	r3, #2
    1338:	d112      	bne.n	1360 <timer_add_task+0x70>
	return ERR_NONE;
    133a:	2000      	movs	r0, #0
}
    133c:	b002      	add	sp, #8
    133e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1340:	2000      	movs	r0, #0
    1342:	e7dc      	b.n	12fe <timer_add_task+0xe>
    1344:	2000      	movs	r0, #0
    1346:	e7da      	b.n	12fe <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1348:	7e23      	ldrb	r3, [r4, #24]
    134a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    134e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1350:	227f      	movs	r2, #127	; 0x7f
    1352:	490b      	ldr	r1, [pc, #44]	; (1380 <timer_add_task+0x90>)
    1354:	2000      	movs	r0, #0
    1356:	4b0b      	ldr	r3, [pc, #44]	; (1384 <timer_add_task+0x94>)
    1358:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    135a:	f06f 0011 	mvn.w	r0, #17
    135e:	e7ed      	b.n	133c <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1360:	a801      	add	r0, sp, #4
    1362:	4b0b      	ldr	r3, [pc, #44]	; (1390 <timer_add_task+0xa0>)
    1364:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1366:	7e23      	ldrb	r3, [r4, #24]
    1368:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    136c:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    136e:	4620      	mov	r0, r4
    1370:	4b08      	ldr	r3, [pc, #32]	; (1394 <timer_add_task+0xa4>)
    1372:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1374:	a801      	add	r0, sp, #4
    1376:	4b08      	ldr	r3, [pc, #32]	; (1398 <timer_add_task+0xa8>)
    1378:	4798      	blx	r3
	return ERR_NONE;
    137a:	2000      	movs	r0, #0
    137c:	e7de      	b.n	133c <timer_add_task+0x4c>
    137e:	bf00      	nop
    1380:	00004244 	.word	0x00004244
    1384:	00001585 	.word	0x00001585
    1388:	0000158b 	.word	0x0000158b
    138c:	000011bd 	.word	0x000011bd
    1390:	00000d41 	.word	0x00000d41
    1394:	00002ea5 	.word	0x00002ea5
    1398:	00000d4f 	.word	0x00000d4f

0000139c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    139c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    139e:	2300      	movs	r3, #0
    13a0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    13a2:	69c3      	ldr	r3, [r0, #28]
    13a4:	b11b      	cbz	r3, 13ae <usart_transmission_complete+0x12>
    13a6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    13aa:	4610      	mov	r0, r2
    13ac:	4798      	blx	r3
    13ae:	bd08      	pop	{r3, pc}

000013b0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    13b0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    13b2:	2300      	movs	r3, #0
    13b4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    13b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    13b8:	b11b      	cbz	r3, 13c2 <usart_error+0x12>
    13ba:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    13be:	4610      	mov	r0, r2
    13c0:	4798      	blx	r3
    13c2:	bd08      	pop	{r3, pc}

000013c4 <usart_fill_rx_buffer>:
{
    13c4:	b538      	push	{r3, r4, r5, lr}
    13c6:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    13c8:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    13cc:	302c      	adds	r0, #44	; 0x2c
    13ce:	4b03      	ldr	r3, [pc, #12]	; (13dc <usart_fill_rx_buffer+0x18>)
    13d0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    13d2:	6a23      	ldr	r3, [r4, #32]
    13d4:	b10b      	cbz	r3, 13da <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    13d6:	4628      	mov	r0, r5
    13d8:	4798      	blx	r3
    13da:	bd38      	pop	{r3, r4, r5, pc}
    13dc:	00001671 	.word	0x00001671

000013e0 <usart_async_write>:
{
    13e0:	b570      	push	{r4, r5, r6, lr}
    13e2:	460e      	mov	r6, r1
    13e4:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    13e6:	4604      	mov	r4, r0
    13e8:	b1d8      	cbz	r0, 1422 <usart_async_write+0x42>
    13ea:	b1e1      	cbz	r1, 1426 <usart_async_write+0x46>
    13ec:	b9ea      	cbnz	r2, 142a <usart_async_write+0x4a>
    13ee:	2000      	movs	r0, #0
    13f0:	f240 123b 	movw	r2, #315	; 0x13b
    13f4:	490f      	ldr	r1, [pc, #60]	; (1434 <usart_async_write+0x54>)
    13f6:	4b10      	ldr	r3, [pc, #64]	; (1438 <usart_async_write+0x58>)
    13f8:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    13fa:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    13fe:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1402:	429a      	cmp	r2, r3
    1404:	d113      	bne.n	142e <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    1406:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1408:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    140c:	2300      	movs	r3, #0
    140e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1412:	2301      	movs	r3, #1
    1414:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1416:	f104 0008 	add.w	r0, r4, #8
    141a:	4b08      	ldr	r3, [pc, #32]	; (143c <usart_async_write+0x5c>)
    141c:	4798      	blx	r3
	return (int32_t)length;
    141e:	4628      	mov	r0, r5
    1420:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1422:	2000      	movs	r0, #0
    1424:	e7e4      	b.n	13f0 <usart_async_write+0x10>
    1426:	2000      	movs	r0, #0
    1428:	e7e2      	b.n	13f0 <usart_async_write+0x10>
    142a:	2001      	movs	r0, #1
    142c:	e7e0      	b.n	13f0 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    142e:	f06f 001b 	mvn.w	r0, #27
}
    1432:	bd70      	pop	{r4, r5, r6, pc}
    1434:	0000425c 	.word	0x0000425c
    1438:	00001585 	.word	0x00001585
    143c:	00002977 	.word	0x00002977

00001440 <usart_process_byte_sent>:
{
    1440:	b510      	push	{r4, lr}
    1442:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1444:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1446:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    144a:	4293      	cmp	r3, r2
    144c:	d009      	beq.n	1462 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    144e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1450:	1c59      	adds	r1, r3, #1
    1452:	8781      	strh	r1, [r0, #60]	; 0x3c
    1454:	5cd1      	ldrb	r1, [r2, r3]
    1456:	4b04      	ldr	r3, [pc, #16]	; (1468 <usart_process_byte_sent+0x28>)
    1458:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    145a:	4620      	mov	r0, r4
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <usart_process_byte_sent+0x2c>)
    145e:	4798      	blx	r3
    1460:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1462:	4b03      	ldr	r3, [pc, #12]	; (1470 <usart_process_byte_sent+0x30>)
    1464:	4798      	blx	r3
    1466:	bd10      	pop	{r4, pc}
    1468:	00002971 	.word	0x00002971
    146c:	00002977 	.word	0x00002977
    1470:	0000297f 	.word	0x0000297f

00001474 <usart_async_read>:
{
    1474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1478:	b082      	sub	sp, #8
    147a:	4688      	mov	r8, r1
    147c:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    147e:	4605      	mov	r5, r0
    1480:	b1a0      	cbz	r0, 14ac <usart_async_read+0x38>
    1482:	b1a9      	cbz	r1, 14b0 <usart_async_read+0x3c>
    1484:	b9b2      	cbnz	r2, 14b4 <usart_async_read+0x40>
    1486:	2000      	movs	r0, #0
    1488:	f44f 72ac 	mov.w	r2, #344	; 0x158
    148c:	4912      	ldr	r1, [pc, #72]	; (14d8 <usart_async_read+0x64>)
    148e:	4b13      	ldr	r3, [pc, #76]	; (14dc <usart_async_read+0x68>)
    1490:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1492:	a801      	add	r0, sp, #4
    1494:	4b12      	ldr	r3, [pc, #72]	; (14e0 <usart_async_read+0x6c>)
    1496:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1498:	3534      	adds	r5, #52	; 0x34
    149a:	4628      	mov	r0, r5
    149c:	4b11      	ldr	r3, [pc, #68]	; (14e4 <usart_async_read+0x70>)
    149e:	4798      	blx	r3
    14a0:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    14a2:	a801      	add	r0, sp, #4
    14a4:	4b10      	ldr	r3, [pc, #64]	; (14e8 <usart_async_read+0x74>)
    14a6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    14a8:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    14aa:	e00b      	b.n	14c4 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    14ac:	2000      	movs	r0, #0
    14ae:	e7eb      	b.n	1488 <usart_async_read+0x14>
    14b0:	2000      	movs	r0, #0
    14b2:	e7e9      	b.n	1488 <usart_async_read+0x14>
    14b4:	2001      	movs	r0, #1
    14b6:	e7e7      	b.n	1488 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    14b8:	3401      	adds	r4, #1
    14ba:	b2a4      	uxth	r4, r4
    14bc:	4441      	add	r1, r8
    14be:	4628      	mov	r0, r5
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <usart_async_read+0x78>)
    14c2:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    14c4:	4621      	mov	r1, r4
    14c6:	42a7      	cmp	r7, r4
    14c8:	d901      	bls.n	14ce <usart_async_read+0x5a>
    14ca:	42b4      	cmp	r4, r6
    14cc:	d3f4      	bcc.n	14b8 <usart_async_read+0x44>
}
    14ce:	4620      	mov	r0, r4
    14d0:	b002      	add	sp, #8
    14d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14d6:	bf00      	nop
    14d8:	0000425c 	.word	0x0000425c
    14dc:	00001585 	.word	0x00001585
    14e0:	00000d41 	.word	0x00000d41
    14e4:	000016b1 	.word	0x000016b1
    14e8:	00000d4f 	.word	0x00000d4f
    14ec:	00001629 	.word	0x00001629

000014f0 <usart_async_init>:
{
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f2:	460d      	mov	r5, r1
    14f4:	4616      	mov	r6, r2
    14f6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    14f8:	4604      	mov	r4, r0
    14fa:	b318      	cbz	r0, 1544 <usart_async_init+0x54>
    14fc:	b321      	cbz	r1, 1548 <usart_async_init+0x58>
    14fe:	b32a      	cbz	r2, 154c <usart_async_init+0x5c>
    1500:	bb33      	cbnz	r3, 1550 <usart_async_init+0x60>
    1502:	2000      	movs	r0, #0
    1504:	223a      	movs	r2, #58	; 0x3a
    1506:	4915      	ldr	r1, [pc, #84]	; (155c <usart_async_init+0x6c>)
    1508:	4b15      	ldr	r3, [pc, #84]	; (1560 <usart_async_init+0x70>)
    150a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    150c:	463a      	mov	r2, r7
    150e:	4631      	mov	r1, r6
    1510:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1514:	4b13      	ldr	r3, [pc, #76]	; (1564 <usart_async_init+0x74>)
    1516:	4798      	blx	r3
    1518:	b9e0      	cbnz	r0, 1554 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    151a:	4629      	mov	r1, r5
    151c:	f104 0008 	add.w	r0, r4, #8
    1520:	4b11      	ldr	r3, [pc, #68]	; (1568 <usart_async_init+0x78>)
    1522:	4798      	blx	r3
	if (init_status) {
    1524:	4603      	mov	r3, r0
    1526:	b958      	cbnz	r0, 1540 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    1528:	4a10      	ldr	r2, [pc, #64]	; (156c <usart_async_init+0x7c>)
    152a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    152c:	4a10      	ldr	r2, [pc, #64]	; (1570 <usart_async_init+0x80>)
    152e:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1530:	4a10      	ldr	r2, [pc, #64]	; (1574 <usart_async_init+0x84>)
    1532:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1534:	4a10      	ldr	r2, [pc, #64]	; (1578 <usart_async_init+0x88>)
    1536:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1538:	4a10      	ldr	r2, [pc, #64]	; (157c <usart_async_init+0x8c>)
    153a:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    153c:	4a10      	ldr	r2, [pc, #64]	; (1580 <usart_async_init+0x90>)
    153e:	6162      	str	r2, [r4, #20]
}
    1540:	4618      	mov	r0, r3
    1542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1544:	2000      	movs	r0, #0
    1546:	e7dd      	b.n	1504 <usart_async_init+0x14>
    1548:	2000      	movs	r0, #0
    154a:	e7db      	b.n	1504 <usart_async_init+0x14>
    154c:	2000      	movs	r0, #0
    154e:	e7d9      	b.n	1504 <usart_async_init+0x14>
    1550:	2001      	movs	r0, #1
    1552:	e7d7      	b.n	1504 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    1554:	f06f 030c 	mvn.w	r3, #12
    1558:	e7f2      	b.n	1540 <usart_async_init+0x50>
    155a:	bf00      	nop
    155c:	0000425c 	.word	0x0000425c
    1560:	00001585 	.word	0x00001585
    1564:	000015e5 	.word	0x000015e5
    1568:	000028ed 	.word	0x000028ed
    156c:	00001475 	.word	0x00001475
    1570:	000013e1 	.word	0x000013e1
    1574:	00001441 	.word	0x00001441
    1578:	000013c5 	.word	0x000013c5
    157c:	0000139d 	.word	0x0000139d
    1580:	000013b1 	.word	0x000013b1

00001584 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1584:	b900      	cbnz	r0, 1588 <assert+0x4>
		__asm("BKPT #0");
    1586:	be00      	bkpt	0x0000
    1588:	4770      	bx	lr

0000158a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    158a:	6803      	ldr	r3, [r0, #0]
    158c:	b11b      	cbz	r3, 1596 <is_list_element+0xc>
		if (it == element) {
    158e:	428b      	cmp	r3, r1
    1590:	d003      	beq.n	159a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	e7fa      	b.n	158c <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1596:	2000      	movs	r0, #0
    1598:	4770      	bx	lr
			return true;
    159a:	2001      	movs	r0, #1
}
    159c:	4770      	bx	lr
	...

000015a0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    15a0:	b538      	push	{r3, r4, r5, lr}
    15a2:	4604      	mov	r4, r0
    15a4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    15a6:	4b06      	ldr	r3, [pc, #24]	; (15c0 <list_insert_as_head+0x20>)
    15a8:	4798      	blx	r3
    15aa:	f080 0001 	eor.w	r0, r0, #1
    15ae:	2239      	movs	r2, #57	; 0x39
    15b0:	4904      	ldr	r1, [pc, #16]	; (15c4 <list_insert_as_head+0x24>)
    15b2:	b2c0      	uxtb	r0, r0
    15b4:	4b04      	ldr	r3, [pc, #16]	; (15c8 <list_insert_as_head+0x28>)
    15b6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    15b8:	6823      	ldr	r3, [r4, #0]
    15ba:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    15bc:	6025      	str	r5, [r4, #0]
    15be:	bd38      	pop	{r3, r4, r5, pc}
    15c0:	0000158b 	.word	0x0000158b
    15c4:	0000427c 	.word	0x0000427c
    15c8:	00001585 	.word	0x00001585

000015cc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    15cc:	6803      	ldr	r3, [r0, #0]
    15ce:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    15d0:	6001      	str	r1, [r0, #0]
    15d2:	4770      	bx	lr

000015d4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    15d4:	6803      	ldr	r3, [r0, #0]
    15d6:	b11b      	cbz	r3, 15e0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    15d8:	681a      	ldr	r2, [r3, #0]
    15da:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    15dc:	4618      	mov	r0, r3
    15de:	4770      	bx	lr
	}

	return NULL;
    15e0:	2000      	movs	r0, #0
}
    15e2:	4770      	bx	lr

000015e4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    15e4:	b570      	push	{r4, r5, r6, lr}
    15e6:	460e      	mov	r6, r1
    15e8:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    15ea:	4604      	mov	r4, r0
    15ec:	b178      	cbz	r0, 160e <ringbuffer_init+0x2a>
    15ee:	b181      	cbz	r1, 1612 <ringbuffer_init+0x2e>
    15f0:	b98a      	cbnz	r2, 1616 <ringbuffer_init+0x32>
    15f2:	2000      	movs	r0, #0
    15f4:	2228      	movs	r2, #40	; 0x28
    15f6:	490a      	ldr	r1, [pc, #40]	; (1620 <ringbuffer_init+0x3c>)
    15f8:	4b0a      	ldr	r3, [pc, #40]	; (1624 <ringbuffer_init+0x40>)
    15fa:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    15fc:	1e6b      	subs	r3, r5, #1
    15fe:	421d      	tst	r5, r3
    1600:	d10b      	bne.n	161a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1602:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1604:	2000      	movs	r0, #0
    1606:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1608:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    160a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    160c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    160e:	2000      	movs	r0, #0
    1610:	e7f0      	b.n	15f4 <ringbuffer_init+0x10>
    1612:	2000      	movs	r0, #0
    1614:	e7ee      	b.n	15f4 <ringbuffer_init+0x10>
    1616:	2001      	movs	r0, #1
    1618:	e7ec      	b.n	15f4 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    161a:	f06f 000c 	mvn.w	r0, #12
}
    161e:	bd70      	pop	{r4, r5, r6, pc}
    1620:	0000429c 	.word	0x0000429c
    1624:	00001585 	.word	0x00001585

00001628 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1628:	b538      	push	{r3, r4, r5, lr}
    162a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    162c:	4604      	mov	r4, r0
    162e:	b1a8      	cbz	r0, 165c <ringbuffer_get+0x34>
    1630:	b191      	cbz	r1, 1658 <ringbuffer_get+0x30>
    1632:	2001      	movs	r0, #1
    1634:	2240      	movs	r2, #64	; 0x40
    1636:	490c      	ldr	r1, [pc, #48]	; (1668 <ringbuffer_get+0x40>)
    1638:	4b0c      	ldr	r3, [pc, #48]	; (166c <ringbuffer_get+0x44>)
    163a:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    163c:	68e2      	ldr	r2, [r4, #12]
    163e:	68a3      	ldr	r3, [r4, #8]
    1640:	429a      	cmp	r2, r3
    1642:	d00d      	beq.n	1660 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    1644:	6822      	ldr	r2, [r4, #0]
    1646:	6861      	ldr	r1, [r4, #4]
    1648:	400b      	ands	r3, r1
    164a:	5cd3      	ldrb	r3, [r2, r3]
    164c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    164e:	68a3      	ldr	r3, [r4, #8]
    1650:	3301      	adds	r3, #1
    1652:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1654:	2000      	movs	r0, #0
    1656:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    1658:	2000      	movs	r0, #0
    165a:	e7eb      	b.n	1634 <ringbuffer_get+0xc>
    165c:	2000      	movs	r0, #0
    165e:	e7e9      	b.n	1634 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    1660:	f06f 0009 	mvn.w	r0, #9
}
    1664:	bd38      	pop	{r3, r4, r5, pc}
    1666:	bf00      	nop
    1668:	0000429c 	.word	0x0000429c
    166c:	00001585 	.word	0x00001585

00001670 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1670:	b538      	push	{r3, r4, r5, lr}
    1672:	460d      	mov	r5, r1
	ASSERT(rb);
    1674:	4604      	mov	r4, r0
    1676:	2251      	movs	r2, #81	; 0x51
    1678:	490b      	ldr	r1, [pc, #44]	; (16a8 <ringbuffer_put+0x38>)
    167a:	3000      	adds	r0, #0
    167c:	bf18      	it	ne
    167e:	2001      	movne	r0, #1
    1680:	4b0a      	ldr	r3, [pc, #40]	; (16ac <ringbuffer_put+0x3c>)
    1682:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1684:	6822      	ldr	r2, [r4, #0]
    1686:	68e3      	ldr	r3, [r4, #12]
    1688:	6861      	ldr	r1, [r4, #4]
    168a:	400b      	ands	r3, r1
    168c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    168e:	68e3      	ldr	r3, [r4, #12]
    1690:	68a2      	ldr	r2, [r4, #8]
    1692:	1a9a      	subs	r2, r3, r2
    1694:	6861      	ldr	r1, [r4, #4]
    1696:	428a      	cmp	r2, r1
    1698:	d901      	bls.n	169e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    169a:	1a59      	subs	r1, r3, r1
    169c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    169e:	3301      	adds	r3, #1
    16a0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    16a2:	2000      	movs	r0, #0
    16a4:	bd38      	pop	{r3, r4, r5, pc}
    16a6:	bf00      	nop
    16a8:	0000429c 	.word	0x0000429c
    16ac:	00001585 	.word	0x00001585

000016b0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    16b0:	b510      	push	{r4, lr}
	ASSERT(rb);
    16b2:	4604      	mov	r4, r0
    16b4:	2267      	movs	r2, #103	; 0x67
    16b6:	4905      	ldr	r1, [pc, #20]	; (16cc <ringbuffer_num+0x1c>)
    16b8:	3000      	adds	r0, #0
    16ba:	bf18      	it	ne
    16bc:	2001      	movne	r0, #1
    16be:	4b04      	ldr	r3, [pc, #16]	; (16d0 <ringbuffer_num+0x20>)
    16c0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    16c2:	68e0      	ldr	r0, [r4, #12]
    16c4:	68a3      	ldr	r3, [r4, #8]
}
    16c6:	1ac0      	subs	r0, r0, r3
    16c8:	bd10      	pop	{r4, pc}
    16ca:	bf00      	nop
    16cc:	0000429c 	.word	0x0000429c
    16d0:	00001585 	.word	0x00001585

000016d4 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    16d4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    16d8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    16dc:	f3c0 2087 	ubfx	r0, r0, #10, #8
    16e0:	4770      	bx	lr
	...

000016e4 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    16e4:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    16e6:	4b60      	ldr	r3, [pc, #384]	; (1868 <_adc_init+0x184>)
    16e8:	4298      	cmp	r0, r3
    16ea:	f000 809c 	beq.w	1826 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    16ee:	4b5f      	ldr	r3, [pc, #380]	; (186c <_adc_init+0x188>)
    16f0:	4298      	cmp	r0, r3
    16f2:	f000 80a8 	beq.w	1846 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    16f6:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    16f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    16fa:	f013 0f01 	tst.w	r3, #1
    16fe:	d11b      	bne.n	1738 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1700:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1702:	f013 0f03 	tst.w	r3, #3
    1706:	d1fb      	bne.n	1700 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1708:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    170a:	f013 0f02 	tst.w	r3, #2
    170e:	d00d      	beq.n	172c <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1710:	8803      	ldrh	r3, [r0, #0]
    1712:	b29b      	uxth	r3, r3
    1714:	f023 0302 	bic.w	r3, r3, #2
    1718:	b29b      	uxth	r3, r3
    171a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    171c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    171e:	f013 0f03 	tst.w	r3, #3
    1722:	d1fb      	bne.n	171c <_adc_init+0x38>
    1724:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1726:	f013 0f02 	tst.w	r3, #2
    172a:	d1fb      	bne.n	1724 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    172c:	2301      	movs	r3, #1
    172e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1730:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1732:	f013 0f03 	tst.w	r3, #3
    1736:	d1fb      	bne.n	1730 <_adc_init+0x4c>
    1738:	6b03      	ldr	r3, [r0, #48]	; 0x30
    173a:	f013 0f01 	tst.w	r3, #1
    173e:	d1fb      	bne.n	1738 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1740:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1744:	2316      	movs	r3, #22
    1746:	4a4a      	ldr	r2, [pc, #296]	; (1870 <_adc_init+0x18c>)
    1748:	fb03 2301 	mla	r3, r3, r1, r2
    174c:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    174e:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1750:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1752:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1756:	2b00      	cmp	r3, #0
    1758:	d1fa      	bne.n	1750 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    175a:	2316      	movs	r3, #22
    175c:	4a44      	ldr	r2, [pc, #272]	; (1870 <_adc_init+0x18c>)
    175e:	fb03 2301 	mla	r3, r3, r1, r2
    1762:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1764:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1766:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1768:	f3c3 030b 	ubfx	r3, r3, #0, #12
    176c:	2b00      	cmp	r3, #0
    176e:	d1fa      	bne.n	1766 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1770:	2316      	movs	r3, #22
    1772:	4a3f      	ldr	r2, [pc, #252]	; (1870 <_adc_init+0x18c>)
    1774:	fb03 2301 	mla	r3, r3, r1, r2
    1778:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    177a:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    177c:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    177e:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1780:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1782:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1786:	2b00      	cmp	r3, #0
    1788:	d1fa      	bne.n	1780 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    178a:	2316      	movs	r3, #22
    178c:	4a38      	ldr	r2, [pc, #224]	; (1870 <_adc_init+0x18c>)
    178e:	fb03 2301 	mla	r3, r3, r1, r2
    1792:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1794:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1796:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1798:	f3c3 030b 	ubfx	r3, r3, #0, #12
    179c:	2b00      	cmp	r3, #0
    179e:	d1fa      	bne.n	1796 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    17a0:	2316      	movs	r3, #22
    17a2:	4a33      	ldr	r2, [pc, #204]	; (1870 <_adc_init+0x18c>)
    17a4:	fb03 2301 	mla	r3, r3, r1, r2
    17a8:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    17aa:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    17b2:	2b00      	cmp	r3, #0
    17b4:	d1fa      	bne.n	17ac <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    17b6:	2316      	movs	r3, #22
    17b8:	4a2d      	ldr	r2, [pc, #180]	; (1870 <_adc_init+0x18c>)
    17ba:	fb03 2301 	mla	r3, r3, r1, r2
    17be:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    17c0:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17c4:	f013 0f80 	tst.w	r3, #128	; 0x80
    17c8:	d1fb      	bne.n	17c2 <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    17ca:	2316      	movs	r3, #22
    17cc:	4a28      	ldr	r2, [pc, #160]	; (1870 <_adc_init+0x18c>)
    17ce:	fb03 2301 	mla	r3, r3, r1, r2
    17d2:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    17d4:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17d8:	f413 7f80 	tst.w	r3, #256	; 0x100
    17dc:	d1fb      	bne.n	17d6 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    17de:	2316      	movs	r3, #22
    17e0:	4a23      	ldr	r2, [pc, #140]	; (1870 <_adc_init+0x18c>)
    17e2:	fb03 2301 	mla	r3, r3, r1, r2
    17e6:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    17e8:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17ec:	f413 7f00 	tst.w	r3, #512	; 0x200
    17f0:	d1fb      	bne.n	17ea <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    17f2:	2316      	movs	r3, #22
    17f4:	4a1e      	ldr	r2, [pc, #120]	; (1870 <_adc_init+0x18c>)
    17f6:	fb03 2301 	mla	r3, r3, r1, r2
    17fa:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    17fc:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1800:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1804:	d1fb      	bne.n	17fe <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1806:	2216      	movs	r2, #22
    1808:	4b19      	ldr	r3, [pc, #100]	; (1870 <_adc_init+0x18c>)
    180a:	fb02 3101 	mla	r1, r2, r1, r3
    180e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1810:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1812:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1814:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1816:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1818:	f013 0f03 	tst.w	r3, #3
    181c:	d1fb      	bne.n	1816 <_adc_init+0x132>

	return ERR_NONE;
}
    181e:	2000      	movs	r0, #0
    1820:	f85d 4b04 	ldr.w	r4, [sp], #4
    1824:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1826:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	095a      	lsrs	r2, r3, #5
    182e:	0212      	lsls	r2, r2, #8
    1830:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1834:	0a1c      	lsrs	r4, r3, #8
    1836:	0124      	lsls	r4, r4, #4
    1838:	f004 0470 	and.w	r4, r4, #112	; 0x70
    183c:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    183e:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1842:	431a      	orrs	r2, r3
    1844:	e758      	b.n	16f8 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1846:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	0cda      	lsrs	r2, r3, #19
    184e:	0212      	lsls	r2, r2, #8
    1850:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1854:	0d9c      	lsrs	r4, r3, #22
    1856:	0124      	lsls	r4, r4, #4
    1858:	f004 0470 	and.w	r4, r4, #112	; 0x70
    185c:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    185e:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1862:	431a      	orrs	r2, r3
    1864:	e748      	b.n	16f8 <_adc_init+0x14>
    1866:	bf00      	nop
    1868:	43001c00 	.word	0x43001c00
    186c:	43002000 	.word	0x43002000
    1870:	000042c0 	.word	0x000042c0

00001874 <_adc_get_regs>:
{
    1874:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1876:	4b0b      	ldr	r3, [pc, #44]	; (18a4 <_adc_get_regs+0x30>)
    1878:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    187a:	2300      	movs	r3, #0
    187c:	b13b      	cbz	r3, 188e <_adc_get_regs+0x1a>
	ASSERT(false);
    187e:	2288      	movs	r2, #136	; 0x88
    1880:	4909      	ldr	r1, [pc, #36]	; (18a8 <_adc_get_regs+0x34>)
    1882:	2000      	movs	r0, #0
    1884:	4b09      	ldr	r3, [pc, #36]	; (18ac <_adc_get_regs+0x38>)
    1886:	4798      	blx	r3
	return 0;
    1888:	2300      	movs	r3, #0
}
    188a:	4618      	mov	r0, r3
    188c:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    188e:	2216      	movs	r2, #22
    1890:	fb02 f203 	mul.w	r2, r2, r3
    1894:	4906      	ldr	r1, [pc, #24]	; (18b0 <_adc_get_regs+0x3c>)
    1896:	5c8a      	ldrb	r2, [r1, r2]
    1898:	4290      	cmp	r0, r2
    189a:	d0f6      	beq.n	188a <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    189c:	3301      	adds	r3, #1
    189e:	b2db      	uxtb	r3, r3
    18a0:	e7ec      	b.n	187c <_adc_get_regs+0x8>
    18a2:	bf00      	nop
    18a4:	000016d5 	.word	0x000016d5
    18a8:	000042d8 	.word	0x000042d8
    18ac:	00001585 	.word	0x00001585
    18b0:	000042c0 	.word	0x000042c0

000018b4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    18b4:	b538      	push	{r3, r4, r5, lr}
    18b6:	460c      	mov	r4, r1
	ASSERT(device);
    18b8:	4605      	mov	r5, r0
    18ba:	22d9      	movs	r2, #217	; 0xd9
    18bc:	4907      	ldr	r1, [pc, #28]	; (18dc <_adc_sync_init+0x28>)
    18be:	3000      	adds	r0, #0
    18c0:	bf18      	it	ne
    18c2:	2001      	movne	r0, #1
    18c4:	4b06      	ldr	r3, [pc, #24]	; (18e0 <_adc_sync_init+0x2c>)
    18c6:	4798      	blx	r3

	device->hw = hw;
    18c8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    18ca:	4620      	mov	r0, r4
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <_adc_sync_init+0x30>)
    18ce:	4798      	blx	r3
    18d0:	4601      	mov	r1, r0
    18d2:	4620      	mov	r0, r4
    18d4:	4b04      	ldr	r3, [pc, #16]	; (18e8 <_adc_sync_init+0x34>)
    18d6:	4798      	blx	r3
}
    18d8:	bd38      	pop	{r3, r4, r5, pc}
    18da:	bf00      	nop
    18dc:	000042d8 	.word	0x000042d8
    18e0:	00001585 	.word	0x00001585
    18e4:	00001875 	.word	0x00001875
    18e8:	000016e5 	.word	0x000016e5

000018ec <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    18ec:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    18ee:	8813      	ldrh	r3, [r2, #0]
    18f0:	b29b      	uxth	r3, r3
    18f2:	f043 0302 	orr.w	r3, r3, #2
    18f6:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    18fa:	f013 0f03 	tst.w	r3, #3
    18fe:	d1fb      	bne.n	18f8 <_adc_sync_enable_channel+0xc>
}
    1900:	4770      	bx	lr

00001902 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1902:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1904:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    1906:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    190a:	2b03      	cmp	r3, #3
    190c:	d001      	beq.n	1912 <_adc_sync_get_data_size+0x10>
    190e:	2002      	movs	r0, #2
}
    1910:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1912:	2001      	movs	r0, #1
    1914:	4770      	bx	lr

00001916 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1916:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1918:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    191c:	f000 0001 	and.w	r0, r0, #1
    1920:	4770      	bx	lr

00001922 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1922:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1924:	7d13      	ldrb	r3, [r2, #20]
    1926:	f043 0302 	orr.w	r3, r3, #2
    192a:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    192c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    192e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1932:	2b00      	cmp	r3, #0
    1934:	d1fa      	bne.n	192c <_adc_sync_convert+0xa>
}
    1936:	4770      	bx	lr

00001938 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1938:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    193a:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    193e:	b280      	uxth	r0, r0
    1940:	4770      	bx	lr
	...

00001944 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1944:	0943      	lsrs	r3, r0, #5
    1946:	f000 001f 	and.w	r0, r0, #31
    194a:	2201      	movs	r2, #1
    194c:	fa02 f000 	lsl.w	r0, r2, r0
    1950:	3340      	adds	r3, #64	; 0x40
    1952:	4a02      	ldr	r2, [pc, #8]	; (195c <_irq_set+0x18>)
    1954:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1958:	4770      	bx	lr
    195a:	bf00      	nop
    195c:	e000e100 	.word	0xe000e100

00001960 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1960:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    1964:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
    1968:	3801      	subs	r0, #1
    196a:	4b03      	ldr	r3, [pc, #12]	; (1978 <_get_cycles_for_us+0x18>)
    196c:	fba3 3000 	umull	r3, r0, r3, r0
    1970:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1972:	3001      	adds	r0, #1
    1974:	4770      	bx	lr
    1976:	bf00      	nop
    1978:	cccccccd 	.word	0xcccccccd

0000197c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    197c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    197e:	4a0c      	ldr	r2, [pc, #48]	; (19b0 <_init_chip+0x34>)
    1980:	8813      	ldrh	r3, [r2, #0]
    1982:	b29b      	uxth	r3, r3
    1984:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1986:	4b0b      	ldr	r3, [pc, #44]	; (19b4 <_init_chip+0x38>)
    1988:	4798      	blx	r3
	_oscctrl_init_sources();
    198a:	4b0b      	ldr	r3, [pc, #44]	; (19b8 <_init_chip+0x3c>)
    198c:	4798      	blx	r3
	_mclk_init();
    198e:	4b0b      	ldr	r3, [pc, #44]	; (19bc <_init_chip+0x40>)
    1990:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1992:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <_init_chip+0x44>)
    1994:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1996:	f640 70ff 	movw	r0, #4095	; 0xfff
    199a:	4b0a      	ldr	r3, [pc, #40]	; (19c4 <_init_chip+0x48>)
    199c:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    199e:	4a0a      	ldr	r2, [pc, #40]	; (19c8 <_init_chip+0x4c>)
    19a0:	6913      	ldr	r3, [r2, #16]
    19a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    19a6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    19a8:	4b08      	ldr	r3, [pc, #32]	; (19cc <_init_chip+0x50>)
    19aa:	4798      	blx	r3
    19ac:	bd08      	pop	{r3, pc}
    19ae:	bf00      	nop
    19b0:	41004000 	.word	0x41004000
    19b4:	00001ed9 	.word	0x00001ed9
    19b8:	00001ef9 	.word	0x00001ef9
    19bc:	00001ecd 	.word	0x00001ecd
    19c0:	00001efd 	.word	0x00001efd
    19c4:	00001e71 	.word	0x00001e71
    19c8:	40000800 	.word	0x40000800
    19cc:	00001a39 	.word	0x00001a39

000019d0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    19d0:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    19d2:	4a17      	ldr	r2, [pc, #92]	; (1a30 <_dmac_handler+0x60>)
    19d4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    19d6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    19da:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19de:	0088      	lsls	r0, r1, #2
    19e0:	4914      	ldr	r1, [pc, #80]	; (1a34 <_dmac_handler+0x64>)
    19e2:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    19e4:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    19e6:	f412 7f80 	tst.w	r2, #256	; 0x100
    19ea:	d105      	bne.n	19f8 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    19ec:	4a10      	ldr	r2, [pc, #64]	; (1a30 <_dmac_handler+0x60>)
    19ee:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    19f0:	f412 7f00 	tst.w	r2, #512	; 0x200
    19f4:	d10b      	bne.n	1a0e <_dmac_handler+0x3e>
    19f6:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    19f8:	011a      	lsls	r2, r3, #4
    19fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    19fe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1a02:	2101      	movs	r1, #1
    1a04:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1a08:	6843      	ldr	r3, [r0, #4]
    1a0a:	4798      	blx	r3
    1a0c:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1a0e:	011a      	lsls	r2, r3, #4
    1a10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a14:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1a18:	2102      	movs	r1, #2
    1a1a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1a1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a22:	fa03 f201 	lsl.w	r2, r3, r1
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <_dmac_handler+0x64>)
    1a28:	589b      	ldr	r3, [r3, r2]
    1a2a:	4798      	blx	r3
	}
}
    1a2c:	e7e3      	b.n	19f6 <_dmac_handler+0x26>
    1a2e:	bf00      	nop
    1a30:	4100a000 	.word	0x4100a000
    1a34:	20000090 	.word	0x20000090

00001a38 <_dma_init>:
{
    1a38:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1a3a:	4a3c      	ldr	r2, [pc, #240]	; (1b2c <_dma_init+0xf4>)
    1a3c:	8813      	ldrh	r3, [r2, #0]
    1a3e:	b29b      	uxth	r3, r3
    1a40:	f023 0302 	bic.w	r3, r3, #2
    1a44:	b29b      	uxth	r3, r3
    1a46:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1a48:	8853      	ldrh	r3, [r2, #2]
    1a4a:	b29b      	uxth	r3, r3
    1a4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1a50:	b29b      	uxth	r3, r3
    1a52:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1a54:	8813      	ldrh	r3, [r2, #0]
    1a56:	b29b      	uxth	r3, r3
    1a58:	f043 0301 	orr.w	r3, r3, #1
    1a5c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1a5e:	4b33      	ldr	r3, [pc, #204]	; (1b2c <_dma_init+0xf4>)
    1a60:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1a62:	f013 0f01 	tst.w	r3, #1
    1a66:	d1fa      	bne.n	1a5e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1a68:	4a30      	ldr	r2, [pc, #192]	; (1b2c <_dma_init+0xf4>)
    1a6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1a6e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1a70:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1a72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1a76:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1a78:	2300      	movs	r3, #0
    1a7a:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1a7c:	492c      	ldr	r1, [pc, #176]	; (1b30 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1a7e:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1a80:	492c      	ldr	r1, [pc, #176]	; (1b34 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1a82:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1a84:	e016      	b.n	1ab4 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1a86:	4a2c      	ldr	r2, [pc, #176]	; (1b38 <_dma_init+0x100>)
    1a88:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1a8c:	4c27      	ldr	r4, [pc, #156]	; (1b2c <_dma_init+0xf4>)
    1a8e:	1d19      	adds	r1, r3, #4
    1a90:	0109      	lsls	r1, r1, #4
    1a92:	1860      	adds	r0, r4, r1
    1a94:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1a96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1a9a:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1a9c:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1a9e:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1aa0:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1aa2:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1aa4:	4922      	ldr	r1, [pc, #136]	; (1b30 <_dma_init+0xf8>)
    1aa6:	011a      	lsls	r2, r3, #4
    1aa8:	1888      	adds	r0, r1, r2
    1aaa:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1aac:	2200      	movs	r2, #0
    1aae:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1ab0:	3301      	adds	r3, #1
    1ab2:	b2db      	uxtb	r3, r3
    1ab4:	2b1f      	cmp	r3, #31
    1ab6:	d9e6      	bls.n	1a86 <_dma_init+0x4e>
    1ab8:	2300      	movs	r3, #0
    1aba:	e00a      	b.n	1ad2 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1abc:	f103 011f 	add.w	r1, r3, #31
    1ac0:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1ac2:	2a00      	cmp	r2, #0
    1ac4:	da10      	bge.n	1ae8 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ac6:	2a00      	cmp	r2, #0
    1ac8:	da1c      	bge.n	1b04 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1aca:	2a00      	cmp	r2, #0
    1acc:	da24      	bge.n	1b18 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1ace:	3301      	adds	r3, #1
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	2b04      	cmp	r3, #4
    1ad4:	d9f2      	bls.n	1abc <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1ad6:	4a15      	ldr	r2, [pc, #84]	; (1b2c <_dma_init+0xf4>)
    1ad8:	8813      	ldrh	r3, [r2, #0]
    1ada:	b29b      	uxth	r3, r3
    1adc:	f043 0302 	orr.w	r3, r3, #2
    1ae0:	8013      	strh	r3, [r2, #0]
}
    1ae2:	2000      	movs	r0, #0
    1ae4:	bc30      	pop	{r4, r5}
    1ae6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ae8:	0950      	lsrs	r0, r2, #5
    1aea:	f001 051f 	and.w	r5, r1, #31
    1aee:	2401      	movs	r4, #1
    1af0:	40ac      	lsls	r4, r5
    1af2:	3020      	adds	r0, #32
    1af4:	4d11      	ldr	r5, [pc, #68]	; (1b3c <_dma_init+0x104>)
    1af6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afe:	f3bf 8f6f 	isb	sy
    1b02:	e7e0      	b.n	1ac6 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b04:	0950      	lsrs	r0, r2, #5
    1b06:	f001 051f 	and.w	r5, r1, #31
    1b0a:	2401      	movs	r4, #1
    1b0c:	40ac      	lsls	r4, r5
    1b0e:	3060      	adds	r0, #96	; 0x60
    1b10:	4d0a      	ldr	r5, [pc, #40]	; (1b3c <_dma_init+0x104>)
    1b12:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1b16:	e7d8      	b.n	1aca <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b18:	0952      	lsrs	r2, r2, #5
    1b1a:	f001 011f 	and.w	r1, r1, #31
    1b1e:	2001      	movs	r0, #1
    1b20:	fa00 f101 	lsl.w	r1, r0, r1
    1b24:	4805      	ldr	r0, [pc, #20]	; (1b3c <_dma_init+0x104>)
    1b26:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1b2a:	e7d0      	b.n	1ace <_dma_init+0x96>
    1b2c:	4100a000 	.word	0x4100a000
    1b30:	20000760 	.word	0x20000760
    1b34:	20000960 	.word	0x20000960
    1b38:	000042f0 	.word	0x000042f0
    1b3c:	e000e100 	.word	0xe000e100

00001b40 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1b40:	4b02      	ldr	r3, [pc, #8]	; (1b4c <_dma_set_destination_address+0xc>)
    1b42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1b46:	6081      	str	r1, [r0, #8]
}
    1b48:	2000      	movs	r0, #0
    1b4a:	4770      	bx	lr
    1b4c:	20000760 	.word	0x20000760

00001b50 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1b50:	4b02      	ldr	r3, [pc, #8]	; (1b5c <_dma_set_source_address+0xc>)
    1b52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1b56:	6041      	str	r1, [r0, #4]
}
    1b58:	2000      	movs	r0, #0
    1b5a:	4770      	bx	lr
    1b5c:	20000760 	.word	0x20000760

00001b60 <_dma_set_next_descriptor>:
	                                      (uint32_t)&_descriptor_section[next_channel]);
    1b60:	4b03      	ldr	r3, [pc, #12]	; (1b70 <_dma_set_next_descriptor+0x10>)
    1b62:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1b66:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1b6a:	60c1      	str	r1, [r0, #12]
}
    1b6c:	2000      	movs	r0, #0
    1b6e:	4770      	bx	lr
    1b70:	20000760 	.word	0x20000760

00001b74 <_dma_set_data_amount>:
{
    1b74:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    1b76:	4c14      	ldr	r4, [pc, #80]	; (1bc8 <_dma_set_data_amount+0x54>)
    1b78:	0102      	lsls	r2, r0, #4
    1b7a:	18a3      	adds	r3, r4, r2
    1b7c:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1b7e:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1b80:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1b84:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    1b86:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1b8a:	d006      	beq.n	1b9a <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1b8c:	fa01 f403 	lsl.w	r4, r1, r3
    1b90:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1b92:	4a0d      	ldr	r2, [pc, #52]	; (1bc8 <_dma_set_data_amount+0x54>)
    1b94:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1b98:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1b9a:	4c0b      	ldr	r4, [pc, #44]	; (1bc8 <_dma_set_data_amount+0x54>)
    1b9c:	0102      	lsls	r2, r0, #4
    1b9e:	18a5      	adds	r5, r4, r2
    1ba0:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1ba2:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1ba4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1ba8:	d005      	beq.n	1bb6 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1baa:	fa01 f303 	lsl.w	r3, r1, r3
    1bae:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1bb0:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1bb4:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1bb6:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1bb8:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <_dma_set_data_amount+0x54>)
    1bba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1bbe:	8041      	strh	r1, [r0, #2]
}
    1bc0:	2000      	movs	r0, #0
    1bc2:	bc30      	pop	{r4, r5}
    1bc4:	4770      	bx	lr
    1bc6:	bf00      	nop
    1bc8:	20000760 	.word	0x20000760

00001bcc <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1bcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1bd0:	008a      	lsls	r2, r1, #2
    1bd2:	4b02      	ldr	r3, [pc, #8]	; (1bdc <_dma_get_channel_resource+0x10>)
    1bd4:	4413      	add	r3, r2
    1bd6:	6003      	str	r3, [r0, #0]
}
    1bd8:	2000      	movs	r0, #0
    1bda:	4770      	bx	lr
    1bdc:	20000090 	.word	0x20000090

00001be0 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1be0:	b508      	push	{r3, lr}
	_dmac_handler();
    1be2:	4b01      	ldr	r3, [pc, #4]	; (1be8 <DMAC_0_Handler+0x8>)
    1be4:	4798      	blx	r3
    1be6:	bd08      	pop	{r3, pc}
    1be8:	000019d1 	.word	0x000019d1

00001bec <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1bec:	b508      	push	{r3, lr}
	_dmac_handler();
    1bee:	4b01      	ldr	r3, [pc, #4]	; (1bf4 <DMAC_1_Handler+0x8>)
    1bf0:	4798      	blx	r3
    1bf2:	bd08      	pop	{r3, pc}
    1bf4:	000019d1 	.word	0x000019d1

00001bf8 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1bf8:	b508      	push	{r3, lr}
	_dmac_handler();
    1bfa:	4b01      	ldr	r3, [pc, #4]	; (1c00 <DMAC_2_Handler+0x8>)
    1bfc:	4798      	blx	r3
    1bfe:	bd08      	pop	{r3, pc}
    1c00:	000019d1 	.word	0x000019d1

00001c04 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1c04:	b508      	push	{r3, lr}
	_dmac_handler();
    1c06:	4b01      	ldr	r3, [pc, #4]	; (1c0c <DMAC_3_Handler+0x8>)
    1c08:	4798      	blx	r3
    1c0a:	bd08      	pop	{r3, pc}
    1c0c:	000019d1 	.word	0x000019d1

00001c10 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1c10:	b508      	push	{r3, lr}
	_dmac_handler();
    1c12:	4b01      	ldr	r3, [pc, #4]	; (1c18 <DMAC_4_Handler+0x8>)
    1c14:	4798      	blx	r3
    1c16:	bd08      	pop	{r3, pc}
    1c18:	000019d1 	.word	0x000019d1

00001c1c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1c1c:	b570      	push	{r4, r5, r6, lr}
    1c1e:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1c20:	4b2a      	ldr	r3, [pc, #168]	; (1ccc <_ext_irq_handler+0xb0>)
    1c22:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1c24:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c26:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1c28:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1c2a:	4b29      	ldr	r3, [pc, #164]	; (1cd0 <_ext_irq_handler+0xb4>)
    1c2c:	6818      	ldr	r0, [r3, #0]
    1c2e:	22f4      	movs	r2, #244	; 0xf4
    1c30:	4928      	ldr	r1, [pc, #160]	; (1cd4 <_ext_irq_handler+0xb8>)
    1c32:	3000      	adds	r0, #0
    1c34:	bf18      	it	ne
    1c36:	2001      	movne	r0, #1
    1c38:	4b27      	ldr	r3, [pc, #156]	; (1cd8 <_ext_irq_handler+0xbc>)
    1c3a:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1c3c:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1c40:	e035      	b.n	1cae <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1c42:	4b26      	ldr	r3, [pc, #152]	; (1cdc <_ext_irq_handler+0xc0>)
    1c44:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1c48:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1c4a:	f1b5 3fff 	cmp.w	r5, #4294967295
    1c4e:	d003      	beq.n	1c58 <_ext_irq_handler+0x3c>
				callback(pin);
    1c50:	4b1f      	ldr	r3, [pc, #124]	; (1cd0 <_ext_irq_handler+0xb4>)
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	4628      	mov	r0, r5
    1c56:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1c58:	2301      	movs	r3, #1
    1c5a:	40a3      	lsls	r3, r4
    1c5c:	9c01      	ldr	r4, [sp, #4]
    1c5e:	ea24 0403 	bic.w	r4, r4, r3
    1c62:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1c64:	9b01      	ldr	r3, [sp, #4]
    1c66:	fa93 f4a3 	rbit	r4, r3
    1c6a:	fab4 f484 	clz	r4, r4
    1c6e:	b90b      	cbnz	r3, 1c74 <_ext_irq_handler+0x58>
    1c70:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1c74:	f1b4 3fff 	cmp.w	r4, #4294967295
    1c78:	d014      	beq.n	1ca4 <_ext_irq_handler+0x88>
    1c7a:	2004      	movs	r0, #4
    1c7c:	2100      	movs	r1, #0
    1c7e:	e001      	b.n	1c84 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1c80:	3b01      	subs	r3, #1
    1c82:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1c84:	4281      	cmp	r1, r0
    1c86:	d8e0      	bhi.n	1c4a <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1c88:	1843      	adds	r3, r0, r1
    1c8a:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1c8e:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1c90:	4a12      	ldr	r2, [pc, #72]	; (1cdc <_ext_irq_handler+0xc0>)
    1c92:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1c96:	42a2      	cmp	r2, r4
    1c98:	d0d3      	beq.n	1c42 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1c9a:	42a2      	cmp	r2, r4
    1c9c:	daf0      	bge.n	1c80 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1c9e:	3301      	adds	r3, #1
    1ca0:	b2d9      	uxtb	r1, r3
    1ca2:	e7ef      	b.n	1c84 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1ca4:	4b09      	ldr	r3, [pc, #36]	; (1ccc <_ext_irq_handler+0xb0>)
    1ca6:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1ca8:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1caa:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1cac:	615a      	str	r2, [r3, #20]
	while (flags) {
    1cae:	9b01      	ldr	r3, [sp, #4]
    1cb0:	b14b      	cbz	r3, 1cc6 <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1cb2:	9b01      	ldr	r3, [sp, #4]
    1cb4:	fa93 f4a3 	rbit	r4, r3
    1cb8:	fab4 f484 	clz	r4, r4
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d1d9      	bne.n	1c74 <_ext_irq_handler+0x58>
    1cc0:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1cc4:	e7d6      	b.n	1c74 <_ext_irq_handler+0x58>
	}
}
    1cc6:	b002      	add	sp, #8
    1cc8:	bd70      	pop	{r4, r5, r6, pc}
    1cca:	bf00      	nop
    1ccc:	40002800 	.word	0x40002800
    1cd0:	20000210 	.word	0x20000210
    1cd4:	00004410 	.word	0x00004410
    1cd8:	00001585 	.word	0x00001585
    1cdc:	000043f0 	.word	0x000043f0

00001ce0 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1ce0:	4b3d      	ldr	r3, [pc, #244]	; (1dd8 <_ext_irq_init+0xf8>)
    1ce2:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1ce4:	f013 0f01 	tst.w	r3, #1
    1ce8:	d120      	bne.n	1d2c <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1cea:	4b3b      	ldr	r3, [pc, #236]	; (1dd8 <_ext_irq_init+0xf8>)
    1cec:	685b      	ldr	r3, [r3, #4]
    1cee:	f013 0f03 	tst.w	r3, #3
    1cf2:	d1fa      	bne.n	1cea <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1cf4:	4b38      	ldr	r3, [pc, #224]	; (1dd8 <_ext_irq_init+0xf8>)
    1cf6:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1cf8:	f013 0f02 	tst.w	r3, #2
    1cfc:	d00e      	beq.n	1d1c <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1cfe:	4a36      	ldr	r2, [pc, #216]	; (1dd8 <_ext_irq_init+0xf8>)
    1d00:	7813      	ldrb	r3, [r2, #0]
    1d02:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1d06:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d08:	4b33      	ldr	r3, [pc, #204]	; (1dd8 <_ext_irq_init+0xf8>)
    1d0a:	685b      	ldr	r3, [r3, #4]
    1d0c:	f013 0f03 	tst.w	r3, #3
    1d10:	d1fa      	bne.n	1d08 <_ext_irq_init+0x28>
    1d12:	4b31      	ldr	r3, [pc, #196]	; (1dd8 <_ext_irq_init+0xf8>)
    1d14:	685b      	ldr	r3, [r3, #4]
    1d16:	f013 0f02 	tst.w	r3, #2
    1d1a:	d1fa      	bne.n	1d12 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1d1c:	2201      	movs	r2, #1
    1d1e:	4b2e      	ldr	r3, [pc, #184]	; (1dd8 <_ext_irq_init+0xf8>)
    1d20:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d22:	4b2d      	ldr	r3, [pc, #180]	; (1dd8 <_ext_irq_init+0xf8>)
    1d24:	685b      	ldr	r3, [r3, #4]
    1d26:	f013 0f03 	tst.w	r3, #3
    1d2a:	d1fa      	bne.n	1d22 <_ext_irq_init+0x42>
    1d2c:	4b2a      	ldr	r3, [pc, #168]	; (1dd8 <_ext_irq_init+0xf8>)
    1d2e:	685b      	ldr	r3, [r3, #4]
    1d30:	f013 0f01 	tst.w	r3, #1
    1d34:	d1fa      	bne.n	1d2c <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1d36:	4a28      	ldr	r2, [pc, #160]	; (1dd8 <_ext_irq_init+0xf8>)
    1d38:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1d3a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1d3e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d40:	4b25      	ldr	r3, [pc, #148]	; (1dd8 <_ext_irq_init+0xf8>)
    1d42:	685b      	ldr	r3, [r3, #4]
    1d44:	f013 0f03 	tst.w	r3, #3
    1d48:	d1fa      	bne.n	1d40 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1d4a:	4b23      	ldr	r3, [pc, #140]	; (1dd8 <_ext_irq_init+0xf8>)
    1d4c:	2200      	movs	r2, #0
    1d4e:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1d50:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1d52:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1d54:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1d56:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1d58:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1d5c:	61da      	str	r2, [r3, #28]
    1d5e:	4a1f      	ldr	r2, [pc, #124]	; (1ddc <_ext_irq_init+0xfc>)
    1d60:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1d62:	781a      	ldrb	r2, [r3, #0]
    1d64:	f042 0202 	orr.w	r2, r2, #2
    1d68:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d6a:	4b1b      	ldr	r3, [pc, #108]	; (1dd8 <_ext_irq_init+0xf8>)
    1d6c:	685b      	ldr	r3, [r3, #4]
    1d6e:	f013 0f03 	tst.w	r3, #3
    1d72:	d1fa      	bne.n	1d6a <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d74:	4b1a      	ldr	r3, [pc, #104]	; (1de0 <_ext_irq_init+0x100>)
    1d76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d8a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d98:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da0:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1daa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dae:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1db2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1db6:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1db8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1dc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dc4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dc8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dcc:	601a      	str	r2, [r3, #0]
	callback = cb;
    1dce:	4b05      	ldr	r3, [pc, #20]	; (1de4 <_ext_irq_init+0x104>)
    1dd0:	6018      	str	r0, [r3, #0]
}
    1dd2:	2000      	movs	r0, #0
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	40002800 	.word	0x40002800
    1ddc:	0a0000b0 	.word	0x0a0000b0
    1de0:	e000e100 	.word	0xe000e100
    1de4:	20000210 	.word	0x20000210

00001de8 <_ext_irq_enable>:
{
    1de8:	b410      	push	{r4}
	uint8_t i      = 0;
    1dea:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1dec:	2b03      	cmp	r3, #3
    1dee:	d80d      	bhi.n	1e0c <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1df0:	461c      	mov	r4, r3
    1df2:	4a11      	ldr	r2, [pc, #68]	; (1e38 <_ext_irq_enable+0x50>)
    1df4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1df8:	6852      	ldr	r2, [r2, #4]
    1dfa:	4282      	cmp	r2, r0
    1dfc:	d002      	beq.n	1e04 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1dfe:	3301      	adds	r3, #1
    1e00:	b2db      	uxtb	r3, r3
    1e02:	e7f3      	b.n	1dec <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1e04:	4b0c      	ldr	r3, [pc, #48]	; (1e38 <_ext_irq_enable+0x50>)
    1e06:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1e0a:	e000      	b.n	1e0e <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1e0c:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1e0e:	2aff      	cmp	r2, #255	; 0xff
    1e10:	d00f      	beq.n	1e32 <_ext_irq_enable+0x4a>
	if (enable) {
    1e12:	b941      	cbnz	r1, 1e26 <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1e14:	2301      	movs	r3, #1
    1e16:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1e18:	4a08      	ldr	r2, [pc, #32]	; (1e3c <_ext_irq_enable+0x54>)
    1e1a:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1e1c:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1e1e:	2000      	movs	r0, #0
}
    1e20:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e24:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1e26:	2301      	movs	r3, #1
    1e28:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1e2a:	4a04      	ldr	r2, [pc, #16]	; (1e3c <_ext_irq_enable+0x54>)
    1e2c:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1e2e:	2000      	movs	r0, #0
    1e30:	e7f6      	b.n	1e20 <_ext_irq_enable+0x38>
		return -1;
    1e32:	f04f 30ff 	mov.w	r0, #4294967295
    1e36:	e7f3      	b.n	1e20 <_ext_irq_enable+0x38>
    1e38:	000043f0 	.word	0x000043f0
    1e3c:	40002800 	.word	0x40002800

00001e40 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1e40:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e42:	4b01      	ldr	r3, [pc, #4]	; (1e48 <EIC_6_Handler+0x8>)
    1e44:	4798      	blx	r3
    1e46:	bd08      	pop	{r3, pc}
    1e48:	00001c1d 	.word	0x00001c1d

00001e4c <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1e4c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e4e:	4b01      	ldr	r3, [pc, #4]	; (1e54 <EIC_7_Handler+0x8>)
    1e50:	4798      	blx	r3
    1e52:	bd08      	pop	{r3, pc}
    1e54:	00001c1d 	.word	0x00001c1d

00001e58 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1e58:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e5a:	4b01      	ldr	r3, [pc, #4]	; (1e60 <EIC_9_Handler+0x8>)
    1e5c:	4798      	blx	r3
    1e5e:	bd08      	pop	{r3, pc}
    1e60:	00001c1d 	.word	0x00001c1d

00001e64 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1e64:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1e66:	4b01      	ldr	r3, [pc, #4]	; (1e6c <EIC_14_Handler+0x8>)
    1e68:	4798      	blx	r3
    1e6a:	bd08      	pop	{r3, pc}
    1e6c:	00001c1d 	.word	0x00001c1d

00001e70 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1e70:	f010 0f01 	tst.w	r0, #1
    1e74:	d008      	beq.n	1e88 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e76:	4a11      	ldr	r2, [pc, #68]	; (1ebc <_gclk_init_generators_by_fref+0x4c>)
    1e78:	4b11      	ldr	r3, [pc, #68]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1e7a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e7c:	4b10      	ldr	r3, [pc, #64]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1e7e:	685a      	ldr	r2, [r3, #4]
    1e80:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e84:	421a      	tst	r2, r3
    1e86:	d1f9      	bne.n	1e7c <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1e88:	f010 0f02 	tst.w	r0, #2
    1e8c:	d008      	beq.n	1ea0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e8e:	4a0d      	ldr	r2, [pc, #52]	; (1ec4 <_gclk_init_generators_by_fref+0x54>)
    1e90:	4b0b      	ldr	r3, [pc, #44]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1e92:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e94:	4b0a      	ldr	r3, [pc, #40]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1e96:	685a      	ldr	r2, [r3, #4]
    1e98:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e9c:	421a      	tst	r2, r3
    1e9e:	d1f9      	bne.n	1e94 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1ea0:	f010 0f04 	tst.w	r0, #4
    1ea4:	d008      	beq.n	1eb8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ea6:	4a08      	ldr	r2, [pc, #32]	; (1ec8 <_gclk_init_generators_by_fref+0x58>)
    1ea8:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1eaa:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1eac:	4b04      	ldr	r3, [pc, #16]	; (1ec0 <_gclk_init_generators_by_fref+0x50>)
    1eae:	685a      	ldr	r2, [r3, #4]
    1eb0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1eb4:	421a      	tst	r2, r3
    1eb6:	d1f9      	bne.n	1eac <_gclk_init_generators_by_fref+0x3c>
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	00010107 	.word	0x00010107
    1ec0:	40001c00 	.word	0x40001c00
    1ec4:	00010908 	.word	0x00010908
    1ec8:	00010105 	.word	0x00010105

00001ecc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1ecc:	2201      	movs	r2, #1
    1ece:	4b01      	ldr	r3, [pc, #4]	; (1ed4 <_mclk_init+0x8>)
    1ed0:	715a      	strb	r2, [r3, #5]
    1ed2:	4770      	bx	lr
    1ed4:	40000800 	.word	0x40000800

00001ed8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1ed8:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <_osc32kctrl_init_sources+0x1c>)
    1eda:	f242 0286 	movw	r2, #8326	; 0x2086
    1ede:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1ee0:	2200      	movs	r2, #0
    1ee2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1ee4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1ee6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1ee8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1eec:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1eee:	2201      	movs	r2, #1
    1ef0:	741a      	strb	r2, [r3, #16]
    1ef2:	4770      	bx	lr
    1ef4:	40001400 	.word	0x40001400

00001ef8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1ef8:	4770      	bx	lr
	...

00001efc <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1efc:	4a1d      	ldr	r2, [pc, #116]	; (1f74 <_oscctrl_init_referenced_generators+0x78>)
    1efe:	4b1e      	ldr	r3, [pc, #120]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f00:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1f02:	4b1d      	ldr	r3, [pc, #116]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f06:	f013 0f06 	tst.w	r3, #6
    1f0a:	d1fa      	bne.n	1f02 <_oscctrl_init_referenced_generators+0x6>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1f0c:	4b1a      	ldr	r3, [pc, #104]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f0e:	2220      	movs	r2, #32
    1f10:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1f12:	2202      	movs	r2, #2
    1f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1f18:	4b17      	ldr	r3, [pc, #92]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f1c:	f013 0f02 	tst.w	r3, #2
    1f20:	d1fa      	bne.n	1f18 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1f22:	4a14      	ldr	r2, [pc, #80]	; (1f74 <_oscctrl_init_referenced_generators+0x78>)
    1f24:	4b14      	ldr	r3, [pc, #80]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f26:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1f28:	4b13      	ldr	r3, [pc, #76]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1f2c:	f013 0f06 	tst.w	r3, #6
    1f30:	d1fa      	bne.n	1f28 <_oscctrl_init_referenced_generators+0x2c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1f32:	4b11      	ldr	r3, [pc, #68]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f34:	2220      	movs	r2, #32
    1f36:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1f38:	2202      	movs	r2, #2
    1f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1f3e:	4b0e      	ldr	r3, [pc, #56]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1f42:	f013 0f02 	tst.w	r3, #2
    1f46:	d1fa      	bne.n	1f3e <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1f48:	4b0b      	ldr	r3, [pc, #44]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1f4c:	f013 0f01 	tst.w	r3, #1
    1f50:	d104      	bne.n	1f5c <_oscctrl_init_referenced_generators+0x60>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1f52:	4b09      	ldr	r3, [pc, #36]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f56:	f013 0f02 	tst.w	r3, #2
    1f5a:	d0f5      	beq.n	1f48 <_oscctrl_init_referenced_generators+0x4c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1f5c:	4b06      	ldr	r3, [pc, #24]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1f60:	f013 0f01 	tst.w	r3, #1
    1f64:	d104      	bne.n	1f70 <_oscctrl_init_referenced_generators+0x74>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1f66:	4b04      	ldr	r3, [pc, #16]	; (1f78 <_oscctrl_init_referenced_generators+0x7c>)
    1f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1f6a:	f013 0f02 	tst.w	r3, #2
    1f6e:	d0f5      	beq.n	1f5c <_oscctrl_init_referenced_generators+0x60>
    1f70:	4770      	bx	lr
    1f72:	bf00      	nop
    1f74:	000d05b7 	.word	0x000d05b7
    1f78:	40001000 	.word	0x40001000

00001f7c <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1f7c:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1f7e:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1f80:	6803      	ldr	r3, [r0, #0]
    1f82:	2100      	movs	r1, #0
    1f84:	4798      	blx	r3
    1f86:	bd08      	pop	{r3, pc}

00001f88 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1f88:	b538      	push	{r3, r4, r5, lr}
    1f8a:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1f8c:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1f8e:	4b07      	ldr	r3, [pc, #28]	; (1fac <_camera_async_init+0x24>)
    1f90:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    1f92:	4b07      	ldr	r3, [pc, #28]	; (1fb0 <_camera_async_init+0x28>)
    1f94:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    1f96:	4d07      	ldr	r5, [pc, #28]	; (1fb4 <_camera_async_init+0x2c>)
    1f98:	2100      	movs	r1, #0
    1f9a:	4628      	mov	r0, r5
    1f9c:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <_camera_async_init+0x30>)
    1f9e:	4798      	blx	r3
	resource->back                 = device;
    1fa0:	682b      	ldr	r3, [r5, #0]
    1fa2:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    1fa4:	4a05      	ldr	r2, [pc, #20]	; (1fbc <_camera_async_init+0x34>)
    1fa6:	601a      	str	r2, [r3, #0]
    1fa8:	bd38      	pop	{r3, r4, r5, pc}
    1faa:	bf00      	nop
    1fac:	c0000020 	.word	0xc0000020
    1fb0:	20000214 	.word	0x20000214
    1fb4:	20000b60 	.word	0x20000b60
    1fb8:	00001bcd 	.word	0x00001bcd
    1fbc:	00001f7d 	.word	0x00001f7d

00001fc0 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    1fc0:	b500      	push	{lr}
    1fc2:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    1fc4:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <PCC_Handler+0x28>)
    1fc6:	6818      	ldr	r0, [r3, #0]
    1fc8:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1fca:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1fcc:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    1fce:	2201      	movs	r2, #1
    1fd0:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    1fd2:	9b01      	ldr	r3, [sp, #4]
    1fd4:	f013 0f01 	tst.w	r3, #1
    1fd8:	d003      	beq.n	1fe2 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1fda:	6803      	ldr	r3, [r0, #0]
    1fdc:	b10b      	cbz	r3, 1fe2 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1fde:	2100      	movs	r1, #0
    1fe0:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    1fe2:	b003      	add	sp, #12
    1fe4:	f85d fb04 	ldr.w	pc, [sp], #4
    1fe8:	20000214 	.word	0x20000214

00001fec <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1fec:	b500      	push	{lr}
    1fee:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1ff0:	4b0d      	ldr	r3, [pc, #52]	; (2028 <RAMECC_Handler+0x3c>)
    1ff2:	789b      	ldrb	r3, [r3, #2]
    1ff4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1ff6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1ff8:	9b01      	ldr	r3, [sp, #4]
    1ffa:	f013 0f02 	tst.w	r3, #2
    1ffe:	d006      	beq.n	200e <RAMECC_Handler+0x22>
    2000:	4b0a      	ldr	r3, [pc, #40]	; (202c <RAMECC_Handler+0x40>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	b11b      	cbz	r3, 200e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2006:	4a08      	ldr	r2, [pc, #32]	; (2028 <RAMECC_Handler+0x3c>)
    2008:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    200a:	4798      	blx	r3
    200c:	e009      	b.n	2022 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    200e:	9b01      	ldr	r3, [sp, #4]
    2010:	f013 0f01 	tst.w	r3, #1
    2014:	d005      	beq.n	2022 <RAMECC_Handler+0x36>
    2016:	4b05      	ldr	r3, [pc, #20]	; (202c <RAMECC_Handler+0x40>)
    2018:	685b      	ldr	r3, [r3, #4]
    201a:	b113      	cbz	r3, 2022 <RAMECC_Handler+0x36>
    201c:	4a02      	ldr	r2, [pc, #8]	; (2028 <RAMECC_Handler+0x3c>)
    201e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2020:	4798      	blx	r3
	} else {
		return;
	}
}
    2022:	b003      	add	sp, #12
    2024:	f85d fb04 	ldr.w	pc, [sp], #4
    2028:	41020000 	.word	0x41020000
    202c:	20000b64 	.word	0x20000b64

00002030 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    2030:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    2032:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2034:	f013 0f04 	tst.w	r3, #4
    2038:	d009      	beq.n	204e <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    203a:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    203c:	f014 0f03 	tst.w	r4, #3
    2040:	d1fb      	bne.n	203a <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2042:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2044:	b2a4      	uxth	r4, r4
    2046:	f024 0404 	bic.w	r4, r4, #4
    204a:	b2a4      	uxth	r4, r4
    204c:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    204e:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2050:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    2054:	2c00      	cmp	r4, #0
    2056:	d135      	bne.n	20c4 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    2058:	4b22      	ldr	r3, [pc, #136]	; (20e4 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    205a:	2a00      	cmp	r2, #0
    205c:	d134      	bne.n	20c8 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    205e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2060:	b292      	uxth	r2, r2
    2062:	f022 0220 	bic.w	r2, r2, #32
    2066:	b292      	uxth	r2, r2
    2068:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    206a:	fbb3 f1f1 	udiv	r1, r3, r1
    206e:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2070:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    2074:	f013 0f04 	tst.w	r3, #4
    2078:	d001      	beq.n	207e <_mci_set_speed+0x4e>
    207a:	b901      	cbnz	r1, 207e <_mci_set_speed+0x4e>
		div = 1;
    207c:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    207e:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    2080:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    2082:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    2084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2088:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    208a:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    208c:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    2090:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2092:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    2094:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    2098:	0189      	lsls	r1, r1, #6
    209a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    209e:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    20a0:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    20a2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20a4:	b29b      	uxth	r3, r3
    20a6:	f043 0301 	orr.w	r3, r3, #1
    20aa:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    20ac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    20ae:	f013 0f02 	tst.w	r3, #2
    20b2:	d0fb      	beq.n	20ac <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    20b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20b6:	b29b      	uxth	r3, r3
    20b8:	f043 0304 	orr.w	r3, r3, #4
    20bc:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    20be:	f85d 4b04 	ldr.w	r4, [sp], #4
    20c2:	4770      	bx	lr
		clkbase = clkbase / 2;
    20c4:	4b08      	ldr	r3, [pc, #32]	; (20e8 <_mci_set_speed+0xb8>)
    20c6:	e7c8      	b.n	205a <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    20c8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    20ca:	b292      	uxth	r2, r2
    20cc:	f042 0220 	orr.w	r2, r2, #32
    20d0:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    20d2:	fb04 3303 	mla	r3, r4, r3, r3
    20d6:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    20da:	2900      	cmp	r1, #0
    20dc:	d0c8      	beq.n	2070 <_mci_set_speed+0x40>
			div = div - 1;
    20de:	3901      	subs	r1, #1
    20e0:	e7c6      	b.n	2070 <_mci_set_speed+0x40>
    20e2:	bf00      	nop
    20e4:	02dc3400 	.word	0x02dc3400
    20e8:	016e1a00 	.word	0x016e1a00

000020ec <_mci_reset>:
{
    20ec:	b510      	push	{r4, lr}
	ASSERT(hw);
    20ee:	4604      	mov	r4, r0
    20f0:	2234      	movs	r2, #52	; 0x34
    20f2:	4906      	ldr	r1, [pc, #24]	; (210c <_mci_reset+0x20>)
    20f4:	3000      	adds	r0, #0
    20f6:	bf18      	it	ne
    20f8:	2001      	movne	r0, #1
    20fa:	4b05      	ldr	r3, [pc, #20]	; (2110 <_mci_reset+0x24>)
    20fc:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    20fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2102:	f043 0302 	orr.w	r3, r3, #2
    2106:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    210a:	bd10      	pop	{r4, pc}
    210c:	00004428 	.word	0x00004428
    2110:	00001585 	.word	0x00001585

00002114 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    2114:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    2116:	4604      	mov	r4, r0
    2118:	227f      	movs	r2, #127	; 0x7f
    211a:	490b      	ldr	r1, [pc, #44]	; (2148 <_mci_wait_busy+0x34>)
    211c:	3000      	adds	r0, #0
    211e:	bf18      	it	ne
    2120:	2001      	movne	r0, #1
    2122:	4b0a      	ldr	r3, [pc, #40]	; (214c <_mci_wait_busy+0x38>)
    2124:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    2126:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    212a:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    212c:	1e59      	subs	r1, r3, #1
    212e:	b12b      	cbz	r3, 213c <_mci_wait_busy+0x28>
    2130:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2132:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    2136:	d0f8      	beq.n	212a <_mci_wait_busy+0x16>
	return true;
    2138:	2001      	movs	r0, #1
}
    213a:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    213c:	4620      	mov	r0, r4
    213e:	4b04      	ldr	r3, [pc, #16]	; (2150 <_mci_wait_busy+0x3c>)
    2140:	4798      	blx	r3
			return false;
    2142:	2000      	movs	r0, #0
    2144:	bd10      	pop	{r4, pc}
    2146:	bf00      	nop
    2148:	00004428 	.word	0x00004428
    214c:	00001585 	.word	0x00001585
    2150:	000020ed 	.word	0x000020ed

00002154 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2156:	460f      	mov	r7, r1
    2158:	4615      	mov	r5, r2
    215a:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    215c:	4604      	mov	r4, r0
    215e:	2299      	movs	r2, #153	; 0x99
    2160:	4934      	ldr	r1, [pc, #208]	; (2234 <_mci_send_cmd_execute+0xe0>)
    2162:	3000      	adds	r0, #0
    2164:	bf18      	it	ne
    2166:	2001      	movne	r0, #1
    2168:	4b33      	ldr	r3, [pc, #204]	; (2238 <_mci_send_cmd_execute+0xe4>)
    216a:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    216c:	0229      	lsls	r1, r5, #8
    216e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    2172:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    2174:	f415 7f80 	tst.w	r5, #256	; 0x100
    2178:	d004      	beq.n	2184 <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    217a:	f415 6f00 	tst.w	r5, #2048	; 0x800
    217e:	d00e      	beq.n	219e <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2180:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    2184:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    2188:	d012      	beq.n	21b0 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    218a:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    218e:	f043 0310 	orr.w	r3, r3, #16
    2192:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    2196:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    2198:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    219a:	81e3      	strh	r3, [r4, #14]
    219c:	e017      	b.n	21ce <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    219e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    21a2:	d002      	beq.n	21aa <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    21a4:	f041 0103 	orr.w	r1, r1, #3
    21a8:	e7ec      	b.n	2184 <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    21aa:	f041 0102 	orr.w	r1, r1, #2
    21ae:	e7e9      	b.n	2184 <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    21b0:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    21b4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    21b8:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    21bc:	e7eb      	b.n	2196 <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    21be:	f240 227f 	movw	r2, #639	; 0x27f
    21c2:	4213      	tst	r3, r2
    21c4:	d118      	bne.n	21f8 <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    21c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    21c8:	f013 0f01 	tst.w	r3, #1
    21cc:	d120      	bne.n	2210 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    21ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    21d0:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    21d2:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    21d6:	d0f2      	beq.n	21be <_mci_send_cmd_execute+0x6a>
			if (sr
    21d8:	f240 225d 	movw	r2, #605	; 0x25d
    21dc:	4213      	tst	r3, r2
    21de:	d0f2      	beq.n	21c6 <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    21e0:	4620      	mov	r0, r4
    21e2:	4b16      	ldr	r3, [pc, #88]	; (223c <_mci_send_cmd_execute+0xe8>)
    21e4:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    21e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    21e8:	b29b      	uxth	r3, r3
    21ea:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    21ee:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    21f2:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    21f4:	2000      	movs	r0, #0
    21f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    21f8:	4620      	mov	r0, r4
    21fa:	4b10      	ldr	r3, [pc, #64]	; (223c <_mci_send_cmd_execute+0xe8>)
    21fc:	4798      	blx	r3
    21fe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2200:	b29b      	uxth	r3, r3
    2202:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2206:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    220a:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    220c:	2000      	movs	r0, #0
    220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2210:	f011 0f20 	tst.w	r1, #32
    2214:	d104      	bne.n	2220 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    2216:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2218:	b29b      	uxth	r3, r3
    221a:	f043 0301 	orr.w	r3, r3, #1
    221e:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2220:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2224:	d101      	bne.n	222a <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    2226:	2001      	movs	r0, #1
}
    2228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    222a:	4620      	mov	r0, r4
    222c:	4b04      	ldr	r3, [pc, #16]	; (2240 <_mci_send_cmd_execute+0xec>)
    222e:	4798      	blx	r3
    2230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2232:	bf00      	nop
    2234:	00004428 	.word	0x00004428
    2238:	00001585 	.word	0x00001585
    223c:	000020ed 	.word	0x000020ed
    2240:	00002115 	.word	0x00002115

00002244 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2244:	b538      	push	{r3, r4, r5, lr}
    2246:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2248:	4605      	mov	r5, r0
    224a:	b348      	cbz	r0, 22a0 <_mci_sync_init+0x5c>
    224c:	b331      	cbz	r1, 229c <_mci_sync_init+0x58>
    224e:	2001      	movs	r0, #1
    2250:	22d8      	movs	r2, #216	; 0xd8
    2252:	4914      	ldr	r1, [pc, #80]	; (22a4 <_mci_sync_init+0x60>)
    2254:	4b14      	ldr	r3, [pc, #80]	; (22a8 <_mci_sync_init+0x64>)
    2256:	4798      	blx	r3

	mci_dev->hw = hw;
    2258:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    225a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    225e:	f043 0301 	orr.w	r3, r3, #1
    2262:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    2266:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    226a:	f013 0f01 	tst.w	r3, #1
    226e:	d1fa      	bne.n	2266 <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2270:	230e      	movs	r3, #14
    2272:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    2276:	230f      	movs	r3, #15
    2278:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    227c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    227e:	b29b      	uxth	r3, r3
    2280:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2284:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2288:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    228a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    228c:	b29b      	uxth	r3, r3
    228e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2292:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2296:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2298:	2000      	movs	r0, #0
    229a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    229c:	2000      	movs	r0, #0
    229e:	e7d7      	b.n	2250 <_mci_sync_init+0xc>
    22a0:	2000      	movs	r0, #0
    22a2:	e7d5      	b.n	2250 <_mci_sync_init+0xc>
    22a4:	00004428 	.word	0x00004428
    22a8:	00001585 	.word	0x00001585

000022ac <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ae:	4616      	mov	r6, r2
    22b0:	461d      	mov	r5, r3
    22b2:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    22b6:	4604      	mov	r4, r0
    22b8:	b1e0      	cbz	r0, 22f4 <_mci_sync_select_device+0x48>
    22ba:	6803      	ldr	r3, [r0, #0]
    22bc:	b1c3      	cbz	r3, 22f0 <_mci_sync_select_device+0x44>
    22be:	2001      	movs	r0, #1
    22c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    22c4:	491b      	ldr	r1, [pc, #108]	; (2334 <_mci_sync_select_device+0x88>)
    22c6:	4b1c      	ldr	r3, [pc, #112]	; (2338 <_mci_sync_select_device+0x8c>)
    22c8:	4798      	blx	r3
	hw = mci_dev->hw;
    22ca:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    22cc:	b1a7      	cbz	r7, 22f8 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    22ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    22d2:	f043 0304 	orr.w	r3, r3, #4
    22d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    22da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    22dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22e0:	d011      	beq.n	2306 <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    22e2:	2d01      	cmp	r5, #1
    22e4:	d015      	beq.n	2312 <_mci_sync_select_device+0x66>
    22e6:	2d04      	cmp	r5, #4
    22e8:	d01b      	beq.n	2322 <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    22ea:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    22ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    22f0:	2000      	movs	r0, #0
    22f2:	e7e5      	b.n	22c0 <_mci_sync_select_device+0x14>
    22f4:	2000      	movs	r0, #0
    22f6:	e7e3      	b.n	22c0 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    22f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    22fc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2300:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2304:	e7e9      	b.n	22da <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    2306:	2200      	movs	r2, #0
    2308:	4631      	mov	r1, r6
    230a:	4620      	mov	r0, r4
    230c:	4b0b      	ldr	r3, [pc, #44]	; (233c <_mci_sync_select_device+0x90>)
    230e:	4798      	blx	r3
    2310:	e7e7      	b.n	22e2 <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2312:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2316:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    231a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    231e:	2000      	movs	r0, #0
    2320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2322:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2326:	f043 0302 	orr.w	r3, r3, #2
    232a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    232e:	2000      	movs	r0, #0
    2330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2332:	bf00      	nop
    2334:	00004428 	.word	0x00004428
    2338:	00001585 	.word	0x00001585
    233c:	00002031 	.word	0x00002031

00002340 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2340:	2000      	movs	r0, #0
    2342:	4770      	bx	lr

00002344 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2344:	b909      	cbnz	r1, 234a <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    2346:	2004      	movs	r0, #4
    2348:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    234a:	2000      	movs	r0, #0
	}
}
    234c:	4770      	bx	lr

0000234e <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    234e:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2350:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2352:	f3c0 5040 	ubfx	r0, r0, #21, #1
    2356:	4770      	bx	lr

00002358 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2358:	b500      	push	{lr}
    235a:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    235c:	f240 1249 	movw	r2, #329	; 0x149
    2360:	4909      	ldr	r1, [pc, #36]	; (2388 <_mci_sync_send_clock+0x30>)
    2362:	3000      	adds	r0, #0
    2364:	bf18      	it	ne
    2366:	2001      	movne	r0, #1
    2368:	4b08      	ldr	r3, [pc, #32]	; (238c <_mci_sync_send_clock+0x34>)
    236a:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    236c:	2300      	movs	r3, #0
    236e:	9301      	str	r3, [sp, #4]
    2370:	e002      	b.n	2378 <_mci_sync_send_clock+0x20>
    2372:	9b01      	ldr	r3, [sp, #4]
    2374:	3301      	adds	r3, #1
    2376:	9301      	str	r3, [sp, #4]
    2378:	9a01      	ldr	r2, [sp, #4]
    237a:	f241 3387 	movw	r3, #4999	; 0x1387
    237e:	429a      	cmp	r2, r3
    2380:	d9f7      	bls.n	2372 <_mci_sync_send_clock+0x1a>
		;
}
    2382:	b003      	add	sp, #12
    2384:	f85d fb04 	ldr.w	pc, [sp], #4
    2388:	00004428 	.word	0x00004428
    238c:	00001585 	.word	0x00001585

00002390 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	460d      	mov	r5, r1
    2394:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2396:	4604      	mov	r4, r0
    2398:	b180      	cbz	r0, 23bc <_mci_sync_send_cmd+0x2c>
    239a:	6803      	ldr	r3, [r0, #0]
    239c:	b163      	cbz	r3, 23b8 <_mci_sync_send_cmd+0x28>
    239e:	2001      	movs	r0, #1
    23a0:	f44f 72ab 	mov.w	r2, #342	; 0x156
    23a4:	490d      	ldr	r1, [pc, #52]	; (23dc <_mci_sync_send_cmd+0x4c>)
    23a6:	4b0e      	ldr	r3, [pc, #56]	; (23e0 <_mci_sync_send_cmd+0x50>)
    23a8:	4798      	blx	r3
	hw = mci_dev->hw;
    23aa:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    23ac:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    23ae:	f013 0f01 	tst.w	r3, #1
    23b2:	d005      	beq.n	23c0 <_mci_sync_send_cmd+0x30>
		return false;
    23b4:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    23b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    23b8:	2000      	movs	r0, #0
    23ba:	e7f1      	b.n	23a0 <_mci_sync_send_cmd+0x10>
    23bc:	2000      	movs	r0, #0
    23be:	e7ef      	b.n	23a0 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    23c0:	8983      	ldrh	r3, [r0, #12]
    23c2:	b29b      	uxth	r3, r3
    23c4:	f023 0301 	bic.w	r3, r3, #1
    23c8:	b29b      	uxth	r3, r3
    23ca:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    23cc:	2100      	movs	r1, #0
    23ce:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    23d0:	4633      	mov	r3, r6
    23d2:	462a      	mov	r2, r5
    23d4:	4c03      	ldr	r4, [pc, #12]	; (23e4 <_mci_sync_send_cmd+0x54>)
    23d6:	47a0      	blx	r4
    23d8:	bd70      	pop	{r4, r5, r6, pc}
    23da:	bf00      	nop
    23dc:	00004428 	.word	0x00004428
    23e0:	00001585 	.word	0x00001585
    23e4:	00002155 	.word	0x00002155

000023e8 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    23e8:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    23ea:	4604      	mov	r4, r0
    23ec:	b160      	cbz	r0, 2408 <_mci_sync_get_response+0x20>
    23ee:	6803      	ldr	r3, [r0, #0]
    23f0:	b143      	cbz	r3, 2404 <_mci_sync_get_response+0x1c>
    23f2:	2001      	movs	r0, #1
    23f4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    23f8:	4904      	ldr	r1, [pc, #16]	; (240c <_mci_sync_get_response+0x24>)
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <_mci_sync_get_response+0x28>)
    23fc:	4798      	blx	r3
	hw = mci_dev->hw;
    23fe:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2400:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    2402:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2404:	2000      	movs	r0, #0
    2406:	e7f5      	b.n	23f4 <_mci_sync_get_response+0xc>
    2408:	2000      	movs	r0, #0
    240a:	e7f3      	b.n	23f4 <_mci_sync_get_response+0xc>
    240c:	00004428 	.word	0x00004428
    2410:	00001585 	.word	0x00001585

00002414 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    2414:	b538      	push	{r3, r4, r5, lr}
    2416:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2418:	4605      	mov	r5, r0
    241a:	b160      	cbz	r0, 2436 <_mci_sync_get_response_128+0x22>
    241c:	6803      	ldr	r3, [r0, #0]
    241e:	b143      	cbz	r3, 2432 <_mci_sync_get_response_128+0x1e>
    2420:	2001      	movs	r0, #1
    2422:	f240 1277 	movw	r2, #375	; 0x177
    2426:	490f      	ldr	r1, [pc, #60]	; (2464 <_mci_sync_get_response_128+0x50>)
    2428:	4b0f      	ldr	r3, [pc, #60]	; (2468 <_mci_sync_get_response_128+0x54>)
    242a:	4798      	blx	r3
	hw = mci_dev->hw;
    242c:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    242e:	2103      	movs	r1, #3
    2430:	e00b      	b.n	244a <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    2432:	2000      	movs	r0, #0
    2434:	e7f5      	b.n	2422 <_mci_sync_get_response_128+0xe>
    2436:	2000      	movs	r0, #0
    2438:	e7f3      	b.n	2422 <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    243a:	0c11      	lsrs	r1, r2, #16
    243c:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    243e:	0a11      	lsrs	r1, r2, #8
    2440:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    2442:	70a2      	strb	r2, [r4, #2]
		response++;
    2444:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    2446:	3b01      	subs	r3, #1
    2448:	b259      	sxtb	r1, r3
    244a:	2900      	cmp	r1, #0
    244c:	db09      	blt.n	2462 <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    244e:	b2cb      	uxtb	r3, r1
    2450:	1d1a      	adds	r2, r3, #4
    2452:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    2456:	2903      	cmp	r1, #3
    2458:	d0ef      	beq.n	243a <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    245a:	0e11      	lsrs	r1, r2, #24
    245c:	f804 1b01 	strb.w	r1, [r4], #1
    2460:	e7eb      	b.n	243a <_mci_sync_get_response_128+0x26>
	}
}
    2462:	bd38      	pop	{r3, r4, r5, pc}
    2464:	00004428 	.word	0x00004428
    2468:	00001585 	.word	0x00001585

0000246c <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    246c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2470:	460d      	mov	r5, r1
    2472:	4690      	mov	r8, r2
    2474:	461f      	mov	r7, r3
    2476:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    247a:	4604      	mov	r4, r0
    247c:	2800      	cmp	r0, #0
    247e:	d031      	beq.n	24e4 <_mci_sync_adtc_start+0x78>
    2480:	6803      	ldr	r3, [r0, #0]
    2482:	b36b      	cbz	r3, 24e0 <_mci_sync_adtc_start+0x74>
    2484:	2001      	movs	r0, #1
    2486:	f240 1293 	movw	r2, #403	; 0x193
    248a:	4921      	ldr	r1, [pc, #132]	; (2510 <_mci_sync_adtc_start+0xa4>)
    248c:	4b21      	ldr	r3, [pc, #132]	; (2514 <_mci_sync_adtc_start+0xa8>)
    248e:	4798      	blx	r3
	hw = mci_dev->hw;
    2490:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2492:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    2494:	f013 0f01 	tst.w	r3, #1
    2498:	d131      	bne.n	24fe <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    249a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    249c:	f013 0f02 	tst.w	r3, #2
    24a0:	d130      	bne.n	2504 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    24a2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    24a6:	d01f      	beq.n	24e8 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    24a8:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    24aa:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    24ae:	d104      	bne.n	24ba <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    24b0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    24b4:	d01a      	beq.n	24ec <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    24b6:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    24ba:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    24bc:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    24be:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    24c2:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    24c4:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    24c6:	2200      	movs	r2, #0
    24c8:	2300      	movs	r3, #0
    24ca:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    24ce:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    24d0:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    24d2:	4643      	mov	r3, r8
    24d4:	462a      	mov	r2, r5
    24d6:	2120      	movs	r1, #32
    24d8:	4c0f      	ldr	r4, [pc, #60]	; (2518 <_mci_sync_adtc_start+0xac>)
    24da:	47a0      	blx	r4
    24dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    24e0:	2000      	movs	r0, #0
    24e2:	e7d0      	b.n	2486 <_mci_sync_adtc_start+0x1a>
    24e4:	2000      	movs	r0, #0
    24e6:	e7ce      	b.n	2486 <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    24e8:	2310      	movs	r3, #16
    24ea:	e7de      	b.n	24aa <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    24ec:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    24f0:	d1e3      	bne.n	24ba <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    24f2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    24f6:	d008      	beq.n	250a <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    24f8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    24fc:	e7dd      	b.n	24ba <_mci_sync_adtc_start+0x4e>
		return false;
    24fe:	2000      	movs	r0, #0
    2500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2504:	2000      	movs	r0, #0
    2506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    250a:	2000      	movs	r0, #0
}
    250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2510:	00004428 	.word	0x00004428
    2514:	00001585 	.word	0x00001585
    2518:	00002155 	.word	0x00002155

0000251c <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    251c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2520:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2522:	4605      	mov	r5, r0
    2524:	2800      	cmp	r0, #0
    2526:	d05d      	beq.n	25e4 <_mci_sync_read_word+0xc8>
    2528:	6803      	ldr	r3, [r0, #0]
    252a:	2b00      	cmp	r3, #0
    252c:	d058      	beq.n	25e0 <_mci_sync_read_word+0xc4>
    252e:	2001      	movs	r0, #1
    2530:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    2534:	4936      	ldr	r1, [pc, #216]	; (2610 <_mci_sync_read_word+0xf4>)
    2536:	4b37      	ldr	r3, [pc, #220]	; (2614 <_mci_sync_read_word+0xf8>)
    2538:	4798      	blx	r3
	hw = mci_dev->hw;
    253a:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    253c:	8a2a      	ldrh	r2, [r5, #16]
    253e:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    2542:	fb08 f802 	mul.w	r8, r8, r2
    2546:	ea4f 79e8 	mov.w	r9, r8, asr #31
    254a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    254e:	ebb8 0800 	subs.w	r8, r8, r0
    2552:	eb69 0901 	sbc.w	r9, r9, r1
    2556:	f1b9 0f00 	cmp.w	r9, #0
    255a:	bf08      	it	eq
    255c:	f1b8 0f04 	cmpeq.w	r8, #4
    2560:	d242      	bcs.n	25e8 <_mci_sync_read_word+0xcc>
    2562:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2566:	b292      	uxth	r2, r2
    2568:	2300      	movs	r3, #0
    256a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 261c <_mci_sync_read_word+0x100>
    256e:	47c0      	blx	r8
    2570:	4313      	orrs	r3, r2
    2572:	d10d      	bne.n	2590 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    2574:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2576:	f003 0370 	and.w	r3, r3, #112	; 0x70
    257a:	2b00      	cmp	r3, #0
    257c:	d136      	bne.n	25ec <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    257e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    2580:	f013 0f20 	tst.w	r3, #32
    2584:	d0f6      	beq.n	2574 <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    2586:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2588:	b29b      	uxth	r3, r3
    258a:	f043 0320 	orr.w	r3, r3, #32
    258e:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    2590:	2e04      	cmp	r6, #4
    2592:	d031      	beq.n	25f8 <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    2594:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    2596:	1e72      	subs	r2, r6, #1
    2598:	2a02      	cmp	r2, #2
    259a:	d801      	bhi.n	25a0 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    259c:	b2db      	uxtb	r3, r3
    259e:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    25a0:	b2f6      	uxtb	r6, r6
    25a2:	2700      	movs	r7, #0
    25a4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    25a8:	18b6      	adds	r6, r6, r2
    25aa:	415f      	adcs	r7, r3
    25ac:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    25b0:	8a2a      	ldrh	r2, [r5, #16]
    25b2:	8a68      	ldrh	r0, [r5, #18]
    25b4:	fba2 2300 	umull	r2, r3, r2, r0
    25b8:	429f      	cmp	r7, r3
    25ba:	bf08      	it	eq
    25bc:	4296      	cmpeq	r6, r2
    25be:	d324      	bcc.n	260a <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    25c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    25c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
    25c6:	b9d3      	cbnz	r3, 25fe <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    25c8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    25ca:	f013 0f02 	tst.w	r3, #2
    25ce:	d0f7      	beq.n	25c0 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    25d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    25d2:	b29b      	uxth	r3, r3
    25d4:	f043 0302 	orr.w	r3, r3, #2
    25d8:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    25da:	2001      	movs	r0, #1
    25dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    25e0:	2000      	movs	r0, #0
    25e2:	e7a5      	b.n	2530 <_mci_sync_read_word+0x14>
    25e4:	2000      	movs	r0, #0
    25e6:	e7a3      	b.n	2530 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    25e8:	2604      	movs	r6, #4
    25ea:	e7bc      	b.n	2566 <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    25ec:	4620      	mov	r0, r4
    25ee:	4b0a      	ldr	r3, [pc, #40]	; (2618 <_mci_sync_read_word+0xfc>)
    25f0:	4798      	blx	r3
				return false;
    25f2:	2000      	movs	r0, #0
    25f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    25f8:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    25fa:	603b      	str	r3, [r7, #0]
    25fc:	e7d0      	b.n	25a0 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    25fe:	4620      	mov	r0, r4
    2600:	4b05      	ldr	r3, [pc, #20]	; (2618 <_mci_sync_read_word+0xfc>)
    2602:	4798      	blx	r3
			return false;
    2604:	2000      	movs	r0, #0
    2606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    260a:	2001      	movs	r0, #1
}
    260c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2610:	00004428 	.word	0x00004428
    2614:	00001585 	.word	0x00001585
    2618:	000020ed 	.word	0x000020ed
    261c:	00003e6d 	.word	0x00003e6d

00002620 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    2620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2624:	460e      	mov	r6, r1
    2626:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2628:	4607      	mov	r7, r0
    262a:	b1f0      	cbz	r0, 266a <_mci_sync_start_read_blocks+0x4a>
    262c:	6803      	ldr	r3, [r0, #0]
    262e:	b1d3      	cbz	r3, 2666 <_mci_sync_start_read_blocks+0x46>
    2630:	2001      	movs	r0, #1
    2632:	4d18      	ldr	r5, [pc, #96]	; (2694 <_mci_sync_start_read_blocks+0x74>)
    2634:	f240 223e 	movw	r2, #574	; 0x23e
    2638:	4629      	mov	r1, r5
    263a:	4c17      	ldr	r4, [pc, #92]	; (2698 <_mci_sync_start_read_blocks+0x78>)
    263c:	47a0      	blx	r4
	ASSERT(nb_block);
    263e:	f240 223f 	movw	r2, #575	; 0x23f
    2642:	4629      	mov	r1, r5
    2644:	f118 0000 	adds.w	r0, r8, #0
    2648:	bf18      	it	ne
    264a:	2001      	movne	r0, #1
    264c:	47a0      	blx	r4
	ASSERT(dst);
    264e:	f44f 7210 	mov.w	r2, #576	; 0x240
    2652:	4629      	mov	r1, r5
    2654:	1c30      	adds	r0, r6, #0
    2656:	bf18      	it	ne
    2658:	2001      	movne	r0, #1
    265a:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    265c:	8a3d      	ldrh	r5, [r7, #16]
    265e:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    2662:	2404      	movs	r4, #4

	while (nb_data) {
    2664:	e005      	b.n	2672 <_mci_sync_start_read_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2666:	2000      	movs	r0, #0
    2668:	e7e3      	b.n	2632 <_mci_sync_start_read_blocks+0x12>
    266a:	2000      	movs	r0, #0
    266c:	e7e1      	b.n	2632 <_mci_sync_start_read_blocks+0x12>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    266e:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2670:	4426      	add	r6, r4
	while (nb_data) {
    2672:	b165      	cbz	r5, 268e <_mci_sync_start_read_blocks+0x6e>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    2674:	4631      	mov	r1, r6
    2676:	4638      	mov	r0, r7
    2678:	4b08      	ldr	r3, [pc, #32]	; (269c <_mci_sync_start_read_blocks+0x7c>)
    267a:	4798      	blx	r3
		if (nb_data < nbytes) {
    267c:	42a5      	cmp	r5, r4
    267e:	d2f6      	bcs.n	266e <_mci_sync_start_read_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2680:	8a3b      	ldrh	r3, [r7, #16]
    2682:	fb93 f2f4 	sdiv	r2, r3, r4
    2686:	fb04 3412 	mls	r4, r4, r2, r3
    268a:	b2e4      	uxtb	r4, r4
    268c:	e7ef      	b.n	266e <_mci_sync_start_read_blocks+0x4e>
	}

	return true;
}
    268e:	2001      	movs	r0, #1
    2690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2694:	00004428 	.word	0x00004428
    2698:	00001585 	.word	0x00001585
    269c:	0000251d 	.word	0x0000251d

000026a0 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    26a0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    26a2:	b158      	cbz	r0, 26bc <_mci_sync_wait_end_of_read_blocks+0x1c>
    26a4:	6803      	ldr	r3, [r0, #0]
    26a6:	b13b      	cbz	r3, 26b8 <_mci_sync_wait_end_of_read_blocks+0x18>
    26a8:	2001      	movs	r0, #1
    26aa:	f240 2271 	movw	r2, #625	; 0x271
    26ae:	4904      	ldr	r1, [pc, #16]	; (26c0 <_mci_sync_wait_end_of_read_blocks+0x20>)
    26b0:	4b04      	ldr	r3, [pc, #16]	; (26c4 <_mci_sync_wait_end_of_read_blocks+0x24>)
    26b2:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    26b4:	2001      	movs	r0, #1
    26b6:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    26b8:	2000      	movs	r0, #0
    26ba:	e7f6      	b.n	26aa <_mci_sync_wait_end_of_read_blocks+0xa>
    26bc:	2000      	movs	r0, #0
    26be:	e7f4      	b.n	26aa <_mci_sync_wait_end_of_read_blocks+0xa>
    26c0:	00004428 	.word	0x00004428
    26c4:	00001585 	.word	0x00001585

000026c8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    26c8:	b470      	push	{r4, r5, r6}
    26ca:	b087      	sub	sp, #28
    26cc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    26ce:	466c      	mov	r4, sp
    26d0:	4d0c      	ldr	r5, [pc, #48]	; (2704 <_sercom_get_hardware_index+0x3c>)
    26d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    26d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    26d6:	e895 0003 	ldmia.w	r5, {r0, r1}
    26da:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26de:	2000      	movs	r0, #0
    26e0:	2805      	cmp	r0, #5
    26e2:	d80a      	bhi.n	26fa <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    26e4:	ab06      	add	r3, sp, #24
    26e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    26ea:	f853 3c18 	ldr.w	r3, [r3, #-24]
    26ee:	42b3      	cmp	r3, r6
    26f0:	d001      	beq.n	26f6 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26f2:	3001      	adds	r0, #1
    26f4:	e7f4      	b.n	26e0 <_sercom_get_hardware_index+0x18>
			return i;
    26f6:	b2c0      	uxtb	r0, r0
    26f8:	e000      	b.n	26fc <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    26fa:	2000      	movs	r0, #0
}
    26fc:	b007      	add	sp, #28
    26fe:	bc70      	pop	{r4, r5, r6}
    2700:	4770      	bx	lr
    2702:	bf00      	nop
    2704:	00004440 	.word	0x00004440

00002708 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2708:	b510      	push	{r4, lr}
	void *hw = device->hw;
    270a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    270c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    270e:	f013 0f01 	tst.w	r3, #1
    2712:	d003      	beq.n	271c <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2714:	7da3      	ldrb	r3, [r4, #22]
    2716:	f013 0f01 	tst.w	r3, #1
    271a:	d112      	bne.n	2742 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    271c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    271e:	f013 0f02 	tst.w	r3, #2
    2722:	d003      	beq.n	272c <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2724:	7da3      	ldrb	r3, [r4, #22]
    2726:	f013 0f02 	tst.w	r3, #2
    272a:	d10f      	bne.n	274c <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    272c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    272e:	f013 0f04 	tst.w	r3, #4
    2732:	d015      	beq.n	2760 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2734:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2736:	f003 0337 	and.w	r3, r3, #55	; 0x37
    273a:	b163      	cbz	r3, 2756 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    273c:	23ff      	movs	r3, #255	; 0xff
    273e:	8363      	strh	r3, [r4, #26]
    2740:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2742:	2301      	movs	r3, #1
    2744:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2746:	6803      	ldr	r3, [r0, #0]
    2748:	4798      	blx	r3
    274a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    274c:	2302      	movs	r3, #2
    274e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2750:	6883      	ldr	r3, [r0, #8]
    2752:	4798      	blx	r3
    2754:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2756:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2758:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    275a:	b2c9      	uxtb	r1, r1
    275c:	4798      	blx	r3
    275e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2760:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2762:	09db      	lsrs	r3, r3, #7
    2764:	d100      	bne.n	2768 <_sercom_usart_interrupt_handler+0x60>
    2766:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2768:	2380      	movs	r3, #128	; 0x80
    276a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    276c:	68c3      	ldr	r3, [r0, #12]
    276e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2770:	8b63      	ldrh	r3, [r4, #26]
    2772:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2774:	8363      	strh	r3, [r4, #26]
    2776:	e7f6      	b.n	2766 <_sercom_usart_interrupt_handler+0x5e>

00002778 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2778:	4b03      	ldr	r3, [pc, #12]	; (2788 <_sercom_init_irq_param+0x10>)
    277a:	4298      	cmp	r0, r3
    277c:	d000      	beq.n	2780 <_sercom_init_irq_param+0x8>
    277e:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2780:	4b02      	ldr	r3, [pc, #8]	; (278c <_sercom_init_irq_param+0x14>)
    2782:	6019      	str	r1, [r3, #0]
	}
}
    2784:	e7fb      	b.n	277e <_sercom_init_irq_param+0x6>
    2786:	bf00      	nop
    2788:	43000400 	.word	0x43000400
    278c:	20000218 	.word	0x20000218

00002790 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2790:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2792:	4b04      	ldr	r3, [pc, #16]	; (27a4 <_sercom_get_irq_num+0x14>)
    2794:	4798      	blx	r3
    2796:	0080      	lsls	r0, r0, #2
    2798:	b2c0      	uxtb	r0, r0
    279a:	302e      	adds	r0, #46	; 0x2e
}
    279c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    27a0:	bd08      	pop	{r3, pc}
    27a2:	bf00      	nop
    27a4:	000026c9 	.word	0x000026c9

000027a8 <_get_sercom_index>:
{
    27a8:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    27aa:	4b0c      	ldr	r3, [pc, #48]	; (27dc <_get_sercom_index+0x34>)
    27ac:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27ae:	2300      	movs	r3, #0
    27b0:	b143      	cbz	r3, 27c4 <_get_sercom_index+0x1c>
	ASSERT(false);
    27b2:	f240 226b 	movw	r2, #619	; 0x26b
    27b6:	490a      	ldr	r1, [pc, #40]	; (27e0 <_get_sercom_index+0x38>)
    27b8:	2000      	movs	r0, #0
    27ba:	4b0a      	ldr	r3, [pc, #40]	; (27e4 <_get_sercom_index+0x3c>)
    27bc:	4798      	blx	r3
	return 0;
    27be:	2300      	movs	r3, #0
}
    27c0:	4618      	mov	r0, r3
    27c2:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    27c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    27c8:	00d1      	lsls	r1, r2, #3
    27ca:	4a07      	ldr	r2, [pc, #28]	; (27e8 <_get_sercom_index+0x40>)
    27cc:	440a      	add	r2, r1
    27ce:	7e12      	ldrb	r2, [r2, #24]
    27d0:	4290      	cmp	r0, r2
    27d2:	d0f5      	beq.n	27c0 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27d4:	3301      	adds	r3, #1
    27d6:	b2db      	uxtb	r3, r3
    27d8:	e7ea      	b.n	27b0 <_get_sercom_index+0x8>
    27da:	bf00      	nop
    27dc:	000026c9 	.word	0x000026c9
    27e0:	000044ac 	.word	0x000044ac
    27e4:	00001585 	.word	0x00001585
    27e8:	00004440 	.word	0x00004440

000027ec <_usart_init>:
{
    27ec:	b538      	push	{r3, r4, r5, lr}
    27ee:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    27f0:	4b3c      	ldr	r3, [pc, #240]	; (28e4 <_usart_init+0xf8>)
    27f2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    27f4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    27f6:	f013 0f01 	tst.w	r3, #1
    27fa:	d122      	bne.n	2842 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    27fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2800:	00da      	lsls	r2, r3, #3
    2802:	4b39      	ldr	r3, [pc, #228]	; (28e8 <_usart_init+0xfc>)
    2804:	4413      	add	r3, r2
    2806:	69da      	ldr	r2, [r3, #28]
    2808:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    280c:	69e3      	ldr	r3, [r4, #28]
    280e:	f013 0f03 	tst.w	r3, #3
    2812:	d1fb      	bne.n	280c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2814:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2816:	f013 0f02 	tst.w	r3, #2
    281a:	d00b      	beq.n	2834 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	f023 0302 	bic.w	r3, r3, #2
    2822:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2824:	69e3      	ldr	r3, [r4, #28]
    2826:	f013 0f03 	tst.w	r3, #3
    282a:	d1fb      	bne.n	2824 <_usart_init+0x38>
    282c:	69e3      	ldr	r3, [r4, #28]
    282e:	f013 0f02 	tst.w	r3, #2
    2832:	d1fb      	bne.n	282c <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2834:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2838:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    283a:	69e3      	ldr	r3, [r4, #28]
    283c:	f013 0f03 	tst.w	r3, #3
    2840:	d1fb      	bne.n	283a <_usart_init+0x4e>
    2842:	69e3      	ldr	r3, [r4, #28]
    2844:	f013 0f01 	tst.w	r3, #1
    2848:	d1fb      	bne.n	2842 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    284a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    284e:	00da      	lsls	r2, r3, #3
    2850:	4b25      	ldr	r3, [pc, #148]	; (28e8 <_usart_init+0xfc>)
    2852:	4413      	add	r3, r2
    2854:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2856:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2858:	69e3      	ldr	r3, [r4, #28]
    285a:	f013 0f03 	tst.w	r3, #3
    285e:	d1fb      	bne.n	2858 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2860:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2864:	00da      	lsls	r2, r3, #3
    2866:	4b20      	ldr	r3, [pc, #128]	; (28e8 <_usart_init+0xfc>)
    2868:	4413      	add	r3, r2
    286a:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    286c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    286e:	69e3      	ldr	r3, [r4, #28]
    2870:	f013 0f1f 	tst.w	r3, #31
    2874:	d1fb      	bne.n	286e <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2876:	0042      	lsls	r2, r0, #1
    2878:	4402      	add	r2, r0
    287a:	00d1      	lsls	r1, r2, #3
    287c:	4b1a      	ldr	r3, [pc, #104]	; (28e8 <_usart_init+0xfc>)
    287e:	440b      	add	r3, r1
    2880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2882:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2884:	69db      	ldr	r3, [r3, #28]
    2886:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    288a:	d10a      	bne.n	28a2 <_usart_init+0xb6>
    288c:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2890:	d107      	bne.n	28a2 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2892:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2896:	00da      	lsls	r2, r3, #3
    2898:	4b13      	ldr	r3, [pc, #76]	; (28e8 <_usart_init+0xfc>)
    289a:	4413      	add	r3, r2
    289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    289e:	81a3      	strh	r3, [r4, #12]
    28a0:	e00f      	b.n	28c2 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    28a2:	0042      	lsls	r2, r0, #1
    28a4:	4402      	add	r2, r0
    28a6:	00d1      	lsls	r1, r2, #3
    28a8:	4b0f      	ldr	r3, [pc, #60]	; (28e8 <_usart_init+0xfc>)
    28aa:	440b      	add	r3, r1
    28ac:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    28ae:	89a2      	ldrh	r2, [r4, #12]
    28b0:	f361 020c 	bfi	r2, r1, #0, #13
    28b4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    28b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    28ba:	89a3      	ldrh	r3, [r4, #12]
    28bc:	f362 334f 	bfi	r3, r2, #13, #3
    28c0:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    28c2:	4a09      	ldr	r2, [pc, #36]	; (28e8 <_usart_init+0xfc>)
    28c4:	0043      	lsls	r3, r0, #1
    28c6:	181d      	adds	r5, r3, r0
    28c8:	00e9      	lsls	r1, r5, #3
    28ca:	460d      	mov	r5, r1
    28cc:	4411      	add	r1, r2
    28ce:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    28d2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    28d4:	442a      	add	r2, r5
    28d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    28da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    28de:	2000      	movs	r0, #0
    28e0:	bd38      	pop	{r3, r4, r5, pc}
    28e2:	bf00      	nop
    28e4:	000027a9 	.word	0x000027a9
    28e8:	00004440 	.word	0x00004440

000028ec <_usart_async_init>:
{
    28ec:	b570      	push	{r4, r5, r6, lr}
    28ee:	460c      	mov	r4, r1
	ASSERT(device);
    28f0:	4606      	mov	r6, r0
    28f2:	22cb      	movs	r2, #203	; 0xcb
    28f4:	4918      	ldr	r1, [pc, #96]	; (2958 <_usart_async_init+0x6c>)
    28f6:	3000      	adds	r0, #0
    28f8:	bf18      	it	ne
    28fa:	2001      	movne	r0, #1
    28fc:	4b17      	ldr	r3, [pc, #92]	; (295c <_usart_async_init+0x70>)
    28fe:	4798      	blx	r3
	init_status = _usart_init(hw);
    2900:	4620      	mov	r0, r4
    2902:	4b17      	ldr	r3, [pc, #92]	; (2960 <_usart_async_init+0x74>)
    2904:	4798      	blx	r3
	if (init_status) {
    2906:	4605      	mov	r5, r0
    2908:	b108      	cbz	r0, 290e <_usart_async_init+0x22>
}
    290a:	4628      	mov	r0, r5
    290c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    290e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2910:	4631      	mov	r1, r6
    2912:	4620      	mov	r0, r4
    2914:	4b13      	ldr	r3, [pc, #76]	; (2964 <_usart_async_init+0x78>)
    2916:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2918:	4620      	mov	r0, r4
    291a:	4b13      	ldr	r3, [pc, #76]	; (2968 <_usart_async_init+0x7c>)
    291c:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    291e:	2400      	movs	r4, #0
    2920:	e016      	b.n	2950 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2922:	0941      	lsrs	r1, r0, #5
    2924:	f000 021f 	and.w	r2, r0, #31
    2928:	2301      	movs	r3, #1
    292a:	4093      	lsls	r3, r2
    292c:	4a0f      	ldr	r2, [pc, #60]	; (296c <_usart_async_init+0x80>)
    292e:	f101 0620 	add.w	r6, r1, #32
    2932:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2936:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    293a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    293e:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2942:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    294a:	3001      	adds	r0, #1
    294c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    294e:	3401      	adds	r4, #1
    2950:	2c03      	cmp	r4, #3
    2952:	d9e6      	bls.n	2922 <_usart_async_init+0x36>
    2954:	e7d9      	b.n	290a <_usart_async_init+0x1e>
    2956:	bf00      	nop
    2958:	000044ac 	.word	0x000044ac
    295c:	00001585 	.word	0x00001585
    2960:	000027ed 	.word	0x000027ed
    2964:	00002779 	.word	0x00002779
    2968:	00002791 	.word	0x00002791
    296c:	e000e100 	.word	0xe000e100

00002970 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2970:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2972:	6299      	str	r1, [r3, #40]	; 0x28
    2974:	4770      	bx	lr

00002976 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2976:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2978:	2201      	movs	r2, #1
    297a:	759a      	strb	r2, [r3, #22]
    297c:	4770      	bx	lr

0000297e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    297e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2980:	2202      	movs	r2, #2
    2982:	759a      	strb	r2, [r3, #22]
    2984:	4770      	bx	lr
	...

00002988 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2988:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    298a:	4b02      	ldr	r3, [pc, #8]	; (2994 <SERCOM5_0_Handler+0xc>)
    298c:	6818      	ldr	r0, [r3, #0]
    298e:	4b02      	ldr	r3, [pc, #8]	; (2998 <SERCOM5_0_Handler+0x10>)
    2990:	4798      	blx	r3
    2992:	bd08      	pop	{r3, pc}
    2994:	20000218 	.word	0x20000218
    2998:	00002709 	.word	0x00002709

0000299c <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    299c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    299e:	4b02      	ldr	r3, [pc, #8]	; (29a8 <SERCOM5_1_Handler+0xc>)
    29a0:	6818      	ldr	r0, [r3, #0]
    29a2:	4b02      	ldr	r3, [pc, #8]	; (29ac <SERCOM5_1_Handler+0x10>)
    29a4:	4798      	blx	r3
    29a6:	bd08      	pop	{r3, pc}
    29a8:	20000218 	.word	0x20000218
    29ac:	00002709 	.word	0x00002709

000029b0 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    29b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    29b2:	4b02      	ldr	r3, [pc, #8]	; (29bc <SERCOM5_2_Handler+0xc>)
    29b4:	6818      	ldr	r0, [r3, #0]
    29b6:	4b02      	ldr	r3, [pc, #8]	; (29c0 <SERCOM5_2_Handler+0x10>)
    29b8:	4798      	blx	r3
    29ba:	bd08      	pop	{r3, pc}
    29bc:	20000218 	.word	0x20000218
    29c0:	00002709 	.word	0x00002709

000029c4 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    29c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <SERCOM5_3_Handler+0xc>)
    29c8:	6818      	ldr	r0, [r3, #0]
    29ca:	4b02      	ldr	r3, [pc, #8]	; (29d4 <SERCOM5_3_Handler+0x10>)
    29cc:	4798      	blx	r3
    29ce:	bd08      	pop	{r3, pc}
    29d0:	20000218 	.word	0x20000218
    29d4:	00002709 	.word	0x00002709

000029d8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    29d8:	4b03      	ldr	r3, [pc, #12]	; (29e8 <_system_time_init+0x10>)
    29da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29de:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    29e0:	2205      	movs	r2, #5
    29e2:	601a      	str	r2, [r3, #0]
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop
    29e8:	e000e010 	.word	0xe000e010

000029ec <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    29ec:	b508      	push	{r3, lr}
	_system_time_init(hw);
    29ee:	4b01      	ldr	r3, [pc, #4]	; (29f4 <_delay_init+0x8>)
    29f0:	4798      	blx	r3
    29f2:	bd08      	pop	{r3, pc}
    29f4:	000029d9 	.word	0x000029d9

000029f8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    29f8:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    29fa:	e00d      	b.n	2a18 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    29fc:	4b0d      	ldr	r3, [pc, #52]	; (2a34 <_delay_cycles+0x3c>)
    29fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2a02:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2a04:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a06:	4b0b      	ldr	r3, [pc, #44]	; (2a34 <_delay_cycles+0x3c>)
    2a08:	681b      	ldr	r3, [r3, #0]
    2a0a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a0e:	d0fa      	beq.n	2a06 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    2a10:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2a14:	3101      	adds	r1, #1
	while (n--) {
    2a16:	4610      	mov	r0, r2
    2a18:	1e43      	subs	r3, r0, #1
    2a1a:	b2da      	uxtb	r2, r3
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d1ed      	bne.n	29fc <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2a20:	4b04      	ldr	r3, [pc, #16]	; (2a34 <_delay_cycles+0x3c>)
    2a22:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a24:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a26:	4b03      	ldr	r3, [pc, #12]	; (2a34 <_delay_cycles+0x3c>)
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a2e:	d0fa      	beq.n	2a26 <_delay_cycles+0x2e>
		;
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	e000e010 	.word	0xe000e010

00002a38 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2a38:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2a3a:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2a3c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2a3e:	f012 0f01 	tst.w	r2, #1
    2a42:	d100      	bne.n	2a46 <tc_interrupt_handler+0xe>
    2a44:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2a46:	2201      	movs	r2, #1
    2a48:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2a4a:	6803      	ldr	r3, [r0, #0]
    2a4c:	4798      	blx	r3
	}
}
    2a4e:	e7f9      	b.n	2a44 <tc_interrupt_handler+0xc>

00002a50 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2a50:	b538      	push	{r3, r4, r5, lr}
    2a52:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2a54:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2a56:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2a58:	f013 0f01 	tst.w	r3, #1
    2a5c:	d004      	beq.n	2a68 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2a5e:	2301      	movs	r3, #1
    2a60:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2a62:	6803      	ldr	r3, [r0, #0]
    2a64:	b103      	cbz	r3, 2a68 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2a66:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2a68:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2a6a:	f013 0f02 	tst.w	r3, #2
    2a6e:	d005      	beq.n	2a7c <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2a70:	2302      	movs	r3, #2
    2a72:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2a74:	686b      	ldr	r3, [r5, #4]
    2a76:	b10b      	cbz	r3, 2a7c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2a78:	4628      	mov	r0, r5
    2a7a:	4798      	blx	r3
    2a7c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002a80 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2a80:	4b06      	ldr	r3, [pc, #24]	; (2a9c <_tc_init_irq_param+0x1c>)
    2a82:	4298      	cmp	r0, r3
    2a84:	d003      	beq.n	2a8e <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2a86:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <_tc_init_irq_param+0x20>)
    2a88:	4298      	cmp	r0, r3
    2a8a:	d003      	beq.n	2a94 <_tc_init_irq_param+0x14>
    2a8c:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2a8e:	4b05      	ldr	r3, [pc, #20]	; (2aa4 <_tc_init_irq_param+0x24>)
    2a90:	6019      	str	r1, [r3, #0]
    2a92:	e7f8      	b.n	2a86 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2a94:	4b03      	ldr	r3, [pc, #12]	; (2aa4 <_tc_init_irq_param+0x24>)
    2a96:	6059      	str	r1, [r3, #4]
	}
}
    2a98:	e7f8      	b.n	2a8c <_tc_init_irq_param+0xc>
    2a9a:	bf00      	nop
    2a9c:	40003800 	.word	0x40003800
    2aa0:	40003c00 	.word	0x40003c00
    2aa4:	2000021c 	.word	0x2000021c

00002aa8 <get_tc_index>:
{
    2aa8:	b570      	push	{r4, r5, r6, lr}
    2aaa:	b086      	sub	sp, #24
    2aac:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2aae:	466c      	mov	r4, sp
    2ab0:	4d17      	ldr	r5, [pc, #92]	; (2b10 <get_tc_index+0x68>)
    2ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
    2aba:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2abe:	2300      	movs	r3, #0
    2ac0:	2b05      	cmp	r3, #5
    2ac2:	d80a      	bhi.n	2ada <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2ac4:	aa06      	add	r2, sp, #24
    2ac6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2aca:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2ace:	42b2      	cmp	r2, r6
    2ad0:	d001      	beq.n	2ad6 <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ad2:	3301      	adds	r3, #1
    2ad4:	e7f4      	b.n	2ac0 <get_tc_index+0x18>
			return i;
    2ad6:	b2db      	uxtb	r3, r3
    2ad8:	e000      	b.n	2adc <get_tc_index+0x34>
		}
	}
	return 0;
    2ada:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2adc:	2200      	movs	r2, #0
    2ade:	2a01      	cmp	r2, #1
    2ae0:	d80b      	bhi.n	2afa <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2ae2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2ae6:	0081      	lsls	r1, r0, #2
    2ae8:	480a      	ldr	r0, [pc, #40]	; (2b14 <get_tc_index+0x6c>)
    2aea:	5c41      	ldrb	r1, [r0, r1]
    2aec:	4299      	cmp	r1, r3
    2aee:	d002      	beq.n	2af6 <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2af0:	3201      	adds	r2, #1
    2af2:	b2d2      	uxtb	r2, r2
    2af4:	e7f3      	b.n	2ade <get_tc_index+0x36>
			return i;
    2af6:	b250      	sxtb	r0, r2
    2af8:	e007      	b.n	2b0a <get_tc_index+0x62>
	ASSERT(false);
    2afa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2afe:	4906      	ldr	r1, [pc, #24]	; (2b18 <get_tc_index+0x70>)
    2b00:	2000      	movs	r0, #0
    2b02:	4b06      	ldr	r3, [pc, #24]	; (2b1c <get_tc_index+0x74>)
    2b04:	4798      	blx	r3
	return -1;
    2b06:	f04f 30ff 	mov.w	r0, #4294967295
}
    2b0a:	b006      	add	sp, #24
    2b0c:	bd70      	pop	{r4, r5, r6, pc}
    2b0e:	bf00      	nop
    2b10:	000044c8 	.word	0x000044c8
    2b14:	20000000 	.word	0x20000000
    2b18:	000044e0 	.word	0x000044e0
    2b1c:	00001585 	.word	0x00001585

00002b20 <_timer_init>:
{
    2b20:	b570      	push	{r4, r5, r6, lr}
    2b22:	4606      	mov	r6, r0
    2b24:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2b26:	4608      	mov	r0, r1
    2b28:	4b6c      	ldr	r3, [pc, #432]	; (2cdc <_timer_init+0x1bc>)
    2b2a:	4798      	blx	r3
    2b2c:	4605      	mov	r5, r0
	device->hw = hw;
    2b2e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2b30:	228f      	movs	r2, #143	; 0x8f
    2b32:	496b      	ldr	r1, [pc, #428]	; (2ce0 <_timer_init+0x1c0>)
    2b34:	2001      	movs	r0, #1
    2b36:	4b6b      	ldr	r3, [pc, #428]	; (2ce4 <_timer_init+0x1c4>)
    2b38:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2b3a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2b3c:	f013 0f01 	tst.w	r3, #1
    2b40:	d119      	bne.n	2b76 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b42:	6923      	ldr	r3, [r4, #16]
    2b44:	f013 0f03 	tst.w	r3, #3
    2b48:	d1fb      	bne.n	2b42 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2b4a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2b4c:	f013 0f02 	tst.w	r3, #2
    2b50:	d00b      	beq.n	2b6a <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2b52:	6823      	ldr	r3, [r4, #0]
    2b54:	f023 0302 	bic.w	r3, r3, #2
    2b58:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b5a:	6923      	ldr	r3, [r4, #16]
    2b5c:	f013 0f03 	tst.w	r3, #3
    2b60:	d1fb      	bne.n	2b5a <_timer_init+0x3a>
    2b62:	6923      	ldr	r3, [r4, #16]
    2b64:	f013 0f02 	tst.w	r3, #2
    2b68:	d1fb      	bne.n	2b62 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2b6a:	2301      	movs	r3, #1
    2b6c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b6e:	6923      	ldr	r3, [r4, #16]
    2b70:	f013 0f03 	tst.w	r3, #3
    2b74:	d1fb      	bne.n	2b6e <_timer_init+0x4e>
    2b76:	6923      	ldr	r3, [r4, #16]
    2b78:	f013 0f01 	tst.w	r3, #1
    2b7c:	d1fb      	bne.n	2b76 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2b7e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b82:	009a      	lsls	r2, r3, #2
    2b84:	4b58      	ldr	r3, [pc, #352]	; (2ce8 <_timer_init+0x1c8>)
    2b86:	4413      	add	r3, r2
    2b88:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2b8a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b8c:	6923      	ldr	r3, [r4, #16]
    2b8e:	f013 0f03 	tst.w	r3, #3
    2b92:	d1fb      	bne.n	2b8c <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2b94:	00aa      	lsls	r2, r5, #2
    2b96:	442a      	add	r2, r5
    2b98:	0091      	lsls	r1, r2, #2
    2b9a:	4b53      	ldr	r3, [pc, #332]	; (2ce8 <_timer_init+0x1c8>)
    2b9c:	440b      	add	r3, r1
    2b9e:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2ba0:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2ba2:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2ba4:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2ba6:	2201      	movs	r2, #1
    2ba8:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2baa:	685b      	ldr	r3, [r3, #4]
    2bac:	f003 030c 	and.w	r3, r3, #12
    2bb0:	2b08      	cmp	r3, #8
    2bb2:	d05b      	beq.n	2c6c <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d16d      	bne.n	2c94 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2bb8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bbc:	009a      	lsls	r2, r3, #2
    2bbe:	4b4a      	ldr	r3, [pc, #296]	; (2ce8 <_timer_init+0x1c8>)
    2bc0:	4413      	add	r3, r2
    2bc2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2bc4:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bc6:	6923      	ldr	r3, [r4, #16]
    2bc8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bcc:	d1fb      	bne.n	2bc6 <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2bce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bd2:	009a      	lsls	r2, r3, #2
    2bd4:	4b44      	ldr	r3, [pc, #272]	; (2ce8 <_timer_init+0x1c8>)
    2bd6:	4413      	add	r3, r2
    2bd8:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2bda:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2bdc:	6923      	ldr	r3, [r4, #16]
    2bde:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2be2:	d1fb      	bne.n	2bdc <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2be4:	2301      	movs	r3, #1
    2be6:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2be8:	4631      	mov	r1, r6
    2bea:	4620      	mov	r0, r4
    2bec:	4b3f      	ldr	r3, [pc, #252]	; (2cec <_timer_init+0x1cc>)
    2bee:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2bf0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bf4:	009a      	lsls	r2, r3, #2
    2bf6:	4b3c      	ldr	r3, [pc, #240]	; (2ce8 <_timer_init+0x1c8>)
    2bf8:	4413      	add	r3, r2
    2bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2bfe:	2b00      	cmp	r3, #0
    2c00:	db0d      	blt.n	2c1e <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c02:	095a      	lsrs	r2, r3, #5
    2c04:	f003 031f 	and.w	r3, r3, #31
    2c08:	2101      	movs	r1, #1
    2c0a:	fa01 f303 	lsl.w	r3, r1, r3
    2c0e:	3220      	adds	r2, #32
    2c10:	4937      	ldr	r1, [pc, #220]	; (2cf0 <_timer_init+0x1d0>)
    2c12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c1a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2c1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c22:	009a      	lsls	r2, r3, #2
    2c24:	4b30      	ldr	r3, [pc, #192]	; (2ce8 <_timer_init+0x1c8>)
    2c26:	4413      	add	r3, r2
    2c28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	db09      	blt.n	2c44 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c30:	095a      	lsrs	r2, r3, #5
    2c32:	f003 031f 	and.w	r3, r3, #31
    2c36:	2101      	movs	r1, #1
    2c38:	fa01 f303 	lsl.w	r3, r1, r3
    2c3c:	3260      	adds	r2, #96	; 0x60
    2c3e:	492c      	ldr	r1, [pc, #176]	; (2cf0 <_timer_init+0x1d0>)
    2c40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2c44:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2c48:	00aa      	lsls	r2, r5, #2
    2c4a:	4b27      	ldr	r3, [pc, #156]	; (2ce8 <_timer_init+0x1c8>)
    2c4c:	4413      	add	r3, r2
    2c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2c52:	2b00      	cmp	r3, #0
    2c54:	db08      	blt.n	2c68 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c56:	0959      	lsrs	r1, r3, #5
    2c58:	f003 031f 	and.w	r3, r3, #31
    2c5c:	2201      	movs	r2, #1
    2c5e:	fa02 f303 	lsl.w	r3, r2, r3
    2c62:	4a23      	ldr	r2, [pc, #140]	; (2cf0 <_timer_init+0x1d0>)
    2c64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2c68:	2000      	movs	r0, #0
    2c6a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2c6c:	4b1e      	ldr	r3, [pc, #120]	; (2ce8 <_timer_init+0x1c8>)
    2c6e:	440b      	add	r3, r1
    2c70:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2c72:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c74:	6923      	ldr	r3, [r4, #16]
    2c76:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c7a:	d1fb      	bne.n	2c74 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2c7c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c80:	009a      	lsls	r2, r3, #2
    2c82:	4b19      	ldr	r3, [pc, #100]	; (2ce8 <_timer_init+0x1c8>)
    2c84:	4413      	add	r3, r2
    2c86:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2c88:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c8a:	6923      	ldr	r3, [r4, #16]
    2c8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c90:	d1fb      	bne.n	2c8a <_timer_init+0x16a>
    2c92:	e7a7      	b.n	2be4 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2c94:	2b04      	cmp	r3, #4
    2c96:	d1a5      	bne.n	2be4 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2c98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c9c:	009a      	lsls	r2, r3, #2
    2c9e:	4b12      	ldr	r3, [pc, #72]	; (2ce8 <_timer_init+0x1c8>)
    2ca0:	4413      	add	r3, r2
    2ca2:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2ca4:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ca6:	6923      	ldr	r3, [r4, #16]
    2ca8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cac:	d1fb      	bne.n	2ca6 <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2cae:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cb2:	009a      	lsls	r2, r3, #2
    2cb4:	4b0c      	ldr	r3, [pc, #48]	; (2ce8 <_timer_init+0x1c8>)
    2cb6:	4413      	add	r3, r2
    2cb8:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2cba:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2cbc:	6923      	ldr	r3, [r4, #16]
    2cbe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cc2:	d1fb      	bne.n	2cbc <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2cc4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cc8:	009a      	lsls	r2, r3, #2
    2cca:	4b07      	ldr	r3, [pc, #28]	; (2ce8 <_timer_init+0x1c8>)
    2ccc:	4413      	add	r3, r2
    2cce:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2cd0:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2cd2:	6923      	ldr	r3, [r4, #16]
    2cd4:	f013 0f20 	tst.w	r3, #32
    2cd8:	d1fb      	bne.n	2cd2 <_timer_init+0x1b2>
    2cda:	e783      	b.n	2be4 <_timer_init+0xc4>
    2cdc:	00002aa9 	.word	0x00002aa9
    2ce0:	000044e0 	.word	0x000044e0
    2ce4:	00001585 	.word	0x00001585
    2ce8:	20000000 	.word	0x20000000
    2cec:	00002a81 	.word	0x00002a81
    2cf0:	e000e100 	.word	0xe000e100

00002cf4 <_pwm_init>:
{
    2cf4:	b570      	push	{r4, r5, r6, lr}
    2cf6:	4606      	mov	r6, r0
    2cf8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2cfa:	4608      	mov	r0, r1
    2cfc:	4b59      	ldr	r3, [pc, #356]	; (2e64 <_pwm_init+0x170>)
    2cfe:	4798      	blx	r3
    2d00:	4605      	mov	r5, r0
	device->hw = hw;
    2d02:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2d04:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2d06:	f013 0f01 	tst.w	r3, #1
    2d0a:	d119      	bne.n	2d40 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d0c:	6923      	ldr	r3, [r4, #16]
    2d0e:	f013 0f03 	tst.w	r3, #3
    2d12:	d1fb      	bne.n	2d0c <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2d14:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2d16:	f013 0f02 	tst.w	r3, #2
    2d1a:	d00b      	beq.n	2d34 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2d1c:	6823      	ldr	r3, [r4, #0]
    2d1e:	f023 0302 	bic.w	r3, r3, #2
    2d22:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d24:	6923      	ldr	r3, [r4, #16]
    2d26:	f013 0f03 	tst.w	r3, #3
    2d2a:	d1fb      	bne.n	2d24 <_pwm_init+0x30>
    2d2c:	6923      	ldr	r3, [r4, #16]
    2d2e:	f013 0f02 	tst.w	r3, #2
    2d32:	d1fb      	bne.n	2d2c <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2d34:	2301      	movs	r3, #1
    2d36:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d38:	6923      	ldr	r3, [r4, #16]
    2d3a:	f013 0f03 	tst.w	r3, #3
    2d3e:	d1fb      	bne.n	2d38 <_pwm_init+0x44>
    2d40:	6923      	ldr	r3, [r4, #16]
    2d42:	f013 0f01 	tst.w	r3, #1
    2d46:	d1fb      	bne.n	2d40 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2d48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d4c:	009a      	lsls	r2, r3, #2
    2d4e:	4b46      	ldr	r3, [pc, #280]	; (2e68 <_pwm_init+0x174>)
    2d50:	4413      	add	r3, r2
    2d52:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2d54:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d56:	6923      	ldr	r3, [r4, #16]
    2d58:	f013 0f03 	tst.w	r3, #3
    2d5c:	d1fb      	bne.n	2d56 <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2d5e:	00aa      	lsls	r2, r5, #2
    2d60:	442a      	add	r2, r5
    2d62:	0091      	lsls	r1, r2, #2
    2d64:	4b40      	ldr	r3, [pc, #256]	; (2e68 <_pwm_init+0x174>)
    2d66:	440b      	add	r3, r1
    2d68:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2d6a:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2d6c:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2d6e:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2d70:	2203      	movs	r2, #3
    2d72:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2d74:	685b      	ldr	r3, [r3, #4]
    2d76:	f003 030c 	and.w	r3, r3, #12
    2d7a:	2b08      	cmp	r3, #8
    2d7c:	d059      	beq.n	2e32 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d16b      	bne.n	2e5a <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2d82:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d86:	009a      	lsls	r2, r3, #2
    2d88:	4b37      	ldr	r3, [pc, #220]	; (2e68 <_pwm_init+0x174>)
    2d8a:	4413      	add	r3, r2
    2d8c:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2d8e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d90:	6923      	ldr	r3, [r4, #16]
    2d92:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d96:	d1fb      	bne.n	2d90 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2d98:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d9c:	009a      	lsls	r2, r3, #2
    2d9e:	4b32      	ldr	r3, [pc, #200]	; (2e68 <_pwm_init+0x174>)
    2da0:	4413      	add	r3, r2
    2da2:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2da4:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2da6:	6923      	ldr	r3, [r4, #16]
    2da8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2dac:	d1fb      	bne.n	2da6 <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2dae:	4631      	mov	r1, r6
    2db0:	4620      	mov	r0, r4
    2db2:	4b2e      	ldr	r3, [pc, #184]	; (2e6c <_pwm_init+0x178>)
    2db4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2db6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2dba:	009a      	lsls	r2, r3, #2
    2dbc:	4b2a      	ldr	r3, [pc, #168]	; (2e68 <_pwm_init+0x174>)
    2dbe:	4413      	add	r3, r2
    2dc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	db0d      	blt.n	2de4 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dc8:	095a      	lsrs	r2, r3, #5
    2dca:	f003 031f 	and.w	r3, r3, #31
    2dce:	2101      	movs	r1, #1
    2dd0:	fa01 f303 	lsl.w	r3, r1, r3
    2dd4:	3220      	adds	r2, #32
    2dd6:	4926      	ldr	r1, [pc, #152]	; (2e70 <_pwm_init+0x17c>)
    2dd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ddc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2de0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2de4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2de8:	009a      	lsls	r2, r3, #2
    2dea:	4b1f      	ldr	r3, [pc, #124]	; (2e68 <_pwm_init+0x174>)
    2dec:	4413      	add	r3, r2
    2dee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2df2:	2b00      	cmp	r3, #0
    2df4:	db09      	blt.n	2e0a <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2df6:	095a      	lsrs	r2, r3, #5
    2df8:	f003 031f 	and.w	r3, r3, #31
    2dfc:	2101      	movs	r1, #1
    2dfe:	fa01 f303 	lsl.w	r3, r1, r3
    2e02:	3260      	adds	r2, #96	; 0x60
    2e04:	491a      	ldr	r1, [pc, #104]	; (2e70 <_pwm_init+0x17c>)
    2e06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2e0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2e0e:	00aa      	lsls	r2, r5, #2
    2e10:	4b15      	ldr	r3, [pc, #84]	; (2e68 <_pwm_init+0x174>)
    2e12:	4413      	add	r3, r2
    2e14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2e18:	2b00      	cmp	r3, #0
    2e1a:	db21      	blt.n	2e60 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e1c:	0959      	lsrs	r1, r3, #5
    2e1e:	f003 031f 	and.w	r3, r3, #31
    2e22:	2201      	movs	r2, #1
    2e24:	fa02 f303 	lsl.w	r3, r2, r3
    2e28:	4a11      	ldr	r2, [pc, #68]	; (2e70 <_pwm_init+0x17c>)
    2e2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2e2e:	2000      	movs	r0, #0
    2e30:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2e32:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <_pwm_init+0x174>)
    2e34:	440b      	add	r3, r1
    2e36:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2e38:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e3a:	6923      	ldr	r3, [r4, #16]
    2e3c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e40:	d1fb      	bne.n	2e3a <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2e42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e46:	009a      	lsls	r2, r3, #2
    2e48:	4b07      	ldr	r3, [pc, #28]	; (2e68 <_pwm_init+0x174>)
    2e4a:	4413      	add	r3, r2
    2e4c:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2e4e:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e50:	6923      	ldr	r3, [r4, #16]
    2e52:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e56:	d1fb      	bne.n	2e50 <_pwm_init+0x15c>
    2e58:	e7a9      	b.n	2dae <_pwm_init+0xba>
		return -1;
    2e5a:	f04f 30ff 	mov.w	r0, #4294967295
    2e5e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2e60:	2000      	movs	r0, #0
}
    2e62:	bd70      	pop	{r4, r5, r6, pc}
    2e64:	00002aa9 	.word	0x00002aa9
    2e68:	20000000 	.word	0x20000000
    2e6c:	00002a81 	.word	0x00002a81
    2e70:	e000e100 	.word	0xe000e100

00002e74 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2e74:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2e76:	6813      	ldr	r3, [r2, #0]
    2e78:	f043 0302 	orr.w	r3, r3, #2
    2e7c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e7e:	6913      	ldr	r3, [r2, #16]
    2e80:	f013 0f03 	tst.w	r3, #3
    2e84:	d1fb      	bne.n	2e7e <_timer_start+0xa>
}
    2e86:	4770      	bx	lr

00002e88 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2e88:	68c2      	ldr	r2, [r0, #12]
    2e8a:	6913      	ldr	r3, [r2, #16]
    2e8c:	f013 0f03 	tst.w	r3, #3
    2e90:	d1fb      	bne.n	2e8a <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2e92:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2e94:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    2e98:	4770      	bx	lr

00002e9a <_tc_get_timer>:
}
    2e9a:	2000      	movs	r0, #0
    2e9c:	4770      	bx	lr

00002e9e <_tc_get_pwm>:
}
    2e9e:	2000      	movs	r0, #0
    2ea0:	4770      	bx	lr
	...

00002ea4 <_timer_set_irq>:
{
    2ea4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2ea6:	68c0      	ldr	r0, [r0, #12]
    2ea8:	4b08      	ldr	r3, [pc, #32]	; (2ecc <_timer_set_irq+0x28>)
    2eaa:	4798      	blx	r3
    2eac:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2eae:	f240 129d 	movw	r2, #413	; 0x19d
    2eb2:	4907      	ldr	r1, [pc, #28]	; (2ed0 <_timer_set_irq+0x2c>)
    2eb4:	2001      	movs	r0, #1
    2eb6:	4b07      	ldr	r3, [pc, #28]	; (2ed4 <_timer_set_irq+0x30>)
    2eb8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2eba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ebe:	00a2      	lsls	r2, r4, #2
    2ec0:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <_timer_set_irq+0x34>)
    2ec2:	4413      	add	r3, r2
    2ec4:	7898      	ldrb	r0, [r3, #2]
    2ec6:	4b05      	ldr	r3, [pc, #20]	; (2edc <_timer_set_irq+0x38>)
    2ec8:	4798      	blx	r3
    2eca:	bd10      	pop	{r4, pc}
    2ecc:	00002aa9 	.word	0x00002aa9
    2ed0:	000044e0 	.word	0x000044e0
    2ed4:	00001585 	.word	0x00001585
    2ed8:	20000000 	.word	0x20000000
    2edc:	00001945 	.word	0x00001945

00002ee0 <TC0_Handler>:
{
    2ee0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2ee2:	4b02      	ldr	r3, [pc, #8]	; (2eec <TC0_Handler+0xc>)
    2ee4:	6818      	ldr	r0, [r3, #0]
    2ee6:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <TC0_Handler+0x10>)
    2ee8:	4798      	blx	r3
    2eea:	bd08      	pop	{r3, pc}
    2eec:	2000021c 	.word	0x2000021c
    2ef0:	00002a51 	.word	0x00002a51

00002ef4 <TC1_Handler>:
{
    2ef4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    2ef6:	4b02      	ldr	r3, [pc, #8]	; (2f00 <TC1_Handler+0xc>)
    2ef8:	6858      	ldr	r0, [r3, #4]
    2efa:	4b02      	ldr	r3, [pc, #8]	; (2f04 <TC1_Handler+0x10>)
    2efc:	4798      	blx	r3
    2efe:	bd08      	pop	{r3, pc}
    2f00:	2000021c 	.word	0x2000021c
    2f04:	00002a39 	.word	0x00002a39

00002f08 <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f08:	4b14      	ldr	r3, [pc, #80]	; (2f5c <I2C_BB_init+0x54>)
    2f0a:	2201      	movs	r2, #1
    2f0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f18:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f20:	490f      	ldr	r1, [pc, #60]	; (2f60 <I2C_BB_init+0x58>)
    2f22:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f26:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f2e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f32:	2204      	movs	r2, #4
    2f34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f3c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f40:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f48:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f4c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f54:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop
    2f5c:	41008000 	.word	0x41008000
    2f60:	c0020000 	.word	0xc0020000

00002f64 <millisecondTimer_cb>:
	configBlock32bit[position] = value;
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    2f64:	4a02      	ldr	r2, [pc, #8]	; (2f70 <millisecondTimer_cb+0xc>)
    2f66:	6813      	ldr	r3, [r2, #0]
    2f68:	3301      	adds	r3, #1
    2f6a:	6013      	str	r3, [r2, #0]
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	20000224 	.word	0x20000224

00002f74 <battCharging_cb>:
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
	}
}

static void battCharging_cb(void)
{
    2f74:	b510      	push	{r4, lr}
    2f76:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2f78:	a801      	add	r0, sp, #4
    2f7a:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <battCharging_cb+0x44>)
    2f7c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2f7e:	4b0f      	ldr	r3, [pc, #60]	; (2fbc <battCharging_cb+0x48>)
    2f80:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2f84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2f88:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2f8c:	4054      	eors	r4, r2
    2f8e:	400c      	ands	r4, r1
    2f90:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2f92:	a801      	add	r0, sp, #4
    2f94:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <battCharging_cb+0x4c>)
    2f96:	4798      	blx	r3
	bool pinState = gpio_get_pin_level(nCHRG);
	if (pinState == true) {
    2f98:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    2f9c:	d106      	bne.n	2fac <battCharging_cb+0x38>
		// Not charging
		deviceState &= !(DEVICE_STATE_CHARGING);
	}
	else {
		// charging
		deviceState |= DEVICE_STATE_CHARGING;
    2f9e:	4a09      	ldr	r2, [pc, #36]	; (2fc4 <battCharging_cb+0x50>)
    2fa0:	6813      	ldr	r3, [r2, #0]
    2fa2:	f043 0320 	orr.w	r3, r3, #32
    2fa6:	6013      	str	r3, [r2, #0]
	}
}
    2fa8:	b002      	add	sp, #8
    2faa:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    2fac:	4b05      	ldr	r3, [pc, #20]	; (2fc4 <battCharging_cb+0x50>)
    2fae:	681a      	ldr	r2, [r3, #0]
    2fb0:	2200      	movs	r2, #0
    2fb2:	601a      	str	r2, [r3, #0]
    2fb4:	e7f8      	b.n	2fa8 <battCharging_cb+0x34>
    2fb6:	bf00      	nop
    2fb8:	00000d41 	.word	0x00000d41
    2fbc:	41008000 	.word	0x41008000
    2fc0:	00000d4f 	.word	0x00000d4f
    2fc4:	20000028 	.word	0x20000028

00002fc8 <checkBattVoltage_cb>:
{
    2fc8:	b510      	push	{r4, lr}
    2fca:	b082      	sub	sp, #8
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    2fcc:	2301      	movs	r3, #1
    2fce:	f10d 0207 	add.w	r2, sp, #7
    2fd2:	2100      	movs	r1, #0
    2fd4:	4806      	ldr	r0, [pc, #24]	; (2ff0 <checkBattVoltage_cb+0x28>)
    2fd6:	4c07      	ldr	r4, [pc, #28]	; (2ff4 <checkBattVoltage_cb+0x2c>)
    2fd8:	47a0      	blx	r4
	if (adcValue < 158) {
    2fda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2fde:	2b9d      	cmp	r3, #157	; 0x9d
    2fe0:	d804      	bhi.n	2fec <checkBattVoltage_cb+0x24>
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    2fe2:	4a05      	ldr	r2, [pc, #20]	; (2ff8 <checkBattVoltage_cb+0x30>)
    2fe4:	6813      	ldr	r3, [r2, #0]
    2fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2fea:	6013      	str	r3, [r2, #0]
}
    2fec:	b002      	add	sp, #8
    2fee:	bd10      	pop	{r4, pc}
    2ff0:	200006c8 	.word	0x200006c8
    2ff4:	00000ca1 	.word	0x00000ca1
    2ff8:	20000028 	.word	0x20000028

00002ffc <frameValid_cb>:
		
	}
}

static void frameValid_cb(void)
{
    2ffc:	b500      	push	{lr}
    2ffe:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3000:	a801      	add	r0, sp, #4
    3002:	4b07      	ldr	r3, [pc, #28]	; (3020 <frameValid_cb+0x24>)
    3004:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3006:	4b07      	ldr	r3, [pc, #28]	; (3024 <frameValid_cb+0x28>)
    3008:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    300c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3014:	a801      	add	r0, sp, #4
    3016:	4b04      	ldr	r3, [pc, #16]	; (3028 <frameValid_cb+0x2c>)
    3018:	4798      	blx	r3
		
	}
	else {
		
	}
}
    301a:	b003      	add	sp, #12
    301c:	f85d fb04 	ldr.w	pc, [sp], #4
    3020:	00000d41 	.word	0x00000d41
    3024:	41008000 	.word	0x41008000
    3028:	00000d4f 	.word	0x00000d4f

0000302c <irReceive_cb>:
{
    302c:	b500      	push	{lr}
    302e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3030:	a801      	add	r0, sp, #4
    3032:	4b07      	ldr	r3, [pc, #28]	; (3050 <irReceive_cb+0x24>)
    3034:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3036:	4b07      	ldr	r3, [pc, #28]	; (3054 <irReceive_cb+0x28>)
    3038:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    303c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3044:	a801      	add	r0, sp, #4
    3046:	4b04      	ldr	r3, [pc, #16]	; (3058 <irReceive_cb+0x2c>)
    3048:	4798      	blx	r3
}
    304a:	b003      	add	sp, #12
    304c:	f85d fb04 	ldr.w	pc, [sp], #4
    3050:	00000d41 	.word	0x00000d41
    3054:	41008000 	.word	0x41008000
    3058:	00000d4f 	.word	0x00000d4f

0000305c <pushButton_cb>:
{
    305c:	b500      	push	{lr}
    305e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3060:	a801      	add	r0, sp, #4
    3062:	4b06      	ldr	r3, [pc, #24]	; (307c <pushButton_cb+0x20>)
    3064:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3066:	4b06      	ldr	r3, [pc, #24]	; (3080 <pushButton_cb+0x24>)
    3068:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    306a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    306c:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    306e:	a801      	add	r0, sp, #4
    3070:	4b04      	ldr	r3, [pc, #16]	; (3084 <pushButton_cb+0x28>)
    3072:	4798      	blx	r3
}
    3074:	b003      	add	sp, #12
    3076:	f85d fb04 	ldr.w	pc, [sp], #4
    307a:	bf00      	nop
    307c:	00000d41 	.word	0x00000d41
    3080:	41008000 	.word	0x41008000
    3084:	00000d4f 	.word	0x00000d4f

00003088 <spi_BB_Write>:
{
	
}

void spi_BB_Write(uint8_t address, uint16_t value) 
{
    3088:	b570      	push	{r4, r5, r6, lr}
    308a:	4606      	mov	r6, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    308c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3090:	4b10      	ldr	r3, [pc, #64]	; (30d4 <spi_BB_Write+0x4c>)
    3092:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	uint8_t i = 0;
	//Bitbang SPI Master.
	//Assuming SS starts high and clock starts low
	
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3096:	200a      	movs	r0, #10
    3098:	4b0f      	ldr	r3, [pc, #60]	; (30d8 <spi_BB_Write+0x50>)
    309a:	4798      	blx	r3
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    309c:	2408      	movs	r4, #8
    309e:	e00c      	b.n	30ba <spi_BB_Write+0x32>
    30a0:	2210      	movs	r2, #16
    30a2:	4b0c      	ldr	r3, [pc, #48]	; (30d4 <spi_BB_Write+0x4c>)
    30a4:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    30a6:	200a      	movs	r0, #10
    30a8:	4d0b      	ldr	r5, [pc, #44]	; (30d8 <spi_BB_Write+0x50>)
    30aa:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30ac:	2220      	movs	r2, #32
    30ae:	4b09      	ldr	r3, [pc, #36]	; (30d4 <spi_BB_Write+0x4c>)
    30b0:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    30b2:	200a      	movs	r0, #10
    30b4:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    30b6:	3c01      	subs	r4, #1
    30b8:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30ba:	2220      	movs	r2, #32
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <spi_BB_Write+0x4c>)
    30be:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    30c0:	fa46 f304 	asr.w	r3, r6, r4
    30c4:	f013 0f01 	tst.w	r3, #1
    30c8:	d0ea      	beq.n	30a0 <spi_BB_Write+0x18>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30ca:	2210      	movs	r2, #16
    30cc:	4b01      	ldr	r3, [pc, #4]	; (30d4 <spi_BB_Write+0x4c>)
    30ce:	619a      	str	r2, [r3, #24]
    30d0:	e7e9      	b.n	30a6 <spi_BB_Write+0x1e>
    30d2:	bf00      	nop
    30d4:	41008000 	.word	0x41008000
    30d8:	00000db5 	.word	0x00000db5

000030dc <EnableClockMngmnt1>:
	delay_us(10);
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

void EnableClockMngmnt1() {
    30dc:	b508      	push	{r3, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    30de:	2100      	movs	r1, #0
    30e0:	2002      	movs	r0, #2
    30e2:	4b01      	ldr	r3, [pc, #4]	; (30e8 <EnableClockMngmnt1+0xc>)
    30e4:	4798      	blx	r3
    30e6:	bf00      	nop
    30e8:	00003089 	.word	0x00003089

000030ec <python480Init>:
{
    30ec:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    30ee:	4b01      	ldr	r3, [pc, #4]	; (30f4 <python480Init+0x8>)
    30f0:	4798      	blx	r3
    30f2:	bf00      	nop
    30f4:	000030dd 	.word	0x000030dd

000030f8 <loadSDCardHeader>:
uint8_t loadSDCardHeader(void){
    30f8:	b508      	push	{r3, lr}
	sd_mmc_init_read_blocks(0,HEADER_BLOCK,1);
    30fa:	2201      	movs	r2, #1
    30fc:	f240 31fe 	movw	r1, #1022	; 0x3fe
    3100:	2000      	movs	r0, #0
    3102:	4b07      	ldr	r3, [pc, #28]	; (3120 <loadSDCardHeader+0x28>)
    3104:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerBlock,1);
    3106:	2101      	movs	r1, #1
    3108:	4806      	ldr	r0, [pc, #24]	; (3124 <loadSDCardHeader+0x2c>)
    310a:	4b07      	ldr	r3, [pc, #28]	; (3128 <loadSDCardHeader+0x30>)
    310c:	4798      	blx	r3
	if (sd_mmc_wait_end_of_read_blocks(false) == SD_MMC_OK)
    310e:	2000      	movs	r0, #0
    3110:	4b06      	ldr	r3, [pc, #24]	; (312c <loadSDCardHeader+0x34>)
    3112:	4798      	blx	r3
    3114:	b108      	cbz	r0, 311a <loadSDCardHeader+0x22>
		return MS_ERROR;
    3116:	2000      	movs	r0, #0
}
    3118:	bd08      	pop	{r3, pc}
		return MS_SUCCESS;
    311a:	2001      	movs	r0, #1
    311c:	bd08      	pop	{r3, pc}
    311e:	bf00      	nop
    3120:	00003cf9 	.word	0x00003cf9
    3124:	20000228 	.word	0x20000228
    3128:	00003d95 	.word	0x00003d95
    312c:	00003de1 	.word	0x00003de1

00003130 <linkedListInit>:
{
	gpio_set_pin_level(LED_STATUS, value);
}

void linkedListInit(void)
{
    3130:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3132:	2300      	movs	r3, #0
    3134:	e019      	b.n	316a <linkedListInit+0x3a>
		if (i == (NUM_BUFFERS - 1))
			// Last buffer in list. Need to loop back
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
    3136:	4a1e      	ldr	r2, [pc, #120]	; (31b0 <linkedListInit+0x80>)
    3138:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    313c:	60ca      	str	r2, [r1, #12]
		else
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
		linkedList[i].BTCNT.reg = (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS);
    313e:	481c      	ldr	r0, [pc, #112]	; (31b0 <linkedListInit+0x80>)
    3140:	011a      	lsls	r2, r3, #4
    3142:	1881      	adds	r1, r0, r2
    3144:	f44f 5420 	mov.w	r4, #10240	; 0x2800
    3148:	804c      	strh	r4, [r1, #2]
		// We aren't actually using the STEPSIZE part of incrementing the destination address. 
		linkedList[i].BTCTRL.reg = DMAC_BTCTRL_STEPSIZE(0) | (CONF_DMAC_STEPSEL_0 << DMAC_BTCTRL_STEPSEL_Pos)						\
    314a:	f44f 6420 	mov.w	r4, #2560	; 0xa00
    314e:	5284      	strh	r4, [r0, r2]
								| (CONF_DMAC_DSTINC_0 << DMAC_BTCTRL_DSTINC_Pos) | (CONF_DMAC_SRCINC_0 << DMAC_BTCTRL_SRCINC_Pos)	\
								| DMAC_BTCTRL_BEATSIZE(CONF_DMAC_BEATSIZE_0) | DMAC_BTCTRL_BLOCKACT(CONF_DMAC_BLOCKACT_0)            \
								| DMAC_BTCTRL_EVOSEL(CONF_DMAC_EVOSEL_0);
	
		linkedList[i].SRCADDR.reg = (uint32_t)(&PCC->RHR.reg);
    3150:	4a18      	ldr	r2, [pc, #96]	; (31b4 <linkedListInit+0x84>)
    3152:	604a      	str	r2, [r1, #4]
		// Destination address when incrementing address needs to be the end address and not the start address.
		linkedList[i].DSTADDR.reg = (uint32_t)(&dataBuffer[i][BUFFER_HEADER_LENGTH]) + (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS) * 4;
    3154:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    3158:	0342      	lsls	r2, r0, #13
    315a:	3224      	adds	r2, #36	; 0x24
    315c:	4816      	ldr	r0, [pc, #88]	; (31b8 <linkedListInit+0x88>)
    315e:	4402      	add	r2, r0
    3160:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3164:	608a      	str	r2, [r1, #8]
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3166:	3301      	adds	r3, #1
    3168:	b2db      	uxtb	r3, r3
    316a:	2b03      	cmp	r3, #3
    316c:	d809      	bhi.n	3182 <linkedListInit+0x52>
		if (i == (NUM_BUFFERS - 1))
    316e:	2b03      	cmp	r3, #3
    3170:	d0e1      	beq.n	3136 <linkedListInit+0x6>
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
    3172:	1c5a      	adds	r2, r3, #1
    3174:	490e      	ldr	r1, [pc, #56]	; (31b0 <linkedListInit+0x80>)
    3176:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    317a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    317e:	60ca      	str	r2, [r1, #12]
    3180:	e7dd      	b.n	313e <linkedListInit+0xe>
	}
	// Set up initial DMA descriptor for DMA channel handling PCC. BTCNT is already setup in DMA init step
	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, linkedList[0].SRCADDR.reg);
    3182:	4c0b      	ldr	r4, [pc, #44]	; (31b0 <linkedListInit+0x80>)
    3184:	6861      	ldr	r1, [r4, #4]
    3186:	2000      	movs	r0, #0
    3188:	4b0c      	ldr	r3, [pc, #48]	; (31bc <linkedListInit+0x8c>)
    318a:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, linkedList[0].DSTADDR.reg);
    318c:	68a1      	ldr	r1, [r4, #8]
    318e:	2000      	movs	r0, #0
    3190:	4d0b      	ldr	r5, [pc, #44]	; (31c0 <linkedListInit+0x90>)
    3192:	47a8      	blx	r5
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS));
    3194:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    3198:	2000      	movs	r0, #0
    319a:	4b0a      	ldr	r3, [pc, #40]	; (31c4 <linkedListInit+0x94>)
    319c:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, linkedList[0].DSTADDR.reg); // Overwrite destination address since set_data_amount function modifies this
    319e:	68a1      	ldr	r1, [r4, #8]
    31a0:	2000      	movs	r0, #0
    31a2:	47a8      	blx	r5
	_dma_set_next_descriptor(CONF_PCC_DMA_CHANNEL, linkedList[0].DESCADDR.reg);
    31a4:	68e1      	ldr	r1, [r4, #12]
    31a6:	2000      	movs	r0, #0
    31a8:	4b07      	ldr	r3, [pc, #28]	; (31c8 <linkedListInit+0x98>)
    31aa:	4798      	blx	r3
    31ac:	bd38      	pop	{r3, r4, r5, pc}
    31ae:	bf00      	nop
    31b0:	20000b80 	.word	0x20000b80
    31b4:	43002c14 	.word	0x43002c14
    31b8:	20000bd4 	.word	0x20000bd4
    31bc:	00001b51 	.word	0x00001b51
    31c0:	00001b41 	.word	0x00001b41
    31c4:	00001b75 	.word	0x00001b75
    31c8:	00001b61 	.word	0x00001b61

000031cc <main>:
		
	}
	
}
int main(void)
{
    31cc:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    31ce:	4b28      	ldr	r3, [pc, #160]	; (3270 <main+0xa4>)
    31d0:	4798      	blx	r3
    31d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    31d6:	4b27      	ldr	r3, [pc, #156]	; (3274 <main+0xa8>)
    31d8:	619a      	str	r2, [r3, #24]
	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	I2C_BB_init();
    31da:	4b27      	ldr	r3, [pc, #156]	; (3278 <main+0xac>)
    31dc:	4798      	blx	r3
	
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    31de:	2100      	movs	r1, #0
    31e0:	4826      	ldr	r0, [pc, #152]	; (327c <main+0xb0>)
    31e2:	4b27      	ldr	r3, [pc, #156]	; (3280 <main+0xb4>)
    31e4:	4798      	blx	r3
	
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
    31e6:	4b27      	ldr	r3, [pc, #156]	; (3284 <main+0xb8>)
    31e8:	4798      	blx	r3
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 100; // Need to check this value
    31ea:	4c27      	ldr	r4, [pc, #156]	; (3288 <main+0xbc>)
    31ec:	2364      	movs	r3, #100	; 0x64
    31ee:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
	TIMER_0_task1.cb       = millisecondTimer_cb;
    31f2:	4b26      	ldr	r3, [pc, #152]	; (328c <main+0xc0>)
    31f4:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    31f8:	2301      	movs	r3, #1
    31fa:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
	
	TIMER_0_task2.interval = 100000; // Need to check this value
    31fe:	4a24      	ldr	r2, [pc, #144]	; (3290 <main+0xc4>)
    3200:	f8c4 2424 	str.w	r2, [r4, #1060]	; 0x424
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3204:	4a23      	ldr	r2, [pc, #140]	; (3294 <main+0xc8>)
    3206:	f8c4 2428 	str.w	r2, [r4, #1064]	; 0x428
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    320a:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    320e:	4d22      	ldr	r5, [pc, #136]	; (3298 <main+0xcc>)
    3210:	f504 6181 	add.w	r1, r4, #1032	; 0x408
    3214:	4628      	mov	r0, r5
    3216:	4e21      	ldr	r6, [pc, #132]	; (329c <main+0xd0>)
    3218:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    321a:	f204 411c 	addw	r1, r4, #1052	; 0x41c
    321e:	4628      	mov	r0, r5
    3220:	47b0      	blx	r6
	timer_start(&TIMER_0);
    3222:	4628      	mov	r0, r5
    3224:	4b1e      	ldr	r3, [pc, #120]	; (32a0 <main+0xd4>)
    3226:	4798      	blx	r3
		
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    3228:	491e      	ldr	r1, [pc, #120]	; (32a4 <main+0xd8>)
    322a:	2036      	movs	r0, #54	; 0x36
    322c:	4c1e      	ldr	r4, [pc, #120]	; (32a8 <main+0xdc>)
    322e:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    3230:	491e      	ldr	r1, [pc, #120]	; (32ac <main+0xe0>)
    3232:	2037      	movs	r0, #55	; 0x37
    3234:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    3236:	491e      	ldr	r1, [pc, #120]	; (32b0 <main+0xe4>)
    3238:	202e      	movs	r0, #46	; 0x2e
    323a:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    323c:	491d      	ldr	r1, [pc, #116]	; (32b4 <main+0xe8>)
    323e:	2019      	movs	r0, #25
    3240:	47a0      	blx	r4
	
	// Wait for SD Card and then load config from it
	while (SD_MMC_OK != sd_mmc_check(0)) {}
    3242:	2000      	movs	r0, #0
    3244:	4b1c      	ldr	r3, [pc, #112]	; (32b8 <main+0xec>)
    3246:	4798      	blx	r3
    3248:	2800      	cmp	r0, #0
    324a:	d1fa      	bne.n	3242 <main+0x76>
	if (loadSDCardHeader() == MS_SUCCESS)
    324c:	4b1b      	ldr	r3, [pc, #108]	; (32bc <main+0xf0>)
    324e:	4798      	blx	r3
    3250:	2801      	cmp	r0, #1
    3252:	d006      	beq.n	3262 <main+0x96>
		deviceState |= DEVICE_STATE_CONFIG_LOADED;
	else 
		deviceState |= DEVICE_STATE_ERROR;
    3254:	4a1a      	ldr	r2, [pc, #104]	; (32c0 <main+0xf4>)
    3256:	6813      	ldr	r3, [r2, #0]
    3258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    325c:	6013      	str	r3, [r2, #0]
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	python480Init();
    325e:	4b19      	ldr	r3, [pc, #100]	; (32c4 <main+0xf8>)
    3260:	4798      	blx	r3
		deviceState |= DEVICE_STATE_CONFIG_LOADED;
    3262:	4a17      	ldr	r2, [pc, #92]	; (32c0 <main+0xf4>)
    3264:	6813      	ldr	r3, [r2, #0]
    3266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    326a:	6013      	str	r3, [r2, #0]
    326c:	e7f7      	b.n	325e <main+0x92>
    326e:	bf00      	nop
    3270:	000002d1 	.word	0x000002d1
    3274:	41008000 	.word	0x41008000
    3278:	00002f09 	.word	0x00002f09
    327c:	200006c8 	.word	0x200006c8
    3280:	00000c75 	.word	0x00000c75
    3284:	00003131 	.word	0x00003131
    3288:	20000224 	.word	0x20000224
    328c:	00002f65 	.word	0x00002f65
    3290:	000186a0 	.word	0x000186a0
    3294:	00002fc9 	.word	0x00002fc9
    3298:	20000738 	.word	0x20000738
    329c:	000012f1 	.word	0x000012f1
    32a0:	000012b5 	.word	0x000012b5
    32a4:	0000302d 	.word	0x0000302d
    32a8:	00000e4d 	.word	0x00000e4d
    32ac:	00002f75 	.word	0x00002f75
    32b0:	00002ffd 	.word	0x00002ffd
    32b4:	0000305d 	.word	0x0000305d
    32b8:	00003cb1 	.word	0x00003cb1
    32bc:	000030f9 	.word	0x000030f9
    32c0:	20000028 	.word	0x20000028
    32c4:	000030ed 	.word	0x000030ed

000032c8 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    32c8:	4b1f      	ldr	r3, [pc, #124]	; (3348 <sd_decode_csd+0x80>)
    32ca:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    32cc:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    32ce:	f001 0007 	and.w	r0, r1, #7
    32d2:	4b1e      	ldr	r3, [pc, #120]	; (334c <sd_decode_csd+0x84>)
    32d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    32d8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    32dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    32e0:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    32e2:	fb01 f100 	mul.w	r1, r1, r0
    32e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    32ea:	fb03 f301 	mul.w	r3, r3, r1
    32ee:	6013      	str	r3, [r2, #0]
    32f0:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    32f2:	099b      	lsrs	r3, r3, #6
    32f4:	d11a      	bne.n	332c <sd_decode_csd+0x64>
    32f6:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    32f8:	7d53      	ldrb	r3, [r2, #21]
    32fa:	009b      	lsls	r3, r3, #2
    32fc:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3300:	7d11      	ldrb	r1, [r2, #20]
    3302:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    3306:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    330a:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    330c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    330e:	7dd1      	ldrb	r1, [r2, #23]
    3310:	0049      	lsls	r1, r1, #1
    3312:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    3316:	f001 0107 	and.w	r1, r1, #7
    331a:	3102      	adds	r1, #2
		uint32_t blocknr
    331c:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    331e:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    3320:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    3324:	408b      	lsls	r3, r1
    3326:	0a9b      	lsrs	r3, r3, #10
    3328:	6053      	str	r3, [r2, #4]
    332a:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    332c:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    332e:	7d91      	ldrb	r1, [r2, #22]
    3330:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3334:	7d51      	ldrb	r1, [r2, #21]
    3336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    333a:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    333e:	3301      	adds	r3, #1
    3340:	025b      	lsls	r3, r3, #9
    3342:	6053      	str	r3, [r2, #4]
    3344:	4770      	bx	lr
    3346:	bf00      	nop
    3348:	2000065c 	.word	0x2000065c
    334c:	000044f4 	.word	0x000044f4

00003350 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3350:	b510      	push	{r4, lr}
    3352:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    3354:	4807      	ldr	r0, [pc, #28]	; (3374 <sd_mmc_configure_slot+0x24>)
    3356:	6802      	ldr	r2, [r0, #0]
    3358:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    335a:	7b53      	ldrb	r3, [r2, #13]
    335c:	6812      	ldr	r2, [r2, #0]
    335e:	7901      	ldrb	r1, [r0, #4]
    3360:	6880      	ldr	r0, [r0, #8]
    3362:	3400      	adds	r4, #0
    3364:	bf18      	it	ne
    3366:	2401      	movne	r4, #1
    3368:	9400      	str	r4, [sp, #0]
    336a:	4c03      	ldr	r4, [pc, #12]	; (3378 <sd_mmc_configure_slot+0x28>)
    336c:	47a0      	blx	r4
}
    336e:	b002      	add	sp, #8
    3370:	bd10      	pop	{r4, pc}
    3372:	bf00      	nop
    3374:	2000065c 	.word	0x2000065c
    3378:	00000f51 	.word	0x00000f51

0000337c <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    337c:	b108      	cbz	r0, 3382 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    337e:	2004      	movs	r0, #4
    3380:	4770      	bx	lr
{
    3382:	b5f0      	push	{r4, r5, r6, r7, lr}
    3384:	b083      	sub	sp, #12
    3386:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    3388:	4b45      	ldr	r3, [pc, #276]	; (34a0 <sd_mmc_select_slot+0x124>)
    338a:	68db      	ldr	r3, [r3, #12]
    338c:	2b00      	cmp	r3, #0
    338e:	d050      	beq.n	3432 <sd_mmc_select_slot+0xb6>
    3390:	0087      	lsls	r7, r0, #2
    3392:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3396:	f1b5 3fff 	cmp.w	r5, #4294967295
    339a:	d04a      	beq.n	3432 <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    339c:	b2ed      	uxtb	r5, r5
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    339e:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    33a0:	a801      	add	r0, sp, #4
    33a2:	4b40      	ldr	r3, [pc, #256]	; (34a4 <sd_mmc_select_slot+0x128>)
    33a4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    33a6:	4940      	ldr	r1, [pc, #256]	; (34a8 <sd_mmc_select_slot+0x12c>)
    33a8:	01f3      	lsls	r3, r6, #7
    33aa:	18ca      	adds	r2, r1, r3
    33ac:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    33ae:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    33b0:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    33b2:	405e      	eors	r6, r3
    33b4:	400e      	ands	r6, r1
    33b6:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    33b8:	a801      	add	r0, sp, #4
    33ba:	4b3c      	ldr	r3, [pc, #240]	; (34ac <sd_mmc_select_slot+0x130>)
    33bc:	4798      	blx	r3
    33be:	f005 051f 	and.w	r5, r5, #31
    33c2:	2301      	movs	r3, #1
    33c4:	fa03 f505 	lsl.w	r5, r3, r5
    33c8:	4235      	tst	r5, r6
    33ca:	bf14      	ite	ne
    33cc:	461a      	movne	r2, r3
    33ce:	2200      	moveq	r2, #0
    33d0:	4b33      	ldr	r3, [pc, #204]	; (34a0 <sd_mmc_select_slot+0x124>)
    33d2:	68db      	ldr	r3, [r3, #12]
    33d4:	441f      	add	r7, r3
    33d6:	887b      	ldrh	r3, [r7, #2]
    33d8:	429a      	cmp	r2, r3
    33da:	d006      	beq.n	33ea <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    33dc:	4b30      	ldr	r3, [pc, #192]	; (34a0 <sd_mmc_select_slot+0x124>)
    33de:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    33e2:	2304      	movs	r3, #4
    33e4:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    33e6:	2002      	movs	r0, #2
    33e8:	e047      	b.n	347a <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    33ea:	4b2d      	ldr	r3, [pc, #180]	; (34a0 <sd_mmc_select_slot+0x124>)
    33ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    33f0:	7e9b      	ldrb	r3, [r3, #26]
    33f2:	2b04      	cmp	r3, #4
    33f4:	d009      	beq.n	340a <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    33f6:	2b01      	cmp	r3, #1
    33f8:	d00e      	beq.n	3418 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    33fa:	4b29      	ldr	r3, [pc, #164]	; (34a0 <sd_mmc_select_slot+0x124>)
    33fc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3400:	7e9b      	ldrb	r3, [r3, #26]
    3402:	2b03      	cmp	r3, #3
    3404:	d11d      	bne.n	3442 <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3406:	2003      	movs	r0, #3
    3408:	e037      	b.n	347a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    340a:	4b25      	ldr	r3, [pc, #148]	; (34a0 <sd_mmc_select_slot+0x124>)
    340c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3410:	2301      	movs	r3, #1
    3412:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3414:	2002      	movs	r0, #2
    3416:	e030      	b.n	347a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3418:	4b21      	ldr	r3, [pc, #132]	; (34a0 <sd_mmc_select_slot+0x124>)
    341a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    341e:	2202      	movs	r2, #2
    3420:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3422:	4a23      	ldr	r2, [pc, #140]	; (34b0 <sd_mmc_select_slot+0x134>)
    3424:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3426:	2201      	movs	r2, #1
    3428:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    342a:	2200      	movs	r2, #0
    342c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3430:	e7e3      	b.n	33fa <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3432:	4b1b      	ldr	r3, [pc, #108]	; (34a0 <sd_mmc_select_slot+0x124>)
    3434:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3438:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    343a:	3b03      	subs	r3, #3
    343c:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    343e:	2b01      	cmp	r3, #1
    3440:	d91d      	bls.n	347e <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3442:	4b17      	ldr	r3, [pc, #92]	; (34a0 <sd_mmc_select_slot+0x124>)
    3444:	791b      	ldrb	r3, [r3, #4]
    3446:	429c      	cmp	r4, r3
    3448:	d026      	beq.n	3498 <sd_mmc_select_slot+0x11c>
    344a:	4b15      	ldr	r3, [pc, #84]	; (34a0 <sd_mmc_select_slot+0x124>)
    344c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    344e:	bb2b      	cbnz	r3, 349c <sd_mmc_select_slot+0x120>
    3450:	2001      	movs	r0, #1
    3452:	f240 422c 	movw	r2, #1068	; 0x42c
    3456:	4917      	ldr	r1, [pc, #92]	; (34b4 <sd_mmc_select_slot+0x138>)
    3458:	4b17      	ldr	r3, [pc, #92]	; (34b8 <sd_mmc_select_slot+0x13c>)
    345a:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    345c:	4d10      	ldr	r5, [pc, #64]	; (34a0 <sd_mmc_select_slot+0x124>)
    345e:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    3460:	f105 0310 	add.w	r3, r5, #16
    3464:	0164      	lsls	r4, r4, #5
    3466:	4423      	add	r3, r4
    3468:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    346a:	4b14      	ldr	r3, [pc, #80]	; (34bc <sd_mmc_select_slot+0x140>)
    346c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    346e:	442c      	add	r4, r5
    3470:	7ea0      	ldrb	r0, [r4, #26]
    3472:	2802      	cmp	r0, #2
    3474:	bf14      	ite	ne
    3476:	2000      	movne	r0, #0
    3478:	2001      	moveq	r0, #1
}
    347a:	b003      	add	sp, #12
    347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    347e:	4b08      	ldr	r3, [pc, #32]	; (34a0 <sd_mmc_select_slot+0x124>)
    3480:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3484:	2202      	movs	r2, #2
    3486:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    3488:	4a09      	ldr	r2, [pc, #36]	; (34b0 <sd_mmc_select_slot+0x134>)
    348a:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    348c:	2201      	movs	r2, #1
    348e:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3490:	2200      	movs	r2, #0
    3492:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3496:	e7d4      	b.n	3442 <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    3498:	2001      	movs	r0, #1
    349a:	e7da      	b.n	3452 <sd_mmc_select_slot+0xd6>
    349c:	2000      	movs	r0, #0
    349e:	e7d8      	b.n	3452 <sd_mmc_select_slot+0xd6>
    34a0:	2000065c 	.word	0x2000065c
    34a4:	00000d41 	.word	0x00000d41
    34a8:	41008000 	.word	0x41008000
    34ac:	00000d4f 	.word	0x00000d4f
    34b0:	00061a80 	.word	0x00061a80
    34b4:	00004590 	.word	0x00004590
    34b8:	00001585 	.word	0x00001585
    34bc:	00003351 	.word	0x00003351

000034c0 <sd_acmd6>:
{
    34c0:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    34c2:	4b0e      	ldr	r3, [pc, #56]	; (34fc <sd_acmd6+0x3c>)
    34c4:	681a      	ldr	r2, [r3, #0]
    34c6:	8912      	ldrh	r2, [r2, #8]
    34c8:	0412      	lsls	r2, r2, #16
    34ca:	f241 1137 	movw	r1, #4407	; 0x1137
    34ce:	6898      	ldr	r0, [r3, #8]
    34d0:	4b0b      	ldr	r3, [pc, #44]	; (3500 <sd_acmd6+0x40>)
    34d2:	4798      	blx	r3
    34d4:	4603      	mov	r3, r0
    34d6:	b908      	cbnz	r0, 34dc <sd_acmd6+0x1c>
}
    34d8:	4618      	mov	r0, r3
    34da:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    34dc:	2202      	movs	r2, #2
    34de:	f241 1106 	movw	r1, #4358	; 0x1106
    34e2:	4b06      	ldr	r3, [pc, #24]	; (34fc <sd_acmd6+0x3c>)
    34e4:	6898      	ldr	r0, [r3, #8]
    34e6:	4b06      	ldr	r3, [pc, #24]	; (3500 <sd_acmd6+0x40>)
    34e8:	4798      	blx	r3
    34ea:	4603      	mov	r3, r0
    34ec:	2800      	cmp	r0, #0
    34ee:	d0f3      	beq.n	34d8 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    34f0:	4a02      	ldr	r2, [pc, #8]	; (34fc <sd_acmd6+0x3c>)
    34f2:	6812      	ldr	r2, [r2, #0]
    34f4:	2104      	movs	r1, #4
    34f6:	7351      	strb	r1, [r2, #13]
	return true;
    34f8:	e7ee      	b.n	34d8 <sd_acmd6+0x18>
    34fa:	bf00      	nop
    34fc:	2000065c 	.word	0x2000065c
    3500:	00001035 	.word	0x00001035

00003504 <sdio_cmd52>:
{
    3504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3508:	4680      	mov	r8, r0
    350a:	460f      	mov	r7, r1
    350c:	4615      	mov	r5, r2
    350e:	461e      	mov	r6, r3
    3510:	9c06      	ldr	r4, [sp, #24]
	ASSERT(io_data != NULL);
    3512:	f240 3276 	movw	r2, #886	; 0x376
    3516:	4910      	ldr	r1, [pc, #64]	; (3558 <sdio_cmd52+0x54>)
    3518:	1c20      	adds	r0, r4, #0
    351a:	bf18      	it	ne
    351c:	2001      	movne	r0, #1
    351e:	4b0f      	ldr	r3, [pc, #60]	; (355c <sdio_cmd52+0x58>)
    3520:	4798      	blx	r3
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    3522:	7822      	ldrb	r2, [r4, #0]
    3524:	ea42 72c8 	orr.w	r2, r2, r8, lsl #31
	                         | ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
    3528:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
	                         | ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
    352c:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
	if (!driver_send_cmd(sd_mmc_hal,
    3530:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
    3534:	f241 3134 	movw	r1, #4916	; 0x1334
    3538:	4b09      	ldr	r3, [pc, #36]	; (3560 <sdio_cmd52+0x5c>)
    353a:	6898      	ldr	r0, [r3, #8]
    353c:	4b09      	ldr	r3, [pc, #36]	; (3564 <sdio_cmd52+0x60>)
    353e:	4798      	blx	r3
    3540:	4605      	mov	r5, r0
    3542:	b910      	cbnz	r0, 354a <sdio_cmd52+0x46>
}
    3544:	4628      	mov	r0, r5
    3546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    354a:	4b05      	ldr	r3, [pc, #20]	; (3560 <sdio_cmd52+0x5c>)
    354c:	6898      	ldr	r0, [r3, #8]
    354e:	4b06      	ldr	r3, [pc, #24]	; (3568 <sdio_cmd52+0x64>)
    3550:	4798      	blx	r3
    3552:	7020      	strb	r0, [r4, #0]
	return true;
    3554:	e7f6      	b.n	3544 <sdio_cmd52+0x40>
    3556:	bf00      	nop
    3558:	00004590 	.word	0x00004590
    355c:	00001585 	.word	0x00001585
    3560:	2000065c 	.word	0x2000065c
    3564:	00001035 	.word	0x00001035
    3568:	00001065 	.word	0x00001065

0000356c <sdio_get_max_speed>:
{
    356c:	b5f0      	push	{r4, r5, r6, r7, lr}
    356e:	b087      	sub	sp, #28
	for (i = 0; i < 4; i++) {
    3570:	2400      	movs	r4, #0
	addr_old = SDIO_CCCR_CIS_PTR;
    3572:	2509      	movs	r5, #9
	for (i = 0; i < 4; i++) {
    3574:	e00b      	b.n	358e <sdio_get_max_speed+0x22>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    3576:	ab03      	add	r3, sp, #12
    3578:	4423      	add	r3, r4
    357a:	9300      	str	r3, [sp, #0]
    357c:	2300      	movs	r3, #0
    357e:	462a      	mov	r2, r5
    3580:	4619      	mov	r1, r3
    3582:	4618      	mov	r0, r3
    3584:	4e35      	ldr	r6, [pc, #212]	; (365c <sdio_get_max_speed+0xf0>)
    3586:	47b0      	blx	r6
		addr_old++;
    3588:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    358a:	3401      	adds	r4, #1
    358c:	b2e4      	uxtb	r4, r4
    358e:	2c03      	cmp	r4, #3
    3590:	d9f1      	bls.n	3576 <sdio_get_max_speed+0xa>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    3592:	f89d 700c 	ldrb.w	r7, [sp, #12]
    3596:	f89d 300d 	ldrb.w	r3, [sp, #13]
    359a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    359e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    35a2:	eb07 4703 	add.w	r7, r7, r3, lsl #16
    35a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    35aa:	eb07 6703 	add.w	r7, r7, r3, lsl #24
	addr_new = addr_old;
    35ae:	463d      	mov	r5, r7
    35b0:	e01d      	b.n	35ee <sdio_get_max_speed+0x82>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    35b2:	ab04      	add	r3, sp, #16
    35b4:	4423      	add	r3, r4
    35b6:	9300      	str	r3, [sp, #0]
    35b8:	2300      	movs	r3, #0
    35ba:	462a      	mov	r2, r5
    35bc:	4619      	mov	r1, r3
    35be:	4618      	mov	r0, r3
    35c0:	4e26      	ldr	r6, [pc, #152]	; (365c <sdio_get_max_speed+0xf0>)
    35c2:	47b0      	blx	r6
			addr_new++;
    35c4:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    35c6:	3401      	adds	r4, #1
    35c8:	b2e4      	uxtb	r4, r4
    35ca:	2c02      	cmp	r4, #2
    35cc:	d9f1      	bls.n	35b2 <sdio_get_max_speed+0x46>
		if (buf[0] == SDIO_CISTPL_END) {
    35ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
    35d2:	2bff      	cmp	r3, #255	; 0xff
    35d4:	d03b      	beq.n	364e <sdio_get_max_speed+0xe2>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    35d6:	2b22      	cmp	r3, #34	; 0x22
    35d8:	d00b      	beq.n	35f2 <sdio_get_max_speed+0x86>
		if (buf[1] == 0) {
    35da:	f89d 3011 	ldrb.w	r3, [sp, #17]
    35de:	2b00      	cmp	r3, #0
    35e0:	d038      	beq.n	3654 <sdio_get_max_speed+0xe8>
		addr_new += buf[1] - 1;
    35e2:	441d      	add	r5, r3
    35e4:	3d01      	subs	r5, #1
		if (addr_new > (addr_old + 256)) {
    35e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
    35ea:	429d      	cmp	r5, r3
    35ec:	d834      	bhi.n	3658 <sdio_get_max_speed+0xec>
		for (i = 0; i < 3; i++) {
    35ee:	2400      	movs	r4, #0
    35f0:	e7eb      	b.n	35ca <sdio_get_max_speed+0x5e>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    35f2:	f89d 4012 	ldrb.w	r4, [sp, #18]
    35f6:	2c00      	cmp	r4, #0
    35f8:	d1ef      	bne.n	35da <sdio_get_max_speed+0x6e>
	addr_new -= 3;
    35fa:	3d03      	subs	r5, #3
	for (i = 0; i < 6; i++) {
    35fc:	2c05      	cmp	r4, #5
    35fe:	d80c      	bhi.n	361a <sdio_get_max_speed+0xae>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    3600:	ab04      	add	r3, sp, #16
    3602:	4423      	add	r3, r4
    3604:	9300      	str	r3, [sp, #0]
    3606:	2300      	movs	r3, #0
    3608:	462a      	mov	r2, r5
    360a:	4619      	mov	r1, r3
    360c:	4618      	mov	r0, r3
    360e:	4e13      	ldr	r6, [pc, #76]	; (365c <sdio_get_max_speed+0xf0>)
    3610:	47b0      	blx	r6
		addr_new++;
    3612:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    3614:	3401      	adds	r4, #1
    3616:	b2e4      	uxtb	r4, r4
    3618:	e7f0      	b.n	35fc <sdio_get_max_speed+0x90>
	tplfe_max_tran_speed = buf[5];
    361a:	f89d 3015 	ldrb.w	r3, [sp, #21]
	if (tplfe_max_tran_speed > 0x32) {
    361e:	2b32      	cmp	r3, #50	; 0x32
    3620:	d900      	bls.n	3624 <sdio_get_max_speed+0xb8>
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
    3622:	2332      	movs	r3, #50	; 0x32
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    3624:	f003 0107 	and.w	r1, r3, #7
    3628:	4a0d      	ldr	r2, [pc, #52]	; (3660 <sdio_get_max_speed+0xf4>)
    362a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    362e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3636:	69db      	ldr	r3, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    3638:	4a0a      	ldr	r2, [pc, #40]	; (3664 <sdio_get_max_speed+0xf8>)
    363a:	6811      	ldr	r1, [r2, #0]
    363c:	fb03 f200 	mul.w	r2, r3, r0
    3640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3644:	fb03 f302 	mul.w	r3, r3, r2
    3648:	600b      	str	r3, [r1, #0]
	return true;
    364a:	2001      	movs	r0, #1
    364c:	e000      	b.n	3650 <sdio_get_max_speed+0xe4>
			return false; /* Tuple error */
    364e:	2000      	movs	r0, #0
}
    3650:	b007      	add	sp, #28
    3652:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false; /* Tuple error */
    3654:	2000      	movs	r0, #0
    3656:	e7fb      	b.n	3650 <sdio_get_max_speed+0xe4>
			return false; /* Outoff CIS area */
    3658:	2000      	movs	r0, #0
    365a:	e7f9      	b.n	3650 <sdio_get_max_speed+0xe4>
    365c:	00003505 	.word	0x00003505
    3660:	000044f4 	.word	0x000044f4
    3664:	2000065c 	.word	0x2000065c

00003668 <sdio_cmd52_set_bus_width>:
{
    3668:	b510      	push	{r4, lr}
    366a:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    366c:	f10d 030f 	add.w	r3, sp, #15
    3670:	9300      	str	r3, [sp, #0]
    3672:	2300      	movs	r3, #0
    3674:	2208      	movs	r2, #8
    3676:	4619      	mov	r1, r3
    3678:	4618      	mov	r0, r3
    367a:	4c0e      	ldr	r4, [pc, #56]	; (36b4 <sdio_cmd52_set_bus_width+0x4c>)
    367c:	47a0      	blx	r4
    367e:	4603      	mov	r3, r0
    3680:	b118      	cbz	r0, 368a <sdio_cmd52_set_bus_width+0x22>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    3682:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    3686:	2a00      	cmp	r2, #0
    3688:	db02      	blt.n	3690 <sdio_cmd52_set_bus_width+0x28>
}
    368a:	4618      	mov	r0, r3
    368c:	b004      	add	sp, #16
    368e:	bd10      	pop	{r4, pc}
	u8_value = SDIO_BUSWIDTH_4B;
    3690:	ab04      	add	r3, sp, #16
    3692:	2202      	movs	r2, #2
    3694:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    3698:	9300      	str	r3, [sp, #0]
    369a:	2301      	movs	r3, #1
    369c:	2207      	movs	r2, #7
    369e:	2100      	movs	r1, #0
    36a0:	4618      	mov	r0, r3
    36a2:	47a0      	blx	r4
    36a4:	4603      	mov	r3, r0
    36a6:	2800      	cmp	r0, #0
    36a8:	d0ef      	beq.n	368a <sdio_cmd52_set_bus_width+0x22>
	sd_mmc_card->bus_width = 4;
    36aa:	4a03      	ldr	r2, [pc, #12]	; (36b8 <sdio_cmd52_set_bus_width+0x50>)
    36ac:	6812      	ldr	r2, [r2, #0]
    36ae:	2104      	movs	r1, #4
    36b0:	7351      	strb	r1, [r2, #13]
	return true;
    36b2:	e7ea      	b.n	368a <sdio_cmd52_set_bus_width+0x22>
    36b4:	00003505 	.word	0x00003505
    36b8:	2000065c 	.word	0x2000065c

000036bc <sdio_cmd52_set_high_speed>:
{
    36bc:	b510      	push	{r4, lr}
    36be:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    36c0:	f10d 030f 	add.w	r3, sp, #15
    36c4:	9300      	str	r3, [sp, #0]
    36c6:	2300      	movs	r3, #0
    36c8:	2213      	movs	r2, #19
    36ca:	4619      	mov	r1, r3
    36cc:	4618      	mov	r0, r3
    36ce:	4c0f      	ldr	r4, [pc, #60]	; (370c <sdio_cmd52_set_high_speed+0x50>)
    36d0:	47a0      	blx	r4
    36d2:	4601      	mov	r1, r0
    36d4:	b1b8      	cbz	r0, 3706 <sdio_cmd52_set_high_speed+0x4a>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    36d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    36da:	f013 0f01 	tst.w	r3, #1
    36de:	d012      	beq.n	3706 <sdio_cmd52_set_high_speed+0x4a>
	u8_value = SDIO_EHS;
    36e0:	ab04      	add	r3, sp, #16
    36e2:	2202      	movs	r2, #2
    36e4:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    36e8:	9300      	str	r3, [sp, #0]
    36ea:	2301      	movs	r3, #1
    36ec:	2213      	movs	r2, #19
    36ee:	2100      	movs	r1, #0
    36f0:	4618      	mov	r0, r3
    36f2:	47a0      	blx	r4
    36f4:	4601      	mov	r1, r0
    36f6:	b130      	cbz	r0, 3706 <sdio_cmd52_set_high_speed+0x4a>
	sd_mmc_card->high_speed = 1;
    36f8:	4b05      	ldr	r3, [pc, #20]	; (3710 <sdio_cmd52_set_high_speed+0x54>)
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	2201      	movs	r2, #1
    36fe:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    3700:	681a      	ldr	r2, [r3, #0]
    3702:	0052      	lsls	r2, r2, #1
    3704:	601a      	str	r2, [r3, #0]
}
    3706:	4608      	mov	r0, r1
    3708:	b004      	add	sp, #16
    370a:	bd10      	pop	{r4, pc}
    370c:	00003505 	.word	0x00003505
    3710:	2000065c 	.word	0x2000065c

00003714 <sd_cmd8>:
{
    3714:	b538      	push	{r3, r4, r5, lr}
    3716:	4605      	mov	r5, r0
	*v2 = 0;
    3718:	2300      	movs	r3, #0
    371a:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    371c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    3720:	f245 5108 	movw	r1, #21768	; 0x5508
    3724:	4b0c      	ldr	r3, [pc, #48]	; (3758 <sd_cmd8+0x44>)
    3726:	6898      	ldr	r0, [r3, #8]
    3728:	4b0c      	ldr	r3, [pc, #48]	; (375c <sd_cmd8+0x48>)
    372a:	4798      	blx	r3
    372c:	b910      	cbnz	r0, 3734 <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    372e:	2401      	movs	r4, #1
}
    3730:	4620      	mov	r0, r4
    3732:	bd38      	pop	{r3, r4, r5, pc}
    3734:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    3736:	4b08      	ldr	r3, [pc, #32]	; (3758 <sd_cmd8+0x44>)
    3738:	6898      	ldr	r0, [r3, #8]
    373a:	4b09      	ldr	r3, [pc, #36]	; (3760 <sd_cmd8+0x4c>)
    373c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    373e:	f1b0 3fff 	cmp.w	r0, #4294967295
    3742:	d0f5      	beq.n	3730 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    3744:	f3c0 000b 	ubfx	r0, r0, #0, #12
    3748:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    374c:	d001      	beq.n	3752 <sd_cmd8+0x3e>
		return false;
    374e:	2400      	movs	r4, #0
    3750:	e7ee      	b.n	3730 <sd_cmd8+0x1c>
	*v2 = 1;
    3752:	2301      	movs	r3, #1
    3754:	702b      	strb	r3, [r5, #0]
	return true;
    3756:	e7eb      	b.n	3730 <sd_cmd8+0x1c>
    3758:	2000065c 	.word	0x2000065c
    375c:	00001035 	.word	0x00001035
    3760:	00001065 	.word	0x00001065

00003764 <sdio_op_cond>:
{
    3764:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    3766:	2200      	movs	r2, #0
    3768:	f244 5105 	movw	r1, #17669	; 0x4505
    376c:	4b1a      	ldr	r3, [pc, #104]	; (37d8 <sdio_op_cond+0x74>)
    376e:	6898      	ldr	r0, [r3, #8]
    3770:	4b1a      	ldr	r3, [pc, #104]	; (37dc <sdio_op_cond+0x78>)
    3772:	4798      	blx	r3
    3774:	b910      	cbnz	r0, 377c <sdio_op_cond+0x18>
		return true; /* No error but card type not updated */
    3776:	2501      	movs	r5, #1
}
    3778:	4628      	mov	r0, r5
    377a:	bd38      	pop	{r3, r4, r5, pc}
    377c:	4605      	mov	r5, r0
	resp = driver_get_response(sd_mmc_hal);
    377e:	4b16      	ldr	r3, [pc, #88]	; (37d8 <sdio_op_cond+0x74>)
    3780:	6898      	ldr	r0, [r3, #8]
    3782:	4b17      	ldr	r3, [pc, #92]	; (37e0 <sdio_op_cond+0x7c>)
    3784:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    3786:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    378a:	d0f5      	beq.n	3778 <sdio_op_cond+0x14>
    378c:	f241 3488 	movw	r4, #5000	; 0x1388
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    3790:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    3794:	f244 5105 	movw	r1, #17669	; 0x4505
    3798:	4b0f      	ldr	r3, [pc, #60]	; (37d8 <sdio_op_cond+0x74>)
    379a:	6898      	ldr	r0, [r3, #8]
    379c:	4b0f      	ldr	r3, [pc, #60]	; (37dc <sdio_op_cond+0x78>)
    379e:	4798      	blx	r3
    37a0:	4605      	mov	r5, r0
    37a2:	2800      	cmp	r0, #0
    37a4:	d0e8      	beq.n	3778 <sdio_op_cond+0x14>
		resp = driver_get_response(sd_mmc_hal);
    37a6:	4b0c      	ldr	r3, [pc, #48]	; (37d8 <sdio_op_cond+0x74>)
    37a8:	6898      	ldr	r0, [r3, #8]
    37aa:	4b0d      	ldr	r3, [pc, #52]	; (37e0 <sdio_op_cond+0x7c>)
    37ac:	4798      	blx	r3
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    37ae:	2800      	cmp	r0, #0
    37b0:	db03      	blt.n	37ba <sdio_op_cond+0x56>
		if (cmd5_retry-- == 0) {
    37b2:	1e63      	subs	r3, r4, #1
    37b4:	b174      	cbz	r4, 37d4 <sdio_op_cond+0x70>
    37b6:	461c      	mov	r4, r3
    37b8:	e7ea      	b.n	3790 <sdio_op_cond+0x2c>
	if ((resp & OCR_SDIO_MP) > 0) {
    37ba:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    37be:	d104      	bne.n	37ca <sdio_op_cond+0x66>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    37c0:	4b05      	ldr	r3, [pc, #20]	; (37d8 <sdio_op_cond+0x74>)
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	2204      	movs	r2, #4
    37c6:	72da      	strb	r2, [r3, #11]
    37c8:	e7d6      	b.n	3778 <sdio_op_cond+0x14>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    37ca:	4b03      	ldr	r3, [pc, #12]	; (37d8 <sdio_op_cond+0x74>)
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	2205      	movs	r2, #5
    37d0:	72da      	strb	r2, [r3, #11]
    37d2:	e7d1      	b.n	3778 <sdio_op_cond+0x14>
			return false;
    37d4:	2500      	movs	r5, #0
    37d6:	e7cf      	b.n	3778 <sdio_op_cond+0x14>
    37d8:	2000065c 	.word	0x2000065c
    37dc:	00001035 	.word	0x00001035
    37e0:	00001065 	.word	0x00001065

000037e4 <sd_mci_op_cond>:
{
    37e4:	b570      	push	{r4, r5, r6, lr}
    37e6:	4606      	mov	r6, r0
	retry = 2100;
    37e8:	f640 0434 	movw	r4, #2100	; 0x834
    37ec:	e011      	b.n	3812 <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    37ee:	4a16      	ldr	r2, [pc, #88]	; (3848 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    37f0:	f244 5129 	movw	r1, #17705	; 0x4529
    37f4:	4b15      	ldr	r3, [pc, #84]	; (384c <sd_mci_op_cond+0x68>)
    37f6:	6898      	ldr	r0, [r3, #8]
    37f8:	4b15      	ldr	r3, [pc, #84]	; (3850 <sd_mci_op_cond+0x6c>)
    37fa:	4798      	blx	r3
    37fc:	4605      	mov	r5, r0
    37fe:	b1f8      	cbz	r0, 3840 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    3800:	4b12      	ldr	r3, [pc, #72]	; (384c <sd_mci_op_cond+0x68>)
    3802:	6898      	ldr	r0, [r3, #8]
    3804:	4b13      	ldr	r3, [pc, #76]	; (3854 <sd_mci_op_cond+0x70>)
    3806:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    3808:	2800      	cmp	r0, #0
    380a:	db10      	blt.n	382e <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    380c:	1e63      	subs	r3, r4, #1
    380e:	b1cc      	cbz	r4, 3844 <sd_mci_op_cond+0x60>
    3810:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    3812:	2200      	movs	r2, #0
    3814:	f241 1137 	movw	r1, #4407	; 0x1137
    3818:	4b0c      	ldr	r3, [pc, #48]	; (384c <sd_mci_op_cond+0x68>)
    381a:	6898      	ldr	r0, [r3, #8]
    381c:	4b0c      	ldr	r3, [pc, #48]	; (3850 <sd_mci_op_cond+0x6c>)
    381e:	4798      	blx	r3
    3820:	4605      	mov	r5, r0
    3822:	b168      	cbz	r0, 3840 <sd_mci_op_cond+0x5c>
		if (v2) {
    3824:	2e00      	cmp	r6, #0
    3826:	d1e2      	bne.n	37ee <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    3828:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    382c:	e7e0      	b.n	37f0 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    382e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    3832:	d005      	beq.n	3840 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    3834:	4b05      	ldr	r3, [pc, #20]	; (384c <sd_mci_op_cond+0x68>)
    3836:	681a      	ldr	r2, [r3, #0]
    3838:	7ad3      	ldrb	r3, [r2, #11]
    383a:	f043 0308 	orr.w	r3, r3, #8
    383e:	72d3      	strb	r3, [r2, #11]
}
    3840:	4628      	mov	r0, r5
    3842:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    3844:	2500      	movs	r5, #0
    3846:	e7fb      	b.n	3840 <sd_mci_op_cond+0x5c>
    3848:	401f8000 	.word	0x401f8000
    384c:	2000065c 	.word	0x2000065c
    3850:	00001035 	.word	0x00001035
    3854:	00001065 	.word	0x00001065

00003858 <sd_mmc_cmd13>:
{
    3858:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    385a:	4c0d      	ldr	r4, [pc, #52]	; (3890 <sd_mmc_cmd13+0x38>)
    385c:	e000      	b.n	3860 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    385e:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    3860:	4b0c      	ldr	r3, [pc, #48]	; (3894 <sd_mmc_cmd13+0x3c>)
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	8912      	ldrh	r2, [r2, #8]
    3866:	0412      	lsls	r2, r2, #16
    3868:	f241 110d 	movw	r1, #4365	; 0x110d
    386c:	6898      	ldr	r0, [r3, #8]
    386e:	4b0a      	ldr	r3, [pc, #40]	; (3898 <sd_mmc_cmd13+0x40>)
    3870:	4798      	blx	r3
    3872:	4605      	mov	r5, r0
    3874:	b150      	cbz	r0, 388c <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    3876:	4b07      	ldr	r3, [pc, #28]	; (3894 <sd_mmc_cmd13+0x3c>)
    3878:	6898      	ldr	r0, [r3, #8]
    387a:	4b08      	ldr	r3, [pc, #32]	; (389c <sd_mmc_cmd13+0x44>)
    387c:	4798      	blx	r3
    387e:	f410 7f80 	tst.w	r0, #256	; 0x100
    3882:	d103      	bne.n	388c <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    3884:	1e63      	subs	r3, r4, #1
    3886:	2c00      	cmp	r4, #0
    3888:	d1e9      	bne.n	385e <sd_mmc_cmd13+0x6>
			return false;
    388a:	2500      	movs	r5, #0
}
    388c:	4628      	mov	r0, r5
    388e:	bd38      	pop	{r3, r4, r5, pc}
    3890:	00030d40 	.word	0x00030d40
    3894:	2000065c 	.word	0x2000065c
    3898:	00001035 	.word	0x00001035
    389c:	00001065 	.word	0x00001065

000038a0 <sd_mmc_cmd9_mci>:
{
    38a0:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    38a2:	4b0a      	ldr	r3, [pc, #40]	; (38cc <sd_mmc_cmd9_mci+0x2c>)
    38a4:	681a      	ldr	r2, [r3, #0]
    38a6:	8912      	ldrh	r2, [r2, #8]
    38a8:	0412      	lsls	r2, r2, #16
    38aa:	f641 3109 	movw	r1, #6921	; 0x1b09
    38ae:	6898      	ldr	r0, [r3, #8]
    38b0:	4b07      	ldr	r3, [pc, #28]	; (38d0 <sd_mmc_cmd9_mci+0x30>)
    38b2:	4798      	blx	r3
    38b4:	4604      	mov	r4, r0
    38b6:	b908      	cbnz	r0, 38bc <sd_mmc_cmd9_mci+0x1c>
}
    38b8:	4620      	mov	r0, r4
    38ba:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    38bc:	4b03      	ldr	r3, [pc, #12]	; (38cc <sd_mmc_cmd9_mci+0x2c>)
    38be:	6819      	ldr	r1, [r3, #0]
    38c0:	310e      	adds	r1, #14
    38c2:	6898      	ldr	r0, [r3, #8]
    38c4:	4b03      	ldr	r3, [pc, #12]	; (38d4 <sd_mmc_cmd9_mci+0x34>)
    38c6:	4798      	blx	r3
	return true;
    38c8:	e7f6      	b.n	38b8 <sd_mmc_cmd9_mci+0x18>
    38ca:	bf00      	nop
    38cc:	2000065c 	.word	0x2000065c
    38d0:	00001035 	.word	0x00001035
    38d4:	0000108d 	.word	0x0000108d

000038d8 <sd_acmd51>:
{
    38d8:	b510      	push	{r4, lr}
    38da:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    38dc:	4b28      	ldr	r3, [pc, #160]	; (3980 <sd_acmd51+0xa8>)
    38de:	681a      	ldr	r2, [r3, #0]
    38e0:	8912      	ldrh	r2, [r2, #8]
    38e2:	0412      	lsls	r2, r2, #16
    38e4:	f241 1137 	movw	r1, #4407	; 0x1137
    38e8:	6898      	ldr	r0, [r3, #8]
    38ea:	4b26      	ldr	r3, [pc, #152]	; (3984 <sd_acmd51+0xac>)
    38ec:	4798      	blx	r3
    38ee:	4603      	mov	r3, r0
    38f0:	b910      	cbnz	r0, 38f8 <sd_acmd51+0x20>
}
    38f2:	4618      	mov	r0, r3
    38f4:	b004      	add	sp, #16
    38f6:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    38f8:	4b21      	ldr	r3, [pc, #132]	; (3980 <sd_acmd51+0xa8>)
    38fa:	6898      	ldr	r0, [r3, #8]
    38fc:	2301      	movs	r3, #1
    38fe:	9301      	str	r3, [sp, #4]
    3900:	9300      	str	r3, [sp, #0]
    3902:	2308      	movs	r3, #8
    3904:	2200      	movs	r2, #0
    3906:	4920      	ldr	r1, [pc, #128]	; (3988 <sd_acmd51+0xb0>)
    3908:	4c20      	ldr	r4, [pc, #128]	; (398c <sd_acmd51+0xb4>)
    390a:	47a0      	blx	r4
    390c:	4603      	mov	r3, r0
    390e:	2800      	cmp	r0, #0
    3910:	d0ef      	beq.n	38f2 <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    3912:	2201      	movs	r2, #1
    3914:	a902      	add	r1, sp, #8
    3916:	4b1a      	ldr	r3, [pc, #104]	; (3980 <sd_acmd51+0xa8>)
    3918:	6898      	ldr	r0, [r3, #8]
    391a:	4b1d      	ldr	r3, [pc, #116]	; (3990 <sd_acmd51+0xb8>)
    391c:	4798      	blx	r3
    391e:	4603      	mov	r3, r0
    3920:	2800      	cmp	r0, #0
    3922:	d0e6      	beq.n	38f2 <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    3924:	4b16      	ldr	r3, [pc, #88]	; (3980 <sd_acmd51+0xa8>)
    3926:	6898      	ldr	r0, [r3, #8]
    3928:	4b1a      	ldr	r3, [pc, #104]	; (3994 <sd_acmd51+0xbc>)
    392a:	4798      	blx	r3
    392c:	4603      	mov	r3, r0
    392e:	2800      	cmp	r0, #0
    3930:	d0df      	beq.n	38f2 <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3932:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    3936:	f002 020f 	and.w	r2, r2, #15
    393a:	2a01      	cmp	r2, #1
    393c:	d00c      	beq.n	3958 <sd_acmd51+0x80>
    393e:	b132      	cbz	r2, 394e <sd_acmd51+0x76>
    3940:	2a02      	cmp	r2, #2
    3942:	d00e      	beq.n	3962 <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    3944:	4a0e      	ldr	r2, [pc, #56]	; (3980 <sd_acmd51+0xa8>)
    3946:	6812      	ldr	r2, [r2, #0]
    3948:	2110      	movs	r1, #16
    394a:	7311      	strb	r1, [r2, #12]
		break;
    394c:	e7d1      	b.n	38f2 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    394e:	4a0c      	ldr	r2, [pc, #48]	; (3980 <sd_acmd51+0xa8>)
    3950:	6812      	ldr	r2, [r2, #0]
    3952:	2110      	movs	r1, #16
    3954:	7311      	strb	r1, [r2, #12]
		break;
    3956:	e7cc      	b.n	38f2 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    3958:	4a09      	ldr	r2, [pc, #36]	; (3980 <sd_acmd51+0xa8>)
    395a:	6812      	ldr	r2, [r2, #0]
    395c:	211a      	movs	r1, #26
    395e:	7311      	strb	r1, [r2, #12]
		break;
    3960:	e7c7      	b.n	38f2 <sd_acmd51+0x1a>
    3962:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    3966:	09d2      	lsrs	r2, r2, #7
    3968:	d104      	bne.n	3974 <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    396a:	4a05      	ldr	r2, [pc, #20]	; (3980 <sd_acmd51+0xa8>)
    396c:	6812      	ldr	r2, [r2, #0]
    396e:	2120      	movs	r1, #32
    3970:	7311      	strb	r1, [r2, #12]
    3972:	e7be      	b.n	38f2 <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    3974:	4a02      	ldr	r2, [pc, #8]	; (3980 <sd_acmd51+0xa8>)
    3976:	6812      	ldr	r2, [r2, #0]
    3978:	2130      	movs	r1, #48	; 0x30
    397a:	7311      	strb	r1, [r2, #12]
    397c:	e7b9      	b.n	38f2 <sd_acmd51+0x1a>
    397e:	bf00      	nop
    3980:	2000065c 	.word	0x2000065c
    3984:	00001035 	.word	0x00001035
    3988:	00081133 	.word	0x00081133
    398c:	000010c1 	.word	0x000010c1
    3990:	00001105 	.word	0x00001105
    3994:	0000113d 	.word	0x0000113d

00003998 <sd_cm6_set_high_speed>:
{
    3998:	b530      	push	{r4, r5, lr}
    399a:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    399c:	2440      	movs	r4, #64	; 0x40
    399e:	4622      	mov	r2, r4
    39a0:	2100      	movs	r1, #0
    39a2:	a802      	add	r0, sp, #8
    39a4:	4b20      	ldr	r3, [pc, #128]	; (3a28 <sd_cm6_set_high_speed+0x90>)
    39a6:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    39a8:	2301      	movs	r3, #1
    39aa:	9301      	str	r3, [sp, #4]
    39ac:	9300      	str	r3, [sp, #0]
    39ae:	4623      	mov	r3, r4
    39b0:	4a1e      	ldr	r2, [pc, #120]	; (3a2c <sd_cm6_set_high_speed+0x94>)
    39b2:	491f      	ldr	r1, [pc, #124]	; (3a30 <sd_cm6_set_high_speed+0x98>)
    39b4:	481f      	ldr	r0, [pc, #124]	; (3a34 <sd_cm6_set_high_speed+0x9c>)
    39b6:	6880      	ldr	r0, [r0, #8]
    39b8:	4c1f      	ldr	r4, [pc, #124]	; (3a38 <sd_cm6_set_high_speed+0xa0>)
    39ba:	47a0      	blx	r4
    39bc:	4604      	mov	r4, r0
    39be:	b358      	cbz	r0, 3a18 <sd_cm6_set_high_speed+0x80>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    39c0:	2201      	movs	r2, #1
    39c2:	a902      	add	r1, sp, #8
    39c4:	4b1b      	ldr	r3, [pc, #108]	; (3a34 <sd_cm6_set_high_speed+0x9c>)
    39c6:	6898      	ldr	r0, [r3, #8]
    39c8:	4b1c      	ldr	r3, [pc, #112]	; (3a3c <sd_cm6_set_high_speed+0xa4>)
    39ca:	4798      	blx	r3
    39cc:	4604      	mov	r4, r0
    39ce:	b318      	cbz	r0, 3a18 <sd_cm6_set_high_speed+0x80>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    39d0:	4b18      	ldr	r3, [pc, #96]	; (3a34 <sd_cm6_set_high_speed+0x9c>)
    39d2:	6898      	ldr	r0, [r3, #8]
    39d4:	4b1a      	ldr	r3, [pc, #104]	; (3a40 <sd_cm6_set_high_speed+0xa8>)
    39d6:	4798      	blx	r3
    39d8:	4604      	mov	r4, r0
    39da:	b1e8      	cbz	r0, 3a18 <sd_cm6_set_high_speed+0x80>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    39dc:	4b15      	ldr	r3, [pc, #84]	; (3a34 <sd_cm6_set_high_speed+0x9c>)
    39de:	6898      	ldr	r0, [r3, #8]
    39e0:	4b18      	ldr	r3, [pc, #96]	; (3a44 <sd_cm6_set_high_speed+0xac>)
    39e2:	4798      	blx	r3
    39e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    39e8:	d119      	bne.n	3a1e <sd_cm6_set_high_speed+0x86>
    39ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    39ee:	f003 030f 	and.w	r3, r3, #15
    39f2:	2b0f      	cmp	r3, #15
    39f4:	d010      	beq.n	3a18 <sd_cm6_set_high_speed+0x80>
    39f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    39fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    39fe:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    3a02:	d10e      	bne.n	3a22 <sd_cm6_set_high_speed+0x8a>
	driver_send_clock(sd_mmc_hal);
    3a04:	4d0b      	ldr	r5, [pc, #44]	; (3a34 <sd_cm6_set_high_speed+0x9c>)
    3a06:	68a8      	ldr	r0, [r5, #8]
    3a08:	4b0f      	ldr	r3, [pc, #60]	; (3a48 <sd_cm6_set_high_speed+0xb0>)
    3a0a:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    3a0c:	682b      	ldr	r3, [r5, #0]
    3a0e:	2201      	movs	r2, #1
    3a10:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    3a12:	681a      	ldr	r2, [r3, #0]
    3a14:	0052      	lsls	r2, r2, #1
    3a16:	601a      	str	r2, [r3, #0]
}
    3a18:	4620      	mov	r0, r4
    3a1a:	b013      	add	sp, #76	; 0x4c
    3a1c:	bd30      	pop	{r4, r5, pc}
		return false;
    3a1e:	2400      	movs	r4, #0
    3a20:	e7fa      	b.n	3a18 <sd_cm6_set_high_speed+0x80>
		return false;
    3a22:	2400      	movs	r4, #0
    3a24:	e7f8      	b.n	3a18 <sd_cm6_set_high_speed+0x80>
    3a26:	bf00      	nop
    3a28:	000041c5 	.word	0x000041c5
    3a2c:	80ffff01 	.word	0x80ffff01
    3a30:	00081106 	.word	0x00081106
    3a34:	2000065c 	.word	0x2000065c
    3a38:	000010c1 	.word	0x000010c1
    3a3c:	00001105 	.word	0x00001105
    3a40:	0000113d 	.word	0x0000113d
    3a44:	00001065 	.word	0x00001065
    3a48:	0000100d 	.word	0x0000100d

00003a4c <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    3a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a4e:	b085      	sub	sp, #20
	uint8_t v2 = 0;
    3a50:	2400      	movs	r4, #0
    3a52:	f88d 400f 	strb.w	r4, [sp, #15]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
    3a56:	ae04      	add	r6, sp, #16
    3a58:	2308      	movs	r3, #8
    3a5a:	f806 3d02 	strb.w	r3, [r6, #-2]!
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    3a5e:	4d6f      	ldr	r5, [pc, #444]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3a60:	682b      	ldr	r3, [r5, #0]
    3a62:	2701      	movs	r7, #1
    3a64:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    3a66:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    3a68:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    3a6a:	68a8      	ldr	r0, [r5, #8]
    3a6c:	4b6c      	ldr	r3, [pc, #432]	; (3c20 <sd_mmc_mci_card_init+0x1d4>)
    3a6e:	4798      	blx	r3

#if (CONF_SDIO_SUPPORT == 1)
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    3a70:	9600      	str	r6, [sp, #0]
    3a72:	4623      	mov	r3, r4
    3a74:	2206      	movs	r2, #6
    3a76:	4621      	mov	r1, r4
    3a78:	4638      	mov	r0, r7
    3a7a:	4e6a      	ldr	r6, [pc, #424]	; (3c24 <sd_mmc_mci_card_init+0x1d8>)
    3a7c:	47b0      	blx	r6
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    3a7e:	4622      	mov	r2, r4
    3a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3a84:	68a8      	ldr	r0, [r5, #8]
    3a86:	4b68      	ldr	r3, [pc, #416]	; (3c28 <sd_mmc_mci_card_init+0x1dc>)
    3a88:	4798      	blx	r3
    3a8a:	4604      	mov	r4, r0
    3a8c:	b910      	cbnz	r0, 3a94 <sd_mmc_mci_card_init+0x48>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    3a8e:	4620      	mov	r0, r4
    3a90:	b005      	add	sp, #20
    3a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_cmd8(&v2)) {
    3a94:	f10d 000f 	add.w	r0, sp, #15
    3a98:	4b64      	ldr	r3, [pc, #400]	; (3c2c <sd_mmc_mci_card_init+0x1e0>)
    3a9a:	4798      	blx	r3
    3a9c:	4604      	mov	r4, r0
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d0f5      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
	if (!sdio_op_cond()) {
    3aa2:	4b63      	ldr	r3, [pc, #396]	; (3c30 <sd_mmc_mci_card_init+0x1e4>)
    3aa4:	4798      	blx	r3
    3aa6:	4604      	mov	r4, r0
    3aa8:	2800      	cmp	r0, #0
    3aaa:	d0f0      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3aac:	682b      	ldr	r3, [r5, #0]
    3aae:	7adb      	ldrb	r3, [r3, #11]
    3ab0:	f013 0f01 	tst.w	r3, #1
    3ab4:	f040 8089 	bne.w	3bca <sd_mmc_mci_card_init+0x17e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3ab8:	4b58      	ldr	r3, [pc, #352]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	7adb      	ldrb	r3, [r3, #11]
    3abe:	f013 0f01 	tst.w	r3, #1
    3ac2:	d009      	beq.n	3ad8 <sd_mmc_mci_card_init+0x8c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    3ac4:	2200      	movs	r2, #0
    3ac6:	f645 3102 	movw	r1, #23298	; 0x5b02
    3aca:	4b54      	ldr	r3, [pc, #336]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3acc:	6898      	ldr	r0, [r3, #8]
    3ace:	4b56      	ldr	r3, [pc, #344]	; (3c28 <sd_mmc_mci_card_init+0x1dc>)
    3ad0:	4798      	blx	r3
    3ad2:	4604      	mov	r4, r0
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d0da      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    3ad8:	2200      	movs	r2, #0
    3ada:	f245 1103 	movw	r1, #20739	; 0x5103
    3ade:	4b4f      	ldr	r3, [pc, #316]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3ae0:	6898      	ldr	r0, [r3, #8]
    3ae2:	4b51      	ldr	r3, [pc, #324]	; (3c28 <sd_mmc_mci_card_init+0x1dc>)
    3ae4:	4798      	blx	r3
    3ae6:	4604      	mov	r4, r0
    3ae8:	2800      	cmp	r0, #0
    3aea:	d0d0      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    3aec:	4c4b      	ldr	r4, [pc, #300]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3aee:	6825      	ldr	r5, [r4, #0]
    3af0:	68a0      	ldr	r0, [r4, #8]
    3af2:	4b50      	ldr	r3, [pc, #320]	; (3c34 <sd_mmc_mci_card_init+0x1e8>)
    3af4:	4798      	blx	r3
    3af6:	0c00      	lsrs	r0, r0, #16
    3af8:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3afa:	6823      	ldr	r3, [r4, #0]
    3afc:	7adb      	ldrb	r3, [r3, #11]
    3afe:	f013 0f01 	tst.w	r3, #1
    3b02:	d006      	beq.n	3b12 <sd_mmc_mci_card_init+0xc6>
		if (!sd_mmc_cmd9_mci()) {
    3b04:	4b4c      	ldr	r3, [pc, #304]	; (3c38 <sd_mmc_mci_card_init+0x1ec>)
    3b06:	4798      	blx	r3
    3b08:	4604      	mov	r4, r0
    3b0a:	2800      	cmp	r0, #0
    3b0c:	d0bf      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
		sd_decode_csd();
    3b0e:	4b4b      	ldr	r3, [pc, #300]	; (3c3c <sd_mmc_mci_card_init+0x1f0>)
    3b10:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    3b12:	4b42      	ldr	r3, [pc, #264]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b14:	681a      	ldr	r2, [r3, #0]
    3b16:	8912      	ldrh	r2, [r2, #8]
    3b18:	0412      	lsls	r2, r2, #16
    3b1a:	f243 1107 	movw	r1, #12551	; 0x3107
    3b1e:	6898      	ldr	r0, [r3, #8]
    3b20:	4b41      	ldr	r3, [pc, #260]	; (3c28 <sd_mmc_mci_card_init+0x1dc>)
    3b22:	4798      	blx	r3
    3b24:	4604      	mov	r4, r0
    3b26:	2800      	cmp	r0, #0
    3b28:	d0b1      	beq.n	3a8e <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3b2a:	4b3c      	ldr	r3, [pc, #240]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	7adb      	ldrb	r3, [r3, #11]
    3b30:	f013 0f01 	tst.w	r3, #1
    3b34:	d155      	bne.n	3be2 <sd_mmc_mci_card_init+0x196>
	if (IS_SDIO()) {
    3b36:	4b39      	ldr	r3, [pc, #228]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b38:	681b      	ldr	r3, [r3, #0]
    3b3a:	7adb      	ldrb	r3, [r3, #11]
    3b3c:	f013 0f04 	tst.w	r3, #4
    3b40:	d003      	beq.n	3b4a <sd_mmc_mci_card_init+0xfe>
		if (!sdio_get_max_speed()) {
    3b42:	4b3f      	ldr	r3, [pc, #252]	; (3c40 <sd_mmc_mci_card_init+0x1f4>)
    3b44:	4798      	blx	r3
    3b46:	2800      	cmp	r0, #0
    3b48:	d063      	beq.n	3c12 <sd_mmc_mci_card_init+0x1c6>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    3b4a:	4b34      	ldr	r3, [pc, #208]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b4c:	7919      	ldrb	r1, [r3, #4]
    3b4e:	6898      	ldr	r0, [r3, #8]
    3b50:	4b3c      	ldr	r3, [pc, #240]	; (3c44 <sd_mmc_mci_card_init+0x1f8>)
    3b52:	4798      	blx	r3
    3b54:	2803      	cmp	r0, #3
    3b56:	d911      	bls.n	3b7c <sd_mmc_mci_card_init+0x130>
		if (IS_SDIO()) {
    3b58:	4b30      	ldr	r3, [pc, #192]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	7adb      	ldrb	r3, [r3, #11]
    3b5e:	f013 0f04 	tst.w	r3, #4
    3b62:	d144      	bne.n	3bee <sd_mmc_mci_card_init+0x1a2>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    3b64:	4b2d      	ldr	r3, [pc, #180]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b66:	681b      	ldr	r3, [r3, #0]
    3b68:	7adb      	ldrb	r3, [r3, #11]
    3b6a:	f013 0f01 	tst.w	r3, #1
    3b6e:	d003      	beq.n	3b78 <sd_mmc_mci_card_init+0x12c>
			if (!sd_acmd6()) {
    3b70:	4b35      	ldr	r3, [pc, #212]	; (3c48 <sd_mmc_mci_card_init+0x1fc>)
    3b72:	4798      	blx	r3
    3b74:	2800      	cmp	r0, #0
    3b76:	d04e      	beq.n	3c16 <sd_mmc_mci_card_init+0x1ca>
		sd_mmc_configure_slot();
    3b78:	4b34      	ldr	r3, [pc, #208]	; (3c4c <sd_mmc_mci_card_init+0x200>)
    3b7a:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    3b7c:	4b27      	ldr	r3, [pc, #156]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b7e:	6898      	ldr	r0, [r3, #8]
    3b80:	4b33      	ldr	r3, [pc, #204]	; (3c50 <sd_mmc_mci_card_init+0x204>)
    3b82:	4798      	blx	r3
    3b84:	b180      	cbz	r0, 3ba8 <sd_mmc_mci_card_init+0x15c>
		if (IS_SDIO()) {
    3b86:	4b25      	ldr	r3, [pc, #148]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b88:	681b      	ldr	r3, [r3, #0]
    3b8a:	7adb      	ldrb	r3, [r3, #11]
    3b8c:	f013 0f04 	tst.w	r3, #4
    3b90:	d133      	bne.n	3bfa <sd_mmc_mci_card_init+0x1ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    3b92:	4b22      	ldr	r3, [pc, #136]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	7ada      	ldrb	r2, [r3, #11]
    3b98:	f012 0f01 	tst.w	r2, #1
    3b9c:	d002      	beq.n	3ba4 <sd_mmc_mci_card_init+0x158>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    3b9e:	7b1b      	ldrb	r3, [r3, #12]
    3ba0:	2b10      	cmp	r3, #16
    3ba2:	d830      	bhi.n	3c06 <sd_mmc_mci_card_init+0x1ba>
		sd_mmc_configure_slot();
    3ba4:	4b29      	ldr	r3, [pc, #164]	; (3c4c <sd_mmc_mci_card_init+0x200>)
    3ba6:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3ba8:	4b1c      	ldr	r3, [pc, #112]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	7adb      	ldrb	r3, [r3, #11]
    3bae:	f013 0f01 	tst.w	r3, #1
    3bb2:	f43f af6c 	beq.w	3a8e <sd_mmc_mci_card_init+0x42>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    3bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
    3bba:	f241 1110 	movw	r1, #4368	; 0x1110
    3bbe:	4b17      	ldr	r3, [pc, #92]	; (3c1c <sd_mmc_mci_card_init+0x1d0>)
    3bc0:	6898      	ldr	r0, [r3, #8]
    3bc2:	4b19      	ldr	r3, [pc, #100]	; (3c28 <sd_mmc_mci_card_init+0x1dc>)
    3bc4:	4798      	blx	r3
    3bc6:	4604      	mov	r4, r0
    3bc8:	e761      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
		if (!sd_mci_op_cond(v2)) {
    3bca:	f89d 000f 	ldrb.w	r0, [sp, #15]
    3bce:	4b21      	ldr	r3, [pc, #132]	; (3c54 <sd_mmc_mci_card_init+0x208>)
    3bd0:	4798      	blx	r3
    3bd2:	4604      	mov	r4, r0
    3bd4:	2800      	cmp	r0, #0
    3bd6:	f47f af6f 	bne.w	3ab8 <sd_mmc_mci_card_init+0x6c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    3bda:	682b      	ldr	r3, [r5, #0]
    3bdc:	2200      	movs	r2, #0
    3bde:	72da      	strb	r2, [r3, #11]
			return false;
    3be0:	e755      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
		if (!sd_acmd51()) {
    3be2:	4b1d      	ldr	r3, [pc, #116]	; (3c58 <sd_mmc_mci_card_init+0x20c>)
    3be4:	4798      	blx	r3
    3be6:	2800      	cmp	r0, #0
    3be8:	d1a5      	bne.n	3b36 <sd_mmc_mci_card_init+0xea>
			return false;
    3bea:	4604      	mov	r4, r0
    3bec:	e74f      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_bus_width()) {
    3bee:	4b1b      	ldr	r3, [pc, #108]	; (3c5c <sd_mmc_mci_card_init+0x210>)
    3bf0:	4798      	blx	r3
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d1b6      	bne.n	3b64 <sd_mmc_mci_card_init+0x118>
				return false;
    3bf6:	4604      	mov	r4, r0
    3bf8:	e749      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_high_speed()) {
    3bfa:	4b19      	ldr	r3, [pc, #100]	; (3c60 <sd_mmc_mci_card_init+0x214>)
    3bfc:	4798      	blx	r3
    3bfe:	2800      	cmp	r0, #0
    3c00:	d1c7      	bne.n	3b92 <sd_mmc_mci_card_init+0x146>
				return false;
    3c02:	4604      	mov	r4, r0
    3c04:	e743      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
				if (!sd_cm6_set_high_speed()) {
    3c06:	4b17      	ldr	r3, [pc, #92]	; (3c64 <sd_mmc_mci_card_init+0x218>)
    3c08:	4798      	blx	r3
    3c0a:	2800      	cmp	r0, #0
    3c0c:	d1ca      	bne.n	3ba4 <sd_mmc_mci_card_init+0x158>
					return false;
    3c0e:	4604      	mov	r4, r0
    3c10:	e73d      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
			return false;
    3c12:	4604      	mov	r4, r0
    3c14:	e73b      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
				return false;
    3c16:	4604      	mov	r4, r0
    3c18:	e739      	b.n	3a8e <sd_mmc_mci_card_init+0x42>
    3c1a:	bf00      	nop
    3c1c:	2000065c 	.word	0x2000065c
    3c20:	0000100d 	.word	0x0000100d
    3c24:	00003505 	.word	0x00003505
    3c28:	00001035 	.word	0x00001035
    3c2c:	00003715 	.word	0x00003715
    3c30:	00003765 	.word	0x00003765
    3c34:	00001065 	.word	0x00001065
    3c38:	000038a1 	.word	0x000038a1
    3c3c:	000032c9 	.word	0x000032c9
    3c40:	0000356d 	.word	0x0000356d
    3c44:	00000fb9 	.word	0x00000fb9
    3c48:	000034c1 	.word	0x000034c1
    3c4c:	00003351 	.word	0x00003351
    3c50:	00000fe5 	.word	0x00000fe5
    3c54:	000037e5 	.word	0x000037e5
    3c58:	000038d9 	.word	0x000038d9
    3c5c:	00003669 	.word	0x00003669
    3c60:	000036bd 	.word	0x000036bd
    3c64:	00003999 	.word	0x00003999

00003c68 <sd_mmc_deselect_slot>:
{
    3c68:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    3c6a:	4b04      	ldr	r3, [pc, #16]	; (3c7c <sd_mmc_deselect_slot+0x14>)
    3c6c:	7919      	ldrb	r1, [r3, #4]
    3c6e:	b101      	cbz	r1, 3c72 <sd_mmc_deselect_slot+0xa>
    3c70:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    3c72:	6898      	ldr	r0, [r3, #8]
    3c74:	4b02      	ldr	r3, [pc, #8]	; (3c80 <sd_mmc_deselect_slot+0x18>)
    3c76:	4798      	blx	r3
}
    3c78:	e7fa      	b.n	3c70 <sd_mmc_deselect_slot+0x8>
    3c7a:	bf00      	nop
    3c7c:	2000065c 	.word	0x2000065c
    3c80:	00000f8d 	.word	0x00000f8d

00003c84 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    3c84:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    3c86:	2300      	movs	r3, #0
    3c88:	b13b      	cbz	r3, 3c9a <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    3c8a:	4b08      	ldr	r3, [pc, #32]	; (3cac <sd_mmc_init+0x28>)
    3c8c:	24ff      	movs	r4, #255	; 0xff
    3c8e:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    3c90:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    3c92:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    3c94:	635a      	str	r2, [r3, #52]	; 0x34
}
    3c96:	bc30      	pop	{r4, r5}
    3c98:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3c9a:	4c04      	ldr	r4, [pc, #16]	; (3cac <sd_mmc_init+0x28>)
    3c9c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    3ca0:	2504      	movs	r5, #4
    3ca2:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    3ca4:	3301      	adds	r3, #1
    3ca6:	b2db      	uxtb	r3, r3
    3ca8:	e7ee      	b.n	3c88 <sd_mmc_init+0x4>
    3caa:	bf00      	nop
    3cac:	2000065c 	.word	0x2000065c

00003cb0 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    3cb0:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    3cb2:	4b0d      	ldr	r3, [pc, #52]	; (3ce8 <sd_mmc_check+0x38>)
    3cb4:	4798      	blx	r3
    3cb6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    3cb8:	2801      	cmp	r0, #1
    3cba:	d003      	beq.n	3cc4 <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    3cbc:	4b0b      	ldr	r3, [pc, #44]	; (3cec <sd_mmc_check+0x3c>)
    3cbe:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    3cc0:	4620      	mov	r0, r4
    3cc2:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    3cc4:	4b0a      	ldr	r3, [pc, #40]	; (3cf0 <sd_mmc_check+0x40>)
    3cc6:	4798      	blx	r3
    3cc8:	b930      	cbnz	r0, 3cd8 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    3cca:	4b0a      	ldr	r3, [pc, #40]	; (3cf4 <sd_mmc_check+0x44>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	2403      	movs	r4, #3
    3cd0:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    3cd2:	4b06      	ldr	r3, [pc, #24]	; (3cec <sd_mmc_check+0x3c>)
    3cd4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    3cd6:	e7f3      	b.n	3cc0 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    3cd8:	4b06      	ldr	r3, [pc, #24]	; (3cf4 <sd_mmc_check+0x44>)
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	2200      	movs	r2, #0
    3cde:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    3ce0:	4b02      	ldr	r3, [pc, #8]	; (3cec <sd_mmc_check+0x3c>)
    3ce2:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    3ce4:	e7ec      	b.n	3cc0 <sd_mmc_check+0x10>
    3ce6:	bf00      	nop
    3ce8:	0000337d 	.word	0x0000337d
    3cec:	00003c69 	.word	0x00003c69
    3cf0:	00003a4d 	.word	0x00003a4d
    3cf4:	2000065c 	.word	0x2000065c

00003cf8 <sd_mmc_init_read_blocks>:
	}
	return false;
}

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    3cf8:	b570      	push	{r4, r5, r6, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	460e      	mov	r6, r1
    3cfe:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    3d00:	4b1b      	ldr	r3, [pc, #108]	; (3d70 <sd_mmc_init_read_blocks+0x78>)
    3d02:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    3d04:	4604      	mov	r4, r0
    3d06:	b110      	cbz	r0, 3d0e <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    3d08:	4620      	mov	r0, r4
    3d0a:	b002      	add	sp, #8
    3d0c:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    3d0e:	4b19      	ldr	r3, [pc, #100]	; (3d74 <sd_mmc_init_read_blocks+0x7c>)
    3d10:	4798      	blx	r3
    3d12:	b1c0      	cbz	r0, 3d46 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    3d14:	2d01      	cmp	r5, #1
    3d16:	d91a      	bls.n	3d4e <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    3d18:	4917      	ldr	r1, [pc, #92]	; (3d78 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    3d1a:	4b18      	ldr	r3, [pc, #96]	; (3d7c <sd_mmc_init_read_blocks+0x84>)
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	7adb      	ldrb	r3, [r3, #11]
    3d20:	f013 0f08 	tst.w	r3, #8
    3d24:	d100      	bne.n	3d28 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    3d26:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    3d28:	4b14      	ldr	r3, [pc, #80]	; (3d7c <sd_mmc_init_read_blocks+0x84>)
    3d2a:	6898      	ldr	r0, [r3, #8]
    3d2c:	2301      	movs	r3, #1
    3d2e:	9301      	str	r3, [sp, #4]
    3d30:	9500      	str	r5, [sp, #0]
    3d32:	f44f 7300 	mov.w	r3, #512	; 0x200
    3d36:	4632      	mov	r2, r6
    3d38:	4e11      	ldr	r6, [pc, #68]	; (3d80 <sd_mmc_init_read_blocks+0x88>)
    3d3a:	47b0      	blx	r6
    3d3c:	b948      	cbnz	r0, 3d52 <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    3d3e:	4b11      	ldr	r3, [pc, #68]	; (3d84 <sd_mmc_init_read_blocks+0x8c>)
    3d40:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3d42:	2405      	movs	r4, #5
    3d44:	e7e0      	b.n	3d08 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    3d46:	4b0f      	ldr	r3, [pc, #60]	; (3d84 <sd_mmc_init_read_blocks+0x8c>)
    3d48:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3d4a:	2405      	movs	r4, #5
    3d4c:	e7dc      	b.n	3d08 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    3d4e:	490e      	ldr	r1, [pc, #56]	; (3d88 <sd_mmc_init_read_blocks+0x90>)
    3d50:	e7e3      	b.n	3d1a <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    3d52:	4b0a      	ldr	r3, [pc, #40]	; (3d7c <sd_mmc_init_read_blocks+0x84>)
    3d54:	6898      	ldr	r0, [r3, #8]
    3d56:	4b0d      	ldr	r3, [pc, #52]	; (3d8c <sd_mmc_init_read_blocks+0x94>)
    3d58:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    3d5a:	4b0d      	ldr	r3, [pc, #52]	; (3d90 <sd_mmc_init_read_blocks+0x98>)
    3d5c:	4003      	ands	r3, r0
    3d5e:	b91b      	cbnz	r3, 3d68 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    3d60:	4b06      	ldr	r3, [pc, #24]	; (3d7c <sd_mmc_init_read_blocks+0x84>)
    3d62:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    3d64:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    3d66:	e7cf      	b.n	3d08 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    3d68:	4b06      	ldr	r3, [pc, #24]	; (3d84 <sd_mmc_init_read_blocks+0x8c>)
    3d6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3d6c:	2405      	movs	r4, #5
    3d6e:	e7cb      	b.n	3d08 <sd_mmc_init_read_blocks+0x10>
    3d70:	0000337d 	.word	0x0000337d
    3d74:	00003859 	.word	0x00003859
    3d78:	00101112 	.word	0x00101112
    3d7c:	2000065c 	.word	0x2000065c
    3d80:	000010c1 	.word	0x000010c1
    3d84:	00003c69 	.word	0x00003c69
    3d88:	00081111 	.word	0x00081111
    3d8c:	00001065 	.word	0x00001065
    3d90:	e4580000 	.word	0xe4580000

00003d94 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    3d94:	b570      	push	{r4, r5, r6, lr}
    3d96:	4606      	mov	r6, r0
    3d98:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    3d9a:	4d0d      	ldr	r5, [pc, #52]	; (3dd0 <sd_mmc_start_read_blocks+0x3c>)
    3d9c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    3d9e:	f240 52a7 	movw	r2, #1447	; 0x5a7
    3da2:	490c      	ldr	r1, [pc, #48]	; (3dd4 <sd_mmc_start_read_blocks+0x40>)
    3da4:	42a0      	cmp	r0, r4
    3da6:	bf34      	ite	cc
    3da8:	2000      	movcc	r0, #0
    3daa:	2001      	movcs	r0, #1
    3dac:	4b0a      	ldr	r3, [pc, #40]	; (3dd8 <sd_mmc_start_read_blocks+0x44>)
    3dae:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    3db0:	4622      	mov	r2, r4
    3db2:	4631      	mov	r1, r6
    3db4:	68a8      	ldr	r0, [r5, #8]
    3db6:	4b09      	ldr	r3, [pc, #36]	; (3ddc <sd_mmc_start_read_blocks+0x48>)
    3db8:	4798      	blx	r3
    3dba:	b918      	cbnz	r0, 3dc4 <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    3dbc:	2200      	movs	r2, #0
    3dbe:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    3dc0:	2005      	movs	r0, #5
    3dc2:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    3dc4:	4a02      	ldr	r2, [pc, #8]	; (3dd0 <sd_mmc_start_read_blocks+0x3c>)
    3dc6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    3dc8:	1b1c      	subs	r4, r3, r4
    3dca:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    3dcc:	2000      	movs	r0, #0
}
    3dce:	bd70      	pop	{r4, r5, r6, pc}
    3dd0:	2000065c 	.word	0x2000065c
    3dd4:	00004590 	.word	0x00004590
    3dd8:	00001585 	.word	0x00001585
    3ddc:	00001105 	.word	0x00001105

00003de0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    3de0:	b510      	push	{r4, lr}
    3de2:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    3de4:	4b16      	ldr	r3, [pc, #88]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3de6:	6898      	ldr	r0, [r3, #8]
    3de8:	4b16      	ldr	r3, [pc, #88]	; (3e44 <sd_mmc_wait_end_of_read_blocks+0x64>)
    3dea:	4798      	blx	r3
    3dec:	b908      	cbnz	r0, 3df2 <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    3dee:	2005      	movs	r0, #5
    3df0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    3df2:	b194      	cbz	r4, 3e1a <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    3df4:	2200      	movs	r2, #0
    3df6:	4b12      	ldr	r3, [pc, #72]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3df8:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    3dfa:	4b11      	ldr	r3, [pc, #68]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3dfc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    3dfe:	2b01      	cmp	r3, #1
    3e00:	d011      	beq.n	3e26 <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    3e02:	2200      	movs	r2, #0
    3e04:	f243 110c 	movw	r1, #12556	; 0x310c
    3e08:	4b0d      	ldr	r3, [pc, #52]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3e0a:	6898      	ldr	r0, [r3, #8]
    3e0c:	4b0e      	ldr	r3, [pc, #56]	; (3e48 <sd_mmc_wait_end_of_read_blocks+0x68>)
    3e0e:	4798      	blx	r3
    3e10:	b168      	cbz	r0, 3e2e <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    3e12:	4b0e      	ldr	r3, [pc, #56]	; (3e4c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    3e14:	4798      	blx	r3
	return SD_MMC_OK;
    3e16:	2000      	movs	r0, #0
    3e18:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    3e1a:	4b09      	ldr	r3, [pc, #36]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3e1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d0eb      	beq.n	3dfa <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    3e22:	2000      	movs	r0, #0
}
    3e24:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    3e26:	4b09      	ldr	r3, [pc, #36]	; (3e4c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    3e28:	4798      	blx	r3
		return SD_MMC_OK;
    3e2a:	2000      	movs	r0, #0
    3e2c:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    3e2e:	2200      	movs	r2, #0
    3e30:	f243 110c 	movw	r1, #12556	; 0x310c
    3e34:	4b02      	ldr	r3, [pc, #8]	; (3e40 <sd_mmc_wait_end_of_read_blocks+0x60>)
    3e36:	6898      	ldr	r0, [r3, #8]
    3e38:	4b03      	ldr	r3, [pc, #12]	; (3e48 <sd_mmc_wait_end_of_read_blocks+0x68>)
    3e3a:	4798      	blx	r3
    3e3c:	e7e9      	b.n	3e12 <sd_mmc_wait_end_of_read_blocks+0x32>
    3e3e:	bf00      	nop
    3e40:	2000065c 	.word	0x2000065c
    3e44:	0000113d 	.word	0x0000113d
    3e48:	00001035 	.word	0x00001035
    3e4c:	00003c69 	.word	0x00003c69

00003e50 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    3e50:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    3e52:	4903      	ldr	r1, [pc, #12]	; (3e60 <sd_mmc_stack_init+0x10>)
    3e54:	460a      	mov	r2, r1
    3e56:	3104      	adds	r1, #4
    3e58:	4802      	ldr	r0, [pc, #8]	; (3e64 <sd_mmc_stack_init+0x14>)
    3e5a:	4b03      	ldr	r3, [pc, #12]	; (3e68 <sd_mmc_stack_init+0x18>)
    3e5c:	4798      	blx	r3
    3e5e:	bd08      	pop	{r3, pc}
    3e60:	20000030 	.word	0x20000030
    3e64:	20000720 	.word	0x20000720
    3e68:	00003c85 	.word	0x00003c85

00003e6c <__aeabi_uldivmod>:
    3e6c:	b953      	cbnz	r3, 3e84 <__aeabi_uldivmod+0x18>
    3e6e:	b94a      	cbnz	r2, 3e84 <__aeabi_uldivmod+0x18>
    3e70:	2900      	cmp	r1, #0
    3e72:	bf08      	it	eq
    3e74:	2800      	cmpeq	r0, #0
    3e76:	bf1c      	itt	ne
    3e78:	f04f 31ff 	movne.w	r1, #4294967295
    3e7c:	f04f 30ff 	movne.w	r0, #4294967295
    3e80:	f000 b97a 	b.w	4178 <__aeabi_idiv0>
    3e84:	f1ad 0c08 	sub.w	ip, sp, #8
    3e88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    3e8c:	f000 f806 	bl	3e9c <__udivmoddi4>
    3e90:	f8dd e004 	ldr.w	lr, [sp, #4]
    3e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3e98:	b004      	add	sp, #16
    3e9a:	4770      	bx	lr

00003e9c <__udivmoddi4>:
    3e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ea0:	468c      	mov	ip, r1
    3ea2:	460d      	mov	r5, r1
    3ea4:	4604      	mov	r4, r0
    3ea6:	9e08      	ldr	r6, [sp, #32]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d151      	bne.n	3f50 <__udivmoddi4+0xb4>
    3eac:	428a      	cmp	r2, r1
    3eae:	4617      	mov	r7, r2
    3eb0:	d96d      	bls.n	3f8e <__udivmoddi4+0xf2>
    3eb2:	fab2 fe82 	clz	lr, r2
    3eb6:	f1be 0f00 	cmp.w	lr, #0
    3eba:	d00b      	beq.n	3ed4 <__udivmoddi4+0x38>
    3ebc:	f1ce 0c20 	rsb	ip, lr, #32
    3ec0:	fa01 f50e 	lsl.w	r5, r1, lr
    3ec4:	fa20 fc0c 	lsr.w	ip, r0, ip
    3ec8:	fa02 f70e 	lsl.w	r7, r2, lr
    3ecc:	ea4c 0c05 	orr.w	ip, ip, r5
    3ed0:	fa00 f40e 	lsl.w	r4, r0, lr
    3ed4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    3ed8:	0c25      	lsrs	r5, r4, #16
    3eda:	fbbc f8fa 	udiv	r8, ip, sl
    3ede:	fa1f f987 	uxth.w	r9, r7
    3ee2:	fb0a cc18 	mls	ip, sl, r8, ip
    3ee6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    3eea:	fb08 f309 	mul.w	r3, r8, r9
    3eee:	42ab      	cmp	r3, r5
    3ef0:	d90a      	bls.n	3f08 <__udivmoddi4+0x6c>
    3ef2:	19ed      	adds	r5, r5, r7
    3ef4:	f108 32ff 	add.w	r2, r8, #4294967295
    3ef8:	f080 8123 	bcs.w	4142 <__udivmoddi4+0x2a6>
    3efc:	42ab      	cmp	r3, r5
    3efe:	f240 8120 	bls.w	4142 <__udivmoddi4+0x2a6>
    3f02:	f1a8 0802 	sub.w	r8, r8, #2
    3f06:	443d      	add	r5, r7
    3f08:	1aed      	subs	r5, r5, r3
    3f0a:	b2a4      	uxth	r4, r4
    3f0c:	fbb5 f0fa 	udiv	r0, r5, sl
    3f10:	fb0a 5510 	mls	r5, sl, r0, r5
    3f14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    3f18:	fb00 f909 	mul.w	r9, r0, r9
    3f1c:	45a1      	cmp	r9, r4
    3f1e:	d909      	bls.n	3f34 <__udivmoddi4+0x98>
    3f20:	19e4      	adds	r4, r4, r7
    3f22:	f100 33ff 	add.w	r3, r0, #4294967295
    3f26:	f080 810a 	bcs.w	413e <__udivmoddi4+0x2a2>
    3f2a:	45a1      	cmp	r9, r4
    3f2c:	f240 8107 	bls.w	413e <__udivmoddi4+0x2a2>
    3f30:	3802      	subs	r0, #2
    3f32:	443c      	add	r4, r7
    3f34:	eba4 0409 	sub.w	r4, r4, r9
    3f38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    3f3c:	2100      	movs	r1, #0
    3f3e:	2e00      	cmp	r6, #0
    3f40:	d061      	beq.n	4006 <__udivmoddi4+0x16a>
    3f42:	fa24 f40e 	lsr.w	r4, r4, lr
    3f46:	2300      	movs	r3, #0
    3f48:	6034      	str	r4, [r6, #0]
    3f4a:	6073      	str	r3, [r6, #4]
    3f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f50:	428b      	cmp	r3, r1
    3f52:	d907      	bls.n	3f64 <__udivmoddi4+0xc8>
    3f54:	2e00      	cmp	r6, #0
    3f56:	d054      	beq.n	4002 <__udivmoddi4+0x166>
    3f58:	2100      	movs	r1, #0
    3f5a:	e886 0021 	stmia.w	r6, {r0, r5}
    3f5e:	4608      	mov	r0, r1
    3f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f64:	fab3 f183 	clz	r1, r3
    3f68:	2900      	cmp	r1, #0
    3f6a:	f040 808e 	bne.w	408a <__udivmoddi4+0x1ee>
    3f6e:	42ab      	cmp	r3, r5
    3f70:	d302      	bcc.n	3f78 <__udivmoddi4+0xdc>
    3f72:	4282      	cmp	r2, r0
    3f74:	f200 80fa 	bhi.w	416c <__udivmoddi4+0x2d0>
    3f78:	1a84      	subs	r4, r0, r2
    3f7a:	eb65 0503 	sbc.w	r5, r5, r3
    3f7e:	2001      	movs	r0, #1
    3f80:	46ac      	mov	ip, r5
    3f82:	2e00      	cmp	r6, #0
    3f84:	d03f      	beq.n	4006 <__udivmoddi4+0x16a>
    3f86:	e886 1010 	stmia.w	r6, {r4, ip}
    3f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f8e:	b912      	cbnz	r2, 3f96 <__udivmoddi4+0xfa>
    3f90:	2701      	movs	r7, #1
    3f92:	fbb7 f7f2 	udiv	r7, r7, r2
    3f96:	fab7 fe87 	clz	lr, r7
    3f9a:	f1be 0f00 	cmp.w	lr, #0
    3f9e:	d134      	bne.n	400a <__udivmoddi4+0x16e>
    3fa0:	1beb      	subs	r3, r5, r7
    3fa2:	0c3a      	lsrs	r2, r7, #16
    3fa4:	fa1f fc87 	uxth.w	ip, r7
    3fa8:	2101      	movs	r1, #1
    3faa:	fbb3 f8f2 	udiv	r8, r3, r2
    3fae:	0c25      	lsrs	r5, r4, #16
    3fb0:	fb02 3318 	mls	r3, r2, r8, r3
    3fb4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    3fb8:	fb0c f308 	mul.w	r3, ip, r8
    3fbc:	42ab      	cmp	r3, r5
    3fbe:	d907      	bls.n	3fd0 <__udivmoddi4+0x134>
    3fc0:	19ed      	adds	r5, r5, r7
    3fc2:	f108 30ff 	add.w	r0, r8, #4294967295
    3fc6:	d202      	bcs.n	3fce <__udivmoddi4+0x132>
    3fc8:	42ab      	cmp	r3, r5
    3fca:	f200 80d1 	bhi.w	4170 <__udivmoddi4+0x2d4>
    3fce:	4680      	mov	r8, r0
    3fd0:	1aed      	subs	r5, r5, r3
    3fd2:	b2a3      	uxth	r3, r4
    3fd4:	fbb5 f0f2 	udiv	r0, r5, r2
    3fd8:	fb02 5510 	mls	r5, r2, r0, r5
    3fdc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    3fe0:	fb0c fc00 	mul.w	ip, ip, r0
    3fe4:	45a4      	cmp	ip, r4
    3fe6:	d907      	bls.n	3ff8 <__udivmoddi4+0x15c>
    3fe8:	19e4      	adds	r4, r4, r7
    3fea:	f100 33ff 	add.w	r3, r0, #4294967295
    3fee:	d202      	bcs.n	3ff6 <__udivmoddi4+0x15a>
    3ff0:	45a4      	cmp	ip, r4
    3ff2:	f200 80b8 	bhi.w	4166 <__udivmoddi4+0x2ca>
    3ff6:	4618      	mov	r0, r3
    3ff8:	eba4 040c 	sub.w	r4, r4, ip
    3ffc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4000:	e79d      	b.n	3f3e <__udivmoddi4+0xa2>
    4002:	4631      	mov	r1, r6
    4004:	4630      	mov	r0, r6
    4006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    400a:	f1ce 0420 	rsb	r4, lr, #32
    400e:	fa05 f30e 	lsl.w	r3, r5, lr
    4012:	fa07 f70e 	lsl.w	r7, r7, lr
    4016:	fa20 f804 	lsr.w	r8, r0, r4
    401a:	0c3a      	lsrs	r2, r7, #16
    401c:	fa25 f404 	lsr.w	r4, r5, r4
    4020:	ea48 0803 	orr.w	r8, r8, r3
    4024:	fbb4 f1f2 	udiv	r1, r4, r2
    4028:	ea4f 4518 	mov.w	r5, r8, lsr #16
    402c:	fb02 4411 	mls	r4, r2, r1, r4
    4030:	fa1f fc87 	uxth.w	ip, r7
    4034:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4038:	fb01 f30c 	mul.w	r3, r1, ip
    403c:	42ab      	cmp	r3, r5
    403e:	fa00 f40e 	lsl.w	r4, r0, lr
    4042:	d909      	bls.n	4058 <__udivmoddi4+0x1bc>
    4044:	19ed      	adds	r5, r5, r7
    4046:	f101 30ff 	add.w	r0, r1, #4294967295
    404a:	f080 808a 	bcs.w	4162 <__udivmoddi4+0x2c6>
    404e:	42ab      	cmp	r3, r5
    4050:	f240 8087 	bls.w	4162 <__udivmoddi4+0x2c6>
    4054:	3902      	subs	r1, #2
    4056:	443d      	add	r5, r7
    4058:	1aeb      	subs	r3, r5, r3
    405a:	fa1f f588 	uxth.w	r5, r8
    405e:	fbb3 f0f2 	udiv	r0, r3, r2
    4062:	fb02 3310 	mls	r3, r2, r0, r3
    4066:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    406a:	fb00 f30c 	mul.w	r3, r0, ip
    406e:	42ab      	cmp	r3, r5
    4070:	d907      	bls.n	4082 <__udivmoddi4+0x1e6>
    4072:	19ed      	adds	r5, r5, r7
    4074:	f100 38ff 	add.w	r8, r0, #4294967295
    4078:	d26f      	bcs.n	415a <__udivmoddi4+0x2be>
    407a:	42ab      	cmp	r3, r5
    407c:	d96d      	bls.n	415a <__udivmoddi4+0x2be>
    407e:	3802      	subs	r0, #2
    4080:	443d      	add	r5, r7
    4082:	1aeb      	subs	r3, r5, r3
    4084:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4088:	e78f      	b.n	3faa <__udivmoddi4+0x10e>
    408a:	f1c1 0720 	rsb	r7, r1, #32
    408e:	fa22 f807 	lsr.w	r8, r2, r7
    4092:	408b      	lsls	r3, r1
    4094:	fa05 f401 	lsl.w	r4, r5, r1
    4098:	ea48 0303 	orr.w	r3, r8, r3
    409c:	fa20 fe07 	lsr.w	lr, r0, r7
    40a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    40a4:	40fd      	lsrs	r5, r7
    40a6:	ea4e 0e04 	orr.w	lr, lr, r4
    40aa:	fbb5 f9fc 	udiv	r9, r5, ip
    40ae:	ea4f 441e 	mov.w	r4, lr, lsr #16
    40b2:	fb0c 5519 	mls	r5, ip, r9, r5
    40b6:	fa1f f883 	uxth.w	r8, r3
    40ba:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    40be:	fb09 f408 	mul.w	r4, r9, r8
    40c2:	42ac      	cmp	r4, r5
    40c4:	fa02 f201 	lsl.w	r2, r2, r1
    40c8:	fa00 fa01 	lsl.w	sl, r0, r1
    40cc:	d908      	bls.n	40e0 <__udivmoddi4+0x244>
    40ce:	18ed      	adds	r5, r5, r3
    40d0:	f109 30ff 	add.w	r0, r9, #4294967295
    40d4:	d243      	bcs.n	415e <__udivmoddi4+0x2c2>
    40d6:	42ac      	cmp	r4, r5
    40d8:	d941      	bls.n	415e <__udivmoddi4+0x2c2>
    40da:	f1a9 0902 	sub.w	r9, r9, #2
    40de:	441d      	add	r5, r3
    40e0:	1b2d      	subs	r5, r5, r4
    40e2:	fa1f fe8e 	uxth.w	lr, lr
    40e6:	fbb5 f0fc 	udiv	r0, r5, ip
    40ea:	fb0c 5510 	mls	r5, ip, r0, r5
    40ee:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    40f2:	fb00 f808 	mul.w	r8, r0, r8
    40f6:	45a0      	cmp	r8, r4
    40f8:	d907      	bls.n	410a <__udivmoddi4+0x26e>
    40fa:	18e4      	adds	r4, r4, r3
    40fc:	f100 35ff 	add.w	r5, r0, #4294967295
    4100:	d229      	bcs.n	4156 <__udivmoddi4+0x2ba>
    4102:	45a0      	cmp	r8, r4
    4104:	d927      	bls.n	4156 <__udivmoddi4+0x2ba>
    4106:	3802      	subs	r0, #2
    4108:	441c      	add	r4, r3
    410a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    410e:	eba4 0408 	sub.w	r4, r4, r8
    4112:	fba0 8902 	umull	r8, r9, r0, r2
    4116:	454c      	cmp	r4, r9
    4118:	46c6      	mov	lr, r8
    411a:	464d      	mov	r5, r9
    411c:	d315      	bcc.n	414a <__udivmoddi4+0x2ae>
    411e:	d012      	beq.n	4146 <__udivmoddi4+0x2aa>
    4120:	b156      	cbz	r6, 4138 <__udivmoddi4+0x29c>
    4122:	ebba 030e 	subs.w	r3, sl, lr
    4126:	eb64 0405 	sbc.w	r4, r4, r5
    412a:	fa04 f707 	lsl.w	r7, r4, r7
    412e:	40cb      	lsrs	r3, r1
    4130:	431f      	orrs	r7, r3
    4132:	40cc      	lsrs	r4, r1
    4134:	6037      	str	r7, [r6, #0]
    4136:	6074      	str	r4, [r6, #4]
    4138:	2100      	movs	r1, #0
    413a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    413e:	4618      	mov	r0, r3
    4140:	e6f8      	b.n	3f34 <__udivmoddi4+0x98>
    4142:	4690      	mov	r8, r2
    4144:	e6e0      	b.n	3f08 <__udivmoddi4+0x6c>
    4146:	45c2      	cmp	sl, r8
    4148:	d2ea      	bcs.n	4120 <__udivmoddi4+0x284>
    414a:	ebb8 0e02 	subs.w	lr, r8, r2
    414e:	eb69 0503 	sbc.w	r5, r9, r3
    4152:	3801      	subs	r0, #1
    4154:	e7e4      	b.n	4120 <__udivmoddi4+0x284>
    4156:	4628      	mov	r0, r5
    4158:	e7d7      	b.n	410a <__udivmoddi4+0x26e>
    415a:	4640      	mov	r0, r8
    415c:	e791      	b.n	4082 <__udivmoddi4+0x1e6>
    415e:	4681      	mov	r9, r0
    4160:	e7be      	b.n	40e0 <__udivmoddi4+0x244>
    4162:	4601      	mov	r1, r0
    4164:	e778      	b.n	4058 <__udivmoddi4+0x1bc>
    4166:	3802      	subs	r0, #2
    4168:	443c      	add	r4, r7
    416a:	e745      	b.n	3ff8 <__udivmoddi4+0x15c>
    416c:	4608      	mov	r0, r1
    416e:	e708      	b.n	3f82 <__udivmoddi4+0xe6>
    4170:	f1a8 0802 	sub.w	r8, r8, #2
    4174:	443d      	add	r5, r7
    4176:	e72b      	b.n	3fd0 <__udivmoddi4+0x134>

00004178 <__aeabi_idiv0>:
    4178:	4770      	bx	lr
    417a:	bf00      	nop

0000417c <__libc_init_array>:
    417c:	b570      	push	{r4, r5, r6, lr}
    417e:	4e0d      	ldr	r6, [pc, #52]	; (41b4 <__libc_init_array+0x38>)
    4180:	4c0d      	ldr	r4, [pc, #52]	; (41b8 <__libc_init_array+0x3c>)
    4182:	1ba4      	subs	r4, r4, r6
    4184:	10a4      	asrs	r4, r4, #2
    4186:	2500      	movs	r5, #0
    4188:	42a5      	cmp	r5, r4
    418a:	d109      	bne.n	41a0 <__libc_init_array+0x24>
    418c:	4e0b      	ldr	r6, [pc, #44]	; (41bc <__libc_init_array+0x40>)
    418e:	4c0c      	ldr	r4, [pc, #48]	; (41c0 <__libc_init_array+0x44>)
    4190:	f000 fa08 	bl	45a4 <_init>
    4194:	1ba4      	subs	r4, r4, r6
    4196:	10a4      	asrs	r4, r4, #2
    4198:	2500      	movs	r5, #0
    419a:	42a5      	cmp	r5, r4
    419c:	d105      	bne.n	41aa <__libc_init_array+0x2e>
    419e:	bd70      	pop	{r4, r5, r6, pc}
    41a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41a4:	4798      	blx	r3
    41a6:	3501      	adds	r5, #1
    41a8:	e7ee      	b.n	4188 <__libc_init_array+0xc>
    41aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    41ae:	4798      	blx	r3
    41b0:	3501      	adds	r5, #1
    41b2:	e7f2      	b.n	419a <__libc_init_array+0x1e>
    41b4:	000045b0 	.word	0x000045b0
    41b8:	000045b0 	.word	0x000045b0
    41bc:	000045b0 	.word	0x000045b0
    41c0:	000045b4 	.word	0x000045b4

000041c4 <memset>:
    41c4:	4402      	add	r2, r0
    41c6:	4603      	mov	r3, r0
    41c8:	4293      	cmp	r3, r2
    41ca:	d100      	bne.n	41ce <memset+0xa>
    41cc:	4770      	bx	lr
    41ce:	f803 1b01 	strb.w	r1, [r3], #1
    41d2:	e7f9      	b.n	41c8 <memset+0x4>
    41d4:	682f2e2e 	.word	0x682f2e2e
    41d8:	732f6c61 	.word	0x732f6c61
    41dc:	682f6372 	.word	0x682f6372
    41e0:	615f6c61 	.word	0x615f6c61
    41e4:	735f6364 	.word	0x735f6364
    41e8:	2e636e79 	.word	0x2e636e79
    41ec:	00000063 	.word	0x00000063
    41f0:	682f2e2e 	.word	0x682f2e2e
    41f4:	732f6c61 	.word	0x732f6c61
    41f8:	682f6372 	.word	0x682f6372
    41fc:	635f6c61 	.word	0x635f6c61
    4200:	72656d61 	.word	0x72656d61
    4204:	73615f61 	.word	0x73615f61
    4208:	2e636e79 	.word	0x2e636e79
    420c:	00000063 	.word	0x00000063
    4210:	682f2e2e 	.word	0x682f2e2e
    4214:	732f6c61 	.word	0x732f6c61
    4218:	682f6372 	.word	0x682f6372
    421c:	6d5f6c61 	.word	0x6d5f6c61
    4220:	735f6963 	.word	0x735f6963
    4224:	2e636e79 	.word	0x2e636e79
    4228:	00000063 	.word	0x00000063
    422c:	682f2e2e 	.word	0x682f2e2e
    4230:	732f6c61 	.word	0x732f6c61
    4234:	682f6372 	.word	0x682f6372
    4238:	705f6c61 	.word	0x705f6c61
    423c:	632e6d77 	.word	0x632e6d77
    4240:	00000000 	.word	0x00000000
    4244:	682f2e2e 	.word	0x682f2e2e
    4248:	732f6c61 	.word	0x732f6c61
    424c:	682f6372 	.word	0x682f6372
    4250:	745f6c61 	.word	0x745f6c61
    4254:	72656d69 	.word	0x72656d69
    4258:	0000632e 	.word	0x0000632e
    425c:	682f2e2e 	.word	0x682f2e2e
    4260:	732f6c61 	.word	0x732f6c61
    4264:	682f6372 	.word	0x682f6372
    4268:	755f6c61 	.word	0x755f6c61
    426c:	74726173 	.word	0x74726173
    4270:	7973615f 	.word	0x7973615f
    4274:	632e636e 	.word	0x632e636e
    4278:	00000000 	.word	0x00000000
    427c:	682f2e2e 	.word	0x682f2e2e
    4280:	752f6c61 	.word	0x752f6c61
    4284:	736c6974 	.word	0x736c6974
    4288:	6372732f 	.word	0x6372732f
    428c:	6974752f 	.word	0x6974752f
    4290:	6c5f736c 	.word	0x6c5f736c
    4294:	2e747369 	.word	0x2e747369
    4298:	00000063 	.word	0x00000063
    429c:	682f2e2e 	.word	0x682f2e2e
    42a0:	752f6c61 	.word	0x752f6c61
    42a4:	736c6974 	.word	0x736c6974
    42a8:	6372732f 	.word	0x6372732f
    42ac:	6974752f 	.word	0x6974752f
    42b0:	725f736c 	.word	0x725f736c
    42b4:	62676e69 	.word	0x62676e69
    42b8:	65666675 	.word	0x65666675
    42bc:	00632e72 	.word	0x00632e72

000042c0 <_adcs>:
    42c0:	00000000 00000018 00001800 00000000     ................
	...
    42d8:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    42e8:	632e6364 00000000                       dc.c....

000042f0 <_cfgs>:
    42f0:	00205000 0a000000 00000000 00000000     .P .............
	...

000043f0 <_map>:
    43f0:	00000006 00000036 00000007 00000037     ....6.......7...
    4400:	00000009 00000019 0000000e 0000002e     ................
    4410:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    4420:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    4430:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    4440:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4450:	43000000 43000400                       ...C...C

00004458 <_usarts>:
    4458:	00000005 40100004 00030000 00700002     .......@......p.
    4468:	0000ff2e 00000000                       ........

00004470 <_i2cms>:
	...

00004488 <_i2css>:
	...

00004498 <sercomspi_regs>:
	...
    44ac:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    44bc:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    44cc:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    44dc:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    44ec:	63745f6c 0000632e                       l_tc.c..

000044f4 <sd_mmc_trans_units>:
    44f4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00004510 <sd_trans_multipliers>:
    4510:	00000000 0000000a 0000000c 0000000d     ................
    4520:	0000000f 00000014 00000019 0000001e     ................
    4530:	00000023 00000028 0000002d 00000032     #...(...-...2...
    4540:	00000037 0000003c 00000046 00000050     7...<...F...P...

00004550 <mmc_trans_multipliers>:
    4550:	00000000 0000000a 0000000c 0000000d     ................
    4560:	0000000f 00000014 0000001a 0000001e     ................
    4570:	00000023 00000028 0000002d 00000034     #...(...-...4...
    4580:	00000037 0000003c 00000046 00000050     7...<...F...P...
    4590:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    45a0:	0000632e                                .c..

000045a4 <_init>:
    45a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45a6:	bf00      	nop
    45a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45aa:	bc08      	pop	{r3}
    45ac:	469e      	mov	lr, r3
    45ae:	4770      	bx	lr

000045b0 <__init_array_start>:
    45b0:	00000289 	.word	0x00000289

000045b4 <_fini>:
    45b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45b6:	bf00      	nop
    45b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45ba:	bc08      	pop	{r3}
    45bc:	469e      	mov	lr, r3
    45be:	4770      	bx	lr

000045c0 <__fini_array_start>:
    45c0:	00000265 	.word	0x00000265
