
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  000021fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002001c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002001c  2**0
                  CONTENTS
  4 .bss          00000684  20000020  00002220  00020020  2**4
                  ALLOC
  5 .stack        00010004  200006a4  000028a4  00020020  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00037de6  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000046cd  00000000  00000000  00057e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001507f  00000000  00000000  0005c556  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001068  00000000  00000000  000715d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001148  00000000  00000000  0007263d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030881  00000000  00000000  00073785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019b37  00000000  00000000  000a4006  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff692  00000000  00000000  000bdb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002b7c  00000000  00000000  001bd1d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 06 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 7d 15 00 00     ............}...
      8c:	89 15 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	a9 13 00 00 b5 13 00 00 c1 13 00 00 cd 13 00 00     ................
      cc:	d9 13 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	11 17 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 55 1e 00 00     ............U...
     1f0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 e5 16 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000020 	.word	0x20000020
     280:	00000000 	.word	0x00000000
     284:	000021fc 	.word	0x000021fc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000021fc 	.word	0x000021fc
     2c4:	20000024 	.word	0x20000024
     2c8:	000021fc 	.word	0x000021fc
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000a05 	.word	0x00000a05
     2e0:	00001ead 	.word	0x00001ead

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	000021fc 	.word	0x000021fc
     348:	2000001c 	.word	0x2000001c
     34c:	20000020 	.word	0x20000020
     350:	200006a4 	.word	0x200006a4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	00001ec9 	.word	0x00001ec9
     360:	00001e6d 	.word	0x00001e6d

00000364 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     364:	4b0c      	ldr	r3, [pc, #48]	; (398 <ADC_0_PORT_init+0x34>)
     366:	2204      	movs	r2, #4
     368:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     36a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     36e:	629a      	str	r2, [r3, #40]	; 0x28
     370:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     374:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     376:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     37a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     37e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     386:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     38a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     38e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     392:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     396:	4770      	bx	lr
     398:	41008000 	.word	0x41008000

0000039c <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     39c:	4a04      	ldr	r2, [pc, #16]	; (3b0 <ADC_0_CLOCK_init+0x14>)
     39e:	6a13      	ldr	r3, [r2, #32]
     3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3a4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     3a6:	2240      	movs	r2, #64	; 0x40
     3a8:	4b02      	ldr	r3, [pc, #8]	; (3b4 <ADC_0_CLOCK_init+0x18>)
     3aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ae:	4770      	bx	lr
     3b0:	40000800 	.word	0x40000800
     3b4:	40001c00 	.word	0x40001c00

000003b8 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     3b8:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3ba:	4b05      	ldr	r3, [pc, #20]	; (3d0 <ADC_0_init+0x18>)
     3bc:	4798      	blx	r3
	ADC_0_PORT_init();
     3be:	4b05      	ldr	r3, [pc, #20]	; (3d4 <ADC_0_init+0x1c>)
     3c0:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3c2:	2200      	movs	r2, #0
     3c4:	4904      	ldr	r1, [pc, #16]	; (3d8 <ADC_0_init+0x20>)
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <ADC_0_init+0x24>)
     3c8:	4b05      	ldr	r3, [pc, #20]	; (3e0 <ADC_0_init+0x28>)
     3ca:	4798      	blx	r3
     3cc:	bd08      	pop	{r3, pc}
     3ce:	bf00      	nop
     3d0:	0000039d 	.word	0x0000039d
     3d4:	00000365 	.word	0x00000365
     3d8:	43001c00 	.word	0x43001c00
     3dc:	20000248 	.word	0x20000248
     3e0:	00000c0d 	.word	0x00000c0d

000003e4 <EXTERNAL_IRQ_0_init>:
}

void EXTERNAL_IRQ_0_init(void)
{
     3e4:	b508      	push	{r3, lr}
     3e6:	2240      	movs	r2, #64	; 0x40
     3e8:	4b23      	ldr	r3, [pc, #140]	; (478 <EXTERNAL_IRQ_0_init+0x94>)
     3ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3ee:	4a23      	ldr	r2, [pc, #140]	; (47c <EXTERNAL_IRQ_0_init+0x98>)
     3f0:	6953      	ldr	r3, [r2, #20]
     3f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     3f6:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3f8:	4b21      	ldr	r3, [pc, #132]	; (480 <EXTERNAL_IRQ_0_init+0x9c>)
     3fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     402:	4920      	ldr	r1, [pc, #128]	; (484 <EXTERNAL_IRQ_0_init+0xa0>)
     404:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     408:	4a1f      	ldr	r2, [pc, #124]	; (488 <EXTERNAL_IRQ_0_init+0xa4>)
     40a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     40e:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     412:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     416:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     41a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     41e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     426:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42a:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     42e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     432:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     436:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     442:	4a12      	ldr	r2, [pc, #72]	; (48c <EXTERNAL_IRQ_0_init+0xa8>)
     444:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     448:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     44c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     450:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     454:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     460:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     464:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     468:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46c:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(nCHRG, PINMUX_PB23A_EIC_EXTINT7);

	ext_irq_init();
     470:	4b07      	ldr	r3, [pc, #28]	; (490 <EXTERNAL_IRQ_0_init+0xac>)
     472:	4798      	blx	r3
     474:	bd08      	pop	{r3, pc}
     476:	bf00      	nop
     478:	40001c00 	.word	0x40001c00
     47c:	40000800 	.word	0x40000800
     480:	41008000 	.word	0x41008000
     484:	40020000 	.word	0x40020000
     488:	c0020040 	.word	0xc0020040
     48c:	c0020080 	.word	0xc0020080
     490:	00000ccd 	.word	0x00000ccd

00000494 <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     494:	4b58      	ldr	r3, [pc, #352]	; (5f8 <CAMERA_0_PORT_init+0x164>)
     496:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     49a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4ae:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4ce:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     4da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     502:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     506:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     50a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     50e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     512:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     516:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     51a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     522:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     526:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     52a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     52e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     536:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     53a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     546:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     54a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     54e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     552:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     576:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     57a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     586:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     58a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     596:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     59a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ae:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ce:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d6:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     5da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     5f6:	4770      	bx	lr
     5f8:	41008000 	.word	0x41008000

000005fc <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     5fc:	4a02      	ldr	r2, [pc, #8]	; (608 <CAMERA_0_CLOCK_init+0xc>)
     5fe:	6a13      	ldr	r3, [r2, #32]
     600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     604:	6213      	str	r3, [r2, #32]
     606:	4770      	bx	lr
     608:	40000800 	.word	0x40000800

0000060c <CAMERA_0_init>:
{
	hri_mclk_set_APBDMASK_PCC_bit(MCLK);
}

void CAMERA_0_init(void)
{
     60c:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <CAMERA_0_init+0x14>)
     610:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     612:	4904      	ldr	r1, [pc, #16]	; (624 <CAMERA_0_init+0x18>)
     614:	4804      	ldr	r0, [pc, #16]	; (628 <CAMERA_0_init+0x1c>)
     616:	4b05      	ldr	r3, [pc, #20]	; (62c <CAMERA_0_init+0x20>)
     618:	4798      	blx	r3
	CAMERA_0_PORT_init();
     61a:	4b05      	ldr	r3, [pc, #20]	; (630 <CAMERA_0_init+0x24>)
     61c:	4798      	blx	r3
     61e:	bd08      	pop	{r3, pc}
     620:	000005fd 	.word	0x000005fd
     624:	43002c00 	.word	0x43002c00
     628:	20000234 	.word	0x20000234
     62c:	00000c4d 	.word	0x00000c4d
     630:	00000495 	.word	0x00000495

00000634 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     634:	4b28      	ldr	r3, [pc, #160]	; (6d8 <SPI_0_PORT_init+0xa4>)
     636:	2210      	movs	r2, #16
     638:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     63a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     63c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     640:	629a      	str	r2, [r3, #40]	; 0x28
     642:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     646:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     648:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     64c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     650:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     658:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     65c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     660:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     664:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     668:	2220      	movs	r2, #32
     66a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     66c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     66e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     672:	629a      	str	r2, [r3, #40]	; 0x28
     674:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     676:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     67a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     67e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     686:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     68a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     68e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     692:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     696:	2240      	movs	r2, #64	; 0x40
     698:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     69a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     69e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6a2:	629a      	str	r2, [r3, #40]	; 0x28
     6a4:	4a0d      	ldr	r2, [pc, #52]	; (6dc <SPI_0_PORT_init+0xa8>)
     6a6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6a8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     6ac:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6bc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6cc:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     6d4:	4770      	bx	lr
     6d6:	bf00      	nop
     6d8:	41008000 	.word	0x41008000
     6dc:	c0020000 	.word	0xc0020000

000006e0 <SPI_0_CLOCK_init>:
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <SPI_0_CLOCK_init+0x1c>)
     6e2:	2240      	movs	r2, #64	; 0x40
     6e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     6e8:	2243      	movs	r2, #67	; 0x43
     6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     6ee:	4a04      	ldr	r2, [pc, #16]	; (700 <SPI_0_CLOCK_init+0x20>)
     6f0:	6953      	ldr	r3, [r2, #20]
     6f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     6f6:	6153      	str	r3, [r2, #20]
     6f8:	4770      	bx	lr
     6fa:	bf00      	nop
     6fc:	40001c00 	.word	0x40001c00
     700:	40000800 	.word	0x40000800

00000704 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     704:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     706:	4b04      	ldr	r3, [pc, #16]	; (718 <SPI_0_init+0x14>)
     708:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     70a:	4904      	ldr	r1, [pc, #16]	; (71c <SPI_0_init+0x18>)
     70c:	4804      	ldr	r0, [pc, #16]	; (720 <SPI_0_init+0x1c>)
     70e:	4b05      	ldr	r3, [pc, #20]	; (724 <SPI_0_init+0x20>)
     710:	4798      	blx	r3
	SPI_0_PORT_init();
     712:	4b05      	ldr	r3, [pc, #20]	; (728 <SPI_0_init+0x24>)
     714:	4798      	blx	r3
     716:	bd08      	pop	{r3, pc}
     718:	000006e1 	.word	0x000006e1
     71c:	40003000 	.word	0x40003000
     720:	2000024c 	.word	0x2000024c
     724:	00000d8d 	.word	0x00000d8d
     728:	00000635 	.word	0x00000635

0000072c <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     72c:	4b10      	ldr	r3, [pc, #64]	; (770 <USART_0_PORT_init+0x44>)
     72e:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     732:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     736:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     73e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     742:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     746:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     74e:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     752:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     756:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     75e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     762:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     766:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     76a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     76e:	4770      	bx	lr
     770:	41008000 	.word	0x41008000

00000774 <USART_0_CLOCK_init>:
     774:	4b06      	ldr	r3, [pc, #24]	; (790 <USART_0_CLOCK_init+0x1c>)
     776:	2240      	movs	r2, #64	; 0x40
     778:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     77c:	2243      	movs	r2, #67	; 0x43
     77e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     782:	4a04      	ldr	r2, [pc, #16]	; (794 <USART_0_CLOCK_init+0x20>)
     784:	6a13      	ldr	r3, [r2, #32]
     786:	f043 0302 	orr.w	r3, r3, #2
     78a:	6213      	str	r3, [r2, #32]
     78c:	4770      	bx	lr
     78e:	bf00      	nop
     790:	40001c00 	.word	0x40001c00
     794:	40000800 	.word	0x40000800

00000798 <USART_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void USART_0_init(void)
{
     798:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <USART_0_init+0x18>)
     79c:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     79e:	2200      	movs	r2, #0
     7a0:	4904      	ldr	r1, [pc, #16]	; (7b4 <USART_0_init+0x1c>)
     7a2:	4805      	ldr	r0, [pc, #20]	; (7b8 <USART_0_init+0x20>)
     7a4:	4b05      	ldr	r3, [pc, #20]	; (7bc <USART_0_init+0x24>)
     7a6:	4798      	blx	r3
	USART_0_PORT_init();
     7a8:	4b05      	ldr	r3, [pc, #20]	; (7c0 <USART_0_init+0x28>)
     7aa:	4798      	blx	r3
     7ac:	bd08      	pop	{r3, pc}
     7ae:	bf00      	nop
     7b0:	00000775 	.word	0x00000775
     7b4:	43000400 	.word	0x43000400
     7b8:	20000264 	.word	0x20000264
     7bc:	00000f69 	.word	0x00000f69
     7c0:	0000072d 	.word	0x0000072d

000007c4 <IO_BUS_PORT_init>:
}

void IO_BUS_PORT_init(void)
{
     7c4:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c6:	4b5b      	ldr	r3, [pc, #364]	; (934 <IO_BUS_PORT_init+0x170>)
     7c8:	f44f 6500 	mov.w	r5, #2048	; 0x800
     7cc:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d0:	4e59      	ldr	r6, [pc, #356]	; (938 <IO_BUS_PORT_init+0x174>)
     7d2:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7d6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7de:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e2:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7e6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7ea:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ee:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7fa:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fe:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     802:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     806:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     80a:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     80e:	f44f 7180 	mov.w	r1, #256	; 0x100
     812:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     814:	4849      	ldr	r0, [pc, #292]	; (93c <IO_BUS_PORT_init+0x178>)
     816:	6298      	str	r0, [r3, #40]	; 0x28
     818:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     81a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     820:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     824:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     828:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     82c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     830:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     834:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     838:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     83c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     840:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     844:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     848:	f44f 7100 	mov.w	r1, #512	; 0x200
     84c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     84e:	f500 7080 	add.w	r0, r0, #256	; 0x100
     852:	6298      	str	r0, [r3, #40]	; 0x28
     854:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     856:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     858:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     85c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     860:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     868:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     870:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     874:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     878:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     87c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     880:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     884:	f44f 6080 	mov.w	r0, #1024	; 0x400
     888:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88a:	4c2d      	ldr	r4, [pc, #180]	; (940 <IO_BUS_PORT_init+0x17c>)
     88c:	629c      	str	r4, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8b2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8b6:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c0:	629e      	str	r6, [r3, #40]	; 0x28
     8c2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8c4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8c6:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     8ca:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     8ce:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8d2:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8da:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8de:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8e2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8e6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8ea:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ee:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8f2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f6:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8fe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     902:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     906:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     90a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     90e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     912:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     916:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     91a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     91e:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     922:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     926:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     92a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PB10I_SDHC0_SDDAT3);
}
     92e:	bc70      	pop	{r4, r5, r6}
     930:	4770      	bx	lr
     932:	bf00      	nop
     934:	41008000 	.word	0x41008000
     938:	40000800 	.word	0x40000800
     93c:	40000100 	.word	0x40000100
     940:	40000400 	.word	0x40000400

00000944 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     944:	4a05      	ldr	r2, [pc, #20]	; (95c <IO_BUS_CLOCK_init+0x18>)
     946:	6913      	ldr	r3, [r2, #16]
     948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     94c:	6113      	str	r3, [r2, #16]
     94e:	4b04      	ldr	r3, [pc, #16]	; (960 <IO_BUS_CLOCK_init+0x1c>)
     950:	2240      	movs	r2, #64	; 0x40
     952:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     95a:	4770      	bx	lr
     95c:	40000800 	.word	0x40000800
     960:	40001c00 	.word	0x40001c00

00000964 <IO_BUS_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC0_GCLK_ID, CONF_GCLK_SDHC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SDHC0_GCLK_ID_SLOW, CONF_GCLK_SDHC0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void IO_BUS_init(void)
{
     964:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     966:	4b05      	ldr	r3, [pc, #20]	; (97c <IO_BUS_init+0x18>)
     968:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     96a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     96e:	4804      	ldr	r0, [pc, #16]	; (980 <IO_BUS_init+0x1c>)
     970:	4b04      	ldr	r3, [pc, #16]	; (984 <IO_BUS_init+0x20>)
     972:	4798      	blx	r3
	IO_BUS_PORT_init();
     974:	4b04      	ldr	r3, [pc, #16]	; (988 <IO_BUS_init+0x24>)
     976:	4798      	blx	r3
     978:	bd08      	pop	{r3, pc}
     97a:	bf00      	nop
     97c:	00000945 	.word	0x00000945
     980:	20000270 	.word	0x20000270
     984:	00000d01 	.word	0x00000d01
     988:	000007c5 	.word	0x000007c5

0000098c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	4a08      	ldr	r2, [pc, #32]	; (9b0 <PWM_0_PORT_init+0x24>)
     98e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     992:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     996:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     99a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a6:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9aa:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     9ae:	4770      	bx	lr
     9b0:	41008000 	.word	0x41008000

000009b4 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     9b4:	4a04      	ldr	r2, [pc, #16]	; (9c8 <PWM_0_CLOCK_init+0x14>)
     9b6:	6953      	ldr	r3, [r2, #20]
     9b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     9bc:	6153      	str	r3, [r2, #20]
     9be:	2240      	movs	r2, #64	; 0x40
     9c0:	4b02      	ldr	r3, [pc, #8]	; (9cc <PWM_0_CLOCK_init+0x18>)
     9c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9c6:	4770      	bx	lr
     9c8:	40000800 	.word	0x40000800
     9cc:	40001c00 	.word	0x40001c00

000009d0 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     9d0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9d2:	4b06      	ldr	r3, [pc, #24]	; (9ec <PWM_0_init+0x1c>)
     9d4:	4798      	blx	r3
	PWM_0_PORT_init();
     9d6:	4b06      	ldr	r3, [pc, #24]	; (9f0 <PWM_0_init+0x20>)
     9d8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9da:	4b06      	ldr	r3, [pc, #24]	; (9f4 <PWM_0_init+0x24>)
     9dc:	4798      	blx	r3
     9de:	4602      	mov	r2, r0
     9e0:	4905      	ldr	r1, [pc, #20]	; (9f8 <PWM_0_init+0x28>)
     9e2:	4806      	ldr	r0, [pc, #24]	; (9fc <PWM_0_init+0x2c>)
     9e4:	4b06      	ldr	r3, [pc, #24]	; (a00 <PWM_0_init+0x30>)
     9e6:	4798      	blx	r3
     9e8:	bd08      	pop	{r3, pc}
     9ea:	bf00      	nop
     9ec:	000009b5 	.word	0x000009b5
     9f0:	0000098d 	.word	0x0000098d
     9f4:	00001e51 	.word	0x00001e51
     9f8:	40003800 	.word	0x40003800
     9fc:	20000218 	.word	0x20000218
     a00:	00000d49 	.word	0x00000d49

00000a04 <system_init>:
}

void system_init(void)
{
     a04:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     a06:	4b74      	ldr	r3, [pc, #464]	; (bd8 <system_init+0x1d4>)
     a08:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a0a:	4b74      	ldr	r3, [pc, #464]	; (bdc <system_init+0x1d8>)
     a0c:	2280      	movs	r2, #128	; 0x80
     a0e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a14:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     a18:	629a      	str	r2, [r3, #40]	; 0x28
     a1a:	4d71      	ldr	r5, [pc, #452]	; (be0 <system_init+0x1dc>)
     a1c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a1e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     a22:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a2a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a3a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a3c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a3e:	4c69      	ldr	r4, [pc, #420]	; (be4 <system_init+0x1e0>)
     a40:	629c      	str	r4, [r3, #40]	; 0x28
     a42:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     a46:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a48:	f893 004f 	ldrb.w	r0, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a4c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a50:	f883 004f 	strb.w	r0, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a54:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     a58:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a5a:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     a60:	6298      	str	r0, [r3, #40]	; 0x28
     a62:	4861      	ldr	r0, [pc, #388]	; (be8 <system_init+0x1e4>)
     a64:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a66:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a6e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a72:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
     a76:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a78:	485c      	ldr	r0, [pc, #368]	; (bec <system_init+0x1e8>)
     a7a:	6298      	str	r0, [r3, #40]	; 0x28
     a7c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
     a80:	f500 7000 	add.w	r0, r0, #512	; 0x200
     a84:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a86:	f893 0059 	ldrb.w	r0, [r3, #89]	; 0x59
     a8a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     a8e:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a92:	f893 0059 	ldrb.w	r0, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     a96:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a9a:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a9e:	2001      	movs	r0, #1
     aa0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aa4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aa8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     aac:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     ab0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab4:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ab8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     abc:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ac0:	2004      	movs	r0, #4
     ac2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ac6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     ace:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     ad2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad6:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     ada:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ade:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ae2:	2020      	movs	r0, #32
     ae4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ae8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     aec:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
     af0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     af4:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     af8:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     afc:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b00:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b04:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b08:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0c:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b10:	f44f 7000 	mov.w	r0, #512	; 0x200
     b14:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b18:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b1c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b20:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b28:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b2c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b30:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b38:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b3c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b40:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b44:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b4c:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b50:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b54:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b5c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b60:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b64:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b68:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b70:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     b74:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b7c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b80:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     b84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b88:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b8c:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     b90:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b94:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b98:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     b9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ba8:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bac:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bb0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bb4:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     bb8:	4b0d      	ldr	r3, [pc, #52]	; (bf0 <system_init+0x1ec>)
     bba:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bbc:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <system_init+0x1f0>)
     bbe:	4798      	blx	r3

	CAMERA_0_init();
     bc0:	4b0d      	ldr	r3, [pc, #52]	; (bf8 <system_init+0x1f4>)
     bc2:	4798      	blx	r3

	SPI_0_init();
     bc4:	4b0d      	ldr	r3, [pc, #52]	; (bfc <system_init+0x1f8>)
     bc6:	4798      	blx	r3

	USART_0_init();
     bc8:	4b0d      	ldr	r3, [pc, #52]	; (c00 <system_init+0x1fc>)
     bca:	4798      	blx	r3

	IO_BUS_init();
     bcc:	4b0d      	ldr	r3, [pc, #52]	; (c04 <system_init+0x200>)
     bce:	4798      	blx	r3

	PWM_0_init();
     bd0:	4b0d      	ldr	r3, [pc, #52]	; (c08 <system_init+0x204>)
     bd2:	4798      	blx	r3
     bd4:	bd38      	pop	{r3, r4, r5, pc}
     bd6:	bf00      	nop
     bd8:	000011d1 	.word	0x000011d1
     bdc:	41008000 	.word	0x41008000
     be0:	c0020000 	.word	0xc0020000
     be4:	40008000 	.word	0x40008000
     be8:	c0000100 	.word	0xc0000100
     bec:	40020000 	.word	0x40020000
     bf0:	000003b9 	.word	0x000003b9
     bf4:	000003e5 	.word	0x000003e5
     bf8:	0000060d 	.word	0x0000060d
     bfc:	00000705 	.word	0x00000705
     c00:	00000799 	.word	0x00000799
     c04:	00000965 	.word	0x00000965
     c08:	000009d1 	.word	0x000009d1

00000c0c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c0c:	b538      	push	{r3, r4, r5, lr}
     c0e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c10:	4605      	mov	r5, r0
     c12:	b160      	cbz	r0, c2e <adc_sync_init+0x22>
     c14:	b149      	cbz	r1, c2a <adc_sync_init+0x1e>
     c16:	2001      	movs	r0, #1
     c18:	2239      	movs	r2, #57	; 0x39
     c1a:	4906      	ldr	r1, [pc, #24]	; (c34 <adc_sync_init+0x28>)
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <adc_sync_init+0x2c>)
     c1e:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c20:	4621      	mov	r1, r4
     c22:	4628      	mov	r0, r5
     c24:	4b05      	ldr	r3, [pc, #20]	; (c3c <adc_sync_init+0x30>)
     c26:	4798      	blx	r3
}
     c28:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c2a:	2000      	movs	r0, #0
     c2c:	e7f4      	b.n	c18 <adc_sync_init+0xc>
     c2e:	2000      	movs	r0, #0
     c30:	e7f2      	b.n	c18 <adc_sync_init+0xc>
     c32:	bf00      	nop
     c34:	00001f10 	.word	0x00001f10
     c38:	00000fb5 	.word	0x00000fb5
     c3c:	00001199 	.word	0x00001199

00000c40 <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     c40:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     c42:	6903      	ldr	r3, [r0, #16]
     c44:	b103      	cbz	r3, c48 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     c46:	4798      	blx	r3
     c48:	bd08      	pop	{r3, pc}
	...

00000c4c <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     c4c:	b538      	push	{r3, r4, r5, lr}
     c4e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     c50:	4604      	mov	r4, r0
     c52:	b178      	cbz	r0, c74 <camera_async_init+0x28>
     c54:	b161      	cbz	r1, c70 <camera_async_init+0x24>
     c56:	2001      	movs	r0, #1
     c58:	2232      	movs	r2, #50	; 0x32
     c5a:	4907      	ldr	r1, [pc, #28]	; (c78 <camera_async_init+0x2c>)
     c5c:	4b07      	ldr	r3, [pc, #28]	; (c7c <camera_async_init+0x30>)
     c5e:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     c60:	4629      	mov	r1, r5
     c62:	4620      	mov	r0, r4
     c64:	4b06      	ldr	r3, [pc, #24]	; (c80 <camera_async_init+0x34>)
     c66:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <camera_async_init+0x38>)
     c6a:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     c6c:	2000      	movs	r0, #0
     c6e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c70:	2000      	movs	r0, #0
     c72:	e7f1      	b.n	c58 <camera_async_init+0xc>
     c74:	2000      	movs	r0, #0
     c76:	e7ef      	b.n	c58 <camera_async_init+0xc>
     c78:	00001f2c 	.word	0x00001f2c
     c7c:	00000fb5 	.word	0x00000fb5
     c80:	000016ad 	.word	0x000016ad
     c84:	00000c41 	.word	0x00000c41

00000c88 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     c88:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     c8a:	2502      	movs	r5, #2
     c8c:	2400      	movs	r4, #0

	while (upper >= lower) {
     c8e:	e007      	b.n	ca0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     c90:	4a0d      	ldr	r2, [pc, #52]	; (cc8 <process_ext_irq+0x40>)
     c92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     c96:	b1b3      	cbz	r3, cc6 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     c98:	4798      	blx	r3
     c9a:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     c9c:	3a01      	subs	r2, #1
     c9e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     ca0:	42ac      	cmp	r4, r5
     ca2:	d810      	bhi.n	cc6 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     ca4:	192b      	adds	r3, r5, r4
     ca6:	105b      	asrs	r3, r3, #1
     ca8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     caa:	2a01      	cmp	r2, #1
     cac:	d80b      	bhi.n	cc6 <process_ext_irq+0x3e>
     cae:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     cb0:	4905      	ldr	r1, [pc, #20]	; (cc8 <process_ext_irq+0x40>)
     cb2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     cb6:	6849      	ldr	r1, [r1, #4]
     cb8:	4281      	cmp	r1, r0
     cba:	d0e9      	beq.n	c90 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     cbc:	4281      	cmp	r1, r0
     cbe:	d2ed      	bcs.n	c9c <process_ext_irq+0x14>
			lower = middle + 1;
     cc0:	3201      	adds	r2, #1
     cc2:	b2d4      	uxtb	r4, r2
     cc4:	e7ec      	b.n	ca0 <process_ext_irq+0x18>
     cc6:	bd38      	pop	{r3, r4, r5, pc}
     cc8:	2000003c 	.word	0x2000003c

00000ccc <ext_irq_init>:
{
     ccc:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     cce:	2300      	movs	r3, #0
     cd0:	e00a      	b.n	ce8 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     cd2:	4a08      	ldr	r2, [pc, #32]	; (cf4 <ext_irq_init+0x28>)
     cd4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     cd8:	f04f 30ff 	mov.w	r0, #4294967295
     cdc:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     cde:	2100      	movs	r1, #0
     ce0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ce4:	3301      	adds	r3, #1
     ce6:	b29b      	uxth	r3, r3
     ce8:	2b01      	cmp	r3, #1
     cea:	d9f2      	bls.n	cd2 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     cec:	4802      	ldr	r0, [pc, #8]	; (cf8 <ext_irq_init+0x2c>)
     cee:	4b03      	ldr	r3, [pc, #12]	; (cfc <ext_irq_init+0x30>)
     cf0:	4798      	blx	r3
}
     cf2:	bd08      	pop	{r3, pc}
     cf4:	2000003c 	.word	0x2000003c
     cf8:	00000c89 	.word	0x00000c89
     cfc:	000014a9 	.word	0x000014a9

00000d00 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     d00:	b538      	push	{r3, r4, r5, lr}
     d02:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     d04:	4605      	mov	r5, r0
     d06:	b160      	cbz	r0, d22 <mci_sync_init+0x22>
     d08:	b149      	cbz	r1, d1e <mci_sync_init+0x1e>
     d0a:	2001      	movs	r0, #1
     d0c:	2231      	movs	r2, #49	; 0x31
     d0e:	4906      	ldr	r1, [pc, #24]	; (d28 <mci_sync_init+0x28>)
     d10:	4b06      	ldr	r3, [pc, #24]	; (d2c <mci_sync_init+0x2c>)
     d12:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     d14:	4621      	mov	r1, r4
     d16:	4628      	mov	r0, r5
     d18:	4b05      	ldr	r3, [pc, #20]	; (d30 <mci_sync_init+0x30>)
     d1a:	4798      	blx	r3
}
     d1c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     d1e:	2000      	movs	r0, #0
     d20:	e7f4      	b.n	d0c <mci_sync_init+0xc>
     d22:	2000      	movs	r0, #0
     d24:	e7f2      	b.n	d0c <mci_sync_init+0xc>
     d26:	bf00      	nop
     d28:	00001f4c 	.word	0x00001f4c
     d2c:	00000fb5 	.word	0x00000fb5
     d30:	00001755 	.word	0x00001755

00000d34 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     d34:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     d36:	6943      	ldr	r3, [r0, #20]
     d38:	b103      	cbz	r3, d3c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     d3a:	4798      	blx	r3
     d3c:	bd08      	pop	{r3, pc}

00000d3e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     d3e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     d40:	6983      	ldr	r3, [r0, #24]
     d42:	b103      	cbz	r3, d46 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     d44:	4798      	blx	r3
     d46:	bd08      	pop	{r3, pc}

00000d48 <pwm_init>:
{
     d48:	b538      	push	{r3, r4, r5, lr}
     d4a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d4c:	4604      	mov	r4, r0
     d4e:	b188      	cbz	r0, d74 <pwm_init+0x2c>
     d50:	b171      	cbz	r1, d70 <pwm_init+0x28>
     d52:	2001      	movs	r0, #1
     d54:	2233      	movs	r2, #51	; 0x33
     d56:	4908      	ldr	r1, [pc, #32]	; (d78 <pwm_init+0x30>)
     d58:	4b08      	ldr	r3, [pc, #32]	; (d7c <pwm_init+0x34>)
     d5a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     d5c:	4629      	mov	r1, r5
     d5e:	4620      	mov	r0, r4
     d60:	4b07      	ldr	r3, [pc, #28]	; (d80 <pwm_init+0x38>)
     d62:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     d64:	4b07      	ldr	r3, [pc, #28]	; (d84 <pwm_init+0x3c>)
     d66:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     d68:	4b07      	ldr	r3, [pc, #28]	; (d88 <pwm_init+0x40>)
     d6a:	6063      	str	r3, [r4, #4]
}
     d6c:	2000      	movs	r0, #0
     d6e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d70:	2000      	movs	r0, #0
     d72:	e7ef      	b.n	d54 <pwm_init+0xc>
     d74:	2000      	movs	r0, #0
     d76:	e7ed      	b.n	d54 <pwm_init+0xc>
     d78:	00001f68 	.word	0x00001f68
     d7c:	00000fb5 	.word	0x00000fb5
     d80:	00001cd1 	.word	0x00001cd1
     d84:	00000d35 	.word	0x00000d35
     d88:	00000d3f 	.word	0x00000d3f

00000d8c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     d8c:	b538      	push	{r3, r4, r5, lr}
     d8e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     d90:	4604      	mov	r4, r0
     d92:	b1c0      	cbz	r0, dc6 <spi_m_sync_init+0x3a>
     d94:	b1a9      	cbz	r1, dc2 <spi_m_sync_init+0x36>
     d96:	2001      	movs	r0, #1
     d98:	2240      	movs	r2, #64	; 0x40
     d9a:	490c      	ldr	r1, [pc, #48]	; (dcc <spi_m_sync_init+0x40>)
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <spi_m_sync_init+0x44>)
     d9e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     da0:	4620      	mov	r0, r4
     da2:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     da6:	4629      	mov	r1, r5
     da8:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <spi_m_sync_init+0x48>)
     daa:	4798      	blx	r3

	if (rc < 0) {
     dac:	2800      	cmp	r0, #0
     dae:	db07      	blt.n	dc0 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     db4:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     db6:	4b08      	ldr	r3, [pc, #32]	; (dd8 <spi_m_sync_init+0x4c>)
     db8:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     dba:	4b08      	ldr	r3, [pc, #32]	; (ddc <spi_m_sync_init+0x50>)
     dbc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     dbe:	2000      	movs	r0, #0
}
     dc0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     dc2:	2000      	movs	r0, #0
     dc4:	e7e8      	b.n	d98 <spi_m_sync_init+0xc>
     dc6:	2000      	movs	r0, #0
     dc8:	e7e6      	b.n	d98 <spi_m_sync_init+0xc>
     dca:	bf00      	nop
     dcc:	00001f80 	.word	0x00001f80
     dd0:	00000fb5 	.word	0x00000fb5
     dd4:	00001999 	.word	0x00001999
     dd8:	00000e61 	.word	0x00000e61
     ddc:	00000e25 	.word	0x00000e25

00000de0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     de0:	b530      	push	{r4, r5, lr}
     de2:	b085      	sub	sp, #20
     de4:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     de6:	4605      	mov	r5, r0
     de8:	b198      	cbz	r0, e12 <spi_m_sync_transfer+0x32>
     dea:	b181      	cbz	r1, e0e <spi_m_sync_transfer+0x2e>
     dec:	2001      	movs	r0, #1
     dee:	22b3      	movs	r2, #179	; 0xb3
     df0:	4909      	ldr	r1, [pc, #36]	; (e18 <spi_m_sync_transfer+0x38>)
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <spi_m_sync_transfer+0x3c>)
     df4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     df6:	6823      	ldr	r3, [r4, #0]
     df8:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     dfa:	6863      	ldr	r3, [r4, #4]
     dfc:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     dfe:	68a3      	ldr	r3, [r4, #8]
     e00:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     e02:	a901      	add	r1, sp, #4
     e04:	1d28      	adds	r0, r5, #4
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <spi_m_sync_transfer+0x40>)
     e08:	4798      	blx	r3
}
     e0a:	b005      	add	sp, #20
     e0c:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     e0e:	2000      	movs	r0, #0
     e10:	e7ed      	b.n	dee <spi_m_sync_transfer+0xe>
     e12:	2000      	movs	r0, #0
     e14:	e7eb      	b.n	dee <spi_m_sync_transfer+0xe>
     e16:	bf00      	nop
     e18:	00001f80 	.word	0x00001f80
     e1c:	00000fb5 	.word	0x00000fb5
     e20:	00001b15 	.word	0x00001b15

00000e24 <_spi_m_sync_io_write>:
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	b084      	sub	sp, #16
     e28:	460e      	mov	r6, r1
     e2a:	4615      	mov	r5, r2
	ASSERT(io);
     e2c:	4604      	mov	r4, r0
     e2e:	22a3      	movs	r2, #163	; 0xa3
     e30:	4908      	ldr	r1, [pc, #32]	; (e54 <_spi_m_sync_io_write+0x30>)
     e32:	3000      	adds	r0, #0
     e34:	bf18      	it	ne
     e36:	2001      	movne	r0, #1
     e38:	4b07      	ldr	r3, [pc, #28]	; (e58 <_spi_m_sync_io_write+0x34>)
     e3a:	4798      	blx	r3
	xfer.rxbuf = 0;
     e3c:	2300      	movs	r3, #0
     e3e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     e40:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     e42:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     e44:	a901      	add	r1, sp, #4
     e46:	f1a4 000c 	sub.w	r0, r4, #12
     e4a:	4b04      	ldr	r3, [pc, #16]	; (e5c <_spi_m_sync_io_write+0x38>)
     e4c:	4798      	blx	r3
}
     e4e:	b004      	add	sp, #16
     e50:	bd70      	pop	{r4, r5, r6, pc}
     e52:	bf00      	nop
     e54:	00001f80 	.word	0x00001f80
     e58:	00000fb5 	.word	0x00000fb5
     e5c:	00000de1 	.word	0x00000de1

00000e60 <_spi_m_sync_io_read>:
{
     e60:	b570      	push	{r4, r5, r6, lr}
     e62:	b084      	sub	sp, #16
     e64:	460e      	mov	r6, r1
     e66:	4615      	mov	r5, r2
	ASSERT(io);
     e68:	4604      	mov	r4, r0
     e6a:	2287      	movs	r2, #135	; 0x87
     e6c:	4908      	ldr	r1, [pc, #32]	; (e90 <_spi_m_sync_io_read+0x30>)
     e6e:	3000      	adds	r0, #0
     e70:	bf18      	it	ne
     e72:	2001      	movne	r0, #1
     e74:	4b07      	ldr	r3, [pc, #28]	; (e94 <_spi_m_sync_io_read+0x34>)
     e76:	4798      	blx	r3
	xfer.rxbuf = buf;
     e78:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     e7a:	2300      	movs	r3, #0
     e7c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     e7e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     e80:	a901      	add	r1, sp, #4
     e82:	f1a4 000c 	sub.w	r0, r4, #12
     e86:	4b04      	ldr	r3, [pc, #16]	; (e98 <_spi_m_sync_io_read+0x38>)
     e88:	4798      	blx	r3
}
     e8a:	b004      	add	sp, #16
     e8c:	bd70      	pop	{r4, r5, r6, pc}
     e8e:	bf00      	nop
     e90:	00001f80 	.word	0x00001f80
     e94:	00000fb5 	.word	0x00000fb5
     e98:	00000de1 	.word	0x00000de1

00000e9c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e9e:	460e      	mov	r6, r1
     ea0:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     ea2:	4605      	mov	r5, r0
     ea4:	b308      	cbz	r0, eea <usart_sync_write+0x4e>
     ea6:	b311      	cbz	r1, eee <usart_sync_write+0x52>
     ea8:	bb1a      	cbnz	r2, ef2 <usart_sync_write+0x56>
     eaa:	2000      	movs	r0, #0
     eac:	22f1      	movs	r2, #241	; 0xf1
     eae:	4912      	ldr	r1, [pc, #72]	; (ef8 <usart_sync_write+0x5c>)
     eb0:	4b12      	ldr	r3, [pc, #72]	; (efc <usart_sync_write+0x60>)
     eb2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     eb4:	f105 0408 	add.w	r4, r5, #8
     eb8:	4620      	mov	r0, r4
     eba:	4b11      	ldr	r3, [pc, #68]	; (f00 <usart_sync_write+0x64>)
     ebc:	4798      	blx	r3
     ebe:	2800      	cmp	r0, #0
     ec0:	d0f8      	beq.n	eb4 <usart_sync_write+0x18>
     ec2:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     ec4:	5d71      	ldrb	r1, [r6, r5]
     ec6:	4620      	mov	r0, r4
     ec8:	4b0e      	ldr	r3, [pc, #56]	; (f04 <usart_sync_write+0x68>)
     eca:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     ecc:	4620      	mov	r0, r4
     ece:	4b0c      	ldr	r3, [pc, #48]	; (f00 <usart_sync_write+0x64>)
     ed0:	4798      	blx	r3
     ed2:	2800      	cmp	r0, #0
     ed4:	d0fa      	beq.n	ecc <usart_sync_write+0x30>
			;
	} while (++offset < length);
     ed6:	3501      	adds	r5, #1
     ed8:	42bd      	cmp	r5, r7
     eda:	d3f3      	bcc.n	ec4 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     edc:	4620      	mov	r0, r4
     ede:	4b0a      	ldr	r3, [pc, #40]	; (f08 <usart_sync_write+0x6c>)
     ee0:	4798      	blx	r3
     ee2:	2800      	cmp	r0, #0
     ee4:	d0fa      	beq.n	edc <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     ee6:	4628      	mov	r0, r5
     ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     eea:	2000      	movs	r0, #0
     eec:	e7de      	b.n	eac <usart_sync_write+0x10>
     eee:	2000      	movs	r0, #0
     ef0:	e7dc      	b.n	eac <usart_sync_write+0x10>
     ef2:	2001      	movs	r0, #1
     ef4:	e7da      	b.n	eac <usart_sync_write+0x10>
     ef6:	bf00      	nop
     ef8:	00001f9c 	.word	0x00001f9c
     efc:	00000fb5 	.word	0x00000fb5
     f00:	0000197b 	.word	0x0000197b
     f04:	0000196d 	.word	0x0000196d
     f08:	00001985 	.word	0x00001985

00000f0c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f10:	460f      	mov	r7, r1
     f12:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     f14:	4605      	mov	r5, r0
     f16:	b1c8      	cbz	r0, f4c <usart_sync_read+0x40>
     f18:	b1d1      	cbz	r1, f50 <usart_sync_read+0x44>
     f1a:	b9da      	cbnz	r2, f54 <usart_sync_read+0x48>
     f1c:	2000      	movs	r0, #0
     f1e:	f44f 7286 	mov.w	r2, #268	; 0x10c
     f22:	490d      	ldr	r1, [pc, #52]	; (f58 <usart_sync_read+0x4c>)
     f24:	4b0d      	ldr	r3, [pc, #52]	; (f5c <usart_sync_read+0x50>)
     f26:	4798      	blx	r3
	uint32_t                      offset = 0;
     f28:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     f2a:	f105 0408 	add.w	r4, r5, #8
     f2e:	4620      	mov	r0, r4
     f30:	4b0b      	ldr	r3, [pc, #44]	; (f60 <usart_sync_read+0x54>)
     f32:	4798      	blx	r3
     f34:	2800      	cmp	r0, #0
     f36:	d0f8      	beq.n	f2a <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     f38:	4620      	mov	r0, r4
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <usart_sync_read+0x58>)
     f3c:	4798      	blx	r3
     f3e:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     f40:	3601      	adds	r6, #1
     f42:	4546      	cmp	r6, r8
     f44:	d3f1      	bcc.n	f2a <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     f46:	4630      	mov	r0, r6
     f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     f4c:	2000      	movs	r0, #0
     f4e:	e7e6      	b.n	f1e <usart_sync_read+0x12>
     f50:	2000      	movs	r0, #0
     f52:	e7e4      	b.n	f1e <usart_sync_read+0x12>
     f54:	2001      	movs	r0, #1
     f56:	e7e2      	b.n	f1e <usart_sync_read+0x12>
     f58:	00001f9c 	.word	0x00001f9c
     f5c:	00000fb5 	.word	0x00000fb5
     f60:	0000198f 	.word	0x0000198f
     f64:	00001973 	.word	0x00001973

00000f68 <usart_sync_init>:
{
     f68:	b538      	push	{r3, r4, r5, lr}
     f6a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     f6c:	4604      	mov	r4, r0
     f6e:	b1a0      	cbz	r0, f9a <usart_sync_init+0x32>
     f70:	b189      	cbz	r1, f96 <usart_sync_init+0x2e>
     f72:	2001      	movs	r0, #1
     f74:	2234      	movs	r2, #52	; 0x34
     f76:	490a      	ldr	r1, [pc, #40]	; (fa0 <usart_sync_init+0x38>)
     f78:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <usart_sync_init+0x3c>)
     f7a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     f7c:	4629      	mov	r1, r5
     f7e:	f104 0008 	add.w	r0, r4, #8
     f82:	4b09      	ldr	r3, [pc, #36]	; (fa8 <usart_sync_init+0x40>)
     f84:	4798      	blx	r3
	if (init_status) {
     f86:	4603      	mov	r3, r0
     f88:	b918      	cbnz	r0, f92 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     f8a:	4a08      	ldr	r2, [pc, #32]	; (fac <usart_sync_init+0x44>)
     f8c:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     f8e:	4a08      	ldr	r2, [pc, #32]	; (fb0 <usart_sync_init+0x48>)
     f90:	6022      	str	r2, [r4, #0]
}
     f92:	4618      	mov	r0, r3
     f94:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     f96:	2000      	movs	r0, #0
     f98:	e7ec      	b.n	f74 <usart_sync_init+0xc>
     f9a:	2000      	movs	r0, #0
     f9c:	e7ea      	b.n	f74 <usart_sync_init+0xc>
     f9e:	bf00      	nop
     fa0:	00001f9c 	.word	0x00001f9c
     fa4:	00000fb5 	.word	0x00000fb5
     fa8:	00001941 	.word	0x00001941
     fac:	00000f0d 	.word	0x00000f0d
     fb0:	00000e9d 	.word	0x00000e9d

00000fb4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     fb4:	b900      	cbnz	r0, fb8 <assert+0x4>
		__asm("BKPT #0");
     fb6:	be00      	bkpt	0x0000
     fb8:	4770      	bx	lr

00000fba <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     fba:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
     fbe:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
     fc2:	f3c0 2087 	ubfx	r0, r0, #10, #8
     fc6:	4770      	bx	lr

00000fc8 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     fc8:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     fca:	4b60      	ldr	r3, [pc, #384]	; (114c <_adc_init+0x184>)
     fcc:	4298      	cmp	r0, r3
     fce:	f000 809c 	beq.w	110a <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     fd2:	4b5f      	ldr	r3, [pc, #380]	; (1150 <_adc_init+0x188>)
     fd4:	4298      	cmp	r0, r3
     fd6:	f000 80a8 	beq.w	112a <_adc_init+0x162>
	uint16_t calib_reg = 0;
     fda:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     fdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     fde:	f013 0f01 	tst.w	r3, #1
     fe2:	d11b      	bne.n	101c <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fe4:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fe6:	f013 0f03 	tst.w	r3, #3
     fea:	d1fb      	bne.n	fe4 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     fec:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     fee:	f013 0f02 	tst.w	r3, #2
     ff2:	d00d      	beq.n	1010 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     ff4:	8803      	ldrh	r3, [r0, #0]
     ff6:	b29b      	uxth	r3, r3
     ff8:	f023 0302 	bic.w	r3, r3, #2
     ffc:	b29b      	uxth	r3, r3
     ffe:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1000:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1002:	f013 0f03 	tst.w	r3, #3
    1006:	d1fb      	bne.n	1000 <_adc_init+0x38>
    1008:	6b03      	ldr	r3, [r0, #48]	; 0x30
    100a:	f013 0f02 	tst.w	r3, #2
    100e:	d1fb      	bne.n	1008 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1010:	2301      	movs	r3, #1
    1012:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1014:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1016:	f013 0f03 	tst.w	r3, #3
    101a:	d1fb      	bne.n	1014 <_adc_init+0x4c>
    101c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    101e:	f013 0f01 	tst.w	r3, #1
    1022:	d1fb      	bne.n	101c <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1024:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1028:	2316      	movs	r3, #22
    102a:	4a4a      	ldr	r2, [pc, #296]	; (1154 <_adc_init+0x18c>)
    102c:	fb03 2301 	mla	r3, r3, r1, r2
    1030:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    1032:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1034:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1036:	f3c3 030b 	ubfx	r3, r3, #0, #12
    103a:	2b00      	cmp	r3, #0
    103c:	d1fa      	bne.n	1034 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    103e:	2316      	movs	r3, #22
    1040:	4a44      	ldr	r2, [pc, #272]	; (1154 <_adc_init+0x18c>)
    1042:	fb03 2301 	mla	r3, r3, r1, r2
    1046:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1048:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    104a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    104c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1050:	2b00      	cmp	r3, #0
    1052:	d1fa      	bne.n	104a <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1054:	2316      	movs	r3, #22
    1056:	4a3f      	ldr	r2, [pc, #252]	; (1154 <_adc_init+0x18c>)
    1058:	fb03 2301 	mla	r3, r3, r1, r2
    105c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    105e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1060:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1062:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1064:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1066:	f3c3 030b 	ubfx	r3, r3, #0, #12
    106a:	2b00      	cmp	r3, #0
    106c:	d1fa      	bne.n	1064 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    106e:	2316      	movs	r3, #22
    1070:	4a38      	ldr	r2, [pc, #224]	; (1154 <_adc_init+0x18c>)
    1072:	fb03 2301 	mla	r3, r3, r1, r2
    1076:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1078:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    107a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    107c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1080:	2b00      	cmp	r3, #0
    1082:	d1fa      	bne.n	107a <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1084:	2316      	movs	r3, #22
    1086:	4a33      	ldr	r2, [pc, #204]	; (1154 <_adc_init+0x18c>)
    1088:	fb03 2301 	mla	r3, r3, r1, r2
    108c:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    108e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1090:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1092:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1096:	2b00      	cmp	r3, #0
    1098:	d1fa      	bne.n	1090 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    109a:	2316      	movs	r3, #22
    109c:	4a2d      	ldr	r2, [pc, #180]	; (1154 <_adc_init+0x18c>)
    109e:	fb03 2301 	mla	r3, r3, r1, r2
    10a2:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    10a4:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10a8:	f013 0f80 	tst.w	r3, #128	; 0x80
    10ac:	d1fb      	bne.n	10a6 <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    10ae:	2316      	movs	r3, #22
    10b0:	4a28      	ldr	r2, [pc, #160]	; (1154 <_adc_init+0x18c>)
    10b2:	fb03 2301 	mla	r3, r3, r1, r2
    10b6:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    10b8:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    10c0:	d1fb      	bne.n	10ba <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    10c2:	2316      	movs	r3, #22
    10c4:	4a23      	ldr	r2, [pc, #140]	; (1154 <_adc_init+0x18c>)
    10c6:	fb03 2301 	mla	r3, r3, r1, r2
    10ca:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    10cc:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10d0:	f413 7f00 	tst.w	r3, #512	; 0x200
    10d4:	d1fb      	bne.n	10ce <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    10d6:	2316      	movs	r3, #22
    10d8:	4a1e      	ldr	r2, [pc, #120]	; (1154 <_adc_init+0x18c>)
    10da:	fb03 2301 	mla	r3, r3, r1, r2
    10de:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    10e0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    10e8:	d1fb      	bne.n	10e2 <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    10ea:	2216      	movs	r2, #22
    10ec:	4b19      	ldr	r3, [pc, #100]	; (1154 <_adc_init+0x18c>)
    10ee:	fb02 3101 	mla	r1, r2, r1, r3
    10f2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    10f4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    10f6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    10f8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10fc:	f013 0f03 	tst.w	r3, #3
    1100:	d1fb      	bne.n	10fa <_adc_init+0x132>

	return ERR_NONE;
}
    1102:	2000      	movs	r0, #0
    1104:	f85d 4b04 	ldr.w	r4, [sp], #4
    1108:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    110a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	095a      	lsrs	r2, r3, #5
    1112:	0212      	lsls	r2, r2, #8
    1114:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1118:	0a1c      	lsrs	r4, r3, #8
    111a:	0124      	lsls	r4, r4, #4
    111c:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1120:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    1122:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1126:	431a      	orrs	r2, r3
    1128:	e758      	b.n	fdc <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    112a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	0cda      	lsrs	r2, r3, #19
    1132:	0212      	lsls	r2, r2, #8
    1134:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1138:	0d9c      	lsrs	r4, r3, #22
    113a:	0124      	lsls	r4, r4, #4
    113c:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1140:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    1142:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1146:	431a      	orrs	r2, r3
    1148:	e748      	b.n	fdc <_adc_init+0x14>
    114a:	bf00      	nop
    114c:	43001c00 	.word	0x43001c00
    1150:	43002000 	.word	0x43002000
    1154:	00001fb8 	.word	0x00001fb8

00001158 <_adc_get_regs>:
{
    1158:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    115a:	4b0b      	ldr	r3, [pc, #44]	; (1188 <_adc_get_regs+0x30>)
    115c:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    115e:	2300      	movs	r3, #0
    1160:	b13b      	cbz	r3, 1172 <_adc_get_regs+0x1a>
	ASSERT(false);
    1162:	2288      	movs	r2, #136	; 0x88
    1164:	4909      	ldr	r1, [pc, #36]	; (118c <_adc_get_regs+0x34>)
    1166:	2000      	movs	r0, #0
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <_adc_get_regs+0x38>)
    116a:	4798      	blx	r3
	return 0;
    116c:	2300      	movs	r3, #0
}
    116e:	4618      	mov	r0, r3
    1170:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    1172:	2216      	movs	r2, #22
    1174:	fb02 f203 	mul.w	r2, r2, r3
    1178:	4906      	ldr	r1, [pc, #24]	; (1194 <_adc_get_regs+0x3c>)
    117a:	5c8a      	ldrb	r2, [r1, r2]
    117c:	4290      	cmp	r0, r2
    117e:	d0f6      	beq.n	116e <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1180:	3301      	adds	r3, #1
    1182:	b2db      	uxtb	r3, r3
    1184:	e7ec      	b.n	1160 <_adc_get_regs+0x8>
    1186:	bf00      	nop
    1188:	00000fbb 	.word	0x00000fbb
    118c:	00001fd0 	.word	0x00001fd0
    1190:	00000fb5 	.word	0x00000fb5
    1194:	00001fb8 	.word	0x00001fb8

00001198 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1198:	b538      	push	{r3, r4, r5, lr}
    119a:	460c      	mov	r4, r1
	ASSERT(device);
    119c:	4605      	mov	r5, r0
    119e:	22d9      	movs	r2, #217	; 0xd9
    11a0:	4907      	ldr	r1, [pc, #28]	; (11c0 <_adc_sync_init+0x28>)
    11a2:	3000      	adds	r0, #0
    11a4:	bf18      	it	ne
    11a6:	2001      	movne	r0, #1
    11a8:	4b06      	ldr	r3, [pc, #24]	; (11c4 <_adc_sync_init+0x2c>)
    11aa:	4798      	blx	r3

	device->hw = hw;
    11ac:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    11ae:	4620      	mov	r0, r4
    11b0:	4b05      	ldr	r3, [pc, #20]	; (11c8 <_adc_sync_init+0x30>)
    11b2:	4798      	blx	r3
    11b4:	4601      	mov	r1, r0
    11b6:	4620      	mov	r0, r4
    11b8:	4b04      	ldr	r3, [pc, #16]	; (11cc <_adc_sync_init+0x34>)
    11ba:	4798      	blx	r3
}
    11bc:	bd38      	pop	{r3, r4, r5, pc}
    11be:	bf00      	nop
    11c0:	00001fd0 	.word	0x00001fd0
    11c4:	00000fb5 	.word	0x00000fb5
    11c8:	00001159 	.word	0x00001159
    11cc:	00000fc9 	.word	0x00000fc9

000011d0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    11d0:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    11d2:	4a0c      	ldr	r2, [pc, #48]	; (1204 <_init_chip+0x34>)
    11d4:	8813      	ldrh	r3, [r2, #0]
    11d6:	b29b      	uxth	r3, r3
    11d8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    11da:	4b0b      	ldr	r3, [pc, #44]	; (1208 <_init_chip+0x38>)
    11dc:	4798      	blx	r3
	_oscctrl_init_sources();
    11de:	4b0b      	ldr	r3, [pc, #44]	; (120c <_init_chip+0x3c>)
    11e0:	4798      	blx	r3
	_mclk_init();
    11e2:	4b0b      	ldr	r3, [pc, #44]	; (1210 <_init_chip+0x40>)
    11e4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    11e6:	4b0b      	ldr	r3, [pc, #44]	; (1214 <_init_chip+0x44>)
    11e8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    11ea:	f640 70ff 	movw	r0, #4095	; 0xfff
    11ee:	4b0a      	ldr	r3, [pc, #40]	; (1218 <_init_chip+0x48>)
    11f0:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    11f2:	4a0a      	ldr	r2, [pc, #40]	; (121c <_init_chip+0x4c>)
    11f4:	6913      	ldr	r3, [r2, #16]
    11f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    11fa:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <_init_chip+0x50>)
    11fe:	4798      	blx	r3
    1200:	bd08      	pop	{r3, pc}
    1202:	bf00      	nop
    1204:	41004000 	.word	0x41004000
    1208:	000015fd 	.word	0x000015fd
    120c:	0000161d 	.word	0x0000161d
    1210:	000015f1 	.word	0x000015f1
    1214:	00001621 	.word	0x00001621
    1218:	00001595 	.word	0x00001595
    121c:	40000800 	.word	0x40000800
    1220:	0000128d 	.word	0x0000128d

00001224 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1224:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1226:	4a17      	ldr	r2, [pc, #92]	; (1284 <_dmac_handler+0x60>)
    1228:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    122a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    122e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1232:	0088      	lsls	r0, r1, #2
    1234:	4914      	ldr	r1, [pc, #80]	; (1288 <_dmac_handler+0x64>)
    1236:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1238:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    123a:	f412 7f80 	tst.w	r2, #256	; 0x100
    123e:	d105      	bne.n	124c <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1240:	4a10      	ldr	r2, [pc, #64]	; (1284 <_dmac_handler+0x60>)
    1242:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1244:	f412 7f00 	tst.w	r2, #512	; 0x200
    1248:	d10b      	bne.n	1262 <_dmac_handler+0x3e>
    124a:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    124c:	011a      	lsls	r2, r3, #4
    124e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1252:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1256:	2101      	movs	r1, #1
    1258:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    125c:	6843      	ldr	r3, [r0, #4]
    125e:	4798      	blx	r3
    1260:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1262:	011a      	lsls	r2, r3, #4
    1264:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1268:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    126c:	2102      	movs	r1, #2
    126e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1272:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1276:	fa03 f201 	lsl.w	r2, r3, r1
    127a:	4b03      	ldr	r3, [pc, #12]	; (1288 <_dmac_handler+0x64>)
    127c:	589b      	ldr	r3, [r3, r2]
    127e:	4798      	blx	r3
	}
}
    1280:	e7e3      	b.n	124a <_dmac_handler+0x26>
    1282:	bf00      	nop
    1284:	4100a000 	.word	0x4100a000
    1288:	2000004c 	.word	0x2000004c

0000128c <_dma_init>:
{
    128c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    128e:	4a3c      	ldr	r2, [pc, #240]	; (1380 <_dma_init+0xf4>)
    1290:	8813      	ldrh	r3, [r2, #0]
    1292:	b29b      	uxth	r3, r3
    1294:	f023 0302 	bic.w	r3, r3, #2
    1298:	b29b      	uxth	r3, r3
    129a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    129c:	8853      	ldrh	r3, [r2, #2]
    129e:	b29b      	uxth	r3, r3
    12a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    12a4:	b29b      	uxth	r3, r3
    12a6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    12a8:	8813      	ldrh	r3, [r2, #0]
    12aa:	b29b      	uxth	r3, r3
    12ac:	f043 0301 	orr.w	r3, r3, #1
    12b0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    12b2:	4b33      	ldr	r3, [pc, #204]	; (1380 <_dma_init+0xf4>)
    12b4:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    12b6:	f013 0f01 	tst.w	r3, #1
    12ba:	d1fa      	bne.n	12b2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    12bc:	4a30      	ldr	r2, [pc, #192]	; (1380 <_dma_init+0xf4>)
    12be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    12c2:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    12c4:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    12c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    12ca:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    12cc:	2300      	movs	r3, #0
    12ce:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    12d0:	492c      	ldr	r1, [pc, #176]	; (1384 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    12d2:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    12d4:	492c      	ldr	r1, [pc, #176]	; (1388 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    12d6:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    12d8:	e016      	b.n	1308 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    12da:	4a2c      	ldr	r2, [pc, #176]	; (138c <_dma_init+0x100>)
    12dc:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    12e0:	4c27      	ldr	r4, [pc, #156]	; (1380 <_dma_init+0xf4>)
    12e2:	1d19      	adds	r1, r3, #4
    12e4:	0109      	lsls	r1, r1, #4
    12e6:	1860      	adds	r0, r4, r1
    12e8:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    12ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    12ee:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    12f0:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    12f2:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    12f4:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    12f6:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    12f8:	4922      	ldr	r1, [pc, #136]	; (1384 <_dma_init+0xf8>)
    12fa:	011a      	lsls	r2, r3, #4
    12fc:	1888      	adds	r0, r1, r2
    12fe:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1300:	2200      	movs	r2, #0
    1302:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1304:	3301      	adds	r3, #1
    1306:	b2db      	uxtb	r3, r3
    1308:	2b1f      	cmp	r3, #31
    130a:	d9e6      	bls.n	12da <_dma_init+0x4e>
    130c:	2300      	movs	r3, #0
    130e:	e00a      	b.n	1326 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1310:	f103 011f 	add.w	r1, r3, #31
    1314:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1316:	2a00      	cmp	r2, #0
    1318:	da10      	bge.n	133c <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    131a:	2a00      	cmp	r2, #0
    131c:	da1c      	bge.n	1358 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    131e:	2a00      	cmp	r2, #0
    1320:	da24      	bge.n	136c <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1322:	3301      	adds	r3, #1
    1324:	b2db      	uxtb	r3, r3
    1326:	2b04      	cmp	r3, #4
    1328:	d9f2      	bls.n	1310 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    132a:	4a15      	ldr	r2, [pc, #84]	; (1380 <_dma_init+0xf4>)
    132c:	8813      	ldrh	r3, [r2, #0]
    132e:	b29b      	uxth	r3, r3
    1330:	f043 0302 	orr.w	r3, r3, #2
    1334:	8013      	strh	r3, [r2, #0]
}
    1336:	2000      	movs	r0, #0
    1338:	bc30      	pop	{r4, r5}
    133a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    133c:	0950      	lsrs	r0, r2, #5
    133e:	f001 051f 	and.w	r5, r1, #31
    1342:	2401      	movs	r4, #1
    1344:	40ac      	lsls	r4, r5
    1346:	3020      	adds	r0, #32
    1348:	4d11      	ldr	r5, [pc, #68]	; (1390 <_dma_init+0x104>)
    134a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    134e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1352:	f3bf 8f6f 	isb	sy
    1356:	e7e0      	b.n	131a <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1358:	0950      	lsrs	r0, r2, #5
    135a:	f001 051f 	and.w	r5, r1, #31
    135e:	2401      	movs	r4, #1
    1360:	40ac      	lsls	r4, r5
    1362:	3060      	adds	r0, #96	; 0x60
    1364:	4d0a      	ldr	r5, [pc, #40]	; (1390 <_dma_init+0x104>)
    1366:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    136a:	e7d8      	b.n	131e <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    136c:	0952      	lsrs	r2, r2, #5
    136e:	f001 011f 	and.w	r1, r1, #31
    1372:	2001      	movs	r0, #1
    1374:	fa00 f101 	lsl.w	r1, r0, r1
    1378:	4805      	ldr	r0, [pc, #20]	; (1390 <_dma_init+0x104>)
    137a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    137e:	e7d0      	b.n	1322 <_dma_init+0x96>
    1380:	4100a000 	.word	0x4100a000
    1384:	20000290 	.word	0x20000290
    1388:	20000490 	.word	0x20000490
    138c:	00001fe8 	.word	0x00001fe8
    1390:	e000e100 	.word	0xe000e100

00001394 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1394:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1398:	008a      	lsls	r2, r1, #2
    139a:	4b02      	ldr	r3, [pc, #8]	; (13a4 <_dma_get_channel_resource+0x10>)
    139c:	4413      	add	r3, r2
    139e:	6003      	str	r3, [r0, #0]
}
    13a0:	2000      	movs	r0, #0
    13a2:	4770      	bx	lr
    13a4:	2000004c 	.word	0x2000004c

000013a8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    13a8:	b508      	push	{r3, lr}
	_dmac_handler();
    13aa:	4b01      	ldr	r3, [pc, #4]	; (13b0 <DMAC_0_Handler+0x8>)
    13ac:	4798      	blx	r3
    13ae:	bd08      	pop	{r3, pc}
    13b0:	00001225 	.word	0x00001225

000013b4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    13b4:	b508      	push	{r3, lr}
	_dmac_handler();
    13b6:	4b01      	ldr	r3, [pc, #4]	; (13bc <DMAC_1_Handler+0x8>)
    13b8:	4798      	blx	r3
    13ba:	bd08      	pop	{r3, pc}
    13bc:	00001225 	.word	0x00001225

000013c0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    13c0:	b508      	push	{r3, lr}
	_dmac_handler();
    13c2:	4b01      	ldr	r3, [pc, #4]	; (13c8 <DMAC_2_Handler+0x8>)
    13c4:	4798      	blx	r3
    13c6:	bd08      	pop	{r3, pc}
    13c8:	00001225 	.word	0x00001225

000013cc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    13cc:	b508      	push	{r3, lr}
	_dmac_handler();
    13ce:	4b01      	ldr	r3, [pc, #4]	; (13d4 <DMAC_3_Handler+0x8>)
    13d0:	4798      	blx	r3
    13d2:	bd08      	pop	{r3, pc}
    13d4:	00001225 	.word	0x00001225

000013d8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    13d8:	b508      	push	{r3, lr}
	_dmac_handler();
    13da:	4b01      	ldr	r3, [pc, #4]	; (13e0 <DMAC_4_Handler+0x8>)
    13dc:	4798      	blx	r3
    13de:	bd08      	pop	{r3, pc}
    13e0:	00001225 	.word	0x00001225

000013e4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    13e4:	b570      	push	{r4, r5, r6, lr}
    13e6:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    13e8:	4b2a      	ldr	r3, [pc, #168]	; (1494 <_ext_irq_handler+0xb0>)
    13ea:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    13ec:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    13ee:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    13f0:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    13f2:	4b29      	ldr	r3, [pc, #164]	; (1498 <_ext_irq_handler+0xb4>)
    13f4:	6818      	ldr	r0, [r3, #0]
    13f6:	22ec      	movs	r2, #236	; 0xec
    13f8:	4928      	ldr	r1, [pc, #160]	; (149c <_ext_irq_handler+0xb8>)
    13fa:	3000      	adds	r0, #0
    13fc:	bf18      	it	ne
    13fe:	2001      	movne	r0, #1
    1400:	4b27      	ldr	r3, [pc, #156]	; (14a0 <_ext_irq_handler+0xbc>)
    1402:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1404:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1408:	e035      	b.n	1476 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    140a:	4b26      	ldr	r3, [pc, #152]	; (14a4 <_ext_irq_handler+0xc0>)
    140c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1410:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1412:	f1b5 3fff 	cmp.w	r5, #4294967295
    1416:	d003      	beq.n	1420 <_ext_irq_handler+0x3c>
				callback(pin);
    1418:	4b1f      	ldr	r3, [pc, #124]	; (1498 <_ext_irq_handler+0xb4>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	4628      	mov	r0, r5
    141e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1420:	2301      	movs	r3, #1
    1422:	40a3      	lsls	r3, r4
    1424:	9c01      	ldr	r4, [sp, #4]
    1426:	ea24 0403 	bic.w	r4, r4, r3
    142a:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    142c:	9b01      	ldr	r3, [sp, #4]
    142e:	fa93 f4a3 	rbit	r4, r3
    1432:	fab4 f484 	clz	r4, r4
    1436:	b90b      	cbnz	r3, 143c <_ext_irq_handler+0x58>
    1438:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    143c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1440:	d014      	beq.n	146c <_ext_irq_handler+0x88>
    1442:	2002      	movs	r0, #2
    1444:	2100      	movs	r1, #0
    1446:	e001      	b.n	144c <_ext_irq_handler+0x68>
					upper = middle - 1;
    1448:	3b01      	subs	r3, #1
    144a:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    144c:	4281      	cmp	r1, r0
    144e:	d8e0      	bhi.n	1412 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1450:	1843      	adds	r3, r0, r1
    1452:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1456:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1458:	4a12      	ldr	r2, [pc, #72]	; (14a4 <_ext_irq_handler+0xc0>)
    145a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    145e:	42a2      	cmp	r2, r4
    1460:	d0d3      	beq.n	140a <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1462:	42a2      	cmp	r2, r4
    1464:	daf0      	bge.n	1448 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1466:	3301      	adds	r3, #1
    1468:	b2d9      	uxtb	r1, r3
    146a:	e7ef      	b.n	144c <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    146c:	4b09      	ldr	r3, [pc, #36]	; (1494 <_ext_irq_handler+0xb0>)
    146e:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1470:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1472:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1474:	615a      	str	r2, [r3, #20]
	while (flags) {
    1476:	9b01      	ldr	r3, [sp, #4]
    1478:	b14b      	cbz	r3, 148e <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    147a:	9b01      	ldr	r3, [sp, #4]
    147c:	fa93 f4a3 	rbit	r4, r3
    1480:	fab4 f484 	clz	r4, r4
    1484:	2b00      	cmp	r3, #0
    1486:	d1d9      	bne.n	143c <_ext_irq_handler+0x58>
    1488:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    148c:	e7d6      	b.n	143c <_ext_irq_handler+0x58>
	}
}
    148e:	b002      	add	sp, #8
    1490:	bd70      	pop	{r4, r5, r6, pc}
    1492:	bf00      	nop
    1494:	40002800 	.word	0x40002800
    1498:	200001cc 	.word	0x200001cc
    149c:	000020f8 	.word	0x000020f8
    14a0:	00000fb5 	.word	0x00000fb5
    14a4:	000020e8 	.word	0x000020e8

000014a8 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    14a8:	4b31      	ldr	r3, [pc, #196]	; (1570 <_ext_irq_init+0xc8>)
    14aa:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    14ac:	f013 0f01 	tst.w	r3, #1
    14b0:	d120      	bne.n	14f4 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    14b2:	4b2f      	ldr	r3, [pc, #188]	; (1570 <_ext_irq_init+0xc8>)
    14b4:	685b      	ldr	r3, [r3, #4]
    14b6:	f013 0f03 	tst.w	r3, #3
    14ba:	d1fa      	bne.n	14b2 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    14bc:	4b2c      	ldr	r3, [pc, #176]	; (1570 <_ext_irq_init+0xc8>)
    14be:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    14c0:	f013 0f02 	tst.w	r3, #2
    14c4:	d00e      	beq.n	14e4 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    14c6:	4a2a      	ldr	r2, [pc, #168]	; (1570 <_ext_irq_init+0xc8>)
    14c8:	7813      	ldrb	r3, [r2, #0]
    14ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    14ce:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    14d0:	4b27      	ldr	r3, [pc, #156]	; (1570 <_ext_irq_init+0xc8>)
    14d2:	685b      	ldr	r3, [r3, #4]
    14d4:	f013 0f03 	tst.w	r3, #3
    14d8:	d1fa      	bne.n	14d0 <_ext_irq_init+0x28>
    14da:	4b25      	ldr	r3, [pc, #148]	; (1570 <_ext_irq_init+0xc8>)
    14dc:	685b      	ldr	r3, [r3, #4]
    14de:	f013 0f02 	tst.w	r3, #2
    14e2:	d1fa      	bne.n	14da <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    14e4:	2201      	movs	r2, #1
    14e6:	4b22      	ldr	r3, [pc, #136]	; (1570 <_ext_irq_init+0xc8>)
    14e8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    14ea:	4b21      	ldr	r3, [pc, #132]	; (1570 <_ext_irq_init+0xc8>)
    14ec:	685b      	ldr	r3, [r3, #4]
    14ee:	f013 0f03 	tst.w	r3, #3
    14f2:	d1fa      	bne.n	14ea <_ext_irq_init+0x42>
    14f4:	4b1e      	ldr	r3, [pc, #120]	; (1570 <_ext_irq_init+0xc8>)
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	f013 0f01 	tst.w	r3, #1
    14fc:	d1fa      	bne.n	14f4 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    14fe:	4a1c      	ldr	r2, [pc, #112]	; (1570 <_ext_irq_init+0xc8>)
    1500:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1502:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1506:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1508:	4b19      	ldr	r3, [pc, #100]	; (1570 <_ext_irq_init+0xc8>)
    150a:	685b      	ldr	r3, [r3, #4]
    150c:	f013 0f03 	tst.w	r3, #3
    1510:	d1fa      	bne.n	1508 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1512:	4b17      	ldr	r3, [pc, #92]	; (1570 <_ext_irq_init+0xc8>)
    1514:	2200      	movs	r2, #0
    1516:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1518:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    151a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    151c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    151e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1520:	f04f 413b 	mov.w	r1, #3137339392	; 0xbb000000
    1524:	61d9      	str	r1, [r3, #28]
    1526:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1528:	781a      	ldrb	r2, [r3, #0]
    152a:	f042 0202 	orr.w	r2, r2, #2
    152e:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1530:	4b0f      	ldr	r3, [pc, #60]	; (1570 <_ext_irq_init+0xc8>)
    1532:	685b      	ldr	r3, [r3, #4]
    1534:	f013 0f03 	tst.w	r3, #3
    1538:	d1fa      	bne.n	1530 <_ext_irq_init+0x88>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <_ext_irq_init+0xcc>)
    153c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1548:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    154c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1550:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1552:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    155a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    155e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1562:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1566:	601a      	str	r2, [r3, #0]
	callback = cb;
    1568:	4b03      	ldr	r3, [pc, #12]	; (1578 <_ext_irq_init+0xd0>)
    156a:	6018      	str	r0, [r3, #0]
}
    156c:	2000      	movs	r0, #0
    156e:	4770      	bx	lr
    1570:	40002800 	.word	0x40002800
    1574:	e000e100 	.word	0xe000e100
    1578:	200001cc 	.word	0x200001cc

0000157c <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    157c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    157e:	4b01      	ldr	r3, [pc, #4]	; (1584 <EIC_6_Handler+0x8>)
    1580:	4798      	blx	r3
    1582:	bd08      	pop	{r3, pc}
    1584:	000013e5 	.word	0x000013e5

00001588 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1588:	b508      	push	{r3, lr}
	_ext_irq_handler();
    158a:	4b01      	ldr	r3, [pc, #4]	; (1590 <EIC_7_Handler+0x8>)
    158c:	4798      	blx	r3
    158e:	bd08      	pop	{r3, pc}
    1590:	000013e5 	.word	0x000013e5

00001594 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1594:	f010 0f01 	tst.w	r0, #1
    1598:	d008      	beq.n	15ac <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    159a:	4a11      	ldr	r2, [pc, #68]	; (15e0 <_gclk_init_generators_by_fref+0x4c>)
    159c:	4b11      	ldr	r3, [pc, #68]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    159e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15a0:	4b10      	ldr	r3, [pc, #64]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    15a2:	685a      	ldr	r2, [r3, #4]
    15a4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    15a8:	421a      	tst	r2, r3
    15aa:	d1f9      	bne.n	15a0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    15ac:	f010 0f02 	tst.w	r0, #2
    15b0:	d008      	beq.n	15c4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15b2:	4a0d      	ldr	r2, [pc, #52]	; (15e8 <_gclk_init_generators_by_fref+0x54>)
    15b4:	4b0b      	ldr	r3, [pc, #44]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    15b6:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15b8:	4b0a      	ldr	r3, [pc, #40]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    15ba:	685a      	ldr	r2, [r3, #4]
    15bc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    15c0:	421a      	tst	r2, r3
    15c2:	d1f9      	bne.n	15b8 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    15c4:	f010 0f04 	tst.w	r0, #4
    15c8:	d008      	beq.n	15dc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15ca:	4a08      	ldr	r2, [pc, #32]	; (15ec <_gclk_init_generators_by_fref+0x58>)
    15cc:	4b05      	ldr	r3, [pc, #20]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    15ce:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15d0:	4b04      	ldr	r3, [pc, #16]	; (15e4 <_gclk_init_generators_by_fref+0x50>)
    15d2:	685a      	ldr	r2, [r3, #4]
    15d4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    15d8:	421a      	tst	r2, r3
    15da:	d1f9      	bne.n	15d0 <_gclk_init_generators_by_fref+0x3c>
    15dc:	4770      	bx	lr
    15de:	bf00      	nop
    15e0:	00010107 	.word	0x00010107
    15e4:	40001c00 	.word	0x40001c00
    15e8:	00010908 	.word	0x00010908
    15ec:	00010105 	.word	0x00010105

000015f0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    15f0:	2201      	movs	r2, #1
    15f2:	4b01      	ldr	r3, [pc, #4]	; (15f8 <_mclk_init+0x8>)
    15f4:	715a      	strb	r2, [r3, #5]
    15f6:	4770      	bx	lr
    15f8:	40000800 	.word	0x40000800

000015fc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <_osc32kctrl_init_sources+0x1c>)
    15fe:	f242 0286 	movw	r2, #8326	; 0x2086
    1602:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1604:	2200      	movs	r2, #0
    1606:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1608:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    160a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    160c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1610:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1612:	2201      	movs	r2, #1
    1614:	741a      	strb	r2, [r3, #16]
    1616:	4770      	bx	lr
    1618:	40001400 	.word	0x40001400

0000161c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    161c:	4770      	bx	lr
	...

00001620 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1620:	4a1d      	ldr	r2, [pc, #116]	; (1698 <_oscctrl_init_referenced_generators+0x78>)
    1622:	4b1e      	ldr	r3, [pc, #120]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1624:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1626:	4b1d      	ldr	r3, [pc, #116]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    162a:	f013 0f06 	tst.w	r3, #6
    162e:	d1fa      	bne.n	1626 <_oscctrl_init_referenced_generators+0x6>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1630:	4b1a      	ldr	r3, [pc, #104]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1632:	2220      	movs	r2, #32
    1634:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1636:	2202      	movs	r2, #2
    1638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    163c:	4b17      	ldr	r3, [pc, #92]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1640:	f013 0f02 	tst.w	r3, #2
    1644:	d1fa      	bne.n	163c <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1646:	4a14      	ldr	r2, [pc, #80]	; (1698 <_oscctrl_init_referenced_generators+0x78>)
    1648:	4b14      	ldr	r3, [pc, #80]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    164a:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    164c:	4b13      	ldr	r3, [pc, #76]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    164e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1650:	f013 0f06 	tst.w	r3, #6
    1654:	d1fa      	bne.n	164c <_oscctrl_init_referenced_generators+0x2c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1656:	4b11      	ldr	r3, [pc, #68]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1658:	2220      	movs	r2, #32
    165a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    165c:	2202      	movs	r2, #2
    165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1662:	4b0e      	ldr	r3, [pc, #56]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1666:	f013 0f02 	tst.w	r3, #2
    166a:	d1fa      	bne.n	1662 <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    166c:	4b0b      	ldr	r3, [pc, #44]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1670:	f013 0f01 	tst.w	r3, #1
    1674:	d104      	bne.n	1680 <_oscctrl_init_referenced_generators+0x60>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1676:	4b09      	ldr	r3, [pc, #36]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    167a:	f013 0f02 	tst.w	r3, #2
    167e:	d0f5      	beq.n	166c <_oscctrl_init_referenced_generators+0x4c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1680:	4b06      	ldr	r3, [pc, #24]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    1682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1684:	f013 0f01 	tst.w	r3, #1
    1688:	d104      	bne.n	1694 <_oscctrl_init_referenced_generators+0x74>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    168a:	4b04      	ldr	r3, [pc, #16]	; (169c <_oscctrl_init_referenced_generators+0x7c>)
    168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    168e:	f013 0f02 	tst.w	r3, #2
    1692:	d0f5      	beq.n	1680 <_oscctrl_init_referenced_generators+0x60>
    1694:	4770      	bx	lr
    1696:	bf00      	nop
    1698:	000d05b7 	.word	0x000d05b7
    169c:	40001000 	.word	0x40001000

000016a0 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    16a0:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    16a2:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    16a4:	6803      	ldr	r3, [r0, #0]
    16a6:	2100      	movs	r1, #0
    16a8:	4798      	blx	r3
    16aa:	bd08      	pop	{r3, pc}

000016ac <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    16ac:	b538      	push	{r3, r4, r5, lr}
    16ae:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    16b0:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    16b2:	4b07      	ldr	r3, [pc, #28]	; (16d0 <_camera_async_init+0x24>)
    16b4:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    16b6:	4b07      	ldr	r3, [pc, #28]	; (16d4 <_camera_async_init+0x28>)
    16b8:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    16ba:	4d07      	ldr	r5, [pc, #28]	; (16d8 <_camera_async_init+0x2c>)
    16bc:	2100      	movs	r1, #0
    16be:	4628      	mov	r0, r5
    16c0:	4b06      	ldr	r3, [pc, #24]	; (16dc <_camera_async_init+0x30>)
    16c2:	4798      	blx	r3
	resource->back                 = device;
    16c4:	682b      	ldr	r3, [r5, #0]
    16c6:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    16c8:	4a05      	ldr	r2, [pc, #20]	; (16e0 <_camera_async_init+0x34>)
    16ca:	601a      	str	r2, [r3, #0]
    16cc:	bd38      	pop	{r3, r4, r5, pc}
    16ce:	bf00      	nop
    16d0:	c0000020 	.word	0xc0000020
    16d4:	200001d0 	.word	0x200001d0
    16d8:	20000690 	.word	0x20000690
    16dc:	00001395 	.word	0x00001395
    16e0:	000016a1 	.word	0x000016a1

000016e4 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    16e4:	b500      	push	{lr}
    16e6:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    16e8:	4b08      	ldr	r3, [pc, #32]	; (170c <PCC_Handler+0x28>)
    16ea:	6818      	ldr	r0, [r3, #0]
    16ec:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    16ee:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    16f0:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    16f2:	2201      	movs	r2, #1
    16f4:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    16f6:	9b01      	ldr	r3, [sp, #4]
    16f8:	f013 0f01 	tst.w	r3, #1
    16fc:	d003      	beq.n	1706 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    16fe:	6803      	ldr	r3, [r0, #0]
    1700:	b10b      	cbz	r3, 1706 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1702:	2100      	movs	r1, #0
    1704:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    1706:	b003      	add	sp, #12
    1708:	f85d fb04 	ldr.w	pc, [sp], #4
    170c:	200001d0 	.word	0x200001d0

00001710 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1710:	b500      	push	{lr}
    1712:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1714:	4b0d      	ldr	r3, [pc, #52]	; (174c <RAMECC_Handler+0x3c>)
    1716:	789b      	ldrb	r3, [r3, #2]
    1718:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    171a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	f013 0f02 	tst.w	r3, #2
    1722:	d006      	beq.n	1732 <RAMECC_Handler+0x22>
    1724:	4b0a      	ldr	r3, [pc, #40]	; (1750 <RAMECC_Handler+0x40>)
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	b11b      	cbz	r3, 1732 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    172a:	4a08      	ldr	r2, [pc, #32]	; (174c <RAMECC_Handler+0x3c>)
    172c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    172e:	4798      	blx	r3
    1730:	e009      	b.n	1746 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1732:	9b01      	ldr	r3, [sp, #4]
    1734:	f013 0f01 	tst.w	r3, #1
    1738:	d005      	beq.n	1746 <RAMECC_Handler+0x36>
    173a:	4b05      	ldr	r3, [pc, #20]	; (1750 <RAMECC_Handler+0x40>)
    173c:	685b      	ldr	r3, [r3, #4]
    173e:	b113      	cbz	r3, 1746 <RAMECC_Handler+0x36>
    1740:	4a02      	ldr	r2, [pc, #8]	; (174c <RAMECC_Handler+0x3c>)
    1742:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1744:	4798      	blx	r3
	} else {
		return;
	}
}
    1746:	b003      	add	sp, #12
    1748:	f85d fb04 	ldr.w	pc, [sp], #4
    174c:	41020000 	.word	0x41020000
    1750:	20000694 	.word	0x20000694

00001754 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    1754:	b538      	push	{r3, r4, r5, lr}
    1756:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    1758:	4605      	mov	r5, r0
    175a:	b348      	cbz	r0, 17b0 <_mci_sync_init+0x5c>
    175c:	b331      	cbz	r1, 17ac <_mci_sync_init+0x58>
    175e:	2001      	movs	r0, #1
    1760:	22d8      	movs	r2, #216	; 0xd8
    1762:	4914      	ldr	r1, [pc, #80]	; (17b4 <_mci_sync_init+0x60>)
    1764:	4b14      	ldr	r3, [pc, #80]	; (17b8 <_mci_sync_init+0x64>)
    1766:	4798      	blx	r3

	mci_dev->hw = hw;
    1768:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    176a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    176e:	f043 0301 	orr.w	r3, r3, #1
    1772:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
    1776:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    177a:	f013 0f01 	tst.w	r3, #1
    177e:	d1fa      	bne.n	1776 <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    1780:	230e      	movs	r3, #14
    1782:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    1786:	230f      	movs	r3, #15
    1788:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
    178c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    178e:	b29b      	uxth	r3, r3
    1790:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1794:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1798:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
    179a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    179c:	b29b      	uxth	r3, r3
    179e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    17a2:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    17a6:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    17a8:	2000      	movs	r0, #0
    17aa:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    17ac:	2000      	movs	r0, #0
    17ae:	e7d7      	b.n	1760 <_mci_sync_init+0xc>
    17b0:	2000      	movs	r0, #0
    17b2:	e7d5      	b.n	1760 <_mci_sync_init+0xc>
    17b4:	00002110 	.word	0x00002110
    17b8:	00000fb5 	.word	0x00000fb5

000017bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    17bc:	b470      	push	{r4, r5, r6}
    17be:	b087      	sub	sp, #28
    17c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    17c2:	466c      	mov	r4, sp
    17c4:	4d0c      	ldr	r5, [pc, #48]	; (17f8 <_sercom_get_hardware_index+0x3c>)
    17c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    17c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    17ca:	e895 0003 	ldmia.w	r5, {r0, r1}
    17ce:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17d2:	2000      	movs	r0, #0
    17d4:	2805      	cmp	r0, #5
    17d6:	d80a      	bhi.n	17ee <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    17d8:	ab06      	add	r3, sp, #24
    17da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    17de:	f853 3c18 	ldr.w	r3, [r3, #-24]
    17e2:	42b3      	cmp	r3, r6
    17e4:	d001      	beq.n	17ea <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17e6:	3001      	adds	r0, #1
    17e8:	e7f4      	b.n	17d4 <_sercom_get_hardware_index+0x18>
			return i;
    17ea:	b2c0      	uxtb	r0, r0
    17ec:	e000      	b.n	17f0 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    17ee:	2000      	movs	r0, #0
}
    17f0:	b007      	add	sp, #28
    17f2:	bc70      	pop	{r4, r5, r6}
    17f4:	4770      	bx	lr
    17f6:	bf00      	nop
    17f8:	00002128 	.word	0x00002128

000017fc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    17fc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    17fe:	4b0c      	ldr	r3, [pc, #48]	; (1830 <_get_sercom_index+0x34>)
    1800:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1802:	2300      	movs	r3, #0
    1804:	b143      	cbz	r3, 1818 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1806:	f240 2247 	movw	r2, #583	; 0x247
    180a:	490a      	ldr	r1, [pc, #40]	; (1834 <_get_sercom_index+0x38>)
    180c:	2000      	movs	r0, #0
    180e:	4b0a      	ldr	r3, [pc, #40]	; (1838 <_get_sercom_index+0x3c>)
    1810:	4798      	blx	r3
	return 0;
    1812:	2300      	movs	r3, #0
}
    1814:	4618      	mov	r0, r3
    1816:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1818:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    181c:	00d1      	lsls	r1, r2, #3
    181e:	4a07      	ldr	r2, [pc, #28]	; (183c <_get_sercom_index+0x40>)
    1820:	440a      	add	r2, r1
    1822:	7e12      	ldrb	r2, [r2, #24]
    1824:	4290      	cmp	r0, r2
    1826:	d0f5      	beq.n	1814 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1828:	3301      	adds	r3, #1
    182a:	b2db      	uxtb	r3, r3
    182c:	e7ea      	b.n	1804 <_get_sercom_index+0x8>
    182e:	bf00      	nop
    1830:	000017bd 	.word	0x000017bd
    1834:	00002194 	.word	0x00002194
    1838:	00000fb5 	.word	0x00000fb5
    183c:	00002128 	.word	0x00002128

00001840 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1840:	b538      	push	{r3, r4, r5, lr}
    1842:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1844:	4b3c      	ldr	r3, [pc, #240]	; (1938 <_usart_init+0xf8>)
    1846:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1848:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    184a:	f013 0f01 	tst.w	r3, #1
    184e:	d122      	bne.n	1896 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1850:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1854:	00da      	lsls	r2, r3, #3
    1856:	4b39      	ldr	r3, [pc, #228]	; (193c <_usart_init+0xfc>)
    1858:	4413      	add	r3, r2
    185a:	69da      	ldr	r2, [r3, #28]
    185c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1860:	69e3      	ldr	r3, [r4, #28]
    1862:	f013 0f03 	tst.w	r3, #3
    1866:	d1fb      	bne.n	1860 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1868:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    186a:	f013 0f02 	tst.w	r3, #2
    186e:	d00b      	beq.n	1888 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	f023 0302 	bic.w	r3, r3, #2
    1876:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1878:	69e3      	ldr	r3, [r4, #28]
    187a:	f013 0f03 	tst.w	r3, #3
    187e:	d1fb      	bne.n	1878 <_usart_init+0x38>
    1880:	69e3      	ldr	r3, [r4, #28]
    1882:	f013 0f02 	tst.w	r3, #2
    1886:	d1fb      	bne.n	1880 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1888:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    188c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    188e:	69e3      	ldr	r3, [r4, #28]
    1890:	f013 0f03 	tst.w	r3, #3
    1894:	d1fb      	bne.n	188e <_usart_init+0x4e>
    1896:	69e3      	ldr	r3, [r4, #28]
    1898:	f013 0f01 	tst.w	r3, #1
    189c:	d1fb      	bne.n	1896 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    189e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    18a2:	00da      	lsls	r2, r3, #3
    18a4:	4b25      	ldr	r3, [pc, #148]	; (193c <_usart_init+0xfc>)
    18a6:	4413      	add	r3, r2
    18a8:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    18aa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18ac:	69e3      	ldr	r3, [r4, #28]
    18ae:	f013 0f03 	tst.w	r3, #3
    18b2:	d1fb      	bne.n	18ac <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    18b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    18b8:	00da      	lsls	r2, r3, #3
    18ba:	4b20      	ldr	r3, [pc, #128]	; (193c <_usart_init+0xfc>)
    18bc:	4413      	add	r3, r2
    18be:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    18c0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18c2:	69e3      	ldr	r3, [r4, #28]
    18c4:	f013 0f1f 	tst.w	r3, #31
    18c8:	d1fb      	bne.n	18c2 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    18ca:	0042      	lsls	r2, r0, #1
    18cc:	4402      	add	r2, r0
    18ce:	00d1      	lsls	r1, r2, #3
    18d0:	4b1a      	ldr	r3, [pc, #104]	; (193c <_usart_init+0xfc>)
    18d2:	440b      	add	r3, r1
    18d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    18d6:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    18d8:	69db      	ldr	r3, [r3, #28]
    18da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    18de:	d10a      	bne.n	18f6 <_usart_init+0xb6>
    18e0:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    18e4:	d107      	bne.n	18f6 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    18e6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    18ea:	00da      	lsls	r2, r3, #3
    18ec:	4b13      	ldr	r3, [pc, #76]	; (193c <_usart_init+0xfc>)
    18ee:	4413      	add	r3, r2
    18f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    18f2:	81a3      	strh	r3, [r4, #12]
    18f4:	e00f      	b.n	1916 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    18f6:	0042      	lsls	r2, r0, #1
    18f8:	4402      	add	r2, r0
    18fa:	00d1      	lsls	r1, r2, #3
    18fc:	4b0f      	ldr	r3, [pc, #60]	; (193c <_usart_init+0xfc>)
    18fe:	440b      	add	r3, r1
    1900:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1902:	89a2      	ldrh	r2, [r4, #12]
    1904:	f361 020c 	bfi	r2, r1, #0, #13
    1908:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    190a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    190e:	89a3      	ldrh	r3, [r4, #12]
    1910:	f362 334f 	bfi	r3, r2, #13, #3
    1914:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1916:	4a09      	ldr	r2, [pc, #36]	; (193c <_usart_init+0xfc>)
    1918:	0043      	lsls	r3, r0, #1
    191a:	181d      	adds	r5, r3, r0
    191c:	00e9      	lsls	r1, r5, #3
    191e:	460d      	mov	r5, r1
    1920:	4411      	add	r1, r2
    1922:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1926:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1928:	442a      	add	r2, r5
    192a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    192e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    1932:	2000      	movs	r0, #0
    1934:	bd38      	pop	{r3, r4, r5, pc}
    1936:	bf00      	nop
    1938:	000017fd 	.word	0x000017fd
    193c:	00002128 	.word	0x00002128

00001940 <_usart_sync_init>:
{
    1940:	b538      	push	{r3, r4, r5, lr}
    1942:	460c      	mov	r4, r1
	ASSERT(device);
    1944:	4605      	mov	r5, r0
    1946:	22bb      	movs	r2, #187	; 0xbb
    1948:	4905      	ldr	r1, [pc, #20]	; (1960 <_usart_sync_init+0x20>)
    194a:	3000      	adds	r0, #0
    194c:	bf18      	it	ne
    194e:	2001      	movne	r0, #1
    1950:	4b04      	ldr	r3, [pc, #16]	; (1964 <_usart_sync_init+0x24>)
    1952:	4798      	blx	r3
	device->hw = hw;
    1954:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1956:	4620      	mov	r0, r4
    1958:	4b03      	ldr	r3, [pc, #12]	; (1968 <_usart_sync_init+0x28>)
    195a:	4798      	blx	r3
}
    195c:	bd38      	pop	{r3, r4, r5, pc}
    195e:	bf00      	nop
    1960:	00002194 	.word	0x00002194
    1964:	00000fb5 	.word	0x00000fb5
    1968:	00001841 	.word	0x00001841

0000196c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    196c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    196e:	6299      	str	r1, [r3, #40]	; 0x28
    1970:	4770      	bx	lr

00001972 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1972:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1974:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1976:	b2c0      	uxtb	r0, r0
    1978:	4770      	bx	lr

0000197a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    197a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    197c:	7e18      	ldrb	r0, [r3, #24]
}
    197e:	f000 0001 	and.w	r0, r0, #1
    1982:	4770      	bx	lr

00001984 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1984:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1986:	7e18      	ldrb	r0, [r3, #24]
}
    1988:	f3c0 0040 	ubfx	r0, r0, #1, #1
    198c:	4770      	bx	lr

0000198e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    198e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1990:	7e18      	ldrb	r0, [r3, #24]
}
    1992:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1996:	4770      	bx	lr

00001998 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1998:	b570      	push	{r4, r5, r6, lr}
    199a:	4606      	mov	r6, r0
    199c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    199e:	4608      	mov	r0, r1
    19a0:	4b58      	ldr	r3, [pc, #352]	; (1b04 <_spi_m_sync_init+0x16c>)
    19a2:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    19a4:	2300      	movs	r3, #0
    19a6:	2b00      	cmp	r3, #0
    19a8:	d068      	beq.n	1a7c <_spi_m_sync_init+0xe4>
	return NULL;
    19aa:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    19ac:	2e00      	cmp	r6, #0
    19ae:	d070      	beq.n	1a92 <_spi_m_sync_init+0xfa>
    19b0:	2c00      	cmp	r4, #0
    19b2:	d06c      	beq.n	1a8e <_spi_m_sync_init+0xf6>
    19b4:	2001      	movs	r0, #1
    19b6:	f640 123f 	movw	r2, #2367	; 0x93f
    19ba:	4953      	ldr	r1, [pc, #332]	; (1b08 <_spi_m_sync_init+0x170>)
    19bc:	4b53      	ldr	r3, [pc, #332]	; (1b0c <_spi_m_sync_init+0x174>)
    19be:	4798      	blx	r3

	if (regs == NULL) {
    19c0:	2d00      	cmp	r5, #0
    19c2:	f000 809b 	beq.w	1afc <_spi_m_sync_init+0x164>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19c6:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19c8:	f013 0f01 	tst.w	r3, #1
    19cc:	d11d      	bne.n	1a0a <_spi_m_sync_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    19ce:	682b      	ldr	r3, [r5, #0]
    19d0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19d4:	69e3      	ldr	r3, [r4, #28]
    19d6:	f013 0f03 	tst.w	r3, #3
    19da:	d1fb      	bne.n	19d4 <_spi_m_sync_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19dc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19de:	f013 0f02 	tst.w	r3, #2
    19e2:	d00b      	beq.n	19fc <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19e4:	6823      	ldr	r3, [r4, #0]
    19e6:	f023 0302 	bic.w	r3, r3, #2
    19ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19ec:	69e3      	ldr	r3, [r4, #28]
    19ee:	f013 0f03 	tst.w	r3, #3
    19f2:	d1fb      	bne.n	19ec <_spi_m_sync_init+0x54>
    19f4:	69e3      	ldr	r3, [r4, #28]
    19f6:	f013 0f02 	tst.w	r3, #2
    19fa:	d1fb      	bne.n	19f4 <_spi_m_sync_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    19fc:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a00:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a02:	69e3      	ldr	r3, [r4, #28]
    1a04:	f013 0f03 	tst.w	r3, #3
    1a08:	d1fb      	bne.n	1a02 <_spi_m_sync_init+0x6a>
    1a0a:	69e3      	ldr	r3, [r4, #28]
    1a0c:	f013 0f01 	tst.w	r3, #1
    1a10:	d1fb      	bne.n	1a0a <_spi_m_sync_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1a12:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1a14:	682b      	ldr	r3, [r5, #0]
    1a16:	f003 031c 	and.w	r3, r3, #28
    1a1a:	2b08      	cmp	r3, #8
    1a1c:	d03b      	beq.n	1a96 <_spi_m_sync_init+0xfe>
	ASSERT(hw && regs);
    1a1e:	2c00      	cmp	r4, #0
    1a20:	d068      	beq.n	1af4 <_spi_m_sync_init+0x15c>
    1a22:	2d00      	cmp	r5, #0
    1a24:	d064      	beq.n	1af0 <_spi_m_sync_init+0x158>
    1a26:	2001      	movs	r0, #1
    1a28:	f640 1209 	movw	r2, #2313	; 0x909
    1a2c:	4936      	ldr	r1, [pc, #216]	; (1b08 <_spi_m_sync_init+0x170>)
    1a2e:	4b37      	ldr	r3, [pc, #220]	; (1b0c <_spi_m_sync_init+0x174>)
    1a30:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1a32:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1a34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1a38:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a3c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a3e:	69e3      	ldr	r3, [r4, #28]
    1a40:	f013 0f03 	tst.w	r3, #3
    1a44:	d1fb      	bne.n	1a3e <_spi_m_sync_init+0xa6>
	    (regs->ctrlb
    1a46:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1a48:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1a4c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a54:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a56:	69e3      	ldr	r3, [r4, #28]
    1a58:	f013 0f17 	tst.w	r3, #23
    1a5c:	d1fb      	bne.n	1a56 <_spi_m_sync_init+0xbe>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1a5e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a60:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1a62:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a64:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1a68:	686b      	ldr	r3, [r5, #4]
    1a6a:	f013 0f07 	tst.w	r3, #7
    1a6e:	d143      	bne.n	1af8 <_spi_m_sync_init+0x160>
    1a70:	2301      	movs	r3, #1
    1a72:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1a74:	89eb      	ldrh	r3, [r5, #14]
    1a76:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1a78:	2000      	movs	r0, #0
    1a7a:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1a7c:	b110      	cbz	r0, 1a84 <_spi_m_sync_init+0xec>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1a7e:	3301      	adds	r3, #1
    1a80:	b2db      	uxtb	r3, r3
    1a82:	e790      	b.n	19a6 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1a84:	eb03 1503 	add.w	r5, r3, r3, lsl #4
    1a88:	4b21      	ldr	r3, [pc, #132]	; (1b10 <_spi_m_sync_init+0x178>)
    1a8a:	441d      	add	r5, r3
    1a8c:	e78e      	b.n	19ac <_spi_m_sync_init+0x14>
	ASSERT(dev && hw);
    1a8e:	2000      	movs	r0, #0
    1a90:	e791      	b.n	19b6 <_spi_m_sync_init+0x1e>
    1a92:	2000      	movs	r0, #0
    1a94:	e78f      	b.n	19b6 <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
    1a96:	b34c      	cbz	r4, 1aec <_spi_m_sync_init+0x154>
    1a98:	b335      	cbz	r5, 1ae8 <_spi_m_sync_init+0x150>
    1a9a:	2001      	movs	r0, #1
    1a9c:	f640 121d 	movw	r2, #2333	; 0x91d
    1aa0:	4919      	ldr	r1, [pc, #100]	; (1b08 <_spi_m_sync_init+0x170>)
    1aa2:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <_spi_m_sync_init+0x174>)
    1aa4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1aa6:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1aa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1aac:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ab0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ab2:	69e3      	ldr	r3, [r4, #28]
    1ab4:	f013 0f03 	tst.w	r3, #3
    1ab8:	d1fb      	bne.n	1ab2 <_spi_m_sync_init+0x11a>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1aba:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1abc:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    1ac0:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    1ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1ac8:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1acc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ace:	69e3      	ldr	r3, [r4, #28]
    1ad0:	f013 0f17 	tst.w	r3, #23
    1ad4:	d1fb      	bne.n	1ace <_spi_m_sync_init+0x136>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1ad6:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1ad8:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1ada:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1adc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1ae0:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d1fc      	bne.n	1ae0 <_spi_m_sync_init+0x148>
    1ae6:	e7bf      	b.n	1a68 <_spi_m_sync_init+0xd0>
	ASSERT(hw && regs);
    1ae8:	2000      	movs	r0, #0
    1aea:	e7d7      	b.n	1a9c <_spi_m_sync_init+0x104>
    1aec:	2000      	movs	r0, #0
    1aee:	e7d5      	b.n	1a9c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    1af0:	2000      	movs	r0, #0
    1af2:	e799      	b.n	1a28 <_spi_m_sync_init+0x90>
    1af4:	2000      	movs	r0, #0
    1af6:	e797      	b.n	1a28 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1af8:	2302      	movs	r3, #2
    1afa:	e7ba      	b.n	1a72 <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    1afc:	f06f 000c 	mvn.w	r0, #12
}
    1b00:	bd70      	pop	{r4, r5, r6, pc}
    1b02:	bf00      	nop
    1b04:	000017bd 	.word	0x000017bd
    1b08:	00002194 	.word	0x00002194
    1b0c:	00000fb5 	.word	0x00000fb5
    1b10:	00002180 	.word	0x00002180

00001b14 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b16:	b087      	sub	sp, #28
    1b18:	4607      	mov	r7, r0
    1b1a:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
    1b1c:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1b1e:	680b      	ldr	r3, [r1, #0]
    1b20:	9301      	str	r3, [sp, #4]
    1b22:	684b      	ldr	r3, [r1, #4]
    1b24:	9302      	str	r3, [sp, #8]
    1b26:	2300      	movs	r3, #0
    1b28:	9303      	str	r3, [sp, #12]
    1b2a:	9304      	str	r3, [sp, #16]
    1b2c:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1b2e:	b1b8      	cbz	r0, 1b60 <_spi_m_sync_trans+0x4c>
    1b30:	b1a4      	cbz	r4, 1b5c <_spi_m_sync_trans+0x48>
    1b32:	2001      	movs	r0, #1
    1b34:	f640 22a3 	movw	r2, #2723	; 0xaa3
    1b38:	4934      	ldr	r1, [pc, #208]	; (1c0c <_spi_m_sync_trans+0xf8>)
    1b3a:	4b35      	ldr	r3, [pc, #212]	; (1c10 <_spi_m_sync_trans+0xfc>)
    1b3c:	4798      	blx	r3
    1b3e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1b40:	f013 0f07 	tst.w	r3, #7
    1b44:	d15f      	bne.n	1c06 <_spi_m_sync_trans+0xf2>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b46:	69e3      	ldr	r3, [r4, #28]
    1b48:	f013 0f03 	tst.w	r3, #3
    1b4c:	d1fb      	bne.n	1b46 <_spi_m_sync_trans+0x32>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1b4e:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1b50:	f013 0f02 	tst.w	r3, #2
    1b54:	d11e      	bne.n	1b94 <_spi_m_sync_trans+0x80>
		return ERR_NOT_INITIALIZED;
    1b56:	f06f 0013 	mvn.w	r0, #19
    1b5a:	e052      	b.n	1c02 <_spi_m_sync_trans+0xee>
	ASSERT(dev && hw);
    1b5c:	4618      	mov	r0, r3
    1b5e:	e7e9      	b.n	1b34 <_spi_m_sync_trans+0x20>
    1b60:	2000      	movs	r0, #0
    1b62:	e7e7      	b.n	1b34 <_spi_m_sync_trans+0x20>
		return false;
    1b64:	2200      	movs	r2, #0
    1b66:	e02b      	b.n	1bc0 <_spi_m_sync_trans+0xac>
			data |= (*ctrl->txbuf) << 8;
    1b68:	f891 e001 	ldrb.w	lr, [r1, #1]
    1b6c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			ctrl->txbuf++;
    1b70:	3102      	adds	r1, #2
    1b72:	9101      	str	r1, [sp, #4]
	ctrl->txcnt++;
    1b74:	3201      	adds	r2, #1
    1b76:	9203      	str	r2, [sp, #12]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1b78:	62a0      	str	r0, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1b7a:	f013 0f80 	tst.w	r3, #128	; 0x80
    1b7e:	d132      	bne.n	1be6 <_spi_m_sync_trans+0xd2>
	return ERR_NONE;
    1b80:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1b82:	2800      	cmp	r0, #0
    1b84:	db37      	blt.n	1bf6 <_spi_m_sync_trans+0xe2>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1b86:	9803      	ldr	r0, [sp, #12]
    1b88:	68ab      	ldr	r3, [r5, #8]
    1b8a:	4298      	cmp	r0, r3
    1b8c:	d302      	bcc.n	1b94 <_spi_m_sync_trans+0x80>
    1b8e:	9a04      	ldr	r2, [sp, #16]
    1b90:	4293      	cmp	r3, r2
    1b92:	d930      	bls.n	1bf6 <_spi_m_sync_trans+0xe2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1b94:	7e23      	ldrb	r3, [r4, #24]
    1b96:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1b98:	f013 0f04 	tst.w	r3, #4
    1b9c:	d0e2      	beq.n	1b64 <_spi_m_sync_trans+0x50>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1b9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1ba0:	9a02      	ldr	r2, [sp, #8]
    1ba2:	b14a      	cbz	r2, 1bb8 <_spi_m_sync_trans+0xa4>
		*ctrl->rxbuf++ = (uint8_t)data;
    1ba4:	1c50      	adds	r0, r2, #1
    1ba6:	9002      	str	r0, [sp, #8]
    1ba8:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1baa:	2e01      	cmp	r6, #1
    1bac:	d904      	bls.n	1bb8 <_spi_m_sync_trans+0xa4>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1bae:	1c90      	adds	r0, r2, #2
    1bb0:	9002      	str	r0, [sp, #8]
    1bb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1bb6:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1bb8:	9a04      	ldr	r2, [sp, #16]
    1bba:	3201      	adds	r2, #1
    1bbc:	9204      	str	r2, [sp, #16]
	return true;
    1bbe:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1bc0:	2a00      	cmp	r2, #0
    1bc2:	d1da      	bne.n	1b7a <_spi_m_sync_trans+0x66>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1bc4:	9a03      	ldr	r2, [sp, #12]
    1bc6:	9904      	ldr	r1, [sp, #16]
    1bc8:	4291      	cmp	r1, r2
    1bca:	d3d6      	bcc.n	1b7a <_spi_m_sync_trans+0x66>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1bcc:	88f8      	ldrh	r0, [r7, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1bce:	f013 0f01 	tst.w	r3, #1
    1bd2:	d0d2      	beq.n	1b7a <_spi_m_sync_trans+0x66>
	if (ctrl->txbuf) {
    1bd4:	9901      	ldr	r1, [sp, #4]
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d0cc      	beq.n	1b74 <_spi_m_sync_trans+0x60>
		data = *ctrl->txbuf++;
    1bda:	1c48      	adds	r0, r1, #1
    1bdc:	9001      	str	r0, [sp, #4]
    1bde:	7808      	ldrb	r0, [r1, #0]
		if (ctrl->char_size > 1) {
    1be0:	2e01      	cmp	r6, #1
    1be2:	d8c1      	bhi.n	1b68 <_spi_m_sync_trans+0x54>
    1be4:	e7c6      	b.n	1b74 <_spi_m_sync_trans+0x60>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1bea:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1bf0:	f06f 0012 	mvn.w	r0, #18
    1bf4:	e7c5      	b.n	1b82 <_spi_m_sync_trans+0x6e>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1bf6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1bf8:	f013 0f03 	tst.w	r3, #3
    1bfc:	d0fb      	beq.n	1bf6 <_spi_m_sync_trans+0xe2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1bfe:	2303      	movs	r3, #3
    1c00:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1c02:	b007      	add	sp, #28
    1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1c06:	f06f 0003 	mvn.w	r0, #3
    1c0a:	e7fa      	b.n	1c02 <_spi_m_sync_trans+0xee>
    1c0c:	00002194 	.word	0x00002194
    1c10:	00000fb5 	.word	0x00000fb5

00001c14 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1c14:	b538      	push	{r3, r4, r5, lr}
    1c16:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1c18:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c1a:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c1c:	f013 0f01 	tst.w	r3, #1
    1c20:	d004      	beq.n	1c2c <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c22:	2301      	movs	r3, #1
    1c24:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1c26:	6803      	ldr	r3, [r0, #0]
    1c28:	b103      	cbz	r3, 1c2c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1c2a:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1c2c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1c2e:	f013 0f02 	tst.w	r3, #2
    1c32:	d005      	beq.n	1c40 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1c34:	2302      	movs	r3, #2
    1c36:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1c38:	686b      	ldr	r3, [r5, #4]
    1c3a:	b10b      	cbz	r3, 1c40 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1c3c:	4628      	mov	r0, r5
    1c3e:	4798      	blx	r3
    1c40:	bd38      	pop	{r3, r4, r5, pc}
	...

00001c44 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1c44:	4b03      	ldr	r3, [pc, #12]	; (1c54 <_tc_init_irq_param+0x10>)
    1c46:	4298      	cmp	r0, r3
    1c48:	d000      	beq.n	1c4c <_tc_init_irq_param+0x8>
    1c4a:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    1c4c:	4b02      	ldr	r3, [pc, #8]	; (1c58 <_tc_init_irq_param+0x14>)
    1c4e:	6019      	str	r1, [r3, #0]
	}
}
    1c50:	e7fb      	b.n	1c4a <_tc_init_irq_param+0x6>
    1c52:	bf00      	nop
    1c54:	40003800 	.word	0x40003800
    1c58:	200001d4 	.word	0x200001d4

00001c5c <get_tc_index>:
{
    1c5c:	b570      	push	{r4, r5, r6, lr}
    1c5e:	b086      	sub	sp, #24
    1c60:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1c62:	466c      	mov	r4, sp
    1c64:	4d16      	ldr	r5, [pc, #88]	; (1cc0 <get_tc_index+0x64>)
    1c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c6a:	e895 0003 	ldmia.w	r5, {r0, r1}
    1c6e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c72:	2300      	movs	r3, #0
    1c74:	2b05      	cmp	r3, #5
    1c76:	d80a      	bhi.n	1c8e <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1c78:	aa06      	add	r2, sp, #24
    1c7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1c7e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    1c82:	42b2      	cmp	r2, r6
    1c84:	d001      	beq.n	1c8a <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1c86:	3301      	adds	r3, #1
    1c88:	e7f4      	b.n	1c74 <get_tc_index+0x18>
			return i;
    1c8a:	b2db      	uxtb	r3, r3
    1c8c:	e000      	b.n	1c90 <get_tc_index+0x34>
		}
	}
	return 0;
    1c8e:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1c90:	2200      	movs	r2, #0
    1c92:	b14a      	cbz	r2, 1ca8 <get_tc_index+0x4c>
	ASSERT(false);
    1c94:	f44f 72a9 	mov.w	r2, #338	; 0x152
    1c98:	490a      	ldr	r1, [pc, #40]	; (1cc4 <get_tc_index+0x68>)
    1c9a:	2000      	movs	r0, #0
    1c9c:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <get_tc_index+0x6c>)
    1c9e:	4798      	blx	r3
	return -1;
    1ca0:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ca4:	b006      	add	sp, #24
    1ca6:	bd70      	pop	{r4, r5, r6, pc}
		if (_tcs[i].number == index) {
    1ca8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    1cac:	0081      	lsls	r1, r0, #2
    1cae:	4807      	ldr	r0, [pc, #28]	; (1ccc <get_tc_index+0x70>)
    1cb0:	5c41      	ldrb	r1, [r0, r1]
    1cb2:	4299      	cmp	r1, r3
    1cb4:	d002      	beq.n	1cbc <get_tc_index+0x60>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1cb6:	3201      	adds	r2, #1
    1cb8:	b2d2      	uxtb	r2, r2
    1cba:	e7ea      	b.n	1c92 <get_tc_index+0x36>
			return i;
    1cbc:	b250      	sxtb	r0, r2
    1cbe:	e7f1      	b.n	1ca4 <get_tc_index+0x48>
    1cc0:	000021b0 	.word	0x000021b0
    1cc4:	000021c8 	.word	0x000021c8
    1cc8:	00000fb5 	.word	0x00000fb5
    1ccc:	20000000 	.word	0x20000000

00001cd0 <_pwm_init>:
{
    1cd0:	b570      	push	{r4, r5, r6, lr}
    1cd2:	4606      	mov	r6, r0
    1cd4:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    1cd6:	4608      	mov	r0, r1
    1cd8:	4b59      	ldr	r3, [pc, #356]	; (1e40 <_pwm_init+0x170>)
    1cda:	4798      	blx	r3
    1cdc:	4605      	mov	r5, r0
	device->hw = hw;
    1cde:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1ce0:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1ce2:	f013 0f01 	tst.w	r3, #1
    1ce6:	d119      	bne.n	1d1c <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ce8:	6923      	ldr	r3, [r4, #16]
    1cea:	f013 0f03 	tst.w	r3, #3
    1cee:	d1fb      	bne.n	1ce8 <_pwm_init+0x18>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1cf0:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1cf2:	f013 0f02 	tst.w	r3, #2
    1cf6:	d00b      	beq.n	1d10 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1cf8:	6823      	ldr	r3, [r4, #0]
    1cfa:	f023 0302 	bic.w	r3, r3, #2
    1cfe:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d00:	6923      	ldr	r3, [r4, #16]
    1d02:	f013 0f03 	tst.w	r3, #3
    1d06:	d1fb      	bne.n	1d00 <_pwm_init+0x30>
    1d08:	6923      	ldr	r3, [r4, #16]
    1d0a:	f013 0f02 	tst.w	r3, #2
    1d0e:	d1fb      	bne.n	1d08 <_pwm_init+0x38>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d10:	2301      	movs	r3, #1
    1d12:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d14:	6923      	ldr	r3, [r4, #16]
    1d16:	f013 0f03 	tst.w	r3, #3
    1d1a:	d1fb      	bne.n	1d14 <_pwm_init+0x44>
    1d1c:	6923      	ldr	r3, [r4, #16]
    1d1e:	f013 0f01 	tst.w	r3, #1
    1d22:	d1fb      	bne.n	1d1c <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1d24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d28:	009a      	lsls	r2, r3, #2
    1d2a:	4b46      	ldr	r3, [pc, #280]	; (1e44 <_pwm_init+0x174>)
    1d2c:	4413      	add	r3, r2
    1d2e:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d32:	6923      	ldr	r3, [r4, #16]
    1d34:	f013 0f03 	tst.w	r3, #3
    1d38:	d1fb      	bne.n	1d32 <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1d3a:	00aa      	lsls	r2, r5, #2
    1d3c:	442a      	add	r2, r5
    1d3e:	0091      	lsls	r1, r2, #2
    1d40:	4b40      	ldr	r3, [pc, #256]	; (1e44 <_pwm_init+0x174>)
    1d42:	440b      	add	r3, r1
    1d44:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1d46:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1d48:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1d4a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1d4c:	2203      	movs	r2, #3
    1d4e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1d50:	685b      	ldr	r3, [r3, #4]
    1d52:	f003 030c 	and.w	r3, r3, #12
    1d56:	2b08      	cmp	r3, #8
    1d58:	d059      	beq.n	1e0e <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d16b      	bne.n	1e36 <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1d5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d62:	009a      	lsls	r2, r3, #2
    1d64:	4b37      	ldr	r3, [pc, #220]	; (1e44 <_pwm_init+0x174>)
    1d66:	4413      	add	r3, r2
    1d68:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d6a:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d6c:	6923      	ldr	r3, [r4, #16]
    1d6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d72:	d1fb      	bne.n	1d6c <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1d74:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d78:	009a      	lsls	r2, r3, #2
    1d7a:	4b32      	ldr	r3, [pc, #200]	; (1e44 <_pwm_init+0x174>)
    1d7c:	4413      	add	r3, r2
    1d7e:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1d80:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d82:	6923      	ldr	r3, [r4, #16]
    1d84:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d88:	d1fb      	bne.n	1d82 <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    1d8a:	4631      	mov	r1, r6
    1d8c:	4620      	mov	r0, r4
    1d8e:	4b2e      	ldr	r3, [pc, #184]	; (1e48 <_pwm_init+0x178>)
    1d90:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1d92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d96:	009a      	lsls	r2, r3, #2
    1d98:	4b2a      	ldr	r3, [pc, #168]	; (1e44 <_pwm_init+0x174>)
    1d9a:	4413      	add	r3, r2
    1d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1da0:	2b00      	cmp	r3, #0
    1da2:	db0d      	blt.n	1dc0 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da4:	095a      	lsrs	r2, r3, #5
    1da6:	f003 031f 	and.w	r3, r3, #31
    1daa:	2101      	movs	r1, #1
    1dac:	fa01 f303 	lsl.w	r3, r1, r3
    1db0:	3220      	adds	r2, #32
    1db2:	4926      	ldr	r1, [pc, #152]	; (1e4c <_pwm_init+0x17c>)
    1db4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dbc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1dc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1dc4:	009a      	lsls	r2, r3, #2
    1dc6:	4b1f      	ldr	r3, [pc, #124]	; (1e44 <_pwm_init+0x174>)
    1dc8:	4413      	add	r3, r2
    1dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1dce:	2b00      	cmp	r3, #0
    1dd0:	db09      	blt.n	1de6 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dd2:	095a      	lsrs	r2, r3, #5
    1dd4:	f003 031f 	and.w	r3, r3, #31
    1dd8:	2101      	movs	r1, #1
    1dda:	fa01 f303 	lsl.w	r3, r1, r3
    1dde:	3260      	adds	r2, #96	; 0x60
    1de0:	491a      	ldr	r1, [pc, #104]	; (1e4c <_pwm_init+0x17c>)
    1de2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    1de6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1dea:	00aa      	lsls	r2, r5, #2
    1dec:	4b15      	ldr	r3, [pc, #84]	; (1e44 <_pwm_init+0x174>)
    1dee:	4413      	add	r3, r2
    1df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1df4:	2b00      	cmp	r3, #0
    1df6:	db21      	blt.n	1e3c <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1df8:	0959      	lsrs	r1, r3, #5
    1dfa:	f003 031f 	and.w	r3, r3, #31
    1dfe:	2201      	movs	r2, #1
    1e00:	fa02 f303 	lsl.w	r3, r2, r3
    1e04:	4a11      	ldr	r2, [pc, #68]	; (1e4c <_pwm_init+0x17c>)
    1e06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1e0a:	2000      	movs	r0, #0
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1e0e:	4b0d      	ldr	r3, [pc, #52]	; (1e44 <_pwm_init+0x174>)
    1e10:	440b      	add	r3, r1
    1e12:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1e14:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e16:	6923      	ldr	r3, [r4, #16]
    1e18:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e1c:	d1fb      	bne.n	1e16 <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1e1e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e22:	009a      	lsls	r2, r3, #2
    1e24:	4b07      	ldr	r3, [pc, #28]	; (1e44 <_pwm_init+0x174>)
    1e26:	4413      	add	r3, r2
    1e28:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1e2a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e2c:	6923      	ldr	r3, [r4, #16]
    1e2e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e32:	d1fb      	bne.n	1e2c <_pwm_init+0x15c>
    1e34:	e7a9      	b.n	1d8a <_pwm_init+0xba>
		return -1;
    1e36:	f04f 30ff 	mov.w	r0, #4294967295
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    1e3c:	2000      	movs	r0, #0
}
    1e3e:	bd70      	pop	{r4, r5, r6, pc}
    1e40:	00001c5d 	.word	0x00001c5d
    1e44:	20000000 	.word	0x20000000
    1e48:	00001c45 	.word	0x00001c45
    1e4c:	e000e100 	.word	0xe000e100

00001e50 <_tc_get_pwm>:
}
    1e50:	2000      	movs	r0, #0
    1e52:	4770      	bx	lr

00001e54 <TC0_Handler>:
{
    1e54:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    1e56:	4b02      	ldr	r3, [pc, #8]	; (1e60 <TC0_Handler+0xc>)
    1e58:	6818      	ldr	r0, [r3, #0]
    1e5a:	4b02      	ldr	r3, [pc, #8]	; (1e64 <TC0_Handler+0x10>)
    1e5c:	4798      	blx	r3
    1e5e:	bd08      	pop	{r3, pc}
    1e60:	200001d4 	.word	0x200001d4
    1e64:	00001c15 	.word	0x00001c15

00001e68 <I2C_BB_init>:
 */ 

#include "i2c_bb.h"

void I2C_BB_init(void)
{
    1e68:	4770      	bx	lr
	...

00001e6c <main>:
#include <atmel_start.h>

#include "i2c_bb.h"

int main(void)
{
    1e6c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1e6e:	4b02      	ldr	r3, [pc, #8]	; (1e78 <main+0xc>)
    1e70:	4798      	blx	r3

	// Sets up I2C Bitbang
	I2C_BB_init();
    1e72:	4b02      	ldr	r3, [pc, #8]	; (1e7c <main+0x10>)
    1e74:	4798      	blx	r3
    1e76:	e7fe      	b.n	1e76 <main+0xa>
    1e78:	000002d1 	.word	0x000002d1
    1e7c:	00001e69 	.word	0x00001e69

00001e80 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    1e80:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    1e82:	2300      	movs	r3, #0
    1e84:	b13b      	cbz	r3, 1e96 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    1e86:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <sd_mmc_init+0x28>)
    1e88:	24ff      	movs	r4, #255	; 0xff
    1e8a:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    1e8c:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    1e8e:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    1e90:	635a      	str	r2, [r3, #52]	; 0x34
}
    1e92:	bc30      	pop	{r4, r5}
    1e94:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1e96:	4c04      	ldr	r4, [pc, #16]	; (1ea8 <sd_mmc_init+0x28>)
    1e98:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    1e9c:	2504      	movs	r5, #4
    1e9e:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    1ea0:	3301      	adds	r3, #1
    1ea2:	b2db      	uxtb	r3, r3
    1ea4:	e7ee      	b.n	1e84 <sd_mmc_init+0x4>
    1ea6:	bf00      	nop
    1ea8:	200001d8 	.word	0x200001d8

00001eac <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    1eac:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    1eae:	4903      	ldr	r1, [pc, #12]	; (1ebc <sd_mmc_stack_init+0x10>)
    1eb0:	460a      	mov	r2, r1
    1eb2:	3104      	adds	r1, #4
    1eb4:	4802      	ldr	r0, [pc, #8]	; (1ec0 <sd_mmc_stack_init+0x14>)
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <sd_mmc_stack_init+0x18>)
    1eb8:	4798      	blx	r3
    1eba:	bd08      	pop	{r3, pc}
    1ebc:	20000014 	.word	0x20000014
    1ec0:	20000270 	.word	0x20000270
    1ec4:	00001e81 	.word	0x00001e81

00001ec8 <__libc_init_array>:
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	4e0d      	ldr	r6, [pc, #52]	; (1f00 <__libc_init_array+0x38>)
    1ecc:	4c0d      	ldr	r4, [pc, #52]	; (1f04 <__libc_init_array+0x3c>)
    1ece:	1ba4      	subs	r4, r4, r6
    1ed0:	10a4      	asrs	r4, r4, #2
    1ed2:	2500      	movs	r5, #0
    1ed4:	42a5      	cmp	r5, r4
    1ed6:	d109      	bne.n	1eec <__libc_init_array+0x24>
    1ed8:	4e0b      	ldr	r6, [pc, #44]	; (1f08 <__libc_init_array+0x40>)
    1eda:	4c0c      	ldr	r4, [pc, #48]	; (1f0c <__libc_init_array+0x44>)
    1edc:	f000 f97e 	bl	21dc <_init>
    1ee0:	1ba4      	subs	r4, r4, r6
    1ee2:	10a4      	asrs	r4, r4, #2
    1ee4:	2500      	movs	r5, #0
    1ee6:	42a5      	cmp	r5, r4
    1ee8:	d105      	bne.n	1ef6 <__libc_init_array+0x2e>
    1eea:	bd70      	pop	{r4, r5, r6, pc}
    1eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1ef0:	4798      	blx	r3
    1ef2:	3501      	adds	r5, #1
    1ef4:	e7ee      	b.n	1ed4 <__libc_init_array+0xc>
    1ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1efa:	4798      	blx	r3
    1efc:	3501      	adds	r5, #1
    1efe:	e7f2      	b.n	1ee6 <__libc_init_array+0x1e>
    1f00:	000021e8 	.word	0x000021e8
    1f04:	000021e8 	.word	0x000021e8
    1f08:	000021e8 	.word	0x000021e8
    1f0c:	000021ec 	.word	0x000021ec
    1f10:	682f2e2e 	.word	0x682f2e2e
    1f14:	732f6c61 	.word	0x732f6c61
    1f18:	682f6372 	.word	0x682f6372
    1f1c:	615f6c61 	.word	0x615f6c61
    1f20:	735f6364 	.word	0x735f6364
    1f24:	2e636e79 	.word	0x2e636e79
    1f28:	00000063 	.word	0x00000063
    1f2c:	682f2e2e 	.word	0x682f2e2e
    1f30:	732f6c61 	.word	0x732f6c61
    1f34:	682f6372 	.word	0x682f6372
    1f38:	635f6c61 	.word	0x635f6c61
    1f3c:	72656d61 	.word	0x72656d61
    1f40:	73615f61 	.word	0x73615f61
    1f44:	2e636e79 	.word	0x2e636e79
    1f48:	00000063 	.word	0x00000063
    1f4c:	682f2e2e 	.word	0x682f2e2e
    1f50:	732f6c61 	.word	0x732f6c61
    1f54:	682f6372 	.word	0x682f6372
    1f58:	6d5f6c61 	.word	0x6d5f6c61
    1f5c:	735f6963 	.word	0x735f6963
    1f60:	2e636e79 	.word	0x2e636e79
    1f64:	00000063 	.word	0x00000063
    1f68:	682f2e2e 	.word	0x682f2e2e
    1f6c:	732f6c61 	.word	0x732f6c61
    1f70:	682f6372 	.word	0x682f6372
    1f74:	705f6c61 	.word	0x705f6c61
    1f78:	632e6d77 	.word	0x632e6d77
    1f7c:	00000000 	.word	0x00000000
    1f80:	682f2e2e 	.word	0x682f2e2e
    1f84:	732f6c61 	.word	0x732f6c61
    1f88:	682f6372 	.word	0x682f6372
    1f8c:	735f6c61 	.word	0x735f6c61
    1f90:	6d5f6970 	.word	0x6d5f6970
    1f94:	6e79735f 	.word	0x6e79735f
    1f98:	00632e63 	.word	0x00632e63
    1f9c:	682f2e2e 	.word	0x682f2e2e
    1fa0:	732f6c61 	.word	0x732f6c61
    1fa4:	682f6372 	.word	0x682f6372
    1fa8:	755f6c61 	.word	0x755f6c61
    1fac:	74726173 	.word	0x74726173
    1fb0:	6e79735f 	.word	0x6e79735f
    1fb4:	00632e63 	.word	0x00632e63

00001fb8 <_adcs>:
    1fb8:	00000000 00000018 00001800 00000000     ................
	...
    1fd0:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    1fe0:	632e6364 00000000                       dc.c....

00001fe8 <_cfgs>:
    1fe8:	00205000 0a000000 00000000 00000000     .P .............
	...

000020e8 <_map>:
    20e8:	00000006 00000036 00000007 00000037     ....6.......7...
    20f8:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    2108:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    2118:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    2128:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    2138:	43000000 43000400                       ...C...C

00002140 <_usarts>:
    2140:	00000005 40100004 00030000 00700002     .......@......p.
    2150:	0000ff2e 00000000                       ........

00002158 <_i2cms>:
	...

00002170 <_i2css>:
	...

00002180 <sercomspi_regs>:
    2180:	0020000c 00020000 00000000 01ff00fe     .. .............
    2190:	00000000 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    21a0:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    21b0:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    21c0:	42001400 42001800 682f2e2e 742f6c70     ...B...B../hpl/t
    21d0:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

000021dc <_init>:
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21de:	bf00      	nop
    21e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21e2:	bc08      	pop	{r3}
    21e4:	469e      	mov	lr, r3
    21e6:	4770      	bx	lr

000021e8 <__init_array_start>:
    21e8:	00000289 	.word	0x00000289

000021ec <_fini>:
    21ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ee:	bf00      	nop
    21f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21f2:	bc08      	pop	{r3}
    21f4:	469e      	mov	lr, r3
    21f6:	4770      	bx	lr

000021f8 <__fini_array_start>:
    21f8:	00000265 	.word	0x00000265
