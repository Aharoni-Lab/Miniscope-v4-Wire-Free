
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000030  20000000  00002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020030  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020030  2**0
                  CONTENTS
  4 .bss          000286a4  20000030  000026d0  00020030  2**4
                  ALLOC
  5 .stack        00010004  200286d4  0002ad74  00020030  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003bb47  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005096  00000000  00000000  0005bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016f4b  00000000  00000000  00060c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001258  00000000  00000000  00077bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001328  00000000  00000000  00078e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032373  00000000  00000000  0007a15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d0d0  00000000  00000000  000ac4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100387  00000000  00000000  000c95a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003030  00000000  00000000  001c992c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 86 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 45 17 00 00     ............E...
      8c:	51 17 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     Q...............
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	71 15 00 00 7d 15 00 00 89 15 00 00 95 15 00 00     q...}...........
      cc:	a1 15 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	d9 18 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 41 22 00 00     ............A"..
     1f0:	55 22 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     U"..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 ad 18 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	00002698 	.word	0x00002698

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002698 	.word	0x00002698
     2c4:	20000034 	.word	0x20000034
     2c8:	00002698 	.word	0x00002698
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000a55 	.word	0x00000a55
     2e0:	00002311 	.word	0x00002311

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00002698 	.word	0x00002698
     348:	20000030 	.word	0x20000030
     34c:	20000030 	.word	0x20000030
     350:	200286d4 	.word	0x200286d4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	0000232d 	.word	0x0000232d
     360:	000022c5 	.word	0x000022c5

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002239 	.word	0x00002239
     394:	40003c00 	.word	0x40003c00
     398:	200002a0 	.word	0x200002a0
     39c:	00000fc9 	.word	0x00000fc9

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	20000260 	.word	0x20000260
     41c:	00000c6d 	.word	0x00000c6d

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b23      	ldr	r3, [pc, #140]	; (4b4 <EXTERNAL_IRQ_0_init+0x94>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a23      	ldr	r2, [pc, #140]	; (4b8 <EXTERNAL_IRQ_0_init+0x98>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b21      	ldr	r3, [pc, #132]	; (4bc <EXTERNAL_IRQ_0_init+0x9c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	4920      	ldr	r1, [pc, #128]	; (4c0 <EXTERNAL_IRQ_0_init+0xa0>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a1f      	ldr	r2, [pc, #124]	; (4c4 <EXTERNAL_IRQ_0_init+0xa4>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a12      	ldr	r2, [pc, #72]	; (4c8 <EXTERNAL_IRQ_0_init+0xa8>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	ext_irq_init();
     4ac:	4b07      	ldr	r3, [pc, #28]	; (4cc <EXTERNAL_IRQ_0_init+0xac>)
     4ae:	4798      	blx	r3
     4b0:	bd08      	pop	{r3, pc}
     4b2:	bf00      	nop
     4b4:	40001c00 	.word	0x40001c00
     4b8:	40000800 	.word	0x40000800
     4bc:	41008000 	.word	0x41008000
     4c0:	40020000 	.word	0x40020000
     4c4:	c0020040 	.word	0xc0020040
     4c8:	c0020080 	.word	0xc0020080
     4cc:	00000d41 	.word	0x00000d41

000004d0 <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4d0:	4b58      	ldr	r3, [pc, #352]	; (634 <CAMERA_0_PORT_init+0x164>)
     4d2:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4e2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4ea:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ee:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     502:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     506:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     50a:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     512:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     516:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     522:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     526:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     52a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     52e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     532:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     536:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     542:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     546:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     54a:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     552:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     562:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     566:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     572:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     586:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58a:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     592:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     596:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a2:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5aa:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ea:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     602:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     606:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     60a:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     612:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     626:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     632:	4770      	bx	lr
     634:	41008000 	.word	0x41008000

00000638 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     638:	4a02      	ldr	r2, [pc, #8]	; (644 <CAMERA_0_CLOCK_init+0xc>)
     63a:	6a13      	ldr	r3, [r2, #32]
     63c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     640:	6213      	str	r3, [r2, #32]
     642:	4770      	bx	lr
     644:	40000800 	.word	0x40000800

00000648 <CAMERA_0_init>:
{
     648:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     64a:	4b04      	ldr	r3, [pc, #16]	; (65c <CAMERA_0_init+0x14>)
     64c:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     64e:	4904      	ldr	r1, [pc, #16]	; (660 <CAMERA_0_init+0x18>)
     650:	4804      	ldr	r0, [pc, #16]	; (664 <CAMERA_0_init+0x1c>)
     652:	4b05      	ldr	r3, [pc, #20]	; (668 <CAMERA_0_init+0x20>)
     654:	4798      	blx	r3
	CAMERA_0_PORT_init();
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <CAMERA_0_init+0x24>)
     658:	4798      	blx	r3
     65a:	bd08      	pop	{r3, pc}
     65c:	00000639 	.word	0x00000639
     660:	43002c00 	.word	0x43002c00
     664:	2000024c 	.word	0x2000024c
     668:	00000cad 	.word	0x00000cad
     66c:	000004d1 	.word	0x000004d1

00000670 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     670:	4b28      	ldr	r3, [pc, #160]	; (714 <SPI_0_PORT_init+0xa4>)
     672:	2210      	movs	r2, #16
     674:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     676:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     678:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     67c:	629a      	str	r2, [r3, #40]	; 0x28
     67e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     682:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     684:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     694:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     698:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     69c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6a4:	2220      	movs	r2, #32
     6a6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6a8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6ae:	629a      	str	r2, [r3, #40]	; 0x28
     6b0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6d2:	2240      	movs	r2, #64	; 0x40
     6d4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6da:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     6de:	629a      	str	r2, [r3, #40]	; 0x28
     6e0:	4a0d      	ldr	r2, [pc, #52]	; (718 <SPI_0_PORT_init+0xa8>)
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     6e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     700:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     704:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     708:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     710:	4770      	bx	lr
     712:	bf00      	nop
     714:	41008000 	.word	0x41008000
     718:	c0020000 	.word	0xc0020000

0000071c <SPI_0_CLOCK_init>:
     71c:	4b06      	ldr	r3, [pc, #24]	; (738 <SPI_0_CLOCK_init+0x1c>)
     71e:	2240      	movs	r2, #64	; 0x40
     720:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     724:	2243      	movs	r2, #67	; 0x43
     726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72a:	4a04      	ldr	r2, [pc, #16]	; (73c <SPI_0_CLOCK_init+0x20>)
     72c:	6953      	ldr	r3, [r2, #20]
     72e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     732:	6153      	str	r3, [r2, #20]
     734:	4770      	bx	lr
     736:	bf00      	nop
     738:	40001c00 	.word	0x40001c00
     73c:	40000800 	.word	0x40000800

00000740 <SPI_0_init>:
{
     740:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     742:	4b04      	ldr	r3, [pc, #16]	; (754 <SPI_0_init+0x14>)
     744:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     746:	4904      	ldr	r1, [pc, #16]	; (758 <SPI_0_init+0x18>)
     748:	4804      	ldr	r0, [pc, #16]	; (75c <SPI_0_init+0x1c>)
     74a:	4b05      	ldr	r3, [pc, #20]	; (760 <SPI_0_init+0x20>)
     74c:	4798      	blx	r3
	SPI_0_PORT_init();
     74e:	4b05      	ldr	r3, [pc, #20]	; (764 <SPI_0_init+0x24>)
     750:	4798      	blx	r3
     752:	bd08      	pop	{r3, pc}
     754:	0000071d 	.word	0x0000071d
     758:	40003000 	.word	0x40003000
     75c:	20000264 	.word	0x20000264
     760:	00000e01 	.word	0x00000e01
     764:	00000671 	.word	0x00000671

00000768 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     768:	4b10      	ldr	r3, [pc, #64]	; (7ac <USART_0_PORT_init+0x44>)
     76a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     76e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     772:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     776:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     77a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     782:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     786:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78a:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     78e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     792:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     796:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     79a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     79e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7a2:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7a6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     7aa:	4770      	bx	lr
     7ac:	41008000 	.word	0x41008000

000007b0 <USART_0_CLOCK_init>:
     7b0:	4b06      	ldr	r3, [pc, #24]	; (7cc <USART_0_CLOCK_init+0x1c>)
     7b2:	2240      	movs	r2, #64	; 0x40
     7b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     7b8:	2243      	movs	r2, #67	; 0x43
     7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     7be:	4a04      	ldr	r2, [pc, #16]	; (7d0 <USART_0_CLOCK_init+0x20>)
     7c0:	6a13      	ldr	r3, [r2, #32]
     7c2:	f043 0302 	orr.w	r3, r3, #2
     7c6:	6213      	str	r3, [r2, #32]
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop
     7cc:	40001c00 	.word	0x40001c00
     7d0:	40000800 	.word	0x40000800

000007d4 <USART_0_init>:
{
     7d4:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     7d6:	4b05      	ldr	r3, [pc, #20]	; (7ec <USART_0_init+0x18>)
     7d8:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     7da:	2200      	movs	r2, #0
     7dc:	4904      	ldr	r1, [pc, #16]	; (7f0 <USART_0_init+0x1c>)
     7de:	4805      	ldr	r0, [pc, #20]	; (7f4 <USART_0_init+0x20>)
     7e0:	4b05      	ldr	r3, [pc, #20]	; (7f8 <USART_0_init+0x24>)
     7e2:	4798      	blx	r3
	USART_0_PORT_init();
     7e4:	4b05      	ldr	r3, [pc, #20]	; (7fc <USART_0_init+0x28>)
     7e6:	4798      	blx	r3
     7e8:	bd08      	pop	{r3, pc}
     7ea:	bf00      	nop
     7ec:	000007b1 	.word	0x000007b1
     7f0:	43000400 	.word	0x43000400
     7f4:	2000027c 	.word	0x2000027c
     7f8:	000010d5 	.word	0x000010d5
     7fc:	00000769 	.word	0x00000769

00000800 <IO_BUS_PORT_init>:
{
     800:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     802:	4b5b      	ldr	r3, [pc, #364]	; (970 <IO_BUS_PORT_init+0x170>)
     804:	f44f 6500 	mov.w	r5, #2048	; 0x800
     808:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     80c:	4e59      	ldr	r6, [pc, #356]	; (974 <IO_BUS_PORT_init+0x174>)
     80e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     812:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     816:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     81a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81e:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     822:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     826:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     82a:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     82e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     832:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     836:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     83a:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     83e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     842:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     846:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     84a:	f44f 7180 	mov.w	r1, #256	; 0x100
     84e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     850:	4849      	ldr	r0, [pc, #292]	; (978 <IO_BUS_PORT_init+0x178>)
     852:	6298      	str	r0, [r3, #40]	; 0x28
     854:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     856:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     858:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     85c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     860:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     864:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     868:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     86c:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     870:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     874:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     878:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     87c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     880:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     884:	f44f 7100 	mov.w	r1, #512	; 0x200
     888:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     88e:	6298      	str	r0, [r3, #40]	; 0x28
     890:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     892:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     894:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     898:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8a0:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a8:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ac:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8b0:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b4:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8bc:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
     8c4:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c6:	4c2d      	ldr	r4, [pc, #180]	; (97c <IO_BUS_PORT_init+0x17c>)
     8c8:	629c      	str	r4, [r3, #40]	; 0x28
     8ca:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8cc:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     8d2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     8d6:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8fa:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8fc:	629e      	str	r6, [r3, #40]	; 0x28
     8fe:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     902:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     906:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     90a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     90e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     912:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     916:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     91a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     91e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     922:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     926:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     92a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     932:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     936:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     93e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     942:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     946:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     94a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     94e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     952:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     956:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     95a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     95e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     962:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     966:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     96a:	bc70      	pop	{r4, r5, r6}
     96c:	4770      	bx	lr
     96e:	bf00      	nop
     970:	41008000 	.word	0x41008000
     974:	40000800 	.word	0x40000800
     978:	40000100 	.word	0x40000100
     97c:	40000400 	.word	0x40000400

00000980 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     980:	4a05      	ldr	r2, [pc, #20]	; (998 <IO_BUS_CLOCK_init+0x18>)
     982:	6913      	ldr	r3, [r2, #16]
     984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     988:	6113      	str	r3, [r2, #16]
     98a:	4b04      	ldr	r3, [pc, #16]	; (99c <IO_BUS_CLOCK_init+0x1c>)
     98c:	2240      	movs	r2, #64	; 0x40
     98e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     996:	4770      	bx	lr
     998:	40000800 	.word	0x40000800
     99c:	40001c00 	.word	0x40001c00

000009a0 <IO_BUS_init>:
{
     9a0:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <IO_BUS_init+0x18>)
     9a4:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     9a6:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     9aa:	4804      	ldr	r0, [pc, #16]	; (9bc <IO_BUS_init+0x1c>)
     9ac:	4b04      	ldr	r3, [pc, #16]	; (9c0 <IO_BUS_init+0x20>)
     9ae:	4798      	blx	r3
	IO_BUS_PORT_init();
     9b0:	4b04      	ldr	r3, [pc, #16]	; (9c4 <IO_BUS_init+0x24>)
     9b2:	4798      	blx	r3
     9b4:	bd08      	pop	{r3, pc}
     9b6:	bf00      	nop
     9b8:	00000981 	.word	0x00000981
     9bc:	20000288 	.word	0x20000288
     9c0:	00000d75 	.word	0x00000d75
     9c4:	00000801 	.word	0x00000801

000009c8 <delay_driver_init>:
{
     9c8:	b508      	push	{r3, lr}
	delay_init(SysTick);
     9ca:	4802      	ldr	r0, [pc, #8]	; (9d4 <delay_driver_init+0xc>)
     9cc:	4b02      	ldr	r3, [pc, #8]	; (9d8 <delay_driver_init+0x10>)
     9ce:	4798      	blx	r3
     9d0:	bd08      	pop	{r3, pc}
     9d2:	bf00      	nop
     9d4:	e000e010 	.word	0xe000e010
     9d8:	00000ce9 	.word	0x00000ce9

000009dc <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9dc:	4a08      	ldr	r2, [pc, #32]	; (a00 <PWM_0_PORT_init+0x24>)
     9de:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     9e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9e6:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9ea:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9ee:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9f6:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9fa:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     9fe:	4770      	bx	lr
     a00:	41008000 	.word	0x41008000

00000a04 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     a04:	4a04      	ldr	r2, [pc, #16]	; (a18 <PWM_0_CLOCK_init+0x14>)
     a06:	6953      	ldr	r3, [r2, #20]
     a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a0c:	6153      	str	r3, [r2, #20]
     a0e:	2240      	movs	r2, #64	; 0x40
     a10:	4b02      	ldr	r3, [pc, #8]	; (a1c <PWM_0_CLOCK_init+0x18>)
     a12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     a16:	4770      	bx	lr
     a18:	40000800 	.word	0x40000800
     a1c:	40001c00 	.word	0x40001c00

00000a20 <PWM_0_init>:
{
     a20:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <PWM_0_init+0x1c>)
     a24:	4798      	blx	r3
	PWM_0_PORT_init();
     a26:	4b06      	ldr	r3, [pc, #24]	; (a40 <PWM_0_init+0x20>)
     a28:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     a2a:	4b06      	ldr	r3, [pc, #24]	; (a44 <PWM_0_init+0x24>)
     a2c:	4798      	blx	r3
     a2e:	4602      	mov	r2, r0
     a30:	4905      	ldr	r1, [pc, #20]	; (a48 <PWM_0_init+0x28>)
     a32:	4806      	ldr	r0, [pc, #24]	; (a4c <PWM_0_init+0x2c>)
     a34:	4b06      	ldr	r3, [pc, #24]	; (a50 <PWM_0_init+0x30>)
     a36:	4798      	blx	r3
     a38:	bd08      	pop	{r3, pc}
     a3a:	bf00      	nop
     a3c:	00000a05 	.word	0x00000a05
     a40:	000009dd 	.word	0x000009dd
     a44:	0000223d 	.word	0x0000223d
     a48:	40003800 	.word	0x40003800
     a4c:	20000230 	.word	0x20000230
     a50:	00000dbd 	.word	0x00000dbd

00000a54 <system_init>:
}

void system_init(void)
{
     a54:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     a56:	4b76      	ldr	r3, [pc, #472]	; (c30 <system_init+0x1dc>)
     a58:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a5a:	4b76      	ldr	r3, [pc, #472]	; (c34 <system_init+0x1e0>)
     a5c:	2280      	movs	r2, #128	; 0x80
     a5e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     a64:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     a68:	629a      	str	r2, [r3, #40]	; 0x28
     a6a:	4d73      	ldr	r5, [pc, #460]	; (c38 <system_init+0x1e4>)
     a6c:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a6e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     a72:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     a76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a7a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a8a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a8c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a8e:	4c6b      	ldr	r4, [pc, #428]	; (c3c <system_init+0x1e8>)
     a90:	629c      	str	r4, [r3, #40]	; 0x28
     a92:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     a96:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a98:	f893 004f 	ldrb.w	r0, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a9c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa0:	f883 004f 	strb.w	r0, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aa4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     aa8:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     aaa:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     ab0:	6298      	str	r0, [r3, #40]	; 0x28
     ab2:	4863      	ldr	r0, [pc, #396]	; (c40 <system_init+0x1ec>)
     ab4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ab6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     abe:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ac2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
     ac6:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ac8:	485e      	ldr	r0, [pc, #376]	; (c44 <system_init+0x1f0>)
     aca:	6298      	str	r0, [r3, #40]	; 0x28
     acc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
     ad0:	f500 7000 	add.w	r0, r0, #512	; 0x200
     ad4:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ad6:	f893 0059 	ldrb.w	r0, [r3, #89]	; 0x59
     ada:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     ade:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae2:	f893 0059 	ldrb.w	r0, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aea:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aee:	2001      	movs	r0, #1
     af0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     af8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     afc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b00:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b04:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     b08:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0c:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b10:	2004      	movs	r0, #4
     b12:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b16:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b1e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b26:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b2a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b2e:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b32:	2020      	movs	r0, #32
     b34:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b38:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b3c:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
     b40:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b44:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b48:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b4c:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b50:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b54:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b58:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5c:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b60:	f44f 7000 	mov.w	r0, #512	; 0x200
     b64:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b68:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b70:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b78:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b80:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b88:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b90:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b94:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9c:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba4:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     bac:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bb0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bb4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     bb8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     bbc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc0:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     bc4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bc8:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bcc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bd0:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bd4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bdc:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     be0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     be4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     be8:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bf0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bf4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bf8:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bfc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c00:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c04:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <system_init+0x1f4>)
     c0a:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <system_init+0x1f8>)
     c0e:	4798      	blx	r3

	CAMERA_0_init();
     c10:	4b0f      	ldr	r3, [pc, #60]	; (c50 <system_init+0x1fc>)
     c12:	4798      	blx	r3

	SPI_0_init();
     c14:	4b0f      	ldr	r3, [pc, #60]	; (c54 <system_init+0x200>)
     c16:	4798      	blx	r3

	USART_0_init();
     c18:	4b0f      	ldr	r3, [pc, #60]	; (c58 <system_init+0x204>)
     c1a:	4798      	blx	r3

	IO_BUS_init();
     c1c:	4b0f      	ldr	r3, [pc, #60]	; (c5c <system_init+0x208>)
     c1e:	4798      	blx	r3

	delay_driver_init();
     c20:	4b0f      	ldr	r3, [pc, #60]	; (c60 <system_init+0x20c>)
     c22:	4798      	blx	r3

	PWM_0_init();
     c24:	4b0f      	ldr	r3, [pc, #60]	; (c64 <system_init+0x210>)
     c26:	4798      	blx	r3

	TIMER_0_init();
     c28:	4b0f      	ldr	r3, [pc, #60]	; (c68 <system_init+0x214>)
     c2a:	4798      	blx	r3
     c2c:	bd38      	pop	{r3, r4, r5, pc}
     c2e:	bf00      	nop
     c30:	00001399 	.word	0x00001399
     c34:	41008000 	.word	0x41008000
     c38:	c0020000 	.word	0xc0020000
     c3c:	40008000 	.word	0x40008000
     c40:	c0000100 	.word	0xc0000100
     c44:	40020000 	.word	0x40020000
     c48:	000003f5 	.word	0x000003f5
     c4c:	00000421 	.word	0x00000421
     c50:	00000649 	.word	0x00000649
     c54:	00000741 	.word	0x00000741
     c58:	000007d5 	.word	0x000007d5
     c5c:	000009a1 	.word	0x000009a1
     c60:	000009c9 	.word	0x000009c9
     c64:	00000a21 	.word	0x00000a21
     c68:	00000365 	.word	0x00000365

00000c6c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c6c:	b538      	push	{r3, r4, r5, lr}
     c6e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c70:	4605      	mov	r5, r0
     c72:	b160      	cbz	r0, c8e <adc_sync_init+0x22>
     c74:	b149      	cbz	r1, c8a <adc_sync_init+0x1e>
     c76:	2001      	movs	r0, #1
     c78:	2239      	movs	r2, #57	; 0x39
     c7a:	4906      	ldr	r1, [pc, #24]	; (c94 <adc_sync_init+0x28>)
     c7c:	4b06      	ldr	r3, [pc, #24]	; (c98 <adc_sync_init+0x2c>)
     c7e:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c80:	4621      	mov	r1, r4
     c82:	4628      	mov	r0, r5
     c84:	4b05      	ldr	r3, [pc, #20]	; (c9c <adc_sync_init+0x30>)
     c86:	4798      	blx	r3
}
     c88:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c8a:	2000      	movs	r0, #0
     c8c:	e7f4      	b.n	c78 <adc_sync_init+0xc>
     c8e:	2000      	movs	r0, #0
     c90:	e7f2      	b.n	c78 <adc_sync_init+0xc>
     c92:	bf00      	nop
     c94:	00002374 	.word	0x00002374
     c98:	00001121 	.word	0x00001121
     c9c:	00001361 	.word	0x00001361

00000ca0 <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     ca0:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     ca2:	6903      	ldr	r3, [r0, #16]
     ca4:	b103      	cbz	r3, ca8 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     ca6:	4798      	blx	r3
     ca8:	bd08      	pop	{r3, pc}
	...

00000cac <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     cac:	b538      	push	{r3, r4, r5, lr}
     cae:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cb0:	4604      	mov	r4, r0
     cb2:	b178      	cbz	r0, cd4 <camera_async_init+0x28>
     cb4:	b161      	cbz	r1, cd0 <camera_async_init+0x24>
     cb6:	2001      	movs	r0, #1
     cb8:	2232      	movs	r2, #50	; 0x32
     cba:	4907      	ldr	r1, [pc, #28]	; (cd8 <camera_async_init+0x2c>)
     cbc:	4b07      	ldr	r3, [pc, #28]	; (cdc <camera_async_init+0x30>)
     cbe:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     cc0:	4629      	mov	r1, r5
     cc2:	4620      	mov	r0, r4
     cc4:	4b06      	ldr	r3, [pc, #24]	; (ce0 <camera_async_init+0x34>)
     cc6:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <camera_async_init+0x38>)
     cca:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     ccc:	2000      	movs	r0, #0
     cce:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     cd0:	2000      	movs	r0, #0
     cd2:	e7f1      	b.n	cb8 <camera_async_init+0xc>
     cd4:	2000      	movs	r0, #0
     cd6:	e7ef      	b.n	cb8 <camera_async_init+0xc>
     cd8:	00002390 	.word	0x00002390
     cdc:	00001121 	.word	0x00001121
     ce0:	00001875 	.word	0x00001875
     ce4:	00000ca1 	.word	0x00000ca1

00000ce8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ce8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <delay_init+0xc>)
     cec:	6018      	str	r0, [r3, #0]
     cee:	4b02      	ldr	r3, [pc, #8]	; (cf8 <delay_init+0x10>)
     cf0:	4798      	blx	r3
     cf2:	bd08      	pop	{r3, pc}
     cf4:	2000004c 	.word	0x2000004c
     cf8:	00001df1 	.word	0x00001df1

00000cfc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     cfc:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     cfe:	2502      	movs	r5, #2
     d00:	2400      	movs	r4, #0

	while (upper >= lower) {
     d02:	e007      	b.n	d14 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     d04:	4a0d      	ldr	r2, [pc, #52]	; (d3c <process_ext_irq+0x40>)
     d06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     d0a:	b1b3      	cbz	r3, d3a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     d0c:	4798      	blx	r3
     d0e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     d10:	3a01      	subs	r2, #1
     d12:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     d14:	42ac      	cmp	r4, r5
     d16:	d810      	bhi.n	d3a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     d18:	192b      	adds	r3, r5, r4
     d1a:	105b      	asrs	r3, r3, #1
     d1c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     d1e:	2a01      	cmp	r2, #1
     d20:	d80b      	bhi.n	d3a <process_ext_irq+0x3e>
     d22:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     d24:	4905      	ldr	r1, [pc, #20]	; (d3c <process_ext_irq+0x40>)
     d26:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     d2a:	6849      	ldr	r1, [r1, #4]
     d2c:	4281      	cmp	r1, r0
     d2e:	d0e9      	beq.n	d04 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     d30:	4281      	cmp	r1, r0
     d32:	d2ed      	bcs.n	d10 <process_ext_irq+0x14>
			lower = middle + 1;
     d34:	3201      	adds	r2, #1
     d36:	b2d4      	uxtb	r4, r2
     d38:	e7ec      	b.n	d14 <process_ext_irq+0x18>
     d3a:	bd38      	pop	{r3, r4, r5, pc}
     d3c:	20000050 	.word	0x20000050

00000d40 <ext_irq_init>:
{
     d40:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d42:	2300      	movs	r3, #0
     d44:	e00a      	b.n	d5c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     d46:	4a08      	ldr	r2, [pc, #32]	; (d68 <ext_irq_init+0x28>)
     d48:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     d4c:	f04f 30ff 	mov.w	r0, #4294967295
     d50:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     d52:	2100      	movs	r1, #0
     d54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d58:	3301      	adds	r3, #1
     d5a:	b29b      	uxth	r3, r3
     d5c:	2b01      	cmp	r3, #1
     d5e:	d9f2      	bls.n	d46 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     d60:	4802      	ldr	r0, [pc, #8]	; (d6c <ext_irq_init+0x2c>)
     d62:	4b03      	ldr	r3, [pc, #12]	; (d70 <ext_irq_init+0x30>)
     d64:	4798      	blx	r3
}
     d66:	bd08      	pop	{r3, pc}
     d68:	20000050 	.word	0x20000050
     d6c:	00000cfd 	.word	0x00000cfd
     d70:	00001671 	.word	0x00001671

00000d74 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     d74:	b538      	push	{r3, r4, r5, lr}
     d76:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     d78:	4605      	mov	r5, r0
     d7a:	b160      	cbz	r0, d96 <mci_sync_init+0x22>
     d7c:	b149      	cbz	r1, d92 <mci_sync_init+0x1e>
     d7e:	2001      	movs	r0, #1
     d80:	2231      	movs	r2, #49	; 0x31
     d82:	4906      	ldr	r1, [pc, #24]	; (d9c <mci_sync_init+0x28>)
     d84:	4b06      	ldr	r3, [pc, #24]	; (da0 <mci_sync_init+0x2c>)
     d86:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     d88:	4621      	mov	r1, r4
     d8a:	4628      	mov	r0, r5
     d8c:	4b05      	ldr	r3, [pc, #20]	; (da4 <mci_sync_init+0x30>)
     d8e:	4798      	blx	r3
}
     d90:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     d92:	2000      	movs	r0, #0
     d94:	e7f4      	b.n	d80 <mci_sync_init+0xc>
     d96:	2000      	movs	r0, #0
     d98:	e7f2      	b.n	d80 <mci_sync_init+0xc>
     d9a:	bf00      	nop
     d9c:	000023b0 	.word	0x000023b0
     da0:	00001121 	.word	0x00001121
     da4:	0000191d 	.word	0x0000191d

00000da8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     da8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     daa:	6943      	ldr	r3, [r0, #20]
     dac:	b103      	cbz	r3, db0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     dae:	4798      	blx	r3
     db0:	bd08      	pop	{r3, pc}

00000db2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     db2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     db4:	6983      	ldr	r3, [r0, #24]
     db6:	b103      	cbz	r3, dba <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     db8:	4798      	blx	r3
     dba:	bd08      	pop	{r3, pc}

00000dbc <pwm_init>:
{
     dbc:	b538      	push	{r3, r4, r5, lr}
     dbe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     dc0:	4604      	mov	r4, r0
     dc2:	b188      	cbz	r0, de8 <pwm_init+0x2c>
     dc4:	b171      	cbz	r1, de4 <pwm_init+0x28>
     dc6:	2001      	movs	r0, #1
     dc8:	2233      	movs	r2, #51	; 0x33
     dca:	4908      	ldr	r1, [pc, #32]	; (dec <pwm_init+0x30>)
     dcc:	4b08      	ldr	r3, [pc, #32]	; (df0 <pwm_init+0x34>)
     dce:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     dd0:	4629      	mov	r1, r5
     dd2:	4620      	mov	r0, r4
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <pwm_init+0x38>)
     dd6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <pwm_init+0x3c>)
     dda:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     ddc:	4b07      	ldr	r3, [pc, #28]	; (dfc <pwm_init+0x40>)
     dde:	6063      	str	r3, [r4, #4]
}
     de0:	2000      	movs	r0, #0
     de2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     de4:	2000      	movs	r0, #0
     de6:	e7ef      	b.n	dc8 <pwm_init+0xc>
     de8:	2000      	movs	r0, #0
     dea:	e7ed      	b.n	dc8 <pwm_init+0xc>
     dec:	000023cc 	.word	0x000023cc
     df0:	00001121 	.word	0x00001121
     df4:	000020b9 	.word	0x000020b9
     df8:	00000da9 	.word	0x00000da9
     dfc:	00000db3 	.word	0x00000db3

00000e00 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     e04:	4604      	mov	r4, r0
     e06:	b1c0      	cbz	r0, e3a <spi_m_sync_init+0x3a>
     e08:	b1a9      	cbz	r1, e36 <spi_m_sync_init+0x36>
     e0a:	2001      	movs	r0, #1
     e0c:	2240      	movs	r2, #64	; 0x40
     e0e:	490c      	ldr	r1, [pc, #48]	; (e40 <spi_m_sync_init+0x40>)
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <spi_m_sync_init+0x44>)
     e12:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     e14:	4620      	mov	r0, r4
     e16:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     e1a:	4629      	mov	r1, r5
     e1c:	4b0a      	ldr	r3, [pc, #40]	; (e48 <spi_m_sync_init+0x48>)
     e1e:	4798      	blx	r3

	if (rc < 0) {
     e20:	2800      	cmp	r0, #0
     e22:	db07      	blt.n	e34 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     e28:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     e2a:	4b08      	ldr	r3, [pc, #32]	; (e4c <spi_m_sync_init+0x4c>)
     e2c:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     e2e:	4b08      	ldr	r3, [pc, #32]	; (e50 <spi_m_sync_init+0x50>)
     e30:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     e32:	2000      	movs	r0, #0
}
     e34:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
     e36:	2000      	movs	r0, #0
     e38:	e7e8      	b.n	e0c <spi_m_sync_init+0xc>
     e3a:	2000      	movs	r0, #0
     e3c:	e7e6      	b.n	e0c <spi_m_sync_init+0xc>
     e3e:	bf00      	nop
     e40:	000023e4 	.word	0x000023e4
     e44:	00001121 	.word	0x00001121
     e48:	00001b61 	.word	0x00001b61
     e4c:	00000ed5 	.word	0x00000ed5
     e50:	00000e99 	.word	0x00000e99

00000e54 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     e54:	b530      	push	{r4, r5, lr}
     e56:	b085      	sub	sp, #20
     e58:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     e5a:	4605      	mov	r5, r0
     e5c:	b198      	cbz	r0, e86 <spi_m_sync_transfer+0x32>
     e5e:	b181      	cbz	r1, e82 <spi_m_sync_transfer+0x2e>
     e60:	2001      	movs	r0, #1
     e62:	22b3      	movs	r2, #179	; 0xb3
     e64:	4909      	ldr	r1, [pc, #36]	; (e8c <spi_m_sync_transfer+0x38>)
     e66:	4b0a      	ldr	r3, [pc, #40]	; (e90 <spi_m_sync_transfer+0x3c>)
     e68:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     e6a:	6823      	ldr	r3, [r4, #0]
     e6c:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     e6e:	6863      	ldr	r3, [r4, #4]
     e70:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     e72:	68a3      	ldr	r3, [r4, #8]
     e74:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     e76:	a901      	add	r1, sp, #4
     e78:	1d28      	adds	r0, r5, #4
     e7a:	4b06      	ldr	r3, [pc, #24]	; (e94 <spi_m_sync_transfer+0x40>)
     e7c:	4798      	blx	r3
}
     e7e:	b005      	add	sp, #20
     e80:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     e82:	2000      	movs	r0, #0
     e84:	e7ed      	b.n	e62 <spi_m_sync_transfer+0xe>
     e86:	2000      	movs	r0, #0
     e88:	e7eb      	b.n	e62 <spi_m_sync_transfer+0xe>
     e8a:	bf00      	nop
     e8c:	000023e4 	.word	0x000023e4
     e90:	00001121 	.word	0x00001121
     e94:	00001cdd 	.word	0x00001cdd

00000e98 <_spi_m_sync_io_write>:
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	b084      	sub	sp, #16
     e9c:	460e      	mov	r6, r1
     e9e:	4615      	mov	r5, r2
	ASSERT(io);
     ea0:	4604      	mov	r4, r0
     ea2:	22a3      	movs	r2, #163	; 0xa3
     ea4:	4908      	ldr	r1, [pc, #32]	; (ec8 <_spi_m_sync_io_write+0x30>)
     ea6:	3000      	adds	r0, #0
     ea8:	bf18      	it	ne
     eaa:	2001      	movne	r0, #1
     eac:	4b07      	ldr	r3, [pc, #28]	; (ecc <_spi_m_sync_io_write+0x34>)
     eae:	4798      	blx	r3
	xfer.rxbuf = 0;
     eb0:	2300      	movs	r3, #0
     eb2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     eb4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     eb6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     eb8:	a901      	add	r1, sp, #4
     eba:	f1a4 000c 	sub.w	r0, r4, #12
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <_spi_m_sync_io_write+0x38>)
     ec0:	4798      	blx	r3
}
     ec2:	b004      	add	sp, #16
     ec4:	bd70      	pop	{r4, r5, r6, pc}
     ec6:	bf00      	nop
     ec8:	000023e4 	.word	0x000023e4
     ecc:	00001121 	.word	0x00001121
     ed0:	00000e55 	.word	0x00000e55

00000ed4 <_spi_m_sync_io_read>:
{
     ed4:	b570      	push	{r4, r5, r6, lr}
     ed6:	b084      	sub	sp, #16
     ed8:	460e      	mov	r6, r1
     eda:	4615      	mov	r5, r2
	ASSERT(io);
     edc:	4604      	mov	r4, r0
     ede:	2287      	movs	r2, #135	; 0x87
     ee0:	4908      	ldr	r1, [pc, #32]	; (f04 <_spi_m_sync_io_read+0x30>)
     ee2:	3000      	adds	r0, #0
     ee4:	bf18      	it	ne
     ee6:	2001      	movne	r0, #1
     ee8:	4b07      	ldr	r3, [pc, #28]	; (f08 <_spi_m_sync_io_read+0x34>)
     eea:	4798      	blx	r3
	xfer.rxbuf = buf;
     eec:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     eee:	2300      	movs	r3, #0
     ef0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     ef2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     ef4:	a901      	add	r1, sp, #4
     ef6:	f1a4 000c 	sub.w	r0, r4, #12
     efa:	4b04      	ldr	r3, [pc, #16]	; (f0c <_spi_m_sync_io_read+0x38>)
     efc:	4798      	blx	r3
}
     efe:	b004      	add	sp, #16
     f00:	bd70      	pop	{r4, r5, r6, pc}
     f02:	bf00      	nop
     f04:	000023e4 	.word	0x000023e4
     f08:	00001121 	.word	0x00001121
     f0c:	00000e55 	.word	0x00000e55

00000f10 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     f12:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     f14:	b117      	cbz	r7, f1c <timer_add_timer_task+0xc>
     f16:	463c      	mov	r4, r7
     f18:	2600      	movs	r6, #0
     f1a:	e00b      	b.n	f34 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     f1c:	4b0e      	ldr	r3, [pc, #56]	; (f58 <timer_add_timer_task+0x48>)
     f1e:	4798      	blx	r3
		return;
     f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     f22:	68a5      	ldr	r5, [r4, #8]
     f24:	442b      	add	r3, r5
     f26:	1a9b      	subs	r3, r3, r2
     f28:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     f2a:	688d      	ldr	r5, [r1, #8]
     f2c:	42ab      	cmp	r3, r5
     f2e:	d209      	bcs.n	f44 <timer_add_timer_task+0x34>
			break;
		prev = it;
     f30:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     f32:	6824      	ldr	r4, [r4, #0]
     f34:	b134      	cbz	r4, f44 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     f36:	6863      	ldr	r3, [r4, #4]
     f38:	4293      	cmp	r3, r2
     f3a:	d8f2      	bhi.n	f22 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     f3c:	68a5      	ldr	r5, [r4, #8]
     f3e:	1a9b      	subs	r3, r3, r2
     f40:	442b      	add	r3, r5
     f42:	e7f2      	b.n	f2a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     f44:	42bc      	cmp	r4, r7
     f46:	d003      	beq.n	f50 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     f48:	4630      	mov	r0, r6
     f4a:	4b04      	ldr	r3, [pc, #16]	; (f5c <timer_add_timer_task+0x4c>)
     f4c:	4798      	blx	r3
     f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     f50:	4b01      	ldr	r3, [pc, #4]	; (f58 <timer_add_timer_task+0x48>)
     f52:	4798      	blx	r3
     f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f56:	bf00      	nop
     f58:	0000113d 	.word	0x0000113d
     f5c:	00001169 	.word	0x00001169

00000f60 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f62:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     f64:	6906      	ldr	r6, [r0, #16]
     f66:	3601      	adds	r6, #1
     f68:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     f6a:	7e03      	ldrb	r3, [r0, #24]
     f6c:	f013 0f01 	tst.w	r3, #1
     f70:	d105      	bne.n	f7e <timer_process_counted+0x1e>
     f72:	7e03      	ldrb	r3, [r0, #24]
     f74:	f013 0f02 	tst.w	r3, #2
     f78:	d101      	bne.n	f7e <timer_process_counted+0x1e>
     f7a:	4605      	mov	r5, r0
     f7c:	e009      	b.n	f92 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     f7e:	7e03      	ldrb	r3, [r0, #24]
     f80:	f043 0302 	orr.w	r3, r3, #2
     f84:	7603      	strb	r3, [r0, #24]
		return;
     f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f88:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     f8a:	68e3      	ldr	r3, [r4, #12]
     f8c:	4620      	mov	r0, r4
     f8e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     f90:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     f92:	b19c      	cbz	r4, fbc <timer_process_counted+0x5c>
     f94:	6863      	ldr	r3, [r4, #4]
     f96:	1af3      	subs	r3, r6, r3
     f98:	68a2      	ldr	r2, [r4, #8]
     f9a:	4293      	cmp	r3, r2
     f9c:	d30e      	bcc.n	fbc <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     f9e:	f105 0714 	add.w	r7, r5, #20
     fa2:	4638      	mov	r0, r7
     fa4:	4b06      	ldr	r3, [pc, #24]	; (fc0 <timer_process_counted+0x60>)
     fa6:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     fa8:	7c23      	ldrb	r3, [r4, #16]
     faa:	2b01      	cmp	r3, #1
     fac:	d1ec      	bne.n	f88 <timer_process_counted+0x28>
			tmp->time_label = time;
     fae:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     fb0:	4632      	mov	r2, r6
     fb2:	4621      	mov	r1, r4
     fb4:	4638      	mov	r0, r7
     fb6:	4b03      	ldr	r3, [pc, #12]	; (fc4 <timer_process_counted+0x64>)
     fb8:	4798      	blx	r3
     fba:	e7e5      	b.n	f88 <timer_process_counted+0x28>
     fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fbe:	bf00      	nop
     fc0:	00001171 	.word	0x00001171
     fc4:	00000f11 	.word	0x00000f11

00000fc8 <timer_init>:
{
     fc8:	b538      	push	{r3, r4, r5, lr}
     fca:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     fcc:	4604      	mov	r4, r0
     fce:	b180      	cbz	r0, ff2 <timer_init+0x2a>
     fd0:	b169      	cbz	r1, fee <timer_init+0x26>
     fd2:	2001      	movs	r0, #1
     fd4:	223b      	movs	r2, #59	; 0x3b
     fd6:	4908      	ldr	r1, [pc, #32]	; (ff8 <timer_init+0x30>)
     fd8:	4b08      	ldr	r3, [pc, #32]	; (ffc <timer_init+0x34>)
     fda:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     fdc:	4629      	mov	r1, r5
     fde:	4620      	mov	r0, r4
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <timer_init+0x38>)
     fe2:	4798      	blx	r3
	descr->time                           = 0;
     fe4:	2000      	movs	r0, #0
     fe6:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     fe8:	4b06      	ldr	r3, [pc, #24]	; (1004 <timer_init+0x3c>)
     fea:	6023      	str	r3, [r4, #0]
}
     fec:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     fee:	2000      	movs	r0, #0
     ff0:	e7f0      	b.n	fd4 <timer_init+0xc>
     ff2:	2000      	movs	r0, #0
     ff4:	e7ee      	b.n	fd4 <timer_init+0xc>
     ff6:	bf00      	nop
     ff8:	00002400 	.word	0x00002400
     ffc:	00001121 	.word	0x00001121
    1000:	00001ee5 	.word	0x00001ee5
    1004:	00000f61 	.word	0x00000f61

00001008 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    100a:	460e      	mov	r6, r1
    100c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    100e:	4605      	mov	r5, r0
    1010:	b308      	cbz	r0, 1056 <usart_sync_write+0x4e>
    1012:	b311      	cbz	r1, 105a <usart_sync_write+0x52>
    1014:	bb1a      	cbnz	r2, 105e <usart_sync_write+0x56>
    1016:	2000      	movs	r0, #0
    1018:	22f1      	movs	r2, #241	; 0xf1
    101a:	4912      	ldr	r1, [pc, #72]	; (1064 <usart_sync_write+0x5c>)
    101c:	4b12      	ldr	r3, [pc, #72]	; (1068 <usart_sync_write+0x60>)
    101e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1020:	f105 0408 	add.w	r4, r5, #8
    1024:	4620      	mov	r0, r4
    1026:	4b11      	ldr	r3, [pc, #68]	; (106c <usart_sync_write+0x64>)
    1028:	4798      	blx	r3
    102a:	2800      	cmp	r0, #0
    102c:	d0f8      	beq.n	1020 <usart_sync_write+0x18>
    102e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1030:	5d71      	ldrb	r1, [r6, r5]
    1032:	4620      	mov	r0, r4
    1034:	4b0e      	ldr	r3, [pc, #56]	; (1070 <usart_sync_write+0x68>)
    1036:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1038:	4620      	mov	r0, r4
    103a:	4b0c      	ldr	r3, [pc, #48]	; (106c <usart_sync_write+0x64>)
    103c:	4798      	blx	r3
    103e:	2800      	cmp	r0, #0
    1040:	d0fa      	beq.n	1038 <usart_sync_write+0x30>
			;
	} while (++offset < length);
    1042:	3501      	adds	r5, #1
    1044:	42bd      	cmp	r5, r7
    1046:	d3f3      	bcc.n	1030 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1048:	4620      	mov	r0, r4
    104a:	4b0a      	ldr	r3, [pc, #40]	; (1074 <usart_sync_write+0x6c>)
    104c:	4798      	blx	r3
    104e:	2800      	cmp	r0, #0
    1050:	d0fa      	beq.n	1048 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    1052:	4628      	mov	r0, r5
    1054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1056:	2000      	movs	r0, #0
    1058:	e7de      	b.n	1018 <usart_sync_write+0x10>
    105a:	2000      	movs	r0, #0
    105c:	e7dc      	b.n	1018 <usart_sync_write+0x10>
    105e:	2001      	movs	r0, #1
    1060:	e7da      	b.n	1018 <usart_sync_write+0x10>
    1062:	bf00      	nop
    1064:	00002418 	.word	0x00002418
    1068:	00001121 	.word	0x00001121
    106c:	00001b43 	.word	0x00001b43
    1070:	00001b35 	.word	0x00001b35
    1074:	00001b4d 	.word	0x00001b4d

00001078 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    107c:	460f      	mov	r7, r1
    107e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1080:	4605      	mov	r5, r0
    1082:	b1c8      	cbz	r0, 10b8 <usart_sync_read+0x40>
    1084:	b1d1      	cbz	r1, 10bc <usart_sync_read+0x44>
    1086:	b9da      	cbnz	r2, 10c0 <usart_sync_read+0x48>
    1088:	2000      	movs	r0, #0
    108a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    108e:	490d      	ldr	r1, [pc, #52]	; (10c4 <usart_sync_read+0x4c>)
    1090:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <usart_sync_read+0x50>)
    1092:	4798      	blx	r3
	uint32_t                      offset = 0;
    1094:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1096:	f105 0408 	add.w	r4, r5, #8
    109a:	4620      	mov	r0, r4
    109c:	4b0b      	ldr	r3, [pc, #44]	; (10cc <usart_sync_read+0x54>)
    109e:	4798      	blx	r3
    10a0:	2800      	cmp	r0, #0
    10a2:	d0f8      	beq.n	1096 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    10a4:	4620      	mov	r0, r4
    10a6:	4b0a      	ldr	r3, [pc, #40]	; (10d0 <usart_sync_read+0x58>)
    10a8:	4798      	blx	r3
    10aa:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    10ac:	3601      	adds	r6, #1
    10ae:	4546      	cmp	r6, r8
    10b0:	d3f1      	bcc.n	1096 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    10b2:	4630      	mov	r0, r6
    10b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    10b8:	2000      	movs	r0, #0
    10ba:	e7e6      	b.n	108a <usart_sync_read+0x12>
    10bc:	2000      	movs	r0, #0
    10be:	e7e4      	b.n	108a <usart_sync_read+0x12>
    10c0:	2001      	movs	r0, #1
    10c2:	e7e2      	b.n	108a <usart_sync_read+0x12>
    10c4:	00002418 	.word	0x00002418
    10c8:	00001121 	.word	0x00001121
    10cc:	00001b57 	.word	0x00001b57
    10d0:	00001b3b 	.word	0x00001b3b

000010d4 <usart_sync_init>:
{
    10d4:	b538      	push	{r3, r4, r5, lr}
    10d6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    10d8:	4604      	mov	r4, r0
    10da:	b1a0      	cbz	r0, 1106 <usart_sync_init+0x32>
    10dc:	b189      	cbz	r1, 1102 <usart_sync_init+0x2e>
    10de:	2001      	movs	r0, #1
    10e0:	2234      	movs	r2, #52	; 0x34
    10e2:	490a      	ldr	r1, [pc, #40]	; (110c <usart_sync_init+0x38>)
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <usart_sync_init+0x3c>)
    10e6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    10e8:	4629      	mov	r1, r5
    10ea:	f104 0008 	add.w	r0, r4, #8
    10ee:	4b09      	ldr	r3, [pc, #36]	; (1114 <usart_sync_init+0x40>)
    10f0:	4798      	blx	r3
	if (init_status) {
    10f2:	4603      	mov	r3, r0
    10f4:	b918      	cbnz	r0, 10fe <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    10f6:	4a08      	ldr	r2, [pc, #32]	; (1118 <usart_sync_init+0x44>)
    10f8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    10fa:	4a08      	ldr	r2, [pc, #32]	; (111c <usart_sync_init+0x48>)
    10fc:	6022      	str	r2, [r4, #0]
}
    10fe:	4618      	mov	r0, r3
    1100:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1102:	2000      	movs	r0, #0
    1104:	e7ec      	b.n	10e0 <usart_sync_init+0xc>
    1106:	2000      	movs	r0, #0
    1108:	e7ea      	b.n	10e0 <usart_sync_init+0xc>
    110a:	bf00      	nop
    110c:	00002418 	.word	0x00002418
    1110:	00001121 	.word	0x00001121
    1114:	00001b09 	.word	0x00001b09
    1118:	00001079 	.word	0x00001079
    111c:	00001009 	.word	0x00001009

00001120 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1120:	b900      	cbnz	r0, 1124 <assert+0x4>
		__asm("BKPT #0");
    1122:	be00      	bkpt	0x0000
    1124:	4770      	bx	lr

00001126 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1126:	6803      	ldr	r3, [r0, #0]
    1128:	b11b      	cbz	r3, 1132 <is_list_element+0xc>
		if (it == element) {
    112a:	428b      	cmp	r3, r1
    112c:	d003      	beq.n	1136 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	e7fa      	b.n	1128 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1132:	2000      	movs	r0, #0
    1134:	4770      	bx	lr
			return true;
    1136:	2001      	movs	r0, #1
}
    1138:	4770      	bx	lr
	...

0000113c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    113c:	b538      	push	{r3, r4, r5, lr}
    113e:	4604      	mov	r4, r0
    1140:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1142:	4b06      	ldr	r3, [pc, #24]	; (115c <list_insert_as_head+0x20>)
    1144:	4798      	blx	r3
    1146:	f080 0001 	eor.w	r0, r0, #1
    114a:	2239      	movs	r2, #57	; 0x39
    114c:	4904      	ldr	r1, [pc, #16]	; (1160 <list_insert_as_head+0x24>)
    114e:	b2c0      	uxtb	r0, r0
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <list_insert_as_head+0x28>)
    1152:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1154:	6823      	ldr	r3, [r4, #0]
    1156:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1158:	6025      	str	r5, [r4, #0]
    115a:	bd38      	pop	{r3, r4, r5, pc}
    115c:	00001127 	.word	0x00001127
    1160:	00002434 	.word	0x00002434
    1164:	00001121 	.word	0x00001121

00001168 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1168:	6803      	ldr	r3, [r0, #0]
    116a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    116c:	6001      	str	r1, [r0, #0]
    116e:	4770      	bx	lr

00001170 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1170:	6803      	ldr	r3, [r0, #0]
    1172:	b11b      	cbz	r3, 117c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1174:	681a      	ldr	r2, [r3, #0]
    1176:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1178:	4618      	mov	r0, r3
    117a:	4770      	bx	lr
	}

	return NULL;
    117c:	2000      	movs	r0, #0
}
    117e:	4770      	bx	lr

00001180 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1180:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1184:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    1188:	f3c0 2087 	ubfx	r0, r0, #10, #8
    118c:	4770      	bx	lr
	...

00001190 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1190:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    1192:	4b60      	ldr	r3, [pc, #384]	; (1314 <_adc_init+0x184>)
    1194:	4298      	cmp	r0, r3
    1196:	f000 809c 	beq.w	12d2 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    119a:	4b5f      	ldr	r3, [pc, #380]	; (1318 <_adc_init+0x188>)
    119c:	4298      	cmp	r0, r3
    119e:	f000 80a8 	beq.w	12f2 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    11a2:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    11a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    11a6:	f013 0f01 	tst.w	r3, #1
    11aa:	d11b      	bne.n	11e4 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11ae:	f013 0f03 	tst.w	r3, #3
    11b2:	d1fb      	bne.n	11ac <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    11b4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    11b6:	f013 0f02 	tst.w	r3, #2
    11ba:	d00d      	beq.n	11d8 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    11bc:	8803      	ldrh	r3, [r0, #0]
    11be:	b29b      	uxth	r3, r3
    11c0:	f023 0302 	bic.w	r3, r3, #2
    11c4:	b29b      	uxth	r3, r3
    11c6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11ca:	f013 0f03 	tst.w	r3, #3
    11ce:	d1fb      	bne.n	11c8 <_adc_init+0x38>
    11d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11d2:	f013 0f02 	tst.w	r3, #2
    11d6:	d1fb      	bne.n	11d0 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    11d8:	2301      	movs	r3, #1
    11da:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11de:	f013 0f03 	tst.w	r3, #3
    11e2:	d1fb      	bne.n	11dc <_adc_init+0x4c>
    11e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11e6:	f013 0f01 	tst.w	r3, #1
    11ea:	d1fb      	bne.n	11e4 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    11ec:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    11f0:	2316      	movs	r3, #22
    11f2:	4a4a      	ldr	r2, [pc, #296]	; (131c <_adc_init+0x18c>)
    11f4:	fb03 2301 	mla	r3, r3, r1, r2
    11f8:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    11fa:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1202:	2b00      	cmp	r3, #0
    1204:	d1fa      	bne.n	11fc <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1206:	2316      	movs	r3, #22
    1208:	4a44      	ldr	r2, [pc, #272]	; (131c <_adc_init+0x18c>)
    120a:	fb03 2301 	mla	r3, r3, r1, r2
    120e:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1210:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1212:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1214:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1218:	2b00      	cmp	r3, #0
    121a:	d1fa      	bne.n	1212 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    121c:	2316      	movs	r3, #22
    121e:	4a3f      	ldr	r2, [pc, #252]	; (131c <_adc_init+0x18c>)
    1220:	fb03 2301 	mla	r3, r3, r1, r2
    1224:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1226:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1228:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    122a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    122c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1232:	2b00      	cmp	r3, #0
    1234:	d1fa      	bne.n	122c <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1236:	2316      	movs	r3, #22
    1238:	4a38      	ldr	r2, [pc, #224]	; (131c <_adc_init+0x18c>)
    123a:	fb03 2301 	mla	r3, r3, r1, r2
    123e:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1240:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1242:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1244:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1248:	2b00      	cmp	r3, #0
    124a:	d1fa      	bne.n	1242 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    124c:	2316      	movs	r3, #22
    124e:	4a33      	ldr	r2, [pc, #204]	; (131c <_adc_init+0x18c>)
    1250:	fb03 2301 	mla	r3, r3, r1, r2
    1254:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    1256:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1258:	6b03      	ldr	r3, [r0, #48]	; 0x30
    125a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    125e:	2b00      	cmp	r3, #0
    1260:	d1fa      	bne.n	1258 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1262:	2316      	movs	r3, #22
    1264:	4a2d      	ldr	r2, [pc, #180]	; (131c <_adc_init+0x18c>)
    1266:	fb03 2301 	mla	r3, r3, r1, r2
    126a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    126c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    126e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1270:	f013 0f80 	tst.w	r3, #128	; 0x80
    1274:	d1fb      	bne.n	126e <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1276:	2316      	movs	r3, #22
    1278:	4a28      	ldr	r2, [pc, #160]	; (131c <_adc_init+0x18c>)
    127a:	fb03 2301 	mla	r3, r3, r1, r2
    127e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    1280:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1282:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1284:	f413 7f80 	tst.w	r3, #256	; 0x100
    1288:	d1fb      	bne.n	1282 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    128a:	2316      	movs	r3, #22
    128c:	4a23      	ldr	r2, [pc, #140]	; (131c <_adc_init+0x18c>)
    128e:	fb03 2301 	mla	r3, r3, r1, r2
    1292:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    1294:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1296:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1298:	f413 7f00 	tst.w	r3, #512	; 0x200
    129c:	d1fb      	bne.n	1296 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    129e:	2316      	movs	r3, #22
    12a0:	4a1e      	ldr	r2, [pc, #120]	; (131c <_adc_init+0x18c>)
    12a2:	fb03 2301 	mla	r3, r3, r1, r2
    12a6:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    12a8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
    12b0:	d1fb      	bne.n	12aa <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    12b2:	2216      	movs	r2, #22
    12b4:	4b19      	ldr	r3, [pc, #100]	; (131c <_adc_init+0x18c>)
    12b6:	fb02 3101 	mla	r1, r2, r1, r3
    12ba:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    12bc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    12be:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    12c0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12c4:	f013 0f03 	tst.w	r3, #3
    12c8:	d1fb      	bne.n	12c2 <_adc_init+0x132>

	return ERR_NONE;
}
    12ca:	2000      	movs	r0, #0
    12cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    12d0:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    12d2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    12d6:	681b      	ldr	r3, [r3, #0]
    12d8:	095a      	lsrs	r2, r3, #5
    12da:	0212      	lsls	r2, r2, #8
    12dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    12e0:	0a1c      	lsrs	r4, r3, #8
    12e2:	0124      	lsls	r4, r4, #4
    12e4:	f004 0470 	and.w	r4, r4, #112	; 0x70
    12e8:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    12ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    12ee:	431a      	orrs	r2, r3
    12f0:	e758      	b.n	11a4 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    12f2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	0cda      	lsrs	r2, r3, #19
    12fa:	0212      	lsls	r2, r2, #8
    12fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1300:	0d9c      	lsrs	r4, r3, #22
    1302:	0124      	lsls	r4, r4, #4
    1304:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1308:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    130a:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    130e:	431a      	orrs	r2, r3
    1310:	e748      	b.n	11a4 <_adc_init+0x14>
    1312:	bf00      	nop
    1314:	43001c00 	.word	0x43001c00
    1318:	43002000 	.word	0x43002000
    131c:	00002454 	.word	0x00002454

00001320 <_adc_get_regs>:
{
    1320:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1322:	4b0b      	ldr	r3, [pc, #44]	; (1350 <_adc_get_regs+0x30>)
    1324:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1326:	2300      	movs	r3, #0
    1328:	b13b      	cbz	r3, 133a <_adc_get_regs+0x1a>
	ASSERT(false);
    132a:	2288      	movs	r2, #136	; 0x88
    132c:	4909      	ldr	r1, [pc, #36]	; (1354 <_adc_get_regs+0x34>)
    132e:	2000      	movs	r0, #0
    1330:	4b09      	ldr	r3, [pc, #36]	; (1358 <_adc_get_regs+0x38>)
    1332:	4798      	blx	r3
	return 0;
    1334:	2300      	movs	r3, #0
}
    1336:	4618      	mov	r0, r3
    1338:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    133a:	2216      	movs	r2, #22
    133c:	fb02 f203 	mul.w	r2, r2, r3
    1340:	4906      	ldr	r1, [pc, #24]	; (135c <_adc_get_regs+0x3c>)
    1342:	5c8a      	ldrb	r2, [r1, r2]
    1344:	4290      	cmp	r0, r2
    1346:	d0f6      	beq.n	1336 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1348:	3301      	adds	r3, #1
    134a:	b2db      	uxtb	r3, r3
    134c:	e7ec      	b.n	1328 <_adc_get_regs+0x8>
    134e:	bf00      	nop
    1350:	00001181 	.word	0x00001181
    1354:	0000246c 	.word	0x0000246c
    1358:	00001121 	.word	0x00001121
    135c:	00002454 	.word	0x00002454

00001360 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1360:	b538      	push	{r3, r4, r5, lr}
    1362:	460c      	mov	r4, r1
	ASSERT(device);
    1364:	4605      	mov	r5, r0
    1366:	22d9      	movs	r2, #217	; 0xd9
    1368:	4907      	ldr	r1, [pc, #28]	; (1388 <_adc_sync_init+0x28>)
    136a:	3000      	adds	r0, #0
    136c:	bf18      	it	ne
    136e:	2001      	movne	r0, #1
    1370:	4b06      	ldr	r3, [pc, #24]	; (138c <_adc_sync_init+0x2c>)
    1372:	4798      	blx	r3

	device->hw = hw;
    1374:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1376:	4620      	mov	r0, r4
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <_adc_sync_init+0x30>)
    137a:	4798      	blx	r3
    137c:	4601      	mov	r1, r0
    137e:	4620      	mov	r0, r4
    1380:	4b04      	ldr	r3, [pc, #16]	; (1394 <_adc_sync_init+0x34>)
    1382:	4798      	blx	r3
}
    1384:	bd38      	pop	{r3, r4, r5, pc}
    1386:	bf00      	nop
    1388:	0000246c 	.word	0x0000246c
    138c:	00001121 	.word	0x00001121
    1390:	00001321 	.word	0x00001321
    1394:	00001191 	.word	0x00001191

00001398 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1398:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    139a:	4a0c      	ldr	r2, [pc, #48]	; (13cc <_init_chip+0x34>)
    139c:	8813      	ldrh	r3, [r2, #0]
    139e:	b29b      	uxth	r3, r3
    13a0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    13a2:	4b0b      	ldr	r3, [pc, #44]	; (13d0 <_init_chip+0x38>)
    13a4:	4798      	blx	r3
	_oscctrl_init_sources();
    13a6:	4b0b      	ldr	r3, [pc, #44]	; (13d4 <_init_chip+0x3c>)
    13a8:	4798      	blx	r3
	_mclk_init();
    13aa:	4b0b      	ldr	r3, [pc, #44]	; (13d8 <_init_chip+0x40>)
    13ac:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    13ae:	4b0b      	ldr	r3, [pc, #44]	; (13dc <_init_chip+0x44>)
    13b0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13b2:	f640 70ff 	movw	r0, #4095	; 0xfff
    13b6:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <_init_chip+0x48>)
    13b8:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    13ba:	4a0a      	ldr	r2, [pc, #40]	; (13e4 <_init_chip+0x4c>)
    13bc:	6913      	ldr	r3, [r2, #16]
    13be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    13c2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    13c4:	4b08      	ldr	r3, [pc, #32]	; (13e8 <_init_chip+0x50>)
    13c6:	4798      	blx	r3
    13c8:	bd08      	pop	{r3, pc}
    13ca:	bf00      	nop
    13cc:	41004000 	.word	0x41004000
    13d0:	000017c5 	.word	0x000017c5
    13d4:	000017e5 	.word	0x000017e5
    13d8:	000017b9 	.word	0x000017b9
    13dc:	000017e9 	.word	0x000017e9
    13e0:	0000175d 	.word	0x0000175d
    13e4:	40000800 	.word	0x40000800
    13e8:	00001455 	.word	0x00001455

000013ec <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    13ec:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    13ee:	4a17      	ldr	r2, [pc, #92]	; (144c <_dmac_handler+0x60>)
    13f0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    13f2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    13f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    13fa:	0088      	lsls	r0, r1, #2
    13fc:	4914      	ldr	r1, [pc, #80]	; (1450 <_dmac_handler+0x64>)
    13fe:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1400:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1402:	f412 7f80 	tst.w	r2, #256	; 0x100
    1406:	d105      	bne.n	1414 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1408:	4a10      	ldr	r2, [pc, #64]	; (144c <_dmac_handler+0x60>)
    140a:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    140c:	f412 7f00 	tst.w	r2, #512	; 0x200
    1410:	d10b      	bne.n	142a <_dmac_handler+0x3e>
    1412:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1414:	011a      	lsls	r2, r3, #4
    1416:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    141a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    141e:	2101      	movs	r1, #1
    1420:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1424:	6843      	ldr	r3, [r0, #4]
    1426:	4798      	blx	r3
    1428:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    142a:	011a      	lsls	r2, r3, #4
    142c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1430:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1434:	2102      	movs	r1, #2
    1436:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    143a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    143e:	fa03 f201 	lsl.w	r2, r3, r1
    1442:	4b03      	ldr	r3, [pc, #12]	; (1450 <_dmac_handler+0x64>)
    1444:	589b      	ldr	r3, [r3, r2]
    1446:	4798      	blx	r3
	}
}
    1448:	e7e3      	b.n	1412 <_dmac_handler+0x26>
    144a:	bf00      	nop
    144c:	4100a000 	.word	0x4100a000
    1450:	20000060 	.word	0x20000060

00001454 <_dma_init>:
{
    1454:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1456:	4a3c      	ldr	r2, [pc, #240]	; (1548 <_dma_init+0xf4>)
    1458:	8813      	ldrh	r3, [r2, #0]
    145a:	b29b      	uxth	r3, r3
    145c:	f023 0302 	bic.w	r3, r3, #2
    1460:	b29b      	uxth	r3, r3
    1462:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1464:	8853      	ldrh	r3, [r2, #2]
    1466:	b29b      	uxth	r3, r3
    1468:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    146c:	b29b      	uxth	r3, r3
    146e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1470:	8813      	ldrh	r3, [r2, #0]
    1472:	b29b      	uxth	r3, r3
    1474:	f043 0301 	orr.w	r3, r3, #1
    1478:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    147a:	4b33      	ldr	r3, [pc, #204]	; (1548 <_dma_init+0xf4>)
    147c:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    147e:	f013 0f01 	tst.w	r3, #1
    1482:	d1fa      	bne.n	147a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1484:	4a30      	ldr	r2, [pc, #192]	; (1548 <_dma_init+0xf4>)
    1486:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    148a:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    148c:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    148e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1492:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1494:	2300      	movs	r3, #0
    1496:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1498:	492c      	ldr	r1, [pc, #176]	; (154c <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    149a:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    149c:	492c      	ldr	r1, [pc, #176]	; (1550 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    149e:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    14a0:	e016      	b.n	14d0 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    14a2:	4a2c      	ldr	r2, [pc, #176]	; (1554 <_dma_init+0x100>)
    14a4:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    14a8:	4c27      	ldr	r4, [pc, #156]	; (1548 <_dma_init+0xf4>)
    14aa:	1d19      	adds	r1, r3, #4
    14ac:	0109      	lsls	r1, r1, #4
    14ae:	1860      	adds	r0, r4, r1
    14b0:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    14b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    14b6:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    14b8:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    14ba:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    14bc:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    14be:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    14c0:	4922      	ldr	r1, [pc, #136]	; (154c <_dma_init+0xf8>)
    14c2:	011a      	lsls	r2, r3, #4
    14c4:	1888      	adds	r0, r1, r2
    14c6:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    14c8:	2200      	movs	r2, #0
    14ca:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    14cc:	3301      	adds	r3, #1
    14ce:	b2db      	uxtb	r3, r3
    14d0:	2b1f      	cmp	r3, #31
    14d2:	d9e6      	bls.n	14a2 <_dma_init+0x4e>
    14d4:	2300      	movs	r3, #0
    14d6:	e00a      	b.n	14ee <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    14d8:	f103 011f 	add.w	r1, r3, #31
    14dc:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14de:	2a00      	cmp	r2, #0
    14e0:	da10      	bge.n	1504 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14e2:	2a00      	cmp	r2, #0
    14e4:	da1c      	bge.n	1520 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    14e6:	2a00      	cmp	r2, #0
    14e8:	da24      	bge.n	1534 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    14ea:	3301      	adds	r3, #1
    14ec:	b2db      	uxtb	r3, r3
    14ee:	2b04      	cmp	r3, #4
    14f0:	d9f2      	bls.n	14d8 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    14f2:	4a15      	ldr	r2, [pc, #84]	; (1548 <_dma_init+0xf4>)
    14f4:	8813      	ldrh	r3, [r2, #0]
    14f6:	b29b      	uxth	r3, r3
    14f8:	f043 0302 	orr.w	r3, r3, #2
    14fc:	8013      	strh	r3, [r2, #0]
}
    14fe:	2000      	movs	r0, #0
    1500:	bc30      	pop	{r4, r5}
    1502:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1504:	0950      	lsrs	r0, r2, #5
    1506:	f001 051f 	and.w	r5, r1, #31
    150a:	2401      	movs	r4, #1
    150c:	40ac      	lsls	r4, r5
    150e:	3020      	adds	r0, #32
    1510:	4d11      	ldr	r5, [pc, #68]	; (1558 <_dma_init+0x104>)
    1512:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    151a:	f3bf 8f6f 	isb	sy
    151e:	e7e0      	b.n	14e2 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1520:	0950      	lsrs	r0, r2, #5
    1522:	f001 051f 	and.w	r5, r1, #31
    1526:	2401      	movs	r4, #1
    1528:	40ac      	lsls	r4, r5
    152a:	3060      	adds	r0, #96	; 0x60
    152c:	4d0a      	ldr	r5, [pc, #40]	; (1558 <_dma_init+0x104>)
    152e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1532:	e7d8      	b.n	14e6 <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1534:	0952      	lsrs	r2, r2, #5
    1536:	f001 011f 	and.w	r1, r1, #31
    153a:	2001      	movs	r0, #1
    153c:	fa00 f101 	lsl.w	r1, r0, r1
    1540:	4805      	ldr	r0, [pc, #20]	; (1558 <_dma_init+0x104>)
    1542:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1546:	e7d0      	b.n	14ea <_dma_init+0x96>
    1548:	4100a000 	.word	0x4100a000
    154c:	200002c0 	.word	0x200002c0
    1550:	200004c0 	.word	0x200004c0
    1554:	00002484 	.word	0x00002484
    1558:	e000e100 	.word	0xe000e100

0000155c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    155c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1560:	008a      	lsls	r2, r1, #2
    1562:	4b02      	ldr	r3, [pc, #8]	; (156c <_dma_get_channel_resource+0x10>)
    1564:	4413      	add	r3, r2
    1566:	6003      	str	r3, [r0, #0]
}
    1568:	2000      	movs	r0, #0
    156a:	4770      	bx	lr
    156c:	20000060 	.word	0x20000060

00001570 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1570:	b508      	push	{r3, lr}
	_dmac_handler();
    1572:	4b01      	ldr	r3, [pc, #4]	; (1578 <DMAC_0_Handler+0x8>)
    1574:	4798      	blx	r3
    1576:	bd08      	pop	{r3, pc}
    1578:	000013ed 	.word	0x000013ed

0000157c <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    157c:	b508      	push	{r3, lr}
	_dmac_handler();
    157e:	4b01      	ldr	r3, [pc, #4]	; (1584 <DMAC_1_Handler+0x8>)
    1580:	4798      	blx	r3
    1582:	bd08      	pop	{r3, pc}
    1584:	000013ed 	.word	0x000013ed

00001588 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1588:	b508      	push	{r3, lr}
	_dmac_handler();
    158a:	4b01      	ldr	r3, [pc, #4]	; (1590 <DMAC_2_Handler+0x8>)
    158c:	4798      	blx	r3
    158e:	bd08      	pop	{r3, pc}
    1590:	000013ed 	.word	0x000013ed

00001594 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1594:	b508      	push	{r3, lr}
	_dmac_handler();
    1596:	4b01      	ldr	r3, [pc, #4]	; (159c <DMAC_3_Handler+0x8>)
    1598:	4798      	blx	r3
    159a:	bd08      	pop	{r3, pc}
    159c:	000013ed 	.word	0x000013ed

000015a0 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    15a0:	b508      	push	{r3, lr}
	_dmac_handler();
    15a2:	4b01      	ldr	r3, [pc, #4]	; (15a8 <DMAC_4_Handler+0x8>)
    15a4:	4798      	blx	r3
    15a6:	bd08      	pop	{r3, pc}
    15a8:	000013ed 	.word	0x000013ed

000015ac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    15ac:	b570      	push	{r4, r5, r6, lr}
    15ae:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    15b0:	4b2a      	ldr	r3, [pc, #168]	; (165c <_ext_irq_handler+0xb0>)
    15b2:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    15b4:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    15b6:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    15b8:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    15ba:	4b29      	ldr	r3, [pc, #164]	; (1660 <_ext_irq_handler+0xb4>)
    15bc:	6818      	ldr	r0, [r3, #0]
    15be:	22ec      	movs	r2, #236	; 0xec
    15c0:	4928      	ldr	r1, [pc, #160]	; (1664 <_ext_irq_handler+0xb8>)
    15c2:	3000      	adds	r0, #0
    15c4:	bf18      	it	ne
    15c6:	2001      	movne	r0, #1
    15c8:	4b27      	ldr	r3, [pc, #156]	; (1668 <_ext_irq_handler+0xbc>)
    15ca:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    15cc:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    15d0:	e035      	b.n	163e <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    15d2:	4b26      	ldr	r3, [pc, #152]	; (166c <_ext_irq_handler+0xc0>)
    15d4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    15d8:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    15da:	f1b5 3fff 	cmp.w	r5, #4294967295
    15de:	d003      	beq.n	15e8 <_ext_irq_handler+0x3c>
				callback(pin);
    15e0:	4b1f      	ldr	r3, [pc, #124]	; (1660 <_ext_irq_handler+0xb4>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	4628      	mov	r0, r5
    15e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    15e8:	2301      	movs	r3, #1
    15ea:	40a3      	lsls	r3, r4
    15ec:	9c01      	ldr	r4, [sp, #4]
    15ee:	ea24 0403 	bic.w	r4, r4, r3
    15f2:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    15f4:	9b01      	ldr	r3, [sp, #4]
    15f6:	fa93 f4a3 	rbit	r4, r3
    15fa:	fab4 f484 	clz	r4, r4
    15fe:	b90b      	cbnz	r3, 1604 <_ext_irq_handler+0x58>
    1600:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1604:	f1b4 3fff 	cmp.w	r4, #4294967295
    1608:	d014      	beq.n	1634 <_ext_irq_handler+0x88>
    160a:	2002      	movs	r0, #2
    160c:	2100      	movs	r1, #0
    160e:	e001      	b.n	1614 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1610:	3b01      	subs	r3, #1
    1612:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1614:	4281      	cmp	r1, r0
    1616:	d8e0      	bhi.n	15da <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1618:	1843      	adds	r3, r0, r1
    161a:	f3c3 0347 	ubfx	r3, r3, #1, #8
    161e:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1620:	4a12      	ldr	r2, [pc, #72]	; (166c <_ext_irq_handler+0xc0>)
    1622:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1626:	42a2      	cmp	r2, r4
    1628:	d0d3      	beq.n	15d2 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    162a:	42a2      	cmp	r2, r4
    162c:	daf0      	bge.n	1610 <_ext_irq_handler+0x64>
					lower = middle + 1;
    162e:	3301      	adds	r3, #1
    1630:	b2d9      	uxtb	r1, r3
    1632:	e7ef      	b.n	1614 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1634:	4b09      	ldr	r3, [pc, #36]	; (165c <_ext_irq_handler+0xb0>)
    1636:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1638:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    163a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    163c:	615a      	str	r2, [r3, #20]
	while (flags) {
    163e:	9b01      	ldr	r3, [sp, #4]
    1640:	b14b      	cbz	r3, 1656 <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1642:	9b01      	ldr	r3, [sp, #4]
    1644:	fa93 f4a3 	rbit	r4, r3
    1648:	fab4 f484 	clz	r4, r4
    164c:	2b00      	cmp	r3, #0
    164e:	d1d9      	bne.n	1604 <_ext_irq_handler+0x58>
    1650:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1654:	e7d6      	b.n	1604 <_ext_irq_handler+0x58>
	}
}
    1656:	b002      	add	sp, #8
    1658:	bd70      	pop	{r4, r5, r6, pc}
    165a:	bf00      	nop
    165c:	40002800 	.word	0x40002800
    1660:	200001e0 	.word	0x200001e0
    1664:	00002594 	.word	0x00002594
    1668:	00001121 	.word	0x00001121
    166c:	00002584 	.word	0x00002584

00001670 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1670:	4b31      	ldr	r3, [pc, #196]	; (1738 <_ext_irq_init+0xc8>)
    1672:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1674:	f013 0f01 	tst.w	r3, #1
    1678:	d120      	bne.n	16bc <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    167a:	4b2f      	ldr	r3, [pc, #188]	; (1738 <_ext_irq_init+0xc8>)
    167c:	685b      	ldr	r3, [r3, #4]
    167e:	f013 0f03 	tst.w	r3, #3
    1682:	d1fa      	bne.n	167a <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1684:	4b2c      	ldr	r3, [pc, #176]	; (1738 <_ext_irq_init+0xc8>)
    1686:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1688:	f013 0f02 	tst.w	r3, #2
    168c:	d00e      	beq.n	16ac <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    168e:	4a2a      	ldr	r2, [pc, #168]	; (1738 <_ext_irq_init+0xc8>)
    1690:	7813      	ldrb	r3, [r2, #0]
    1692:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1696:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1698:	4b27      	ldr	r3, [pc, #156]	; (1738 <_ext_irq_init+0xc8>)
    169a:	685b      	ldr	r3, [r3, #4]
    169c:	f013 0f03 	tst.w	r3, #3
    16a0:	d1fa      	bne.n	1698 <_ext_irq_init+0x28>
    16a2:	4b25      	ldr	r3, [pc, #148]	; (1738 <_ext_irq_init+0xc8>)
    16a4:	685b      	ldr	r3, [r3, #4]
    16a6:	f013 0f02 	tst.w	r3, #2
    16aa:	d1fa      	bne.n	16a2 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    16ac:	2201      	movs	r2, #1
    16ae:	4b22      	ldr	r3, [pc, #136]	; (1738 <_ext_irq_init+0xc8>)
    16b0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16b2:	4b21      	ldr	r3, [pc, #132]	; (1738 <_ext_irq_init+0xc8>)
    16b4:	685b      	ldr	r3, [r3, #4]
    16b6:	f013 0f03 	tst.w	r3, #3
    16ba:	d1fa      	bne.n	16b2 <_ext_irq_init+0x42>
    16bc:	4b1e      	ldr	r3, [pc, #120]	; (1738 <_ext_irq_init+0xc8>)
    16be:	685b      	ldr	r3, [r3, #4]
    16c0:	f013 0f01 	tst.w	r3, #1
    16c4:	d1fa      	bne.n	16bc <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    16c6:	4a1c      	ldr	r2, [pc, #112]	; (1738 <_ext_irq_init+0xc8>)
    16c8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    16ca:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    16ce:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16d0:	4b19      	ldr	r3, [pc, #100]	; (1738 <_ext_irq_init+0xc8>)
    16d2:	685b      	ldr	r3, [r3, #4]
    16d4:	f013 0f03 	tst.w	r3, #3
    16d8:	d1fa      	bne.n	16d0 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    16da:	4b17      	ldr	r3, [pc, #92]	; (1738 <_ext_irq_init+0xc8>)
    16dc:	2200      	movs	r2, #0
    16de:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    16e0:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    16e2:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    16e4:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    16e6:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    16e8:	f04f 413b 	mov.w	r1, #3137339392	; 0xbb000000
    16ec:	61d9      	str	r1, [r3, #28]
    16ee:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    16f0:	781a      	ldrb	r2, [r3, #0]
    16f2:	f042 0202 	orr.w	r2, r2, #2
    16f6:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16f8:	4b0f      	ldr	r3, [pc, #60]	; (1738 <_ext_irq_init+0xc8>)
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	f013 0f03 	tst.w	r3, #3
    1700:	d1fa      	bne.n	16f8 <_ext_irq_init+0x88>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1702:	4b0e      	ldr	r3, [pc, #56]	; (173c <_ext_irq_init+0xcc>)
    1704:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    170c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1710:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1714:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1718:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    171a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    171e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1726:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    172a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    172e:	601a      	str	r2, [r3, #0]
	callback = cb;
    1730:	4b03      	ldr	r3, [pc, #12]	; (1740 <_ext_irq_init+0xd0>)
    1732:	6018      	str	r0, [r3, #0]
}
    1734:	2000      	movs	r0, #0
    1736:	4770      	bx	lr
    1738:	40002800 	.word	0x40002800
    173c:	e000e100 	.word	0xe000e100
    1740:	200001e0 	.word	0x200001e0

00001744 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1744:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1746:	4b01      	ldr	r3, [pc, #4]	; (174c <EIC_6_Handler+0x8>)
    1748:	4798      	blx	r3
    174a:	bd08      	pop	{r3, pc}
    174c:	000015ad 	.word	0x000015ad

00001750 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1750:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1752:	4b01      	ldr	r3, [pc, #4]	; (1758 <EIC_7_Handler+0x8>)
    1754:	4798      	blx	r3
    1756:	bd08      	pop	{r3, pc}
    1758:	000015ad 	.word	0x000015ad

0000175c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    175c:	f010 0f01 	tst.w	r0, #1
    1760:	d008      	beq.n	1774 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1762:	4a11      	ldr	r2, [pc, #68]	; (17a8 <_gclk_init_generators_by_fref+0x4c>)
    1764:	4b11      	ldr	r3, [pc, #68]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    1766:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1768:	4b10      	ldr	r3, [pc, #64]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    176a:	685a      	ldr	r2, [r3, #4]
    176c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1770:	421a      	tst	r2, r3
    1772:	d1f9      	bne.n	1768 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1774:	f010 0f02 	tst.w	r0, #2
    1778:	d008      	beq.n	178c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    177a:	4a0d      	ldr	r2, [pc, #52]	; (17b0 <_gclk_init_generators_by_fref+0x54>)
    177c:	4b0b      	ldr	r3, [pc, #44]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    177e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1780:	4b0a      	ldr	r3, [pc, #40]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1788:	421a      	tst	r2, r3
    178a:	d1f9      	bne.n	1780 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    178c:	f010 0f04 	tst.w	r0, #4
    1790:	d008      	beq.n	17a4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1792:	4a08      	ldr	r2, [pc, #32]	; (17b4 <_gclk_init_generators_by_fref+0x58>)
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    1796:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1798:	4b04      	ldr	r3, [pc, #16]	; (17ac <_gclk_init_generators_by_fref+0x50>)
    179a:	685a      	ldr	r2, [r3, #4]
    179c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    17a0:	421a      	tst	r2, r3
    17a2:	d1f9      	bne.n	1798 <_gclk_init_generators_by_fref+0x3c>
    17a4:	4770      	bx	lr
    17a6:	bf00      	nop
    17a8:	00010107 	.word	0x00010107
    17ac:	40001c00 	.word	0x40001c00
    17b0:	00010908 	.word	0x00010908
    17b4:	00010105 	.word	0x00010105

000017b8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    17b8:	2201      	movs	r2, #1
    17ba:	4b01      	ldr	r3, [pc, #4]	; (17c0 <_mclk_init+0x8>)
    17bc:	715a      	strb	r2, [r3, #5]
    17be:	4770      	bx	lr
    17c0:	40000800 	.word	0x40000800

000017c4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    17c4:	4b06      	ldr	r3, [pc, #24]	; (17e0 <_osc32kctrl_init_sources+0x1c>)
    17c6:	f242 0286 	movw	r2, #8326	; 0x2086
    17ca:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    17cc:	2200      	movs	r2, #0
    17ce:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    17d0:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    17d2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    17d4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    17d8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    17da:	2201      	movs	r2, #1
    17dc:	741a      	strb	r2, [r3, #16]
    17de:	4770      	bx	lr
    17e0:	40001400 	.word	0x40001400

000017e4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    17e4:	4770      	bx	lr
	...

000017e8 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    17e8:	4a1d      	ldr	r2, [pc, #116]	; (1860 <_oscctrl_init_referenced_generators+0x78>)
    17ea:	4b1e      	ldr	r3, [pc, #120]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    17ec:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    17ee:	4b1d      	ldr	r3, [pc, #116]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    17f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    17f2:	f013 0f06 	tst.w	r3, #6
    17f6:	d1fa      	bne.n	17ee <_oscctrl_init_referenced_generators+0x6>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    17f8:	4b1a      	ldr	r3, [pc, #104]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    17fa:	2220      	movs	r2, #32
    17fc:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    17fe:	2202      	movs	r2, #2
    1800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1804:	4b17      	ldr	r3, [pc, #92]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1808:	f013 0f02 	tst.w	r3, #2
    180c:	d1fa      	bne.n	1804 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    180e:	4a14      	ldr	r2, [pc, #80]	; (1860 <_oscctrl_init_referenced_generators+0x78>)
    1810:	4b14      	ldr	r3, [pc, #80]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1812:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1814:	4b13      	ldr	r3, [pc, #76]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1818:	f013 0f06 	tst.w	r3, #6
    181c:	d1fa      	bne.n	1814 <_oscctrl_init_referenced_generators+0x2c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    181e:	4b11      	ldr	r3, [pc, #68]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1820:	2220      	movs	r2, #32
    1822:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1824:	2202      	movs	r2, #2
    1826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    182a:	4b0e      	ldr	r3, [pc, #56]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    182c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    182e:	f013 0f02 	tst.w	r3, #2
    1832:	d1fa      	bne.n	182a <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1834:	4b0b      	ldr	r3, [pc, #44]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1838:	f013 0f01 	tst.w	r3, #1
    183c:	d104      	bne.n	1848 <_oscctrl_init_referenced_generators+0x60>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    183e:	4b09      	ldr	r3, [pc, #36]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1842:	f013 0f02 	tst.w	r3, #2
    1846:	d0f5      	beq.n	1834 <_oscctrl_init_referenced_generators+0x4c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    184c:	f013 0f01 	tst.w	r3, #1
    1850:	d104      	bne.n	185c <_oscctrl_init_referenced_generators+0x74>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1852:	4b04      	ldr	r3, [pc, #16]	; (1864 <_oscctrl_init_referenced_generators+0x7c>)
    1854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1856:	f013 0f02 	tst.w	r3, #2
    185a:	d0f5      	beq.n	1848 <_oscctrl_init_referenced_generators+0x60>
    185c:	4770      	bx	lr
    185e:	bf00      	nop
    1860:	000d05b7 	.word	0x000d05b7
    1864:	40001000 	.word	0x40001000

00001868 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1868:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    186a:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    186c:	6803      	ldr	r3, [r0, #0]
    186e:	2100      	movs	r1, #0
    1870:	4798      	blx	r3
    1872:	bd08      	pop	{r3, pc}

00001874 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1874:	b538      	push	{r3, r4, r5, lr}
    1876:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1878:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    187a:	4b07      	ldr	r3, [pc, #28]	; (1898 <_camera_async_init+0x24>)
    187c:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <_camera_async_init+0x28>)
    1880:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    1882:	4d07      	ldr	r5, [pc, #28]	; (18a0 <_camera_async_init+0x2c>)
    1884:	2100      	movs	r1, #0
    1886:	4628      	mov	r0, r5
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <_camera_async_init+0x30>)
    188a:	4798      	blx	r3
	resource->back                 = device;
    188c:	682b      	ldr	r3, [r5, #0]
    188e:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    1890:	4a05      	ldr	r2, [pc, #20]	; (18a8 <_camera_async_init+0x34>)
    1892:	601a      	str	r2, [r3, #0]
    1894:	bd38      	pop	{r3, r4, r5, pc}
    1896:	bf00      	nop
    1898:	c0000020 	.word	0xc0000020
    189c:	200001e4 	.word	0x200001e4
    18a0:	200006c0 	.word	0x200006c0
    18a4:	0000155d 	.word	0x0000155d
    18a8:	00001869 	.word	0x00001869

000018ac <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    18ac:	b500      	push	{lr}
    18ae:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    18b0:	4b08      	ldr	r3, [pc, #32]	; (18d4 <PCC_Handler+0x28>)
    18b2:	6818      	ldr	r0, [r3, #0]
    18b4:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    18b6:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    18b8:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    18ba:	2201      	movs	r2, #1
    18bc:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    18be:	9b01      	ldr	r3, [sp, #4]
    18c0:	f013 0f01 	tst.w	r3, #1
    18c4:	d003      	beq.n	18ce <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    18c6:	6803      	ldr	r3, [r0, #0]
    18c8:	b10b      	cbz	r3, 18ce <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    18ca:	2100      	movs	r1, #0
    18cc:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    18ce:	b003      	add	sp, #12
    18d0:	f85d fb04 	ldr.w	pc, [sp], #4
    18d4:	200001e4 	.word	0x200001e4

000018d8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    18d8:	b500      	push	{lr}
    18da:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    18dc:	4b0d      	ldr	r3, [pc, #52]	; (1914 <RAMECC_Handler+0x3c>)
    18de:	789b      	ldrb	r3, [r3, #2]
    18e0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    18e2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    18e4:	9b01      	ldr	r3, [sp, #4]
    18e6:	f013 0f02 	tst.w	r3, #2
    18ea:	d006      	beq.n	18fa <RAMECC_Handler+0x22>
    18ec:	4b0a      	ldr	r3, [pc, #40]	; (1918 <RAMECC_Handler+0x40>)
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	b11b      	cbz	r3, 18fa <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    18f2:	4a08      	ldr	r2, [pc, #32]	; (1914 <RAMECC_Handler+0x3c>)
    18f4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    18f6:	4798      	blx	r3
    18f8:	e009      	b.n	190e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    18fa:	9b01      	ldr	r3, [sp, #4]
    18fc:	f013 0f01 	tst.w	r3, #1
    1900:	d005      	beq.n	190e <RAMECC_Handler+0x36>
    1902:	4b05      	ldr	r3, [pc, #20]	; (1918 <RAMECC_Handler+0x40>)
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	b113      	cbz	r3, 190e <RAMECC_Handler+0x36>
    1908:	4a02      	ldr	r2, [pc, #8]	; (1914 <RAMECC_Handler+0x3c>)
    190a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    190c:	4798      	blx	r3
	} else {
		return;
	}
}
    190e:	b003      	add	sp, #12
    1910:	f85d fb04 	ldr.w	pc, [sp], #4
    1914:	41020000 	.word	0x41020000
    1918:	200006c4 	.word	0x200006c4

0000191c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    191c:	b538      	push	{r3, r4, r5, lr}
    191e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    1920:	4605      	mov	r5, r0
    1922:	b348      	cbz	r0, 1978 <_mci_sync_init+0x5c>
    1924:	b331      	cbz	r1, 1974 <_mci_sync_init+0x58>
    1926:	2001      	movs	r0, #1
    1928:	22d8      	movs	r2, #216	; 0xd8
    192a:	4914      	ldr	r1, [pc, #80]	; (197c <_mci_sync_init+0x60>)
    192c:	4b14      	ldr	r3, [pc, #80]	; (1980 <_mci_sync_init+0x64>)
    192e:	4798      	blx	r3

	mci_dev->hw = hw;
    1930:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    1932:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    1936:	f043 0301 	orr.w	r3, r3, #1
    193a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
    193e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    1942:	f013 0f01 	tst.w	r3, #1
    1946:	d1fa      	bne.n	193e <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    1948:	230e      	movs	r3, #14
    194a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    194e:	230f      	movs	r3, #15
    1950:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
    1954:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1956:	b29b      	uxth	r3, r3
    1958:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    195c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1960:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
    1962:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1964:	b29b      	uxth	r3, r3
    1966:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    196a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    196e:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    1970:	2000      	movs	r0, #0
    1972:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    1974:	2000      	movs	r0, #0
    1976:	e7d7      	b.n	1928 <_mci_sync_init+0xc>
    1978:	2000      	movs	r0, #0
    197a:	e7d5      	b.n	1928 <_mci_sync_init+0xc>
    197c:	000025ac 	.word	0x000025ac
    1980:	00001121 	.word	0x00001121

00001984 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1984:	b470      	push	{r4, r5, r6}
    1986:	b087      	sub	sp, #28
    1988:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    198a:	466c      	mov	r4, sp
    198c:	4d0c      	ldr	r5, [pc, #48]	; (19c0 <_sercom_get_hardware_index+0x3c>)
    198e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1992:	e895 0003 	ldmia.w	r5, {r0, r1}
    1996:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    199a:	2000      	movs	r0, #0
    199c:	2805      	cmp	r0, #5
    199e:	d80a      	bhi.n	19b6 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    19a0:	ab06      	add	r3, sp, #24
    19a2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    19a6:	f853 3c18 	ldr.w	r3, [r3, #-24]
    19aa:	42b3      	cmp	r3, r6
    19ac:	d001      	beq.n	19b2 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19ae:	3001      	adds	r0, #1
    19b0:	e7f4      	b.n	199c <_sercom_get_hardware_index+0x18>
			return i;
    19b2:	b2c0      	uxtb	r0, r0
    19b4:	e000      	b.n	19b8 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    19b6:	2000      	movs	r0, #0
}
    19b8:	b007      	add	sp, #28
    19ba:	bc70      	pop	{r4, r5, r6}
    19bc:	4770      	bx	lr
    19be:	bf00      	nop
    19c0:	000025c4 	.word	0x000025c4

000019c4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    19c4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    19c6:	4b0c      	ldr	r3, [pc, #48]	; (19f8 <_get_sercom_index+0x34>)
    19c8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    19ca:	2300      	movs	r3, #0
    19cc:	b143      	cbz	r3, 19e0 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    19ce:	f240 2247 	movw	r2, #583	; 0x247
    19d2:	490a      	ldr	r1, [pc, #40]	; (19fc <_get_sercom_index+0x38>)
    19d4:	2000      	movs	r0, #0
    19d6:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <_get_sercom_index+0x3c>)
    19d8:	4798      	blx	r3
	return 0;
    19da:	2300      	movs	r3, #0
}
    19dc:	4618      	mov	r0, r3
    19de:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    19e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    19e4:	00d1      	lsls	r1, r2, #3
    19e6:	4a07      	ldr	r2, [pc, #28]	; (1a04 <_get_sercom_index+0x40>)
    19e8:	440a      	add	r2, r1
    19ea:	7e12      	ldrb	r2, [r2, #24]
    19ec:	4290      	cmp	r0, r2
    19ee:	d0f5      	beq.n	19dc <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    19f0:	3301      	adds	r3, #1
    19f2:	b2db      	uxtb	r3, r3
    19f4:	e7ea      	b.n	19cc <_get_sercom_index+0x8>
    19f6:	bf00      	nop
    19f8:	00001985 	.word	0x00001985
    19fc:	00002630 	.word	0x00002630
    1a00:	00001121 	.word	0x00001121
    1a04:	000025c4 	.word	0x000025c4

00001a08 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1a08:	b538      	push	{r3, r4, r5, lr}
    1a0a:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1a0c:	4b3c      	ldr	r3, [pc, #240]	; (1b00 <_usart_init+0xf8>)
    1a0e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1a10:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1a12:	f013 0f01 	tst.w	r3, #1
    1a16:	d122      	bne.n	1a5e <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1a18:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a1c:	00da      	lsls	r2, r3, #3
    1a1e:	4b39      	ldr	r3, [pc, #228]	; (1b04 <_usart_init+0xfc>)
    1a20:	4413      	add	r3, r2
    1a22:	69da      	ldr	r2, [r3, #28]
    1a24:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a28:	69e3      	ldr	r3, [r4, #28]
    1a2a:	f013 0f03 	tst.w	r3, #3
    1a2e:	d1fb      	bne.n	1a28 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1a30:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1a32:	f013 0f02 	tst.w	r3, #2
    1a36:	d00b      	beq.n	1a50 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1a38:	6823      	ldr	r3, [r4, #0]
    1a3a:	f023 0302 	bic.w	r3, r3, #2
    1a3e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a40:	69e3      	ldr	r3, [r4, #28]
    1a42:	f013 0f03 	tst.w	r3, #3
    1a46:	d1fb      	bne.n	1a40 <_usart_init+0x38>
    1a48:	69e3      	ldr	r3, [r4, #28]
    1a4a:	f013 0f02 	tst.w	r3, #2
    1a4e:	d1fb      	bne.n	1a48 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1a50:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1a54:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a56:	69e3      	ldr	r3, [r4, #28]
    1a58:	f013 0f03 	tst.w	r3, #3
    1a5c:	d1fb      	bne.n	1a56 <_usart_init+0x4e>
    1a5e:	69e3      	ldr	r3, [r4, #28]
    1a60:	f013 0f01 	tst.w	r3, #1
    1a64:	d1fb      	bne.n	1a5e <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1a66:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a6a:	00da      	lsls	r2, r3, #3
    1a6c:	4b25      	ldr	r3, [pc, #148]	; (1b04 <_usart_init+0xfc>)
    1a6e:	4413      	add	r3, r2
    1a70:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1a72:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a74:	69e3      	ldr	r3, [r4, #28]
    1a76:	f013 0f03 	tst.w	r3, #3
    1a7a:	d1fb      	bne.n	1a74 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1a7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a80:	00da      	lsls	r2, r3, #3
    1a82:	4b20      	ldr	r3, [pc, #128]	; (1b04 <_usart_init+0xfc>)
    1a84:	4413      	add	r3, r2
    1a86:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1a88:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a8a:	69e3      	ldr	r3, [r4, #28]
    1a8c:	f013 0f1f 	tst.w	r3, #31
    1a90:	d1fb      	bne.n	1a8a <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1a92:	0042      	lsls	r2, r0, #1
    1a94:	4402      	add	r2, r0
    1a96:	00d1      	lsls	r1, r2, #3
    1a98:	4b1a      	ldr	r3, [pc, #104]	; (1b04 <_usart_init+0xfc>)
    1a9a:	440b      	add	r3, r1
    1a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1a9e:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1aa0:	69db      	ldr	r3, [r3, #28]
    1aa2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1aa6:	d10a      	bne.n	1abe <_usart_init+0xb6>
    1aa8:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1aac:	d107      	bne.n	1abe <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1aae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ab2:	00da      	lsls	r2, r3, #3
    1ab4:	4b13      	ldr	r3, [pc, #76]	; (1b04 <_usart_init+0xfc>)
    1ab6:	4413      	add	r3, r2
    1ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1aba:	81a3      	strh	r3, [r4, #12]
    1abc:	e00f      	b.n	1ade <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1abe:	0042      	lsls	r2, r0, #1
    1ac0:	4402      	add	r2, r0
    1ac2:	00d1      	lsls	r1, r2, #3
    1ac4:	4b0f      	ldr	r3, [pc, #60]	; (1b04 <_usart_init+0xfc>)
    1ac6:	440b      	add	r3, r1
    1ac8:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1aca:	89a2      	ldrh	r2, [r4, #12]
    1acc:	f361 020c 	bfi	r2, r1, #0, #13
    1ad0:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1ad2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    1ad6:	89a3      	ldrh	r3, [r4, #12]
    1ad8:	f362 334f 	bfi	r3, r2, #13, #3
    1adc:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1ade:	4a09      	ldr	r2, [pc, #36]	; (1b04 <_usart_init+0xfc>)
    1ae0:	0043      	lsls	r3, r0, #1
    1ae2:	181d      	adds	r5, r3, r0
    1ae4:	00e9      	lsls	r1, r5, #3
    1ae6:	460d      	mov	r5, r1
    1ae8:	4411      	add	r1, r2
    1aea:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1aee:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1af0:	442a      	add	r2, r5
    1af2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1af6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    1afa:	2000      	movs	r0, #0
    1afc:	bd38      	pop	{r3, r4, r5, pc}
    1afe:	bf00      	nop
    1b00:	000019c5 	.word	0x000019c5
    1b04:	000025c4 	.word	0x000025c4

00001b08 <_usart_sync_init>:
{
    1b08:	b538      	push	{r3, r4, r5, lr}
    1b0a:	460c      	mov	r4, r1
	ASSERT(device);
    1b0c:	4605      	mov	r5, r0
    1b0e:	22bb      	movs	r2, #187	; 0xbb
    1b10:	4905      	ldr	r1, [pc, #20]	; (1b28 <_usart_sync_init+0x20>)
    1b12:	3000      	adds	r0, #0
    1b14:	bf18      	it	ne
    1b16:	2001      	movne	r0, #1
    1b18:	4b04      	ldr	r3, [pc, #16]	; (1b2c <_usart_sync_init+0x24>)
    1b1a:	4798      	blx	r3
	device->hw = hw;
    1b1c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1b1e:	4620      	mov	r0, r4
    1b20:	4b03      	ldr	r3, [pc, #12]	; (1b30 <_usart_sync_init+0x28>)
    1b22:	4798      	blx	r3
}
    1b24:	bd38      	pop	{r3, r4, r5, pc}
    1b26:	bf00      	nop
    1b28:	00002630 	.word	0x00002630
    1b2c:	00001121 	.word	0x00001121
    1b30:	00001a09 	.word	0x00001a09

00001b34 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b34:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1b36:	6299      	str	r1, [r3, #40]	; 0x28
    1b38:	4770      	bx	lr

00001b3a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1b3a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1b3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1b3e:	b2c0      	uxtb	r0, r0
    1b40:	4770      	bx	lr

00001b42 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1b42:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1b44:	7e18      	ldrb	r0, [r3, #24]
}
    1b46:	f000 0001 	and.w	r0, r0, #1
    1b4a:	4770      	bx	lr

00001b4c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1b4c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1b4e:	7e18      	ldrb	r0, [r3, #24]
}
    1b50:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1b54:	4770      	bx	lr

00001b56 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1b56:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1b58:	7e18      	ldrb	r0, [r3, #24]
}
    1b5a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b5e:	4770      	bx	lr

00001b60 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1b60:	b570      	push	{r4, r5, r6, lr}
    1b62:	4606      	mov	r6, r0
    1b64:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1b66:	4608      	mov	r0, r1
    1b68:	4b58      	ldr	r3, [pc, #352]	; (1ccc <_spi_m_sync_init+0x16c>)
    1b6a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1b6c:	2300      	movs	r3, #0
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d068      	beq.n	1c44 <_spi_m_sync_init+0xe4>
	return NULL;
    1b72:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1b74:	2e00      	cmp	r6, #0
    1b76:	d070      	beq.n	1c5a <_spi_m_sync_init+0xfa>
    1b78:	2c00      	cmp	r4, #0
    1b7a:	d06c      	beq.n	1c56 <_spi_m_sync_init+0xf6>
    1b7c:	2001      	movs	r0, #1
    1b7e:	f640 123f 	movw	r2, #2367	; 0x93f
    1b82:	4953      	ldr	r1, [pc, #332]	; (1cd0 <_spi_m_sync_init+0x170>)
    1b84:	4b53      	ldr	r3, [pc, #332]	; (1cd4 <_spi_m_sync_init+0x174>)
    1b86:	4798      	blx	r3

	if (regs == NULL) {
    1b88:	2d00      	cmp	r5, #0
    1b8a:	f000 809b 	beq.w	1cc4 <_spi_m_sync_init+0x164>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1b8e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1b90:	f013 0f01 	tst.w	r3, #1
    1b94:	d11d      	bne.n	1bd2 <_spi_m_sync_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1b96:	682b      	ldr	r3, [r5, #0]
    1b98:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b9c:	69e3      	ldr	r3, [r4, #28]
    1b9e:	f013 0f03 	tst.w	r3, #3
    1ba2:	d1fb      	bne.n	1b9c <_spi_m_sync_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1ba4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1ba6:	f013 0f02 	tst.w	r3, #2
    1baa:	d00b      	beq.n	1bc4 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1bac:	6823      	ldr	r3, [r4, #0]
    1bae:	f023 0302 	bic.w	r3, r3, #2
    1bb2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bb4:	69e3      	ldr	r3, [r4, #28]
    1bb6:	f013 0f03 	tst.w	r3, #3
    1bba:	d1fb      	bne.n	1bb4 <_spi_m_sync_init+0x54>
    1bbc:	69e3      	ldr	r3, [r4, #28]
    1bbe:	f013 0f02 	tst.w	r3, #2
    1bc2:	d1fb      	bne.n	1bbc <_spi_m_sync_init+0x5c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1bc4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1bc8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1bca:	69e3      	ldr	r3, [r4, #28]
    1bcc:	f013 0f03 	tst.w	r3, #3
    1bd0:	d1fb      	bne.n	1bca <_spi_m_sync_init+0x6a>
    1bd2:	69e3      	ldr	r3, [r4, #28]
    1bd4:	f013 0f01 	tst.w	r3, #1
    1bd8:	d1fb      	bne.n	1bd2 <_spi_m_sync_init+0x72>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1bda:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1bdc:	682b      	ldr	r3, [r5, #0]
    1bde:	f003 031c 	and.w	r3, r3, #28
    1be2:	2b08      	cmp	r3, #8
    1be4:	d03b      	beq.n	1c5e <_spi_m_sync_init+0xfe>
	ASSERT(hw && regs);
    1be6:	2c00      	cmp	r4, #0
    1be8:	d068      	beq.n	1cbc <_spi_m_sync_init+0x15c>
    1bea:	2d00      	cmp	r5, #0
    1bec:	d064      	beq.n	1cb8 <_spi_m_sync_init+0x158>
    1bee:	2001      	movs	r0, #1
    1bf0:	f640 1209 	movw	r2, #2313	; 0x909
    1bf4:	4936      	ldr	r1, [pc, #216]	; (1cd0 <_spi_m_sync_init+0x170>)
    1bf6:	4b37      	ldr	r3, [pc, #220]	; (1cd4 <_spi_m_sync_init+0x174>)
    1bf8:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1bfa:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1bfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1c00:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1c04:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c06:	69e3      	ldr	r3, [r4, #28]
    1c08:	f013 0f03 	tst.w	r3, #3
    1c0c:	d1fb      	bne.n	1c06 <_spi_m_sync_init+0xa6>
	    (regs->ctrlb
    1c0e:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    1c10:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    1c14:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    1c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1c1c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c1e:	69e3      	ldr	r3, [r4, #28]
    1c20:	f013 0f17 	tst.w	r3, #23
    1c24:	d1fb      	bne.n	1c1e <_spi_m_sync_init+0xbe>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1c26:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1c28:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1c2a:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1c2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1c30:	686b      	ldr	r3, [r5, #4]
    1c32:	f013 0f07 	tst.w	r3, #7
    1c36:	d143      	bne.n	1cc0 <_spi_m_sync_init+0x160>
    1c38:	2301      	movs	r3, #1
    1c3a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1c3c:	89eb      	ldrh	r3, [r5, #14]
    1c3e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    1c40:	2000      	movs	r0, #0
    1c42:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    1c44:	b110      	cbz	r0, 1c4c <_spi_m_sync_init+0xec>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1c46:	3301      	adds	r3, #1
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	e790      	b.n	1b6e <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1c4c:	eb03 1503 	add.w	r5, r3, r3, lsl #4
    1c50:	4b21      	ldr	r3, [pc, #132]	; (1cd8 <_spi_m_sync_init+0x178>)
    1c52:	441d      	add	r5, r3
    1c54:	e78e      	b.n	1b74 <_spi_m_sync_init+0x14>
	ASSERT(dev && hw);
    1c56:	2000      	movs	r0, #0
    1c58:	e791      	b.n	1b7e <_spi_m_sync_init+0x1e>
    1c5a:	2000      	movs	r0, #0
    1c5c:	e78f      	b.n	1b7e <_spi_m_sync_init+0x1e>
	ASSERT(hw && regs);
    1c5e:	b34c      	cbz	r4, 1cb4 <_spi_m_sync_init+0x154>
    1c60:	b335      	cbz	r5, 1cb0 <_spi_m_sync_init+0x150>
    1c62:	2001      	movs	r0, #1
    1c64:	f640 121d 	movw	r2, #2333	; 0x91d
    1c68:	4919      	ldr	r1, [pc, #100]	; (1cd0 <_spi_m_sync_init+0x170>)
    1c6a:	4b1a      	ldr	r3, [pc, #104]	; (1cd4 <_spi_m_sync_init+0x174>)
    1c6c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1c6e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    1c70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    1c74:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1c78:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c7a:	69e3      	ldr	r3, [r4, #28]
    1c7c:	f013 0f03 	tst.w	r3, #3
    1c80:	d1fb      	bne.n	1c7a <_spi_m_sync_init+0x11a>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1c82:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1c84:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    1c88:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    1c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1c90:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1c94:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1c96:	69e3      	ldr	r3, [r4, #28]
    1c98:	f013 0f17 	tst.w	r3, #23
    1c9c:	d1fb      	bne.n	1c96 <_spi_m_sync_init+0x136>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1c9e:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1ca0:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1ca2:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1ca4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1ca8:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1caa:	2b00      	cmp	r3, #0
    1cac:	d1fc      	bne.n	1ca8 <_spi_m_sync_init+0x148>
    1cae:	e7bf      	b.n	1c30 <_spi_m_sync_init+0xd0>
	ASSERT(hw && regs);
    1cb0:	2000      	movs	r0, #0
    1cb2:	e7d7      	b.n	1c64 <_spi_m_sync_init+0x104>
    1cb4:	2000      	movs	r0, #0
    1cb6:	e7d5      	b.n	1c64 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    1cb8:	2000      	movs	r0, #0
    1cba:	e799      	b.n	1bf0 <_spi_m_sync_init+0x90>
    1cbc:	2000      	movs	r0, #0
    1cbe:	e797      	b.n	1bf0 <_spi_m_sync_init+0x90>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1cc0:	2302      	movs	r3, #2
    1cc2:	e7ba      	b.n	1c3a <_spi_m_sync_init+0xda>
		return ERR_INVALID_ARG;
    1cc4:	f06f 000c 	mvn.w	r0, #12
}
    1cc8:	bd70      	pop	{r4, r5, r6, pc}
    1cca:	bf00      	nop
    1ccc:	00001985 	.word	0x00001985
    1cd0:	00002630 	.word	0x00002630
    1cd4:	00001121 	.word	0x00001121
    1cd8:	0000261c 	.word	0x0000261c

00001cdc <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cde:	b087      	sub	sp, #28
    1ce0:	4607      	mov	r7, r0
    1ce2:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
    1ce4:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1ce6:	680b      	ldr	r3, [r1, #0]
    1ce8:	9301      	str	r3, [sp, #4]
    1cea:	684b      	ldr	r3, [r1, #4]
    1cec:	9302      	str	r3, [sp, #8]
    1cee:	2300      	movs	r3, #0
    1cf0:	9303      	str	r3, [sp, #12]
    1cf2:	9304      	str	r3, [sp, #16]
    1cf4:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1cf6:	b1b8      	cbz	r0, 1d28 <_spi_m_sync_trans+0x4c>
    1cf8:	b1a4      	cbz	r4, 1d24 <_spi_m_sync_trans+0x48>
    1cfa:	2001      	movs	r0, #1
    1cfc:	f640 22a3 	movw	r2, #2723	; 0xaa3
    1d00:	4934      	ldr	r1, [pc, #208]	; (1dd4 <_spi_m_sync_trans+0xf8>)
    1d02:	4b35      	ldr	r3, [pc, #212]	; (1dd8 <_spi_m_sync_trans+0xfc>)
    1d04:	4798      	blx	r3
    1d06:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1d08:	f013 0f07 	tst.w	r3, #7
    1d0c:	d15f      	bne.n	1dce <_spi_m_sync_trans+0xf2>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1d0e:	69e3      	ldr	r3, [r4, #28]
    1d10:	f013 0f03 	tst.w	r3, #3
    1d14:	d1fb      	bne.n	1d0e <_spi_m_sync_trans+0x32>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1d16:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1d18:	f013 0f02 	tst.w	r3, #2
    1d1c:	d11e      	bne.n	1d5c <_spi_m_sync_trans+0x80>
		return ERR_NOT_INITIALIZED;
    1d1e:	f06f 0013 	mvn.w	r0, #19
    1d22:	e052      	b.n	1dca <_spi_m_sync_trans+0xee>
	ASSERT(dev && hw);
    1d24:	4618      	mov	r0, r3
    1d26:	e7e9      	b.n	1cfc <_spi_m_sync_trans+0x20>
    1d28:	2000      	movs	r0, #0
    1d2a:	e7e7      	b.n	1cfc <_spi_m_sync_trans+0x20>
		return false;
    1d2c:	2200      	movs	r2, #0
    1d2e:	e02b      	b.n	1d88 <_spi_m_sync_trans+0xac>
			data |= (*ctrl->txbuf) << 8;
    1d30:	f891 e001 	ldrb.w	lr, [r1, #1]
    1d34:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			ctrl->txbuf++;
    1d38:	3102      	adds	r1, #2
    1d3a:	9101      	str	r1, [sp, #4]
	ctrl->txcnt++;
    1d3c:	3201      	adds	r2, #1
    1d3e:	9203      	str	r2, [sp, #12]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1d40:	62a0      	str	r0, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1d42:	f013 0f80 	tst.w	r3, #128	; 0x80
    1d46:	d132      	bne.n	1dae <_spi_m_sync_trans+0xd2>
	return ERR_NONE;
    1d48:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1d4a:	2800      	cmp	r0, #0
    1d4c:	db37      	blt.n	1dbe <_spi_m_sync_trans+0xe2>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1d4e:	9803      	ldr	r0, [sp, #12]
    1d50:	68ab      	ldr	r3, [r5, #8]
    1d52:	4298      	cmp	r0, r3
    1d54:	d302      	bcc.n	1d5c <_spi_m_sync_trans+0x80>
    1d56:	9a04      	ldr	r2, [sp, #16]
    1d58:	4293      	cmp	r3, r2
    1d5a:	d930      	bls.n	1dbe <_spi_m_sync_trans+0xe2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1d5c:	7e23      	ldrb	r3, [r4, #24]
    1d5e:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1d60:	f013 0f04 	tst.w	r3, #4
    1d64:	d0e2      	beq.n	1d2c <_spi_m_sync_trans+0x50>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1d68:	9a02      	ldr	r2, [sp, #8]
    1d6a:	b14a      	cbz	r2, 1d80 <_spi_m_sync_trans+0xa4>
		*ctrl->rxbuf++ = (uint8_t)data;
    1d6c:	1c50      	adds	r0, r2, #1
    1d6e:	9002      	str	r0, [sp, #8]
    1d70:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    1d72:	2e01      	cmp	r6, #1
    1d74:	d904      	bls.n	1d80 <_spi_m_sync_trans+0xa4>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1d76:	1c90      	adds	r0, r2, #2
    1d78:	9002      	str	r0, [sp, #8]
    1d7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1d7e:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1d80:	9a04      	ldr	r2, [sp, #16]
    1d82:	3201      	adds	r2, #1
    1d84:	9204      	str	r2, [sp, #16]
	return true;
    1d86:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1d88:	2a00      	cmp	r2, #0
    1d8a:	d1da      	bne.n	1d42 <_spi_m_sync_trans+0x66>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1d8c:	9a03      	ldr	r2, [sp, #12]
    1d8e:	9904      	ldr	r1, [sp, #16]
    1d90:	4291      	cmp	r1, r2
    1d92:	d3d6      	bcc.n	1d42 <_spi_m_sync_trans+0x66>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1d94:	88f8      	ldrh	r0, [r7, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1d96:	f013 0f01 	tst.w	r3, #1
    1d9a:	d0d2      	beq.n	1d42 <_spi_m_sync_trans+0x66>
	if (ctrl->txbuf) {
    1d9c:	9901      	ldr	r1, [sp, #4]
    1d9e:	2900      	cmp	r1, #0
    1da0:	d0cc      	beq.n	1d3c <_spi_m_sync_trans+0x60>
		data = *ctrl->txbuf++;
    1da2:	1c48      	adds	r0, r1, #1
    1da4:	9001      	str	r0, [sp, #4]
    1da6:	7808      	ldrb	r0, [r1, #0]
		if (ctrl->char_size > 1) {
    1da8:	2e01      	cmp	r6, #1
    1daa:	d8c1      	bhi.n	1d30 <_spi_m_sync_trans+0x54>
    1dac:	e7c6      	b.n	1d3c <_spi_m_sync_trans+0x60>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1db2:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1db8:	f06f 0012 	mvn.w	r0, #18
    1dbc:	e7c5      	b.n	1d4a <_spi_m_sync_trans+0x6e>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1dbe:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1dc0:	f013 0f03 	tst.w	r3, #3
    1dc4:	d0fb      	beq.n	1dbe <_spi_m_sync_trans+0xe2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1dc6:	2303      	movs	r3, #3
    1dc8:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1dca:	b007      	add	sp, #28
    1dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    1dce:	f06f 0003 	mvn.w	r0, #3
    1dd2:	e7fa      	b.n	1dca <_spi_m_sync_trans+0xee>
    1dd4:	00002630 	.word	0x00002630
    1dd8:	00001121 	.word	0x00001121

00001ddc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1ddc:	4b03      	ldr	r3, [pc, #12]	; (1dec <_system_time_init+0x10>)
    1dde:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1de2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1de4:	2205      	movs	r2, #5
    1de6:	601a      	str	r2, [r3, #0]
    1de8:	4770      	bx	lr
    1dea:	bf00      	nop
    1dec:	e000e010 	.word	0xe000e010

00001df0 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1df0:	b508      	push	{r3, lr}
	_system_time_init(hw);
    1df2:	4b01      	ldr	r3, [pc, #4]	; (1df8 <_delay_init+0x8>)
    1df4:	4798      	blx	r3
    1df6:	bd08      	pop	{r3, pc}
    1df8:	00001ddd 	.word	0x00001ddd

00001dfc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1dfc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1dfe:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1e00:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1e02:	f012 0f01 	tst.w	r2, #1
    1e06:	d100      	bne.n	1e0a <tc_interrupt_handler+0xe>
    1e08:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1e0a:	2201      	movs	r2, #1
    1e0c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    1e0e:	6803      	ldr	r3, [r0, #0]
    1e10:	4798      	blx	r3
	}
}
    1e12:	e7f9      	b.n	1e08 <tc_interrupt_handler+0xc>

00001e14 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1e14:	b538      	push	{r3, r4, r5, lr}
    1e16:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1e18:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1e1a:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1e1c:	f013 0f01 	tst.w	r3, #1
    1e20:	d004      	beq.n	1e2c <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1e22:	2301      	movs	r3, #1
    1e24:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1e26:	6803      	ldr	r3, [r0, #0]
    1e28:	b103      	cbz	r3, 1e2c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1e2a:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1e2c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1e2e:	f013 0f02 	tst.w	r3, #2
    1e32:	d005      	beq.n	1e40 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1e34:	2302      	movs	r3, #2
    1e36:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1e38:	686b      	ldr	r3, [r5, #4]
    1e3a:	b10b      	cbz	r3, 1e40 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1e3c:	4628      	mov	r0, r5
    1e3e:	4798      	blx	r3
    1e40:	bd38      	pop	{r3, r4, r5, pc}
	...

00001e44 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1e44:	4b06      	ldr	r3, [pc, #24]	; (1e60 <_tc_init_irq_param+0x1c>)
    1e46:	4298      	cmp	r0, r3
    1e48:	d003      	beq.n	1e52 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    1e4a:	4b06      	ldr	r3, [pc, #24]	; (1e64 <_tc_init_irq_param+0x20>)
    1e4c:	4298      	cmp	r0, r3
    1e4e:	d003      	beq.n	1e58 <_tc_init_irq_param+0x14>
    1e50:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <_tc_init_irq_param+0x24>)
    1e54:	6019      	str	r1, [r3, #0]
    1e56:	e7f8      	b.n	1e4a <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <_tc_init_irq_param+0x24>)
    1e5a:	6059      	str	r1, [r3, #4]
	}
}
    1e5c:	e7f8      	b.n	1e50 <_tc_init_irq_param+0xc>
    1e5e:	bf00      	nop
    1e60:	40003800 	.word	0x40003800
    1e64:	40003c00 	.word	0x40003c00
    1e68:	200001e8 	.word	0x200001e8

00001e6c <get_tc_index>:
{
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	b086      	sub	sp, #24
    1e70:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1e72:	466c      	mov	r4, sp
    1e74:	4d17      	ldr	r5, [pc, #92]	; (1ed4 <get_tc_index+0x68>)
    1e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e7a:	e895 0003 	ldmia.w	r5, {r0, r1}
    1e7e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1e82:	2300      	movs	r3, #0
    1e84:	2b05      	cmp	r3, #5
    1e86:	d80a      	bhi.n	1e9e <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1e88:	aa06      	add	r2, sp, #24
    1e8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1e8e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    1e92:	42b2      	cmp	r2, r6
    1e94:	d001      	beq.n	1e9a <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1e96:	3301      	adds	r3, #1
    1e98:	e7f4      	b.n	1e84 <get_tc_index+0x18>
			return i;
    1e9a:	b2db      	uxtb	r3, r3
    1e9c:	e000      	b.n	1ea0 <get_tc_index+0x34>
		}
	}
	return 0;
    1e9e:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1ea0:	2200      	movs	r2, #0
    1ea2:	2a01      	cmp	r2, #1
    1ea4:	d80b      	bhi.n	1ebe <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    1ea6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    1eaa:	0081      	lsls	r1, r0, #2
    1eac:	480a      	ldr	r0, [pc, #40]	; (1ed8 <get_tc_index+0x6c>)
    1eae:	5c41      	ldrb	r1, [r0, r1]
    1eb0:	4299      	cmp	r1, r3
    1eb2:	d002      	beq.n	1eba <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1eb4:	3201      	adds	r2, #1
    1eb6:	b2d2      	uxtb	r2, r2
    1eb8:	e7f3      	b.n	1ea2 <get_tc_index+0x36>
			return i;
    1eba:	b250      	sxtb	r0, r2
    1ebc:	e007      	b.n	1ece <get_tc_index+0x62>
	ASSERT(false);
    1ebe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    1ec2:	4906      	ldr	r1, [pc, #24]	; (1edc <get_tc_index+0x70>)
    1ec4:	2000      	movs	r0, #0
    1ec6:	4b06      	ldr	r3, [pc, #24]	; (1ee0 <get_tc_index+0x74>)
    1ec8:	4798      	blx	r3
	return -1;
    1eca:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ece:	b006      	add	sp, #24
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	bf00      	nop
    1ed4:	0000264c 	.word	0x0000264c
    1ed8:	20000000 	.word	0x20000000
    1edc:	00002664 	.word	0x00002664
    1ee0:	00001121 	.word	0x00001121

00001ee4 <_timer_init>:
{
    1ee4:	b570      	push	{r4, r5, r6, lr}
    1ee6:	4606      	mov	r6, r0
    1ee8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    1eea:	4608      	mov	r0, r1
    1eec:	4b6c      	ldr	r3, [pc, #432]	; (20a0 <_timer_init+0x1bc>)
    1eee:	4798      	blx	r3
    1ef0:	4605      	mov	r5, r0
	device->hw = hw;
    1ef2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1ef4:	228f      	movs	r2, #143	; 0x8f
    1ef6:	496b      	ldr	r1, [pc, #428]	; (20a4 <_timer_init+0x1c0>)
    1ef8:	2001      	movs	r0, #1
    1efa:	4b6b      	ldr	r3, [pc, #428]	; (20a8 <_timer_init+0x1c4>)
    1efc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1efe:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1f00:	f013 0f01 	tst.w	r3, #1
    1f04:	d119      	bne.n	1f3a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f06:	6923      	ldr	r3, [r4, #16]
    1f08:	f013 0f03 	tst.w	r3, #3
    1f0c:	d1fb      	bne.n	1f06 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1f0e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1f10:	f013 0f02 	tst.w	r3, #2
    1f14:	d00b      	beq.n	1f2e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f16:	6823      	ldr	r3, [r4, #0]
    1f18:	f023 0302 	bic.w	r3, r3, #2
    1f1c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f1e:	6923      	ldr	r3, [r4, #16]
    1f20:	f013 0f03 	tst.w	r3, #3
    1f24:	d1fb      	bne.n	1f1e <_timer_init+0x3a>
    1f26:	6923      	ldr	r3, [r4, #16]
    1f28:	f013 0f02 	tst.w	r3, #2
    1f2c:	d1fb      	bne.n	1f26 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f2e:	2301      	movs	r3, #1
    1f30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f32:	6923      	ldr	r3, [r4, #16]
    1f34:	f013 0f03 	tst.w	r3, #3
    1f38:	d1fb      	bne.n	1f32 <_timer_init+0x4e>
    1f3a:	6923      	ldr	r3, [r4, #16]
    1f3c:	f013 0f01 	tst.w	r3, #1
    1f40:	d1fb      	bne.n	1f3a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1f42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f46:	009a      	lsls	r2, r3, #2
    1f48:	4b58      	ldr	r3, [pc, #352]	; (20ac <_timer_init+0x1c8>)
    1f4a:	4413      	add	r3, r2
    1f4c:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f4e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f50:	6923      	ldr	r3, [r4, #16]
    1f52:	f013 0f03 	tst.w	r3, #3
    1f56:	d1fb      	bne.n	1f50 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1f58:	00aa      	lsls	r2, r5, #2
    1f5a:	442a      	add	r2, r5
    1f5c:	0091      	lsls	r1, r2, #2
    1f5e:	4b53      	ldr	r3, [pc, #332]	; (20ac <_timer_init+0x1c8>)
    1f60:	440b      	add	r3, r1
    1f62:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1f64:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1f66:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1f68:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1f6a:	2201      	movs	r2, #1
    1f6c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1f6e:	685b      	ldr	r3, [r3, #4]
    1f70:	f003 030c 	and.w	r3, r3, #12
    1f74:	2b08      	cmp	r3, #8
    1f76:	d05b      	beq.n	2030 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d16d      	bne.n	2058 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1f7c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f80:	009a      	lsls	r2, r3, #2
    1f82:	4b4a      	ldr	r3, [pc, #296]	; (20ac <_timer_init+0x1c8>)
    1f84:	4413      	add	r3, r2
    1f86:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1f88:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f8a:	6923      	ldr	r3, [r4, #16]
    1f8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f90:	d1fb      	bne.n	1f8a <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1f92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f96:	009a      	lsls	r2, r3, #2
    1f98:	4b44      	ldr	r3, [pc, #272]	; (20ac <_timer_init+0x1c8>)
    1f9a:	4413      	add	r3, r2
    1f9c:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1f9e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fa0:	6923      	ldr	r3, [r4, #16]
    1fa2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1fa6:	d1fb      	bne.n	1fa0 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1fa8:	2301      	movs	r3, #1
    1faa:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    1fac:	4631      	mov	r1, r6
    1fae:	4620      	mov	r0, r4
    1fb0:	4b3f      	ldr	r3, [pc, #252]	; (20b0 <_timer_init+0x1cc>)
    1fb2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1fb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1fb8:	009a      	lsls	r2, r3, #2
    1fba:	4b3c      	ldr	r3, [pc, #240]	; (20ac <_timer_init+0x1c8>)
    1fbc:	4413      	add	r3, r2
    1fbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	db0d      	blt.n	1fe2 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fc6:	095a      	lsrs	r2, r3, #5
    1fc8:	f003 031f 	and.w	r3, r3, #31
    1fcc:	2101      	movs	r1, #1
    1fce:	fa01 f303 	lsl.w	r3, r1, r3
    1fd2:	3220      	adds	r2, #32
    1fd4:	4937      	ldr	r1, [pc, #220]	; (20b4 <_timer_init+0x1d0>)
    1fd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fde:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1fe2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1fe6:	009a      	lsls	r2, r3, #2
    1fe8:	4b30      	ldr	r3, [pc, #192]	; (20ac <_timer_init+0x1c8>)
    1fea:	4413      	add	r3, r2
    1fec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	db09      	blt.n	2008 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ff4:	095a      	lsrs	r2, r3, #5
    1ff6:	f003 031f 	and.w	r3, r3, #31
    1ffa:	2101      	movs	r1, #1
    1ffc:	fa01 f303 	lsl.w	r3, r1, r3
    2000:	3260      	adds	r2, #96	; 0x60
    2002:	492c      	ldr	r1, [pc, #176]	; (20b4 <_timer_init+0x1d0>)
    2004:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2008:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    200c:	00aa      	lsls	r2, r5, #2
    200e:	4b27      	ldr	r3, [pc, #156]	; (20ac <_timer_init+0x1c8>)
    2010:	4413      	add	r3, r2
    2012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2016:	2b00      	cmp	r3, #0
    2018:	db08      	blt.n	202c <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    201a:	0959      	lsrs	r1, r3, #5
    201c:	f003 031f 	and.w	r3, r3, #31
    2020:	2201      	movs	r2, #1
    2022:	fa02 f303 	lsl.w	r3, r2, r3
    2026:	4a23      	ldr	r2, [pc, #140]	; (20b4 <_timer_init+0x1d0>)
    2028:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    202c:	2000      	movs	r0, #0
    202e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2030:	4b1e      	ldr	r3, [pc, #120]	; (20ac <_timer_init+0x1c8>)
    2032:	440b      	add	r3, r1
    2034:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2036:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2038:	6923      	ldr	r3, [r4, #16]
    203a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    203e:	d1fb      	bne.n	2038 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2040:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2044:	009a      	lsls	r2, r3, #2
    2046:	4b19      	ldr	r3, [pc, #100]	; (20ac <_timer_init+0x1c8>)
    2048:	4413      	add	r3, r2
    204a:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    204c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    204e:	6923      	ldr	r3, [r4, #16]
    2050:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2054:	d1fb      	bne.n	204e <_timer_init+0x16a>
    2056:	e7a7      	b.n	1fa8 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2058:	2b04      	cmp	r3, #4
    205a:	d1a5      	bne.n	1fa8 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    205c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2060:	009a      	lsls	r2, r3, #2
    2062:	4b12      	ldr	r3, [pc, #72]	; (20ac <_timer_init+0x1c8>)
    2064:	4413      	add	r3, r2
    2066:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2068:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    206a:	6923      	ldr	r3, [r4, #16]
    206c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2070:	d1fb      	bne.n	206a <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2072:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2076:	009a      	lsls	r2, r3, #2
    2078:	4b0c      	ldr	r3, [pc, #48]	; (20ac <_timer_init+0x1c8>)
    207a:	4413      	add	r3, r2
    207c:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    207e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2080:	6923      	ldr	r3, [r4, #16]
    2082:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2086:	d1fb      	bne.n	2080 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2088:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    208c:	009a      	lsls	r2, r3, #2
    208e:	4b07      	ldr	r3, [pc, #28]	; (20ac <_timer_init+0x1c8>)
    2090:	4413      	add	r3, r2
    2092:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2094:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2096:	6923      	ldr	r3, [r4, #16]
    2098:	f013 0f20 	tst.w	r3, #32
    209c:	d1fb      	bne.n	2096 <_timer_init+0x1b2>
    209e:	e783      	b.n	1fa8 <_timer_init+0xc4>
    20a0:	00001e6d 	.word	0x00001e6d
    20a4:	00002664 	.word	0x00002664
    20a8:	00001121 	.word	0x00001121
    20ac:	20000000 	.word	0x20000000
    20b0:	00001e45 	.word	0x00001e45
    20b4:	e000e100 	.word	0xe000e100

000020b8 <_pwm_init>:
{
    20b8:	b570      	push	{r4, r5, r6, lr}
    20ba:	4606      	mov	r6, r0
    20bc:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    20be:	4608      	mov	r0, r1
    20c0:	4b59      	ldr	r3, [pc, #356]	; (2228 <_pwm_init+0x170>)
    20c2:	4798      	blx	r3
    20c4:	4605      	mov	r5, r0
	device->hw = hw;
    20c6:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    20c8:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    20ca:	f013 0f01 	tst.w	r3, #1
    20ce:	d119      	bne.n	2104 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20d0:	6923      	ldr	r3, [r4, #16]
    20d2:	f013 0f03 	tst.w	r3, #3
    20d6:	d1fb      	bne.n	20d0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20d8:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    20da:	f013 0f02 	tst.w	r3, #2
    20de:	d00b      	beq.n	20f8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    20e0:	6823      	ldr	r3, [r4, #0]
    20e2:	f023 0302 	bic.w	r3, r3, #2
    20e6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20e8:	6923      	ldr	r3, [r4, #16]
    20ea:	f013 0f03 	tst.w	r3, #3
    20ee:	d1fb      	bne.n	20e8 <_pwm_init+0x30>
    20f0:	6923      	ldr	r3, [r4, #16]
    20f2:	f013 0f02 	tst.w	r3, #2
    20f6:	d1fb      	bne.n	20f0 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20f8:	2301      	movs	r3, #1
    20fa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20fc:	6923      	ldr	r3, [r4, #16]
    20fe:	f013 0f03 	tst.w	r3, #3
    2102:	d1fb      	bne.n	20fc <_pwm_init+0x44>
    2104:	6923      	ldr	r3, [r4, #16]
    2106:	f013 0f01 	tst.w	r3, #1
    210a:	d1fb      	bne.n	2104 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    210c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2110:	009a      	lsls	r2, r3, #2
    2112:	4b46      	ldr	r3, [pc, #280]	; (222c <_pwm_init+0x174>)
    2114:	4413      	add	r3, r2
    2116:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2118:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    211a:	6923      	ldr	r3, [r4, #16]
    211c:	f013 0f03 	tst.w	r3, #3
    2120:	d1fb      	bne.n	211a <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2122:	00aa      	lsls	r2, r5, #2
    2124:	442a      	add	r2, r5
    2126:	0091      	lsls	r1, r2, #2
    2128:	4b40      	ldr	r3, [pc, #256]	; (222c <_pwm_init+0x174>)
    212a:	440b      	add	r3, r1
    212c:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    212e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2130:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2132:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2134:	2203      	movs	r2, #3
    2136:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2138:	685b      	ldr	r3, [r3, #4]
    213a:	f003 030c 	and.w	r3, r3, #12
    213e:	2b08      	cmp	r3, #8
    2140:	d059      	beq.n	21f6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2142:	2b00      	cmp	r3, #0
    2144:	d16b      	bne.n	221e <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2146:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    214a:	009a      	lsls	r2, r3, #2
    214c:	4b37      	ldr	r3, [pc, #220]	; (222c <_pwm_init+0x174>)
    214e:	4413      	add	r3, r2
    2150:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2152:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2154:	6923      	ldr	r3, [r4, #16]
    2156:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    215a:	d1fb      	bne.n	2154 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    215c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2160:	009a      	lsls	r2, r3, #2
    2162:	4b32      	ldr	r3, [pc, #200]	; (222c <_pwm_init+0x174>)
    2164:	4413      	add	r3, r2
    2166:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2168:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    216a:	6923      	ldr	r3, [r4, #16]
    216c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2170:	d1fb      	bne.n	216a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2172:	4631      	mov	r1, r6
    2174:	4620      	mov	r0, r4
    2176:	4b2e      	ldr	r3, [pc, #184]	; (2230 <_pwm_init+0x178>)
    2178:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    217a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    217e:	009a      	lsls	r2, r3, #2
    2180:	4b2a      	ldr	r3, [pc, #168]	; (222c <_pwm_init+0x174>)
    2182:	4413      	add	r3, r2
    2184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2188:	2b00      	cmp	r3, #0
    218a:	db0d      	blt.n	21a8 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    218c:	095a      	lsrs	r2, r3, #5
    218e:	f003 031f 	and.w	r3, r3, #31
    2192:	2101      	movs	r1, #1
    2194:	fa01 f303 	lsl.w	r3, r1, r3
    2198:	3220      	adds	r2, #32
    219a:	4926      	ldr	r1, [pc, #152]	; (2234 <_pwm_init+0x17c>)
    219c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    21a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21a4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    21a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21ac:	009a      	lsls	r2, r3, #2
    21ae:	4b1f      	ldr	r3, [pc, #124]	; (222c <_pwm_init+0x174>)
    21b0:	4413      	add	r3, r2
    21b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    21b6:	2b00      	cmp	r3, #0
    21b8:	db09      	blt.n	21ce <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ba:	095a      	lsrs	r2, r3, #5
    21bc:	f003 031f 	and.w	r3, r3, #31
    21c0:	2101      	movs	r1, #1
    21c2:	fa01 f303 	lsl.w	r3, r1, r3
    21c6:	3260      	adds	r2, #96	; 0x60
    21c8:	491a      	ldr	r1, [pc, #104]	; (2234 <_pwm_init+0x17c>)
    21ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    21ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    21d2:	00aa      	lsls	r2, r5, #2
    21d4:	4b15      	ldr	r3, [pc, #84]	; (222c <_pwm_init+0x174>)
    21d6:	4413      	add	r3, r2
    21d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    21dc:	2b00      	cmp	r3, #0
    21de:	db21      	blt.n	2224 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21e0:	0959      	lsrs	r1, r3, #5
    21e2:	f003 031f 	and.w	r3, r3, #31
    21e6:	2201      	movs	r2, #1
    21e8:	fa02 f303 	lsl.w	r3, r2, r3
    21ec:	4a11      	ldr	r2, [pc, #68]	; (2234 <_pwm_init+0x17c>)
    21ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    21f2:	2000      	movs	r0, #0
    21f4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    21f6:	4b0d      	ldr	r3, [pc, #52]	; (222c <_pwm_init+0x174>)
    21f8:	440b      	add	r3, r1
    21fa:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21fc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21fe:	6923      	ldr	r3, [r4, #16]
    2200:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2204:	d1fb      	bne.n	21fe <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2206:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    220a:	009a      	lsls	r2, r3, #2
    220c:	4b07      	ldr	r3, [pc, #28]	; (222c <_pwm_init+0x174>)
    220e:	4413      	add	r3, r2
    2210:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2212:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2214:	6923      	ldr	r3, [r4, #16]
    2216:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    221a:	d1fb      	bne.n	2214 <_pwm_init+0x15c>
    221c:	e7a9      	b.n	2172 <_pwm_init+0xba>
		return -1;
    221e:	f04f 30ff 	mov.w	r0, #4294967295
    2222:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2224:	2000      	movs	r0, #0
}
    2226:	bd70      	pop	{r4, r5, r6, pc}
    2228:	00001e6d 	.word	0x00001e6d
    222c:	20000000 	.word	0x20000000
    2230:	00001e45 	.word	0x00001e45
    2234:	e000e100 	.word	0xe000e100

00002238 <_tc_get_timer>:
}
    2238:	2000      	movs	r0, #0
    223a:	4770      	bx	lr

0000223c <_tc_get_pwm>:
}
    223c:	2000      	movs	r0, #0
    223e:	4770      	bx	lr

00002240 <TC0_Handler>:
{
    2240:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2242:	4b02      	ldr	r3, [pc, #8]	; (224c <TC0_Handler+0xc>)
    2244:	6818      	ldr	r0, [r3, #0]
    2246:	4b02      	ldr	r3, [pc, #8]	; (2250 <TC0_Handler+0x10>)
    2248:	4798      	blx	r3
    224a:	bd08      	pop	{r3, pc}
    224c:	200001e8 	.word	0x200001e8
    2250:	00001e15 	.word	0x00001e15

00002254 <TC1_Handler>:
{
    2254:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    2256:	4b02      	ldr	r3, [pc, #8]	; (2260 <TC1_Handler+0xc>)
    2258:	6858      	ldr	r0, [r3, #4]
    225a:	4b02      	ldr	r3, [pc, #8]	; (2264 <TC1_Handler+0x10>)
    225c:	4798      	blx	r3
    225e:	bd08      	pop	{r3, pc}
    2260:	200001e8 	.word	0x200001e8
    2264:	00001dfd 	.word	0x00001dfd

00002268 <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2268:	4b14      	ldr	r3, [pc, #80]	; (22bc <I2C_BB_init+0x54>)
    226a:	2201      	movs	r2, #1
    226c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2274:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2278:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    227c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2280:	490f      	ldr	r1, [pc, #60]	; (22c0 <I2C_BB_init+0x58>)
    2282:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2286:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    228a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    228e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2292:	2204      	movs	r2, #4
    2294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    229c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    22a0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    22a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    22a8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22ac:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    22b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22b4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    22b8:	4770      	bx	lr
    22ba:	bf00      	nop
    22bc:	41008000 	.word	0x41008000
    22c0:	c0020000 	.word	0xc0020000

000022c4 <main>:

// ------------ GLOBAL VARIABLES --------
volatile uint32_t dataBuffer[NUM_BUFFERS][BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS];
// --------------------------------------
int main(void)
{
    22c4:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    22c6:	4b04      	ldr	r3, [pc, #16]	; (22d8 <main+0x14>)
    22c8:	4798      	blx	r3

	I2C_BB_init();
    22ca:	4b04      	ldr	r3, [pc, #16]	; (22dc <main+0x18>)
    22cc:	4798      	blx	r3
	dataBuffer[0][0] = 1;
    22ce:	2201      	movs	r2, #1
    22d0:	4b03      	ldr	r3, [pc, #12]	; (22e0 <main+0x1c>)
    22d2:	601a      	str	r2, [r3, #0]
    22d4:	e7fe      	b.n	22d4 <main+0x10>
    22d6:	bf00      	nop
    22d8:	000002d1 	.word	0x000002d1
    22dc:	00002269 	.word	0x00002269
    22e0:	200006d4 	.word	0x200006d4

000022e4 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    22e4:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    22e6:	2300      	movs	r3, #0
    22e8:	b13b      	cbz	r3, 22fa <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    22ea:	4b08      	ldr	r3, [pc, #32]	; (230c <sd_mmc_init+0x28>)
    22ec:	24ff      	movs	r4, #255	; 0xff
    22ee:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    22f0:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    22f2:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    22f4:	635a      	str	r2, [r3, #52]	; 0x34
}
    22f6:	bc30      	pop	{r4, r5}
    22f8:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    22fa:	4c04      	ldr	r4, [pc, #16]	; (230c <sd_mmc_init+0x28>)
    22fc:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    2300:	2504      	movs	r5, #4
    2302:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    2304:	3301      	adds	r3, #1
    2306:	b2db      	uxtb	r3, r3
    2308:	e7ee      	b.n	22e8 <sd_mmc_init+0x4>
    230a:	bf00      	nop
    230c:	200001f0 	.word	0x200001f0

00002310 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    2310:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    2312:	4903      	ldr	r1, [pc, #12]	; (2320 <sd_mmc_stack_init+0x10>)
    2314:	460a      	mov	r2, r1
    2316:	3104      	adds	r1, #4
    2318:	4802      	ldr	r0, [pc, #8]	; (2324 <sd_mmc_stack_init+0x14>)
    231a:	4b03      	ldr	r3, [pc, #12]	; (2328 <sd_mmc_stack_init+0x18>)
    231c:	4798      	blx	r3
    231e:	bd08      	pop	{r3, pc}
    2320:	20000028 	.word	0x20000028
    2324:	20000288 	.word	0x20000288
    2328:	000022e5 	.word	0x000022e5

0000232c <__libc_init_array>:
    232c:	b570      	push	{r4, r5, r6, lr}
    232e:	4e0d      	ldr	r6, [pc, #52]	; (2364 <__libc_init_array+0x38>)
    2330:	4c0d      	ldr	r4, [pc, #52]	; (2368 <__libc_init_array+0x3c>)
    2332:	1ba4      	subs	r4, r4, r6
    2334:	10a4      	asrs	r4, r4, #2
    2336:	2500      	movs	r5, #0
    2338:	42a5      	cmp	r5, r4
    233a:	d109      	bne.n	2350 <__libc_init_array+0x24>
    233c:	4e0b      	ldr	r6, [pc, #44]	; (236c <__libc_init_array+0x40>)
    233e:	4c0c      	ldr	r4, [pc, #48]	; (2370 <__libc_init_array+0x44>)
    2340:	f000 f99a 	bl	2678 <_init>
    2344:	1ba4      	subs	r4, r4, r6
    2346:	10a4      	asrs	r4, r4, #2
    2348:	2500      	movs	r5, #0
    234a:	42a5      	cmp	r5, r4
    234c:	d105      	bne.n	235a <__libc_init_array+0x2e>
    234e:	bd70      	pop	{r4, r5, r6, pc}
    2350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2354:	4798      	blx	r3
    2356:	3501      	adds	r5, #1
    2358:	e7ee      	b.n	2338 <__libc_init_array+0xc>
    235a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    235e:	4798      	blx	r3
    2360:	3501      	adds	r5, #1
    2362:	e7f2      	b.n	234a <__libc_init_array+0x1e>
    2364:	00002684 	.word	0x00002684
    2368:	00002684 	.word	0x00002684
    236c:	00002684 	.word	0x00002684
    2370:	00002688 	.word	0x00002688
    2374:	682f2e2e 	.word	0x682f2e2e
    2378:	732f6c61 	.word	0x732f6c61
    237c:	682f6372 	.word	0x682f6372
    2380:	615f6c61 	.word	0x615f6c61
    2384:	735f6364 	.word	0x735f6364
    2388:	2e636e79 	.word	0x2e636e79
    238c:	00000063 	.word	0x00000063
    2390:	682f2e2e 	.word	0x682f2e2e
    2394:	732f6c61 	.word	0x732f6c61
    2398:	682f6372 	.word	0x682f6372
    239c:	635f6c61 	.word	0x635f6c61
    23a0:	72656d61 	.word	0x72656d61
    23a4:	73615f61 	.word	0x73615f61
    23a8:	2e636e79 	.word	0x2e636e79
    23ac:	00000063 	.word	0x00000063
    23b0:	682f2e2e 	.word	0x682f2e2e
    23b4:	732f6c61 	.word	0x732f6c61
    23b8:	682f6372 	.word	0x682f6372
    23bc:	6d5f6c61 	.word	0x6d5f6c61
    23c0:	735f6963 	.word	0x735f6963
    23c4:	2e636e79 	.word	0x2e636e79
    23c8:	00000063 	.word	0x00000063
    23cc:	682f2e2e 	.word	0x682f2e2e
    23d0:	732f6c61 	.word	0x732f6c61
    23d4:	682f6372 	.word	0x682f6372
    23d8:	705f6c61 	.word	0x705f6c61
    23dc:	632e6d77 	.word	0x632e6d77
    23e0:	00000000 	.word	0x00000000
    23e4:	682f2e2e 	.word	0x682f2e2e
    23e8:	732f6c61 	.word	0x732f6c61
    23ec:	682f6372 	.word	0x682f6372
    23f0:	735f6c61 	.word	0x735f6c61
    23f4:	6d5f6970 	.word	0x6d5f6970
    23f8:	6e79735f 	.word	0x6e79735f
    23fc:	00632e63 	.word	0x00632e63
    2400:	682f2e2e 	.word	0x682f2e2e
    2404:	732f6c61 	.word	0x732f6c61
    2408:	682f6372 	.word	0x682f6372
    240c:	745f6c61 	.word	0x745f6c61
    2410:	72656d69 	.word	0x72656d69
    2414:	0000632e 	.word	0x0000632e
    2418:	682f2e2e 	.word	0x682f2e2e
    241c:	732f6c61 	.word	0x732f6c61
    2420:	682f6372 	.word	0x682f6372
    2424:	755f6c61 	.word	0x755f6c61
    2428:	74726173 	.word	0x74726173
    242c:	6e79735f 	.word	0x6e79735f
    2430:	00632e63 	.word	0x00632e63
    2434:	682f2e2e 	.word	0x682f2e2e
    2438:	752f6c61 	.word	0x752f6c61
    243c:	736c6974 	.word	0x736c6974
    2440:	6372732f 	.word	0x6372732f
    2444:	6974752f 	.word	0x6974752f
    2448:	6c5f736c 	.word	0x6c5f736c
    244c:	2e747369 	.word	0x2e747369
    2450:	00000063 	.word	0x00000063

00002454 <_adcs>:
    2454:	00000000 00000018 00001800 00000000     ................
	...
    246c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    247c:	632e6364 00000000                       dc.c....

00002484 <_cfgs>:
    2484:	00205000 0a000000 00000000 00000000     .P .............
	...

00002584 <_map>:
    2584:	00000006 00000036 00000007 00000037     ....6.......7...
    2594:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    25a4:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    25b4:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    25c4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    25d4:	43000000 43000400                       ...C...C

000025dc <_usarts>:
    25dc:	00000005 40100004 00030000 00700002     .......@......p.
    25ec:	0000ff2e 00000000                       ........

000025f4 <_i2cms>:
	...

0000260c <_i2css>:
	...

0000261c <sercomspi_regs>:
    261c:	0020000c 00020000 00000000 01ff00fe     .. .............
    262c:	00000000 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    263c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    264c:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    265c:	42001400 42001800 682f2e2e 742f6c70     ...B...B../hpl/t
    266c:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00002678 <_init>:
    2678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    267a:	bf00      	nop
    267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    267e:	bc08      	pop	{r3}
    2680:	469e      	mov	lr, r3
    2682:	4770      	bx	lr

00002684 <__init_array_start>:
    2684:	00000289 	.word	0x00000289

00002688 <_fini>:
    2688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268a:	bf00      	nop
    268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    268e:	bc08      	pop	{r3}
    2690:	469e      	mov	lr, r3
    2692:	4770      	bx	lr

00002694 <__fini_array_start>:
    2694:	00000265 	.word	0x00000265
