
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005954  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005954  00005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000003c  20000000  0000595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002003c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002003c  2**0
                  CONTENTS
  5 .bss          00028bb4  20000040  000059a0  00020040  2**4
                  ALLOC
  6 .stack        00010004  20028bf4  0002e554  00020040  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00044ed4  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058f7  00000000  00000000  00064f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000196a8  00000000  00000000  0006a88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001448  00000000  00000000  00083f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014f8  00000000  00000000  0008537e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00032f22  00000000  00000000  00086876  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f1a7  00000000  00000000  000b9798  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100b57  00000000  00000000  000d893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000035b8  00000000  00000000  001d9498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 89 1f 00 00     ................
      8c:	95 1f 00 00 e5 02 00 00 a1 1f 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 ad 1f 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	29 1d 00 00 35 1d 00 00 41 1d 00 00 4d 1d 00 00     )...5...A...M...
      cc:	59 1d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     Y...............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	05 22 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ."..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 01 2d 00 00 15 2d 00 00 29 2d 00 00     .....-...-..)-..
     154:	3d 2d 00 00 00 00 00 00 00 00 00 00 00 00 00 00     =-..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 fd 32 00 00     .............2..
     1f0:	11 33 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .3..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 d9 21 00 00 e5 02 00 00 e5 02 00 00     .....!..........
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	0000595c 	.word	0x0000595c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000595c 	.word	0x0000595c
     2c4:	20000044 	.word	0x20000044
     2c8:	0000595c 	.word	0x0000595c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	000051bd 	.word	0x000051bd

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	0000595c 	.word	0x0000595c
     348:	2000003c 	.word	0x2000003c
     34c:	20000040 	.word	0x20000040
     350:	20028bf4 	.word	0x20028bf4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	000054e9 	.word	0x000054e9
     360:	0000428d 	.word	0x0000428d

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	000032b9 	.word	0x000032b9
     394:	40003c00 	.word	0x40003c00
     398:	20000740 	.word	0x20000740
     39c:	00001361 	.word	0x00001361

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006d0 	.word	0x200006d0
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006bc 	.word	0x200006bc
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006d4 	.word	0x200006d4
     788:	000015dd 	.word	0x000015dd
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000728 	.word	0x20000728
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	000032bd 	.word	0x000032bd
     9d8:	40003800 	.word	0x40003800
     9dc:	200006a0 	.word	0x200006a0
     9e0:	000011f9 	.word	0x000011f9

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001a79 	.word	0x00001a79
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	00005540 	.word	0x00005540
     c6c:	00001671 	.word	0x00001671
     c70:	000019a1 	.word	0x000019a1

00000c74 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
	ASSERT(descr);
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3

	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	00005540 	.word	0x00005540
     c98:	00001671 	.word	0x00001671
     c9c:	000019d9 	.word	0x000019d9

00000ca0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
	uint16_t offset = 0;
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
		buffer[offset] = result;
     d10:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>

	return offset;
}
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	00001671 	.word	0x00001671
     d2c:	000019ef 	.word	0x000019ef
     d30:	00001a0f 	.word	0x00001a0f
     d34:	00001a03 	.word	0x00001a03
     d38:	00001a25 	.word	0x00001a25
     d3c:	00005540 	.word	0x00005540

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	0000555c 	.word	0x0000555c
     d94:	00001671 	.word	0x00001671
     d98:	000021a1 	.word	0x000021a1
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	00002d65 	.word	0x00002d65

00000db4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     db4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	00001a4d 	.word	0x00001a4d
     dd0:	00002d71 	.word	0x00002d71

00000dd4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     dd4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	00001a69 	.word	0x00001a69
     df0:	00002d71 	.word	0x00002d71

00000df4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     df4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0

	while (upper >= lower) {
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
			lower = middle + 1;
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
{
     e38:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
}
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001e29 	.word	0x00001e29

00000e6c <ext_irq_register>:
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     e72:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     e92:	2701      	movs	r7, #1
			break;
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
	bool    found = false;
     e96:	2700      	movs	r7, #0
	if (NULL == cb) {
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
	if (!found) {
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
		if (!found) {
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
				found           = true;
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
	if (!found) {
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
}
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001f31 	.word	0x00001f31

00000f3c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
}
     f58:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
     f64:	0000557c 	.word	0x0000557c
     f68:	00001671 	.word	0x00001671
     f6c:	0000245d 	.word	0x0000245d

00000f70 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
	ASSERT(mci);
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
}
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	0000557c 	.word	0x0000557c
     fa4:	00001671 	.word	0x00001671
     fa8:	000024c5 	.word	0x000024c5

00000fac <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(mci);
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
}
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
     fcc:	0000557c 	.word	0x0000557c
     fd0:	00001671 	.word	0x00001671
     fd4:	00002559 	.word	0x00002559

00000fd8 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
     fd8:	b538      	push	{r3, r4, r5, lr}
     fda:	460d      	mov	r5, r1
	ASSERT(mci);
     fdc:	4604      	mov	r4, r0
     fde:	2256      	movs	r2, #86	; 0x56
     fe0:	4905      	ldr	r1, [pc, #20]	; (ff8 <mci_sync_get_bus_width+0x20>)
     fe2:	3000      	adds	r0, #0
     fe4:	bf18      	it	ne
     fe6:	2001      	movne	r0, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <mci_sync_get_bus_width+0x24>)
     fea:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
     fec:	4629      	mov	r1, r5
     fee:	4620      	mov	r0, r4
     ff0:	4b03      	ldr	r3, [pc, #12]	; (1000 <mci_sync_get_bus_width+0x28>)
     ff2:	4798      	blx	r3
}
     ff4:	bd38      	pop	{r3, r4, r5, pc}
     ff6:	bf00      	nop
     ff8:	0000557c 	.word	0x0000557c
     ffc:	00001671 	.word	0x00001671
    1000:	0000255d 	.word	0x0000255d

00001004 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    1004:	b510      	push	{r4, lr}
	ASSERT(mci);
    1006:	4604      	mov	r4, r0
    1008:	2260      	movs	r2, #96	; 0x60
    100a:	4905      	ldr	r1, [pc, #20]	; (1020 <mci_sync_is_high_speed_capable+0x1c>)
    100c:	3000      	adds	r0, #0
    100e:	bf18      	it	ne
    1010:	2001      	movne	r0, #1
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <mci_sync_is_high_speed_capable+0x20>)
    1014:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    1016:	4620      	mov	r0, r4
    1018:	4b03      	ldr	r3, [pc, #12]	; (1028 <mci_sync_is_high_speed_capable+0x24>)
    101a:	4798      	blx	r3
}
    101c:	bd10      	pop	{r4, pc}
    101e:	bf00      	nop
    1020:	0000557c 	.word	0x0000557c
    1024:	00001671 	.word	0x00001671
    1028:	00002567 	.word	0x00002567

0000102c <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    102c:	b510      	push	{r4, lr}
	ASSERT(mci);
    102e:	4604      	mov	r4, r0
    1030:	2269      	movs	r2, #105	; 0x69
    1032:	4905      	ldr	r1, [pc, #20]	; (1048 <mci_sync_send_clock+0x1c>)
    1034:	3000      	adds	r0, #0
    1036:	bf18      	it	ne
    1038:	2001      	movne	r0, #1
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <mci_sync_send_clock+0x20>)
    103c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    103e:	4620      	mov	r0, r4
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <mci_sync_send_clock+0x24>)
    1042:	4798      	blx	r3
    1044:	bd10      	pop	{r4, pc}
    1046:	bf00      	nop
    1048:	0000557c 	.word	0x0000557c
    104c:	00001671 	.word	0x00001671
    1050:	00002571 	.word	0x00002571

00001054 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    1054:	b570      	push	{r4, r5, r6, lr}
    1056:	460d      	mov	r5, r1
    1058:	4616      	mov	r6, r2
	ASSERT(mci);
    105a:	4604      	mov	r4, r0
    105c:	2272      	movs	r2, #114	; 0x72
    105e:	4906      	ldr	r1, [pc, #24]	; (1078 <mci_sync_send_cmd+0x24>)
    1060:	3000      	adds	r0, #0
    1062:	bf18      	it	ne
    1064:	2001      	movne	r0, #1
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <mci_sync_send_cmd+0x28>)
    1068:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    106a:	4632      	mov	r2, r6
    106c:	4629      	mov	r1, r5
    106e:	4620      	mov	r0, r4
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <mci_sync_send_cmd+0x2c>)
    1072:	4798      	blx	r3
}
    1074:	bd70      	pop	{r4, r5, r6, pc}
    1076:	bf00      	nop
    1078:	0000557c 	.word	0x0000557c
    107c:	00001671 	.word	0x00001671
    1080:	000025a9 	.word	0x000025a9

00001084 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1084:	b510      	push	{r4, lr}
	ASSERT(mci);
    1086:	4604      	mov	r4, r0
    1088:	227b      	movs	r2, #123	; 0x7b
    108a:	4905      	ldr	r1, [pc, #20]	; (10a0 <mci_sync_get_response+0x1c>)
    108c:	3000      	adds	r0, #0
    108e:	bf18      	it	ne
    1090:	2001      	movne	r0, #1
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <mci_sync_get_response+0x20>)
    1094:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    1096:	4620      	mov	r0, r4
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <mci_sync_get_response+0x24>)
    109a:	4798      	blx	r3
}
    109c:	bd10      	pop	{r4, pc}
    109e:	bf00      	nop
    10a0:	0000557c 	.word	0x0000557c
    10a4:	00001671 	.word	0x00001671
    10a8:	00002601 	.word	0x00002601

000010ac <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    10ac:	b538      	push	{r3, r4, r5, lr}
    10ae:	460c      	mov	r4, r1
	ASSERT(mci && response);
    10b0:	4605      	mov	r5, r0
    10b2:	b160      	cbz	r0, 10ce <mci_sync_get_response_128+0x22>
    10b4:	b149      	cbz	r1, 10ca <mci_sync_get_response_128+0x1e>
    10b6:	2001      	movs	r0, #1
    10b8:	2284      	movs	r2, #132	; 0x84
    10ba:	4906      	ldr	r1, [pc, #24]	; (10d4 <mci_sync_get_response_128+0x28>)
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <mci_sync_get_response_128+0x2c>)
    10be:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    10c0:	4621      	mov	r1, r4
    10c2:	4628      	mov	r0, r5
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <mci_sync_get_response_128+0x30>)
    10c6:	4798      	blx	r3
    10c8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    10ca:	2000      	movs	r0, #0
    10cc:	e7f4      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10ce:	2000      	movs	r0, #0
    10d0:	e7f2      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10d2:	bf00      	nop
    10d4:	0000557c 	.word	0x0000557c
    10d8:	00001671 	.word	0x00001671
    10dc:	0000262d 	.word	0x0000262d

000010e0 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	b083      	sub	sp, #12
    10e4:	460d      	mov	r5, r1
    10e6:	4616      	mov	r6, r2
    10e8:	461f      	mov	r7, r3
	ASSERT(mci);
    10ea:	4604      	mov	r4, r0
    10ec:	2290      	movs	r2, #144	; 0x90
    10ee:	490a      	ldr	r1, [pc, #40]	; (1118 <mci_sync_adtc_start+0x38>)
    10f0:	3000      	adds	r0, #0
    10f2:	bf18      	it	ne
    10f4:	2001      	movne	r0, #1
    10f6:	4b09      	ldr	r3, [pc, #36]	; (111c <mci_sync_adtc_start+0x3c>)
    10f8:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    10fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    10fe:	9301      	str	r3, [sp, #4]
    1100:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1104:	9300      	str	r3, [sp, #0]
    1106:	463b      	mov	r3, r7
    1108:	4632      	mov	r2, r6
    110a:	4629      	mov	r1, r5
    110c:	4620      	mov	r0, r4
    110e:	4c04      	ldr	r4, [pc, #16]	; (1120 <mci_sync_adtc_start+0x40>)
    1110:	47a0      	blx	r4
}
    1112:	b003      	add	sp, #12
    1114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1116:	bf00      	nop
    1118:	0000557c 	.word	0x0000557c
    111c:	00001671 	.word	0x00001671
    1120:	00002685 	.word	0x00002685

00001124 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	460c      	mov	r4, r1
    1128:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    112a:	4605      	mov	r5, r0
    112c:	b168      	cbz	r0, 114a <mci_sync_start_read_blocks+0x26>
    112e:	b151      	cbz	r1, 1146 <mci_sync_start_read_blocks+0x22>
    1130:	2001      	movs	r0, #1
    1132:	22b5      	movs	r2, #181	; 0xb5
    1134:	4906      	ldr	r1, [pc, #24]	; (1150 <mci_sync_start_read_blocks+0x2c>)
    1136:	4b07      	ldr	r3, [pc, #28]	; (1154 <mci_sync_start_read_blocks+0x30>)
    1138:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    113a:	4632      	mov	r2, r6
    113c:	4621      	mov	r1, r4
    113e:	4628      	mov	r0, r5
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <mci_sync_start_read_blocks+0x34>)
    1142:	4798      	blx	r3
}
    1144:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    1146:	2000      	movs	r0, #0
    1148:	e7f3      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114a:	2000      	movs	r0, #0
    114c:	e7f1      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114e:	bf00      	nop
    1150:	0000557c 	.word	0x0000557c
    1154:	00001671 	.word	0x00001671
    1158:	000028f1 	.word	0x000028f1

0000115c <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    115c:	b570      	push	{r4, r5, r6, lr}
    115e:	460c      	mov	r4, r1
    1160:	4616      	mov	r6, r2
	ASSERT(mci && src);
    1162:	4605      	mov	r5, r0
    1164:	b168      	cbz	r0, 1182 <mci_sync_start_write_blocks+0x26>
    1166:	b151      	cbz	r1, 117e <mci_sync_start_write_blocks+0x22>
    1168:	2001      	movs	r0, #1
    116a:	22be      	movs	r2, #190	; 0xbe
    116c:	4906      	ldr	r1, [pc, #24]	; (1188 <mci_sync_start_write_blocks+0x2c>)
    116e:	4b07      	ldr	r3, [pc, #28]	; (118c <mci_sync_start_write_blocks+0x30>)
    1170:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    1172:	4632      	mov	r2, r6
    1174:	4621      	mov	r1, r4
    1176:	4628      	mov	r0, r5
    1178:	4b05      	ldr	r3, [pc, #20]	; (1190 <mci_sync_start_write_blocks+0x34>)
    117a:	4798      	blx	r3
}
    117c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    117e:	2000      	movs	r0, #0
    1180:	e7f3      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1182:	2000      	movs	r0, #0
    1184:	e7f1      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1186:	bf00      	nop
    1188:	0000557c 	.word	0x0000557c
    118c:	00001671 	.word	0x00001671
    1190:	00002971 	.word	0x00002971

00001194 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    1194:	b510      	push	{r4, lr}
	ASSERT(mci);
    1196:	4604      	mov	r4, r0
    1198:	22c7      	movs	r2, #199	; 0xc7
    119a:	4905      	ldr	r1, [pc, #20]	; (11b0 <mci_sync_wait_end_of_read_blocks+0x1c>)
    119c:	3000      	adds	r0, #0
    119e:	bf18      	it	ne
    11a0:	2001      	movne	r0, #1
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <mci_sync_wait_end_of_read_blocks+0x20>)
    11a4:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    11a6:	4620      	mov	r0, r4
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <mci_sync_wait_end_of_read_blocks+0x24>)
    11aa:	4798      	blx	r3
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	bf00      	nop
    11b0:	0000557c 	.word	0x0000557c
    11b4:	00001671 	.word	0x00001671
    11b8:	000029f1 	.word	0x000029f1

000011bc <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    11bc:	b510      	push	{r4, lr}
	ASSERT(mci);
    11be:	4604      	mov	r4, r0
    11c0:	22d0      	movs	r2, #208	; 0xd0
    11c2:	4905      	ldr	r1, [pc, #20]	; (11d8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    11c4:	3000      	adds	r0, #0
    11c6:	bf18      	it	ne
    11c8:	2001      	movne	r0, #1
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <mci_sync_wait_end_of_write_blocks+0x20>)
    11cc:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    11ce:	4620      	mov	r0, r4
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <mci_sync_wait_end_of_write_blocks+0x24>)
    11d2:	4798      	blx	r3
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	bf00      	nop
    11d8:	0000557c 	.word	0x0000557c
    11dc:	00001671 	.word	0x00001671
    11e0:	00002a19 	.word	0x00002a19

000011e4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    11e4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    11e6:	6943      	ldr	r3, [r0, #20]
    11e8:	b103      	cbz	r3, 11ec <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    11ea:	4798      	blx	r3
    11ec:	bd08      	pop	{r3, pc}

000011ee <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    11ee:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    11f0:	6983      	ldr	r3, [r0, #24]
    11f2:	b103      	cbz	r3, 11f6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    11f4:	4798      	blx	r3
    11f6:	bd08      	pop	{r3, pc}

000011f8 <pwm_init>:
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11fc:	4604      	mov	r4, r0
    11fe:	b188      	cbz	r0, 1224 <pwm_init+0x2c>
    1200:	b171      	cbz	r1, 1220 <pwm_init+0x28>
    1202:	2001      	movs	r0, #1
    1204:	2233      	movs	r2, #51	; 0x33
    1206:	4908      	ldr	r1, [pc, #32]	; (1228 <pwm_init+0x30>)
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <pwm_init+0x34>)
    120a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    120c:	4629      	mov	r1, r5
    120e:	4620      	mov	r0, r4
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <pwm_init+0x38>)
    1212:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1214:	4b07      	ldr	r3, [pc, #28]	; (1234 <pwm_init+0x3c>)
    1216:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1218:	4b07      	ldr	r3, [pc, #28]	; (1238 <pwm_init+0x40>)
    121a:	6063      	str	r3, [r4, #4]
}
    121c:	2000      	movs	r0, #0
    121e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1220:	2000      	movs	r0, #0
    1222:	e7ef      	b.n	1204 <pwm_init+0xc>
    1224:	2000      	movs	r0, #0
    1226:	e7ed      	b.n	1204 <pwm_init+0xc>
    1228:	00005598 	.word	0x00005598
    122c:	00001671 	.word	0x00001671
    1230:	0000306d 	.word	0x0000306d
    1234:	000011e5 	.word	0x000011e5
    1238:	000011ef 	.word	0x000011ef

0000123c <pwm_enable>:
{
    123c:	b510      	push	{r4, lr}
	ASSERT(descr);
    123e:	4604      	mov	r4, r0
    1240:	224a      	movs	r2, #74	; 0x4a
    1242:	4909      	ldr	r1, [pc, #36]	; (1268 <pwm_enable+0x2c>)
    1244:	3000      	adds	r0, #0
    1246:	bf18      	it	ne
    1248:	2001      	movne	r0, #1
    124a:	4b08      	ldr	r3, [pc, #32]	; (126c <pwm_enable+0x30>)
    124c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    124e:	4620      	mov	r0, r4
    1250:	4b07      	ldr	r3, [pc, #28]	; (1270 <pwm_enable+0x34>)
    1252:	4798      	blx	r3
    1254:	b920      	cbnz	r0, 1260 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    1256:	4620      	mov	r0, r4
    1258:	4b06      	ldr	r3, [pc, #24]	; (1274 <pwm_enable+0x38>)
    125a:	4798      	blx	r3
	return ERR_NONE;
    125c:	2000      	movs	r0, #0
    125e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1260:	f06f 0010 	mvn.w	r0, #16
}
    1264:	bd10      	pop	{r4, pc}
    1266:	bf00      	nop
    1268:	00005598 	.word	0x00005598
    126c:	00001671 	.word	0x00001671
    1270:	000032a7 	.word	0x000032a7
    1274:	00003201 	.word	0x00003201

00001278 <pwm_set_parameters>:
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	460d      	mov	r5, r1
    127c:	4616      	mov	r6, r2
	ASSERT(descr);
    127e:	4604      	mov	r4, r0
    1280:	227c      	movs	r2, #124	; 0x7c
    1282:	4906      	ldr	r1, [pc, #24]	; (129c <pwm_set_parameters+0x24>)
    1284:	3000      	adds	r0, #0
    1286:	bf18      	it	ne
    1288:	2001      	movne	r0, #1
    128a:	4b05      	ldr	r3, [pc, #20]	; (12a0 <pwm_set_parameters+0x28>)
    128c:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    128e:	4632      	mov	r2, r6
    1290:	4629      	mov	r1, r5
    1292:	4620      	mov	r0, r4
    1294:	4b03      	ldr	r3, [pc, #12]	; (12a4 <pwm_set_parameters+0x2c>)
    1296:	4798      	blx	r3
}
    1298:	2000      	movs	r0, #0
    129a:	bd70      	pop	{r4, r5, r6, pc}
    129c:	00005598 	.word	0x00005598
    12a0:	00001671 	.word	0x00001671
    12a4:	00003215 	.word	0x00003215

000012a8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    12a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    12aa:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    12ac:	b117      	cbz	r7, 12b4 <timer_add_timer_task+0xc>
    12ae:	463c      	mov	r4, r7
    12b0:	2600      	movs	r6, #0
    12b2:	e00b      	b.n	12cc <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    12b4:	4b0e      	ldr	r3, [pc, #56]	; (12f0 <timer_add_timer_task+0x48>)
    12b6:	4798      	blx	r3
		return;
    12b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12ba:	68a5      	ldr	r5, [r4, #8]
    12bc:	442b      	add	r3, r5
    12be:	1a9b      	subs	r3, r3, r2
    12c0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    12c2:	688d      	ldr	r5, [r1, #8]
    12c4:	42ab      	cmp	r3, r5
    12c6:	d209      	bcs.n	12dc <timer_add_timer_task+0x34>
			break;
		prev = it;
    12c8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    12ca:	6824      	ldr	r4, [r4, #0]
    12cc:	b134      	cbz	r4, 12dc <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    12ce:	6863      	ldr	r3, [r4, #4]
    12d0:	4293      	cmp	r3, r2
    12d2:	d8f2      	bhi.n	12ba <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    12d4:	68a5      	ldr	r5, [r4, #8]
    12d6:	1a9b      	subs	r3, r3, r2
    12d8:	442b      	add	r3, r5
    12da:	e7f2      	b.n	12c2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    12dc:	42bc      	cmp	r4, r7
    12de:	d003      	beq.n	12e8 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    12e0:	4630      	mov	r0, r6
    12e2:	4b04      	ldr	r3, [pc, #16]	; (12f4 <timer_add_timer_task+0x4c>)
    12e4:	4798      	blx	r3
    12e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    12e8:	4b01      	ldr	r3, [pc, #4]	; (12f0 <timer_add_timer_task+0x48>)
    12ea:	4798      	blx	r3
    12ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ee:	bf00      	nop
    12f0:	0000168d 	.word	0x0000168d
    12f4:	000016b9 	.word	0x000016b9

000012f8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    12f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12fa:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    12fc:	6906      	ldr	r6, [r0, #16]
    12fe:	3601      	adds	r6, #1
    1300:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1302:	7e03      	ldrb	r3, [r0, #24]
    1304:	f013 0f01 	tst.w	r3, #1
    1308:	d105      	bne.n	1316 <timer_process_counted+0x1e>
    130a:	7e03      	ldrb	r3, [r0, #24]
    130c:	f013 0f02 	tst.w	r3, #2
    1310:	d101      	bne.n	1316 <timer_process_counted+0x1e>
    1312:	4605      	mov	r5, r0
    1314:	e009      	b.n	132a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1316:	7e03      	ldrb	r3, [r0, #24]
    1318:	f043 0302 	orr.w	r3, r3, #2
    131c:	7603      	strb	r3, [r0, #24]
		return;
    131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1320:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1322:	68e3      	ldr	r3, [r4, #12]
    1324:	4620      	mov	r0, r4
    1326:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1328:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    132a:	b19c      	cbz	r4, 1354 <timer_process_counted+0x5c>
    132c:	6863      	ldr	r3, [r4, #4]
    132e:	1af3      	subs	r3, r6, r3
    1330:	68a2      	ldr	r2, [r4, #8]
    1332:	4293      	cmp	r3, r2
    1334:	d30e      	bcc.n	1354 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    1336:	f105 0714 	add.w	r7, r5, #20
    133a:	4638      	mov	r0, r7
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <timer_process_counted+0x60>)
    133e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1340:	7c23      	ldrb	r3, [r4, #16]
    1342:	2b01      	cmp	r3, #1
    1344:	d1ec      	bne.n	1320 <timer_process_counted+0x28>
			tmp->time_label = time;
    1346:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1348:	4632      	mov	r2, r6
    134a:	4621      	mov	r1, r4
    134c:	4638      	mov	r0, r7
    134e:	4b03      	ldr	r3, [pc, #12]	; (135c <timer_process_counted+0x64>)
    1350:	4798      	blx	r3
    1352:	e7e5      	b.n	1320 <timer_process_counted+0x28>
    1354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1356:	bf00      	nop
    1358:	000016c1 	.word	0x000016c1
    135c:	000012a9 	.word	0x000012a9

00001360 <timer_init>:
{
    1360:	b538      	push	{r3, r4, r5, lr}
    1362:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1364:	4604      	mov	r4, r0
    1366:	b180      	cbz	r0, 138a <timer_init+0x2a>
    1368:	b169      	cbz	r1, 1386 <timer_init+0x26>
    136a:	2001      	movs	r0, #1
    136c:	223b      	movs	r2, #59	; 0x3b
    136e:	4908      	ldr	r1, [pc, #32]	; (1390 <timer_init+0x30>)
    1370:	4b08      	ldr	r3, [pc, #32]	; (1394 <timer_init+0x34>)
    1372:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1374:	4629      	mov	r1, r5
    1376:	4620      	mov	r0, r4
    1378:	4b07      	ldr	r3, [pc, #28]	; (1398 <timer_init+0x38>)
    137a:	4798      	blx	r3
	descr->time                           = 0;
    137c:	2000      	movs	r0, #0
    137e:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <timer_init+0x3c>)
    1382:	6023      	str	r3, [r4, #0]
}
    1384:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1386:	2000      	movs	r0, #0
    1388:	e7f0      	b.n	136c <timer_init+0xc>
    138a:	2000      	movs	r0, #0
    138c:	e7ee      	b.n	136c <timer_init+0xc>
    138e:	bf00      	nop
    1390:	000055b0 	.word	0x000055b0
    1394:	00001671 	.word	0x00001671
    1398:	00002e99 	.word	0x00002e99
    139c:	000012f9 	.word	0x000012f9

000013a0 <timer_start>:
{
    13a0:	b510      	push	{r4, lr}
	ASSERT(descr);
    13a2:	4604      	mov	r4, r0
    13a4:	2253      	movs	r2, #83	; 0x53
    13a6:	4909      	ldr	r1, [pc, #36]	; (13cc <timer_start+0x2c>)
    13a8:	3000      	adds	r0, #0
    13aa:	bf18      	it	ne
    13ac:	2001      	movne	r0, #1
    13ae:	4b08      	ldr	r3, [pc, #32]	; (13d0 <timer_start+0x30>)
    13b0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    13b2:	4620      	mov	r0, r4
    13b4:	4b07      	ldr	r3, [pc, #28]	; (13d4 <timer_start+0x34>)
    13b6:	4798      	blx	r3
    13b8:	b920      	cbnz	r0, 13c4 <timer_start+0x24>
	_timer_start(&descr->device);
    13ba:	4620      	mov	r0, r4
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <timer_start+0x38>)
    13be:	4798      	blx	r3
	return ERR_NONE;
    13c0:	2000      	movs	r0, #0
    13c2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    13c4:	f06f 0010 	mvn.w	r0, #16
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	bf00      	nop
    13cc:	000055b0 	.word	0x000055b0
    13d0:	00001671 	.word	0x00001671
    13d4:	00003295 	.word	0x00003295
    13d8:	000031ed 	.word	0x000031ed

000013dc <timer_add_task>:
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	b082      	sub	sp, #8
    13e0:	460d      	mov	r5, r1
	ASSERT(descr && task);
    13e2:	4604      	mov	r4, r0
    13e4:	b320      	cbz	r0, 1430 <timer_add_task+0x54>
    13e6:	b309      	cbz	r1, 142c <timer_add_task+0x50>
    13e8:	2001      	movs	r0, #1
    13ea:	227a      	movs	r2, #122	; 0x7a
    13ec:	491f      	ldr	r1, [pc, #124]	; (146c <timer_add_task+0x90>)
    13ee:	4b20      	ldr	r3, [pc, #128]	; (1470 <timer_add_task+0x94>)
    13f0:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    13f2:	7e23      	ldrb	r3, [r4, #24]
    13f4:	f043 0301 	orr.w	r3, r3, #1
    13f8:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    13fa:	f104 0614 	add.w	r6, r4, #20
    13fe:	4629      	mov	r1, r5
    1400:	4630      	mov	r0, r6
    1402:	4b1c      	ldr	r3, [pc, #112]	; (1474 <timer_add_task+0x98>)
    1404:	4798      	blx	r3
    1406:	b9a8      	cbnz	r0, 1434 <timer_add_task+0x58>
	task->time_label = descr->time;
    1408:	6923      	ldr	r3, [r4, #16]
    140a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    140c:	6922      	ldr	r2, [r4, #16]
    140e:	4629      	mov	r1, r5
    1410:	4630      	mov	r0, r6
    1412:	4b19      	ldr	r3, [pc, #100]	; (1478 <timer_add_task+0x9c>)
    1414:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1416:	7e23      	ldrb	r3, [r4, #24]
    1418:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    141c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    141e:	7e23      	ldrb	r3, [r4, #24]
    1420:	f013 0f02 	tst.w	r3, #2
    1424:	d112      	bne.n	144c <timer_add_task+0x70>
	return ERR_NONE;
    1426:	2000      	movs	r0, #0
}
    1428:	b002      	add	sp, #8
    142a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    142c:	2000      	movs	r0, #0
    142e:	e7dc      	b.n	13ea <timer_add_task+0xe>
    1430:	2000      	movs	r0, #0
    1432:	e7da      	b.n	13ea <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1434:	7e23      	ldrb	r3, [r4, #24]
    1436:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    143a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    143c:	227f      	movs	r2, #127	; 0x7f
    143e:	490b      	ldr	r1, [pc, #44]	; (146c <timer_add_task+0x90>)
    1440:	2000      	movs	r0, #0
    1442:	4b0b      	ldr	r3, [pc, #44]	; (1470 <timer_add_task+0x94>)
    1444:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1446:	f06f 0011 	mvn.w	r0, #17
    144a:	e7ed      	b.n	1428 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    144c:	a801      	add	r0, sp, #4
    144e:	4b0b      	ldr	r3, [pc, #44]	; (147c <timer_add_task+0xa0>)
    1450:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1452:	7e23      	ldrb	r3, [r4, #24]
    1454:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1458:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    145a:	4620      	mov	r0, r4
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <timer_add_task+0xa4>)
    145e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1460:	a801      	add	r0, sp, #4
    1462:	4b08      	ldr	r3, [pc, #32]	; (1484 <timer_add_task+0xa8>)
    1464:	4798      	blx	r3
	return ERR_NONE;
    1466:	2000      	movs	r0, #0
    1468:	e7de      	b.n	1428 <timer_add_task+0x4c>
    146a:	bf00      	nop
    146c:	000055b0 	.word	0x000055b0
    1470:	00001671 	.word	0x00001671
    1474:	00001677 	.word	0x00001677
    1478:	000012a9 	.word	0x000012a9
    147c:	00000d41 	.word	0x00000d41
    1480:	000032c1 	.word	0x000032c1
    1484:	00000d4f 	.word	0x00000d4f

00001488 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1488:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    148a:	2300      	movs	r3, #0
    148c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    148e:	69c3      	ldr	r3, [r0, #28]
    1490:	b11b      	cbz	r3, 149a <usart_transmission_complete+0x12>
    1492:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1496:	4610      	mov	r0, r2
    1498:	4798      	blx	r3
    149a:	bd08      	pop	{r3, pc}

0000149c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    149c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    149e:	2300      	movs	r3, #0
    14a0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    14a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    14a4:	b11b      	cbz	r3, 14ae <usart_error+0x12>
    14a6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    14aa:	4610      	mov	r0, r2
    14ac:	4798      	blx	r3
    14ae:	bd08      	pop	{r3, pc}

000014b0 <usart_fill_rx_buffer>:
{
    14b0:	b538      	push	{r3, r4, r5, lr}
    14b2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14b4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    14b8:	302c      	adds	r0, #44	; 0x2c
    14ba:	4b03      	ldr	r3, [pc, #12]	; (14c8 <usart_fill_rx_buffer+0x18>)
    14bc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    14be:	6a23      	ldr	r3, [r4, #32]
    14c0:	b10b      	cbz	r3, 14c6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    14c2:	4628      	mov	r0, r5
    14c4:	4798      	blx	r3
    14c6:	bd38      	pop	{r3, r4, r5, pc}
    14c8:	0000175d 	.word	0x0000175d

000014cc <usart_async_write>:
{
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	460e      	mov	r6, r1
    14d0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    14d2:	4604      	mov	r4, r0
    14d4:	b1d8      	cbz	r0, 150e <usart_async_write+0x42>
    14d6:	b1e1      	cbz	r1, 1512 <usart_async_write+0x46>
    14d8:	b9ea      	cbnz	r2, 1516 <usart_async_write+0x4a>
    14da:	2000      	movs	r0, #0
    14dc:	f240 123b 	movw	r2, #315	; 0x13b
    14e0:	490f      	ldr	r1, [pc, #60]	; (1520 <usart_async_write+0x54>)
    14e2:	4b10      	ldr	r3, [pc, #64]	; (1524 <usart_async_write+0x58>)
    14e4:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    14e6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    14ea:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    14ee:	429a      	cmp	r2, r3
    14f0:	d113      	bne.n	151a <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    14f2:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    14f4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    14fe:	2301      	movs	r3, #1
    1500:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1502:	f104 0008 	add.w	r0, r4, #8
    1506:	4b08      	ldr	r3, [pc, #32]	; (1528 <usart_async_write+0x5c>)
    1508:	4798      	blx	r3
	return (int32_t)length;
    150a:	4628      	mov	r0, r5
    150c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    150e:	2000      	movs	r0, #0
    1510:	e7e4      	b.n	14dc <usart_async_write+0x10>
    1512:	2000      	movs	r0, #0
    1514:	e7e2      	b.n	14dc <usart_async_write+0x10>
    1516:	2001      	movs	r0, #1
    1518:	e7e0      	b.n	14dc <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    151a:	f06f 001b 	mvn.w	r0, #27
}
    151e:	bd70      	pop	{r4, r5, r6, pc}
    1520:	000055c8 	.word	0x000055c8
    1524:	00001671 	.word	0x00001671
    1528:	00002cef 	.word	0x00002cef

0000152c <usart_process_byte_sent>:
{
    152c:	b510      	push	{r4, lr}
    152e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1530:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1532:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1536:	4293      	cmp	r3, r2
    1538:	d009      	beq.n	154e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    153a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    153c:	1c59      	adds	r1, r3, #1
    153e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1540:	5cd1      	ldrb	r1, [r2, r3]
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <usart_process_byte_sent+0x28>)
    1544:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1546:	4620      	mov	r0, r4
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <usart_process_byte_sent+0x2c>)
    154a:	4798      	blx	r3
    154c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    154e:	4b03      	ldr	r3, [pc, #12]	; (155c <usart_process_byte_sent+0x30>)
    1550:	4798      	blx	r3
    1552:	bd10      	pop	{r4, pc}
    1554:	00002ce9 	.word	0x00002ce9
    1558:	00002cef 	.word	0x00002cef
    155c:	00002cf7 	.word	0x00002cf7

00001560 <usart_async_read>:
{
    1560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1564:	b082      	sub	sp, #8
    1566:	4688      	mov	r8, r1
    1568:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    156a:	4605      	mov	r5, r0
    156c:	b1a0      	cbz	r0, 1598 <usart_async_read+0x38>
    156e:	b1a9      	cbz	r1, 159c <usart_async_read+0x3c>
    1570:	b9b2      	cbnz	r2, 15a0 <usart_async_read+0x40>
    1572:	2000      	movs	r0, #0
    1574:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1578:	4912      	ldr	r1, [pc, #72]	; (15c4 <usart_async_read+0x64>)
    157a:	4b13      	ldr	r3, [pc, #76]	; (15c8 <usart_async_read+0x68>)
    157c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    157e:	a801      	add	r0, sp, #4
    1580:	4b12      	ldr	r3, [pc, #72]	; (15cc <usart_async_read+0x6c>)
    1582:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1584:	3534      	adds	r5, #52	; 0x34
    1586:	4628      	mov	r0, r5
    1588:	4b11      	ldr	r3, [pc, #68]	; (15d0 <usart_async_read+0x70>)
    158a:	4798      	blx	r3
    158c:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    158e:	a801      	add	r0, sp, #4
    1590:	4b10      	ldr	r3, [pc, #64]	; (15d4 <usart_async_read+0x74>)
    1592:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1594:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1596:	e00b      	b.n	15b0 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    1598:	2000      	movs	r0, #0
    159a:	e7eb      	b.n	1574 <usart_async_read+0x14>
    159c:	2000      	movs	r0, #0
    159e:	e7e9      	b.n	1574 <usart_async_read+0x14>
    15a0:	2001      	movs	r0, #1
    15a2:	e7e7      	b.n	1574 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    15a4:	3401      	adds	r4, #1
    15a6:	b2a4      	uxth	r4, r4
    15a8:	4441      	add	r1, r8
    15aa:	4628      	mov	r0, r5
    15ac:	4b0a      	ldr	r3, [pc, #40]	; (15d8 <usart_async_read+0x78>)
    15ae:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    15b0:	4621      	mov	r1, r4
    15b2:	42a7      	cmp	r7, r4
    15b4:	d901      	bls.n	15ba <usart_async_read+0x5a>
    15b6:	42b4      	cmp	r4, r6
    15b8:	d3f4      	bcc.n	15a4 <usart_async_read+0x44>
}
    15ba:	4620      	mov	r0, r4
    15bc:	b002      	add	sp, #8
    15be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15c2:	bf00      	nop
    15c4:	000055c8 	.word	0x000055c8
    15c8:	00001671 	.word	0x00001671
    15cc:	00000d41 	.word	0x00000d41
    15d0:	0000179d 	.word	0x0000179d
    15d4:	00000d4f 	.word	0x00000d4f
    15d8:	00001715 	.word	0x00001715

000015dc <usart_async_init>:
{
    15dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15de:	460d      	mov	r5, r1
    15e0:	4616      	mov	r6, r2
    15e2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    15e4:	4604      	mov	r4, r0
    15e6:	b318      	cbz	r0, 1630 <usart_async_init+0x54>
    15e8:	b321      	cbz	r1, 1634 <usart_async_init+0x58>
    15ea:	b32a      	cbz	r2, 1638 <usart_async_init+0x5c>
    15ec:	bb33      	cbnz	r3, 163c <usart_async_init+0x60>
    15ee:	2000      	movs	r0, #0
    15f0:	223a      	movs	r2, #58	; 0x3a
    15f2:	4915      	ldr	r1, [pc, #84]	; (1648 <usart_async_init+0x6c>)
    15f4:	4b15      	ldr	r3, [pc, #84]	; (164c <usart_async_init+0x70>)
    15f6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    15f8:	463a      	mov	r2, r7
    15fa:	4631      	mov	r1, r6
    15fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <usart_async_init+0x74>)
    1602:	4798      	blx	r3
    1604:	b9e0      	cbnz	r0, 1640 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    1606:	4629      	mov	r1, r5
    1608:	f104 0008 	add.w	r0, r4, #8
    160c:	4b11      	ldr	r3, [pc, #68]	; (1654 <usart_async_init+0x78>)
    160e:	4798      	blx	r3
	if (init_status) {
    1610:	4603      	mov	r3, r0
    1612:	b958      	cbnz	r0, 162c <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    1614:	4a10      	ldr	r2, [pc, #64]	; (1658 <usart_async_init+0x7c>)
    1616:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1618:	4a10      	ldr	r2, [pc, #64]	; (165c <usart_async_init+0x80>)
    161a:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    161c:	4a10      	ldr	r2, [pc, #64]	; (1660 <usart_async_init+0x84>)
    161e:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <usart_async_init+0x88>)
    1622:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1624:	4a10      	ldr	r2, [pc, #64]	; (1668 <usart_async_init+0x8c>)
    1626:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1628:	4a10      	ldr	r2, [pc, #64]	; (166c <usart_async_init+0x90>)
    162a:	6162      	str	r2, [r4, #20]
}
    162c:	4618      	mov	r0, r3
    162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1630:	2000      	movs	r0, #0
    1632:	e7dd      	b.n	15f0 <usart_async_init+0x14>
    1634:	2000      	movs	r0, #0
    1636:	e7db      	b.n	15f0 <usart_async_init+0x14>
    1638:	2000      	movs	r0, #0
    163a:	e7d9      	b.n	15f0 <usart_async_init+0x14>
    163c:	2001      	movs	r0, #1
    163e:	e7d7      	b.n	15f0 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    1640:	f06f 030c 	mvn.w	r3, #12
    1644:	e7f2      	b.n	162c <usart_async_init+0x50>
    1646:	bf00      	nop
    1648:	000055c8 	.word	0x000055c8
    164c:	00001671 	.word	0x00001671
    1650:	000016d1 	.word	0x000016d1
    1654:	00002c65 	.word	0x00002c65
    1658:	00001561 	.word	0x00001561
    165c:	000014cd 	.word	0x000014cd
    1660:	0000152d 	.word	0x0000152d
    1664:	000014b1 	.word	0x000014b1
    1668:	00001489 	.word	0x00001489
    166c:	0000149d 	.word	0x0000149d

00001670 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1670:	b900      	cbnz	r0, 1674 <assert+0x4>
		__asm("BKPT #0");
    1672:	be00      	bkpt	0x0000
    1674:	4770      	bx	lr

00001676 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1676:	6803      	ldr	r3, [r0, #0]
    1678:	b11b      	cbz	r3, 1682 <is_list_element+0xc>
		if (it == element) {
    167a:	428b      	cmp	r3, r1
    167c:	d003      	beq.n	1686 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	e7fa      	b.n	1678 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1682:	2000      	movs	r0, #0
    1684:	4770      	bx	lr
			return true;
    1686:	2001      	movs	r0, #1
}
    1688:	4770      	bx	lr
	...

0000168c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    168c:	b538      	push	{r3, r4, r5, lr}
    168e:	4604      	mov	r4, r0
    1690:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <list_insert_as_head+0x20>)
    1694:	4798      	blx	r3
    1696:	f080 0001 	eor.w	r0, r0, #1
    169a:	2239      	movs	r2, #57	; 0x39
    169c:	4904      	ldr	r1, [pc, #16]	; (16b0 <list_insert_as_head+0x24>)
    169e:	b2c0      	uxtb	r0, r0
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <list_insert_as_head+0x28>)
    16a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    16a4:	6823      	ldr	r3, [r4, #0]
    16a6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    16a8:	6025      	str	r5, [r4, #0]
    16aa:	bd38      	pop	{r3, r4, r5, pc}
    16ac:	00001677 	.word	0x00001677
    16b0:	000055e8 	.word	0x000055e8
    16b4:	00001671 	.word	0x00001671

000016b8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    16b8:	6803      	ldr	r3, [r0, #0]
    16ba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    16bc:	6001      	str	r1, [r0, #0]
    16be:	4770      	bx	lr

000016c0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    16c0:	6803      	ldr	r3, [r0, #0]
    16c2:	b11b      	cbz	r3, 16cc <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    16c4:	681a      	ldr	r2, [r3, #0]
    16c6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    16c8:	4618      	mov	r0, r3
    16ca:	4770      	bx	lr
	}

	return NULL;
    16cc:	2000      	movs	r0, #0
}
    16ce:	4770      	bx	lr

000016d0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	460e      	mov	r6, r1
    16d4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    16d6:	4604      	mov	r4, r0
    16d8:	b178      	cbz	r0, 16fa <ringbuffer_init+0x2a>
    16da:	b181      	cbz	r1, 16fe <ringbuffer_init+0x2e>
    16dc:	b98a      	cbnz	r2, 1702 <ringbuffer_init+0x32>
    16de:	2000      	movs	r0, #0
    16e0:	2228      	movs	r2, #40	; 0x28
    16e2:	490a      	ldr	r1, [pc, #40]	; (170c <ringbuffer_init+0x3c>)
    16e4:	4b0a      	ldr	r3, [pc, #40]	; (1710 <ringbuffer_init+0x40>)
    16e6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    16e8:	1e6b      	subs	r3, r5, #1
    16ea:	421d      	tst	r5, r3
    16ec:	d10b      	bne.n	1706 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    16ee:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    16f0:	2000      	movs	r0, #0
    16f2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    16f4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    16f6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    16f8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    16fa:	2000      	movs	r0, #0
    16fc:	e7f0      	b.n	16e0 <ringbuffer_init+0x10>
    16fe:	2000      	movs	r0, #0
    1700:	e7ee      	b.n	16e0 <ringbuffer_init+0x10>
    1702:	2001      	movs	r0, #1
    1704:	e7ec      	b.n	16e0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1706:	f06f 000c 	mvn.w	r0, #12
}
    170a:	bd70      	pop	{r4, r5, r6, pc}
    170c:	00005608 	.word	0x00005608
    1710:	00001671 	.word	0x00001671

00001714 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1714:	b538      	push	{r3, r4, r5, lr}
    1716:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1718:	4604      	mov	r4, r0
    171a:	b1a8      	cbz	r0, 1748 <ringbuffer_get+0x34>
    171c:	b191      	cbz	r1, 1744 <ringbuffer_get+0x30>
    171e:	2001      	movs	r0, #1
    1720:	2240      	movs	r2, #64	; 0x40
    1722:	490c      	ldr	r1, [pc, #48]	; (1754 <ringbuffer_get+0x40>)
    1724:	4b0c      	ldr	r3, [pc, #48]	; (1758 <ringbuffer_get+0x44>)
    1726:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1728:	68e2      	ldr	r2, [r4, #12]
    172a:	68a3      	ldr	r3, [r4, #8]
    172c:	429a      	cmp	r2, r3
    172e:	d00d      	beq.n	174c <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    1730:	6822      	ldr	r2, [r4, #0]
    1732:	6861      	ldr	r1, [r4, #4]
    1734:	400b      	ands	r3, r1
    1736:	5cd3      	ldrb	r3, [r2, r3]
    1738:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    173a:	68a3      	ldr	r3, [r4, #8]
    173c:	3301      	adds	r3, #1
    173e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1740:	2000      	movs	r0, #0
    1742:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    1744:	2000      	movs	r0, #0
    1746:	e7eb      	b.n	1720 <ringbuffer_get+0xc>
    1748:	2000      	movs	r0, #0
    174a:	e7e9      	b.n	1720 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    174c:	f06f 0009 	mvn.w	r0, #9
}
    1750:	bd38      	pop	{r3, r4, r5, pc}
    1752:	bf00      	nop
    1754:	00005608 	.word	0x00005608
    1758:	00001671 	.word	0x00001671

0000175c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    175c:	b538      	push	{r3, r4, r5, lr}
    175e:	460d      	mov	r5, r1
	ASSERT(rb);
    1760:	4604      	mov	r4, r0
    1762:	2251      	movs	r2, #81	; 0x51
    1764:	490b      	ldr	r1, [pc, #44]	; (1794 <ringbuffer_put+0x38>)
    1766:	3000      	adds	r0, #0
    1768:	bf18      	it	ne
    176a:	2001      	movne	r0, #1
    176c:	4b0a      	ldr	r3, [pc, #40]	; (1798 <ringbuffer_put+0x3c>)
    176e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1770:	6822      	ldr	r2, [r4, #0]
    1772:	68e3      	ldr	r3, [r4, #12]
    1774:	6861      	ldr	r1, [r4, #4]
    1776:	400b      	ands	r3, r1
    1778:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    177a:	68e3      	ldr	r3, [r4, #12]
    177c:	68a2      	ldr	r2, [r4, #8]
    177e:	1a9a      	subs	r2, r3, r2
    1780:	6861      	ldr	r1, [r4, #4]
    1782:	428a      	cmp	r2, r1
    1784:	d901      	bls.n	178a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1786:	1a59      	subs	r1, r3, r1
    1788:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    178a:	3301      	adds	r3, #1
    178c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    178e:	2000      	movs	r0, #0
    1790:	bd38      	pop	{r3, r4, r5, pc}
    1792:	bf00      	nop
    1794:	00005608 	.word	0x00005608
    1798:	00001671 	.word	0x00001671

0000179c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    179c:	b510      	push	{r4, lr}
	ASSERT(rb);
    179e:	4604      	mov	r4, r0
    17a0:	2267      	movs	r2, #103	; 0x67
    17a2:	4905      	ldr	r1, [pc, #20]	; (17b8 <ringbuffer_num+0x1c>)
    17a4:	3000      	adds	r0, #0
    17a6:	bf18      	it	ne
    17a8:	2001      	movne	r0, #1
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <ringbuffer_num+0x20>)
    17ac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    17ae:	68e0      	ldr	r0, [r4, #12]
    17b0:	68a3      	ldr	r3, [r4, #8]
}
    17b2:	1ac0      	subs	r0, r0, r3
    17b4:	bd10      	pop	{r4, pc}
    17b6:	bf00      	nop
    17b8:	00005608 	.word	0x00005608
    17bc:	00001671 	.word	0x00001671

000017c0 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    17c0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    17c4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    17c8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    17cc:	4770      	bx	lr
	...

000017d0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    17d0:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    17d2:	4b60      	ldr	r3, [pc, #384]	; (1954 <_adc_init+0x184>)
    17d4:	4298      	cmp	r0, r3
    17d6:	f000 809c 	beq.w	1912 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    17da:	4b5f      	ldr	r3, [pc, #380]	; (1958 <_adc_init+0x188>)
    17dc:	4298      	cmp	r0, r3
    17de:	f000 80a8 	beq.w	1932 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    17e2:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    17e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    17e6:	f013 0f01 	tst.w	r3, #1
    17ea:	d11b      	bne.n	1824 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17ee:	f013 0f03 	tst.w	r3, #3
    17f2:	d1fb      	bne.n	17ec <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    17f4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    17f6:	f013 0f02 	tst.w	r3, #2
    17fa:	d00d      	beq.n	1818 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    17fc:	8803      	ldrh	r3, [r0, #0]
    17fe:	b29b      	uxth	r3, r3
    1800:	f023 0302 	bic.w	r3, r3, #2
    1804:	b29b      	uxth	r3, r3
    1806:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1808:	6b03      	ldr	r3, [r0, #48]	; 0x30
    180a:	f013 0f03 	tst.w	r3, #3
    180e:	d1fb      	bne.n	1808 <_adc_init+0x38>
    1810:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1812:	f013 0f02 	tst.w	r3, #2
    1816:	d1fb      	bne.n	1810 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1818:	2301      	movs	r3, #1
    181a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    181c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    181e:	f013 0f03 	tst.w	r3, #3
    1822:	d1fb      	bne.n	181c <_adc_init+0x4c>
    1824:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1826:	f013 0f01 	tst.w	r3, #1
    182a:	d1fb      	bne.n	1824 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    182c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1830:	2316      	movs	r3, #22
    1832:	4a4a      	ldr	r2, [pc, #296]	; (195c <_adc_init+0x18c>)
    1834:	fb03 2301 	mla	r3, r3, r1, r2
    1838:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    183a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    183c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1842:	2b00      	cmp	r3, #0
    1844:	d1fa      	bne.n	183c <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1846:	2316      	movs	r3, #22
    1848:	4a44      	ldr	r2, [pc, #272]	; (195c <_adc_init+0x18c>)
    184a:	fb03 2301 	mla	r3, r3, r1, r2
    184e:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1850:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1852:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1854:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1858:	2b00      	cmp	r3, #0
    185a:	d1fa      	bne.n	1852 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    185c:	2316      	movs	r3, #22
    185e:	4a3f      	ldr	r2, [pc, #252]	; (195c <_adc_init+0x18c>)
    1860:	fb03 2301 	mla	r3, r3, r1, r2
    1864:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1866:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1868:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    186a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    186c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1872:	2b00      	cmp	r3, #0
    1874:	d1fa      	bne.n	186c <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1876:	2316      	movs	r3, #22
    1878:	4a38      	ldr	r2, [pc, #224]	; (195c <_adc_init+0x18c>)
    187a:	fb03 2301 	mla	r3, r3, r1, r2
    187e:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1880:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1882:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1884:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1888:	2b00      	cmp	r3, #0
    188a:	d1fa      	bne.n	1882 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    188c:	2316      	movs	r3, #22
    188e:	4a33      	ldr	r2, [pc, #204]	; (195c <_adc_init+0x18c>)
    1890:	fb03 2301 	mla	r3, r3, r1, r2
    1894:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    1896:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1898:	6b03      	ldr	r3, [r0, #48]	; 0x30
    189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    189e:	2b00      	cmp	r3, #0
    18a0:	d1fa      	bne.n	1898 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    18a2:	2316      	movs	r3, #22
    18a4:	4a2d      	ldr	r2, [pc, #180]	; (195c <_adc_init+0x18c>)
    18a6:	fb03 2301 	mla	r3, r3, r1, r2
    18aa:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    18ac:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    18b4:	d1fb      	bne.n	18ae <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    18b6:	2316      	movs	r3, #22
    18b8:	4a28      	ldr	r2, [pc, #160]	; (195c <_adc_init+0x18c>)
    18ba:	fb03 2301 	mla	r3, r3, r1, r2
    18be:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    18c0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18c4:	f413 7f80 	tst.w	r3, #256	; 0x100
    18c8:	d1fb      	bne.n	18c2 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    18ca:	2316      	movs	r3, #22
    18cc:	4a23      	ldr	r2, [pc, #140]	; (195c <_adc_init+0x18c>)
    18ce:	fb03 2301 	mla	r3, r3, r1, r2
    18d2:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    18d4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18d8:	f413 7f00 	tst.w	r3, #512	; 0x200
    18dc:	d1fb      	bne.n	18d6 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    18de:	2316      	movs	r3, #22
    18e0:	4a1e      	ldr	r2, [pc, #120]	; (195c <_adc_init+0x18c>)
    18e2:	fb03 2301 	mla	r3, r3, r1, r2
    18e6:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    18e8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
    18f0:	d1fb      	bne.n	18ea <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    18f2:	2216      	movs	r2, #22
    18f4:	4b19      	ldr	r3, [pc, #100]	; (195c <_adc_init+0x18c>)
    18f6:	fb02 3101 	mla	r1, r2, r1, r3
    18fa:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    18fc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    18fe:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1900:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1902:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1904:	f013 0f03 	tst.w	r3, #3
    1908:	d1fb      	bne.n	1902 <_adc_init+0x132>

	return ERR_NONE;
}
    190a:	2000      	movs	r0, #0
    190c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1910:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1912:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	095a      	lsrs	r2, r3, #5
    191a:	0212      	lsls	r2, r2, #8
    191c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1920:	0a1c      	lsrs	r4, r3, #8
    1922:	0124      	lsls	r4, r4, #4
    1924:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1928:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    192a:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    192e:	431a      	orrs	r2, r3
    1930:	e758      	b.n	17e4 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1932:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	0cda      	lsrs	r2, r3, #19
    193a:	0212      	lsls	r2, r2, #8
    193c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1940:	0d9c      	lsrs	r4, r3, #22
    1942:	0124      	lsls	r4, r4, #4
    1944:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1948:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    194a:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    194e:	431a      	orrs	r2, r3
    1950:	e748      	b.n	17e4 <_adc_init+0x14>
    1952:	bf00      	nop
    1954:	43001c00 	.word	0x43001c00
    1958:	43002000 	.word	0x43002000
    195c:	0000562c 	.word	0x0000562c

00001960 <_adc_get_regs>:
{
    1960:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1962:	4b0b      	ldr	r3, [pc, #44]	; (1990 <_adc_get_regs+0x30>)
    1964:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1966:	2300      	movs	r3, #0
    1968:	b13b      	cbz	r3, 197a <_adc_get_regs+0x1a>
	ASSERT(false);
    196a:	2288      	movs	r2, #136	; 0x88
    196c:	4909      	ldr	r1, [pc, #36]	; (1994 <_adc_get_regs+0x34>)
    196e:	2000      	movs	r0, #0
    1970:	4b09      	ldr	r3, [pc, #36]	; (1998 <_adc_get_regs+0x38>)
    1972:	4798      	blx	r3
	return 0;
    1974:	2300      	movs	r3, #0
}
    1976:	4618      	mov	r0, r3
    1978:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    197a:	2216      	movs	r2, #22
    197c:	fb02 f203 	mul.w	r2, r2, r3
    1980:	4906      	ldr	r1, [pc, #24]	; (199c <_adc_get_regs+0x3c>)
    1982:	5c8a      	ldrb	r2, [r1, r2]
    1984:	4290      	cmp	r0, r2
    1986:	d0f6      	beq.n	1976 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1988:	3301      	adds	r3, #1
    198a:	b2db      	uxtb	r3, r3
    198c:	e7ec      	b.n	1968 <_adc_get_regs+0x8>
    198e:	bf00      	nop
    1990:	000017c1 	.word	0x000017c1
    1994:	00005644 	.word	0x00005644
    1998:	00001671 	.word	0x00001671
    199c:	0000562c 	.word	0x0000562c

000019a0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    19a0:	b538      	push	{r3, r4, r5, lr}
    19a2:	460c      	mov	r4, r1
	ASSERT(device);
    19a4:	4605      	mov	r5, r0
    19a6:	22d9      	movs	r2, #217	; 0xd9
    19a8:	4907      	ldr	r1, [pc, #28]	; (19c8 <_adc_sync_init+0x28>)
    19aa:	3000      	adds	r0, #0
    19ac:	bf18      	it	ne
    19ae:	2001      	movne	r0, #1
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <_adc_sync_init+0x2c>)
    19b2:	4798      	blx	r3

	device->hw = hw;
    19b4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    19b6:	4620      	mov	r0, r4
    19b8:	4b05      	ldr	r3, [pc, #20]	; (19d0 <_adc_sync_init+0x30>)
    19ba:	4798      	blx	r3
    19bc:	4601      	mov	r1, r0
    19be:	4620      	mov	r0, r4
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <_adc_sync_init+0x34>)
    19c2:	4798      	blx	r3
}
    19c4:	bd38      	pop	{r3, r4, r5, pc}
    19c6:	bf00      	nop
    19c8:	00005644 	.word	0x00005644
    19cc:	00001671 	.word	0x00001671
    19d0:	00001961 	.word	0x00001961
    19d4:	000017d1 	.word	0x000017d1

000019d8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    19d8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19da:	8813      	ldrh	r3, [r2, #0]
    19dc:	b29b      	uxth	r3, r3
    19de:	f043 0302 	orr.w	r3, r3, #2
    19e2:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19e6:	f013 0f03 	tst.w	r3, #3
    19ea:	d1fb      	bne.n	19e4 <_adc_sync_enable_channel+0xc>
}
    19ec:	4770      	bx	lr

000019ee <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19ee:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    19f0:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    19f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    19f6:	2b03      	cmp	r3, #3
    19f8:	d001      	beq.n	19fe <_adc_sync_get_data_size+0x10>
    19fa:	2002      	movs	r0, #2
}
    19fc:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19fe:	2001      	movs	r0, #1
    1a00:	4770      	bx	lr

00001a02 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1a02:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1a04:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    1a08:	f000 0001 	and.w	r0, r0, #1
    1a0c:	4770      	bx	lr

00001a0e <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1a0e:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1a10:	7d13      	ldrb	r3, [r2, #20]
    1a12:	f043 0302 	orr.w	r3, r3, #2
    1a16:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a18:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d1fa      	bne.n	1a18 <_adc_sync_convert+0xa>
}
    1a22:	4770      	bx	lr

00001a24 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1a24:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    1a26:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    1a2a:	b280      	uxth	r0, r0
    1a2c:	4770      	bx	lr
	...

00001a30 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a30:	0943      	lsrs	r3, r0, #5
    1a32:	f000 001f 	and.w	r0, r0, #31
    1a36:	2201      	movs	r2, #1
    1a38:	fa02 f000 	lsl.w	r0, r2, r0
    1a3c:	3340      	adds	r3, #64	; 0x40
    1a3e:	4a02      	ldr	r2, [pc, #8]	; (1a48 <_irq_set+0x18>)
    1a40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1a44:	4770      	bx	lr
    1a46:	bf00      	nop
    1a48:	e000e100 	.word	0xe000e100

00001a4c <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1a4c:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a50:	fb03 f000 	mul.w	r0, r3, r0
    1a54:	3801      	subs	r0, #1
    1a56:	4b03      	ldr	r3, [pc, #12]	; (1a64 <_get_cycles_for_us+0x18>)
    1a58:	fba3 3000 	umull	r3, r0, r3, r0
    1a5c:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a5e:	3001      	adds	r0, #1
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop
    1a64:	cccccccd 	.word	0xcccccccd

00001a68 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    1a68:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a6c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a70:	2364      	movs	r3, #100	; 0x64
    1a72:	fb03 f000 	mul.w	r0, r3, r0
    1a76:	4770      	bx	lr

00001a78 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a78:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1a7a:	4a0d      	ldr	r2, [pc, #52]	; (1ab0 <_init_chip+0x38>)
    1a7c:	8813      	ldrh	r3, [r2, #0]
    1a7e:	b29b      	uxth	r3, r3
    1a80:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1a82:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <_init_chip+0x3c>)
    1a84:	4798      	blx	r3
	_oscctrl_init_sources();
    1a86:	4b0c      	ldr	r3, [pc, #48]	; (1ab8 <_init_chip+0x40>)
    1a88:	4798      	blx	r3
	_mclk_init();
    1a8a:	4b0c      	ldr	r3, [pc, #48]	; (1abc <_init_chip+0x44>)
    1a8c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1a8e:	200c      	movs	r0, #12
    1a90:	4c0b      	ldr	r4, [pc, #44]	; (1ac0 <_init_chip+0x48>)
    1a92:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1a94:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <_init_chip+0x4c>)
    1a96:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1a98:	f640 70f3 	movw	r0, #4083	; 0xff3
    1a9c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1a9e:	4a0a      	ldr	r2, [pc, #40]	; (1ac8 <_init_chip+0x50>)
    1aa0:	6913      	ldr	r3, [r2, #16]
    1aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1aa6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <_init_chip+0x54>)
    1aaa:	4798      	blx	r3
    1aac:	bd10      	pop	{r4, pc}
    1aae:	bf00      	nop
    1ab0:	41004000 	.word	0x41004000
    1ab4:	0000203d 	.word	0x0000203d
    1ab8:	0000205d 	.word	0x0000205d
    1abc:	00002031 	.word	0x00002031
    1ac0:	00001fb9 	.word	0x00001fb9
    1ac4:	00002061 	.word	0x00002061
    1ac8:	40000800 	.word	0x40000800
    1acc:	00001b39 	.word	0x00001b39

00001ad0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1ad0:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1ad2:	4a17      	ldr	r2, [pc, #92]	; (1b30 <_dmac_handler+0x60>)
    1ad4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1ad6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1ada:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1ade:	0088      	lsls	r0, r1, #2
    1ae0:	4914      	ldr	r1, [pc, #80]	; (1b34 <_dmac_handler+0x64>)
    1ae2:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1ae4:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1ae6:	f412 7f80 	tst.w	r2, #256	; 0x100
    1aea:	d105      	bne.n	1af8 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1aec:	4a10      	ldr	r2, [pc, #64]	; (1b30 <_dmac_handler+0x60>)
    1aee:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1af0:	f412 7f00 	tst.w	r2, #512	; 0x200
    1af4:	d10b      	bne.n	1b0e <_dmac_handler+0x3e>
    1af6:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1af8:	011a      	lsls	r2, r3, #4
    1afa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1afe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b02:	2101      	movs	r1, #1
    1b04:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1b08:	6843      	ldr	r3, [r0, #4]
    1b0a:	4798      	blx	r3
    1b0c:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1b0e:	011a      	lsls	r2, r3, #4
    1b10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b14:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b18:	2102      	movs	r1, #2
    1b1a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b22:	fa03 f201 	lsl.w	r2, r3, r1
    1b26:	4b03      	ldr	r3, [pc, #12]	; (1b34 <_dmac_handler+0x64>)
    1b28:	589b      	ldr	r3, [r3, r2]
    1b2a:	4798      	blx	r3
	}
}
    1b2c:	e7e3      	b.n	1af6 <_dmac_handler+0x26>
    1b2e:	bf00      	nop
    1b30:	4100a000 	.word	0x4100a000
    1b34:	20000090 	.word	0x20000090

00001b38 <_dma_init>:
{
    1b38:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1b3a:	4a3c      	ldr	r2, [pc, #240]	; (1c2c <_dma_init+0xf4>)
    1b3c:	8813      	ldrh	r3, [r2, #0]
    1b3e:	b29b      	uxth	r3, r3
    1b40:	f023 0302 	bic.w	r3, r3, #2
    1b44:	b29b      	uxth	r3, r3
    1b46:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1b48:	8853      	ldrh	r3, [r2, #2]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1b50:	b29b      	uxth	r3, r3
    1b52:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1b54:	8813      	ldrh	r3, [r2, #0]
    1b56:	b29b      	uxth	r3, r3
    1b58:	f043 0301 	orr.w	r3, r3, #1
    1b5c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1b5e:	4b33      	ldr	r3, [pc, #204]	; (1c2c <_dma_init+0xf4>)
    1b60:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1b62:	f013 0f01 	tst.w	r3, #1
    1b66:	d1fa      	bne.n	1b5e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1b68:	4a30      	ldr	r2, [pc, #192]	; (1c2c <_dma_init+0xf4>)
    1b6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1b6e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1b70:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1b72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1b76:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1b78:	2300      	movs	r3, #0
    1b7a:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1b7c:	492c      	ldr	r1, [pc, #176]	; (1c30 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1b7e:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1b80:	492c      	ldr	r1, [pc, #176]	; (1c34 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1b82:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1b84:	e016      	b.n	1bb4 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1b86:	4a2c      	ldr	r2, [pc, #176]	; (1c38 <_dma_init+0x100>)
    1b88:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1b8c:	4c27      	ldr	r4, [pc, #156]	; (1c2c <_dma_init+0xf4>)
    1b8e:	1d19      	adds	r1, r3, #4
    1b90:	0109      	lsls	r1, r1, #4
    1b92:	1860      	adds	r0, r4, r1
    1b94:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1b96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b9a:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1b9c:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1b9e:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1ba0:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1ba2:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1ba4:	4922      	ldr	r1, [pc, #136]	; (1c30 <_dma_init+0xf8>)
    1ba6:	011a      	lsls	r2, r3, #4
    1ba8:	1888      	adds	r0, r1, r2
    1baa:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1bac:	2200      	movs	r2, #0
    1bae:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1bb0:	3301      	adds	r3, #1
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	2b1f      	cmp	r3, #31
    1bb6:	d9e6      	bls.n	1b86 <_dma_init+0x4e>
    1bb8:	2300      	movs	r3, #0
    1bba:	e00a      	b.n	1bd2 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1bbc:	f103 011f 	add.w	r1, r3, #31
    1bc0:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	da10      	bge.n	1be8 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bc6:	2a00      	cmp	r2, #0
    1bc8:	da1c      	bge.n	1c04 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1bca:	2a00      	cmp	r2, #0
    1bcc:	da24      	bge.n	1c18 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1bce:	3301      	adds	r3, #1
    1bd0:	b2db      	uxtb	r3, r3
    1bd2:	2b04      	cmp	r3, #4
    1bd4:	d9f2      	bls.n	1bbc <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1bd6:	4a15      	ldr	r2, [pc, #84]	; (1c2c <_dma_init+0xf4>)
    1bd8:	8813      	ldrh	r3, [r2, #0]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	f043 0302 	orr.w	r3, r3, #2
    1be0:	8013      	strh	r3, [r2, #0]
}
    1be2:	2000      	movs	r0, #0
    1be4:	bc30      	pop	{r4, r5}
    1be6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be8:	0950      	lsrs	r0, r2, #5
    1bea:	f001 051f 	and.w	r5, r1, #31
    1bee:	2401      	movs	r4, #1
    1bf0:	40ac      	lsls	r4, r5
    1bf2:	3020      	adds	r0, #32
    1bf4:	4d11      	ldr	r5, [pc, #68]	; (1c3c <_dma_init+0x104>)
    1bf6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bfe:	f3bf 8f6f 	isb	sy
    1c02:	e7e0      	b.n	1bc6 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c04:	0950      	lsrs	r0, r2, #5
    1c06:	f001 051f 	and.w	r5, r1, #31
    1c0a:	2401      	movs	r4, #1
    1c0c:	40ac      	lsls	r4, r5
    1c0e:	3060      	adds	r0, #96	; 0x60
    1c10:	4d0a      	ldr	r5, [pc, #40]	; (1c3c <_dma_init+0x104>)
    1c12:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1c16:	e7d8      	b.n	1bca <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c18:	0952      	lsrs	r2, r2, #5
    1c1a:	f001 011f 	and.w	r1, r1, #31
    1c1e:	2001      	movs	r0, #1
    1c20:	fa00 f101 	lsl.w	r1, r0, r1
    1c24:	4805      	ldr	r0, [pc, #20]	; (1c3c <_dma_init+0x104>)
    1c26:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1c2a:	e7d0      	b.n	1bce <_dma_init+0x96>
    1c2c:	4100a000 	.word	0x4100a000
    1c30:	20000760 	.word	0x20000760
    1c34:	20000960 	.word	0x20000960
    1c38:	0000565c 	.word	0x0000565c
    1c3c:	e000e100 	.word	0xe000e100

00001c40 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1c40:	4b02      	ldr	r3, [pc, #8]	; (1c4c <_dma_set_destination_address+0xc>)
    1c42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c46:	6081      	str	r1, [r0, #8]
}
    1c48:	2000      	movs	r0, #0
    1c4a:	4770      	bx	lr
    1c4c:	20000760 	.word	0x20000760

00001c50 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1c50:	4b02      	ldr	r3, [pc, #8]	; (1c5c <_dma_set_source_address+0xc>)
    1c52:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c56:	6041      	str	r1, [r0, #4]
}
    1c58:	2000      	movs	r0, #0
    1c5a:	4770      	bx	lr
    1c5c:	20000760 	.word	0x20000760

00001c60 <_dma_set_DESCADDR>:
	_descriptor_section[channel].DESCADDR.reg = src;
    1c60:	4b02      	ldr	r3, [pc, #8]	; (1c6c <_dma_set_DESCADDR+0xc>)
    1c62:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c66:	60c1      	str	r1, [r0, #12]
}
    1c68:	2000      	movs	r0, #0
    1c6a:	4770      	bx	lr
    1c6c:	20000760 	.word	0x20000760

00001c70 <_dma_get_WRB_data>:
	return _write_back_section[channel].BTCNT.reg;
    1c70:	4b02      	ldr	r3, [pc, #8]	; (1c7c <_dma_get_WRB_data+0xc>)
    1c72:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c76:	8840      	ldrh	r0, [r0, #2]
}
    1c78:	b280      	uxth	r0, r0
    1c7a:	4770      	bx	lr
    1c7c:	20000960 	.word	0x20000960

00001c80 <_dma_set_data_amount>:
{
    1c80:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    1c82:	4c14      	ldr	r4, [pc, #80]	; (1cd4 <_dma_set_data_amount+0x54>)
    1c84:	0102      	lsls	r2, r0, #4
    1c86:	18a3      	adds	r3, r4, r2
    1c88:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1c8a:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1c8c:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1c90:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    1c92:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1c96:	d006      	beq.n	1ca6 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1c98:	fa01 f403 	lsl.w	r4, r1, r3
    1c9c:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1c9e:	4a0d      	ldr	r2, [pc, #52]	; (1cd4 <_dma_set_data_amount+0x54>)
    1ca0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1ca4:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1ca6:	4c0b      	ldr	r4, [pc, #44]	; (1cd4 <_dma_set_data_amount+0x54>)
    1ca8:	0102      	lsls	r2, r0, #4
    1caa:	18a5      	adds	r5, r4, r2
    1cac:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1cae:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1cb0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1cb4:	d005      	beq.n	1cc2 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1cb6:	fa01 f303 	lsl.w	r3, r1, r3
    1cba:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1cbc:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1cc0:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1cc2:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1cc4:	4b03      	ldr	r3, [pc, #12]	; (1cd4 <_dma_set_data_amount+0x54>)
    1cc6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1cca:	8041      	strh	r1, [r0, #2]
}
    1ccc:	2000      	movs	r0, #0
    1cce:	bc30      	pop	{r4, r5}
    1cd0:	4770      	bx	lr
    1cd2:	bf00      	nop
    1cd4:	20000760 	.word	0x20000760

00001cd8 <_dma_enable_transaction>:
{
    1cd8:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1cda:	4c0c      	ldr	r4, [pc, #48]	; (1d0c <_dma_enable_transaction+0x34>)
    1cdc:	0102      	lsls	r2, r0, #4
    1cde:	5aa3      	ldrh	r3, [r4, r2]
    1ce0:	b29b      	uxth	r3, r3
    1ce2:	f043 0301 	orr.w	r3, r3, #1
    1ce6:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1ce8:	4c09      	ldr	r4, [pc, #36]	; (1d10 <_dma_enable_transaction+0x38>)
    1cea:	1d03      	adds	r3, r0, #4
    1cec:	011b      	lsls	r3, r3, #4
    1cee:	58e2      	ldr	r2, [r4, r3]
    1cf0:	f042 0202 	orr.w	r2, r2, #2
    1cf4:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1cf6:	b129      	cbz	r1, 1d04 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1cf8:	2301      	movs	r3, #1
    1cfa:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1cfe:	6922      	ldr	r2, [r4, #16]
    1d00:	4310      	orrs	r0, r2
    1d02:	6120      	str	r0, [r4, #16]
}
    1d04:	2000      	movs	r0, #0
    1d06:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d0a:	4770      	bx	lr
    1d0c:	20000760 	.word	0x20000760
    1d10:	4100a000 	.word	0x4100a000

00001d14 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1d14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1d18:	008a      	lsls	r2, r1, #2
    1d1a:	4b02      	ldr	r3, [pc, #8]	; (1d24 <_dma_get_channel_resource+0x10>)
    1d1c:	4413      	add	r3, r2
    1d1e:	6003      	str	r3, [r0, #0]
}
    1d20:	2000      	movs	r0, #0
    1d22:	4770      	bx	lr
    1d24:	20000090 	.word	0x20000090

00001d28 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1d28:	b508      	push	{r3, lr}
	_dmac_handler();
    1d2a:	4b01      	ldr	r3, [pc, #4]	; (1d30 <DMAC_0_Handler+0x8>)
    1d2c:	4798      	blx	r3
    1d2e:	bd08      	pop	{r3, pc}
    1d30:	00001ad1 	.word	0x00001ad1

00001d34 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1d34:	b508      	push	{r3, lr}
	_dmac_handler();
    1d36:	4b01      	ldr	r3, [pc, #4]	; (1d3c <DMAC_1_Handler+0x8>)
    1d38:	4798      	blx	r3
    1d3a:	bd08      	pop	{r3, pc}
    1d3c:	00001ad1 	.word	0x00001ad1

00001d40 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1d40:	b508      	push	{r3, lr}
	_dmac_handler();
    1d42:	4b01      	ldr	r3, [pc, #4]	; (1d48 <DMAC_2_Handler+0x8>)
    1d44:	4798      	blx	r3
    1d46:	bd08      	pop	{r3, pc}
    1d48:	00001ad1 	.word	0x00001ad1

00001d4c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1d4c:	b508      	push	{r3, lr}
	_dmac_handler();
    1d4e:	4b01      	ldr	r3, [pc, #4]	; (1d54 <DMAC_3_Handler+0x8>)
    1d50:	4798      	blx	r3
    1d52:	bd08      	pop	{r3, pc}
    1d54:	00001ad1 	.word	0x00001ad1

00001d58 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1d58:	b508      	push	{r3, lr}
	_dmac_handler();
    1d5a:	4b01      	ldr	r3, [pc, #4]	; (1d60 <DMAC_4_Handler+0x8>)
    1d5c:	4798      	blx	r3
    1d5e:	bd08      	pop	{r3, pc}
    1d60:	00001ad1 	.word	0x00001ad1

00001d64 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
    1d66:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1d68:	4b2a      	ldr	r3, [pc, #168]	; (1e14 <_ext_irq_handler+0xb0>)
    1d6a:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1d6c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1d6e:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1d70:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1d72:	4b29      	ldr	r3, [pc, #164]	; (1e18 <_ext_irq_handler+0xb4>)
    1d74:	6818      	ldr	r0, [r3, #0]
    1d76:	22f4      	movs	r2, #244	; 0xf4
    1d78:	4928      	ldr	r1, [pc, #160]	; (1e1c <_ext_irq_handler+0xb8>)
    1d7a:	3000      	adds	r0, #0
    1d7c:	bf18      	it	ne
    1d7e:	2001      	movne	r0, #1
    1d80:	4b27      	ldr	r3, [pc, #156]	; (1e20 <_ext_irq_handler+0xbc>)
    1d82:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1d84:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1d88:	e035      	b.n	1df6 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1d8a:	4b26      	ldr	r3, [pc, #152]	; (1e24 <_ext_irq_handler+0xc0>)
    1d8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1d90:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1d92:	f1b5 3fff 	cmp.w	r5, #4294967295
    1d96:	d003      	beq.n	1da0 <_ext_irq_handler+0x3c>
				callback(pin);
    1d98:	4b1f      	ldr	r3, [pc, #124]	; (1e18 <_ext_irq_handler+0xb4>)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	4628      	mov	r0, r5
    1d9e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1da0:	2301      	movs	r3, #1
    1da2:	40a3      	lsls	r3, r4
    1da4:	9c01      	ldr	r4, [sp, #4]
    1da6:	ea24 0403 	bic.w	r4, r4, r3
    1daa:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	fa93 f4a3 	rbit	r4, r3
    1db2:	fab4 f484 	clz	r4, r4
    1db6:	b90b      	cbnz	r3, 1dbc <_ext_irq_handler+0x58>
    1db8:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1dbc:	f1b4 3fff 	cmp.w	r4, #4294967295
    1dc0:	d014      	beq.n	1dec <_ext_irq_handler+0x88>
    1dc2:	2004      	movs	r0, #4
    1dc4:	2100      	movs	r1, #0
    1dc6:	e001      	b.n	1dcc <_ext_irq_handler+0x68>
					upper = middle - 1;
    1dc8:	3b01      	subs	r3, #1
    1dca:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1dcc:	4281      	cmp	r1, r0
    1dce:	d8e0      	bhi.n	1d92 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1dd0:	1843      	adds	r3, r0, r1
    1dd2:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1dd6:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1dd8:	4a12      	ldr	r2, [pc, #72]	; (1e24 <_ext_irq_handler+0xc0>)
    1dda:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1dde:	42a2      	cmp	r2, r4
    1de0:	d0d3      	beq.n	1d8a <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1de2:	42a2      	cmp	r2, r4
    1de4:	daf0      	bge.n	1dc8 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1de6:	3301      	adds	r3, #1
    1de8:	b2d9      	uxtb	r1, r3
    1dea:	e7ef      	b.n	1dcc <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1dec:	4b09      	ldr	r3, [pc, #36]	; (1e14 <_ext_irq_handler+0xb0>)
    1dee:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1df0:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1df2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1df4:	615a      	str	r2, [r3, #20]
	while (flags) {
    1df6:	9b01      	ldr	r3, [sp, #4]
    1df8:	b14b      	cbz	r3, 1e0e <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1dfa:	9b01      	ldr	r3, [sp, #4]
    1dfc:	fa93 f4a3 	rbit	r4, r3
    1e00:	fab4 f484 	clz	r4, r4
    1e04:	2b00      	cmp	r3, #0
    1e06:	d1d9      	bne.n	1dbc <_ext_irq_handler+0x58>
    1e08:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1e0c:	e7d6      	b.n	1dbc <_ext_irq_handler+0x58>
	}
}
    1e0e:	b002      	add	sp, #8
    1e10:	bd70      	pop	{r4, r5, r6, pc}
    1e12:	bf00      	nop
    1e14:	40002800 	.word	0x40002800
    1e18:	20000210 	.word	0x20000210
    1e1c:	0000577c 	.word	0x0000577c
    1e20:	00001671 	.word	0x00001671
    1e24:	0000575c 	.word	0x0000575c

00001e28 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1e28:	4b3d      	ldr	r3, [pc, #244]	; (1f20 <_ext_irq_init+0xf8>)
    1e2a:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1e2c:	f013 0f01 	tst.w	r3, #1
    1e30:	d120      	bne.n	1e74 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e32:	4b3b      	ldr	r3, [pc, #236]	; (1f20 <_ext_irq_init+0xf8>)
    1e34:	685b      	ldr	r3, [r3, #4]
    1e36:	f013 0f03 	tst.w	r3, #3
    1e3a:	d1fa      	bne.n	1e32 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1e3c:	4b38      	ldr	r3, [pc, #224]	; (1f20 <_ext_irq_init+0xf8>)
    1e3e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1e40:	f013 0f02 	tst.w	r3, #2
    1e44:	d00e      	beq.n	1e64 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1e46:	4a36      	ldr	r2, [pc, #216]	; (1f20 <_ext_irq_init+0xf8>)
    1e48:	7813      	ldrb	r3, [r2, #0]
    1e4a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1e4e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e50:	4b33      	ldr	r3, [pc, #204]	; (1f20 <_ext_irq_init+0xf8>)
    1e52:	685b      	ldr	r3, [r3, #4]
    1e54:	f013 0f03 	tst.w	r3, #3
    1e58:	d1fa      	bne.n	1e50 <_ext_irq_init+0x28>
    1e5a:	4b31      	ldr	r3, [pc, #196]	; (1f20 <_ext_irq_init+0xf8>)
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	f013 0f02 	tst.w	r3, #2
    1e62:	d1fa      	bne.n	1e5a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1e64:	2201      	movs	r2, #1
    1e66:	4b2e      	ldr	r3, [pc, #184]	; (1f20 <_ext_irq_init+0xf8>)
    1e68:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e6a:	4b2d      	ldr	r3, [pc, #180]	; (1f20 <_ext_irq_init+0xf8>)
    1e6c:	685b      	ldr	r3, [r3, #4]
    1e6e:	f013 0f03 	tst.w	r3, #3
    1e72:	d1fa      	bne.n	1e6a <_ext_irq_init+0x42>
    1e74:	4b2a      	ldr	r3, [pc, #168]	; (1f20 <_ext_irq_init+0xf8>)
    1e76:	685b      	ldr	r3, [r3, #4]
    1e78:	f013 0f01 	tst.w	r3, #1
    1e7c:	d1fa      	bne.n	1e74 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1e7e:	4a28      	ldr	r2, [pc, #160]	; (1f20 <_ext_irq_init+0xf8>)
    1e80:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1e82:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1e86:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e88:	4b25      	ldr	r3, [pc, #148]	; (1f20 <_ext_irq_init+0xf8>)
    1e8a:	685b      	ldr	r3, [r3, #4]
    1e8c:	f013 0f03 	tst.w	r3, #3
    1e90:	d1fa      	bne.n	1e88 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1e92:	4b23      	ldr	r3, [pc, #140]	; (1f20 <_ext_irq_init+0xf8>)
    1e94:	2200      	movs	r2, #0
    1e96:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1e98:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1e9a:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1e9c:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1e9e:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1ea0:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1ea4:	61da      	str	r2, [r3, #28]
    1ea6:	4a1f      	ldr	r2, [pc, #124]	; (1f24 <_ext_irq_init+0xfc>)
    1ea8:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1eaa:	781a      	ldrb	r2, [r3, #0]
    1eac:	f042 0202 	orr.w	r2, r2, #2
    1eb0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1eb2:	4b1b      	ldr	r3, [pc, #108]	; (1f20 <_ext_irq_init+0xf8>)
    1eb4:	685b      	ldr	r3, [r3, #4]
    1eb6:	f013 0f03 	tst.w	r3, #3
    1eba:	d1fa      	bne.n	1eb2 <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ebc:	4b1a      	ldr	r3, [pc, #104]	; (1f28 <_ext_irq_init+0x100>)
    1ebe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ec6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1eca:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ece:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ed2:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ed4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ee0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ee4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ee8:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ef6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1efa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1efe:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f0c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f14:	601a      	str	r2, [r3, #0]
	callback = cb;
    1f16:	4b05      	ldr	r3, [pc, #20]	; (1f2c <_ext_irq_init+0x104>)
    1f18:	6018      	str	r0, [r3, #0]
}
    1f1a:	2000      	movs	r0, #0
    1f1c:	4770      	bx	lr
    1f1e:	bf00      	nop
    1f20:	40002800 	.word	0x40002800
    1f24:	0a0000b0 	.word	0x0a0000b0
    1f28:	e000e100 	.word	0xe000e100
    1f2c:	20000210 	.word	0x20000210

00001f30 <_ext_irq_enable>:
{
    1f30:	b410      	push	{r4}
	uint8_t i      = 0;
    1f32:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1f34:	2b03      	cmp	r3, #3
    1f36:	d80d      	bhi.n	1f54 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1f38:	461c      	mov	r4, r3
    1f3a:	4a11      	ldr	r2, [pc, #68]	; (1f80 <_ext_irq_enable+0x50>)
    1f3c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1f40:	6852      	ldr	r2, [r2, #4]
    1f42:	4282      	cmp	r2, r0
    1f44:	d002      	beq.n	1f4c <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1f46:	3301      	adds	r3, #1
    1f48:	b2db      	uxtb	r3, r3
    1f4a:	e7f3      	b.n	1f34 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1f4c:	4b0c      	ldr	r3, [pc, #48]	; (1f80 <_ext_irq_enable+0x50>)
    1f4e:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1f52:	e000      	b.n	1f56 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1f54:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1f56:	2aff      	cmp	r2, #255	; 0xff
    1f58:	d00f      	beq.n	1f7a <_ext_irq_enable+0x4a>
	if (enable) {
    1f5a:	b941      	cbnz	r1, 1f6e <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1f5c:	2301      	movs	r3, #1
    1f5e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1f60:	4a08      	ldr	r2, [pc, #32]	; (1f84 <_ext_irq_enable+0x54>)
    1f62:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1f64:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1f66:	2000      	movs	r0, #0
}
    1f68:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f6c:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1f6e:	2301      	movs	r3, #1
    1f70:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1f72:	4a04      	ldr	r2, [pc, #16]	; (1f84 <_ext_irq_enable+0x54>)
    1f74:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1f76:	2000      	movs	r0, #0
    1f78:	e7f6      	b.n	1f68 <_ext_irq_enable+0x38>
		return -1;
    1f7a:	f04f 30ff 	mov.w	r0, #4294967295
    1f7e:	e7f3      	b.n	1f68 <_ext_irq_enable+0x38>
    1f80:	0000575c 	.word	0x0000575c
    1f84:	40002800 	.word	0x40002800

00001f88 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1f88:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1f8a:	4b01      	ldr	r3, [pc, #4]	; (1f90 <EIC_6_Handler+0x8>)
    1f8c:	4798      	blx	r3
    1f8e:	bd08      	pop	{r3, pc}
    1f90:	00001d65 	.word	0x00001d65

00001f94 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1f94:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1f96:	4b01      	ldr	r3, [pc, #4]	; (1f9c <EIC_7_Handler+0x8>)
    1f98:	4798      	blx	r3
    1f9a:	bd08      	pop	{r3, pc}
    1f9c:	00001d65 	.word	0x00001d65

00001fa0 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1fa0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fa2:	4b01      	ldr	r3, [pc, #4]	; (1fa8 <EIC_9_Handler+0x8>)
    1fa4:	4798      	blx	r3
    1fa6:	bd08      	pop	{r3, pc}
    1fa8:	00001d65 	.word	0x00001d65

00001fac <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1fac:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fae:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <EIC_14_Handler+0x8>)
    1fb0:	4798      	blx	r3
    1fb2:	bd08      	pop	{r3, pc}
    1fb4:	00001d65 	.word	0x00001d65

00001fb8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1fb8:	f010 0f01 	tst.w	r0, #1
    1fbc:	d008      	beq.n	1fd0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1fbe:	4a17      	ldr	r2, [pc, #92]	; (201c <_gclk_init_generators_by_fref+0x64>)
    1fc0:	4b17      	ldr	r3, [pc, #92]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1fc2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1fc4:	4b16      	ldr	r3, [pc, #88]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1fc6:	685a      	ldr	r2, [r3, #4]
    1fc8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1fcc:	421a      	tst	r2, r3
    1fce:	d1f9      	bne.n	1fc4 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1fd0:	f010 0f02 	tst.w	r0, #2
    1fd4:	d008      	beq.n	1fe8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1fd6:	4a13      	ldr	r2, [pc, #76]	; (2024 <_gclk_init_generators_by_fref+0x6c>)
    1fd8:	4b11      	ldr	r3, [pc, #68]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1fda:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1fdc:	4b10      	ldr	r3, [pc, #64]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1fde:	685a      	ldr	r2, [r3, #4]
    1fe0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1fe4:	421a      	tst	r2, r3
    1fe6:	d1f9      	bne.n	1fdc <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1fe8:	f010 0f04 	tst.w	r0, #4
    1fec:	d008      	beq.n	2000 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1fee:	4a0e      	ldr	r2, [pc, #56]	; (2028 <_gclk_init_generators_by_fref+0x70>)
    1ff0:	4b0b      	ldr	r3, [pc, #44]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1ff2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ff4:	4b0a      	ldr	r3, [pc, #40]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    1ff6:	685a      	ldr	r2, [r3, #4]
    1ff8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ffc:	421a      	tst	r2, r3
    1ffe:	d1f9      	bne.n	1ff4 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2000:	f010 0f08 	tst.w	r0, #8
    2004:	d008      	beq.n	2018 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2006:	4a09      	ldr	r2, [pc, #36]	; (202c <_gclk_init_generators_by_fref+0x74>)
    2008:	4b05      	ldr	r3, [pc, #20]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    200a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    200c:	4b04      	ldr	r3, [pc, #16]	; (2020 <_gclk_init_generators_by_fref+0x68>)
    200e:	685a      	ldr	r2, [r3, #4]
    2010:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2014:	421a      	tst	r2, r3
    2016:	d1f9      	bne.n	200c <_gclk_init_generators_by_fref+0x54>
    2018:	4770      	bx	lr
    201a:	bf00      	nop
    201c:	00020107 	.word	0x00020107
    2020:	40001c00 	.word	0x40001c00
    2024:	00020b07 	.word	0x00020b07
    2028:	00010105 	.word	0x00010105
    202c:	00100106 	.word	0x00100106

00002030 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2030:	2201      	movs	r2, #1
    2032:	4b01      	ldr	r3, [pc, #4]	; (2038 <_mclk_init+0x8>)
    2034:	715a      	strb	r2, [r3, #5]
    2036:	4770      	bx	lr
    2038:	40000800 	.word	0x40000800

0000203c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    203c:	4b06      	ldr	r3, [pc, #24]	; (2058 <_osc32kctrl_init_sources+0x1c>)
    203e:	f242 228e 	movw	r2, #8846	; 0x228e
    2042:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2044:	2200      	movs	r2, #0
    2046:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2048:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    204a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    204c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2050:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2052:	2201      	movs	r2, #1
    2054:	741a      	strb	r2, [r3, #16]
    2056:	4770      	bx	lr
    2058:	40001400 	.word	0x40001400

0000205c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    205c:	4770      	bx	lr
	...

00002060 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2060:	4a49      	ldr	r2, [pc, #292]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    2062:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2064:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2068:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    206c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    206e:	4b46      	ldr	r3, [pc, #280]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    2070:	685a      	ldr	r2, [r3, #4]
    2072:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2076:	421a      	tst	r2, r3
    2078:	d1f9      	bne.n	206e <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    207a:	4b43      	ldr	r3, [pc, #268]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    207c:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    207e:	f013 0f04 	tst.w	r3, #4
    2082:	d1fa      	bne.n	207a <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2084:	4b41      	ldr	r3, [pc, #260]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2086:	2200      	movs	r2, #0
    2088:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    208a:	2142      	movs	r1, #66	; 0x42
    208c:	4a3e      	ldr	r2, [pc, #248]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    208e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2092:	4a3f      	ldr	r2, [pc, #252]	; (2190 <_oscctrl_init_referenced_generators+0x130>)
    2094:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2096:	4b3d      	ldr	r3, [pc, #244]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2098:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    209c:	f013 0f10 	tst.w	r3, #16
    20a0:	d1f9      	bne.n	2096 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    20a2:	2200      	movs	r2, #0
    20a4:	4b39      	ldr	r3, [pc, #228]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20a6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20aa:	4b38      	ldr	r3, [pc, #224]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    20b0:	f013 0f04 	tst.w	r3, #4
    20b4:	d1f9      	bne.n	20aa <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    20b6:	2202      	movs	r2, #2
    20b8:	4b34      	ldr	r3, [pc, #208]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20ba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20bc:	4b33      	ldr	r3, [pc, #204]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    20c2:	f013 0f02 	tst.w	r3, #2
    20c6:	d1f9      	bne.n	20bc <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    20c8:	4b30      	ldr	r3, [pc, #192]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    20cc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20ce:	4b2f      	ldr	r3, [pc, #188]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    20d4:	f013 0f08 	tst.w	r3, #8
    20d8:	d1f9      	bne.n	20ce <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    20da:	2281      	movs	r2, #129	; 0x81
    20dc:	4b2b      	ldr	r3, [pc, #172]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20de:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20e2:	4b2a      	ldr	r3, [pc, #168]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    20e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    20e8:	f013 0f04 	tst.w	r3, #4
    20ec:	d1f9      	bne.n	20e2 <_oscctrl_init_referenced_generators+0x82>
    20ee:	2243      	movs	r2, #67	; 0x43
    20f0:	4b25      	ldr	r3, [pc, #148]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    20f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    20f6:	2227      	movs	r2, #39	; 0x27
    20f8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    20fc:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    20fe:	4b23      	ldr	r3, [pc, #140]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2102:	f013 0f06 	tst.w	r3, #6
    2106:	d1fa      	bne.n	20fe <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2108:	4b20      	ldr	r3, [pc, #128]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    210a:	2200      	movs	r2, #0
    210c:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    210e:	2202      	movs	r2, #2
    2110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2114:	4b1d      	ldr	r3, [pc, #116]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2118:	f013 0f02 	tst.w	r3, #2
    211c:	d1fa      	bne.n	2114 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    211e:	4b1b      	ldr	r3, [pc, #108]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2120:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2124:	f013 0f01 	tst.w	r3, #1
    2128:	d027      	beq.n	217a <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    212a:	4b18      	ldr	r3, [pc, #96]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    212c:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    212e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2132:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2136:	d1f8      	bne.n	212a <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2138:	4b14      	ldr	r3, [pc, #80]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    213c:	f013 0f01 	tst.w	r3, #1
    2140:	d104      	bne.n	214c <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2142:	4b12      	ldr	r3, [pc, #72]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    2144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2146:	f013 0f02 	tst.w	r3, #2
    214a:	d0f5      	beq.n	2138 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    214c:	4b0e      	ldr	r3, [pc, #56]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    214e:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2150:	2b00      	cmp	r3, #0
    2152:	d1fb      	bne.n	214c <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2154:	4a0c      	ldr	r2, [pc, #48]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    2156:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2158:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    215c:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2160:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2162:	4b09      	ldr	r3, [pc, #36]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    2164:	685a      	ldr	r2, [r3, #4]
    2166:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    216a:	421a      	tst	r2, r3
    216c:	d1f9      	bne.n	2162 <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    216e:	4b06      	ldr	r3, [pc, #24]	; (2188 <_oscctrl_init_referenced_generators+0x128>)
    2170:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2172:	f013 0f04 	tst.w	r3, #4
    2176:	d1fa      	bne.n	216e <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    2178:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    217a:	4b04      	ldr	r3, [pc, #16]	; (218c <_oscctrl_init_referenced_generators+0x12c>)
    217c:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    217e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2182:	d0fa      	beq.n	217a <_oscctrl_init_referenced_generators+0x11a>
    2184:	e7d8      	b.n	2138 <_oscctrl_init_referenced_generators+0xd8>
    2186:	bf00      	nop
    2188:	40001c00 	.word	0x40001c00
    218c:	40001000 	.word	0x40001000
    2190:	7c7f05b9 	.word	0x7c7f05b9

00002194 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    2194:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    2196:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    2198:	6803      	ldr	r3, [r0, #0]
    219a:	2100      	movs	r1, #0
    219c:	4798      	blx	r3
    219e:	bd08      	pop	{r3, pc}

000021a0 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    21a0:	b538      	push	{r3, r4, r5, lr}
    21a2:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    21a4:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    21a6:	4b07      	ldr	r3, [pc, #28]	; (21c4 <_camera_async_init+0x24>)
    21a8:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    21aa:	4b07      	ldr	r3, [pc, #28]	; (21c8 <_camera_async_init+0x28>)
    21ac:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    21ae:	4d07      	ldr	r5, [pc, #28]	; (21cc <_camera_async_init+0x2c>)
    21b0:	2100      	movs	r1, #0
    21b2:	4628      	mov	r0, r5
    21b4:	4b06      	ldr	r3, [pc, #24]	; (21d0 <_camera_async_init+0x30>)
    21b6:	4798      	blx	r3
	resource->back                 = device;
    21b8:	682b      	ldr	r3, [r5, #0]
    21ba:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    21bc:	4a05      	ldr	r2, [pc, #20]	; (21d4 <_camera_async_init+0x34>)
    21be:	601a      	str	r2, [r3, #0]
    21c0:	bd38      	pop	{r3, r4, r5, pc}
    21c2:	bf00      	nop
    21c4:	c0000020 	.word	0xc0000020
    21c8:	20000214 	.word	0x20000214
    21cc:	20000b60 	.word	0x20000b60
    21d0:	00001d15 	.word	0x00001d15
    21d4:	00002195 	.word	0x00002195

000021d8 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    21d8:	b500      	push	{lr}
    21da:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    21dc:	4b08      	ldr	r3, [pc, #32]	; (2200 <PCC_Handler+0x28>)
    21de:	6818      	ldr	r0, [r3, #0]
    21e0:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    21e2:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    21e4:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    21e6:	2201      	movs	r2, #1
    21e8:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    21ea:	9b01      	ldr	r3, [sp, #4]
    21ec:	f013 0f01 	tst.w	r3, #1
    21f0:	d003      	beq.n	21fa <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    21f2:	6803      	ldr	r3, [r0, #0]
    21f4:	b10b      	cbz	r3, 21fa <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    21f6:	2100      	movs	r1, #0
    21f8:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    21fa:	b003      	add	sp, #12
    21fc:	f85d fb04 	ldr.w	pc, [sp], #4
    2200:	20000214 	.word	0x20000214

00002204 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2204:	b500      	push	{lr}
    2206:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2208:	4b0d      	ldr	r3, [pc, #52]	; (2240 <RAMECC_Handler+0x3c>)
    220a:	789b      	ldrb	r3, [r3, #2]
    220c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    220e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2210:	9b01      	ldr	r3, [sp, #4]
    2212:	f013 0f02 	tst.w	r3, #2
    2216:	d006      	beq.n	2226 <RAMECC_Handler+0x22>
    2218:	4b0a      	ldr	r3, [pc, #40]	; (2244 <RAMECC_Handler+0x40>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	b11b      	cbz	r3, 2226 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    221e:	4a08      	ldr	r2, [pc, #32]	; (2240 <RAMECC_Handler+0x3c>)
    2220:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2222:	4798      	blx	r3
    2224:	e009      	b.n	223a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2226:	9b01      	ldr	r3, [sp, #4]
    2228:	f013 0f01 	tst.w	r3, #1
    222c:	d005      	beq.n	223a <RAMECC_Handler+0x36>
    222e:	4b05      	ldr	r3, [pc, #20]	; (2244 <RAMECC_Handler+0x40>)
    2230:	685b      	ldr	r3, [r3, #4]
    2232:	b113      	cbz	r3, 223a <RAMECC_Handler+0x36>
    2234:	4a02      	ldr	r2, [pc, #8]	; (2240 <RAMECC_Handler+0x3c>)
    2236:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2238:	4798      	blx	r3
	} else {
		return;
	}
}
    223a:	b003      	add	sp, #12
    223c:	f85d fb04 	ldr.w	pc, [sp], #4
    2240:	41020000 	.word	0x41020000
    2244:	20000b64 	.word	0x20000b64

00002248 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    2248:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    224a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    224c:	f013 0f04 	tst.w	r3, #4
    2250:	d009      	beq.n	2266 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    2252:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2254:	f014 0f03 	tst.w	r4, #3
    2258:	d1fb      	bne.n	2252 <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    225a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    225c:	b2a4      	uxth	r4, r4
    225e:	f024 0404 	bic.w	r4, r4, #4
    2262:	b2a4      	uxth	r4, r4
    2264:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2266:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2268:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    226c:	2c00      	cmp	r4, #0
    226e:	d135      	bne.n	22dc <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    2270:	4b22      	ldr	r3, [pc, #136]	; (22fc <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    2272:	2a00      	cmp	r2, #0
    2274:	d134      	bne.n	22e0 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2276:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2278:	b292      	uxth	r2, r2
    227a:	f022 0220 	bic.w	r2, r2, #32
    227e:	b292      	uxth	r2, r2
    2280:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    2282:	fbb3 f1f1 	udiv	r1, r3, r1
    2286:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    2288:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    228c:	f013 0f04 	tst.w	r3, #4
    2290:	d001      	beq.n	2296 <_mci_set_speed+0x4e>
    2292:	b901      	cbnz	r1, 2296 <_mci_set_speed+0x4e>
		div = 1;
    2294:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    2296:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    2298:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    229a:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    229c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    22a0:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    22a2:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    22a4:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    22a8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22aa:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    22ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    22b0:	0189      	lsls	r1, r1, #6
    22b2:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    22b6:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    22b8:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    22ba:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22bc:	b29b      	uxth	r3, r3
    22be:	f043 0301 	orr.w	r3, r3, #1
    22c2:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    22c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    22c6:	f013 0f02 	tst.w	r3, #2
    22ca:	d0fb      	beq.n	22c4 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    22cc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22ce:	b29b      	uxth	r3, r3
    22d0:	f043 0304 	orr.w	r3, r3, #4
    22d4:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    22d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    22da:	4770      	bx	lr
		clkbase = clkbase / 2;
    22dc:	4b08      	ldr	r3, [pc, #32]	; (2300 <_mci_set_speed+0xb8>)
    22de:	e7c8      	b.n	2272 <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    22e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    22e2:	b292      	uxth	r2, r2
    22e4:	f042 0220 	orr.w	r2, r2, #32
    22e8:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    22ea:	fb04 3303 	mla	r3, r4, r3, r3
    22ee:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    22f2:	2900      	cmp	r1, #0
    22f4:	d0c8      	beq.n	2288 <_mci_set_speed+0x40>
			div = div - 1;
    22f6:	3901      	subs	r1, #1
    22f8:	e7c6      	b.n	2288 <_mci_set_speed+0x40>
    22fa:	bf00      	nop
    22fc:	0393a000 	.word	0x0393a000
    2300:	01c9d000 	.word	0x01c9d000

00002304 <_mci_reset>:
{
    2304:	b510      	push	{r4, lr}
	ASSERT(hw);
    2306:	4604      	mov	r4, r0
    2308:	2234      	movs	r2, #52	; 0x34
    230a:	4906      	ldr	r1, [pc, #24]	; (2324 <_mci_reset+0x20>)
    230c:	3000      	adds	r0, #0
    230e:	bf18      	it	ne
    2310:	2001      	movne	r0, #1
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <_mci_reset+0x24>)
    2314:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2316:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    231a:	f043 0302 	orr.w	r3, r3, #2
    231e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    2322:	bd10      	pop	{r4, pc}
    2324:	00005794 	.word	0x00005794
    2328:	00001671 	.word	0x00001671

0000232c <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    232c:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    232e:	4604      	mov	r4, r0
    2330:	227f      	movs	r2, #127	; 0x7f
    2332:	490b      	ldr	r1, [pc, #44]	; (2360 <_mci_wait_busy+0x34>)
    2334:	3000      	adds	r0, #0
    2336:	bf18      	it	ne
    2338:	2001      	movne	r0, #1
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <_mci_wait_busy+0x38>)
    233c:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    233e:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    2342:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    2344:	1e59      	subs	r1, r3, #1
    2346:	b12b      	cbz	r3, 2354 <_mci_wait_busy+0x28>
    2348:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    234a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    234e:	d0f8      	beq.n	2342 <_mci_wait_busy+0x16>
	return true;
    2350:	2001      	movs	r0, #1
}
    2352:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    2354:	4620      	mov	r0, r4
    2356:	4b04      	ldr	r3, [pc, #16]	; (2368 <_mci_wait_busy+0x3c>)
    2358:	4798      	blx	r3
			return false;
    235a:	2000      	movs	r0, #0
    235c:	bd10      	pop	{r4, pc}
    235e:	bf00      	nop
    2360:	00005794 	.word	0x00005794
    2364:	00001671 	.word	0x00001671
    2368:	00002305 	.word	0x00002305

0000236c <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    236e:	460f      	mov	r7, r1
    2370:	4615      	mov	r5, r2
    2372:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    2374:	4604      	mov	r4, r0
    2376:	2299      	movs	r2, #153	; 0x99
    2378:	4934      	ldr	r1, [pc, #208]	; (244c <_mci_send_cmd_execute+0xe0>)
    237a:	3000      	adds	r0, #0
    237c:	bf18      	it	ne
    237e:	2001      	movne	r0, #1
    2380:	4b33      	ldr	r3, [pc, #204]	; (2450 <_mci_send_cmd_execute+0xe4>)
    2382:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    2384:	0229      	lsls	r1, r5, #8
    2386:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    238a:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    238c:	f415 7f80 	tst.w	r5, #256	; 0x100
    2390:	d004      	beq.n	239c <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    2392:	f415 6f00 	tst.w	r5, #2048	; 0x800
    2396:	d00e      	beq.n	23b6 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    2398:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    239c:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    23a0:	d012      	beq.n	23c8 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    23a2:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    23a6:	f043 0310 	orr.w	r3, r3, #16
    23aa:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    23ae:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    23b0:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    23b2:	81e3      	strh	r3, [r4, #14]
    23b4:	e017      	b.n	23e6 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    23b6:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    23ba:	d002      	beq.n	23c2 <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    23bc:	f041 0103 	orr.w	r1, r1, #3
    23c0:	e7ec      	b.n	239c <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    23c2:	f041 0102 	orr.w	r1, r1, #2
    23c6:	e7e9      	b.n	239c <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    23c8:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    23cc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    23d0:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    23d4:	e7eb      	b.n	23ae <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    23d6:	f240 227f 	movw	r2, #639	; 0x27f
    23da:	4213      	tst	r3, r2
    23dc:	d118      	bne.n	2410 <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    23de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    23e0:	f013 0f01 	tst.w	r3, #1
    23e4:	d120      	bne.n	2428 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    23e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    23e8:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    23ea:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    23ee:	d0f2      	beq.n	23d6 <_mci_send_cmd_execute+0x6a>
			if (sr
    23f0:	f240 225d 	movw	r2, #605	; 0x25d
    23f4:	4213      	tst	r3, r2
    23f6:	d0f2      	beq.n	23de <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    23f8:	4620      	mov	r0, r4
    23fa:	4b16      	ldr	r3, [pc, #88]	; (2454 <_mci_send_cmd_execute+0xe8>)
    23fc:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    23fe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2400:	b29b      	uxth	r3, r3
    2402:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2406:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    240a:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    240c:	2000      	movs	r0, #0
    240e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    2410:	4620      	mov	r0, r4
    2412:	4b10      	ldr	r3, [pc, #64]	; (2454 <_mci_send_cmd_execute+0xe8>)
    2414:	4798      	blx	r3
    2416:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2418:	b29b      	uxth	r3, r3
    241a:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    241e:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2422:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2424:	2000      	movs	r0, #0
    2426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2428:	f011 0f20 	tst.w	r1, #32
    242c:	d104      	bne.n	2438 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    242e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2430:	b29b      	uxth	r3, r3
    2432:	f043 0301 	orr.w	r3, r3, #1
    2436:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2438:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    243c:	d101      	bne.n	2442 <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    243e:	2001      	movs	r0, #1
}
    2440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    2442:	4620      	mov	r0, r4
    2444:	4b04      	ldr	r3, [pc, #16]	; (2458 <_mci_send_cmd_execute+0xec>)
    2446:	4798      	blx	r3
    2448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    244a:	bf00      	nop
    244c:	00005794 	.word	0x00005794
    2450:	00001671 	.word	0x00001671
    2454:	00002305 	.word	0x00002305
    2458:	0000232d 	.word	0x0000232d

0000245c <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    245c:	b538      	push	{r3, r4, r5, lr}
    245e:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2460:	4605      	mov	r5, r0
    2462:	b348      	cbz	r0, 24b8 <_mci_sync_init+0x5c>
    2464:	b331      	cbz	r1, 24b4 <_mci_sync_init+0x58>
    2466:	2001      	movs	r0, #1
    2468:	22d8      	movs	r2, #216	; 0xd8
    246a:	4914      	ldr	r1, [pc, #80]	; (24bc <_mci_sync_init+0x60>)
    246c:	4b14      	ldr	r3, [pc, #80]	; (24c0 <_mci_sync_init+0x64>)
    246e:	4798      	blx	r3

	mci_dev->hw = hw;
    2470:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    2472:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2476:	f043 0301 	orr.w	r3, r3, #1
    247a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    247e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    2482:	f013 0f01 	tst.w	r3, #1
    2486:	d1fa      	bne.n	247e <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2488:	230e      	movs	r3, #14
    248a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    248e:	230f      	movs	r3, #15
    2490:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    2494:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2496:	b29b      	uxth	r3, r3
    2498:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    249c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    24a0:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    24a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    24a4:	b29b      	uxth	r3, r3
    24a6:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    24aa:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    24ae:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    24b0:	2000      	movs	r0, #0
    24b2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    24b4:	2000      	movs	r0, #0
    24b6:	e7d7      	b.n	2468 <_mci_sync_init+0xc>
    24b8:	2000      	movs	r0, #0
    24ba:	e7d5      	b.n	2468 <_mci_sync_init+0xc>
    24bc:	00005794 	.word	0x00005794
    24c0:	00001671 	.word	0x00001671

000024c4 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    24c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24c6:	4616      	mov	r6, r2
    24c8:	461d      	mov	r5, r3
    24ca:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    24ce:	4604      	mov	r4, r0
    24d0:	b1e0      	cbz	r0, 250c <_mci_sync_select_device+0x48>
    24d2:	6803      	ldr	r3, [r0, #0]
    24d4:	b1c3      	cbz	r3, 2508 <_mci_sync_select_device+0x44>
    24d6:	2001      	movs	r0, #1
    24d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    24dc:	491b      	ldr	r1, [pc, #108]	; (254c <_mci_sync_select_device+0x88>)
    24de:	4b1c      	ldr	r3, [pc, #112]	; (2550 <_mci_sync_select_device+0x8c>)
    24e0:	4798      	blx	r3
	hw = mci_dev->hw;
    24e2:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    24e4:	b1a7      	cbz	r7, 2510 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    24e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    24ea:	f043 0304 	orr.w	r3, r3, #4
    24ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    24f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    24f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24f8:	d011      	beq.n	251e <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    24fa:	2d01      	cmp	r5, #1
    24fc:	d015      	beq.n	252a <_mci_sync_select_device+0x66>
    24fe:	2d04      	cmp	r5, #4
    2500:	d01b      	beq.n	253a <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    2502:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2508:	2000      	movs	r0, #0
    250a:	e7e5      	b.n	24d8 <_mci_sync_select_device+0x14>
    250c:	2000      	movs	r0, #0
    250e:	e7e3      	b.n	24d8 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    2510:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2514:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2518:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    251c:	e7e9      	b.n	24f2 <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    251e:	2200      	movs	r2, #0
    2520:	4631      	mov	r1, r6
    2522:	4620      	mov	r0, r4
    2524:	4b0b      	ldr	r3, [pc, #44]	; (2554 <_mci_sync_select_device+0x90>)
    2526:	4798      	blx	r3
    2528:	e7e7      	b.n	24fa <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    252a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    252e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2532:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    2536:	2000      	movs	r0, #0
    2538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    253a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    253e:	f043 0302 	orr.w	r3, r3, #2
    2542:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2546:	2000      	movs	r0, #0
    2548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254a:	bf00      	nop
    254c:	00005794 	.word	0x00005794
    2550:	00001671 	.word	0x00001671
    2554:	00002249 	.word	0x00002249

00002558 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2558:	2000      	movs	r0, #0
    255a:	4770      	bx	lr

0000255c <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    255c:	b909      	cbnz	r1, 2562 <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    255e:	2004      	movs	r0, #4
    2560:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    2562:	2000      	movs	r0, #0
	}
}
    2564:	4770      	bx	lr

00002566 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2566:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2568:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    256a:	f3c0 5040 	ubfx	r0, r0, #21, #1
    256e:	4770      	bx	lr

00002570 <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    2570:	b500      	push	{lr}
    2572:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2574:	f240 1249 	movw	r2, #329	; 0x149
    2578:	4909      	ldr	r1, [pc, #36]	; (25a0 <_mci_sync_send_clock+0x30>)
    257a:	3000      	adds	r0, #0
    257c:	bf18      	it	ne
    257e:	2001      	movne	r0, #1
    2580:	4b08      	ldr	r3, [pc, #32]	; (25a4 <_mci_sync_send_clock+0x34>)
    2582:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    2584:	2300      	movs	r3, #0
    2586:	9301      	str	r3, [sp, #4]
    2588:	e002      	b.n	2590 <_mci_sync_send_clock+0x20>
    258a:	9b01      	ldr	r3, [sp, #4]
    258c:	3301      	adds	r3, #1
    258e:	9301      	str	r3, [sp, #4]
    2590:	9a01      	ldr	r2, [sp, #4]
    2592:	f241 3387 	movw	r3, #4999	; 0x1387
    2596:	429a      	cmp	r2, r3
    2598:	d9f7      	bls.n	258a <_mci_sync_send_clock+0x1a>
		;
}
    259a:	b003      	add	sp, #12
    259c:	f85d fb04 	ldr.w	pc, [sp], #4
    25a0:	00005794 	.word	0x00005794
    25a4:	00001671 	.word	0x00001671

000025a8 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    25a8:	b570      	push	{r4, r5, r6, lr}
    25aa:	460d      	mov	r5, r1
    25ac:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    25ae:	4604      	mov	r4, r0
    25b0:	b180      	cbz	r0, 25d4 <_mci_sync_send_cmd+0x2c>
    25b2:	6803      	ldr	r3, [r0, #0]
    25b4:	b163      	cbz	r3, 25d0 <_mci_sync_send_cmd+0x28>
    25b6:	2001      	movs	r0, #1
    25b8:	f44f 72ab 	mov.w	r2, #342	; 0x156
    25bc:	490d      	ldr	r1, [pc, #52]	; (25f4 <_mci_sync_send_cmd+0x4c>)
    25be:	4b0e      	ldr	r3, [pc, #56]	; (25f8 <_mci_sync_send_cmd+0x50>)
    25c0:	4798      	blx	r3
	hw = mci_dev->hw;
    25c2:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    25c4:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    25c6:	f013 0f01 	tst.w	r3, #1
    25ca:	d005      	beq.n	25d8 <_mci_sync_send_cmd+0x30>
		return false;
    25cc:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    25ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    25d0:	2000      	movs	r0, #0
    25d2:	e7f1      	b.n	25b8 <_mci_sync_send_cmd+0x10>
    25d4:	2000      	movs	r0, #0
    25d6:	e7ef      	b.n	25b8 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    25d8:	8983      	ldrh	r3, [r0, #12]
    25da:	b29b      	uxth	r3, r3
    25dc:	f023 0301 	bic.w	r3, r3, #1
    25e0:	b29b      	uxth	r3, r3
    25e2:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    25e4:	2100      	movs	r1, #0
    25e6:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    25e8:	4633      	mov	r3, r6
    25ea:	462a      	mov	r2, r5
    25ec:	4c03      	ldr	r4, [pc, #12]	; (25fc <_mci_sync_send_cmd+0x54>)
    25ee:	47a0      	blx	r4
    25f0:	bd70      	pop	{r4, r5, r6, pc}
    25f2:	bf00      	nop
    25f4:	00005794 	.word	0x00005794
    25f8:	00001671 	.word	0x00001671
    25fc:	0000236d 	.word	0x0000236d

00002600 <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    2600:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    2602:	4604      	mov	r4, r0
    2604:	b160      	cbz	r0, 2620 <_mci_sync_get_response+0x20>
    2606:	6803      	ldr	r3, [r0, #0]
    2608:	b143      	cbz	r3, 261c <_mci_sync_get_response+0x1c>
    260a:	2001      	movs	r0, #1
    260c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    2610:	4904      	ldr	r1, [pc, #16]	; (2624 <_mci_sync_get_response+0x24>)
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <_mci_sync_get_response+0x28>)
    2614:	4798      	blx	r3
	hw = mci_dev->hw;
    2616:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2618:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    261a:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    261c:	2000      	movs	r0, #0
    261e:	e7f5      	b.n	260c <_mci_sync_get_response+0xc>
    2620:	2000      	movs	r0, #0
    2622:	e7f3      	b.n	260c <_mci_sync_get_response+0xc>
    2624:	00005794 	.word	0x00005794
    2628:	00001671 	.word	0x00001671

0000262c <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    262c:	b538      	push	{r3, r4, r5, lr}
    262e:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2630:	4605      	mov	r5, r0
    2632:	b160      	cbz	r0, 264e <_mci_sync_get_response_128+0x22>
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	b143      	cbz	r3, 264a <_mci_sync_get_response_128+0x1e>
    2638:	2001      	movs	r0, #1
    263a:	f240 1277 	movw	r2, #375	; 0x177
    263e:	490f      	ldr	r1, [pc, #60]	; (267c <_mci_sync_get_response_128+0x50>)
    2640:	4b0f      	ldr	r3, [pc, #60]	; (2680 <_mci_sync_get_response_128+0x54>)
    2642:	4798      	blx	r3
	hw = mci_dev->hw;
    2644:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    2646:	2103      	movs	r1, #3
    2648:	e00b      	b.n	2662 <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    264a:	2000      	movs	r0, #0
    264c:	e7f5      	b.n	263a <_mci_sync_get_response_128+0xe>
    264e:	2000      	movs	r0, #0
    2650:	e7f3      	b.n	263a <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    2652:	0c11      	lsrs	r1, r2, #16
    2654:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2656:	0a11      	lsrs	r1, r2, #8
    2658:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    265a:	70a2      	strb	r2, [r4, #2]
		response++;
    265c:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    265e:	3b01      	subs	r3, #1
    2660:	b259      	sxtb	r1, r3
    2662:	2900      	cmp	r1, #0
    2664:	db09      	blt.n	267a <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    2666:	b2cb      	uxtb	r3, r1
    2668:	1d1a      	adds	r2, r3, #4
    266a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    266e:	2903      	cmp	r1, #3
    2670:	d0ef      	beq.n	2652 <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    2672:	0e11      	lsrs	r1, r2, #24
    2674:	f804 1b01 	strb.w	r1, [r4], #1
    2678:	e7eb      	b.n	2652 <_mci_sync_get_response_128+0x26>
	}
}
    267a:	bd38      	pop	{r3, r4, r5, pc}
    267c:	00005794 	.word	0x00005794
    2680:	00001671 	.word	0x00001671

00002684 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    2684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2688:	460d      	mov	r5, r1
    268a:	4690      	mov	r8, r2
    268c:	461f      	mov	r7, r3
    268e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    2692:	4604      	mov	r4, r0
    2694:	2800      	cmp	r0, #0
    2696:	d031      	beq.n	26fc <_mci_sync_adtc_start+0x78>
    2698:	6803      	ldr	r3, [r0, #0]
    269a:	b36b      	cbz	r3, 26f8 <_mci_sync_adtc_start+0x74>
    269c:	2001      	movs	r0, #1
    269e:	f240 1293 	movw	r2, #403	; 0x193
    26a2:	4921      	ldr	r1, [pc, #132]	; (2728 <_mci_sync_adtc_start+0xa4>)
    26a4:	4b21      	ldr	r3, [pc, #132]	; (272c <_mci_sync_adtc_start+0xa8>)
    26a6:	4798      	blx	r3
	hw = mci_dev->hw;
    26a8:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    26aa:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    26ac:	f013 0f01 	tst.w	r3, #1
    26b0:	d131      	bne.n	2716 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    26b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    26b4:	f013 0f02 	tst.w	r3, #2
    26b8:	d130      	bne.n	271c <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    26ba:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    26be:	d01f      	beq.n	2700 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    26c0:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    26c2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    26c6:	d104      	bne.n	26d2 <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    26c8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    26cc:	d01a      	beq.n	2704 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    26ce:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    26d2:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    26d4:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    26d6:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    26da:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    26dc:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    26de:	2200      	movs	r2, #0
    26e0:	2300      	movs	r3, #0
    26e2:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    26e6:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    26e8:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    26ea:	4643      	mov	r3, r8
    26ec:	462a      	mov	r2, r5
    26ee:	2120      	movs	r1, #32
    26f0:	4c0f      	ldr	r4, [pc, #60]	; (2730 <_mci_sync_adtc_start+0xac>)
    26f2:	47a0      	blx	r4
    26f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    26f8:	2000      	movs	r0, #0
    26fa:	e7d0      	b.n	269e <_mci_sync_adtc_start+0x1a>
    26fc:	2000      	movs	r0, #0
    26fe:	e7ce      	b.n	269e <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    2700:	2310      	movs	r3, #16
    2702:	e7de      	b.n	26c2 <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2704:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2708:	d1e3      	bne.n	26d2 <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    270a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    270e:	d008      	beq.n	2722 <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2710:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2714:	e7dd      	b.n	26d2 <_mci_sync_adtc_start+0x4e>
		return false;
    2716:	2000      	movs	r0, #0
    2718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    271c:	2000      	movs	r0, #0
    271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    2722:	2000      	movs	r0, #0
}
    2724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2728:	00005794 	.word	0x00005794
    272c:	00001671 	.word	0x00001671
    2730:	0000236d 	.word	0x0000236d

00002734 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    2734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2738:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    273a:	4605      	mov	r5, r0
    273c:	2800      	cmp	r0, #0
    273e:	d05d      	beq.n	27fc <_mci_sync_read_word+0xc8>
    2740:	6803      	ldr	r3, [r0, #0]
    2742:	2b00      	cmp	r3, #0
    2744:	d058      	beq.n	27f8 <_mci_sync_read_word+0xc4>
    2746:	2001      	movs	r0, #1
    2748:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    274c:	4936      	ldr	r1, [pc, #216]	; (2828 <_mci_sync_read_word+0xf4>)
    274e:	4b37      	ldr	r3, [pc, #220]	; (282c <_mci_sync_read_word+0xf8>)
    2750:	4798      	blx	r3
	hw = mci_dev->hw;
    2752:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2754:	8a2a      	ldrh	r2, [r5, #16]
    2756:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    275a:	fb08 f802 	mul.w	r8, r8, r2
    275e:	ea4f 79e8 	mov.w	r9, r8, asr #31
    2762:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2766:	ebb8 0800 	subs.w	r8, r8, r0
    276a:	eb69 0901 	sbc.w	r9, r9, r1
    276e:	f1b9 0f00 	cmp.w	r9, #0
    2772:	bf08      	it	eq
    2774:	f1b8 0f04 	cmpeq.w	r8, #4
    2778:	d242      	bcs.n	2800 <_mci_sync_read_word+0xcc>
    277a:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    277e:	b292      	uxth	r2, r2
    2780:	2300      	movs	r3, #0
    2782:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2834 <_mci_sync_read_word+0x100>
    2786:	47c0      	blx	r8
    2788:	4313      	orrs	r3, r2
    278a:	d10d      	bne.n	27a8 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    278c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    278e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2792:	2b00      	cmp	r3, #0
    2794:	d136      	bne.n	2804 <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    2796:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    2798:	f013 0f20 	tst.w	r3, #32
    279c:	d0f6      	beq.n	278c <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    279e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    27a0:	b29b      	uxth	r3, r3
    27a2:	f043 0320 	orr.w	r3, r3, #32
    27a6:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    27a8:	2e04      	cmp	r6, #4
    27aa:	d031      	beq.n	2810 <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    27ac:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    27ae:	1e72      	subs	r2, r6, #1
    27b0:	2a02      	cmp	r2, #2
    27b2:	d801      	bhi.n	27b8 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    27b4:	b2db      	uxtb	r3, r3
    27b6:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    27b8:	b2f6      	uxtb	r6, r6
    27ba:	2700      	movs	r7, #0
    27bc:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    27c0:	18b6      	adds	r6, r6, r2
    27c2:	415f      	adcs	r7, r3
    27c4:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    27c8:	8a2a      	ldrh	r2, [r5, #16]
    27ca:	8a68      	ldrh	r0, [r5, #18]
    27cc:	fba2 2300 	umull	r2, r3, r2, r0
    27d0:	429f      	cmp	r7, r3
    27d2:	bf08      	it	eq
    27d4:	4296      	cmpeq	r6, r2
    27d6:	d324      	bcc.n	2822 <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    27d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    27da:	f003 0370 	and.w	r3, r3, #112	; 0x70
    27de:	b9d3      	cbnz	r3, 2816 <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    27e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    27e2:	f013 0f02 	tst.w	r3, #2
    27e6:	d0f7      	beq.n	27d8 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    27e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    27ea:	b29b      	uxth	r3, r3
    27ec:	f043 0302 	orr.w	r3, r3, #2
    27f0:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    27f2:	2001      	movs	r0, #1
    27f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    27f8:	2000      	movs	r0, #0
    27fa:	e7a5      	b.n	2748 <_mci_sync_read_word+0x14>
    27fc:	2000      	movs	r0, #0
    27fe:	e7a3      	b.n	2748 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2800:	2604      	movs	r6, #4
    2802:	e7bc      	b.n	277e <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    2804:	4620      	mov	r0, r4
    2806:	4b0a      	ldr	r3, [pc, #40]	; (2830 <_mci_sync_read_word+0xfc>)
    2808:	4798      	blx	r3
				return false;
    280a:	2000      	movs	r0, #0
    280c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    2810:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    2812:	603b      	str	r3, [r7, #0]
    2814:	e7d0      	b.n	27b8 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    2816:	4620      	mov	r0, r4
    2818:	4b05      	ldr	r3, [pc, #20]	; (2830 <_mci_sync_read_word+0xfc>)
    281a:	4798      	blx	r3
			return false;
    281c:	2000      	movs	r0, #0
    281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    2822:	2001      	movs	r0, #1
}
    2824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2828:	00005794 	.word	0x00005794
    282c:	00001671 	.word	0x00001671
    2830:	00002305 	.word	0x00002305
    2834:	000051d9 	.word	0x000051d9

00002838 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    283a:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    283c:	4605      	mov	r5, r0
    283e:	2800      	cmp	r0, #0
    2840:	d03f      	beq.n	28c2 <_mci_sync_write_word+0x8a>
    2842:	6803      	ldr	r3, [r0, #0]
    2844:	2b00      	cmp	r3, #0
    2846:	d03a      	beq.n	28be <_mci_sync_write_word+0x86>
    2848:	2001      	movs	r0, #1
    284a:	f240 220f 	movw	r2, #527	; 0x20f
    284e:	4924      	ldr	r1, [pc, #144]	; (28e0 <_mci_sync_write_word+0xa8>)
    2850:	4b24      	ldr	r3, [pc, #144]	; (28e4 <_mci_sync_write_word+0xac>)
    2852:	4798      	blx	r3
	hw = mci_dev->hw;
    2854:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2856:	8a2a      	ldrh	r2, [r5, #16]
    2858:	2300      	movs	r3, #0
    285a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    285e:	4e22      	ldr	r6, [pc, #136]	; (28e8 <_mci_sync_write_word+0xb0>)
    2860:	47b0      	blx	r6
    2862:	4313      	orrs	r3, r2
    2864:	d10c      	bne.n	2880 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2866:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2868:	f003 0370 	and.w	r3, r3, #112	; 0x70
    286c:	bb5b      	cbnz	r3, 28c6 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    286e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    2870:	f013 0f10 	tst.w	r3, #16
    2874:	d0f7      	beq.n	2866 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    2876:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2878:	b29b      	uxth	r3, r3
    287a:	f043 0310 	orr.w	r3, r3, #16
    287e:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    2880:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    2882:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    2886:	3204      	adds	r2, #4
    2888:	f143 0300 	adc.w	r3, r3, #0
    288c:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    2890:	8a28      	ldrh	r0, [r5, #16]
    2892:	8a6e      	ldrh	r6, [r5, #18]
    2894:	fba0 0106 	umull	r0, r1, r0, r6
    2898:	428b      	cmp	r3, r1
    289a:	bf08      	it	eq
    289c:	4282      	cmpeq	r2, r0
    289e:	d31c      	bcc.n	28da <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    28a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    28a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
    28a6:	b99b      	cbnz	r3, 28d0 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    28a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    28aa:	f013 0f02 	tst.w	r3, #2
    28ae:	d0f7      	beq.n	28a0 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    28b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    28b2:	b29b      	uxth	r3, r3
    28b4:	f043 0302 	orr.w	r3, r3, #2
    28b8:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    28ba:	2001      	movs	r0, #1
    28bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    28be:	2000      	movs	r0, #0
    28c0:	e7c3      	b.n	284a <_mci_sync_write_word+0x12>
    28c2:	2000      	movs	r0, #0
    28c4:	e7c1      	b.n	284a <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    28c6:	4620      	mov	r0, r4
    28c8:	4b08      	ldr	r3, [pc, #32]	; (28ec <_mci_sync_write_word+0xb4>)
    28ca:	4798      	blx	r3
				return false;
    28cc:	2000      	movs	r0, #0
    28ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    28d0:	4620      	mov	r0, r4
    28d2:	4b06      	ldr	r3, [pc, #24]	; (28ec <_mci_sync_write_word+0xb4>)
    28d4:	4798      	blx	r3
			return false;
    28d6:	2000      	movs	r0, #0
    28d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    28da:	2001      	movs	r0, #1
}
    28dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28de:	bf00      	nop
    28e0:	00005794 	.word	0x00005794
    28e4:	00001671 	.word	0x00001671
    28e8:	000051d9 	.word	0x000051d9
    28ec:	00002305 	.word	0x00002305

000028f0 <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    28f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28f4:	460e      	mov	r6, r1
    28f6:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    28f8:	4607      	mov	r7, r0
    28fa:	b1f0      	cbz	r0, 293a <_mci_sync_start_read_blocks+0x4a>
    28fc:	6803      	ldr	r3, [r0, #0]
    28fe:	b1d3      	cbz	r3, 2936 <_mci_sync_start_read_blocks+0x46>
    2900:	2001      	movs	r0, #1
    2902:	4d18      	ldr	r5, [pc, #96]	; (2964 <_mci_sync_start_read_blocks+0x74>)
    2904:	f240 223e 	movw	r2, #574	; 0x23e
    2908:	4629      	mov	r1, r5
    290a:	4c17      	ldr	r4, [pc, #92]	; (2968 <_mci_sync_start_read_blocks+0x78>)
    290c:	47a0      	blx	r4
	ASSERT(nb_block);
    290e:	f240 223f 	movw	r2, #575	; 0x23f
    2912:	4629      	mov	r1, r5
    2914:	f118 0000 	adds.w	r0, r8, #0
    2918:	bf18      	it	ne
    291a:	2001      	movne	r0, #1
    291c:	47a0      	blx	r4
	ASSERT(dst);
    291e:	f44f 7210 	mov.w	r2, #576	; 0x240
    2922:	4629      	mov	r1, r5
    2924:	1c30      	adds	r0, r6, #0
    2926:	bf18      	it	ne
    2928:	2001      	movne	r0, #1
    292a:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    292c:	8a3d      	ldrh	r5, [r7, #16]
    292e:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    2932:	2404      	movs	r4, #4

	while (nb_data) {
    2934:	e005      	b.n	2942 <_mci_sync_start_read_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2936:	2000      	movs	r0, #0
    2938:	e7e3      	b.n	2902 <_mci_sync_start_read_blocks+0x12>
    293a:	2000      	movs	r0, #0
    293c:	e7e1      	b.n	2902 <_mci_sync_start_read_blocks+0x12>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    293e:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2940:	4426      	add	r6, r4
	while (nb_data) {
    2942:	b165      	cbz	r5, 295e <_mci_sync_start_read_blocks+0x6e>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    2944:	4631      	mov	r1, r6
    2946:	4638      	mov	r0, r7
    2948:	4b08      	ldr	r3, [pc, #32]	; (296c <_mci_sync_start_read_blocks+0x7c>)
    294a:	4798      	blx	r3
		if (nb_data < nbytes) {
    294c:	42a5      	cmp	r5, r4
    294e:	d2f6      	bcs.n	293e <_mci_sync_start_read_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2950:	8a3b      	ldrh	r3, [r7, #16]
    2952:	fb93 f2f4 	sdiv	r2, r3, r4
    2956:	fb04 3412 	mls	r4, r4, r2, r3
    295a:	b2e4      	uxtb	r4, r4
    295c:	e7ef      	b.n	293e <_mci_sync_start_read_blocks+0x4e>
	}

	return true;
}
    295e:	2001      	movs	r0, #1
    2960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2964:	00005794 	.word	0x00005794
    2968:	00001671 	.word	0x00001671
    296c:	00002735 	.word	0x00002735

00002970 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    2970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2974:	460e      	mov	r6, r1
    2976:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2978:	4607      	mov	r7, r0
    297a:	b1f0      	cbz	r0, 29ba <_mci_sync_start_write_blocks+0x4a>
    297c:	6803      	ldr	r3, [r0, #0]
    297e:	b1d3      	cbz	r3, 29b6 <_mci_sync_start_write_blocks+0x46>
    2980:	2001      	movs	r0, #1
    2982:	4d18      	ldr	r5, [pc, #96]	; (29e4 <_mci_sync_start_write_blocks+0x74>)
    2984:	f240 225a 	movw	r2, #602	; 0x25a
    2988:	4629      	mov	r1, r5
    298a:	4c17      	ldr	r4, [pc, #92]	; (29e8 <_mci_sync_start_write_blocks+0x78>)
    298c:	47a0      	blx	r4
	ASSERT(nb_block);
    298e:	f240 225b 	movw	r2, #603	; 0x25b
    2992:	4629      	mov	r1, r5
    2994:	f118 0000 	adds.w	r0, r8, #0
    2998:	bf18      	it	ne
    299a:	2001      	movne	r0, #1
    299c:	47a0      	blx	r4
	ASSERT(src);
    299e:	f44f 7217 	mov.w	r2, #604	; 0x25c
    29a2:	4629      	mov	r1, r5
    29a4:	1c30      	adds	r0, r6, #0
    29a6:	bf18      	it	ne
    29a8:	2001      	movne	r0, #1
    29aa:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    29ac:	8a3d      	ldrh	r5, [r7, #16]
    29ae:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    29b2:	2404      	movs	r4, #4

	while (nb_data) {
    29b4:	e005      	b.n	29c2 <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    29b6:	2000      	movs	r0, #0
    29b8:	e7e3      	b.n	2982 <_mci_sync_start_write_blocks+0x12>
    29ba:	2000      	movs	r0, #0
    29bc:	e7e1      	b.n	2982 <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    29be:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    29c0:	4426      	add	r6, r4
	while (nb_data) {
    29c2:	b165      	cbz	r5, 29de <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    29c4:	6831      	ldr	r1, [r6, #0]
    29c6:	4638      	mov	r0, r7
    29c8:	4b08      	ldr	r3, [pc, #32]	; (29ec <_mci_sync_start_write_blocks+0x7c>)
    29ca:	4798      	blx	r3
		if (nb_data < nbytes) {
    29cc:	42a5      	cmp	r5, r4
    29ce:	d2f6      	bcs.n	29be <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    29d0:	8a3b      	ldrh	r3, [r7, #16]
    29d2:	fb93 f2f4 	sdiv	r2, r3, r4
    29d6:	fb04 3412 	mls	r4, r4, r2, r3
    29da:	b2e4      	uxtb	r4, r4
    29dc:	e7ef      	b.n	29be <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    29de:	2001      	movs	r0, #1
    29e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29e4:	00005794 	.word	0x00005794
    29e8:	00001671 	.word	0x00001671
    29ec:	00002839 	.word	0x00002839

000029f0 <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    29f0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    29f2:	b158      	cbz	r0, 2a0c <_mci_sync_wait_end_of_read_blocks+0x1c>
    29f4:	6803      	ldr	r3, [r0, #0]
    29f6:	b13b      	cbz	r3, 2a08 <_mci_sync_wait_end_of_read_blocks+0x18>
    29f8:	2001      	movs	r0, #1
    29fa:	f240 2271 	movw	r2, #625	; 0x271
    29fe:	4904      	ldr	r1, [pc, #16]	; (2a10 <_mci_sync_wait_end_of_read_blocks+0x20>)
    2a00:	4b04      	ldr	r3, [pc, #16]	; (2a14 <_mci_sync_wait_end_of_read_blocks+0x24>)
    2a02:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    2a04:	2001      	movs	r0, #1
    2a06:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2a08:	2000      	movs	r0, #0
    2a0a:	e7f6      	b.n	29fa <_mci_sync_wait_end_of_read_blocks+0xa>
    2a0c:	2000      	movs	r0, #0
    2a0e:	e7f4      	b.n	29fa <_mci_sync_wait_end_of_read_blocks+0xa>
    2a10:	00005794 	.word	0x00005794
    2a14:	00001671 	.word	0x00001671

00002a18 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    2a18:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    2a1a:	b158      	cbz	r0, 2a34 <_mci_sync_wait_end_of_write_blocks+0x1c>
    2a1c:	6803      	ldr	r3, [r0, #0]
    2a1e:	b13b      	cbz	r3, 2a30 <_mci_sync_wait_end_of_write_blocks+0x18>
    2a20:	2001      	movs	r0, #1
    2a22:	f44f 721f 	mov.w	r2, #636	; 0x27c
    2a26:	4904      	ldr	r1, [pc, #16]	; (2a38 <_mci_sync_wait_end_of_write_blocks+0x20>)
    2a28:	4b04      	ldr	r3, [pc, #16]	; (2a3c <_mci_sync_wait_end_of_write_blocks+0x24>)
    2a2a:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    2a2c:	2001      	movs	r0, #1
    2a2e:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2a30:	2000      	movs	r0, #0
    2a32:	e7f6      	b.n	2a22 <_mci_sync_wait_end_of_write_blocks+0xa>
    2a34:	2000      	movs	r0, #0
    2a36:	e7f4      	b.n	2a22 <_mci_sync_wait_end_of_write_blocks+0xa>
    2a38:	00005794 	.word	0x00005794
    2a3c:	00001671 	.word	0x00001671

00002a40 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2a40:	b470      	push	{r4, r5, r6}
    2a42:	b087      	sub	sp, #28
    2a44:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2a46:	466c      	mov	r4, sp
    2a48:	4d0c      	ldr	r5, [pc, #48]	; (2a7c <_sercom_get_hardware_index+0x3c>)
    2a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a52:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a56:	2000      	movs	r0, #0
    2a58:	2805      	cmp	r0, #5
    2a5a:	d80a      	bhi.n	2a72 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2a5c:	ab06      	add	r3, sp, #24
    2a5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2a62:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2a66:	42b3      	cmp	r3, r6
    2a68:	d001      	beq.n	2a6e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a6a:	3001      	adds	r0, #1
    2a6c:	e7f4      	b.n	2a58 <_sercom_get_hardware_index+0x18>
			return i;
    2a6e:	b2c0      	uxtb	r0, r0
    2a70:	e000      	b.n	2a74 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    2a72:	2000      	movs	r0, #0
}
    2a74:	b007      	add	sp, #28
    2a76:	bc70      	pop	{r4, r5, r6}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	000057ac 	.word	0x000057ac

00002a80 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2a80:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2a82:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2a84:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2a86:	f013 0f01 	tst.w	r3, #1
    2a8a:	d003      	beq.n	2a94 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2a8c:	7da3      	ldrb	r3, [r4, #22]
    2a8e:	f013 0f01 	tst.w	r3, #1
    2a92:	d112      	bne.n	2aba <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2a94:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2a96:	f013 0f02 	tst.w	r3, #2
    2a9a:	d003      	beq.n	2aa4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2a9c:	7da3      	ldrb	r3, [r4, #22]
    2a9e:	f013 0f02 	tst.w	r3, #2
    2aa2:	d10f      	bne.n	2ac4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2aa4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2aa6:	f013 0f04 	tst.w	r3, #4
    2aaa:	d015      	beq.n	2ad8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2aac:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2aae:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2ab2:	b163      	cbz	r3, 2ace <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2ab4:	23ff      	movs	r3, #255	; 0xff
    2ab6:	8363      	strh	r3, [r4, #26]
    2ab8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2aba:	2301      	movs	r3, #1
    2abc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2abe:	6803      	ldr	r3, [r0, #0]
    2ac0:	4798      	blx	r3
    2ac2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2ac4:	2302      	movs	r3, #2
    2ac6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2ac8:	6883      	ldr	r3, [r0, #8]
    2aca:	4798      	blx	r3
    2acc:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2ace:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2ad0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2ad2:	b2c9      	uxtb	r1, r1
    2ad4:	4798      	blx	r3
    2ad6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2ad8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2ada:	09db      	lsrs	r3, r3, #7
    2adc:	d100      	bne.n	2ae0 <_sercom_usart_interrupt_handler+0x60>
    2ade:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2ae0:	2380      	movs	r3, #128	; 0x80
    2ae2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    2ae4:	68c3      	ldr	r3, [r0, #12]
    2ae6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2ae8:	8b63      	ldrh	r3, [r4, #26]
    2aea:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2aec:	8363      	strh	r3, [r4, #26]
    2aee:	e7f6      	b.n	2ade <_sercom_usart_interrupt_handler+0x5e>

00002af0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2af0:	4b03      	ldr	r3, [pc, #12]	; (2b00 <_sercom_init_irq_param+0x10>)
    2af2:	4298      	cmp	r0, r3
    2af4:	d000      	beq.n	2af8 <_sercom_init_irq_param+0x8>
    2af6:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2af8:	4b02      	ldr	r3, [pc, #8]	; (2b04 <_sercom_init_irq_param+0x14>)
    2afa:	6019      	str	r1, [r3, #0]
	}
}
    2afc:	e7fb      	b.n	2af6 <_sercom_init_irq_param+0x6>
    2afe:	bf00      	nop
    2b00:	43000400 	.word	0x43000400
    2b04:	20000218 	.word	0x20000218

00002b08 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2b08:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2b0a:	4b04      	ldr	r3, [pc, #16]	; (2b1c <_sercom_get_irq_num+0x14>)
    2b0c:	4798      	blx	r3
    2b0e:	0080      	lsls	r0, r0, #2
    2b10:	b2c0      	uxtb	r0, r0
    2b12:	302e      	adds	r0, #46	; 0x2e
}
    2b14:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2b18:	bd08      	pop	{r3, pc}
    2b1a:	bf00      	nop
    2b1c:	00002a41 	.word	0x00002a41

00002b20 <_get_sercom_index>:
{
    2b20:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2b22:	4b0c      	ldr	r3, [pc, #48]	; (2b54 <_get_sercom_index+0x34>)
    2b24:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b26:	2300      	movs	r3, #0
    2b28:	b143      	cbz	r3, 2b3c <_get_sercom_index+0x1c>
	ASSERT(false);
    2b2a:	f240 226b 	movw	r2, #619	; 0x26b
    2b2e:	490a      	ldr	r1, [pc, #40]	; (2b58 <_get_sercom_index+0x38>)
    2b30:	2000      	movs	r0, #0
    2b32:	4b0a      	ldr	r3, [pc, #40]	; (2b5c <_get_sercom_index+0x3c>)
    2b34:	4798      	blx	r3
	return 0;
    2b36:	2300      	movs	r3, #0
}
    2b38:	4618      	mov	r0, r3
    2b3a:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    2b3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2b40:	00d1      	lsls	r1, r2, #3
    2b42:	4a07      	ldr	r2, [pc, #28]	; (2b60 <_get_sercom_index+0x40>)
    2b44:	440a      	add	r2, r1
    2b46:	7e12      	ldrb	r2, [r2, #24]
    2b48:	4290      	cmp	r0, r2
    2b4a:	d0f5      	beq.n	2b38 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b4c:	3301      	adds	r3, #1
    2b4e:	b2db      	uxtb	r3, r3
    2b50:	e7ea      	b.n	2b28 <_get_sercom_index+0x8>
    2b52:	bf00      	nop
    2b54:	00002a41 	.word	0x00002a41
    2b58:	00005818 	.word	0x00005818
    2b5c:	00001671 	.word	0x00001671
    2b60:	000057ac 	.word	0x000057ac

00002b64 <_usart_init>:
{
    2b64:	b538      	push	{r3, r4, r5, lr}
    2b66:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2b68:	4b3c      	ldr	r3, [pc, #240]	; (2c5c <_usart_init+0xf8>)
    2b6a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2b6c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2b6e:	f013 0f01 	tst.w	r3, #1
    2b72:	d122      	bne.n	2bba <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2b74:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2b78:	00da      	lsls	r2, r3, #3
    2b7a:	4b39      	ldr	r3, [pc, #228]	; (2c60 <_usart_init+0xfc>)
    2b7c:	4413      	add	r3, r2
    2b7e:	69da      	ldr	r2, [r3, #28]
    2b80:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b84:	69e3      	ldr	r3, [r4, #28]
    2b86:	f013 0f03 	tst.w	r3, #3
    2b8a:	d1fb      	bne.n	2b84 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2b8c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2b8e:	f013 0f02 	tst.w	r3, #2
    2b92:	d00b      	beq.n	2bac <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2b94:	6823      	ldr	r3, [r4, #0]
    2b96:	f023 0302 	bic.w	r3, r3, #2
    2b9a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b9c:	69e3      	ldr	r3, [r4, #28]
    2b9e:	f013 0f03 	tst.w	r3, #3
    2ba2:	d1fb      	bne.n	2b9c <_usart_init+0x38>
    2ba4:	69e3      	ldr	r3, [r4, #28]
    2ba6:	f013 0f02 	tst.w	r3, #2
    2baa:	d1fb      	bne.n	2ba4 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2bac:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2bb0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2bb2:	69e3      	ldr	r3, [r4, #28]
    2bb4:	f013 0f03 	tst.w	r3, #3
    2bb8:	d1fb      	bne.n	2bb2 <_usart_init+0x4e>
    2bba:	69e3      	ldr	r3, [r4, #28]
    2bbc:	f013 0f01 	tst.w	r3, #1
    2bc0:	d1fb      	bne.n	2bba <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2bc2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2bc6:	00da      	lsls	r2, r3, #3
    2bc8:	4b25      	ldr	r3, [pc, #148]	; (2c60 <_usart_init+0xfc>)
    2bca:	4413      	add	r3, r2
    2bcc:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2bce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2bd0:	69e3      	ldr	r3, [r4, #28]
    2bd2:	f013 0f03 	tst.w	r3, #3
    2bd6:	d1fb      	bne.n	2bd0 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2bd8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2bdc:	00da      	lsls	r2, r3, #3
    2bde:	4b20      	ldr	r3, [pc, #128]	; (2c60 <_usart_init+0xfc>)
    2be0:	4413      	add	r3, r2
    2be2:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2be4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2be6:	69e3      	ldr	r3, [r4, #28]
    2be8:	f013 0f1f 	tst.w	r3, #31
    2bec:	d1fb      	bne.n	2be6 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2bee:	0042      	lsls	r2, r0, #1
    2bf0:	4402      	add	r2, r0
    2bf2:	00d1      	lsls	r1, r2, #3
    2bf4:	4b1a      	ldr	r3, [pc, #104]	; (2c60 <_usart_init+0xfc>)
    2bf6:	440b      	add	r3, r1
    2bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2bfa:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2bfc:	69db      	ldr	r3, [r3, #28]
    2bfe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2c02:	d10a      	bne.n	2c1a <_usart_init+0xb6>
    2c04:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2c08:	d107      	bne.n	2c1a <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2c0a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2c0e:	00da      	lsls	r2, r3, #3
    2c10:	4b13      	ldr	r3, [pc, #76]	; (2c60 <_usart_init+0xfc>)
    2c12:	4413      	add	r3, r2
    2c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2c16:	81a3      	strh	r3, [r4, #12]
    2c18:	e00f      	b.n	2c3a <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2c1a:	0042      	lsls	r2, r0, #1
    2c1c:	4402      	add	r2, r0
    2c1e:	00d1      	lsls	r1, r2, #3
    2c20:	4b0f      	ldr	r3, [pc, #60]	; (2c60 <_usart_init+0xfc>)
    2c22:	440b      	add	r3, r1
    2c24:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2c26:	89a2      	ldrh	r2, [r4, #12]
    2c28:	f361 020c 	bfi	r2, r1, #0, #13
    2c2c:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2c2e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    2c32:	89a3      	ldrh	r3, [r4, #12]
    2c34:	f362 334f 	bfi	r3, r2, #13, #3
    2c38:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2c3a:	4a09      	ldr	r2, [pc, #36]	; (2c60 <_usart_init+0xfc>)
    2c3c:	0043      	lsls	r3, r0, #1
    2c3e:	181d      	adds	r5, r3, r0
    2c40:	00e9      	lsls	r1, r5, #3
    2c42:	460d      	mov	r5, r1
    2c44:	4411      	add	r1, r2
    2c46:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    2c4a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2c4c:	442a      	add	r2, r5
    2c4e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2c52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2c56:	2000      	movs	r0, #0
    2c58:	bd38      	pop	{r3, r4, r5, pc}
    2c5a:	bf00      	nop
    2c5c:	00002b21 	.word	0x00002b21
    2c60:	000057ac 	.word	0x000057ac

00002c64 <_usart_async_init>:
{
    2c64:	b570      	push	{r4, r5, r6, lr}
    2c66:	460c      	mov	r4, r1
	ASSERT(device);
    2c68:	4606      	mov	r6, r0
    2c6a:	22cb      	movs	r2, #203	; 0xcb
    2c6c:	4918      	ldr	r1, [pc, #96]	; (2cd0 <_usart_async_init+0x6c>)
    2c6e:	3000      	adds	r0, #0
    2c70:	bf18      	it	ne
    2c72:	2001      	movne	r0, #1
    2c74:	4b17      	ldr	r3, [pc, #92]	; (2cd4 <_usart_async_init+0x70>)
    2c76:	4798      	blx	r3
	init_status = _usart_init(hw);
    2c78:	4620      	mov	r0, r4
    2c7a:	4b17      	ldr	r3, [pc, #92]	; (2cd8 <_usart_async_init+0x74>)
    2c7c:	4798      	blx	r3
	if (init_status) {
    2c7e:	4605      	mov	r5, r0
    2c80:	b108      	cbz	r0, 2c86 <_usart_async_init+0x22>
}
    2c82:	4628      	mov	r0, r5
    2c84:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2c86:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2c88:	4631      	mov	r1, r6
    2c8a:	4620      	mov	r0, r4
    2c8c:	4b13      	ldr	r3, [pc, #76]	; (2cdc <_usart_async_init+0x78>)
    2c8e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2c90:	4620      	mov	r0, r4
    2c92:	4b13      	ldr	r3, [pc, #76]	; (2ce0 <_usart_async_init+0x7c>)
    2c94:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    2c96:	2400      	movs	r4, #0
    2c98:	e016      	b.n	2cc8 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c9a:	0941      	lsrs	r1, r0, #5
    2c9c:	f000 021f 	and.w	r2, r0, #31
    2ca0:	2301      	movs	r3, #1
    2ca2:	4093      	lsls	r3, r2
    2ca4:	4a0f      	ldr	r2, [pc, #60]	; (2ce4 <_usart_async_init+0x80>)
    2ca6:	f101 0620 	add.w	r6, r1, #32
    2caa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cb2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cb6:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2cba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    2cc2:	3001      	adds	r0, #1
    2cc4:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2cc6:	3401      	adds	r4, #1
    2cc8:	2c03      	cmp	r4, #3
    2cca:	d9e6      	bls.n	2c9a <_usart_async_init+0x36>
    2ccc:	e7d9      	b.n	2c82 <_usart_async_init+0x1e>
    2cce:	bf00      	nop
    2cd0:	00005818 	.word	0x00005818
    2cd4:	00001671 	.word	0x00001671
    2cd8:	00002b65 	.word	0x00002b65
    2cdc:	00002af1 	.word	0x00002af1
    2ce0:	00002b09 	.word	0x00002b09
    2ce4:	e000e100 	.word	0xe000e100

00002ce8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2ce8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2cea:	6299      	str	r1, [r3, #40]	; 0x28
    2cec:	4770      	bx	lr

00002cee <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2cee:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2cf0:	2201      	movs	r2, #1
    2cf2:	759a      	strb	r2, [r3, #22]
    2cf4:	4770      	bx	lr

00002cf6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2cf6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2cf8:	2202      	movs	r2, #2
    2cfa:	759a      	strb	r2, [r3, #22]
    2cfc:	4770      	bx	lr
	...

00002d00 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2d00:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d02:	4b02      	ldr	r3, [pc, #8]	; (2d0c <SERCOM5_0_Handler+0xc>)
    2d04:	6818      	ldr	r0, [r3, #0]
    2d06:	4b02      	ldr	r3, [pc, #8]	; (2d10 <SERCOM5_0_Handler+0x10>)
    2d08:	4798      	blx	r3
    2d0a:	bd08      	pop	{r3, pc}
    2d0c:	20000218 	.word	0x20000218
    2d10:	00002a81 	.word	0x00002a81

00002d14 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2d14:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d16:	4b02      	ldr	r3, [pc, #8]	; (2d20 <SERCOM5_1_Handler+0xc>)
    2d18:	6818      	ldr	r0, [r3, #0]
    2d1a:	4b02      	ldr	r3, [pc, #8]	; (2d24 <SERCOM5_1_Handler+0x10>)
    2d1c:	4798      	blx	r3
    2d1e:	bd08      	pop	{r3, pc}
    2d20:	20000218 	.word	0x20000218
    2d24:	00002a81 	.word	0x00002a81

00002d28 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2d28:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d2a:	4b02      	ldr	r3, [pc, #8]	; (2d34 <SERCOM5_2_Handler+0xc>)
    2d2c:	6818      	ldr	r0, [r3, #0]
    2d2e:	4b02      	ldr	r3, [pc, #8]	; (2d38 <SERCOM5_2_Handler+0x10>)
    2d30:	4798      	blx	r3
    2d32:	bd08      	pop	{r3, pc}
    2d34:	20000218 	.word	0x20000218
    2d38:	00002a81 	.word	0x00002a81

00002d3c <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2d3c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d3e:	4b02      	ldr	r3, [pc, #8]	; (2d48 <SERCOM5_3_Handler+0xc>)
    2d40:	6818      	ldr	r0, [r3, #0]
    2d42:	4b02      	ldr	r3, [pc, #8]	; (2d4c <SERCOM5_3_Handler+0x10>)
    2d44:	4798      	blx	r3
    2d46:	bd08      	pop	{r3, pc}
    2d48:	20000218 	.word	0x20000218
    2d4c:	00002a81 	.word	0x00002a81

00002d50 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2d50:	4b03      	ldr	r3, [pc, #12]	; (2d60 <_system_time_init+0x10>)
    2d52:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2d56:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2d58:	2205      	movs	r2, #5
    2d5a:	601a      	str	r2, [r3, #0]
    2d5c:	4770      	bx	lr
    2d5e:	bf00      	nop
    2d60:	e000e010 	.word	0xe000e010

00002d64 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2d64:	b508      	push	{r3, lr}
	_system_time_init(hw);
    2d66:	4b01      	ldr	r3, [pc, #4]	; (2d6c <_delay_init+0x8>)
    2d68:	4798      	blx	r3
    2d6a:	bd08      	pop	{r3, pc}
    2d6c:	00002d51 	.word	0x00002d51

00002d70 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2d70:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2d72:	e00d      	b.n	2d90 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    2d74:	4b0d      	ldr	r3, [pc, #52]	; (2dac <_delay_cycles+0x3c>)
    2d76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2d7a:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2d7c:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d7e:	4b0b      	ldr	r3, [pc, #44]	; (2dac <_delay_cycles+0x3c>)
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2d86:	d0fa      	beq.n	2d7e <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    2d88:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2d8c:	3101      	adds	r1, #1
	while (n--) {
    2d8e:	4610      	mov	r0, r2
    2d90:	1e43      	subs	r3, r0, #1
    2d92:	b2da      	uxtb	r2, r3
    2d94:	2800      	cmp	r0, #0
    2d96:	d1ed      	bne.n	2d74 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2d98:	4b04      	ldr	r3, [pc, #16]	; (2dac <_delay_cycles+0x3c>)
    2d9a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2d9c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d9e:	4b03      	ldr	r3, [pc, #12]	; (2dac <_delay_cycles+0x3c>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2da6:	d0fa      	beq.n	2d9e <_delay_cycles+0x2e>
		;
}
    2da8:	4770      	bx	lr
    2daa:	bf00      	nop
    2dac:	e000e010 	.word	0xe000e010

00002db0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2db0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2db2:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2db4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2db6:	f012 0f01 	tst.w	r2, #1
    2dba:	d100      	bne.n	2dbe <tc_interrupt_handler+0xe>
    2dbc:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2dbe:	2201      	movs	r2, #1
    2dc0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2dc2:	6803      	ldr	r3, [r0, #0]
    2dc4:	4798      	blx	r3
	}
}
    2dc6:	e7f9      	b.n	2dbc <tc_interrupt_handler+0xc>

00002dc8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2dc8:	b538      	push	{r3, r4, r5, lr}
    2dca:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2dcc:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2dce:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2dd0:	f013 0f01 	tst.w	r3, #1
    2dd4:	d004      	beq.n	2de0 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2dd6:	2301      	movs	r3, #1
    2dd8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2dda:	6803      	ldr	r3, [r0, #0]
    2ddc:	b103      	cbz	r3, 2de0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2dde:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2de0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2de2:	f013 0f02 	tst.w	r3, #2
    2de6:	d005      	beq.n	2df4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2de8:	2302      	movs	r3, #2
    2dea:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2dec:	686b      	ldr	r3, [r5, #4]
    2dee:	b10b      	cbz	r3, 2df4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2df0:	4628      	mov	r0, r5
    2df2:	4798      	blx	r3
    2df4:	bd38      	pop	{r3, r4, r5, pc}
	...

00002df8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2df8:	4b06      	ldr	r3, [pc, #24]	; (2e14 <_tc_init_irq_param+0x1c>)
    2dfa:	4298      	cmp	r0, r3
    2dfc:	d003      	beq.n	2e06 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2dfe:	4b06      	ldr	r3, [pc, #24]	; (2e18 <_tc_init_irq_param+0x20>)
    2e00:	4298      	cmp	r0, r3
    2e02:	d003      	beq.n	2e0c <_tc_init_irq_param+0x14>
    2e04:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2e06:	4b05      	ldr	r3, [pc, #20]	; (2e1c <_tc_init_irq_param+0x24>)
    2e08:	6019      	str	r1, [r3, #0]
    2e0a:	e7f8      	b.n	2dfe <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2e0c:	4b03      	ldr	r3, [pc, #12]	; (2e1c <_tc_init_irq_param+0x24>)
    2e0e:	6059      	str	r1, [r3, #4]
	}
}
    2e10:	e7f8      	b.n	2e04 <_tc_init_irq_param+0xc>
    2e12:	bf00      	nop
    2e14:	40003800 	.word	0x40003800
    2e18:	40003c00 	.word	0x40003c00
    2e1c:	2000021c 	.word	0x2000021c

00002e20 <get_tc_index>:
{
    2e20:	b570      	push	{r4, r5, r6, lr}
    2e22:	b086      	sub	sp, #24
    2e24:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2e26:	466c      	mov	r4, sp
    2e28:	4d17      	ldr	r5, [pc, #92]	; (2e88 <get_tc_index+0x68>)
    2e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e2e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2e32:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e36:	2300      	movs	r3, #0
    2e38:	2b05      	cmp	r3, #5
    2e3a:	d80a      	bhi.n	2e52 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2e3c:	aa06      	add	r2, sp, #24
    2e3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2e42:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2e46:	42b2      	cmp	r2, r6
    2e48:	d001      	beq.n	2e4e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e4a:	3301      	adds	r3, #1
    2e4c:	e7f4      	b.n	2e38 <get_tc_index+0x18>
			return i;
    2e4e:	b2db      	uxtb	r3, r3
    2e50:	e000      	b.n	2e54 <get_tc_index+0x34>
		}
	}
	return 0;
    2e52:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e54:	2200      	movs	r2, #0
    2e56:	2a01      	cmp	r2, #1
    2e58:	d80b      	bhi.n	2e72 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2e5a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2e5e:	0081      	lsls	r1, r0, #2
    2e60:	480a      	ldr	r0, [pc, #40]	; (2e8c <get_tc_index+0x6c>)
    2e62:	5c41      	ldrb	r1, [r0, r1]
    2e64:	4299      	cmp	r1, r3
    2e66:	d002      	beq.n	2e6e <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e68:	3201      	adds	r2, #1
    2e6a:	b2d2      	uxtb	r2, r2
    2e6c:	e7f3      	b.n	2e56 <get_tc_index+0x36>
			return i;
    2e6e:	b250      	sxtb	r0, r2
    2e70:	e007      	b.n	2e82 <get_tc_index+0x62>
	ASSERT(false);
    2e72:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2e76:	4906      	ldr	r1, [pc, #24]	; (2e90 <get_tc_index+0x70>)
    2e78:	2000      	movs	r0, #0
    2e7a:	4b06      	ldr	r3, [pc, #24]	; (2e94 <get_tc_index+0x74>)
    2e7c:	4798      	blx	r3
	return -1;
    2e7e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e82:	b006      	add	sp, #24
    2e84:	bd70      	pop	{r4, r5, r6, pc}
    2e86:	bf00      	nop
    2e88:	00005834 	.word	0x00005834
    2e8c:	20000000 	.word	0x20000000
    2e90:	0000584c 	.word	0x0000584c
    2e94:	00001671 	.word	0x00001671

00002e98 <_timer_init>:
{
    2e98:	b570      	push	{r4, r5, r6, lr}
    2e9a:	4606      	mov	r6, r0
    2e9c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2e9e:	4608      	mov	r0, r1
    2ea0:	4b6c      	ldr	r3, [pc, #432]	; (3054 <_timer_init+0x1bc>)
    2ea2:	4798      	blx	r3
    2ea4:	4605      	mov	r5, r0
	device->hw = hw;
    2ea6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2ea8:	228f      	movs	r2, #143	; 0x8f
    2eaa:	496b      	ldr	r1, [pc, #428]	; (3058 <_timer_init+0x1c0>)
    2eac:	2001      	movs	r0, #1
    2eae:	4b6b      	ldr	r3, [pc, #428]	; (305c <_timer_init+0x1c4>)
    2eb0:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2eb2:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2eb4:	f013 0f01 	tst.w	r3, #1
    2eb8:	d119      	bne.n	2eee <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2eba:	6923      	ldr	r3, [r4, #16]
    2ebc:	f013 0f03 	tst.w	r3, #3
    2ec0:	d1fb      	bne.n	2eba <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2ec2:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2ec4:	f013 0f02 	tst.w	r3, #2
    2ec8:	d00b      	beq.n	2ee2 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2eca:	6823      	ldr	r3, [r4, #0]
    2ecc:	f023 0302 	bic.w	r3, r3, #2
    2ed0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ed2:	6923      	ldr	r3, [r4, #16]
    2ed4:	f013 0f03 	tst.w	r3, #3
    2ed8:	d1fb      	bne.n	2ed2 <_timer_init+0x3a>
    2eda:	6923      	ldr	r3, [r4, #16]
    2edc:	f013 0f02 	tst.w	r3, #2
    2ee0:	d1fb      	bne.n	2eda <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2ee2:	2301      	movs	r3, #1
    2ee4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ee6:	6923      	ldr	r3, [r4, #16]
    2ee8:	f013 0f03 	tst.w	r3, #3
    2eec:	d1fb      	bne.n	2ee6 <_timer_init+0x4e>
    2eee:	6923      	ldr	r3, [r4, #16]
    2ef0:	f013 0f01 	tst.w	r3, #1
    2ef4:	d1fb      	bne.n	2eee <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2ef6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2efa:	009a      	lsls	r2, r3, #2
    2efc:	4b58      	ldr	r3, [pc, #352]	; (3060 <_timer_init+0x1c8>)
    2efe:	4413      	add	r3, r2
    2f00:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2f02:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f04:	6923      	ldr	r3, [r4, #16]
    2f06:	f013 0f03 	tst.w	r3, #3
    2f0a:	d1fb      	bne.n	2f04 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f0c:	00aa      	lsls	r2, r5, #2
    2f0e:	442a      	add	r2, r5
    2f10:	0091      	lsls	r1, r2, #2
    2f12:	4b53      	ldr	r3, [pc, #332]	; (3060 <_timer_init+0x1c8>)
    2f14:	440b      	add	r3, r1
    2f16:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2f18:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2f1a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2f1c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2f1e:	2201      	movs	r2, #1
    2f20:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2f22:	685b      	ldr	r3, [r3, #4]
    2f24:	f003 030c 	and.w	r3, r3, #12
    2f28:	2b08      	cmp	r3, #8
    2f2a:	d05b      	beq.n	2fe4 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d16d      	bne.n	300c <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2f30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f34:	009a      	lsls	r2, r3, #2
    2f36:	4b4a      	ldr	r3, [pc, #296]	; (3060 <_timer_init+0x1c8>)
    2f38:	4413      	add	r3, r2
    2f3a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f3c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f3e:	6923      	ldr	r3, [r4, #16]
    2f40:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f44:	d1fb      	bne.n	2f3e <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2f46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f4a:	009a      	lsls	r2, r3, #2
    2f4c:	4b44      	ldr	r3, [pc, #272]	; (3060 <_timer_init+0x1c8>)
    2f4e:	4413      	add	r3, r2
    2f50:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f52:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f54:	6923      	ldr	r3, [r4, #16]
    2f56:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f5a:	d1fb      	bne.n	2f54 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2f5c:	2301      	movs	r3, #1
    2f5e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2f60:	4631      	mov	r1, r6
    2f62:	4620      	mov	r0, r4
    2f64:	4b3f      	ldr	r3, [pc, #252]	; (3064 <_timer_init+0x1cc>)
    2f66:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f6c:	009a      	lsls	r2, r3, #2
    2f6e:	4b3c      	ldr	r3, [pc, #240]	; (3060 <_timer_init+0x1c8>)
    2f70:	4413      	add	r3, r2
    2f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2f76:	2b00      	cmp	r3, #0
    2f78:	db0d      	blt.n	2f96 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f7a:	095a      	lsrs	r2, r3, #5
    2f7c:	f003 031f 	and.w	r3, r3, #31
    2f80:	2101      	movs	r1, #1
    2f82:	fa01 f303 	lsl.w	r3, r1, r3
    2f86:	3220      	adds	r2, #32
    2f88:	4937      	ldr	r1, [pc, #220]	; (3068 <_timer_init+0x1d0>)
    2f8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f92:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2f96:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f9a:	009a      	lsls	r2, r3, #2
    2f9c:	4b30      	ldr	r3, [pc, #192]	; (3060 <_timer_init+0x1c8>)
    2f9e:	4413      	add	r3, r2
    2fa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	db09      	blt.n	2fbc <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fa8:	095a      	lsrs	r2, r3, #5
    2faa:	f003 031f 	and.w	r3, r3, #31
    2fae:	2101      	movs	r1, #1
    2fb0:	fa01 f303 	lsl.w	r3, r1, r3
    2fb4:	3260      	adds	r2, #96	; 0x60
    2fb6:	492c      	ldr	r1, [pc, #176]	; (3068 <_timer_init+0x1d0>)
    2fb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2fbc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2fc0:	00aa      	lsls	r2, r5, #2
    2fc2:	4b27      	ldr	r3, [pc, #156]	; (3060 <_timer_init+0x1c8>)
    2fc4:	4413      	add	r3, r2
    2fc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2fca:	2b00      	cmp	r3, #0
    2fcc:	db08      	blt.n	2fe0 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fce:	0959      	lsrs	r1, r3, #5
    2fd0:	f003 031f 	and.w	r3, r3, #31
    2fd4:	2201      	movs	r2, #1
    2fd6:	fa02 f303 	lsl.w	r3, r2, r3
    2fda:	4a23      	ldr	r2, [pc, #140]	; (3068 <_timer_init+0x1d0>)
    2fdc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2fe0:	2000      	movs	r0, #0
    2fe2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2fe4:	4b1e      	ldr	r3, [pc, #120]	; (3060 <_timer_init+0x1c8>)
    2fe6:	440b      	add	r3, r1
    2fe8:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2fea:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fec:	6923      	ldr	r3, [r4, #16]
    2fee:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2ff2:	d1fb      	bne.n	2fec <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2ff4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ff8:	009a      	lsls	r2, r3, #2
    2ffa:	4b19      	ldr	r3, [pc, #100]	; (3060 <_timer_init+0x1c8>)
    2ffc:	4413      	add	r3, r2
    2ffe:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3000:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3002:	6923      	ldr	r3, [r4, #16]
    3004:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3008:	d1fb      	bne.n	3002 <_timer_init+0x16a>
    300a:	e7a7      	b.n	2f5c <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    300c:	2b04      	cmp	r3, #4
    300e:	d1a5      	bne.n	2f5c <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3010:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3014:	009a      	lsls	r2, r3, #2
    3016:	4b12      	ldr	r3, [pc, #72]	; (3060 <_timer_init+0x1c8>)
    3018:	4413      	add	r3, r2
    301a:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    301c:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    301e:	6923      	ldr	r3, [r4, #16]
    3020:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3024:	d1fb      	bne.n	301e <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3026:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    302a:	009a      	lsls	r2, r3, #2
    302c:	4b0c      	ldr	r3, [pc, #48]	; (3060 <_timer_init+0x1c8>)
    302e:	4413      	add	r3, r2
    3030:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3032:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3034:	6923      	ldr	r3, [r4, #16]
    3036:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    303a:	d1fb      	bne.n	3034 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    303c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3040:	009a      	lsls	r2, r3, #2
    3042:	4b07      	ldr	r3, [pc, #28]	; (3060 <_timer_init+0x1c8>)
    3044:	4413      	add	r3, r2
    3046:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3048:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    304a:	6923      	ldr	r3, [r4, #16]
    304c:	f013 0f20 	tst.w	r3, #32
    3050:	d1fb      	bne.n	304a <_timer_init+0x1b2>
    3052:	e783      	b.n	2f5c <_timer_init+0xc4>
    3054:	00002e21 	.word	0x00002e21
    3058:	0000584c 	.word	0x0000584c
    305c:	00001671 	.word	0x00001671
    3060:	20000000 	.word	0x20000000
    3064:	00002df9 	.word	0x00002df9
    3068:	e000e100 	.word	0xe000e100

0000306c <_pwm_init>:
{
    306c:	b570      	push	{r4, r5, r6, lr}
    306e:	4606      	mov	r6, r0
    3070:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    3072:	4608      	mov	r0, r1
    3074:	4b59      	ldr	r3, [pc, #356]	; (31dc <_pwm_init+0x170>)
    3076:	4798      	blx	r3
    3078:	4605      	mov	r5, r0
	device->hw = hw;
    307a:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    307c:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    307e:	f013 0f01 	tst.w	r3, #1
    3082:	d119      	bne.n	30b8 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3084:	6923      	ldr	r3, [r4, #16]
    3086:	f013 0f03 	tst.w	r3, #3
    308a:	d1fb      	bne.n	3084 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    308c:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    308e:	f013 0f02 	tst.w	r3, #2
    3092:	d00b      	beq.n	30ac <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3094:	6823      	ldr	r3, [r4, #0]
    3096:	f023 0302 	bic.w	r3, r3, #2
    309a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    309c:	6923      	ldr	r3, [r4, #16]
    309e:	f013 0f03 	tst.w	r3, #3
    30a2:	d1fb      	bne.n	309c <_pwm_init+0x30>
    30a4:	6923      	ldr	r3, [r4, #16]
    30a6:	f013 0f02 	tst.w	r3, #2
    30aa:	d1fb      	bne.n	30a4 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    30ac:	2301      	movs	r3, #1
    30ae:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30b0:	6923      	ldr	r3, [r4, #16]
    30b2:	f013 0f03 	tst.w	r3, #3
    30b6:	d1fb      	bne.n	30b0 <_pwm_init+0x44>
    30b8:	6923      	ldr	r3, [r4, #16]
    30ba:	f013 0f01 	tst.w	r3, #1
    30be:	d1fb      	bne.n	30b8 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    30c0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30c4:	009a      	lsls	r2, r3, #2
    30c6:	4b46      	ldr	r3, [pc, #280]	; (31e0 <_pwm_init+0x174>)
    30c8:	4413      	add	r3, r2
    30ca:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    30cc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30ce:	6923      	ldr	r3, [r4, #16]
    30d0:	f013 0f03 	tst.w	r3, #3
    30d4:	d1fb      	bne.n	30ce <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    30d6:	00aa      	lsls	r2, r5, #2
    30d8:	442a      	add	r2, r5
    30da:	0091      	lsls	r1, r2, #2
    30dc:	4b40      	ldr	r3, [pc, #256]	; (31e0 <_pwm_init+0x174>)
    30de:	440b      	add	r3, r1
    30e0:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    30e2:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    30e4:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    30e6:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    30e8:	2203      	movs	r2, #3
    30ea:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    30ec:	685b      	ldr	r3, [r3, #4]
    30ee:	f003 030c 	and.w	r3, r3, #12
    30f2:	2b08      	cmp	r3, #8
    30f4:	d059      	beq.n	31aa <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    30f6:	2b00      	cmp	r3, #0
    30f8:	d16b      	bne.n	31d2 <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    30fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30fe:	009a      	lsls	r2, r3, #2
    3100:	4b37      	ldr	r3, [pc, #220]	; (31e0 <_pwm_init+0x174>)
    3102:	4413      	add	r3, r2
    3104:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3106:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3108:	6923      	ldr	r3, [r4, #16]
    310a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    310e:	d1fb      	bne.n	3108 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3110:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3114:	009a      	lsls	r2, r3, #2
    3116:	4b32      	ldr	r3, [pc, #200]	; (31e0 <_pwm_init+0x174>)
    3118:	4413      	add	r3, r2
    311a:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    311c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    311e:	6923      	ldr	r3, [r4, #16]
    3120:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3124:	d1fb      	bne.n	311e <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    3126:	4631      	mov	r1, r6
    3128:	4620      	mov	r0, r4
    312a:	4b2e      	ldr	r3, [pc, #184]	; (31e4 <_pwm_init+0x178>)
    312c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    312e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3132:	009a      	lsls	r2, r3, #2
    3134:	4b2a      	ldr	r3, [pc, #168]	; (31e0 <_pwm_init+0x174>)
    3136:	4413      	add	r3, r2
    3138:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    313c:	2b00      	cmp	r3, #0
    313e:	db0d      	blt.n	315c <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3140:	095a      	lsrs	r2, r3, #5
    3142:	f003 031f 	and.w	r3, r3, #31
    3146:	2101      	movs	r1, #1
    3148:	fa01 f303 	lsl.w	r3, r1, r3
    314c:	3220      	adds	r2, #32
    314e:	4926      	ldr	r1, [pc, #152]	; (31e8 <_pwm_init+0x17c>)
    3150:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3154:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3158:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    315c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3160:	009a      	lsls	r2, r3, #2
    3162:	4b1f      	ldr	r3, [pc, #124]	; (31e0 <_pwm_init+0x174>)
    3164:	4413      	add	r3, r2
    3166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    316a:	2b00      	cmp	r3, #0
    316c:	db09      	blt.n	3182 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    316e:	095a      	lsrs	r2, r3, #5
    3170:	f003 031f 	and.w	r3, r3, #31
    3174:	2101      	movs	r1, #1
    3176:	fa01 f303 	lsl.w	r3, r1, r3
    317a:	3260      	adds	r2, #96	; 0x60
    317c:	491a      	ldr	r1, [pc, #104]	; (31e8 <_pwm_init+0x17c>)
    317e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    3182:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3186:	00aa      	lsls	r2, r5, #2
    3188:	4b15      	ldr	r3, [pc, #84]	; (31e0 <_pwm_init+0x174>)
    318a:	4413      	add	r3, r2
    318c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3190:	2b00      	cmp	r3, #0
    3192:	db21      	blt.n	31d8 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3194:	0959      	lsrs	r1, r3, #5
    3196:	f003 031f 	and.w	r3, r3, #31
    319a:	2201      	movs	r2, #1
    319c:	fa02 f303 	lsl.w	r3, r2, r3
    31a0:	4a11      	ldr	r2, [pc, #68]	; (31e8 <_pwm_init+0x17c>)
    31a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    31a6:	2000      	movs	r0, #0
    31a8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    31aa:	4b0d      	ldr	r3, [pc, #52]	; (31e0 <_pwm_init+0x174>)
    31ac:	440b      	add	r3, r1
    31ae:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31b0:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31b2:	6923      	ldr	r3, [r4, #16]
    31b4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    31b8:	d1fb      	bne.n	31b2 <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    31ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    31be:	009a      	lsls	r2, r3, #2
    31c0:	4b07      	ldr	r3, [pc, #28]	; (31e0 <_pwm_init+0x174>)
    31c2:	4413      	add	r3, r2
    31c4:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31c6:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31c8:	6923      	ldr	r3, [r4, #16]
    31ca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    31ce:	d1fb      	bne.n	31c8 <_pwm_init+0x15c>
    31d0:	e7a9      	b.n	3126 <_pwm_init+0xba>
		return -1;
    31d2:	f04f 30ff 	mov.w	r0, #4294967295
    31d6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    31d8:	2000      	movs	r0, #0
}
    31da:	bd70      	pop	{r4, r5, r6, pc}
    31dc:	00002e21 	.word	0x00002e21
    31e0:	20000000 	.word	0x20000000
    31e4:	00002df9 	.word	0x00002df9
    31e8:	e000e100 	.word	0xe000e100

000031ec <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    31ec:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    31ee:	6813      	ldr	r3, [r2, #0]
    31f0:	f043 0302 	orr.w	r3, r3, #2
    31f4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31f6:	6913      	ldr	r3, [r2, #16]
    31f8:	f013 0f03 	tst.w	r3, #3
    31fc:	d1fb      	bne.n	31f6 <_timer_start+0xa>
}
    31fe:	4770      	bx	lr

00003200 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3200:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3202:	6813      	ldr	r3, [r2, #0]
    3204:	f043 0302 	orr.w	r3, r3, #2
    3208:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    320a:	6913      	ldr	r3, [r2, #16]
    320c:	f013 0f03 	tst.w	r3, #3
    3210:	d1fb      	bne.n	320a <_pwm_enable+0xa>
}
    3212:	4770      	bx	lr

00003214 <_pwm_set_param>:
{
    3214:	b570      	push	{r4, r5, r6, lr}
    3216:	460e      	mov	r6, r1
    3218:	4615      	mov	r5, r2
	void *const hw = device->hw;
    321a:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    321c:	4620      	mov	r0, r4
    321e:	4b1b      	ldr	r3, [pc, #108]	; (328c <_pwm_set_param+0x78>)
    3220:	4798      	blx	r3
	_tcs[i].cc0 = period;
    3222:	0082      	lsls	r2, r0, #2
    3224:	4402      	add	r2, r0
    3226:	0091      	lsls	r1, r2, #2
    3228:	4b19      	ldr	r3, [pc, #100]	; (3290 <_pwm_set_param+0x7c>)
    322a:	440b      	add	r3, r1
    322c:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    322e:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	f003 030c 	and.w	r3, r3, #12
    3236:	2b08      	cmp	r3, #8
    3238:	d016      	beq.n	3268 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    323a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    323e:	009a      	lsls	r2, r3, #2
    3240:	4b13      	ldr	r3, [pc, #76]	; (3290 <_pwm_set_param+0x7c>)
    3242:	4413      	add	r3, r2
    3244:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3246:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3248:	6923      	ldr	r3, [r4, #16]
    324a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    324e:	d1fb      	bne.n	3248 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    3250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3254:	0082      	lsls	r2, r0, #2
    3256:	4b0e      	ldr	r3, [pc, #56]	; (3290 <_pwm_set_param+0x7c>)
    3258:	4413      	add	r3, r2
    325a:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    325c:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    325e:	6923      	ldr	r3, [r4, #16]
    3260:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3264:	d1fb      	bne.n	325e <_pwm_set_param+0x4a>
    3266:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3268:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    326a:	6923      	ldr	r3, [r4, #16]
    326c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3270:	d1fb      	bne.n	326a <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3272:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3276:	0082      	lsls	r2, r0, #2
    3278:	4b05      	ldr	r3, [pc, #20]	; (3290 <_pwm_set_param+0x7c>)
    327a:	4413      	add	r3, r2
    327c:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    327e:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3280:	6923      	ldr	r3, [r4, #16]
    3282:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3286:	d1fb      	bne.n	3280 <_pwm_set_param+0x6c>
    3288:	bd70      	pop	{r4, r5, r6, pc}
    328a:	bf00      	nop
    328c:	00002e21 	.word	0x00002e21
    3290:	20000000 	.word	0x20000000

00003294 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3294:	68c2      	ldr	r2, [r0, #12]
    3296:	6913      	ldr	r3, [r2, #16]
    3298:	f013 0f03 	tst.w	r3, #3
    329c:	d1fb      	bne.n	3296 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    329e:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    32a4:	4770      	bx	lr

000032a6 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    32a6:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32a8:	6913      	ldr	r3, [r2, #16]
    32aa:	f013 0f03 	tst.w	r3, #3
    32ae:	d1fb      	bne.n	32a8 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32b0:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32b2:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    32b6:	4770      	bx	lr

000032b8 <_tc_get_timer>:
}
    32b8:	2000      	movs	r0, #0
    32ba:	4770      	bx	lr

000032bc <_tc_get_pwm>:
}
    32bc:	2000      	movs	r0, #0
    32be:	4770      	bx	lr

000032c0 <_timer_set_irq>:
{
    32c0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    32c2:	68c0      	ldr	r0, [r0, #12]
    32c4:	4b08      	ldr	r3, [pc, #32]	; (32e8 <_timer_set_irq+0x28>)
    32c6:	4798      	blx	r3
    32c8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    32ca:	f240 129d 	movw	r2, #413	; 0x19d
    32ce:	4907      	ldr	r1, [pc, #28]	; (32ec <_timer_set_irq+0x2c>)
    32d0:	2001      	movs	r0, #1
    32d2:	4b07      	ldr	r3, [pc, #28]	; (32f0 <_timer_set_irq+0x30>)
    32d4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    32d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    32da:	00a2      	lsls	r2, r4, #2
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <_timer_set_irq+0x34>)
    32de:	4413      	add	r3, r2
    32e0:	7898      	ldrb	r0, [r3, #2]
    32e2:	4b05      	ldr	r3, [pc, #20]	; (32f8 <_timer_set_irq+0x38>)
    32e4:	4798      	blx	r3
    32e6:	bd10      	pop	{r4, pc}
    32e8:	00002e21 	.word	0x00002e21
    32ec:	0000584c 	.word	0x0000584c
    32f0:	00001671 	.word	0x00001671
    32f4:	20000000 	.word	0x20000000
    32f8:	00001a31 	.word	0x00001a31

000032fc <TC0_Handler>:
{
    32fc:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    32fe:	4b02      	ldr	r3, [pc, #8]	; (3308 <TC0_Handler+0xc>)
    3300:	6818      	ldr	r0, [r3, #0]
    3302:	4b02      	ldr	r3, [pc, #8]	; (330c <TC0_Handler+0x10>)
    3304:	4798      	blx	r3
    3306:	bd08      	pop	{r3, pc}
    3308:	2000021c 	.word	0x2000021c
    330c:	00002dc9 	.word	0x00002dc9

00003310 <TC1_Handler>:
{
    3310:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    3312:	4b02      	ldr	r3, [pc, #8]	; (331c <TC1_Handler+0xc>)
    3314:	6858      	ldr	r0, [r3, #4]
    3316:	4b02      	ldr	r3, [pc, #8]	; (3320 <TC1_Handler+0x10>)
    3318:	4798      	blx	r3
    331a:	bd08      	pop	{r3, pc}
    331c:	2000021c 	.word	0x2000021c
    3320:	00002db1 	.word	0x00002db1

00003324 <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3324:	4b14      	ldr	r3, [pc, #80]	; (3378 <I2C_BB_init+0x54>)
    3326:	2201      	movs	r2, #1
    3328:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    332c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3330:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3334:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    3338:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    333c:	490f      	ldr	r1, [pc, #60]	; (337c <I2C_BB_init+0x58>)
    333e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3342:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    3346:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    334a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    334e:	2204      	movs	r2, #4
    3350:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3358:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    335c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    3360:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    3364:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3368:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    336c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3370:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    3374:	4770      	bx	lr
    3376:	bf00      	nop
    3378:	41008000 	.word	0x41008000
    337c:	c0020000 	.word	0xc0020000

00003380 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    3380:	4a02      	ldr	r2, [pc, #8]	; (338c <millisecondTimer_cb+0xc>)
    3382:	6813      	ldr	r3, [r2, #0]
    3384:	3301      	adds	r3, #1
    3386:	6013      	str	r3, [r2, #0]
    3388:	4770      	bx	lr
    338a:	bf00      	nop
    338c:	20000224 	.word	0x20000224

00003390 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    3390:	b510      	push	{r4, lr}
    3392:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3394:	2301      	movs	r3, #1
    3396:	f10d 0207 	add.w	r2, sp, #7
    339a:	2100      	movs	r1, #0
    339c:	4807      	ldr	r0, [pc, #28]	; (33bc <checkBattVoltage_cb+0x2c>)
    339e:	4c08      	ldr	r4, [pc, #32]	; (33c0 <checkBattVoltage_cb+0x30>)
    33a0:	47a0      	blx	r4
	battVolt = adcValue;
    33a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33a6:	4a07      	ldr	r2, [pc, #28]	; (33c4 <checkBattVoltage_cb+0x34>)
    33a8:	7013      	strb	r3, [r2, #0]
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 158) {
    33aa:	2b9d      	cmp	r3, #157	; 0x9d
    33ac:	d804      	bhi.n	33b8 <checkBattVoltage_cb+0x28>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    33ae:	4a06      	ldr	r2, [pc, #24]	; (33c8 <checkBattVoltage_cb+0x38>)
    33b0:	6813      	ldr	r3, [r2, #0]
    33b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    33b6:	6013      	str	r3, [r2, #0]
	}
}
    33b8:	b002      	add	sp, #8
    33ba:	bd10      	pop	{r4, pc}
    33bc:	200006d0 	.word	0x200006d0
    33c0:	00000ca1 	.word	0x00000ca1
    33c4:	20000b82 	.word	0x20000b82
    33c8:	20000028 	.word	0x20000028

000033cc <irReceive_cb>:
		deviceState |= DEVICE_STATE_CHARGING;
	}
}

static void irReceive_cb(void)
{
    33cc:	b500      	push	{lr}
    33ce:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    33d0:	a801      	add	r0, sp, #4
    33d2:	4b07      	ldr	r3, [pc, #28]	; (33f0 <irReceive_cb+0x24>)
    33d4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    33d6:	4b07      	ldr	r3, [pc, #28]	; (33f4 <irReceive_cb+0x28>)
    33d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    33dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    33e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    33e4:	a801      	add	r0, sp, #4
    33e6:	4b04      	ldr	r3, [pc, #16]	; (33f8 <irReceive_cb+0x2c>)
    33e8:	4798      	blx	r3
		
	}
	else {
		
	}	
}
    33ea:	b003      	add	sp, #12
    33ec:	f85d fb04 	ldr.w	pc, [sp], #4
    33f0:	00000d41 	.word	0x00000d41
    33f4:	41008000 	.word	0x41008000
    33f8:	00000d4f 	.word	0x00000d4f

000033fc <pushButton_cb>:

static void pushButton_cb(void)
{
    33fc:	b500      	push	{lr}
    33fe:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3400:	a801      	add	r0, sp, #4
    3402:	4b06      	ldr	r3, [pc, #24]	; (341c <pushButton_cb+0x20>)
    3404:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3406:	4b06      	ldr	r3, [pc, #24]	; (3420 <pushButton_cb+0x24>)
    3408:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    340a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    340c:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    340e:	a801      	add	r0, sp, #4
    3410:	4b04      	ldr	r3, [pc, #16]	; (3424 <pushButton_cb+0x28>)
    3412:	4798      	blx	r3
		
	}
	else {
		
	}
}
    3414:	b003      	add	sp, #12
    3416:	f85d fb04 	ldr.w	pc, [sp], #4
    341a:	bf00      	nop
    341c:	00000d41 	.word	0x00000d41
    3420:	41008000 	.word	0x41008000
    3424:	00000d4f 	.word	0x00000d4f

00003428 <battCharging_cb>:
{
    3428:	b510      	push	{r4, lr}
    342a:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    342c:	a801      	add	r0, sp, #4
    342e:	4b0f      	ldr	r3, [pc, #60]	; (346c <battCharging_cb+0x44>)
    3430:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3432:	4b0f      	ldr	r3, [pc, #60]	; (3470 <battCharging_cb+0x48>)
    3434:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3438:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    343c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3440:	4054      	eors	r4, r2
    3442:	400c      	ands	r4, r1
    3444:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3446:	a801      	add	r0, sp, #4
    3448:	4b0a      	ldr	r3, [pc, #40]	; (3474 <battCharging_cb+0x4c>)
    344a:	4798      	blx	r3
	if (pinState == true) {
    344c:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    3450:	d106      	bne.n	3460 <battCharging_cb+0x38>
		deviceState |= DEVICE_STATE_CHARGING;
    3452:	4a09      	ldr	r2, [pc, #36]	; (3478 <battCharging_cb+0x50>)
    3454:	6813      	ldr	r3, [r2, #0]
    3456:	f043 0320 	orr.w	r3, r3, #32
    345a:	6013      	str	r3, [r2, #0]
}
    345c:	b002      	add	sp, #8
    345e:	bd10      	pop	{r4, pc}
		deviceState &= ~(DEVICE_STATE_CHARGING);
    3460:	4a05      	ldr	r2, [pc, #20]	; (3478 <battCharging_cb+0x50>)
    3462:	6813      	ldr	r3, [r2, #0]
    3464:	f023 0320 	bic.w	r3, r3, #32
    3468:	6013      	str	r3, [r2, #0]
    346a:	e7f7      	b.n	345c <battCharging_cb+0x34>
    346c:	00000d41 	.word	0x00000d41
    3470:	41008000 	.word	0x41008000
    3474:	00000d4f 	.word	0x00000d4f
    3478:	20000028 	.word	0x20000028

0000347c <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
    347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3480:	4607      	mov	r7, r0
    3482:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3484:	4d2f      	ldr	r5, [pc, #188]	; (3544 <spi_BB_Write+0xc8>)
    3486:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    348a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    348e:	200a      	movs	r0, #10
    3490:	4c2d      	ldr	r4, [pc, #180]	; (3548 <spi_BB_Write+0xcc>)
    3492:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3494:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3498:	200a      	movs	r0, #10
    349a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    349c:	2408      	movs	r4, #8
    349e:	e00c      	b.n	34ba <spi_BB_Write+0x3e>
    34a0:	2210      	movs	r2, #16
    34a2:	4b28      	ldr	r3, [pc, #160]	; (3544 <spi_BB_Write+0xc8>)
    34a4:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    34a6:	200a      	movs	r0, #10
    34a8:	4d27      	ldr	r5, [pc, #156]	; (3548 <spi_BB_Write+0xcc>)
    34aa:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34ac:	2220      	movs	r2, #32
    34ae:	4b25      	ldr	r3, [pc, #148]	; (3544 <spi_BB_Write+0xc8>)
    34b0:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    34b2:	200a      	movs	r0, #10
    34b4:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    34b6:	3c01      	subs	r4, #1
    34b8:	b264      	sxtb	r4, r4
    34ba:	2c00      	cmp	r4, #0
    34bc:	db0b      	blt.n	34d6 <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34be:	2220      	movs	r2, #32
    34c0:	4b20      	ldr	r3, [pc, #128]	; (3544 <spi_BB_Write+0xc8>)
    34c2:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    34c4:	fa47 f304 	asr.w	r3, r7, r4
    34c8:	f013 0f01 	tst.w	r3, #1
    34cc:	d0e8      	beq.n	34a0 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34ce:	2210      	movs	r2, #16
    34d0:	4b1c      	ldr	r3, [pc, #112]	; (3544 <spi_BB_Write+0xc8>)
    34d2:	619a      	str	r2, [r3, #24]
    34d4:	e7e7      	b.n	34a6 <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34d6:	4c1b      	ldr	r4, [pc, #108]	; (3544 <spi_BB_Write+0xc8>)
    34d8:	2720      	movs	r7, #32
    34da:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34dc:	2310      	movs	r3, #16
    34de:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    34e0:	200a      	movs	r0, #10
    34e2:	4d19      	ldr	r5, [pc, #100]	; (3548 <spi_BB_Write+0xcc>)
    34e4:	47a8      	blx	r5
    34e6:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    34e8:	200a      	movs	r0, #10
    34ea:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    34ec:	240f      	movs	r4, #15
    34ee:	e00c      	b.n	350a <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34f0:	2210      	movs	r2, #16
    34f2:	4b14      	ldr	r3, [pc, #80]	; (3544 <spi_BB_Write+0xc8>)
    34f4:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    34f6:	200a      	movs	r0, #10
    34f8:	4d13      	ldr	r5, [pc, #76]	; (3548 <spi_BB_Write+0xcc>)
    34fa:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34fc:	2220      	movs	r2, #32
    34fe:	4b11      	ldr	r3, [pc, #68]	; (3544 <spi_BB_Write+0xc8>)
    3500:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3502:	200a      	movs	r0, #10
    3504:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    3506:	3c01      	subs	r4, #1
    3508:	b264      	sxtb	r4, r4
    350a:	2c00      	cmp	r4, #0
    350c:	db0b      	blt.n	3526 <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    350e:	2220      	movs	r2, #32
    3510:	4b0c      	ldr	r3, [pc, #48]	; (3544 <spi_BB_Write+0xc8>)
    3512:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    3514:	fa46 f304 	asr.w	r3, r6, r4
    3518:	f013 0f01 	tst.w	r3, #1
    351c:	d0e8      	beq.n	34f0 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    351e:	2210      	movs	r2, #16
    3520:	4b08      	ldr	r3, [pc, #32]	; (3544 <spi_BB_Write+0xc8>)
    3522:	619a      	str	r2, [r3, #24]
    3524:	e7e7      	b.n	34f6 <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3526:	4c07      	ldr	r4, [pc, #28]	; (3544 <spi_BB_Write+0xc8>)
    3528:	2320      	movs	r3, #32
    352a:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    352c:	200a      	movs	r0, #10
    352e:	4d06      	ldr	r5, [pc, #24]	; (3548 <spi_BB_Write+0xcc>)
    3530:	47a8      	blx	r5
	delay_us(10);
    3532:	200a      	movs	r0, #10
    3534:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    353a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3542:	bf00      	nop
    3544:	41008000 	.word	0x41008000
    3548:	00000db5 	.word	0x00000db5

0000354c <python480SetGain>:
{
    354c:	b508      	push	{r3, lr}
	switch (value)
    354e:	2802      	cmp	r0, #2
    3550:	d00d      	beq.n	356e <python480SetGain+0x22>
    3552:	2804      	cmp	r0, #4
    3554:	d010      	beq.n	3578 <python480SetGain+0x2c>
    3556:	2801      	cmp	r0, #1
    3558:	d004      	beq.n	3564 <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    355a:	21e1      	movs	r1, #225	; 0xe1
    355c:	20cc      	movs	r0, #204	; 0xcc
    355e:	4b09      	ldr	r3, [pc, #36]	; (3584 <python480SetGain+0x38>)
    3560:	4798      	blx	r3
    3562:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    3564:	21e1      	movs	r1, #225	; 0xe1
    3566:	20cc      	movs	r0, #204	; 0xcc
    3568:	4b06      	ldr	r3, [pc, #24]	; (3584 <python480SetGain+0x38>)
    356a:	4798      	blx	r3
		break;
    356c:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    356e:	21e4      	movs	r1, #228	; 0xe4
    3570:	20cc      	movs	r0, #204	; 0xcc
    3572:	4b04      	ldr	r3, [pc, #16]	; (3584 <python480SetGain+0x38>)
    3574:	4798      	blx	r3
		break;
    3576:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    3578:	2124      	movs	r1, #36	; 0x24
    357a:	20cc      	movs	r0, #204	; 0xcc
    357c:	4b01      	ldr	r3, [pc, #4]	; (3584 <python480SetGain+0x38>)
    357e:	4798      	blx	r3
		break;
    3580:	bd08      	pop	{r3, pc}
    3582:	bf00      	nop
    3584:	0000347d 	.word	0x0000347d

00003588 <python480SetFPS>:
{
    3588:	b508      	push	{r3, lr}
	switch (value)
    358a:	280a      	cmp	r0, #10
    358c:	d00a      	beq.n	35a4 <python480SetFPS+0x1c>
    358e:	280f      	cmp	r0, #15
    3590:	d00e      	beq.n	35b0 <python480SetFPS+0x28>
    3592:	2805      	cmp	r0, #5
    3594:	d000      	beq.n	3598 <python480SetFPS+0x10>
    3596:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 20000);
    3598:	f644 6120 	movw	r1, #20000	; 0x4e20
    359c:	20c9      	movs	r0, #201	; 0xc9
    359e:	4b07      	ldr	r3, [pc, #28]	; (35bc <python480SetFPS+0x34>)
    35a0:	4798      	blx	r3
		break;
    35a2:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    35a4:	f242 7110 	movw	r1, #10000	; 0x2710
    35a8:	20c9      	movs	r0, #201	; 0xc9
    35aa:	4b04      	ldr	r3, [pc, #16]	; (35bc <python480SetFPS+0x34>)
    35ac:	4798      	blx	r3
		break;
    35ae:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    35b0:	f641 210b 	movw	r1, #6667	; 0x1a0b
    35b4:	20c9      	movs	r0, #201	; 0xc9
    35b6:	4b01      	ldr	r3, [pc, #4]	; (35bc <python480SetFPS+0x34>)
    35b8:	4798      	blx	r3
}
    35ba:	e7ec      	b.n	3596 <python480SetFPS+0xe>
    35bc:	0000347d 	.word	0x0000347d

000035c0 <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
    35c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35c4:	b082      	sub	sp, #8
    35c6:	4606      	mov	r6, r0
    35c8:	4d33      	ldr	r5, [pc, #204]	; (3698 <spi_BB_Read+0xd8>)
    35ca:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    35ce:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    35d2:	200a      	movs	r0, #10
    35d4:	4c31      	ldr	r4, [pc, #196]	; (369c <spi_BB_Read+0xdc>)
    35d6:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    35d8:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    35dc:	200a      	movs	r0, #10
    35de:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    35e0:	2408      	movs	r4, #8
    35e2:	e00c      	b.n	35fe <spi_BB_Read+0x3e>
    35e4:	2210      	movs	r2, #16
    35e6:	4b2c      	ldr	r3, [pc, #176]	; (3698 <spi_BB_Read+0xd8>)
    35e8:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    35ea:	200a      	movs	r0, #10
    35ec:	4d2b      	ldr	r5, [pc, #172]	; (369c <spi_BB_Read+0xdc>)
    35ee:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    35f0:	2220      	movs	r2, #32
    35f2:	4b29      	ldr	r3, [pc, #164]	; (3698 <spi_BB_Read+0xd8>)
    35f4:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    35f6:	200a      	movs	r0, #10
    35f8:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    35fa:	3c01      	subs	r4, #1
    35fc:	b264      	sxtb	r4, r4
    35fe:	2c00      	cmp	r4, #0
    3600:	db0b      	blt.n	361a <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3602:	2220      	movs	r2, #32
    3604:	4b24      	ldr	r3, [pc, #144]	; (3698 <spi_BB_Read+0xd8>)
    3606:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3608:	fa46 f304 	asr.w	r3, r6, r4
    360c:	f013 0f01 	tst.w	r3, #1
    3610:	d0e8      	beq.n	35e4 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3612:	2210      	movs	r2, #16
    3614:	4b20      	ldr	r3, [pc, #128]	; (3698 <spi_BB_Read+0xd8>)
    3616:	619a      	str	r2, [r3, #24]
    3618:	e7e7      	b.n	35ea <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    361a:	4c1f      	ldr	r4, [pc, #124]	; (3698 <spi_BB_Read+0xd8>)
    361c:	2620      	movs	r6, #32
    361e:	6166      	str	r6, [r4, #20]
    3620:	2310      	movs	r3, #16
    3622:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    3624:	200a      	movs	r0, #10
    3626:	4d1d      	ldr	r5, [pc, #116]	; (369c <spi_BB_Read+0xdc>)
    3628:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    362a:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    362c:	200a      	movs	r0, #10
    362e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3630:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    3632:	200a      	movs	r0, #10
    3634:	47a8      	blx	r5
	uint16_t value = 0;
    3636:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    3638:	250f      	movs	r5, #15
    363a:	e01e      	b.n	367a <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    363c:	4c16      	ldr	r4, [pc, #88]	; (3698 <spi_BB_Read+0xd8>)
    363e:	f04f 0820 	mov.w	r8, #32
    3642:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3646:	200a      	movs	r0, #10
    3648:	4e14      	ldr	r6, [pc, #80]	; (369c <spi_BB_Read+0xdc>)
    364a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    364c:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    3650:	a801      	add	r0, sp, #4
    3652:	4b13      	ldr	r3, [pc, #76]	; (36a0 <spi_BB_Read+0xe0>)
    3654:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3656:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3658:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    365a:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    365c:	405c      	eors	r4, r3
    365e:	4014      	ands	r4, r2
    3660:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3662:	a801      	add	r0, sp, #4
    3664:	4b0f      	ldr	r3, [pc, #60]	; (36a4 <spi_BB_Read+0xe4>)
    3666:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3668:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    366c:	40ac      	lsls	r4, r5
    366e:	433c      	orrs	r4, r7
    3670:	b2a7      	uxth	r7, r4
		delay_us(10);	
    3672:	200a      	movs	r0, #10
    3674:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    3676:	3d01      	subs	r5, #1
    3678:	b26d      	sxtb	r5, r5
    367a:	2d00      	cmp	r5, #0
    367c:	dade      	bge.n	363c <spi_BB_Read+0x7c>
	}
	delay_us(10);
    367e:	200a      	movs	r0, #10
    3680:	4b06      	ldr	r3, [pc, #24]	; (369c <spi_BB_Read+0xdc>)
    3682:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3688:	4b03      	ldr	r3, [pc, #12]	; (3698 <spi_BB_Read+0xd8>)
    368a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    368e:	4638      	mov	r0, r7
    3690:	b002      	add	sp, #8
    3692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3696:	bf00      	nop
    3698:	41008000 	.word	0x41008000
    369c:	00000db5 	.word	0x00000db5
    36a0:	00000d41 	.word	0x00000d41
    36a4:	00000d4f 	.word	0x00000d4f

000036a8 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    36a8:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    36aa:	2100      	movs	r1, #0
    36ac:	2002      	movs	r0, #2
    36ae:	4c0e      	ldr	r4, [pc, #56]	; (36e8 <EnableClockMngmnt1+0x40>)
    36b0:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    36b2:	f242 1113 	movw	r1, #8467	; 0x2113
    36b6:	2011      	movs	r0, #17
    36b8:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    36ba:	2100      	movs	r1, #0
    36bc:	2014      	movs	r0, #20
    36be:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    36c0:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    36c4:	201a      	movs	r0, #26
    36c6:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    36c8:	f643 512d 	movw	r1, #15661	; 0x3d2d
    36cc:	201b      	movs	r0, #27
    36ce:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    36d0:	f247 011c 	movw	r1, #28700	; 0x701c
    36d4:	2020      	movs	r0, #32
    36d6:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    36d8:	2100      	movs	r1, #0
    36da:	2008      	movs	r0, #8
    36dc:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    36de:	2107      	movs	r1, #7
    36e0:	2010      	movs	r0, #16
    36e2:	47a0      	blx	r4
    36e4:	bd10      	pop	{r4, pc}
    36e6:	bf00      	nop
    36e8:	0000347d 	.word	0x0000347d

000036ec <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    36ec:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    36ee:	2100      	movs	r1, #0
    36f0:	2009      	movs	r0, #9
    36f2:	4c05      	ldr	r4, [pc, #20]	; (3708 <EnableClockMngmnt2+0x1c>)
    36f4:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    36f6:	f247 010e 	movw	r1, #28686	; 0x700e
    36fa:	2020      	movs	r0, #32
    36fc:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    36fe:	2101      	movs	r1, #1
    3700:	2022      	movs	r0, #34	; 0x22
    3702:	47a0      	blx	r4
    3704:	bd10      	pop	{r4, pc}
    3706:	bf00      	nop
    3708:	0000347d 	.word	0x0000347d

0000370c <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    370c:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    370e:	2100      	movs	r1, #0
    3710:	2002      	movs	r0, #2
    3712:	4ccd      	ldr	r4, [pc, #820]	; (3a48 <RequiredUploads+0x33c>)
    3714:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    3716:	2100      	movs	r1, #0
    3718:	2008      	movs	r0, #8
    371a:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    371c:	2100      	movs	r1, #0
    371e:	2009      	movs	r0, #9
    3720:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    3722:	2100      	movs	r1, #0
    3724:	200a      	movs	r0, #10
    3726:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    3728:	2100      	movs	r1, #0
    372a:	2014      	movs	r0, #20
    372c:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    372e:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    3732:	201a      	movs	r0, #26
    3734:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    3736:	f643 512d 	movw	r1, #15661	; 0x3d2d
    373a:	201b      	movs	r0, #27
    373c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    373e:	f247 010f 	movw	r1, #28687	; 0x700f
    3742:	2020      	movs	r0, #32
    3744:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    3746:	2101      	movs	r1, #1
    3748:	2022      	movs	r0, #34	; 0x22
    374a:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    374c:	2107      	movs	r1, #7
    374e:	2028      	movs	r0, #40	; 0x28
    3750:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    3752:	f640 015f 	movw	r1, #2143	; 0x85f
    3756:	2029      	movs	r0, #41	; 0x29
    3758:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    375a:	f244 1103 	movw	r1, #16643	; 0x4103
    375e:	202a      	movs	r0, #42	; 0x2a
    3760:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    3762:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    3766:	202b      	movs	r0, #43	; 0x2b
    3768:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    376a:	2101      	movs	r1, #1
    376c:	2030      	movs	r0, #48	; 0x30
    376e:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3770:	2101      	movs	r1, #1
    3772:	2040      	movs	r0, #64	; 0x40
    3774:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3776:	f643 012a 	movw	r1, #14378	; 0x382a
    377a:	2041      	movs	r0, #65	; 0x41
    377c:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    377e:	f245 31c8 	movw	r1, #21448	; 0x53c8
    3782:	2042      	movs	r0, #66	; 0x42
    3784:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    3786:	f240 6165 	movw	r1, #1637	; 0x665
    378a:	2043      	movs	r0, #67	; 0x43
    378c:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    378e:	2185      	movs	r1, #133	; 0x85
    3790:	2044      	movs	r0, #68	; 0x44
    3792:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    3794:	f640 0188 	movw	r1, #2184	; 0x888
    3798:	2045      	movs	r0, #69	; 0x45
    379a:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    379c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    37a0:	2046      	movs	r0, #70	; 0x46
    37a2:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    37a4:	f648 0188 	movw	r1, #34952	; 0x8888
    37a8:	2047      	movs	r0, #71	; 0x47
    37aa:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    37ac:	f240 1117 	movw	r1, #279	; 0x117
    37b0:	2048      	movs	r0, #72	; 0x48
    37b2:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    37b4:	2100      	movs	r1, #0
    37b6:	2070      	movs	r0, #112	; 0x70
    37b8:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    37ba:	f244 710a 	movw	r1, #18186	; 0x470a
    37be:	2080      	movs	r0, #128	; 0x80
    37c0:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    37c2:	f248 0101 	movw	r1, #32769	; 0x8001
    37c6:	2081      	movs	r0, #129	; 0x81
    37c8:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    37ca:	2115      	movs	r1, #21
    37cc:	2082      	movs	r0, #130	; 0x82
    37ce:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function. Sets subsampling too
    37d0:	f640 0101 	movw	r1, #2049	; 0x801
    37d4:	20c0      	movs	r0, #192	; 0xc0
    37d6:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    37d8:	21e4      	movs	r1, #228	; 0xe4
    37da:	20c2      	movs	r0, #194	; 0xc2
    37dc:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    37de:	f44f 7182 	mov.w	r1, #260	; 0x104
    37e2:	20c5      	movs	r0, #197	; 0xc5
    37e4:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    37e6:	21a7      	movs	r1, #167	; 0xa7
    37e8:	20c7      	movs	r0, #199	; 0xc7
    37ea:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    37ec:	f640 41e4 	movw	r1, #3300	; 0xce4
    37f0:	20c8      	movs	r0, #200	; 0xc8
    37f2:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    37f4:	f640 41e4 	movw	r1, #3300	; 0xce4
    37f8:	20c9      	movs	r0, #201	; 0xc9
    37fa:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    37fc:	21e4      	movs	r1, #228	; 0xe4
    37fe:	20cc      	movs	r0, #204	; 0xcc
    3800:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    3802:	2114      	movs	r1, #20
    3804:	20cf      	movs	r0, #207	; 0xcf
    3806:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3808:	f44f 7180 	mov.w	r1, #256	; 0x100
    380c:	20d6      	movs	r0, #214	; 0xd6
    380e:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    3810:	f241 011f 	movw	r1, #4127	; 0x101f
    3814:	20d7      	movs	r0, #215	; 0xd7
    3816:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3818:	2100      	movs	r1, #0
    381a:	20d8      	movs	r0, #216	; 0xd8
    381c:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    381e:	2123      	movs	r1, #35	; 0x23
    3820:	20db      	movs	r0, #219	; 0xdb
    3822:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3824:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3828:	20dc      	movs	r0, #220	; 0xdc
    382a:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    382c:	f642 314d 	movw	r1, #11085	; 0x2b4d
    3830:	20dd      	movs	r0, #221	; 0xdd
    3832:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    3834:	f643 615e 	movw	r1, #15966	; 0x3e5e
    3838:	20e0      	movs	r0, #224	; 0xe0
    383a:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    383c:	2149      	movs	r1, #73	; 0x49
    383e:	20d3      	movs	r0, #211	; 0xd3
    3840:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3842:	2100      	movs	r1, #0
    3844:	20d8      	movs	r0, #216	; 0xd8
    3846:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3848:	2123      	movs	r1, #35	; 0x23
    384a:	20db      	movs	r0, #219	; 0xdb
    384c:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    384e:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3852:	20dc      	movs	r0, #220	; 0xdc
    3854:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3856:	f642 314d 	movw	r1, #11085	; 0x2b4d
    385a:	20dd      	movs	r0, #221	; 0xdd
    385c:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    385e:	f240 2199 	movw	r1, #665	; 0x299
    3862:	20e6      	movs	r0, #230	; 0xe6
    3864:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    3866:	f44f 7154 	mov.w	r1, #848	; 0x350
    386a:	20e7      	movs	r0, #231	; 0xe7
    386c:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    386e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3872:	20e8      	movs	r0, #232	; 0xe8
    3874:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3876:	21e1      	movs	r1, #225	; 0xe1
    3878:	20eb      	movs	r0, #235	; 0xeb
    387a:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    387c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3880:	f44f 7080 	mov.w	r0, #256	; 0x100
    3884:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    3886:	f24b 0119 	movw	r1, #45081	; 0xb019
    388a:	f44f 7081 	mov.w	r0, #258	; 0x102
    388e:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    3890:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3894:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3898:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    389a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    389e:	f240 1081 	movw	r0, #385	; 0x181
    38a2:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    38a4:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    38a8:	f44f 70c1 	mov.w	r0, #386	; 0x182
    38ac:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    38ae:	f64f 3112 	movw	r1, #64274	; 0xfb12
    38b2:	f240 1083 	movw	r0, #387	; 0x183
    38b6:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    38b8:	f64f 1112 	movw	r1, #63762	; 0xf912
    38bc:	f44f 70c2 	mov.w	r0, #388	; 0x184
    38c0:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    38c2:	f64f 1103 	movw	r1, #63747	; 0xf903
    38c6:	f240 1085 	movw	r0, #389	; 0x185
    38ca:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    38cc:	f64f 0102 	movw	r1, #63490	; 0xf802
    38d0:	f44f 70c3 	mov.w	r0, #390	; 0x186
    38d4:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    38d6:	f24f 310f 	movw	r1, #62223	; 0xf30f
    38da:	f240 1087 	movw	r0, #391	; 0x187
    38de:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    38e0:	f24f 310f 	movw	r1, #62223	; 0xf30f
    38e4:	f44f 70c4 	mov.w	r0, #392	; 0x188
    38e8:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    38ea:	f24f 310f 	movw	r1, #62223	; 0xf30f
    38ee:	f240 1089 	movw	r0, #393	; 0x189
    38f2:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    38f4:	f24f 310a 	movw	r1, #62218	; 0xf30a
    38f8:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    38fc:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    38fe:	f24f 1101 	movw	r1, #61697	; 0xf101
    3902:	f240 108b 	movw	r0, #395	; 0x18b
    3906:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3908:	f24f 010a 	movw	r1, #61450	; 0xf00a
    390c:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    3910:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    3912:	f24f 214b 	movw	r1, #62027	; 0xf24b
    3916:	f240 108d 	movw	r0, #397	; 0x18d
    391a:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    391c:	f24f 2101 	movw	r1, #61953	; 0xf201
    3920:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    3924:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    3926:	f24f 2126 	movw	r1, #61990	; 0xf226
    392a:	f240 108f 	movw	r0, #399	; 0x18f
    392e:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    3930:	f24f 0121 	movw	r1, #61473	; 0xf021
    3934:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3938:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    393a:	f24f 0101 	movw	r1, #61441	; 0xf001
    393e:	f240 1091 	movw	r0, #401	; 0x191
    3942:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    3944:	f24f 4102 	movw	r1, #62466	; 0xf402
    3948:	f44f 70c9 	mov.w	r0, #402	; 0x192
    394c:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    394e:	f24f 0107 	movw	r1, #61447	; 0xf007
    3952:	f240 1093 	movw	r0, #403	; 0x193
    3956:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    3958:	f24f 210f 	movw	r1, #61967	; 0xf20f
    395c:	f44f 70ca 	mov.w	r0, #404	; 0x194
    3960:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    3962:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3966:	f240 1095 	movw	r0, #405	; 0x195
    396a:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    396c:	f24f 2102 	movw	r1, #61954	; 0xf202
    3970:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3974:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3976:	f24f 0106 	movw	r1, #61446	; 0xf006
    397a:	f240 1097 	movw	r0, #407	; 0x197
    397e:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3980:	f64e 4108 	movw	r1, #60424	; 0xec08
    3984:	f44f 70cc 	mov.w	r0, #408	; 0x198
    3988:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    398a:	f64c 0101 	movw	r1, #51201	; 0xc801
    398e:	f240 1099 	movw	r0, #409	; 0x199
    3992:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3994:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3998:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    399c:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    399e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    39a2:	f240 10a3 	movw	r0, #419	; 0x1a3
    39a6:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    39a8:	f64c 4102 	movw	r1, #52226	; 0xcc02
    39ac:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    39b0:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    39b2:	f64c 4101 	movw	r1, #52225	; 0xcc01
    39b6:	f240 10a5 	movw	r0, #421	; 0x1a5
    39ba:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    39bc:	f64c 4102 	movw	r1, #52226	; 0xcc02
    39c0:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    39c4:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    39c6:	f64c 4101 	movw	r1, #52225	; 0xcc01
    39ca:	f240 10a7 	movw	r0, #423	; 0x1a7
    39ce:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    39d0:	f64c 4102 	movw	r1, #52226	; 0xcc02
    39d4:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    39d8:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    39da:	f64c 0105 	movw	r1, #51205	; 0xc805
    39de:	f240 10a9 	movw	r0, #425	; 0x1a9
    39e2:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    39e4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    39e8:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    39ec:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    39ee:	2130      	movs	r1, #48	; 0x30
    39f0:	f240 10ab 	movw	r0, #427	; 0x1ab
    39f4:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    39f6:	f242 017b 	movw	r1, #8315	; 0x207b
    39fa:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    39fe:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    3a00:	f242 0171 	movw	r1, #8305	; 0x2071
    3a04:	f240 10ad 	movw	r0, #429	; 0x1ad
    3a08:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    3a0a:	2171      	movs	r1, #113	; 0x71
    3a0c:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    3a10:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    3a12:	f241 017f 	movw	r1, #4223	; 0x107f
    3a16:	f240 10af 	movw	r0, #431	; 0x1af
    3a1a:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    3a1c:	f241 0172 	movw	r1, #4210	; 0x1072
    3a20:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    3a24:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    3a26:	f241 0174 	movw	r1, #4212	; 0x1074
    3a2a:	f240 10b1 	movw	r0, #433	; 0x1b1
    3a2e:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    3a30:	2171      	movs	r1, #113	; 0x71
    3a32:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    3a36:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    3a38:	2131      	movs	r1, #49	; 0x31
    3a3a:	f240 10b3 	movw	r0, #435	; 0x1b3
    3a3e:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    3a40:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3a44:	e002      	b.n	3a4c <RequiredUploads+0x340>
    3a46:	bf00      	nop
    3a48:	0000347d 	.word	0x0000347d
    3a4c:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    3a50:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    3a52:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3a56:	f240 10b5 	movw	r0, #437	; 0x1b5
    3a5a:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    3a5c:	21b1      	movs	r1, #177	; 0xb1
    3a5e:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    3a62:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    3a64:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3a68:	f240 10b7 	movw	r0, #439	; 0x1b7
    3a6c:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    3a6e:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3a72:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3a76:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3a78:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3a7c:	f240 10b9 	movw	r0, #441	; 0x1b9
    3a80:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    3a82:	21b1      	movs	r1, #177	; 0xb1
    3a84:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    3a88:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    3a8a:	2130      	movs	r1, #48	; 0x30
    3a8c:	f240 10bb 	movw	r0, #443	; 0x1bb
    3a90:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    3a92:	2130      	movs	r1, #48	; 0x30
    3a94:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    3a98:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    3a9a:	f242 117b 	movw	r1, #8571	; 0x217b
    3a9e:	f240 10bd 	movw	r0, #445	; 0x1bd
    3aa2:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3aa4:	f242 0171 	movw	r1, #8305	; 0x2071
    3aa8:	f44f 70df 	mov.w	r0, #446	; 0x1be
    3aac:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    3aae:	2171      	movs	r1, #113	; 0x71
    3ab0:	f240 10bf 	movw	r0, #447	; 0x1bf
    3ab4:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3ab6:	f241 017f 	movw	r1, #4223	; 0x107f
    3aba:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    3abe:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3ac0:	f241 0172 	movw	r1, #4210	; 0x1072
    3ac4:	f240 10c1 	movw	r0, #449	; 0x1c1
    3ac8:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    3aca:	f241 0174 	movw	r1, #4212	; 0x1074
    3ace:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    3ad2:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3ad4:	2171      	movs	r1, #113	; 0x71
    3ad6:	f240 10c3 	movw	r0, #451	; 0x1c3
    3ada:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    3adc:	2131      	movs	r1, #49	; 0x31
    3ade:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    3ae2:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3ae4:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3ae8:	f240 10c5 	movw	r0, #453	; 0x1c5
    3aec:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    3aee:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3af2:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3af6:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3af8:	21b1      	movs	r1, #177	; 0xb1
    3afa:	f240 10c7 	movw	r0, #455	; 0x1c7
    3afe:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    3b00:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3b04:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3b08:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    3b0a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3b0e:	f240 10c9 	movw	r0, #457	; 0x1c9
    3b12:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    3b14:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3b18:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    3b1c:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    3b1e:	21b1      	movs	r1, #177	; 0xb1
    3b20:	f240 10cb 	movw	r0, #459	; 0x1cb
    3b24:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    3b26:	2130      	movs	r1, #48	; 0x30
    3b28:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    3b2c:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    3b2e:	2130      	movs	r1, #48	; 0x30
    3b30:	f240 10cd 	movw	r0, #461	; 0x1cd
    3b34:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    3b36:	f242 117b 	movw	r1, #8571	; 0x217b
    3b3a:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    3b3e:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    3b40:	f242 0171 	movw	r1, #8305	; 0x2071
    3b44:	f240 10cf 	movw	r0, #463	; 0x1cf
    3b48:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    3b4a:	2171      	movs	r1, #113	; 0x71
    3b4c:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    3b50:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    3b52:	f241 0171 	movw	r1, #4209	; 0x1071
    3b56:	f240 10d1 	movw	r0, #465	; 0x1d1
    3b5a:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    3b5c:	2171      	movs	r1, #113	; 0x71
    3b5e:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    3b62:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    3b64:	2131      	movs	r1, #49	; 0x31
    3b66:	f240 10d3 	movw	r0, #467	; 0x1d3
    3b6a:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    3b6c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3b70:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3b74:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3b76:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3b7a:	f240 10d5 	movw	r0, #469	; 0x1d5
    3b7e:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3b80:	21b1      	movs	r1, #177	; 0xb1
    3b82:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    3b86:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    3b88:	f241 01b3 	movw	r1, #4275	; 0x10b3
    3b8c:	f240 10d7 	movw	r0, #471	; 0x1d7
    3b90:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    3b92:	f241 01b1 	movw	r1, #4273	; 0x10b1
    3b96:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    3b9a:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    3b9c:	21b1      	movs	r1, #177	; 0xb1
    3b9e:	f240 10d9 	movw	r0, #473	; 0x1d9
    3ba2:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3ba4:	213f      	movs	r1, #63	; 0x3f
    3ba6:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    3baa:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    3bac:	2132      	movs	r1, #50	; 0x32
    3bae:	f240 10db 	movw	r0, #475	; 0x1db
    3bb2:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3bb4:	2130      	movs	r1, #48	; 0x30
    3bb6:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    3bba:	47a0      	blx	r4
    3bbc:	bd10      	pop	{r4, pc}
    3bbe:	bf00      	nop

00003bc0 <SoftPowerUp>:
}

void SoftPowerUp() {
    3bc0:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3bc2:	2100      	movs	r1, #0
    3bc4:	200a      	movs	r0, #10
    3bc6:	4c0d      	ldr	r4, [pc, #52]	; (3bfc <SoftPowerUp+0x3c>)
    3bc8:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    3bca:	f247 010f 	movw	r1, #28687	; 0x700f
    3bce:	2020      	movs	r0, #32
    3bd0:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    3bd2:	2107      	movs	r1, #7
    3bd4:	2028      	movs	r0, #40	; 0x28
    3bd6:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3bd8:	f244 1113 	movw	r1, #16659	; 0x4113
    3bdc:	202a      	movs	r0, #42	; 0x2a
    3bde:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    3be0:	2101      	movs	r1, #1
    3be2:	2030      	movs	r0, #48	; 0x30
    3be4:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3be6:	2101      	movs	r1, #1
    3be8:	2040      	movs	r0, #64	; 0x40
    3bea:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    3bec:	f240 1127 	movw	r1, #295	; 0x127
    3bf0:	2048      	movs	r0, #72	; 0x48
    3bf2:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3bf4:	2100      	movs	r1, #0
    3bf6:	2070      	movs	r0, #112	; 0x70
    3bf8:	47a0      	blx	r4
    3bfa:	bd10      	pop	{r4, pc}
    3bfc:	0000347d 	.word	0x0000347d

00003c00 <python480Init>:
{
    3c00:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    3c02:	4b06      	ldr	r3, [pc, #24]	; (3c1c <python480Init+0x1c>)
    3c04:	4798      	blx	r3
	delay_ms(10);
    3c06:	200a      	movs	r0, #10
    3c08:	4b05      	ldr	r3, [pc, #20]	; (3c20 <python480Init+0x20>)
    3c0a:	4798      	blx	r3
	EnableClockMngmnt2();
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <python480Init+0x24>)
    3c0e:	4798      	blx	r3
	RequiredUploads();
    3c10:	4b05      	ldr	r3, [pc, #20]	; (3c28 <python480Init+0x28>)
    3c12:	4798      	blx	r3
	SoftPowerUp();
    3c14:	4b05      	ldr	r3, [pc, #20]	; (3c2c <python480Init+0x2c>)
    3c16:	4798      	blx	r3
    3c18:	bd08      	pop	{r3, pc}
    3c1a:	bf00      	nop
    3c1c:	000036a9 	.word	0x000036a9
    3c20:	00000dd5 	.word	0x00000dd5
    3c24:	000036ed 	.word	0x000036ed
    3c28:	0000370d 	.word	0x0000370d
    3c2c:	00003bc1 	.word	0x00003bc1

00003c30 <getCurrentTimeMS>:
	return timeMS;
    3c30:	4b01      	ldr	r3, [pc, #4]	; (3c38 <getCurrentTimeMS+0x8>)
    3c32:	6818      	ldr	r0, [r3, #0]
}
    3c34:	4770      	bx	lr
    3c36:	bf00      	nop
    3c38:	20000224 	.word	0x20000224

00003c3c <loadSDCardHeader>:
uint8_t loadSDCardHeader(void){
    3c3c:	b508      	push	{r3, lr}
	sd_mmc_init_read_blocks(0,HEADER_BLOCK,1);
    3c3e:	2201      	movs	r2, #1
    3c40:	f240 31fe 	movw	r1, #1022	; 0x3fe
    3c44:	2000      	movs	r0, #0
    3c46:	4b07      	ldr	r3, [pc, #28]	; (3c64 <loadSDCardHeader+0x28>)
    3c48:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerBlock,1);
    3c4a:	2101      	movs	r1, #1
    3c4c:	4806      	ldr	r0, [pc, #24]	; (3c68 <loadSDCardHeader+0x2c>)
    3c4e:	4b07      	ldr	r3, [pc, #28]	; (3c6c <loadSDCardHeader+0x30>)
    3c50:	4798      	blx	r3
	if (sd_mmc_wait_end_of_read_blocks(false) == SD_MMC_OK)
    3c52:	2000      	movs	r0, #0
    3c54:	4b06      	ldr	r3, [pc, #24]	; (3c70 <loadSDCardHeader+0x34>)
    3c56:	4798      	blx	r3
    3c58:	b108      	cbz	r0, 3c5e <loadSDCardHeader+0x22>
		return MS_ERROR;
    3c5a:	2000      	movs	r0, #0
}
    3c5c:	bd08      	pop	{r3, pc}
		return MS_SUCCESS;
    3c5e:	2001      	movs	r0, #1
    3c60:	bd08      	pop	{r3, pc}
    3c62:	bf00      	nop
    3c64:	00004f11 	.word	0x00004f11
    3c68:	20000228 	.word	0x20000228
    3c6c:	00004fad 	.word	0x00004fad
    3c70:	00004ff9 	.word	0x00004ff9

00003c74 <setBufferHeader>:
void setBufferHeader(uint32_t dataWordLength) {
    3c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c78:	4680      	mov	r8, r0
	uint32_t numBuffer = bufferCount % NUM_BUFFERS;
    3c7a:	4b10      	ldr	r3, [pc, #64]	; (3cbc <setBufferHeader+0x48>)
    3c7c:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
    3c80:	f006 0603 	and.w	r6, r6, #3
	dataBuffer[numBuffer][BUFFER_HEADER_HEADER_LENGTH_POS] = BUFFER_HEADER_LENGTH;
    3c84:	4c0e      	ldr	r4, [pc, #56]	; (3cc0 <setBufferHeader+0x4c>)
    3c86:	00b5      	lsls	r5, r6, #2
    3c88:	19a9      	adds	r1, r5, r6
    3c8a:	034a      	lsls	r2, r1, #13
    3c8c:	18a7      	adds	r7, r4, r2
    3c8e:	2109      	movs	r1, #9
    3c90:	50a1      	str	r1, [r4, r2]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_NUM_POS] = frameNum;
    3c92:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    3c96:	60ba      	str	r2, [r7, #8]
	dataBuffer[numBuffer][BUFFER_HEADER_BUFFER_COUNT_POS] = bufferCount;
    3c98:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3c9c:	60fa      	str	r2, [r7, #12]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_BUFFER_COUNT_POS] = frameBufferCount;
    3c9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3ca2:	613b      	str	r3, [r7, #16]
	dataBuffer[numBuffer][BUFFER_HEADER_TIMESTAMP_POS] = getCurrentTimeMS() - startTimeMS;
    3ca4:	4b07      	ldr	r3, [pc, #28]	; (3cc4 <setBufferHeader+0x50>)
    3ca6:	4798      	blx	r3
    3ca8:	4b07      	ldr	r3, [pc, #28]	; (3cc8 <setBufferHeader+0x54>)
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	1ac0      	subs	r0, r0, r3
    3cae:	61f8      	str	r0, [r7, #28]
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
    3cb0:	ea4f 0388 	mov.w	r3, r8, lsl #2
    3cb4:	623b      	str	r3, [r7, #32]
    3cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cba:	bf00      	nop
    3cbc:	20000224 	.word	0x20000224
    3cc0:	20000be4 	.word	0x20000be4
    3cc4:	00003c31 	.word	0x00003c31
    3cc8:	20000bd4 	.word	0x20000bd4

00003ccc <pcc_dma_cb>:
	}
}

static void pcc_dma_cb(struct camera_async_descriptor *const descr, uint32_t ch)
{
	if (ch == CONF_PCC_DMA_CHANNEL) {
    3ccc:	b101      	cbz	r1, 3cd0 <pcc_dma_cb+0x4>
    3cce:	4770      	bx	lr
{
    3cd0:	b508      	push	{r3, lr}
		// add header to current buffer
		setBufferHeader(BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH);
    3cd2:	f242 70f7 	movw	r0, #10231	; 0x27f7
    3cd6:	4b07      	ldr	r3, [pc, #28]	; (3cf4 <pcc_dma_cb+0x28>)
    3cd8:	4798      	blx	r3
		bufferCount++;// increment counters
    3cda:	4b07      	ldr	r3, [pc, #28]	; (3cf8 <pcc_dma_cb+0x2c>)
    3cdc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3ce0:	3201      	adds	r2, #1
    3ce2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		frameBufferCount++;
    3ce6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
    3cea:	3201      	adds	r2, #1
    3cec:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    3cf0:	bd08      	pop	{r3, pc}
    3cf2:	bf00      	nop
    3cf4:	00003c75 	.word	0x00003c75
    3cf8:	20000224 	.word	0x20000224

00003cfc <setExcitationLED>:
	}
}

void setExcitationLED(uint32_t value, bool enable)
{
    3cfc:	b538      	push	{r3, r4, r5, lr}
    3cfe:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    3d00:	2864      	cmp	r0, #100	; 0x64
    3d02:	d900      	bls.n	3d06 <setExcitationLED+0xa>
		value = 100;
    3d04:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    3d06:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    3d0a:	490b      	ldr	r1, [pc, #44]	; (3d38 <setExcitationLED+0x3c>)
    3d0c:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // value sets duty cycle out of 2^16. We aren't using CC1 so just send it 0
    3d10:	4c0a      	ldr	r4, [pc, #40]	; (3d3c <setExcitationLED+0x40>)
    3d12:	2200      	movs	r2, #0
    3d14:	0949      	lsrs	r1, r1, #5
    3d16:	4620      	mov	r0, r4
    3d18:	4b09      	ldr	r3, [pc, #36]	; (3d40 <setExcitationLED+0x44>)
    3d1a:	4798      	blx	r3
	pwm_enable(&PWM_0); //Only actually needs to be done once. Consider moving to init stuff at top of main()
    3d1c:	4620      	mov	r0, r4
    3d1e:	4b09      	ldr	r3, [pc, #36]	; (3d44 <setExcitationLED+0x48>)
    3d20:	4798      	blx	r3
	if (level) {
    3d22:	b925      	cbnz	r5, 3d2e <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d24:	2202      	movs	r2, #2
    3d26:	4b08      	ldr	r3, [pc, #32]	; (3d48 <setExcitationLED+0x4c>)
    3d28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3d2c:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d2e:	2202      	movs	r2, #2
    3d30:	4b05      	ldr	r3, [pc, #20]	; (3d48 <setExcitationLED+0x4c>)
    3d32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3d36:	bd38      	pop	{r3, r4, r5, pc}
    3d38:	51eb851f 	.word	0x51eb851f
    3d3c:	200006a0 	.word	0x200006a0
    3d40:	00001279 	.word	0x00001279
    3d44:	0000123d 	.word	0x0000123d
    3d48:	41008000 	.word	0x41008000

00003d4c <setStatusLED>:
    3d4c:	b928      	cbnz	r0, 3d5a <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d52:	4b05      	ldr	r3, [pc, #20]	; (3d68 <setStatusLED+0x1c>)
    3d54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3d58:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d5e:	4b02      	ldr	r3, [pc, #8]	; (3d68 <setStatusLED+0x1c>)
    3d60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop
    3d68:	41008000 	.word	0x41008000

00003d6c <setPCCCurrentLinkedListPosition>:
	
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}
void setPCCCurrentLinkedListPosition(uint8_t pos)
{
    3d6c:	b538      	push	{r3, r4, r5, lr}
	// Set up initial DMA descriptor for DMA channel handling PCC. BTCNT is already setup in DMA init step
	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].SRCADDR.reg);
    3d6e:	4c0c      	ldr	r4, [pc, #48]	; (3da0 <setPCCCurrentLinkedListPosition+0x34>)
    3d70:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    3d74:	6861      	ldr	r1, [r4, #4]
    3d76:	2000      	movs	r0, #0
    3d78:	4b0a      	ldr	r3, [pc, #40]	; (3da4 <setPCCCurrentLinkedListPosition+0x38>)
    3d7a:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg);
    3d7c:	68a1      	ldr	r1, [r4, #8]
    3d7e:	2000      	movs	r0, #0
    3d80:	4d09      	ldr	r5, [pc, #36]	; (3da8 <setPCCCurrentLinkedListPosition+0x3c>)
    3d82:	47a8      	blx	r5
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS));
    3d84:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    3d88:	2000      	movs	r0, #0
    3d8a:	4b08      	ldr	r3, [pc, #32]	; (3dac <setPCCCurrentLinkedListPosition+0x40>)
    3d8c:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg); // Overwrite destination address since set_data_amount function modifies this
    3d8e:	68a1      	ldr	r1, [r4, #8]
    3d90:	2000      	movs	r0, #0
    3d92:	47a8      	blx	r5

	_dma_set_DESCADDR(CONF_PCC_DMA_CHANNEL, linkedList[pos].DESCADDR.reg);
    3d94:	68e1      	ldr	r1, [r4, #12]
    3d96:	2000      	movs	r0, #0
    3d98:	4b05      	ldr	r3, [pc, #20]	; (3db0 <setPCCCurrentLinkedListPosition+0x44>)
    3d9a:	4798      	blx	r3
    3d9c:	bd38      	pop	{r3, r4, r5, pc}
    3d9e:	bf00      	nop
    3da0:	20000b90 	.word	0x20000b90
    3da4:	00001c51 	.word	0x00001c51
    3da8:	00001c41 	.word	0x00001c41
    3dac:	00001c81 	.word	0x00001c81
    3db0:	00001c61 	.word	0x00001c61

00003db4 <linkedListInit>:
{
    3db4:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3db6:	2300      	movs	r3, #0
    3db8:	e019      	b.n	3dee <linkedListInit+0x3a>
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
    3dba:	4a15      	ldr	r2, [pc, #84]	; (3e10 <linkedListInit+0x5c>)
    3dbc:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    3dc0:	60ca      	str	r2, [r1, #12]
		linkedList[i].BTCNT.reg = (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS);
    3dc2:	4813      	ldr	r0, [pc, #76]	; (3e10 <linkedListInit+0x5c>)
    3dc4:	011a      	lsls	r2, r3, #4
    3dc6:	1881      	adds	r1, r0, r2
    3dc8:	f44f 5420 	mov.w	r4, #10240	; 0x2800
    3dcc:	804c      	strh	r4, [r1, #2]
		linkedList[i].BTCTRL.reg = DMAC_BTCTRL_STEPSIZE(0) | (CONF_DMAC_STEPSEL_0 << DMAC_BTCTRL_STEPSEL_Pos)						\
    3dce:	f640 2409 	movw	r4, #2569	; 0xa09
    3dd2:	5284      	strh	r4, [r0, r2]
		linkedList[i].SRCADDR.reg = (uint32_t)(&PCC->RHR.reg); //(void *)&(((Pcc *)device->hw)->RHR.reg)
    3dd4:	4a0f      	ldr	r2, [pc, #60]	; (3e14 <linkedListInit+0x60>)
    3dd6:	604a      	str	r2, [r1, #4]
		linkedList[i].DSTADDR.reg = (uint32_t)(&dataBuffer[i][BUFFER_HEADER_LENGTH]) + (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS) * 4;
    3dd8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    3ddc:	0342      	lsls	r2, r0, #13
    3dde:	3224      	adds	r2, #36	; 0x24
    3de0:	480d      	ldr	r0, [pc, #52]	; (3e18 <linkedListInit+0x64>)
    3de2:	4402      	add	r2, r0
    3de4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3de8:	608a      	str	r2, [r1, #8]
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3dea:	3301      	adds	r3, #1
    3dec:	b2db      	uxtb	r3, r3
    3dee:	2b03      	cmp	r3, #3
    3df0:	d809      	bhi.n	3e06 <linkedListInit+0x52>
		if (i == (NUM_BUFFERS - 1))
    3df2:	2b03      	cmp	r3, #3
    3df4:	d0e1      	beq.n	3dba <linkedListInit+0x6>
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
    3df6:	1c5a      	adds	r2, r3, #1
    3df8:	4905      	ldr	r1, [pc, #20]	; (3e10 <linkedListInit+0x5c>)
    3dfa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    3dfe:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    3e02:	60ca      	str	r2, [r1, #12]
    3e04:	e7dd      	b.n	3dc2 <linkedListInit+0xe>
	setPCCCurrentLinkedListPosition(0);
    3e06:	2000      	movs	r0, #0
    3e08:	4b04      	ldr	r3, [pc, #16]	; (3e1c <linkedListInit+0x68>)
    3e0a:	4798      	blx	r3
    3e0c:	bd10      	pop	{r4, pc}
    3e0e:	bf00      	nop
    3e10:	20000b90 	.word	0x20000b90
    3e14:	43002c14 	.word	0x43002c14
    3e18:	20000be4 	.word	0x20000be4
    3e1c:	00003d6d 	.word	0x00003d6d

00003e20 <frameValid_cb>:
{
    3e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e22:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3e24:	a801      	add	r0, sp, #4
    3e26:	4d50      	ldr	r5, [pc, #320]	; (3f68 <frameValid_cb+0x148>)
    3e28:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3e2a:	4e50      	ldr	r6, [pc, #320]	; (3f6c <frameValid_cb+0x14c>)
    3e2c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3e30:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3e34:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3e38:	405c      	eors	r4, r3
    3e3a:	4014      	ands	r4, r2
    3e3c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3e3e:	a801      	add	r0, sp, #4
    3e40:	4f4b      	ldr	r7, [pc, #300]	; (3f70 <frameValid_cb+0x150>)
    3e42:	47b8      	blx	r7
    3e44:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
	CRITICAL_SECTION_ENTER();
    3e48:	4668      	mov	r0, sp
    3e4a:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3e4c:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3e50:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3e54:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3e58:	405d      	eors	r5, r3
    3e5a:	4015      	ands	r5, r2
    3e5c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    3e5e:	4668      	mov	r0, sp
    3e60:	47b8      	blx	r7
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    3e62:	f415 7f00 	tst.w	r5, #512	; 0x200
    3e66:	d012      	beq.n	3e8e <frameValid_cb+0x6e>
		setStatusLED(0);
    3e68:	2000      	movs	r0, #0
    3e6a:	4b42      	ldr	r3, [pc, #264]	; (3f74 <frameValid_cb+0x154>)
    3e6c:	4798      	blx	r3
	if (pinState == true) {
    3e6e:	b964      	cbnz	r4, 3e8a <frameValid_cb+0x6a>
		if (deviceState == DEVICE_STATE_RECORDING || deviceState == DEVICE_STATE_STOP_RECORDING) {
    3e70:	4b41      	ldr	r3, [pc, #260]	; (3f78 <frameValid_cb+0x158>)
    3e72:	681b      	ldr	r3, [r3, #0]
    3e74:	2b08      	cmp	r3, #8
    3e76:	d00e      	beq.n	3e96 <frameValid_cb+0x76>
    3e78:	4b3f      	ldr	r3, [pc, #252]	; (3f78 <frameValid_cb+0x158>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	2b10      	cmp	r3, #16
    3e7e:	d00a      	beq.n	3e96 <frameValid_cb+0x76>
		else if (deviceState == DEVICE_STATE_START_RECORDING_WAITING) {
    3e80:	4b3d      	ldr	r3, [pc, #244]	; (3f78 <frameValid_cb+0x158>)
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e88:	d04e      	beq.n	3f28 <frameValid_cb+0x108>
}
    3e8a:	b003      	add	sp, #12
    3e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setStatusLED(1);
    3e8e:	2001      	movs	r0, #1
    3e90:	4b38      	ldr	r3, [pc, #224]	; (3f74 <frameValid_cb+0x154>)
    3e92:	4798      	blx	r3
    3e94:	e7eb      	b.n	3e6e <frameValid_cb+0x4e>
			PCC->MR.reg &= ~(PCC_MR_PCEN); // Disables PCC
    3e96:	4a39      	ldr	r2, [pc, #228]	; (3f7c <frameValid_cb+0x15c>)
    3e98:	6813      	ldr	r3, [r2, #0]
    3e9a:	f023 0301 	bic.w	r3, r3, #1
    3e9e:	6013      	str	r3, [r2, #0]
			DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHCTRLA.reg &= ~(DMAC_CHCTRLA_ENABLE); // Disables PCC DMA
    3ea0:	4a37      	ldr	r2, [pc, #220]	; (3f80 <frameValid_cb+0x160>)
    3ea2:	6c13      	ldr	r3, [r2, #64]	; 0x40
    3ea4:	f023 0302 	bic.w	r3, r3, #2
    3ea8:	6413      	str	r3, [r2, #64]	; 0x40
			setBufferHeader(BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH - _dma_get_WRB_data(CONF_PCC_DMA_CHANNEL)); // This should get total beats transferred through DMA
    3eaa:	2000      	movs	r0, #0
    3eac:	4b35      	ldr	r3, [pc, #212]	; (3f84 <frameValid_cb+0x164>)
    3eae:	4798      	blx	r3
    3eb0:	f5c0 501f 	rsb	r0, r0, #10176	; 0x27c0
    3eb4:	3037      	adds	r0, #55	; 0x37
    3eb6:	4b34      	ldr	r3, [pc, #208]	; (3f88 <frameValid_cb+0x168>)
    3eb8:	4798      	blx	r3
			frameBufferCount = 0;
    3eba:	4b34      	ldr	r3, [pc, #208]	; (3f8c <frameValid_cb+0x16c>)
    3ebc:	2200      	movs	r2, #0
    3ebe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			bufferCount++; // A buffer has been filled (likely partially) and is ready for writing to SD card
    3ec2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3ec6:	3201      	adds	r2, #1
    3ec8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			frameNum++; // Zero-Indexed
    3ecc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    3ed0:	3201      	adds	r2, #1
    3ed2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (deviceState == DEVICE_STATE_RECORDING) { // Keep recording
    3ed6:	4b28      	ldr	r3, [pc, #160]	; (3f78 <frameValid_cb+0x158>)
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	2b08      	cmp	r3, #8
    3edc:	d013      	beq.n	3f06 <frameValid_cb+0xe6>
			if (deviceState == DEVICE_STATE_STOP_RECORDING) {
    3ede:	4b26      	ldr	r3, [pc, #152]	; (3f78 <frameValid_cb+0x158>)
    3ee0:	681b      	ldr	r3, [r3, #0]
    3ee2:	2b10      	cmp	r3, #16
    3ee4:	d1d1      	bne.n	3e8a <frameValid_cb+0x6a>
				linkedListInit();
    3ee6:	4b2a      	ldr	r3, [pc, #168]	; (3f90 <frameValid_cb+0x170>)
    3ee8:	4798      	blx	r3
				deviceState &= ~(DEVICE_STATE_RECORDING);
    3eea:	4b23      	ldr	r3, [pc, #140]	; (3f78 <frameValid_cb+0x158>)
    3eec:	681a      	ldr	r2, [r3, #0]
    3eee:	f022 0208 	bic.w	r2, r2, #8
    3ef2:	601a      	str	r2, [r3, #0]
				deviceState &= ~(DEVICE_STATE_STOP_RECORDING);
    3ef4:	681a      	ldr	r2, [r3, #0]
    3ef6:	f022 0210 	bic.w	r2, r2, #16
    3efa:	601a      	str	r2, [r3, #0]
				deviceState |= DEVICE_STATE_IDLE;
    3efc:	681a      	ldr	r2, [r3, #0]
    3efe:	f042 0202 	orr.w	r2, r2, #2
    3f02:	601a      	str	r2, [r3, #0]
    3f04:	e7c1      	b.n	3e8a <frameValid_cb+0x6a>
				setPCCCurrentLinkedListPosition(bufferCount % NUM_BUFFERS); // Moves to next buffer/linked list element
    3f06:	4b21      	ldr	r3, [pc, #132]	; (3f8c <frameValid_cb+0x16c>)
    3f08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    3f0c:	f000 0003 	and.w	r0, r0, #3
    3f10:	4b20      	ldr	r3, [pc, #128]	; (3f94 <frameValid_cb+0x174>)
    3f12:	4798      	blx	r3
				_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    3f14:	2100      	movs	r1, #0
    3f16:	4608      	mov	r0, r1
    3f18:	4b1f      	ldr	r3, [pc, #124]	; (3f98 <frameValid_cb+0x178>)
    3f1a:	4798      	blx	r3
				PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    3f1c:	4a17      	ldr	r2, [pc, #92]	; (3f7c <frameValid_cb+0x15c>)
    3f1e:	6813      	ldr	r3, [r2, #0]
    3f20:	f043 0301 	orr.w	r3, r3, #1
    3f24:	6013      	str	r3, [r2, #0]
    3f26:	e7da      	b.n	3ede <frameValid_cb+0xbe>
			frameNum = 0;
    3f28:	4b18      	ldr	r3, [pc, #96]	; (3f8c <frameValid_cb+0x16c>)
    3f2a:	2400      	movs	r4, #0
    3f2c:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
			bufferCount = 0;
    3f30:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
			frameBufferCount = 0;
    3f34:	f8c3 440c 	str.w	r4, [r3, #1036]	; 0x40c
			linkedListInit();
    3f38:	4b15      	ldr	r3, [pc, #84]	; (3f90 <frameValid_cb+0x170>)
    3f3a:	4798      	blx	r3
			setPCCCurrentLinkedListPosition(0); // Moves to next buffer/linked list element
    3f3c:	4620      	mov	r0, r4
    3f3e:	4b15      	ldr	r3, [pc, #84]	; (3f94 <frameValid_cb+0x174>)
    3f40:	4798      	blx	r3
			_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    3f42:	4621      	mov	r1, r4
    3f44:	4620      	mov	r0, r4
    3f46:	4b14      	ldr	r3, [pc, #80]	; (3f98 <frameValid_cb+0x178>)
    3f48:	4798      	blx	r3
			PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    3f4a:	4a0c      	ldr	r2, [pc, #48]	; (3f7c <frameValid_cb+0x15c>)
    3f4c:	6813      	ldr	r3, [r2, #0]
    3f4e:	f043 0301 	orr.w	r3, r3, #1
    3f52:	6013      	str	r3, [r2, #0]
			deviceState &= ~(DEVICE_STATE_START_RECORDING_WAITING);
    3f54:	4b08      	ldr	r3, [pc, #32]	; (3f78 <frameValid_cb+0x158>)
    3f56:	681a      	ldr	r2, [r3, #0]
    3f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    3f5c:	601a      	str	r2, [r3, #0]
			deviceState |= DEVICE_STATE_RECORDING;
    3f5e:	681a      	ldr	r2, [r3, #0]
    3f60:	f042 0208 	orr.w	r2, r2, #8
    3f64:	601a      	str	r2, [r3, #0]
}
    3f66:	e790      	b.n	3e8a <frameValid_cb+0x6a>
    3f68:	00000d41 	.word	0x00000d41
    3f6c:	41008000 	.word	0x41008000
    3f70:	00000d4f 	.word	0x00000d4f
    3f74:	00003d4d 	.word	0x00003d4d
    3f78:	20000028 	.word	0x20000028
    3f7c:	43002c00 	.word	0x43002c00
    3f80:	4100a000 	.word	0x4100a000
    3f84:	00001c71 	.word	0x00001c71
    3f88:	00003c75 	.word	0x00003c75
    3f8c:	20000224 	.word	0x20000224
    3f90:	00003db5 	.word	0x00003db5
    3f94:	00003d6d 	.word	0x00003d6d
    3f98:	00001cd9 	.word	0x00001cd9

00003f9c <startRecording>:
}

void startRecording()
{
    3f9c:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    3f9e:	2000      	movs	r0, #0
    3fa0:	4b12      	ldr	r3, [pc, #72]	; (3fec <startRecording+0x50>)
    3fa2:	6018      	str	r0, [r3, #0]
	writeBufferCount = 0;
    3fa4:	4b12      	ldr	r3, [pc, #72]	; (3ff0 <startRecording+0x54>)
    3fa6:	6018      	str	r0, [r3, #0]
	droppedBufferCount = 0;
    3fa8:	4b12      	ldr	r3, [pc, #72]	; (3ff4 <startRecording+0x58>)
    3faa:	6018      	str	r0, [r3, #0]
	droppedFrameCount = 0;
    3fac:	4b12      	ldr	r3, [pc, #72]	; (3ff8 <startRecording+0x5c>)
    3fae:	6018      	str	r0, [r3, #0]
	framesToDrop = 0;
    3fb0:	4b12      	ldr	r3, [pc, #72]	; (3ffc <startRecording+0x60>)
    3fb2:	6018      	str	r0, [r3, #0]
	
	// This gets the next set of blocks ready to be written into
	sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK); 
    3fb4:	4c12      	ldr	r4, [pc, #72]	; (4000 <startRecording+0x64>)
    3fb6:	6861      	ldr	r1, [r4, #4]
    3fb8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3fbc:	4b11      	ldr	r3, [pc, #68]	; (4004 <startRecording+0x68>)
    3fbe:	4798      	blx	r3
	initBlocksRemaining = BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK;
    3fc0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3fc4:	4b10      	ldr	r3, [pc, #64]	; (4008 <startRecording+0x6c>)
    3fc6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
		
	startTimeMS = getCurrentTimeMS();
    3fca:	4b10      	ldr	r3, [pc, #64]	; (400c <startRecording+0x70>)
    3fcc:	4798      	blx	r3
    3fce:	4b10      	ldr	r3, [pc, #64]	; (4010 <startRecording+0x74>)
    3fd0:	6018      	str	r0, [r3, #0]
	
	deviceState &= ~(DEVICE_STATE_IDLE);
    3fd2:	6823      	ldr	r3, [r4, #0]
    3fd4:	f023 0302 	bic.w	r3, r3, #2
    3fd8:	6023      	str	r3, [r4, #0]
	deviceState &= ~(DEVICE_STATE_START_RECORDING);
    3fda:	6823      	ldr	r3, [r4, #0]
    3fdc:	f023 0304 	bic.w	r3, r3, #4
    3fe0:	6023      	str	r3, [r4, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3fe2:	6823      	ldr	r3, [r4, #0]
    3fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3fe8:	6023      	str	r3, [r4, #0]
    3fea:	bd10      	pop	{r4, pc}
    3fec:	20000be0 	.word	0x20000be0
    3ff0:	20000bdc 	.word	0x20000bdc
    3ff4:	20000b8c 	.word	0x20000b8c
    3ff8:	20000bd8 	.word	0x20000bd8
    3ffc:	20000b88 	.word	0x20000b88
    4000:	20000028 	.word	0x20000028
    4004:	00005069 	.word	0x00005069
    4008:	20000224 	.word	0x20000224
    400c:	00003c31 	.word	0x00003c31
    4010:	20000bd4 	.word	0x20000bd4

00004014 <stopRecording>:
}

void stopRecording()
{
    4014:	b510      	push	{r4, lr}
	
	// TODO: Update currentBlock maybe to get ready for next recording??
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
    4016:	4b13      	ldr	r3, [pc, #76]	; (4064 <stopRecording+0x50>)
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	b2db      	uxtb	r3, r3
    401c:	4c12      	ldr	r4, [pc, #72]	; (4068 <stopRecording+0x54>)
    401e:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    4022:	4b12      	ldr	r3, [pc, #72]	; (406c <stopRecording+0x58>)
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	b2db      	uxtb	r3, r3
    4028:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    402c:	2201      	movs	r2, #1
    402e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4032:	2000      	movs	r0, #0
    4034:	4b0e      	ldr	r3, [pc, #56]	; (4070 <stopRecording+0x5c>)
    4036:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    4038:	2101      	movs	r1, #1
    403a:	f504 7001 	add.w	r0, r4, #516	; 0x204
    403e:	4b0d      	ldr	r3, [pc, #52]	; (4074 <stopRecording+0x60>)
    4040:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    4042:	2000      	movs	r0, #0
    4044:	4b0c      	ldr	r3, [pc, #48]	; (4078 <stopRecording+0x64>)
    4046:	4798      	blx	r3
	
	deviceState &= ~(DEVICE_STATE_STOP_RECORDING);
    4048:	4b0c      	ldr	r3, [pc, #48]	; (407c <stopRecording+0x68>)
    404a:	681a      	ldr	r2, [r3, #0]
    404c:	f022 0210 	bic.w	r2, r2, #16
    4050:	601a      	str	r2, [r3, #0]
	deviceState &= ~(DEVICE_STATE_RECORDING);
    4052:	681a      	ldr	r2, [r3, #0]
    4054:	f022 0208 	bic.w	r2, r2, #8
    4058:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_IDLE;
    405a:	681a      	ldr	r2, [r3, #0]
    405c:	f042 0202 	orr.w	r2, r2, #2
    4060:	601a      	str	r2, [r3, #0]
    4062:	bd10      	pop	{r4, pc}
    4064:	20000bdc 	.word	0x20000bdc
    4068:	20000224 	.word	0x20000224
    406c:	20000b8c 	.word	0x20000b8c
    4070:	00005069 	.word	0x00005069
    4074:	00005109 	.word	0x00005109
    4078:	00005155 	.word	0x00005155
    407c:	20000028 	.word	0x20000028

00004080 <recording>:
}

void recording()
{
    4080:	b508      	push	{r3, lr}
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    4082:	4b77      	ldr	r3, [pc, #476]	; (4260 <recording+0x1e0>)
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	4a77      	ldr	r2, [pc, #476]	; (4264 <recording+0x1e4>)
    4088:	6812      	ldr	r2, [r2, #0]
    408a:	4413      	add	r3, r2
    408c:	4a76      	ldr	r2, [pc, #472]	; (4268 <recording+0x1e8>)
    408e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    4092:	4293      	cmp	r3, r2
    4094:	d224      	bcs.n	40e0 <recording+0x60>
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    4096:	4b72      	ldr	r3, [pc, #456]	; (4260 <recording+0x1e0>)
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	4a72      	ldr	r2, [pc, #456]	; (4264 <recording+0x1e4>)
    409c:	6812      	ldr	r2, [r2, #0]
    409e:	4413      	add	r3, r2
    40a0:	3304      	adds	r3, #4
    40a2:	4a71      	ldr	r2, [pc, #452]	; (4268 <recording+0x1e8>)
    40a4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    40a8:	4293      	cmp	r3, r2
    40aa:	d21a      	bcs.n	40e2 <recording+0x62>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			// TODO: I think NUM_BUFFERS here should actually be number_of_buffers_per_frame
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
    40ac:	4b6c      	ldr	r3, [pc, #432]	; (4260 <recording+0x1e0>)
    40ae:	681b      	ldr	r3, [r3, #0]
    40b0:	4a6c      	ldr	r2, [pc, #432]	; (4264 <recording+0x1e4>)
    40b2:	6811      	ldr	r1, [r2, #0]
    40b4:	440b      	add	r3, r1
    40b6:	f003 0303 	and.w	r3, r3, #3
    40ba:	f1c3 0304 	rsb	r3, r3, #4
    40be:	6811      	ldr	r1, [r2, #0]
    40c0:	440b      	add	r3, r1
    40c2:	6013      	str	r3, [r2, #0]
			
			
		}
		
		//if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
		if (((getCurrentTimeMS() - startTimeMS) >= 10*1000)){
    40c4:	4b69      	ldr	r3, [pc, #420]	; (426c <recording+0x1ec>)
    40c6:	4798      	blx	r3
    40c8:	4b69      	ldr	r3, [pc, #420]	; (4270 <recording+0x1f0>)
    40ca:	681b      	ldr	r3, [r3, #0]
    40cc:	1ac0      	subs	r0, r0, r3
    40ce:	f242 730f 	movw	r3, #9999	; 0x270f
    40d2:	4298      	cmp	r0, r3
    40d4:	d904      	bls.n	40e0 <recording+0x60>

			// Recording time has elapsed
			deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording			
    40d6:	4a67      	ldr	r2, [pc, #412]	; (4274 <recording+0x1f4>)
    40d8:	6813      	ldr	r3, [r2, #0]
    40da:	f043 0310 	orr.w	r3, r3, #16
    40de:	6013      	str	r3, [r2, #0]
    40e0:	bd08      	pop	{r3, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    40e2:	4b5f      	ldr	r3, [pc, #380]	; (4260 <recording+0x1e0>)
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	4a5f      	ldr	r2, [pc, #380]	; (4264 <recording+0x1e4>)
    40e8:	6812      	ldr	r2, [r2, #0]
    40ea:	4413      	add	r3, r2
    40ec:	f003 0303 	and.w	r3, r3, #3
    40f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    40f4:	0358      	lsls	r0, r3, #13
    40f6:	4b60      	ldr	r3, [pc, #384]	; (4278 <recording+0x1f8>)
    40f8:	4418      	add	r0, r3
    40fa:	4b60      	ldr	r3, [pc, #384]	; (427c <recording+0x1fc>)
    40fc:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    40fe:	6a03      	ldr	r3, [r0, #32]
    4100:	f203 2323 	addw	r3, r3, #547	; 0x223
    4104:	0a5b      	lsrs	r3, r3, #9
    4106:	4a5b      	ldr	r2, [pc, #364]	; (4274 <recording+0x1f4>)
    4108:	6093      	str	r3, [r2, #8]
			if (numBlocks > BUFFER_BLOCK_LENGTH)
    410a:	6893      	ldr	r3, [r2, #8]
    410c:	2b50      	cmp	r3, #80	; 0x50
    410e:	d902      	bls.n	4116 <recording+0x96>
				numBlocks = BUFFER_BLOCK_LENGTH;
    4110:	2250      	movs	r2, #80	; 0x50
    4112:	4b58      	ldr	r3, [pc, #352]	; (4274 <recording+0x1f4>)
    4114:	609a      	str	r2, [r3, #8]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    4116:	4b52      	ldr	r3, [pc, #328]	; (4260 <recording+0x1e0>)
    4118:	681b      	ldr	r3, [r3, #0]
    411a:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    411c:	4b51      	ldr	r3, [pc, #324]	; (4264 <recording+0x1e4>)
    411e:	681b      	ldr	r3, [r3, #0]
    4120:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    4122:	4b54      	ldr	r3, [pc, #336]	; (4274 <recording+0x1f4>)
    4124:	689a      	ldr	r2, [r3, #8]
    4126:	4b50      	ldr	r3, [pc, #320]	; (4268 <recording+0x1e8>)
    4128:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
    412c:	429a      	cmp	r2, r3
    412e:	d356      	bcc.n	41de <recording+0x15e>
			else if (numBlocks == initBlocksRemaining)
    4130:	4b50      	ldr	r3, [pc, #320]	; (4274 <recording+0x1f4>)
    4132:	689a      	ldr	r2, [r3, #8]
    4134:	4b4c      	ldr	r3, [pc, #304]	; (4268 <recording+0x1e8>)
    4136:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
    413a:	429a      	cmp	r2, r3
    413c:	d06a      	beq.n	4214 <recording+0x194>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    413e:	4b4a      	ldr	r3, [pc, #296]	; (4268 <recording+0x1e8>)
    4140:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    4144:	b289      	uxth	r1, r1
    4146:	4b4e      	ldr	r3, [pc, #312]	; (4280 <recording+0x200>)
    4148:	4798      	blx	r3
    414a:	b120      	cbz	r0, 4156 <recording+0xd6>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;				
    414c:	4a49      	ldr	r2, [pc, #292]	; (4274 <recording+0x1f4>)
    414e:	6813      	ldr	r3, [r2, #0]
    4150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4154:	6013      	str	r3, [r2, #0]
				sd_mmc_wait_end_of_write_blocks(false);
    4156:	2000      	movs	r0, #0
    4158:	4b4a      	ldr	r3, [pc, #296]	; (4284 <recording+0x204>)
    415a:	4798      	blx	r3
				currentBlock += initBlocksRemaining;
    415c:	4b42      	ldr	r3, [pc, #264]	; (4268 <recording+0x1e8>)
    415e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
    4162:	4b44      	ldr	r3, [pc, #272]	; (4274 <recording+0x1f4>)
    4164:	6859      	ldr	r1, [r3, #4]
    4166:	440a      	add	r2, r1
    4168:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    416a:	6859      	ldr	r1, [r3, #4]
    416c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    4170:	2000      	movs	r0, #0
    4172:	4b45      	ldr	r3, [pc, #276]	; (4288 <recording+0x208>)
    4174:	4798      	blx	r3
    4176:	b120      	cbz	r0, 4182 <recording+0x102>
					deviceState |= DEVICE_STATE_SDCARD_INIT_WRITE_ERROR;
    4178:	4a3e      	ldr	r2, [pc, #248]	; (4274 <recording+0x1f4>)
    417a:	6813      	ldr	r3, [r2, #0]
    417c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    4180:	6013      	str	r3, [r2, #0]
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    4182:	4b3e      	ldr	r3, [pc, #248]	; (427c <recording+0x1fc>)
    4184:	681a      	ldr	r2, [r3, #0]
    4186:	4b38      	ldr	r3, [pc, #224]	; (4268 <recording+0x1e8>)
    4188:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    418c:	4939      	ldr	r1, [pc, #228]	; (4274 <recording+0x1f4>)
    418e:	6889      	ldr	r1, [r1, #8]
    4190:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
    4194:	1ac9      	subs	r1, r1, r3
    4196:	b289      	uxth	r1, r1
    4198:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    419c:	4b38      	ldr	r3, [pc, #224]	; (4280 <recording+0x200>)
    419e:	4798      	blx	r3
    41a0:	b120      	cbz	r0, 41ac <recording+0x12c>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    41a2:	4a34      	ldr	r2, [pc, #208]	; (4274 <recording+0x1f4>)
    41a4:	6813      	ldr	r3, [r2, #0]
    41a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    41aa:	6013      	str	r3, [r2, #0]
				sd_mmc_wait_end_of_write_blocks(false);
    41ac:	2000      	movs	r0, #0
    41ae:	4b35      	ldr	r3, [pc, #212]	; (4284 <recording+0x204>)
    41b0:	4798      	blx	r3
				currentBlock += numBlocks - initBlocksRemaining;
    41b2:	4a30      	ldr	r2, [pc, #192]	; (4274 <recording+0x1f4>)
    41b4:	6893      	ldr	r3, [r2, #8]
    41b6:	492c      	ldr	r1, [pc, #176]	; (4268 <recording+0x1e8>)
    41b8:	f8d1 0410 	ldr.w	r0, [r1, #1040]	; 0x410
    41bc:	1a1b      	subs	r3, r3, r0
    41be:	6850      	ldr	r0, [r2, #4]
    41c0:	4403      	add	r3, r0
    41c2:	6053      	str	r3, [r2, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    41c4:	f8d1 3410 	ldr.w	r3, [r1, #1040]	; 0x410
    41c8:	6892      	ldr	r2, [r2, #8]
    41ca:	1a9b      	subs	r3, r3, r2
    41cc:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    41d0:	f8c1 3410 	str.w	r3, [r1, #1040]	; 0x410
			writeBufferCount++;
    41d4:	4a22      	ldr	r2, [pc, #136]	; (4260 <recording+0x1e0>)
    41d6:	6813      	ldr	r3, [r2, #0]
    41d8:	3301      	adds	r3, #1
    41da:	6013      	str	r3, [r2, #0]
    41dc:	e772      	b.n	40c4 <recording+0x44>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    41de:	4b25      	ldr	r3, [pc, #148]	; (4274 <recording+0x1f4>)
    41e0:	6899      	ldr	r1, [r3, #8]
    41e2:	b289      	uxth	r1, r1
    41e4:	4b26      	ldr	r3, [pc, #152]	; (4280 <recording+0x200>)
    41e6:	4798      	blx	r3
    41e8:	b120      	cbz	r0, 41f4 <recording+0x174>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    41ea:	4a22      	ldr	r2, [pc, #136]	; (4274 <recording+0x1f4>)
    41ec:	6813      	ldr	r3, [r2, #0]
    41ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    41f2:	6013      	str	r3, [r2, #0]
				sd_mmc_wait_end_of_write_blocks(false);
    41f4:	2000      	movs	r0, #0
    41f6:	4b23      	ldr	r3, [pc, #140]	; (4284 <recording+0x204>)
    41f8:	4798      	blx	r3
				initBlocksRemaining -= numBlocks;
    41fa:	4b1e      	ldr	r3, [pc, #120]	; (4274 <recording+0x1f4>)
    41fc:	6898      	ldr	r0, [r3, #8]
    41fe:	491a      	ldr	r1, [pc, #104]	; (4268 <recording+0x1e8>)
    4200:	f8d1 2410 	ldr.w	r2, [r1, #1040]	; 0x410
    4204:	1a12      	subs	r2, r2, r0
    4206:	f8c1 2410 	str.w	r2, [r1, #1040]	; 0x410
				currentBlock += numBlocks;
    420a:	689a      	ldr	r2, [r3, #8]
    420c:	6859      	ldr	r1, [r3, #4]
    420e:	440a      	add	r2, r1
    4210:	605a      	str	r2, [r3, #4]
    4212:	e7df      	b.n	41d4 <recording+0x154>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    4214:	4b17      	ldr	r3, [pc, #92]	; (4274 <recording+0x1f4>)
    4216:	6899      	ldr	r1, [r3, #8]
    4218:	b289      	uxth	r1, r1
    421a:	4b19      	ldr	r3, [pc, #100]	; (4280 <recording+0x200>)
    421c:	4798      	blx	r3
    421e:	b120      	cbz	r0, 422a <recording+0x1aa>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    4220:	4a14      	ldr	r2, [pc, #80]	; (4274 <recording+0x1f4>)
    4222:	6813      	ldr	r3, [r2, #0]
    4224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4228:	6013      	str	r3, [r2, #0]
				sd_mmc_wait_end_of_write_blocks(false);
    422a:	2000      	movs	r0, #0
    422c:	4b15      	ldr	r3, [pc, #84]	; (4284 <recording+0x204>)
    422e:	4798      	blx	r3
				currentBlock += numBlocks;
    4230:	4b10      	ldr	r3, [pc, #64]	; (4274 <recording+0x1f4>)
    4232:	689a      	ldr	r2, [r3, #8]
    4234:	6859      	ldr	r1, [r3, #4]
    4236:	440a      	add	r2, r1
    4238:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    423a:	6859      	ldr	r1, [r3, #4]
    423c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    4240:	2000      	movs	r0, #0
    4242:	4b11      	ldr	r3, [pc, #68]	; (4288 <recording+0x208>)
    4244:	4798      	blx	r3
    4246:	b120      	cbz	r0, 4252 <recording+0x1d2>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    4248:	4a0a      	ldr	r2, [pc, #40]	; (4274 <recording+0x1f4>)
    424a:	6813      	ldr	r3, [r2, #0]
    424c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4250:	6013      	str	r3, [r2, #0]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK);
    4252:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    4256:	4b04      	ldr	r3, [pc, #16]	; (4268 <recording+0x1e8>)
    4258:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    425c:	e7ba      	b.n	41d4 <recording+0x154>
    425e:	bf00      	nop
    4260:	20000bdc 	.word	0x20000bdc
    4264:	20000b8c 	.word	0x20000b8c
    4268:	20000224 	.word	0x20000224
    426c:	00003c31 	.word	0x00003c31
    4270:	20000bd4 	.word	0x20000bd4
    4274:	20000028 	.word	0x20000028
    4278:	20000be4 	.word	0x20000be4
    427c:	20000bd0 	.word	0x20000bd0
    4280:	00005109 	.word	0x00005109
    4284:	00005155 	.word	0x00005155
    4288:	00005069 	.word	0x00005069

0000428c <main>:
// Make sure lipo charge callback works: TODO
// Consider putting ADC value and deviceState in frame header: TODO

// ================================================================
int main(void)
{
    428c:	b570      	push	{r4, r5, r6, lr}
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    428e:	4b4e      	ldr	r3, [pc, #312]	; (43c8 <main+0x13c>)
    4290:	4798      	blx	r3
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4292:	2202      	movs	r2, #2
    4294:	4b4d      	ldr	r3, [pc, #308]	; (43cc <main+0x140>)
    4296:	731a      	strb	r2, [r3, #12]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    429c:	4b4c      	ldr	r3, [pc, #304]	; (43d0 <main+0x144>)
    429e:	619a      	str	r2, [r3, #24]
	// We need to change the PWM mode from MPWM to NPWM because we are using WO[0] as waveform output
	hri_tc_write_WAVE_reg(TC0, TC_WAVE_WAVEGEN_NPWM_Val);	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    42a0:	2100      	movs	r1, #0
    42a2:	484c      	ldr	r0, [pc, #304]	; (43d4 <main+0x148>)
    42a4:	4b4c      	ldr	r3, [pc, #304]	; (43d8 <main+0x14c>)
    42a6:	4798      	blx	r3
	
	
	setStatusLED(1);	
    42a8:	2001      	movs	r0, #1
    42aa:	4b4c      	ldr	r3, [pc, #304]	; (43dc <main+0x150>)
    42ac:	4798      	blx	r3
	
	
	
	I2C_BB_init();
    42ae:	4b4c      	ldr	r3, [pc, #304]	; (43e0 <main+0x154>)
    42b0:	4798      	blx	r3
	
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    42b2:	4c4c      	ldr	r4, [pc, #304]	; (43e4 <main+0x158>)
    42b4:	2301      	movs	r3, #1
    42b6:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.cb       = millisecondTimer_cb;
    42ba:	4a4b      	ldr	r2, [pc, #300]	; (43e8 <main+0x15c>)
    42bc:	f8c4 2420 	str.w	r2, [r4, #1056]	; 0x420
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    42c0:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    42c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42c8:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    42cc:	4a47      	ldr	r2, [pc, #284]	; (43ec <main+0x160>)
    42ce:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    42d2:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    42d6:	4d46      	ldr	r5, [pc, #280]	; (43f0 <main+0x164>)
    42d8:	f204 4114 	addw	r1, r4, #1044	; 0x414
    42dc:	4628      	mov	r0, r5
    42de:	4e45      	ldr	r6, [pc, #276]	; (43f4 <main+0x168>)
    42e0:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    42e2:	f504 6185 	add.w	r1, r4, #1064	; 0x428
    42e6:	4628      	mov	r0, r5
    42e8:	47b0      	blx	r6
	timer_start(&TIMER_0);
    42ea:	4628      	mov	r0, r5
    42ec:	4b42      	ldr	r3, [pc, #264]	; (43f8 <main+0x16c>)
    42ee:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    42f0:	4942      	ldr	r1, [pc, #264]	; (43fc <main+0x170>)
    42f2:	2036      	movs	r0, #54	; 0x36
    42f4:	4c42      	ldr	r4, [pc, #264]	; (4400 <main+0x174>)
    42f6:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    42f8:	4942      	ldr	r1, [pc, #264]	; (4404 <main+0x178>)
    42fa:	2037      	movs	r0, #55	; 0x37
    42fc:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    42fe:	4942      	ldr	r1, [pc, #264]	; (4408 <main+0x17c>)
    4300:	202e      	movs	r0, #46	; 0x2e
    4302:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    4304:	4941      	ldr	r1, [pc, #260]	; (440c <main+0x180>)
    4306:	2019      	movs	r0, #25
    4308:	47a0      	blx	r4
	
	
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
    430a:	4b41      	ldr	r3, [pc, #260]	; (4410 <main+0x184>)
    430c:	4798      	blx	r3
	
	
	// Wait for SD Card and then load config from it
	while (SD_MMC_OK != sd_mmc_check(0)) {}
    430e:	2000      	movs	r0, #0
    4310:	4b40      	ldr	r3, [pc, #256]	; (4414 <main+0x188>)
    4312:	4798      	blx	r3
    4314:	2800      	cmp	r0, #0
    4316:	d1fa      	bne.n	430e <main+0x82>
	if (loadSDCardHeader() == MS_SUCCESS)
    4318:	4b3f      	ldr	r3, [pc, #252]	; (4418 <main+0x18c>)
    431a:	4798      	blx	r3
    431c:	2801      	cmp	r0, #1
    431e:	d135      	bne.n	438c <main+0x100>
		deviceState |= DEVICE_STATE_CONFIG_LOADED;
    4320:	4a3e      	ldr	r2, [pc, #248]	; (441c <main+0x190>)
    4322:	6813      	ldr	r3, [r2, #0]
    4324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4328:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    432a:	4c29      	ldr	r4, [pc, #164]	; (43d0 <main+0x144>)
    432c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    4330:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
    4334:	2064      	movs	r0, #100	; 0x64
    4336:	4b3a      	ldr	r3, [pc, #232]	; (4420 <main+0x194>)
    4338:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    433a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    433e:	2064      	movs	r0, #100	; 0x64
    4340:	4b38      	ldr	r3, [pc, #224]	; (4424 <main+0x198>)
    4342:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    4344:	2000      	movs	r0, #0
    4346:	4b38      	ldr	r3, [pc, #224]	; (4428 <main+0x19c>)
    4348:	4798      	blx	r3
    434a:	4b38      	ldr	r3, [pc, #224]	; (442c <main+0x1a0>)
    434c:	8018      	strh	r0, [r3, #0]
	python480Init();
    434e:	4b38      	ldr	r3, [pc, #224]	; (4430 <main+0x1a4>)
    4350:	4798      	blx	r3
	setExcitationLED(getPropFromHeader(HEADER_LED_POS), false);	
	python480SetGain(getPropFromHeader(HEADER_GAIN_POS));
	python480SetFPS(getPropFromHeader(HEADER_FRAME_RATE_POS));
	*/
	
	python480SetGain(1);
    4352:	2001      	movs	r0, #1
    4354:	4b37      	ldr	r3, [pc, #220]	; (4434 <main+0x1a8>)
    4356:	4798      	blx	r3
	python480SetFPS(10);
    4358:	200a      	movs	r0, #10
    435a:	4b37      	ldr	r3, [pc, #220]	; (4438 <main+0x1ac>)
    435c:	4798      	blx	r3
	//sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
	//sd_mmc_wait_end_of_write_blocks(false);
	
	
	// Just a debugging point for turning on excitation LED
	setExcitationLED(2,1);
    435e:	2101      	movs	r1, #1
    4360:	2002      	movs	r0, #2
    4362:	4b36      	ldr	r3, [pc, #216]	; (443c <main+0x1b0>)
    4364:	4798      	blx	r3
	
	//setEWL(0x33);  //test value. Should we map the 0x01 to 0xFF as a 0-100 scale?
	
	// Enables DMA Transfer complete interrupt. Should be put in better place
	DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    4366:	2202      	movs	r2, #2
    4368:	4b35      	ldr	r3, [pc, #212]	; (4440 <main+0x1b4>)
    436a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 *  \retval ERR_NONE A callback is registered successfully
 *  \retval -1 Passed parameters were invalid
 */
static inline int32_t camera_async_register_callback(struct camera_async_descriptor *const descr, camera_async_cb_t cb)
{
	ASSERT(descr);
    436e:	22a2      	movs	r2, #162	; 0xa2
    4370:	4934      	ldr	r1, [pc, #208]	; (4444 <main+0x1b8>)
    4372:	2001      	movs	r0, #1
    4374:	4b34      	ldr	r3, [pc, #208]	; (4448 <main+0x1bc>)
    4376:	4798      	blx	r3

	descr->capture_done = cb;
    4378:	4a34      	ldr	r2, [pc, #208]	; (444c <main+0x1c0>)
    437a:	4b35      	ldr	r3, [pc, #212]	; (4450 <main+0x1c4>)
    437c:	611a      	str	r2, [r3, #16]
	
	// Sets the callback for when each DMA buffer is full
	camera_async_register_callback(&CAMERA_0, pcc_dma_cb);
	
	// This should already be done in init but trying here as well
	PCC->MR.reg = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
    437e:	4a35      	ldr	r2, [pc, #212]	; (4454 <main+0x1c8>)
    4380:	4b35      	ldr	r3, [pc, #212]	; (4458 <main+0x1cc>)
    4382:	601a      	str	r2, [r3, #0]
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
		   
	//PCC->IDR.reg = 2;
	//PCC->IER.reg = 1;
	
	deviceState = DEVICE_STATE_START_RECORDING;
    4384:	2204      	movs	r2, #4
    4386:	4b25      	ldr	r3, [pc, #148]	; (441c <main+0x190>)
    4388:	601a      	str	r2, [r3, #0]
    438a:	e00d      	b.n	43a8 <main+0x11c>
		deviceState |= DEVICE_STATE_ERROR;
    438c:	4a23      	ldr	r2, [pc, #140]	; (441c <main+0x190>)
    438e:	6813      	ldr	r3, [r2, #0]
    4390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4394:	6013      	str	r3, [r2, #0]
    4396:	e7c8      	b.n	432a <main+0x9e>
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING) {
			startRecording();
    4398:	4b30      	ldr	r3, [pc, #192]	; (445c <main+0x1d0>)
    439a:	4798      	blx	r3
    439c:	e009      	b.n	43b2 <main+0x126>
			recording();
			//tempPCC[0] = PCC->MR.reg;
			//tempPCC[1] = PCC->ISR.reg;
			//tempPCC[2] = PCC->RHR.reg;
		}
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    439e:	4b1f      	ldr	r3, [pc, #124]	; (441c <main+0x190>)
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	f013 0f10 	tst.w	r3, #16
    43a6:	d10c      	bne.n	43c2 <main+0x136>
		if (deviceState & DEVICE_STATE_START_RECORDING) {
    43a8:	4b1c      	ldr	r3, [pc, #112]	; (441c <main+0x190>)
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	f013 0f04 	tst.w	r3, #4
    43b0:	d1f2      	bne.n	4398 <main+0x10c>
		if (deviceState & DEVICE_STATE_RECORDING) {
    43b2:	4b1a      	ldr	r3, [pc, #104]	; (441c <main+0x190>)
    43b4:	681b      	ldr	r3, [r3, #0]
    43b6:	f013 0f08 	tst.w	r3, #8
    43ba:	d0f0      	beq.n	439e <main+0x112>
			recording();
    43bc:	4b28      	ldr	r3, [pc, #160]	; (4460 <main+0x1d4>)
    43be:	4798      	blx	r3
    43c0:	e7ed      	b.n	439e <main+0x112>
			stopRecording();
    43c2:	4b28      	ldr	r3, [pc, #160]	; (4464 <main+0x1d8>)
    43c4:	4798      	blx	r3
    43c6:	e7ef      	b.n	43a8 <main+0x11c>
    43c8:	000002d1 	.word	0x000002d1
    43cc:	40003800 	.word	0x40003800
    43d0:	41008000 	.word	0x41008000
    43d4:	200006d0 	.word	0x200006d0
    43d8:	00000c75 	.word	0x00000c75
    43dc:	00003d4d 	.word	0x00003d4d
    43e0:	00003325 	.word	0x00003325
    43e4:	20000224 	.word	0x20000224
    43e8:	00003381 	.word	0x00003381
    43ec:	00003391 	.word	0x00003391
    43f0:	20000740 	.word	0x20000740
    43f4:	000013dd 	.word	0x000013dd
    43f8:	000013a1 	.word	0x000013a1
    43fc:	000033cd 	.word	0x000033cd
    4400:	00000e6d 	.word	0x00000e6d
    4404:	00003429 	.word	0x00003429
    4408:	00003e21 	.word	0x00003e21
    440c:	000033fd 	.word	0x000033fd
    4410:	00003db5 	.word	0x00003db5
    4414:	00004e51 	.word	0x00004e51
    4418:	00003c3d 	.word	0x00003c3d
    441c:	20000028 	.word	0x20000028
    4420:	00000dd5 	.word	0x00000dd5
    4424:	00000db5 	.word	0x00000db5
    4428:	000035c1 	.word	0x000035c1
    442c:	20000b80 	.word	0x20000b80
    4430:	00003c01 	.word	0x00003c01
    4434:	0000354d 	.word	0x0000354d
    4438:	00003589 	.word	0x00003589
    443c:	00003cfd 	.word	0x00003cfd
    4440:	4100a000 	.word	0x4100a000
    4444:	00005860 	.word	0x00005860
    4448:	00001671 	.word	0x00001671
    444c:	00003ccd 	.word	0x00003ccd
    4450:	200006bc 	.word	0x200006bc
    4454:	c0000020 	.word	0xc0000020
    4458:	43002c00 	.word	0x43002c00
    445c:	00003f9d 	.word	0x00003f9d
    4460:	00004081 	.word	0x00004081
    4464:	00004015 	.word	0x00004015

00004468 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    4468:	4b1f      	ldr	r3, [pc, #124]	; (44e8 <sd_decode_csd+0x80>)
    446a:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    446c:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    446e:	f001 0007 	and.w	r0, r1, #7
    4472:	4b1e      	ldr	r3, [pc, #120]	; (44ec <sd_decode_csd+0x84>)
    4474:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    4478:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    447c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4480:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    4482:	fb01 f100 	mul.w	r1, r1, r0
    4486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    448a:	fb03 f301 	mul.w	r3, r3, r1
    448e:	6013      	str	r3, [r2, #0]
    4490:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    4492:	099b      	lsrs	r3, r3, #6
    4494:	d11a      	bne.n	44cc <sd_decode_csd+0x64>
    4496:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4498:	7d53      	ldrb	r3, [r2, #21]
    449a:	009b      	lsls	r3, r3, #2
    449c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    44a0:	7d11      	ldrb	r1, [r2, #20]
    44a2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    44a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    44aa:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    44ac:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    44ae:	7dd1      	ldrb	r1, [r2, #23]
    44b0:	0049      	lsls	r1, r1, #1
    44b2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    44b6:	f001 0107 	and.w	r1, r1, #7
    44ba:	3102      	adds	r1, #2
		uint32_t blocknr
    44bc:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    44be:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    44c0:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    44c4:	408b      	lsls	r3, r1
    44c6:	0a9b      	lsrs	r3, r3, #10
    44c8:	6053      	str	r3, [r2, #4]
    44ca:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    44cc:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    44ce:	7d91      	ldrb	r1, [r2, #22]
    44d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    44d4:	7d51      	ldrb	r1, [r2, #21]
    44d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    44da:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    44de:	3301      	adds	r3, #1
    44e0:	025b      	lsls	r3, r3, #9
    44e2:	6053      	str	r3, [r2, #4]
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop
    44e8:	20000660 	.word	0x20000660
    44ec:	00005884 	.word	0x00005884

000044f0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    44f0:	b510      	push	{r4, lr}
    44f2:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    44f4:	4807      	ldr	r0, [pc, #28]	; (4514 <sd_mmc_configure_slot+0x24>)
    44f6:	6802      	ldr	r2, [r0, #0]
    44f8:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    44fa:	7b53      	ldrb	r3, [r2, #13]
    44fc:	6812      	ldr	r2, [r2, #0]
    44fe:	7901      	ldrb	r1, [r0, #4]
    4500:	6880      	ldr	r0, [r0, #8]
    4502:	3400      	adds	r4, #0
    4504:	bf18      	it	ne
    4506:	2401      	movne	r4, #1
    4508:	9400      	str	r4, [sp, #0]
    450a:	4c03      	ldr	r4, [pc, #12]	; (4518 <sd_mmc_configure_slot+0x28>)
    450c:	47a0      	blx	r4
}
    450e:	b002      	add	sp, #8
    4510:	bd10      	pop	{r4, pc}
    4512:	bf00      	nop
    4514:	20000660 	.word	0x20000660
    4518:	00000f71 	.word	0x00000f71

0000451c <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    451c:	b108      	cbz	r0, 4522 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    451e:	2004      	movs	r0, #4
    4520:	4770      	bx	lr
{
    4522:	b5f0      	push	{r4, r5, r6, r7, lr}
    4524:	b083      	sub	sp, #12
    4526:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    4528:	4b45      	ldr	r3, [pc, #276]	; (4640 <sd_mmc_select_slot+0x124>)
    452a:	68db      	ldr	r3, [r3, #12]
    452c:	2b00      	cmp	r3, #0
    452e:	d050      	beq.n	45d2 <sd_mmc_select_slot+0xb6>
    4530:	0087      	lsls	r7, r0, #2
    4532:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    4536:	f1b5 3fff 	cmp.w	r5, #4294967295
    453a:	d04a      	beq.n	45d2 <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    453c:	b2ed      	uxtb	r5, r5
    453e:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    4540:	a801      	add	r0, sp, #4
    4542:	4b40      	ldr	r3, [pc, #256]	; (4644 <sd_mmc_select_slot+0x128>)
    4544:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4546:	4940      	ldr	r1, [pc, #256]	; (4648 <sd_mmc_select_slot+0x12c>)
    4548:	01f3      	lsls	r3, r6, #7
    454a:	18ca      	adds	r2, r1, r3
    454c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    454e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4550:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4552:	405e      	eors	r6, r3
    4554:	400e      	ands	r6, r1
    4556:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    4558:	a801      	add	r0, sp, #4
    455a:	4b3c      	ldr	r3, [pc, #240]	; (464c <sd_mmc_select_slot+0x130>)
    455c:	4798      	blx	r3
    455e:	f005 051f 	and.w	r5, r5, #31
    4562:	2301      	movs	r3, #1
    4564:	fa03 f505 	lsl.w	r5, r3, r5
    4568:	4235      	tst	r5, r6
    456a:	bf14      	ite	ne
    456c:	461a      	movne	r2, r3
    456e:	2200      	moveq	r2, #0
    4570:	4b33      	ldr	r3, [pc, #204]	; (4640 <sd_mmc_select_slot+0x124>)
    4572:	68db      	ldr	r3, [r3, #12]
    4574:	441f      	add	r7, r3
    4576:	887b      	ldrh	r3, [r7, #2]
    4578:	429a      	cmp	r2, r3
    457a:	d006      	beq.n	458a <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    457c:	4b30      	ldr	r3, [pc, #192]	; (4640 <sd_mmc_select_slot+0x124>)
    457e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    4582:	2304      	movs	r3, #4
    4584:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    4586:	2002      	movs	r0, #2
    4588:	e047      	b.n	461a <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    458a:	4b2d      	ldr	r3, [pc, #180]	; (4640 <sd_mmc_select_slot+0x124>)
    458c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4590:	7e9b      	ldrb	r3, [r3, #26]
    4592:	2b04      	cmp	r3, #4
    4594:	d009      	beq.n	45aa <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    4596:	2b01      	cmp	r3, #1
    4598:	d00e      	beq.n	45b8 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    459a:	4b29      	ldr	r3, [pc, #164]	; (4640 <sd_mmc_select_slot+0x124>)
    459c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    45a0:	7e9b      	ldrb	r3, [r3, #26]
    45a2:	2b03      	cmp	r3, #3
    45a4:	d11d      	bne.n	45e2 <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    45a6:	2003      	movs	r0, #3
    45a8:	e037      	b.n	461a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    45aa:	4b25      	ldr	r3, [pc, #148]	; (4640 <sd_mmc_select_slot+0x124>)
    45ac:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    45b0:	2301      	movs	r3, #1
    45b2:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    45b4:	2002      	movs	r0, #2
    45b6:	e030      	b.n	461a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    45b8:	4b21      	ldr	r3, [pc, #132]	; (4640 <sd_mmc_select_slot+0x124>)
    45ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    45be:	2202      	movs	r2, #2
    45c0:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    45c2:	4a23      	ldr	r2, [pc, #140]	; (4650 <sd_mmc_select_slot+0x134>)
    45c4:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    45c6:	2201      	movs	r2, #1
    45c8:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    45ca:	2200      	movs	r2, #0
    45cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    45d0:	e7e3      	b.n	459a <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    45d2:	4b1b      	ldr	r3, [pc, #108]	; (4640 <sd_mmc_select_slot+0x124>)
    45d4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    45d8:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    45da:	3b03      	subs	r3, #3
    45dc:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    45de:	2b01      	cmp	r3, #1
    45e0:	d91d      	bls.n	461e <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    45e2:	4b17      	ldr	r3, [pc, #92]	; (4640 <sd_mmc_select_slot+0x124>)
    45e4:	791b      	ldrb	r3, [r3, #4]
    45e6:	429c      	cmp	r4, r3
    45e8:	d026      	beq.n	4638 <sd_mmc_select_slot+0x11c>
    45ea:	4b15      	ldr	r3, [pc, #84]	; (4640 <sd_mmc_select_slot+0x124>)
    45ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    45ee:	bb2b      	cbnz	r3, 463c <sd_mmc_select_slot+0x120>
    45f0:	2001      	movs	r0, #1
    45f2:	f240 422c 	movw	r2, #1068	; 0x42c
    45f6:	4917      	ldr	r1, [pc, #92]	; (4654 <sd_mmc_select_slot+0x138>)
    45f8:	4b17      	ldr	r3, [pc, #92]	; (4658 <sd_mmc_select_slot+0x13c>)
    45fa:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    45fc:	4d10      	ldr	r5, [pc, #64]	; (4640 <sd_mmc_select_slot+0x124>)
    45fe:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    4600:	f105 0310 	add.w	r3, r5, #16
    4604:	0164      	lsls	r4, r4, #5
    4606:	4423      	add	r3, r4
    4608:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    460a:	4b14      	ldr	r3, [pc, #80]	; (465c <sd_mmc_select_slot+0x140>)
    460c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    460e:	442c      	add	r4, r5
    4610:	7ea0      	ldrb	r0, [r4, #26]
    4612:	2802      	cmp	r0, #2
    4614:	bf14      	ite	ne
    4616:	2000      	movne	r0, #0
    4618:	2001      	moveq	r0, #1
}
    461a:	b003      	add	sp, #12
    461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    461e:	4b08      	ldr	r3, [pc, #32]	; (4640 <sd_mmc_select_slot+0x124>)
    4620:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4624:	2202      	movs	r2, #2
    4626:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4628:	4a09      	ldr	r2, [pc, #36]	; (4650 <sd_mmc_select_slot+0x134>)
    462a:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    462c:	2201      	movs	r2, #1
    462e:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4630:	2200      	movs	r2, #0
    4632:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4636:	e7d4      	b.n	45e2 <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    4638:	2001      	movs	r0, #1
    463a:	e7da      	b.n	45f2 <sd_mmc_select_slot+0xd6>
    463c:	2000      	movs	r0, #0
    463e:	e7d8      	b.n	45f2 <sd_mmc_select_slot+0xd6>
    4640:	20000660 	.word	0x20000660
    4644:	00000d41 	.word	0x00000d41
    4648:	41008000 	.word	0x41008000
    464c:	00000d4f 	.word	0x00000d4f
    4650:	00061a80 	.word	0x00061a80
    4654:	00005920 	.word	0x00005920
    4658:	00001671 	.word	0x00001671
    465c:	000044f1 	.word	0x000044f1

00004660 <sd_acmd6>:
{
    4660:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4662:	4b0e      	ldr	r3, [pc, #56]	; (469c <sd_acmd6+0x3c>)
    4664:	681a      	ldr	r2, [r3, #0]
    4666:	8912      	ldrh	r2, [r2, #8]
    4668:	0412      	lsls	r2, r2, #16
    466a:	f241 1137 	movw	r1, #4407	; 0x1137
    466e:	6898      	ldr	r0, [r3, #8]
    4670:	4b0b      	ldr	r3, [pc, #44]	; (46a0 <sd_acmd6+0x40>)
    4672:	4798      	blx	r3
    4674:	4603      	mov	r3, r0
    4676:	b908      	cbnz	r0, 467c <sd_acmd6+0x1c>
}
    4678:	4618      	mov	r0, r3
    467a:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    467c:	2202      	movs	r2, #2
    467e:	f241 1106 	movw	r1, #4358	; 0x1106
    4682:	4b06      	ldr	r3, [pc, #24]	; (469c <sd_acmd6+0x3c>)
    4684:	6898      	ldr	r0, [r3, #8]
    4686:	4b06      	ldr	r3, [pc, #24]	; (46a0 <sd_acmd6+0x40>)
    4688:	4798      	blx	r3
    468a:	4603      	mov	r3, r0
    468c:	2800      	cmp	r0, #0
    468e:	d0f3      	beq.n	4678 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    4690:	4a02      	ldr	r2, [pc, #8]	; (469c <sd_acmd6+0x3c>)
    4692:	6812      	ldr	r2, [r2, #0]
    4694:	2104      	movs	r1, #4
    4696:	7351      	strb	r1, [r2, #13]
	return true;
    4698:	e7ee      	b.n	4678 <sd_acmd6+0x18>
    469a:	bf00      	nop
    469c:	20000660 	.word	0x20000660
    46a0:	00001055 	.word	0x00001055

000046a4 <sdio_cmd52>:
{
    46a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46a8:	4680      	mov	r8, r0
    46aa:	460f      	mov	r7, r1
    46ac:	4615      	mov	r5, r2
    46ae:	461e      	mov	r6, r3
    46b0:	9c06      	ldr	r4, [sp, #24]
	ASSERT(io_data != NULL);
    46b2:	f240 3276 	movw	r2, #886	; 0x376
    46b6:	4910      	ldr	r1, [pc, #64]	; (46f8 <sdio_cmd52+0x54>)
    46b8:	1c20      	adds	r0, r4, #0
    46ba:	bf18      	it	ne
    46bc:	2001      	movne	r0, #1
    46be:	4b0f      	ldr	r3, [pc, #60]	; (46fc <sdio_cmd52+0x58>)
    46c0:	4798      	blx	r3
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    46c2:	7822      	ldrb	r2, [r4, #0]
    46c4:	ea42 72c8 	orr.w	r2, r2, r8, lsl #31
	                         | ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
    46c8:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
	                         | ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
    46cc:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
	if (!driver_send_cmd(sd_mmc_hal,
    46d0:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
    46d4:	f241 3134 	movw	r1, #4916	; 0x1334
    46d8:	4b09      	ldr	r3, [pc, #36]	; (4700 <sdio_cmd52+0x5c>)
    46da:	6898      	ldr	r0, [r3, #8]
    46dc:	4b09      	ldr	r3, [pc, #36]	; (4704 <sdio_cmd52+0x60>)
    46de:	4798      	blx	r3
    46e0:	4605      	mov	r5, r0
    46e2:	b910      	cbnz	r0, 46ea <sdio_cmd52+0x46>
}
    46e4:	4628      	mov	r0, r5
    46e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    46ea:	4b05      	ldr	r3, [pc, #20]	; (4700 <sdio_cmd52+0x5c>)
    46ec:	6898      	ldr	r0, [r3, #8]
    46ee:	4b06      	ldr	r3, [pc, #24]	; (4708 <sdio_cmd52+0x64>)
    46f0:	4798      	blx	r3
    46f2:	7020      	strb	r0, [r4, #0]
	return true;
    46f4:	e7f6      	b.n	46e4 <sdio_cmd52+0x40>
    46f6:	bf00      	nop
    46f8:	00005920 	.word	0x00005920
    46fc:	00001671 	.word	0x00001671
    4700:	20000660 	.word	0x20000660
    4704:	00001055 	.word	0x00001055
    4708:	00001085 	.word	0x00001085

0000470c <sdio_get_max_speed>:
{
    470c:	b5f0      	push	{r4, r5, r6, r7, lr}
    470e:	b087      	sub	sp, #28
	for (i = 0; i < 4; i++) {
    4710:	2400      	movs	r4, #0
	addr_old = SDIO_CCCR_CIS_PTR;
    4712:	2509      	movs	r5, #9
	for (i = 0; i < 4; i++) {
    4714:	e00b      	b.n	472e <sdio_get_max_speed+0x22>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    4716:	ab03      	add	r3, sp, #12
    4718:	4423      	add	r3, r4
    471a:	9300      	str	r3, [sp, #0]
    471c:	2300      	movs	r3, #0
    471e:	462a      	mov	r2, r5
    4720:	4619      	mov	r1, r3
    4722:	4618      	mov	r0, r3
    4724:	4e35      	ldr	r6, [pc, #212]	; (47fc <sdio_get_max_speed+0xf0>)
    4726:	47b0      	blx	r6
		addr_old++;
    4728:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    472a:	3401      	adds	r4, #1
    472c:	b2e4      	uxtb	r4, r4
    472e:	2c03      	cmp	r4, #3
    4730:	d9f1      	bls.n	4716 <sdio_get_max_speed+0xa>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    4732:	f89d 700c 	ldrb.w	r7, [sp, #12]
    4736:	f89d 300d 	ldrb.w	r3, [sp, #13]
    473a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    473e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4742:	eb07 4703 	add.w	r7, r7, r3, lsl #16
    4746:	f89d 300f 	ldrb.w	r3, [sp, #15]
    474a:	eb07 6703 	add.w	r7, r7, r3, lsl #24
	addr_new = addr_old;
    474e:	463d      	mov	r5, r7
    4750:	e01d      	b.n	478e <sdio_get_max_speed+0x82>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    4752:	ab04      	add	r3, sp, #16
    4754:	4423      	add	r3, r4
    4756:	9300      	str	r3, [sp, #0]
    4758:	2300      	movs	r3, #0
    475a:	462a      	mov	r2, r5
    475c:	4619      	mov	r1, r3
    475e:	4618      	mov	r0, r3
    4760:	4e26      	ldr	r6, [pc, #152]	; (47fc <sdio_get_max_speed+0xf0>)
    4762:	47b0      	blx	r6
			addr_new++;
    4764:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    4766:	3401      	adds	r4, #1
    4768:	b2e4      	uxtb	r4, r4
    476a:	2c02      	cmp	r4, #2
    476c:	d9f1      	bls.n	4752 <sdio_get_max_speed+0x46>
		if (buf[0] == SDIO_CISTPL_END) {
    476e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4772:	2bff      	cmp	r3, #255	; 0xff
    4774:	d03b      	beq.n	47ee <sdio_get_max_speed+0xe2>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    4776:	2b22      	cmp	r3, #34	; 0x22
    4778:	d00b      	beq.n	4792 <sdio_get_max_speed+0x86>
		if (buf[1] == 0) {
    477a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    477e:	2b00      	cmp	r3, #0
    4780:	d038      	beq.n	47f4 <sdio_get_max_speed+0xe8>
		addr_new += buf[1] - 1;
    4782:	441d      	add	r5, r3
    4784:	3d01      	subs	r5, #1
		if (addr_new > (addr_old + 256)) {
    4786:	f507 7380 	add.w	r3, r7, #256	; 0x100
    478a:	429d      	cmp	r5, r3
    478c:	d834      	bhi.n	47f8 <sdio_get_max_speed+0xec>
		for (i = 0; i < 3; i++) {
    478e:	2400      	movs	r4, #0
    4790:	e7eb      	b.n	476a <sdio_get_max_speed+0x5e>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    4792:	f89d 4012 	ldrb.w	r4, [sp, #18]
    4796:	2c00      	cmp	r4, #0
    4798:	d1ef      	bne.n	477a <sdio_get_max_speed+0x6e>
	addr_new -= 3;
    479a:	3d03      	subs	r5, #3
	for (i = 0; i < 6; i++) {
    479c:	2c05      	cmp	r4, #5
    479e:	d80c      	bhi.n	47ba <sdio_get_max_speed+0xae>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    47a0:	ab04      	add	r3, sp, #16
    47a2:	4423      	add	r3, r4
    47a4:	9300      	str	r3, [sp, #0]
    47a6:	2300      	movs	r3, #0
    47a8:	462a      	mov	r2, r5
    47aa:	4619      	mov	r1, r3
    47ac:	4618      	mov	r0, r3
    47ae:	4e13      	ldr	r6, [pc, #76]	; (47fc <sdio_get_max_speed+0xf0>)
    47b0:	47b0      	blx	r6
		addr_new++;
    47b2:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    47b4:	3401      	adds	r4, #1
    47b6:	b2e4      	uxtb	r4, r4
    47b8:	e7f0      	b.n	479c <sdio_get_max_speed+0x90>
	tplfe_max_tran_speed = buf[5];
    47ba:	f89d 3015 	ldrb.w	r3, [sp, #21]
	if (tplfe_max_tran_speed > 0x32) {
    47be:	2b32      	cmp	r3, #50	; 0x32
    47c0:	d900      	bls.n	47c4 <sdio_get_max_speed+0xb8>
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
    47c2:	2332      	movs	r3, #50	; 0x32
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    47c4:	f003 0107 	and.w	r1, r3, #7
    47c8:	4a0d      	ldr	r2, [pc, #52]	; (4800 <sdio_get_max_speed+0xf4>)
    47ca:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    47ce:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    47d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47d6:	69db      	ldr	r3, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    47d8:	4a0a      	ldr	r2, [pc, #40]	; (4804 <sdio_get_max_speed+0xf8>)
    47da:	6811      	ldr	r1, [r2, #0]
    47dc:	fb03 f200 	mul.w	r2, r3, r0
    47e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    47e4:	fb03 f302 	mul.w	r3, r3, r2
    47e8:	600b      	str	r3, [r1, #0]
	return true;
    47ea:	2001      	movs	r0, #1
    47ec:	e000      	b.n	47f0 <sdio_get_max_speed+0xe4>
			return false; /* Tuple error */
    47ee:	2000      	movs	r0, #0
}
    47f0:	b007      	add	sp, #28
    47f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false; /* Tuple error */
    47f4:	2000      	movs	r0, #0
    47f6:	e7fb      	b.n	47f0 <sdio_get_max_speed+0xe4>
			return false; /* Outoff CIS area */
    47f8:	2000      	movs	r0, #0
    47fa:	e7f9      	b.n	47f0 <sdio_get_max_speed+0xe4>
    47fc:	000046a5 	.word	0x000046a5
    4800:	00005884 	.word	0x00005884
    4804:	20000660 	.word	0x20000660

00004808 <sdio_cmd52_set_bus_width>:
{
    4808:	b510      	push	{r4, lr}
    480a:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    480c:	f10d 030f 	add.w	r3, sp, #15
    4810:	9300      	str	r3, [sp, #0]
    4812:	2300      	movs	r3, #0
    4814:	2208      	movs	r2, #8
    4816:	4619      	mov	r1, r3
    4818:	4618      	mov	r0, r3
    481a:	4c0e      	ldr	r4, [pc, #56]	; (4854 <sdio_cmd52_set_bus_width+0x4c>)
    481c:	47a0      	blx	r4
    481e:	4603      	mov	r3, r0
    4820:	b118      	cbz	r0, 482a <sdio_cmd52_set_bus_width+0x22>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    4822:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    4826:	2a00      	cmp	r2, #0
    4828:	db02      	blt.n	4830 <sdio_cmd52_set_bus_width+0x28>
}
    482a:	4618      	mov	r0, r3
    482c:	b004      	add	sp, #16
    482e:	bd10      	pop	{r4, pc}
	u8_value = SDIO_BUSWIDTH_4B;
    4830:	ab04      	add	r3, sp, #16
    4832:	2202      	movs	r2, #2
    4834:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    4838:	9300      	str	r3, [sp, #0]
    483a:	2301      	movs	r3, #1
    483c:	2207      	movs	r2, #7
    483e:	2100      	movs	r1, #0
    4840:	4618      	mov	r0, r3
    4842:	47a0      	blx	r4
    4844:	4603      	mov	r3, r0
    4846:	2800      	cmp	r0, #0
    4848:	d0ef      	beq.n	482a <sdio_cmd52_set_bus_width+0x22>
	sd_mmc_card->bus_width = 4;
    484a:	4a03      	ldr	r2, [pc, #12]	; (4858 <sdio_cmd52_set_bus_width+0x50>)
    484c:	6812      	ldr	r2, [r2, #0]
    484e:	2104      	movs	r1, #4
    4850:	7351      	strb	r1, [r2, #13]
	return true;
    4852:	e7ea      	b.n	482a <sdio_cmd52_set_bus_width+0x22>
    4854:	000046a5 	.word	0x000046a5
    4858:	20000660 	.word	0x20000660

0000485c <sdio_cmd52_set_high_speed>:
{
    485c:	b510      	push	{r4, lr}
    485e:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    4860:	f10d 030f 	add.w	r3, sp, #15
    4864:	9300      	str	r3, [sp, #0]
    4866:	2300      	movs	r3, #0
    4868:	2213      	movs	r2, #19
    486a:	4619      	mov	r1, r3
    486c:	4618      	mov	r0, r3
    486e:	4c0f      	ldr	r4, [pc, #60]	; (48ac <sdio_cmd52_set_high_speed+0x50>)
    4870:	47a0      	blx	r4
    4872:	4601      	mov	r1, r0
    4874:	b1b8      	cbz	r0, 48a6 <sdio_cmd52_set_high_speed+0x4a>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    4876:	f89d 300f 	ldrb.w	r3, [sp, #15]
    487a:	f013 0f01 	tst.w	r3, #1
    487e:	d012      	beq.n	48a6 <sdio_cmd52_set_high_speed+0x4a>
	u8_value = SDIO_EHS;
    4880:	ab04      	add	r3, sp, #16
    4882:	2202      	movs	r2, #2
    4884:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    4888:	9300      	str	r3, [sp, #0]
    488a:	2301      	movs	r3, #1
    488c:	2213      	movs	r2, #19
    488e:	2100      	movs	r1, #0
    4890:	4618      	mov	r0, r3
    4892:	47a0      	blx	r4
    4894:	4601      	mov	r1, r0
    4896:	b130      	cbz	r0, 48a6 <sdio_cmd52_set_high_speed+0x4a>
	sd_mmc_card->high_speed = 1;
    4898:	4b05      	ldr	r3, [pc, #20]	; (48b0 <sdio_cmd52_set_high_speed+0x54>)
    489a:	681b      	ldr	r3, [r3, #0]
    489c:	2201      	movs	r2, #1
    489e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    48a0:	681a      	ldr	r2, [r3, #0]
    48a2:	0052      	lsls	r2, r2, #1
    48a4:	601a      	str	r2, [r3, #0]
}
    48a6:	4608      	mov	r0, r1
    48a8:	b004      	add	sp, #16
    48aa:	bd10      	pop	{r4, pc}
    48ac:	000046a5 	.word	0x000046a5
    48b0:	20000660 	.word	0x20000660

000048b4 <sd_cmd8>:
{
    48b4:	b538      	push	{r3, r4, r5, lr}
    48b6:	4605      	mov	r5, r0
	*v2 = 0;
    48b8:	2300      	movs	r3, #0
    48ba:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    48bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    48c0:	f245 5108 	movw	r1, #21768	; 0x5508
    48c4:	4b0c      	ldr	r3, [pc, #48]	; (48f8 <sd_cmd8+0x44>)
    48c6:	6898      	ldr	r0, [r3, #8]
    48c8:	4b0c      	ldr	r3, [pc, #48]	; (48fc <sd_cmd8+0x48>)
    48ca:	4798      	blx	r3
    48cc:	b910      	cbnz	r0, 48d4 <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    48ce:	2401      	movs	r4, #1
}
    48d0:	4620      	mov	r0, r4
    48d2:	bd38      	pop	{r3, r4, r5, pc}
    48d4:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    48d6:	4b08      	ldr	r3, [pc, #32]	; (48f8 <sd_cmd8+0x44>)
    48d8:	6898      	ldr	r0, [r3, #8]
    48da:	4b09      	ldr	r3, [pc, #36]	; (4900 <sd_cmd8+0x4c>)
    48dc:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    48de:	f1b0 3fff 	cmp.w	r0, #4294967295
    48e2:	d0f5      	beq.n	48d0 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    48e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
    48e8:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    48ec:	d001      	beq.n	48f2 <sd_cmd8+0x3e>
		return false;
    48ee:	2400      	movs	r4, #0
    48f0:	e7ee      	b.n	48d0 <sd_cmd8+0x1c>
	*v2 = 1;
    48f2:	2301      	movs	r3, #1
    48f4:	702b      	strb	r3, [r5, #0]
	return true;
    48f6:	e7eb      	b.n	48d0 <sd_cmd8+0x1c>
    48f8:	20000660 	.word	0x20000660
    48fc:	00001055 	.word	0x00001055
    4900:	00001085 	.word	0x00001085

00004904 <sdio_op_cond>:
{
    4904:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    4906:	2200      	movs	r2, #0
    4908:	f244 5105 	movw	r1, #17669	; 0x4505
    490c:	4b1a      	ldr	r3, [pc, #104]	; (4978 <sdio_op_cond+0x74>)
    490e:	6898      	ldr	r0, [r3, #8]
    4910:	4b1a      	ldr	r3, [pc, #104]	; (497c <sdio_op_cond+0x78>)
    4912:	4798      	blx	r3
    4914:	b910      	cbnz	r0, 491c <sdio_op_cond+0x18>
		return true; /* No error but card type not updated */
    4916:	2501      	movs	r5, #1
}
    4918:	4628      	mov	r0, r5
    491a:	bd38      	pop	{r3, r4, r5, pc}
    491c:	4605      	mov	r5, r0
	resp = driver_get_response(sd_mmc_hal);
    491e:	4b16      	ldr	r3, [pc, #88]	; (4978 <sdio_op_cond+0x74>)
    4920:	6898      	ldr	r0, [r3, #8]
    4922:	4b17      	ldr	r3, [pc, #92]	; (4980 <sdio_op_cond+0x7c>)
    4924:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    4926:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    492a:	d0f5      	beq.n	4918 <sdio_op_cond+0x14>
    492c:	f241 3488 	movw	r4, #5000	; 0x1388
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    4930:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    4934:	f244 5105 	movw	r1, #17669	; 0x4505
    4938:	4b0f      	ldr	r3, [pc, #60]	; (4978 <sdio_op_cond+0x74>)
    493a:	6898      	ldr	r0, [r3, #8]
    493c:	4b0f      	ldr	r3, [pc, #60]	; (497c <sdio_op_cond+0x78>)
    493e:	4798      	blx	r3
    4940:	4605      	mov	r5, r0
    4942:	2800      	cmp	r0, #0
    4944:	d0e8      	beq.n	4918 <sdio_op_cond+0x14>
		resp = driver_get_response(sd_mmc_hal);
    4946:	4b0c      	ldr	r3, [pc, #48]	; (4978 <sdio_op_cond+0x74>)
    4948:	6898      	ldr	r0, [r3, #8]
    494a:	4b0d      	ldr	r3, [pc, #52]	; (4980 <sdio_op_cond+0x7c>)
    494c:	4798      	blx	r3
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    494e:	2800      	cmp	r0, #0
    4950:	db03      	blt.n	495a <sdio_op_cond+0x56>
		if (cmd5_retry-- == 0) {
    4952:	1e63      	subs	r3, r4, #1
    4954:	b174      	cbz	r4, 4974 <sdio_op_cond+0x70>
    4956:	461c      	mov	r4, r3
    4958:	e7ea      	b.n	4930 <sdio_op_cond+0x2c>
	if ((resp & OCR_SDIO_MP) > 0) {
    495a:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    495e:	d104      	bne.n	496a <sdio_op_cond+0x66>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    4960:	4b05      	ldr	r3, [pc, #20]	; (4978 <sdio_op_cond+0x74>)
    4962:	681b      	ldr	r3, [r3, #0]
    4964:	2204      	movs	r2, #4
    4966:	72da      	strb	r2, [r3, #11]
    4968:	e7d6      	b.n	4918 <sdio_op_cond+0x14>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    496a:	4b03      	ldr	r3, [pc, #12]	; (4978 <sdio_op_cond+0x74>)
    496c:	681b      	ldr	r3, [r3, #0]
    496e:	2205      	movs	r2, #5
    4970:	72da      	strb	r2, [r3, #11]
    4972:	e7d1      	b.n	4918 <sdio_op_cond+0x14>
			return false;
    4974:	2500      	movs	r5, #0
    4976:	e7cf      	b.n	4918 <sdio_op_cond+0x14>
    4978:	20000660 	.word	0x20000660
    497c:	00001055 	.word	0x00001055
    4980:	00001085 	.word	0x00001085

00004984 <sd_mci_op_cond>:
{
    4984:	b570      	push	{r4, r5, r6, lr}
    4986:	4606      	mov	r6, r0
	retry = 2100;
    4988:	f640 0434 	movw	r4, #2100	; 0x834
    498c:	e011      	b.n	49b2 <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    498e:	4a16      	ldr	r2, [pc, #88]	; (49e8 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    4990:	f244 5129 	movw	r1, #17705	; 0x4529
    4994:	4b15      	ldr	r3, [pc, #84]	; (49ec <sd_mci_op_cond+0x68>)
    4996:	6898      	ldr	r0, [r3, #8]
    4998:	4b15      	ldr	r3, [pc, #84]	; (49f0 <sd_mci_op_cond+0x6c>)
    499a:	4798      	blx	r3
    499c:	4605      	mov	r5, r0
    499e:	b1f8      	cbz	r0, 49e0 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    49a0:	4b12      	ldr	r3, [pc, #72]	; (49ec <sd_mci_op_cond+0x68>)
    49a2:	6898      	ldr	r0, [r3, #8]
    49a4:	4b13      	ldr	r3, [pc, #76]	; (49f4 <sd_mci_op_cond+0x70>)
    49a6:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    49a8:	2800      	cmp	r0, #0
    49aa:	db10      	blt.n	49ce <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    49ac:	1e63      	subs	r3, r4, #1
    49ae:	b1cc      	cbz	r4, 49e4 <sd_mci_op_cond+0x60>
    49b0:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    49b2:	2200      	movs	r2, #0
    49b4:	f241 1137 	movw	r1, #4407	; 0x1137
    49b8:	4b0c      	ldr	r3, [pc, #48]	; (49ec <sd_mci_op_cond+0x68>)
    49ba:	6898      	ldr	r0, [r3, #8]
    49bc:	4b0c      	ldr	r3, [pc, #48]	; (49f0 <sd_mci_op_cond+0x6c>)
    49be:	4798      	blx	r3
    49c0:	4605      	mov	r5, r0
    49c2:	b168      	cbz	r0, 49e0 <sd_mci_op_cond+0x5c>
		if (v2) {
    49c4:	2e00      	cmp	r6, #0
    49c6:	d1e2      	bne.n	498e <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    49c8:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    49cc:	e7e0      	b.n	4990 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    49ce:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    49d2:	d005      	beq.n	49e0 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    49d4:	4b05      	ldr	r3, [pc, #20]	; (49ec <sd_mci_op_cond+0x68>)
    49d6:	681a      	ldr	r2, [r3, #0]
    49d8:	7ad3      	ldrb	r3, [r2, #11]
    49da:	f043 0308 	orr.w	r3, r3, #8
    49de:	72d3      	strb	r3, [r2, #11]
}
    49e0:	4628      	mov	r0, r5
    49e2:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    49e4:	2500      	movs	r5, #0
    49e6:	e7fb      	b.n	49e0 <sd_mci_op_cond+0x5c>
    49e8:	401f8000 	.word	0x401f8000
    49ec:	20000660 	.word	0x20000660
    49f0:	00001055 	.word	0x00001055
    49f4:	00001085 	.word	0x00001085

000049f8 <sd_mmc_cmd13>:
{
    49f8:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    49fa:	4c0d      	ldr	r4, [pc, #52]	; (4a30 <sd_mmc_cmd13+0x38>)
    49fc:	e000      	b.n	4a00 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    49fe:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    4a00:	4b0c      	ldr	r3, [pc, #48]	; (4a34 <sd_mmc_cmd13+0x3c>)
    4a02:	681a      	ldr	r2, [r3, #0]
    4a04:	8912      	ldrh	r2, [r2, #8]
    4a06:	0412      	lsls	r2, r2, #16
    4a08:	f241 110d 	movw	r1, #4365	; 0x110d
    4a0c:	6898      	ldr	r0, [r3, #8]
    4a0e:	4b0a      	ldr	r3, [pc, #40]	; (4a38 <sd_mmc_cmd13+0x40>)
    4a10:	4798      	blx	r3
    4a12:	4605      	mov	r5, r0
    4a14:	b150      	cbz	r0, 4a2c <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    4a16:	4b07      	ldr	r3, [pc, #28]	; (4a34 <sd_mmc_cmd13+0x3c>)
    4a18:	6898      	ldr	r0, [r3, #8]
    4a1a:	4b08      	ldr	r3, [pc, #32]	; (4a3c <sd_mmc_cmd13+0x44>)
    4a1c:	4798      	blx	r3
    4a1e:	f410 7f80 	tst.w	r0, #256	; 0x100
    4a22:	d103      	bne.n	4a2c <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    4a24:	1e63      	subs	r3, r4, #1
    4a26:	2c00      	cmp	r4, #0
    4a28:	d1e9      	bne.n	49fe <sd_mmc_cmd13+0x6>
			return false;
    4a2a:	2500      	movs	r5, #0
}
    4a2c:	4628      	mov	r0, r5
    4a2e:	bd38      	pop	{r3, r4, r5, pc}
    4a30:	00030d40 	.word	0x00030d40
    4a34:	20000660 	.word	0x20000660
    4a38:	00001055 	.word	0x00001055
    4a3c:	00001085 	.word	0x00001085

00004a40 <sd_mmc_cmd9_mci>:
{
    4a40:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    4a42:	4b0a      	ldr	r3, [pc, #40]	; (4a6c <sd_mmc_cmd9_mci+0x2c>)
    4a44:	681a      	ldr	r2, [r3, #0]
    4a46:	8912      	ldrh	r2, [r2, #8]
    4a48:	0412      	lsls	r2, r2, #16
    4a4a:	f641 3109 	movw	r1, #6921	; 0x1b09
    4a4e:	6898      	ldr	r0, [r3, #8]
    4a50:	4b07      	ldr	r3, [pc, #28]	; (4a70 <sd_mmc_cmd9_mci+0x30>)
    4a52:	4798      	blx	r3
    4a54:	4604      	mov	r4, r0
    4a56:	b908      	cbnz	r0, 4a5c <sd_mmc_cmd9_mci+0x1c>
}
    4a58:	4620      	mov	r0, r4
    4a5a:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    4a5c:	4b03      	ldr	r3, [pc, #12]	; (4a6c <sd_mmc_cmd9_mci+0x2c>)
    4a5e:	6819      	ldr	r1, [r3, #0]
    4a60:	310e      	adds	r1, #14
    4a62:	6898      	ldr	r0, [r3, #8]
    4a64:	4b03      	ldr	r3, [pc, #12]	; (4a74 <sd_mmc_cmd9_mci+0x34>)
    4a66:	4798      	blx	r3
	return true;
    4a68:	e7f6      	b.n	4a58 <sd_mmc_cmd9_mci+0x18>
    4a6a:	bf00      	nop
    4a6c:	20000660 	.word	0x20000660
    4a70:	00001055 	.word	0x00001055
    4a74:	000010ad 	.word	0x000010ad

00004a78 <sd_acmd51>:
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4a7c:	4b28      	ldr	r3, [pc, #160]	; (4b20 <sd_acmd51+0xa8>)
    4a7e:	681a      	ldr	r2, [r3, #0]
    4a80:	8912      	ldrh	r2, [r2, #8]
    4a82:	0412      	lsls	r2, r2, #16
    4a84:	f241 1137 	movw	r1, #4407	; 0x1137
    4a88:	6898      	ldr	r0, [r3, #8]
    4a8a:	4b26      	ldr	r3, [pc, #152]	; (4b24 <sd_acmd51+0xac>)
    4a8c:	4798      	blx	r3
    4a8e:	4603      	mov	r3, r0
    4a90:	b910      	cbnz	r0, 4a98 <sd_acmd51+0x20>
}
    4a92:	4618      	mov	r0, r3
    4a94:	b004      	add	sp, #16
    4a96:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    4a98:	4b21      	ldr	r3, [pc, #132]	; (4b20 <sd_acmd51+0xa8>)
    4a9a:	6898      	ldr	r0, [r3, #8]
    4a9c:	2301      	movs	r3, #1
    4a9e:	9301      	str	r3, [sp, #4]
    4aa0:	9300      	str	r3, [sp, #0]
    4aa2:	2308      	movs	r3, #8
    4aa4:	2200      	movs	r2, #0
    4aa6:	4920      	ldr	r1, [pc, #128]	; (4b28 <sd_acmd51+0xb0>)
    4aa8:	4c20      	ldr	r4, [pc, #128]	; (4b2c <sd_acmd51+0xb4>)
    4aaa:	47a0      	blx	r4
    4aac:	4603      	mov	r3, r0
    4aae:	2800      	cmp	r0, #0
    4ab0:	d0ef      	beq.n	4a92 <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    4ab2:	2201      	movs	r2, #1
    4ab4:	a902      	add	r1, sp, #8
    4ab6:	4b1a      	ldr	r3, [pc, #104]	; (4b20 <sd_acmd51+0xa8>)
    4ab8:	6898      	ldr	r0, [r3, #8]
    4aba:	4b1d      	ldr	r3, [pc, #116]	; (4b30 <sd_acmd51+0xb8>)
    4abc:	4798      	blx	r3
    4abe:	4603      	mov	r3, r0
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d0e6      	beq.n	4a92 <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4ac4:	4b16      	ldr	r3, [pc, #88]	; (4b20 <sd_acmd51+0xa8>)
    4ac6:	6898      	ldr	r0, [r3, #8]
    4ac8:	4b1a      	ldr	r3, [pc, #104]	; (4b34 <sd_acmd51+0xbc>)
    4aca:	4798      	blx	r3
    4acc:	4603      	mov	r3, r0
    4ace:	2800      	cmp	r0, #0
    4ad0:	d0df      	beq.n	4a92 <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4ad2:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    4ad6:	f002 020f 	and.w	r2, r2, #15
    4ada:	2a01      	cmp	r2, #1
    4adc:	d00c      	beq.n	4af8 <sd_acmd51+0x80>
    4ade:	b132      	cbz	r2, 4aee <sd_acmd51+0x76>
    4ae0:	2a02      	cmp	r2, #2
    4ae2:	d00e      	beq.n	4b02 <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4ae4:	4a0e      	ldr	r2, [pc, #56]	; (4b20 <sd_acmd51+0xa8>)
    4ae6:	6812      	ldr	r2, [r2, #0]
    4ae8:	2110      	movs	r1, #16
    4aea:	7311      	strb	r1, [r2, #12]
		break;
    4aec:	e7d1      	b.n	4a92 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4aee:	4a0c      	ldr	r2, [pc, #48]	; (4b20 <sd_acmd51+0xa8>)
    4af0:	6812      	ldr	r2, [r2, #0]
    4af2:	2110      	movs	r1, #16
    4af4:	7311      	strb	r1, [r2, #12]
		break;
    4af6:	e7cc      	b.n	4a92 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    4af8:	4a09      	ldr	r2, [pc, #36]	; (4b20 <sd_acmd51+0xa8>)
    4afa:	6812      	ldr	r2, [r2, #0]
    4afc:	211a      	movs	r1, #26
    4afe:	7311      	strb	r1, [r2, #12]
		break;
    4b00:	e7c7      	b.n	4a92 <sd_acmd51+0x1a>
    4b02:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    4b06:	09d2      	lsrs	r2, r2, #7
    4b08:	d104      	bne.n	4b14 <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    4b0a:	4a05      	ldr	r2, [pc, #20]	; (4b20 <sd_acmd51+0xa8>)
    4b0c:	6812      	ldr	r2, [r2, #0]
    4b0e:	2120      	movs	r1, #32
    4b10:	7311      	strb	r1, [r2, #12]
    4b12:	e7be      	b.n	4a92 <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    4b14:	4a02      	ldr	r2, [pc, #8]	; (4b20 <sd_acmd51+0xa8>)
    4b16:	6812      	ldr	r2, [r2, #0]
    4b18:	2130      	movs	r1, #48	; 0x30
    4b1a:	7311      	strb	r1, [r2, #12]
    4b1c:	e7b9      	b.n	4a92 <sd_acmd51+0x1a>
    4b1e:	bf00      	nop
    4b20:	20000660 	.word	0x20000660
    4b24:	00001055 	.word	0x00001055
    4b28:	00081133 	.word	0x00081133
    4b2c:	000010e1 	.word	0x000010e1
    4b30:	00001125 	.word	0x00001125
    4b34:	00001195 	.word	0x00001195

00004b38 <sd_cm6_set_high_speed>:
{
    4b38:	b530      	push	{r4, r5, lr}
    4b3a:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    4b3c:	2440      	movs	r4, #64	; 0x40
    4b3e:	4622      	mov	r2, r4
    4b40:	2100      	movs	r1, #0
    4b42:	a802      	add	r0, sp, #8
    4b44:	4b20      	ldr	r3, [pc, #128]	; (4bc8 <sd_cm6_set_high_speed+0x90>)
    4b46:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    4b48:	2301      	movs	r3, #1
    4b4a:	9301      	str	r3, [sp, #4]
    4b4c:	9300      	str	r3, [sp, #0]
    4b4e:	4623      	mov	r3, r4
    4b50:	4a1e      	ldr	r2, [pc, #120]	; (4bcc <sd_cm6_set_high_speed+0x94>)
    4b52:	491f      	ldr	r1, [pc, #124]	; (4bd0 <sd_cm6_set_high_speed+0x98>)
    4b54:	481f      	ldr	r0, [pc, #124]	; (4bd4 <sd_cm6_set_high_speed+0x9c>)
    4b56:	6880      	ldr	r0, [r0, #8]
    4b58:	4c1f      	ldr	r4, [pc, #124]	; (4bd8 <sd_cm6_set_high_speed+0xa0>)
    4b5a:	47a0      	blx	r4
    4b5c:	4604      	mov	r4, r0
    4b5e:	b358      	cbz	r0, 4bb8 <sd_cm6_set_high_speed+0x80>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    4b60:	2201      	movs	r2, #1
    4b62:	a902      	add	r1, sp, #8
    4b64:	4b1b      	ldr	r3, [pc, #108]	; (4bd4 <sd_cm6_set_high_speed+0x9c>)
    4b66:	6898      	ldr	r0, [r3, #8]
    4b68:	4b1c      	ldr	r3, [pc, #112]	; (4bdc <sd_cm6_set_high_speed+0xa4>)
    4b6a:	4798      	blx	r3
    4b6c:	4604      	mov	r4, r0
    4b6e:	b318      	cbz	r0, 4bb8 <sd_cm6_set_high_speed+0x80>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4b70:	4b18      	ldr	r3, [pc, #96]	; (4bd4 <sd_cm6_set_high_speed+0x9c>)
    4b72:	6898      	ldr	r0, [r3, #8]
    4b74:	4b1a      	ldr	r3, [pc, #104]	; (4be0 <sd_cm6_set_high_speed+0xa8>)
    4b76:	4798      	blx	r3
    4b78:	4604      	mov	r4, r0
    4b7a:	b1e8      	cbz	r0, 4bb8 <sd_cm6_set_high_speed+0x80>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    4b7c:	4b15      	ldr	r3, [pc, #84]	; (4bd4 <sd_cm6_set_high_speed+0x9c>)
    4b7e:	6898      	ldr	r0, [r3, #8]
    4b80:	4b18      	ldr	r3, [pc, #96]	; (4be4 <sd_cm6_set_high_speed+0xac>)
    4b82:	4798      	blx	r3
    4b84:	f010 0f80 	tst.w	r0, #128	; 0x80
    4b88:	d119      	bne.n	4bbe <sd_cm6_set_high_speed+0x86>
    4b8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    4b8e:	f003 030f 	and.w	r3, r3, #15
    4b92:	2b0f      	cmp	r3, #15
    4b94:	d010      	beq.n	4bb8 <sd_cm6_set_high_speed+0x80>
    4b96:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4b9a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    4b9e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    4ba2:	d10e      	bne.n	4bc2 <sd_cm6_set_high_speed+0x8a>
	driver_send_clock(sd_mmc_hal);
    4ba4:	4d0b      	ldr	r5, [pc, #44]	; (4bd4 <sd_cm6_set_high_speed+0x9c>)
    4ba6:	68a8      	ldr	r0, [r5, #8]
    4ba8:	4b0f      	ldr	r3, [pc, #60]	; (4be8 <sd_cm6_set_high_speed+0xb0>)
    4baa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    4bac:	682b      	ldr	r3, [r5, #0]
    4bae:	2201      	movs	r2, #1
    4bb0:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    4bb2:	681a      	ldr	r2, [r3, #0]
    4bb4:	0052      	lsls	r2, r2, #1
    4bb6:	601a      	str	r2, [r3, #0]
}
    4bb8:	4620      	mov	r0, r4
    4bba:	b013      	add	sp, #76	; 0x4c
    4bbc:	bd30      	pop	{r4, r5, pc}
		return false;
    4bbe:	2400      	movs	r4, #0
    4bc0:	e7fa      	b.n	4bb8 <sd_cm6_set_high_speed+0x80>
		return false;
    4bc2:	2400      	movs	r4, #0
    4bc4:	e7f8      	b.n	4bb8 <sd_cm6_set_high_speed+0x80>
    4bc6:	bf00      	nop
    4bc8:	00005531 	.word	0x00005531
    4bcc:	80ffff01 	.word	0x80ffff01
    4bd0:	00081106 	.word	0x00081106
    4bd4:	20000660 	.word	0x20000660
    4bd8:	000010e1 	.word	0x000010e1
    4bdc:	00001125 	.word	0x00001125
    4be0:	00001195 	.word	0x00001195
    4be4:	00001085 	.word	0x00001085
    4be8:	0000102d 	.word	0x0000102d

00004bec <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    4bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bee:	b085      	sub	sp, #20
	uint8_t v2 = 0;
    4bf0:	2400      	movs	r4, #0
    4bf2:	f88d 400f 	strb.w	r4, [sp, #15]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
    4bf6:	ae04      	add	r6, sp, #16
    4bf8:	2308      	movs	r3, #8
    4bfa:	f806 3d02 	strb.w	r3, [r6, #-2]!
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    4bfe:	4d6f      	ldr	r5, [pc, #444]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4c00:	682b      	ldr	r3, [r5, #0]
    4c02:	2701      	movs	r7, #1
    4c04:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    4c06:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    4c08:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    4c0a:	68a8      	ldr	r0, [r5, #8]
    4c0c:	4b6c      	ldr	r3, [pc, #432]	; (4dc0 <sd_mmc_mci_card_init+0x1d4>)
    4c0e:	4798      	blx	r3

#if (CONF_SDIO_SUPPORT == 1)
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    4c10:	9600      	str	r6, [sp, #0]
    4c12:	4623      	mov	r3, r4
    4c14:	2206      	movs	r2, #6
    4c16:	4621      	mov	r1, r4
    4c18:	4638      	mov	r0, r7
    4c1a:	4e6a      	ldr	r6, [pc, #424]	; (4dc4 <sd_mmc_mci_card_init+0x1d8>)
    4c1c:	47b0      	blx	r6
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    4c1e:	4622      	mov	r2, r4
    4c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4c24:	68a8      	ldr	r0, [r5, #8]
    4c26:	4b68      	ldr	r3, [pc, #416]	; (4dc8 <sd_mmc_mci_card_init+0x1dc>)
    4c28:	4798      	blx	r3
    4c2a:	4604      	mov	r4, r0
    4c2c:	b910      	cbnz	r0, 4c34 <sd_mmc_mci_card_init+0x48>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    4c2e:	4620      	mov	r0, r4
    4c30:	b005      	add	sp, #20
    4c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_cmd8(&v2)) {
    4c34:	f10d 000f 	add.w	r0, sp, #15
    4c38:	4b64      	ldr	r3, [pc, #400]	; (4dcc <sd_mmc_mci_card_init+0x1e0>)
    4c3a:	4798      	blx	r3
    4c3c:	4604      	mov	r4, r0
    4c3e:	2800      	cmp	r0, #0
    4c40:	d0f5      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
	if (!sdio_op_cond()) {
    4c42:	4b63      	ldr	r3, [pc, #396]	; (4dd0 <sd_mmc_mci_card_init+0x1e4>)
    4c44:	4798      	blx	r3
    4c46:	4604      	mov	r4, r0
    4c48:	2800      	cmp	r0, #0
    4c4a:	d0f0      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c4c:	682b      	ldr	r3, [r5, #0]
    4c4e:	7adb      	ldrb	r3, [r3, #11]
    4c50:	f013 0f01 	tst.w	r3, #1
    4c54:	f040 8089 	bne.w	4d6a <sd_mmc_mci_card_init+0x17e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c58:	4b58      	ldr	r3, [pc, #352]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4c5a:	681b      	ldr	r3, [r3, #0]
    4c5c:	7adb      	ldrb	r3, [r3, #11]
    4c5e:	f013 0f01 	tst.w	r3, #1
    4c62:	d009      	beq.n	4c78 <sd_mmc_mci_card_init+0x8c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    4c64:	2200      	movs	r2, #0
    4c66:	f645 3102 	movw	r1, #23298	; 0x5b02
    4c6a:	4b54      	ldr	r3, [pc, #336]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4c6c:	6898      	ldr	r0, [r3, #8]
    4c6e:	4b56      	ldr	r3, [pc, #344]	; (4dc8 <sd_mmc_mci_card_init+0x1dc>)
    4c70:	4798      	blx	r3
    4c72:	4604      	mov	r4, r0
    4c74:	2800      	cmp	r0, #0
    4c76:	d0da      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    4c78:	2200      	movs	r2, #0
    4c7a:	f245 1103 	movw	r1, #20739	; 0x5103
    4c7e:	4b4f      	ldr	r3, [pc, #316]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4c80:	6898      	ldr	r0, [r3, #8]
    4c82:	4b51      	ldr	r3, [pc, #324]	; (4dc8 <sd_mmc_mci_card_init+0x1dc>)
    4c84:	4798      	blx	r3
    4c86:	4604      	mov	r4, r0
    4c88:	2800      	cmp	r0, #0
    4c8a:	d0d0      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    4c8c:	4c4b      	ldr	r4, [pc, #300]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4c8e:	6825      	ldr	r5, [r4, #0]
    4c90:	68a0      	ldr	r0, [r4, #8]
    4c92:	4b50      	ldr	r3, [pc, #320]	; (4dd4 <sd_mmc_mci_card_init+0x1e8>)
    4c94:	4798      	blx	r3
    4c96:	0c00      	lsrs	r0, r0, #16
    4c98:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c9a:	6823      	ldr	r3, [r4, #0]
    4c9c:	7adb      	ldrb	r3, [r3, #11]
    4c9e:	f013 0f01 	tst.w	r3, #1
    4ca2:	d006      	beq.n	4cb2 <sd_mmc_mci_card_init+0xc6>
		if (!sd_mmc_cmd9_mci()) {
    4ca4:	4b4c      	ldr	r3, [pc, #304]	; (4dd8 <sd_mmc_mci_card_init+0x1ec>)
    4ca6:	4798      	blx	r3
    4ca8:	4604      	mov	r4, r0
    4caa:	2800      	cmp	r0, #0
    4cac:	d0bf      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
		sd_decode_csd();
    4cae:	4b4b      	ldr	r3, [pc, #300]	; (4ddc <sd_mmc_mci_card_init+0x1f0>)
    4cb0:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4cb2:	4b42      	ldr	r3, [pc, #264]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4cb4:	681a      	ldr	r2, [r3, #0]
    4cb6:	8912      	ldrh	r2, [r2, #8]
    4cb8:	0412      	lsls	r2, r2, #16
    4cba:	f243 1107 	movw	r1, #12551	; 0x3107
    4cbe:	6898      	ldr	r0, [r3, #8]
    4cc0:	4b41      	ldr	r3, [pc, #260]	; (4dc8 <sd_mmc_mci_card_init+0x1dc>)
    4cc2:	4798      	blx	r3
    4cc4:	4604      	mov	r4, r0
    4cc6:	2800      	cmp	r0, #0
    4cc8:	d0b1      	beq.n	4c2e <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4cca:	4b3c      	ldr	r3, [pc, #240]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4ccc:	681b      	ldr	r3, [r3, #0]
    4cce:	7adb      	ldrb	r3, [r3, #11]
    4cd0:	f013 0f01 	tst.w	r3, #1
    4cd4:	d155      	bne.n	4d82 <sd_mmc_mci_card_init+0x196>
	if (IS_SDIO()) {
    4cd6:	4b39      	ldr	r3, [pc, #228]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	7adb      	ldrb	r3, [r3, #11]
    4cdc:	f013 0f04 	tst.w	r3, #4
    4ce0:	d003      	beq.n	4cea <sd_mmc_mci_card_init+0xfe>
		if (!sdio_get_max_speed()) {
    4ce2:	4b3f      	ldr	r3, [pc, #252]	; (4de0 <sd_mmc_mci_card_init+0x1f4>)
    4ce4:	4798      	blx	r3
    4ce6:	2800      	cmp	r0, #0
    4ce8:	d063      	beq.n	4db2 <sd_mmc_mci_card_init+0x1c6>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4cea:	4b34      	ldr	r3, [pc, #208]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4cec:	7919      	ldrb	r1, [r3, #4]
    4cee:	6898      	ldr	r0, [r3, #8]
    4cf0:	4b3c      	ldr	r3, [pc, #240]	; (4de4 <sd_mmc_mci_card_init+0x1f8>)
    4cf2:	4798      	blx	r3
    4cf4:	2803      	cmp	r0, #3
    4cf6:	d911      	bls.n	4d1c <sd_mmc_mci_card_init+0x130>
		if (IS_SDIO()) {
    4cf8:	4b30      	ldr	r3, [pc, #192]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	7adb      	ldrb	r3, [r3, #11]
    4cfe:	f013 0f04 	tst.w	r3, #4
    4d02:	d144      	bne.n	4d8e <sd_mmc_mci_card_init+0x1a2>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4d04:	4b2d      	ldr	r3, [pc, #180]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	7adb      	ldrb	r3, [r3, #11]
    4d0a:	f013 0f01 	tst.w	r3, #1
    4d0e:	d003      	beq.n	4d18 <sd_mmc_mci_card_init+0x12c>
			if (!sd_acmd6()) {
    4d10:	4b35      	ldr	r3, [pc, #212]	; (4de8 <sd_mmc_mci_card_init+0x1fc>)
    4d12:	4798      	blx	r3
    4d14:	2800      	cmp	r0, #0
    4d16:	d04e      	beq.n	4db6 <sd_mmc_mci_card_init+0x1ca>
		sd_mmc_configure_slot();
    4d18:	4b34      	ldr	r3, [pc, #208]	; (4dec <sd_mmc_mci_card_init+0x200>)
    4d1a:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    4d1c:	4b27      	ldr	r3, [pc, #156]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d1e:	6898      	ldr	r0, [r3, #8]
    4d20:	4b33      	ldr	r3, [pc, #204]	; (4df0 <sd_mmc_mci_card_init+0x204>)
    4d22:	4798      	blx	r3
    4d24:	b180      	cbz	r0, 4d48 <sd_mmc_mci_card_init+0x15c>
		if (IS_SDIO()) {
    4d26:	4b25      	ldr	r3, [pc, #148]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d28:	681b      	ldr	r3, [r3, #0]
    4d2a:	7adb      	ldrb	r3, [r3, #11]
    4d2c:	f013 0f04 	tst.w	r3, #4
    4d30:	d133      	bne.n	4d9a <sd_mmc_mci_card_init+0x1ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4d32:	4b22      	ldr	r3, [pc, #136]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d34:	681b      	ldr	r3, [r3, #0]
    4d36:	7ada      	ldrb	r2, [r3, #11]
    4d38:	f012 0f01 	tst.w	r2, #1
    4d3c:	d002      	beq.n	4d44 <sd_mmc_mci_card_init+0x158>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    4d3e:	7b1b      	ldrb	r3, [r3, #12]
    4d40:	2b10      	cmp	r3, #16
    4d42:	d830      	bhi.n	4da6 <sd_mmc_mci_card_init+0x1ba>
		sd_mmc_configure_slot();
    4d44:	4b29      	ldr	r3, [pc, #164]	; (4dec <sd_mmc_mci_card_init+0x200>)
    4d46:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4d48:	4b1c      	ldr	r3, [pc, #112]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d4a:	681b      	ldr	r3, [r3, #0]
    4d4c:	7adb      	ldrb	r3, [r3, #11]
    4d4e:	f013 0f01 	tst.w	r3, #1
    4d52:	f43f af6c 	beq.w	4c2e <sd_mmc_mci_card_init+0x42>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    4d56:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d5a:	f241 1110 	movw	r1, #4368	; 0x1110
    4d5e:	4b17      	ldr	r3, [pc, #92]	; (4dbc <sd_mmc_mci_card_init+0x1d0>)
    4d60:	6898      	ldr	r0, [r3, #8]
    4d62:	4b19      	ldr	r3, [pc, #100]	; (4dc8 <sd_mmc_mci_card_init+0x1dc>)
    4d64:	4798      	blx	r3
    4d66:	4604      	mov	r4, r0
    4d68:	e761      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
		if (!sd_mci_op_cond(v2)) {
    4d6a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    4d6e:	4b21      	ldr	r3, [pc, #132]	; (4df4 <sd_mmc_mci_card_init+0x208>)
    4d70:	4798      	blx	r3
    4d72:	4604      	mov	r4, r0
    4d74:	2800      	cmp	r0, #0
    4d76:	f47f af6f 	bne.w	4c58 <sd_mmc_mci_card_init+0x6c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    4d7a:	682b      	ldr	r3, [r5, #0]
    4d7c:	2200      	movs	r2, #0
    4d7e:	72da      	strb	r2, [r3, #11]
			return false;
    4d80:	e755      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
		if (!sd_acmd51()) {
    4d82:	4b1d      	ldr	r3, [pc, #116]	; (4df8 <sd_mmc_mci_card_init+0x20c>)
    4d84:	4798      	blx	r3
    4d86:	2800      	cmp	r0, #0
    4d88:	d1a5      	bne.n	4cd6 <sd_mmc_mci_card_init+0xea>
			return false;
    4d8a:	4604      	mov	r4, r0
    4d8c:	e74f      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_bus_width()) {
    4d8e:	4b1b      	ldr	r3, [pc, #108]	; (4dfc <sd_mmc_mci_card_init+0x210>)
    4d90:	4798      	blx	r3
    4d92:	2800      	cmp	r0, #0
    4d94:	d1b6      	bne.n	4d04 <sd_mmc_mci_card_init+0x118>
				return false;
    4d96:	4604      	mov	r4, r0
    4d98:	e749      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_high_speed()) {
    4d9a:	4b19      	ldr	r3, [pc, #100]	; (4e00 <sd_mmc_mci_card_init+0x214>)
    4d9c:	4798      	blx	r3
    4d9e:	2800      	cmp	r0, #0
    4da0:	d1c7      	bne.n	4d32 <sd_mmc_mci_card_init+0x146>
				return false;
    4da2:	4604      	mov	r4, r0
    4da4:	e743      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
				if (!sd_cm6_set_high_speed()) {
    4da6:	4b17      	ldr	r3, [pc, #92]	; (4e04 <sd_mmc_mci_card_init+0x218>)
    4da8:	4798      	blx	r3
    4daa:	2800      	cmp	r0, #0
    4dac:	d1ca      	bne.n	4d44 <sd_mmc_mci_card_init+0x158>
					return false;
    4dae:	4604      	mov	r4, r0
    4db0:	e73d      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
			return false;
    4db2:	4604      	mov	r4, r0
    4db4:	e73b      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
				return false;
    4db6:	4604      	mov	r4, r0
    4db8:	e739      	b.n	4c2e <sd_mmc_mci_card_init+0x42>
    4dba:	bf00      	nop
    4dbc:	20000660 	.word	0x20000660
    4dc0:	0000102d 	.word	0x0000102d
    4dc4:	000046a5 	.word	0x000046a5
    4dc8:	00001055 	.word	0x00001055
    4dcc:	000048b5 	.word	0x000048b5
    4dd0:	00004905 	.word	0x00004905
    4dd4:	00001085 	.word	0x00001085
    4dd8:	00004a41 	.word	0x00004a41
    4ddc:	00004469 	.word	0x00004469
    4de0:	0000470d 	.word	0x0000470d
    4de4:	00000fd9 	.word	0x00000fd9
    4de8:	00004661 	.word	0x00004661
    4dec:	000044f1 	.word	0x000044f1
    4df0:	00001005 	.word	0x00001005
    4df4:	00004985 	.word	0x00004985
    4df8:	00004a79 	.word	0x00004a79
    4dfc:	00004809 	.word	0x00004809
    4e00:	0000485d 	.word	0x0000485d
    4e04:	00004b39 	.word	0x00004b39

00004e08 <sd_mmc_deselect_slot>:
{
    4e08:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4e0a:	4b04      	ldr	r3, [pc, #16]	; (4e1c <sd_mmc_deselect_slot+0x14>)
    4e0c:	7919      	ldrb	r1, [r3, #4]
    4e0e:	b101      	cbz	r1, 4e12 <sd_mmc_deselect_slot+0xa>
    4e10:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    4e12:	6898      	ldr	r0, [r3, #8]
    4e14:	4b02      	ldr	r3, [pc, #8]	; (4e20 <sd_mmc_deselect_slot+0x18>)
    4e16:	4798      	blx	r3
}
    4e18:	e7fa      	b.n	4e10 <sd_mmc_deselect_slot+0x8>
    4e1a:	bf00      	nop
    4e1c:	20000660 	.word	0x20000660
    4e20:	00000fad 	.word	0x00000fad

00004e24 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    4e24:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    4e26:	2300      	movs	r3, #0
    4e28:	b13b      	cbz	r3, 4e3a <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4e2a:	4b08      	ldr	r3, [pc, #32]	; (4e4c <sd_mmc_init+0x28>)
    4e2c:	24ff      	movs	r4, #255	; 0xff
    4e2e:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4e30:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    4e32:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    4e34:	635a      	str	r2, [r3, #52]	; 0x34
}
    4e36:	bc30      	pop	{r4, r5}
    4e38:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4e3a:	4c04      	ldr	r4, [pc, #16]	; (4e4c <sd_mmc_init+0x28>)
    4e3c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    4e40:	2504      	movs	r5, #4
    4e42:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    4e44:	3301      	adds	r3, #1
    4e46:	b2db      	uxtb	r3, r3
    4e48:	e7ee      	b.n	4e28 <sd_mmc_init+0x4>
    4e4a:	bf00      	nop
    4e4c:	20000660 	.word	0x20000660

00004e50 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    4e50:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4e52:	4b0d      	ldr	r3, [pc, #52]	; (4e88 <sd_mmc_check+0x38>)
    4e54:	4798      	blx	r3
    4e56:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    4e58:	2801      	cmp	r0, #1
    4e5a:	d003      	beq.n	4e64 <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    4e5c:	4b0b      	ldr	r3, [pc, #44]	; (4e8c <sd_mmc_check+0x3c>)
    4e5e:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    4e60:	4620      	mov	r0, r4
    4e62:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    4e64:	4b0a      	ldr	r3, [pc, #40]	; (4e90 <sd_mmc_check+0x40>)
    4e66:	4798      	blx	r3
    4e68:	b930      	cbnz	r0, 4e78 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    4e6a:	4b0a      	ldr	r3, [pc, #40]	; (4e94 <sd_mmc_check+0x44>)
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	2403      	movs	r4, #3
    4e70:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    4e72:	4b06      	ldr	r3, [pc, #24]	; (4e8c <sd_mmc_check+0x3c>)
    4e74:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    4e76:	e7f3      	b.n	4e60 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    4e78:	4b06      	ldr	r3, [pc, #24]	; (4e94 <sd_mmc_check+0x44>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	2200      	movs	r2, #0
    4e7e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    4e80:	4b02      	ldr	r3, [pc, #8]	; (4e8c <sd_mmc_check+0x3c>)
    4e82:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    4e84:	e7ec      	b.n	4e60 <sd_mmc_check+0x10>
    4e86:	bf00      	nop
    4e88:	0000451d 	.word	0x0000451d
    4e8c:	00004e09 	.word	0x00004e09
    4e90:	00004bed 	.word	0x00004bed
    4e94:	20000660 	.word	0x20000660

00004e98 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    4e98:	4b19      	ldr	r3, [pc, #100]	; (4f00 <sd_mmc_is_write_protected+0x68>)
    4e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e9c:	b35b      	cbz	r3, 4ef6 <sd_mmc_is_write_protected+0x5e>
{
    4e9e:	b570      	push	{r4, r5, r6, lr}
    4ea0:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    4ea2:	0085      	lsls	r5, r0, #2
    4ea4:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
    4eac:	d025      	beq.n	4efa <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    4eae:	b2de      	uxtb	r6, r3
    4eb0:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    4eb2:	a801      	add	r0, sp, #4
    4eb4:	4b13      	ldr	r3, [pc, #76]	; (4f04 <sd_mmc_is_write_protected+0x6c>)
    4eb6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4eb8:	4913      	ldr	r1, [pc, #76]	; (4f08 <sd_mmc_is_write_protected+0x70>)
    4eba:	01e3      	lsls	r3, r4, #7
    4ebc:	18ca      	adds	r2, r1, r3
    4ebe:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4ec0:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4ec2:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4ec4:	405c      	eors	r4, r3
    4ec6:	400c      	ands	r4, r1
    4ec8:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4eca:	a801      	add	r0, sp, #4
    4ecc:	4b0f      	ldr	r3, [pc, #60]	; (4f0c <sd_mmc_is_write_protected+0x74>)
    4ece:	4798      	blx	r3
    4ed0:	f006 031f 	and.w	r3, r6, #31
    4ed4:	2201      	movs	r2, #1
    4ed6:	fa02 f303 	lsl.w	r3, r2, r3
    4eda:	4223      	tst	r3, r4
    4edc:	bf08      	it	eq
    4ede:	2200      	moveq	r2, #0
    4ee0:	4b07      	ldr	r3, [pc, #28]	; (4f00 <sd_mmc_is_write_protected+0x68>)
    4ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4ee4:	441d      	add	r5, r3
    4ee6:	886b      	ldrh	r3, [r5, #2]
    4ee8:	429a      	cmp	r2, r3
    4eea:	d002      	beq.n	4ef2 <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    4eec:	2000      	movs	r0, #0
}
    4eee:	b002      	add	sp, #8
    4ef0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    4ef2:	2001      	movs	r0, #1
    4ef4:	e7fb      	b.n	4eee <sd_mmc_is_write_protected+0x56>
		return false;
    4ef6:	2000      	movs	r0, #0
    4ef8:	4770      	bx	lr
    4efa:	2000      	movs	r0, #0
    4efc:	e7f7      	b.n	4eee <sd_mmc_is_write_protected+0x56>
    4efe:	bf00      	nop
    4f00:	20000660 	.word	0x20000660
    4f04:	00000d41 	.word	0x00000d41
    4f08:	41008000 	.word	0x41008000
    4f0c:	00000d4f 	.word	0x00000d4f

00004f10 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4f10:	b570      	push	{r4, r5, r6, lr}
    4f12:	b082      	sub	sp, #8
    4f14:	460e      	mov	r6, r1
    4f16:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4f18:	4b1b      	ldr	r3, [pc, #108]	; (4f88 <sd_mmc_init_read_blocks+0x78>)
    4f1a:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4f1c:	4604      	mov	r4, r0
    4f1e:	b110      	cbz	r0, 4f26 <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    4f20:	4620      	mov	r0, r4
    4f22:	b002      	add	sp, #8
    4f24:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    4f26:	4b19      	ldr	r3, [pc, #100]	; (4f8c <sd_mmc_init_read_blocks+0x7c>)
    4f28:	4798      	blx	r3
    4f2a:	b1c0      	cbz	r0, 4f5e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    4f2c:	2d01      	cmp	r5, #1
    4f2e:	d91a      	bls.n	4f66 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    4f30:	4917      	ldr	r1, [pc, #92]	; (4f90 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    4f32:	4b18      	ldr	r3, [pc, #96]	; (4f94 <sd_mmc_init_read_blocks+0x84>)
    4f34:	681b      	ldr	r3, [r3, #0]
    4f36:	7adb      	ldrb	r3, [r3, #11]
    4f38:	f013 0f08 	tst.w	r3, #8
    4f3c:	d100      	bne.n	4f40 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4f3e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4f40:	4b14      	ldr	r3, [pc, #80]	; (4f94 <sd_mmc_init_read_blocks+0x84>)
    4f42:	6898      	ldr	r0, [r3, #8]
    4f44:	2301      	movs	r3, #1
    4f46:	9301      	str	r3, [sp, #4]
    4f48:	9500      	str	r5, [sp, #0]
    4f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    4f4e:	4632      	mov	r2, r6
    4f50:	4e11      	ldr	r6, [pc, #68]	; (4f98 <sd_mmc_init_read_blocks+0x88>)
    4f52:	47b0      	blx	r6
    4f54:	b948      	cbnz	r0, 4f6a <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    4f56:	4b11      	ldr	r3, [pc, #68]	; (4f9c <sd_mmc_init_read_blocks+0x8c>)
    4f58:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4f5a:	2405      	movs	r4, #5
    4f5c:	e7e0      	b.n	4f20 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4f5e:	4b0f      	ldr	r3, [pc, #60]	; (4f9c <sd_mmc_init_read_blocks+0x8c>)
    4f60:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4f62:	2405      	movs	r4, #5
    4f64:	e7dc      	b.n	4f20 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    4f66:	490e      	ldr	r1, [pc, #56]	; (4fa0 <sd_mmc_init_read_blocks+0x90>)
    4f68:	e7e3      	b.n	4f32 <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    4f6a:	4b0a      	ldr	r3, [pc, #40]	; (4f94 <sd_mmc_init_read_blocks+0x84>)
    4f6c:	6898      	ldr	r0, [r3, #8]
    4f6e:	4b0d      	ldr	r3, [pc, #52]	; (4fa4 <sd_mmc_init_read_blocks+0x94>)
    4f70:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4f72:	4b0d      	ldr	r3, [pc, #52]	; (4fa8 <sd_mmc_init_read_blocks+0x98>)
    4f74:	4003      	ands	r3, r0
    4f76:	b91b      	cbnz	r3, 4f80 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    4f78:	4b06      	ldr	r3, [pc, #24]	; (4f94 <sd_mmc_init_read_blocks+0x84>)
    4f7a:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4f7c:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4f7e:	e7cf      	b.n	4f20 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4f80:	4b06      	ldr	r3, [pc, #24]	; (4f9c <sd_mmc_init_read_blocks+0x8c>)
    4f82:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4f84:	2405      	movs	r4, #5
    4f86:	e7cb      	b.n	4f20 <sd_mmc_init_read_blocks+0x10>
    4f88:	0000451d 	.word	0x0000451d
    4f8c:	000049f9 	.word	0x000049f9
    4f90:	00101112 	.word	0x00101112
    4f94:	20000660 	.word	0x20000660
    4f98:	000010e1 	.word	0x000010e1
    4f9c:	00004e09 	.word	0x00004e09
    4fa0:	00081111 	.word	0x00081111
    4fa4:	00001085 	.word	0x00001085
    4fa8:	e4580000 	.word	0xe4580000

00004fac <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    4fac:	b570      	push	{r4, r5, r6, lr}
    4fae:	4606      	mov	r6, r0
    4fb0:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4fb2:	4d0d      	ldr	r5, [pc, #52]	; (4fe8 <sd_mmc_start_read_blocks+0x3c>)
    4fb4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4fb6:	f240 52a7 	movw	r2, #1447	; 0x5a7
    4fba:	490c      	ldr	r1, [pc, #48]	; (4fec <sd_mmc_start_read_blocks+0x40>)
    4fbc:	42a0      	cmp	r0, r4
    4fbe:	bf34      	ite	cc
    4fc0:	2000      	movcc	r0, #0
    4fc2:	2001      	movcs	r0, #1
    4fc4:	4b0a      	ldr	r3, [pc, #40]	; (4ff0 <sd_mmc_start_read_blocks+0x44>)
    4fc6:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    4fc8:	4622      	mov	r2, r4
    4fca:	4631      	mov	r1, r6
    4fcc:	68a8      	ldr	r0, [r5, #8]
    4fce:	4b09      	ldr	r3, [pc, #36]	; (4ff4 <sd_mmc_start_read_blocks+0x48>)
    4fd0:	4798      	blx	r3
    4fd2:	b918      	cbnz	r0, 4fdc <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4fd4:	2200      	movs	r2, #0
    4fd6:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4fd8:	2005      	movs	r0, #5
    4fda:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4fdc:	4a02      	ldr	r2, [pc, #8]	; (4fe8 <sd_mmc_start_read_blocks+0x3c>)
    4fde:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4fe0:	1b1c      	subs	r4, r3, r4
    4fe2:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4fe4:	2000      	movs	r0, #0
}
    4fe6:	bd70      	pop	{r4, r5, r6, pc}
    4fe8:	20000660 	.word	0x20000660
    4fec:	00005920 	.word	0x00005920
    4ff0:	00001671 	.word	0x00001671
    4ff4:	00001125 	.word	0x00001125

00004ff8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    4ff8:	b510      	push	{r4, lr}
    4ffa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4ffc:	4b16      	ldr	r3, [pc, #88]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4ffe:	6898      	ldr	r0, [r3, #8]
    5000:	4b16      	ldr	r3, [pc, #88]	; (505c <sd_mmc_wait_end_of_read_blocks+0x64>)
    5002:	4798      	blx	r3
    5004:	b908      	cbnz	r0, 500a <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5006:	2005      	movs	r0, #5
    5008:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    500a:	b194      	cbz	r4, 5032 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    500c:	2200      	movs	r2, #0
    500e:	4b12      	ldr	r3, [pc, #72]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5010:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    5012:	4b11      	ldr	r3, [pc, #68]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5014:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5016:	2b01      	cmp	r3, #1
    5018:	d011      	beq.n	503e <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    501a:	2200      	movs	r2, #0
    501c:	f243 110c 	movw	r1, #12556	; 0x310c
    5020:	4b0d      	ldr	r3, [pc, #52]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5022:	6898      	ldr	r0, [r3, #8]
    5024:	4b0e      	ldr	r3, [pc, #56]	; (5060 <sd_mmc_wait_end_of_read_blocks+0x68>)
    5026:	4798      	blx	r3
    5028:	b168      	cbz	r0, 5046 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    502a:	4b0e      	ldr	r3, [pc, #56]	; (5064 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    502c:	4798      	blx	r3
	return SD_MMC_OK;
    502e:	2000      	movs	r0, #0
    5030:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    5032:	4b09      	ldr	r3, [pc, #36]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    5034:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5036:	2b00      	cmp	r3, #0
    5038:	d0eb      	beq.n	5012 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    503a:	2000      	movs	r0, #0
}
    503c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    503e:	4b09      	ldr	r3, [pc, #36]	; (5064 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    5040:	4798      	blx	r3
		return SD_MMC_OK;
    5042:	2000      	movs	r0, #0
    5044:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    5046:	2200      	movs	r2, #0
    5048:	f243 110c 	movw	r1, #12556	; 0x310c
    504c:	4b02      	ldr	r3, [pc, #8]	; (5058 <sd_mmc_wait_end_of_read_blocks+0x60>)
    504e:	6898      	ldr	r0, [r3, #8]
    5050:	4b03      	ldr	r3, [pc, #12]	; (5060 <sd_mmc_wait_end_of_read_blocks+0x68>)
    5052:	4798      	blx	r3
    5054:	e7e9      	b.n	502a <sd_mmc_wait_end_of_read_blocks+0x32>
    5056:	bf00      	nop
    5058:	20000660 	.word	0x20000660
    505c:	00001195 	.word	0x00001195
    5060:	00001055 	.word	0x00001055
    5064:	00004e09 	.word	0x00004e09

00005068 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    5068:	b5f0      	push	{r4, r5, r6, r7, lr}
    506a:	b083      	sub	sp, #12
    506c:	4607      	mov	r7, r0
    506e:	460e      	mov	r6, r1
    5070:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    5072:	4b1c      	ldr	r3, [pc, #112]	; (50e4 <sd_mmc_init_write_blocks+0x7c>)
    5074:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    5076:	4604      	mov	r4, r0
    5078:	b110      	cbz	r0, 5080 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    507a:	4620      	mov	r0, r4
    507c:	b003      	add	sp, #12
    507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    5080:	4638      	mov	r0, r7
    5082:	4b19      	ldr	r3, [pc, #100]	; (50e8 <sd_mmc_init_write_blocks+0x80>)
    5084:	4798      	blx	r3
    5086:	b9c0      	cbnz	r0, 50ba <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    5088:	2d01      	cmp	r5, #1
    508a:	d91a      	bls.n	50c2 <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    508c:	4917      	ldr	r1, [pc, #92]	; (50ec <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    508e:	4b18      	ldr	r3, [pc, #96]	; (50f0 <sd_mmc_init_write_blocks+0x88>)
    5090:	681b      	ldr	r3, [r3, #0]
    5092:	7adb      	ldrb	r3, [r3, #11]
    5094:	f013 0f08 	tst.w	r3, #8
    5098:	d100      	bne.n	509c <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    509a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    509c:	4b14      	ldr	r3, [pc, #80]	; (50f0 <sd_mmc_init_write_blocks+0x88>)
    509e:	6898      	ldr	r0, [r3, #8]
    50a0:	2301      	movs	r3, #1
    50a2:	9301      	str	r3, [sp, #4]
    50a4:	9500      	str	r5, [sp, #0]
    50a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    50aa:	4632      	mov	r2, r6
    50ac:	4e11      	ldr	r6, [pc, #68]	; (50f4 <sd_mmc_init_write_blocks+0x8c>)
    50ae:	47b0      	blx	r6
    50b0:	b948      	cbnz	r0, 50c6 <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    50b2:	4b11      	ldr	r3, [pc, #68]	; (50f8 <sd_mmc_init_write_blocks+0x90>)
    50b4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    50b6:	2405      	movs	r4, #5
    50b8:	e7df      	b.n	507a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    50ba:	4b0f      	ldr	r3, [pc, #60]	; (50f8 <sd_mmc_init_write_blocks+0x90>)
    50bc:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    50be:	2407      	movs	r4, #7
    50c0:	e7db      	b.n	507a <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    50c2:	490e      	ldr	r1, [pc, #56]	; (50fc <sd_mmc_init_write_blocks+0x94>)
    50c4:	e7e3      	b.n	508e <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    50c6:	4b0a      	ldr	r3, [pc, #40]	; (50f0 <sd_mmc_init_write_blocks+0x88>)
    50c8:	6898      	ldr	r0, [r3, #8]
    50ca:	4b0d      	ldr	r3, [pc, #52]	; (5100 <sd_mmc_init_write_blocks+0x98>)
    50cc:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    50ce:	4b0d      	ldr	r3, [pc, #52]	; (5104 <sd_mmc_init_write_blocks+0x9c>)
    50d0:	4003      	ands	r3, r0
    50d2:	b91b      	cbnz	r3, 50dc <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    50d4:	4b06      	ldr	r3, [pc, #24]	; (50f0 <sd_mmc_init_write_blocks+0x88>)
    50d6:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    50d8:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    50da:	e7ce      	b.n	507a <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    50dc:	4b06      	ldr	r3, [pc, #24]	; (50f8 <sd_mmc_init_write_blocks+0x90>)
    50de:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    50e0:	2405      	movs	r4, #5
    50e2:	e7ca      	b.n	507a <sd_mmc_init_write_blocks+0x12>
    50e4:	0000451d 	.word	0x0000451d
    50e8:	00004e99 	.word	0x00004e99
    50ec:	00109119 	.word	0x00109119
    50f0:	20000660 	.word	0x20000660
    50f4:	000010e1 	.word	0x000010e1
    50f8:	00004e09 	.word	0x00004e09
    50fc:	00089118 	.word	0x00089118
    5100:	00001085 	.word	0x00001085
    5104:	e4580000 	.word	0xe4580000

00005108 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    5108:	b570      	push	{r4, r5, r6, lr}
    510a:	4606      	mov	r6, r0
    510c:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    510e:	4d0d      	ldr	r5, [pc, #52]	; (5144 <sd_mmc_start_write_blocks+0x3c>)
    5110:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    5112:	f240 52fa 	movw	r2, #1530	; 0x5fa
    5116:	490c      	ldr	r1, [pc, #48]	; (5148 <sd_mmc_start_write_blocks+0x40>)
    5118:	42a0      	cmp	r0, r4
    511a:	bf34      	ite	cc
    511c:	2000      	movcc	r0, #0
    511e:	2001      	movcs	r0, #1
    5120:	4b0a      	ldr	r3, [pc, #40]	; (514c <sd_mmc_start_write_blocks+0x44>)
    5122:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    5124:	4622      	mov	r2, r4
    5126:	4631      	mov	r1, r6
    5128:	68a8      	ldr	r0, [r5, #8]
    512a:	4b09      	ldr	r3, [pc, #36]	; (5150 <sd_mmc_start_write_blocks+0x48>)
    512c:	4798      	blx	r3
    512e:	b918      	cbnz	r0, 5138 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    5130:	2200      	movs	r2, #0
    5132:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    5134:	2005      	movs	r0, #5
    5136:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    5138:	4a02      	ldr	r2, [pc, #8]	; (5144 <sd_mmc_start_write_blocks+0x3c>)
    513a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    513c:	1b1c      	subs	r4, r3, r4
    513e:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    5140:	2000      	movs	r0, #0
}
    5142:	bd70      	pop	{r4, r5, r6, pc}
    5144:	20000660 	.word	0x20000660
    5148:	00005920 	.word	0x00005920
    514c:	00001671 	.word	0x00001671
    5150:	0000115d 	.word	0x0000115d

00005154 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    5154:	b510      	push	{r4, lr}
    5156:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    5158:	4b14      	ldr	r3, [pc, #80]	; (51ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    515a:	6898      	ldr	r0, [r3, #8]
    515c:	4b14      	ldr	r3, [pc, #80]	; (51b0 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    515e:	4798      	blx	r3
    5160:	b908      	cbnz	r0, 5166 <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    5162:	2005      	movs	r0, #5
    5164:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    5166:	b194      	cbz	r4, 518e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    5168:	2200      	movs	r2, #0
    516a:	4b10      	ldr	r3, [pc, #64]	; (51ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    516c:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    516e:	4b0f      	ldr	r3, [pc, #60]	; (51ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    5170:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    5172:	2b01      	cmp	r3, #1
    5174:	d011      	beq.n	519a <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    5176:	2200      	movs	r2, #0
    5178:	f243 110c 	movw	r1, #12556	; 0x310c
    517c:	4b0b      	ldr	r3, [pc, #44]	; (51ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    517e:	6898      	ldr	r0, [r3, #8]
    5180:	4b0c      	ldr	r3, [pc, #48]	; (51b4 <sd_mmc_wait_end_of_write_blocks+0x60>)
    5182:	4798      	blx	r3
    5184:	b968      	cbnz	r0, 51a2 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    5186:	4b0c      	ldr	r3, [pc, #48]	; (51b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    5188:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    518a:	2005      	movs	r0, #5
    518c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    518e:	4b07      	ldr	r3, [pc, #28]	; (51ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    5190:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5192:	2b00      	cmp	r3, #0
    5194:	d0eb      	beq.n	516e <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    5196:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    5198:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    519a:	4b07      	ldr	r3, [pc, #28]	; (51b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    519c:	4798      	blx	r3
		return SD_MMC_OK;
    519e:	2000      	movs	r0, #0
    51a0:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    51a2:	4b05      	ldr	r3, [pc, #20]	; (51b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    51a4:	4798      	blx	r3
	return SD_MMC_OK;
    51a6:	2000      	movs	r0, #0
    51a8:	bd10      	pop	{r4, pc}
    51aa:	bf00      	nop
    51ac:	20000660 	.word	0x20000660
    51b0:	000011bd 	.word	0x000011bd
    51b4:	00001055 	.word	0x00001055
    51b8:	00004e09 	.word	0x00004e09

000051bc <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    51bc:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    51be:	4903      	ldr	r1, [pc, #12]	; (51cc <sd_mmc_stack_init+0x10>)
    51c0:	460a      	mov	r2, r1
    51c2:	3104      	adds	r1, #4
    51c4:	4802      	ldr	r0, [pc, #8]	; (51d0 <sd_mmc_stack_init+0x14>)
    51c6:	4b03      	ldr	r3, [pc, #12]	; (51d4 <sd_mmc_stack_init+0x18>)
    51c8:	4798      	blx	r3
    51ca:	bd08      	pop	{r3, pc}
    51cc:	20000034 	.word	0x20000034
    51d0:	20000728 	.word	0x20000728
    51d4:	00004e25 	.word	0x00004e25

000051d8 <__aeabi_uldivmod>:
    51d8:	b953      	cbnz	r3, 51f0 <__aeabi_uldivmod+0x18>
    51da:	b94a      	cbnz	r2, 51f0 <__aeabi_uldivmod+0x18>
    51dc:	2900      	cmp	r1, #0
    51de:	bf08      	it	eq
    51e0:	2800      	cmpeq	r0, #0
    51e2:	bf1c      	itt	ne
    51e4:	f04f 31ff 	movne.w	r1, #4294967295
    51e8:	f04f 30ff 	movne.w	r0, #4294967295
    51ec:	f000 b97a 	b.w	54e4 <__aeabi_idiv0>
    51f0:	f1ad 0c08 	sub.w	ip, sp, #8
    51f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    51f8:	f000 f806 	bl	5208 <__udivmoddi4>
    51fc:	f8dd e004 	ldr.w	lr, [sp, #4]
    5200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5204:	b004      	add	sp, #16
    5206:	4770      	bx	lr

00005208 <__udivmoddi4>:
    5208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    520c:	468c      	mov	ip, r1
    520e:	460d      	mov	r5, r1
    5210:	4604      	mov	r4, r0
    5212:	9e08      	ldr	r6, [sp, #32]
    5214:	2b00      	cmp	r3, #0
    5216:	d151      	bne.n	52bc <__udivmoddi4+0xb4>
    5218:	428a      	cmp	r2, r1
    521a:	4617      	mov	r7, r2
    521c:	d96d      	bls.n	52fa <__udivmoddi4+0xf2>
    521e:	fab2 fe82 	clz	lr, r2
    5222:	f1be 0f00 	cmp.w	lr, #0
    5226:	d00b      	beq.n	5240 <__udivmoddi4+0x38>
    5228:	f1ce 0c20 	rsb	ip, lr, #32
    522c:	fa01 f50e 	lsl.w	r5, r1, lr
    5230:	fa20 fc0c 	lsr.w	ip, r0, ip
    5234:	fa02 f70e 	lsl.w	r7, r2, lr
    5238:	ea4c 0c05 	orr.w	ip, ip, r5
    523c:	fa00 f40e 	lsl.w	r4, r0, lr
    5240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    5244:	0c25      	lsrs	r5, r4, #16
    5246:	fbbc f8fa 	udiv	r8, ip, sl
    524a:	fa1f f987 	uxth.w	r9, r7
    524e:	fb0a cc18 	mls	ip, sl, r8, ip
    5252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    5256:	fb08 f309 	mul.w	r3, r8, r9
    525a:	42ab      	cmp	r3, r5
    525c:	d90a      	bls.n	5274 <__udivmoddi4+0x6c>
    525e:	19ed      	adds	r5, r5, r7
    5260:	f108 32ff 	add.w	r2, r8, #4294967295
    5264:	f080 8123 	bcs.w	54ae <__udivmoddi4+0x2a6>
    5268:	42ab      	cmp	r3, r5
    526a:	f240 8120 	bls.w	54ae <__udivmoddi4+0x2a6>
    526e:	f1a8 0802 	sub.w	r8, r8, #2
    5272:	443d      	add	r5, r7
    5274:	1aed      	subs	r5, r5, r3
    5276:	b2a4      	uxth	r4, r4
    5278:	fbb5 f0fa 	udiv	r0, r5, sl
    527c:	fb0a 5510 	mls	r5, sl, r0, r5
    5280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    5284:	fb00 f909 	mul.w	r9, r0, r9
    5288:	45a1      	cmp	r9, r4
    528a:	d909      	bls.n	52a0 <__udivmoddi4+0x98>
    528c:	19e4      	adds	r4, r4, r7
    528e:	f100 33ff 	add.w	r3, r0, #4294967295
    5292:	f080 810a 	bcs.w	54aa <__udivmoddi4+0x2a2>
    5296:	45a1      	cmp	r9, r4
    5298:	f240 8107 	bls.w	54aa <__udivmoddi4+0x2a2>
    529c:	3802      	subs	r0, #2
    529e:	443c      	add	r4, r7
    52a0:	eba4 0409 	sub.w	r4, r4, r9
    52a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    52a8:	2100      	movs	r1, #0
    52aa:	2e00      	cmp	r6, #0
    52ac:	d061      	beq.n	5372 <__udivmoddi4+0x16a>
    52ae:	fa24 f40e 	lsr.w	r4, r4, lr
    52b2:	2300      	movs	r3, #0
    52b4:	6034      	str	r4, [r6, #0]
    52b6:	6073      	str	r3, [r6, #4]
    52b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52bc:	428b      	cmp	r3, r1
    52be:	d907      	bls.n	52d0 <__udivmoddi4+0xc8>
    52c0:	2e00      	cmp	r6, #0
    52c2:	d054      	beq.n	536e <__udivmoddi4+0x166>
    52c4:	2100      	movs	r1, #0
    52c6:	e886 0021 	stmia.w	r6, {r0, r5}
    52ca:	4608      	mov	r0, r1
    52cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52d0:	fab3 f183 	clz	r1, r3
    52d4:	2900      	cmp	r1, #0
    52d6:	f040 808e 	bne.w	53f6 <__udivmoddi4+0x1ee>
    52da:	42ab      	cmp	r3, r5
    52dc:	d302      	bcc.n	52e4 <__udivmoddi4+0xdc>
    52de:	4282      	cmp	r2, r0
    52e0:	f200 80fa 	bhi.w	54d8 <__udivmoddi4+0x2d0>
    52e4:	1a84      	subs	r4, r0, r2
    52e6:	eb65 0503 	sbc.w	r5, r5, r3
    52ea:	2001      	movs	r0, #1
    52ec:	46ac      	mov	ip, r5
    52ee:	2e00      	cmp	r6, #0
    52f0:	d03f      	beq.n	5372 <__udivmoddi4+0x16a>
    52f2:	e886 1010 	stmia.w	r6, {r4, ip}
    52f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52fa:	b912      	cbnz	r2, 5302 <__udivmoddi4+0xfa>
    52fc:	2701      	movs	r7, #1
    52fe:	fbb7 f7f2 	udiv	r7, r7, r2
    5302:	fab7 fe87 	clz	lr, r7
    5306:	f1be 0f00 	cmp.w	lr, #0
    530a:	d134      	bne.n	5376 <__udivmoddi4+0x16e>
    530c:	1beb      	subs	r3, r5, r7
    530e:	0c3a      	lsrs	r2, r7, #16
    5310:	fa1f fc87 	uxth.w	ip, r7
    5314:	2101      	movs	r1, #1
    5316:	fbb3 f8f2 	udiv	r8, r3, r2
    531a:	0c25      	lsrs	r5, r4, #16
    531c:	fb02 3318 	mls	r3, r2, r8, r3
    5320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5324:	fb0c f308 	mul.w	r3, ip, r8
    5328:	42ab      	cmp	r3, r5
    532a:	d907      	bls.n	533c <__udivmoddi4+0x134>
    532c:	19ed      	adds	r5, r5, r7
    532e:	f108 30ff 	add.w	r0, r8, #4294967295
    5332:	d202      	bcs.n	533a <__udivmoddi4+0x132>
    5334:	42ab      	cmp	r3, r5
    5336:	f200 80d1 	bhi.w	54dc <__udivmoddi4+0x2d4>
    533a:	4680      	mov	r8, r0
    533c:	1aed      	subs	r5, r5, r3
    533e:	b2a3      	uxth	r3, r4
    5340:	fbb5 f0f2 	udiv	r0, r5, r2
    5344:	fb02 5510 	mls	r5, r2, r0, r5
    5348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    534c:	fb0c fc00 	mul.w	ip, ip, r0
    5350:	45a4      	cmp	ip, r4
    5352:	d907      	bls.n	5364 <__udivmoddi4+0x15c>
    5354:	19e4      	adds	r4, r4, r7
    5356:	f100 33ff 	add.w	r3, r0, #4294967295
    535a:	d202      	bcs.n	5362 <__udivmoddi4+0x15a>
    535c:	45a4      	cmp	ip, r4
    535e:	f200 80b8 	bhi.w	54d2 <__udivmoddi4+0x2ca>
    5362:	4618      	mov	r0, r3
    5364:	eba4 040c 	sub.w	r4, r4, ip
    5368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    536c:	e79d      	b.n	52aa <__udivmoddi4+0xa2>
    536e:	4631      	mov	r1, r6
    5370:	4630      	mov	r0, r6
    5372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5376:	f1ce 0420 	rsb	r4, lr, #32
    537a:	fa05 f30e 	lsl.w	r3, r5, lr
    537e:	fa07 f70e 	lsl.w	r7, r7, lr
    5382:	fa20 f804 	lsr.w	r8, r0, r4
    5386:	0c3a      	lsrs	r2, r7, #16
    5388:	fa25 f404 	lsr.w	r4, r5, r4
    538c:	ea48 0803 	orr.w	r8, r8, r3
    5390:	fbb4 f1f2 	udiv	r1, r4, r2
    5394:	ea4f 4518 	mov.w	r5, r8, lsr #16
    5398:	fb02 4411 	mls	r4, r2, r1, r4
    539c:	fa1f fc87 	uxth.w	ip, r7
    53a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    53a4:	fb01 f30c 	mul.w	r3, r1, ip
    53a8:	42ab      	cmp	r3, r5
    53aa:	fa00 f40e 	lsl.w	r4, r0, lr
    53ae:	d909      	bls.n	53c4 <__udivmoddi4+0x1bc>
    53b0:	19ed      	adds	r5, r5, r7
    53b2:	f101 30ff 	add.w	r0, r1, #4294967295
    53b6:	f080 808a 	bcs.w	54ce <__udivmoddi4+0x2c6>
    53ba:	42ab      	cmp	r3, r5
    53bc:	f240 8087 	bls.w	54ce <__udivmoddi4+0x2c6>
    53c0:	3902      	subs	r1, #2
    53c2:	443d      	add	r5, r7
    53c4:	1aeb      	subs	r3, r5, r3
    53c6:	fa1f f588 	uxth.w	r5, r8
    53ca:	fbb3 f0f2 	udiv	r0, r3, r2
    53ce:	fb02 3310 	mls	r3, r2, r0, r3
    53d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    53d6:	fb00 f30c 	mul.w	r3, r0, ip
    53da:	42ab      	cmp	r3, r5
    53dc:	d907      	bls.n	53ee <__udivmoddi4+0x1e6>
    53de:	19ed      	adds	r5, r5, r7
    53e0:	f100 38ff 	add.w	r8, r0, #4294967295
    53e4:	d26f      	bcs.n	54c6 <__udivmoddi4+0x2be>
    53e6:	42ab      	cmp	r3, r5
    53e8:	d96d      	bls.n	54c6 <__udivmoddi4+0x2be>
    53ea:	3802      	subs	r0, #2
    53ec:	443d      	add	r5, r7
    53ee:	1aeb      	subs	r3, r5, r3
    53f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    53f4:	e78f      	b.n	5316 <__udivmoddi4+0x10e>
    53f6:	f1c1 0720 	rsb	r7, r1, #32
    53fa:	fa22 f807 	lsr.w	r8, r2, r7
    53fe:	408b      	lsls	r3, r1
    5400:	fa05 f401 	lsl.w	r4, r5, r1
    5404:	ea48 0303 	orr.w	r3, r8, r3
    5408:	fa20 fe07 	lsr.w	lr, r0, r7
    540c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5410:	40fd      	lsrs	r5, r7
    5412:	ea4e 0e04 	orr.w	lr, lr, r4
    5416:	fbb5 f9fc 	udiv	r9, r5, ip
    541a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    541e:	fb0c 5519 	mls	r5, ip, r9, r5
    5422:	fa1f f883 	uxth.w	r8, r3
    5426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    542a:	fb09 f408 	mul.w	r4, r9, r8
    542e:	42ac      	cmp	r4, r5
    5430:	fa02 f201 	lsl.w	r2, r2, r1
    5434:	fa00 fa01 	lsl.w	sl, r0, r1
    5438:	d908      	bls.n	544c <__udivmoddi4+0x244>
    543a:	18ed      	adds	r5, r5, r3
    543c:	f109 30ff 	add.w	r0, r9, #4294967295
    5440:	d243      	bcs.n	54ca <__udivmoddi4+0x2c2>
    5442:	42ac      	cmp	r4, r5
    5444:	d941      	bls.n	54ca <__udivmoddi4+0x2c2>
    5446:	f1a9 0902 	sub.w	r9, r9, #2
    544a:	441d      	add	r5, r3
    544c:	1b2d      	subs	r5, r5, r4
    544e:	fa1f fe8e 	uxth.w	lr, lr
    5452:	fbb5 f0fc 	udiv	r0, r5, ip
    5456:	fb0c 5510 	mls	r5, ip, r0, r5
    545a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    545e:	fb00 f808 	mul.w	r8, r0, r8
    5462:	45a0      	cmp	r8, r4
    5464:	d907      	bls.n	5476 <__udivmoddi4+0x26e>
    5466:	18e4      	adds	r4, r4, r3
    5468:	f100 35ff 	add.w	r5, r0, #4294967295
    546c:	d229      	bcs.n	54c2 <__udivmoddi4+0x2ba>
    546e:	45a0      	cmp	r8, r4
    5470:	d927      	bls.n	54c2 <__udivmoddi4+0x2ba>
    5472:	3802      	subs	r0, #2
    5474:	441c      	add	r4, r3
    5476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    547a:	eba4 0408 	sub.w	r4, r4, r8
    547e:	fba0 8902 	umull	r8, r9, r0, r2
    5482:	454c      	cmp	r4, r9
    5484:	46c6      	mov	lr, r8
    5486:	464d      	mov	r5, r9
    5488:	d315      	bcc.n	54b6 <__udivmoddi4+0x2ae>
    548a:	d012      	beq.n	54b2 <__udivmoddi4+0x2aa>
    548c:	b156      	cbz	r6, 54a4 <__udivmoddi4+0x29c>
    548e:	ebba 030e 	subs.w	r3, sl, lr
    5492:	eb64 0405 	sbc.w	r4, r4, r5
    5496:	fa04 f707 	lsl.w	r7, r4, r7
    549a:	40cb      	lsrs	r3, r1
    549c:	431f      	orrs	r7, r3
    549e:	40cc      	lsrs	r4, r1
    54a0:	6037      	str	r7, [r6, #0]
    54a2:	6074      	str	r4, [r6, #4]
    54a4:	2100      	movs	r1, #0
    54a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54aa:	4618      	mov	r0, r3
    54ac:	e6f8      	b.n	52a0 <__udivmoddi4+0x98>
    54ae:	4690      	mov	r8, r2
    54b0:	e6e0      	b.n	5274 <__udivmoddi4+0x6c>
    54b2:	45c2      	cmp	sl, r8
    54b4:	d2ea      	bcs.n	548c <__udivmoddi4+0x284>
    54b6:	ebb8 0e02 	subs.w	lr, r8, r2
    54ba:	eb69 0503 	sbc.w	r5, r9, r3
    54be:	3801      	subs	r0, #1
    54c0:	e7e4      	b.n	548c <__udivmoddi4+0x284>
    54c2:	4628      	mov	r0, r5
    54c4:	e7d7      	b.n	5476 <__udivmoddi4+0x26e>
    54c6:	4640      	mov	r0, r8
    54c8:	e791      	b.n	53ee <__udivmoddi4+0x1e6>
    54ca:	4681      	mov	r9, r0
    54cc:	e7be      	b.n	544c <__udivmoddi4+0x244>
    54ce:	4601      	mov	r1, r0
    54d0:	e778      	b.n	53c4 <__udivmoddi4+0x1bc>
    54d2:	3802      	subs	r0, #2
    54d4:	443c      	add	r4, r7
    54d6:	e745      	b.n	5364 <__udivmoddi4+0x15c>
    54d8:	4608      	mov	r0, r1
    54da:	e708      	b.n	52ee <__udivmoddi4+0xe6>
    54dc:	f1a8 0802 	sub.w	r8, r8, #2
    54e0:	443d      	add	r5, r7
    54e2:	e72b      	b.n	533c <__udivmoddi4+0x134>

000054e4 <__aeabi_idiv0>:
    54e4:	4770      	bx	lr
    54e6:	bf00      	nop

000054e8 <__libc_init_array>:
    54e8:	b570      	push	{r4, r5, r6, lr}
    54ea:	4e0d      	ldr	r6, [pc, #52]	; (5520 <__libc_init_array+0x38>)
    54ec:	4c0d      	ldr	r4, [pc, #52]	; (5524 <__libc_init_array+0x3c>)
    54ee:	1ba4      	subs	r4, r4, r6
    54f0:	10a4      	asrs	r4, r4, #2
    54f2:	2500      	movs	r5, #0
    54f4:	42a5      	cmp	r5, r4
    54f6:	d109      	bne.n	550c <__libc_init_array+0x24>
    54f8:	4e0b      	ldr	r6, [pc, #44]	; (5528 <__libc_init_array+0x40>)
    54fa:	4c0c      	ldr	r4, [pc, #48]	; (552c <__libc_init_array+0x44>)
    54fc:	f000 fa1a 	bl	5934 <_init>
    5500:	1ba4      	subs	r4, r4, r6
    5502:	10a4      	asrs	r4, r4, #2
    5504:	2500      	movs	r5, #0
    5506:	42a5      	cmp	r5, r4
    5508:	d105      	bne.n	5516 <__libc_init_array+0x2e>
    550a:	bd70      	pop	{r4, r5, r6, pc}
    550c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5510:	4798      	blx	r3
    5512:	3501      	adds	r5, #1
    5514:	e7ee      	b.n	54f4 <__libc_init_array+0xc>
    5516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    551a:	4798      	blx	r3
    551c:	3501      	adds	r5, #1
    551e:	e7f2      	b.n	5506 <__libc_init_array+0x1e>
    5520:	00005940 	.word	0x00005940
    5524:	00005940 	.word	0x00005940
    5528:	00005940 	.word	0x00005940
    552c:	00005944 	.word	0x00005944

00005530 <memset>:
    5530:	4402      	add	r2, r0
    5532:	4603      	mov	r3, r0
    5534:	4293      	cmp	r3, r2
    5536:	d100      	bne.n	553a <memset+0xa>
    5538:	4770      	bx	lr
    553a:	f803 1b01 	strb.w	r1, [r3], #1
    553e:	e7f9      	b.n	5534 <memset+0x4>
    5540:	682f2e2e 	.word	0x682f2e2e
    5544:	732f6c61 	.word	0x732f6c61
    5548:	682f6372 	.word	0x682f6372
    554c:	615f6c61 	.word	0x615f6c61
    5550:	735f6364 	.word	0x735f6364
    5554:	2e636e79 	.word	0x2e636e79
    5558:	00000063 	.word	0x00000063
    555c:	682f2e2e 	.word	0x682f2e2e
    5560:	732f6c61 	.word	0x732f6c61
    5564:	682f6372 	.word	0x682f6372
    5568:	635f6c61 	.word	0x635f6c61
    556c:	72656d61 	.word	0x72656d61
    5570:	73615f61 	.word	0x73615f61
    5574:	2e636e79 	.word	0x2e636e79
    5578:	00000063 	.word	0x00000063
    557c:	682f2e2e 	.word	0x682f2e2e
    5580:	732f6c61 	.word	0x732f6c61
    5584:	682f6372 	.word	0x682f6372
    5588:	6d5f6c61 	.word	0x6d5f6c61
    558c:	735f6963 	.word	0x735f6963
    5590:	2e636e79 	.word	0x2e636e79
    5594:	00000063 	.word	0x00000063
    5598:	682f2e2e 	.word	0x682f2e2e
    559c:	732f6c61 	.word	0x732f6c61
    55a0:	682f6372 	.word	0x682f6372
    55a4:	705f6c61 	.word	0x705f6c61
    55a8:	632e6d77 	.word	0x632e6d77
    55ac:	00000000 	.word	0x00000000
    55b0:	682f2e2e 	.word	0x682f2e2e
    55b4:	732f6c61 	.word	0x732f6c61
    55b8:	682f6372 	.word	0x682f6372
    55bc:	745f6c61 	.word	0x745f6c61
    55c0:	72656d69 	.word	0x72656d69
    55c4:	0000632e 	.word	0x0000632e
    55c8:	682f2e2e 	.word	0x682f2e2e
    55cc:	732f6c61 	.word	0x732f6c61
    55d0:	682f6372 	.word	0x682f6372
    55d4:	755f6c61 	.word	0x755f6c61
    55d8:	74726173 	.word	0x74726173
    55dc:	7973615f 	.word	0x7973615f
    55e0:	632e636e 	.word	0x632e636e
    55e4:	00000000 	.word	0x00000000
    55e8:	682f2e2e 	.word	0x682f2e2e
    55ec:	752f6c61 	.word	0x752f6c61
    55f0:	736c6974 	.word	0x736c6974
    55f4:	6372732f 	.word	0x6372732f
    55f8:	6974752f 	.word	0x6974752f
    55fc:	6c5f736c 	.word	0x6c5f736c
    5600:	2e747369 	.word	0x2e747369
    5604:	00000063 	.word	0x00000063
    5608:	682f2e2e 	.word	0x682f2e2e
    560c:	752f6c61 	.word	0x752f6c61
    5610:	736c6974 	.word	0x736c6974
    5614:	6372732f 	.word	0x6372732f
    5618:	6974752f 	.word	0x6974752f
    561c:	725f736c 	.word	0x725f736c
    5620:	62676e69 	.word	0x62676e69
    5624:	65666675 	.word	0x65666675
    5628:	00632e72 	.word	0x00632e72

0000562c <_adcs>:
    562c:	00000000 00000018 00001800 00000000     ................
	...
    5644:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    5654:	632e6364 00000000                       dc.c....

0000565c <_cfgs>:
    565c:	00205000 0a000000 00000000 00000000     .P .............
	...

0000575c <_map>:
    575c:	00000006 00000036 00000007 00000037     ....6.......7...
    576c:	00000009 00000019 0000000e 0000002e     ................
    577c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    578c:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    579c:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    57ac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    57bc:	43000000 43000400                       ...C...C

000057c4 <_usarts>:
    57c4:	00000005 40100004 00030000 00700002     .......@......p.
    57d4:	0000ff58 00000000                       X.......

000057dc <_i2cms>:
	...

000057f4 <_i2css>:
	...

00005804 <sercomspi_regs>:
	...
    5818:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5828:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    5838:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    5848:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    5858:	63745f6c 0000632e 682f2e2e 692f6c61     l_tc.c..../hal/i
    5868:	756c636e 682f6564 635f6c61 72656d61     nclude/hal_camer
    5878:	73615f61 2e636e79 00000068              a_async.h...

00005884 <sd_mmc_trans_units>:
    5884:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000058a0 <sd_trans_multipliers>:
    58a0:	00000000 0000000a 0000000c 0000000d     ................
    58b0:	0000000f 00000014 00000019 0000001e     ................
    58c0:	00000023 00000028 0000002d 00000032     #...(...-...2...
    58d0:	00000037 0000003c 00000046 00000050     7...<...F...P...

000058e0 <mmc_trans_multipliers>:
    58e0:	00000000 0000000a 0000000c 0000000d     ................
    58f0:	0000000f 00000014 0000001a 0000001e     ................
    5900:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5910:	00000037 0000003c 00000046 00000050     7...<...F...P...
    5920:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    5930:	0000632e                                .c..

00005934 <_init>:
    5934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5936:	bf00      	nop
    5938:	bcf8      	pop	{r3, r4, r5, r6, r7}
    593a:	bc08      	pop	{r3}
    593c:	469e      	mov	lr, r3
    593e:	4770      	bx	lr

00005940 <__init_array_start>:
    5940:	00000289 	.word	0x00000289

00005944 <_fini>:
    5944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5946:	bf00      	nop
    5948:	bcf8      	pop	{r3, r4, r5, r6, r7}
    594a:	bc08      	pop	{r3}
    594c:	469e      	mov	lr, r3
    594e:	4770      	bx	lr

00005950 <__fini_array_start>:
    5950:	00000265 	.word	0x00000265
