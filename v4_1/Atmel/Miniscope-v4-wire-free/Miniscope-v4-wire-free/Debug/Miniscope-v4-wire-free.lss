
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000030  20000000  00002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020030  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020030  2**0
                  CONTENTS
  4 .bss          00028b00  20000030  000026d0  00020030  2**4
                  ALLOC
  5 .stack        00010000  20028b30  0002b1d0  00020030  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003d6ab  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000054f0  00000000  00000000  0005d762  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001703b  00000000  00000000  00062c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001300  00000000  00000000  00079c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  0007af8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032811  00000000  00000000  0007c34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001dd02  00000000  00000000  000aeb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001001c3  00000000  00000000  000cc860  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000313c  00000000  00000000  001cca24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     0.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 d5 17 00 00     ................
      8c:	e1 17 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 ed 17 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 15 00 00 f1 15 00 00 fd 15 00 00 09 16 00 00     ................
      cc:	15 16 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	75 19 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     u...............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 05 21 00 00     .............!..
     1f0:	19 21 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .!..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 49 19 00 00 e5 02 00 00 e5 02 00 00     ....I...........
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	00002698 	.word	0x00002698

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002698 	.word	0x00002698
     2c4:	20000034 	.word	0x20000034
     2c8:	00002698 	.word	0x00002698
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009a1 	.word	0x000009a1
     2e0:	00002325 	.word	0x00002325

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	00002698 	.word	0x00002698
     348:	20000030 	.word	0x20000030
     34c:	20000030 	.word	0x20000030
     350:	20028b30 	.word	0x20028b30
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	00002341 	.word	0x00002341
     360:	00002299 	.word	0x00002299

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	000020bf 	.word	0x000020bf
     394:	40003c00 	.word	0x40003c00
     398:	200006b0 	.word	0x200006b0
     39c:	00000e91 	.word	0x00000e91

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	20000688 	.word	0x20000688
     41c:	00000c0d 	.word	0x00000c0d

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b32      	ldr	r3, [pc, #200]	; (4f0 <EXTERNAL_IRQ_0_init+0xd0>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a32      	ldr	r2, [pc, #200]	; (4f4 <EXTERNAL_IRQ_0_init+0xd4>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b30      	ldr	r3, [pc, #192]	; (4f8 <EXTERNAL_IRQ_0_init+0xd8>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	492f      	ldr	r1, [pc, #188]	; (4fc <EXTERNAL_IRQ_0_init+0xdc>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a2e      	ldr	r2, [pc, #184]	; (500 <EXTERNAL_IRQ_0_init+0xe0>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a21      	ldr	r2, [pc, #132]	; (504 <EXTERNAL_IRQ_0_init+0xe4>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b4:	4a14      	ldr	r2, [pc, #80]	; (508 <EXTERNAL_IRQ_0_init+0xe8>)
     4b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ba:	4a14      	ldr	r2, [pc, #80]	; (50c <EXTERNAL_IRQ_0_init+0xec>)
     4bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c0:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4c4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4cc:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4dc:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e4:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     4e8:	4b09      	ldr	r3, [pc, #36]	; (510 <EXTERNAL_IRQ_0_init+0xf0>)
     4ea:	4798      	blx	r3
     4ec:	bd08      	pop	{r3, pc}
     4ee:	bf00      	nop
     4f0:	40001c00 	.word	0x40001c00
     4f4:	40000800 	.word	0x40000800
     4f8:	41008000 	.word	0x41008000
     4fc:	40020000 	.word	0x40020000
     500:	c0020040 	.word	0xc0020040
     504:	c0020080 	.word	0xc0020080
     508:	40024000 	.word	0x40024000
     50c:	c0020000 	.word	0xc0020000
     510:	00000d19 	.word	0x00000d19

00000514 <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	4b58      	ldr	r3, [pc, #352]	; (678 <CAMERA_0_PORT_init+0x164>)
     516:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     51a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     522:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     526:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     52a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     52e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     532:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     536:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     53a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     53e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     546:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     54a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     54e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     576:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     57a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     586:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     58a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     596:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     59a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5aa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ae:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ce:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     5da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     602:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     606:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     60a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     60e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     612:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     636:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     63a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     63e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     646:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     64a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     64e:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     652:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     656:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     662:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     666:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     66a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     66e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     672:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     676:	4770      	bx	lr
     678:	41008000 	.word	0x41008000

0000067c <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     67c:	4a02      	ldr	r2, [pc, #8]	; (688 <CAMERA_0_CLOCK_init+0xc>)
     67e:	6a13      	ldr	r3, [r2, #32]
     680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     684:	6213      	str	r3, [r2, #32]
     686:	4770      	bx	lr
     688:	40000800 	.word	0x40000800

0000068c <CAMERA_0_init>:
{
     68c:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <CAMERA_0_init+0x14>)
     690:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     692:	4904      	ldr	r1, [pc, #16]	; (6a4 <CAMERA_0_init+0x18>)
     694:	4804      	ldr	r0, [pc, #16]	; (6a8 <CAMERA_0_init+0x1c>)
     696:	4b05      	ldr	r3, [pc, #20]	; (6ac <CAMERA_0_init+0x20>)
     698:	4798      	blx	r3
	CAMERA_0_PORT_init();
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <CAMERA_0_init+0x24>)
     69c:	4798      	blx	r3
     69e:	bd08      	pop	{r3, pc}
     6a0:	0000067d 	.word	0x0000067d
     6a4:	43002c00 	.word	0x43002c00
     6a8:	20000674 	.word	0x20000674
     6ac:	00000c65 	.word	0x00000c65
     6b0:	00000515 	.word	0x00000515

000006b4 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b4:	4b10      	ldr	r3, [pc, #64]	; (6f8 <USART_0_PORT_init+0x44>)
     6b6:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ce:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6d6:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     6da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6e2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6e6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6ea:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ee:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6f2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     6f6:	4770      	bx	lr
     6f8:	41008000 	.word	0x41008000

000006fc <USART_0_CLOCK_init>:
     6fc:	4b06      	ldr	r3, [pc, #24]	; (718 <USART_0_CLOCK_init+0x1c>)
     6fe:	2240      	movs	r2, #64	; 0x40
     700:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     704:	2243      	movs	r2, #67	; 0x43
     706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     70a:	4a04      	ldr	r2, [pc, #16]	; (71c <USART_0_CLOCK_init+0x20>)
     70c:	6a13      	ldr	r3, [r2, #32]
     70e:	f043 0302 	orr.w	r3, r3, #2
     712:	6213      	str	r3, [r2, #32]
     714:	4770      	bx	lr
     716:	bf00      	nop
     718:	40001c00 	.word	0x40001c00
     71c:	40000800 	.word	0x40000800

00000720 <USART_0_init>:
{
     720:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     722:	4b05      	ldr	r3, [pc, #20]	; (738 <USART_0_init+0x18>)
     724:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     726:	2200      	movs	r2, #0
     728:	4904      	ldr	r1, [pc, #16]	; (73c <USART_0_init+0x1c>)
     72a:	4805      	ldr	r0, [pc, #20]	; (740 <USART_0_init+0x20>)
     72c:	4b05      	ldr	r3, [pc, #20]	; (744 <USART_0_init+0x24>)
     72e:	4798      	blx	r3
	USART_0_PORT_init();
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <USART_0_init+0x28>)
     732:	4798      	blx	r3
     734:	bd08      	pop	{r3, pc}
     736:	bf00      	nop
     738:	000006fd 	.word	0x000006fd
     73c:	43000400 	.word	0x43000400
     740:	2000068c 	.word	0x2000068c
     744:	00001085 	.word	0x00001085
     748:	000006b5 	.word	0x000006b5

0000074c <IO_BUS_PORT_init>:
{
     74c:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     74e:	4b5b      	ldr	r3, [pc, #364]	; (8bc <IO_BUS_PORT_init+0x170>)
     750:	f44f 6500 	mov.w	r5, #2048	; 0x800
     754:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     758:	4e59      	ldr	r6, [pc, #356]	; (8c0 <IO_BUS_PORT_init+0x174>)
     75a:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     75e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     762:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     766:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     76a:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     76e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     772:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     776:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     77a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     77e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     782:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     786:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     78a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     78e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     792:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     796:	f44f 7180 	mov.w	r1, #256	; 0x100
     79a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4849      	ldr	r0, [pc, #292]	; (8c4 <IO_BUS_PORT_init+0x178>)
     79e:	6298      	str	r0, [r3, #40]	; 0x28
     7a0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a2:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7a4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7a8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7ac:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7b8:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7bc:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c0:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7c4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7c8:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7cc:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7d0:	f44f 7100 	mov.w	r1, #512	; 0x200
     7d4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7d6:	f500 7080 	add.w	r0, r0, #256	; 0x100
     7da:	6298      	str	r0, [r3, #40]	; 0x28
     7dc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7de:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e0:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     7e4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7e8:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ec:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f4:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f8:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fc:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     800:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     804:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     808:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     80c:	f44f 6080 	mov.w	r0, #1024	; 0x400
     810:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     812:	4c2d      	ldr	r4, [pc, #180]	; (8c8 <IO_BUS_PORT_init+0x17c>)
     814:	629c      	str	r4, [r3, #40]	; 0x28
     816:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     81e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     822:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     826:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     82a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     82e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     832:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     836:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     83a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     83e:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     842:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     846:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	629e      	str	r6, [r3, #40]	; 0x28
     84a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     84c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     84e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     852:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     856:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85a:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     85e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     862:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     866:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     86a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     86e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     872:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     876:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     87a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     87e:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     882:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     886:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     88a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     88e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     892:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     896:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     89a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     89e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8a2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8a6:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8ae:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8b2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8b6:	bc70      	pop	{r4, r5, r6}
     8b8:	4770      	bx	lr
     8ba:	bf00      	nop
     8bc:	41008000 	.word	0x41008000
     8c0:	40000800 	.word	0x40000800
     8c4:	40000100 	.word	0x40000100
     8c8:	40000400 	.word	0x40000400

000008cc <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     8cc:	4a05      	ldr	r2, [pc, #20]	; (8e4 <IO_BUS_CLOCK_init+0x18>)
     8ce:	6913      	ldr	r3, [r2, #16]
     8d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     8d4:	6113      	str	r3, [r2, #16]
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <IO_BUS_CLOCK_init+0x1c>)
     8d8:	2240      	movs	r2, #64	; 0x40
     8da:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     8e2:	4770      	bx	lr
     8e4:	40000800 	.word	0x40000800
     8e8:	40001c00 	.word	0x40001c00

000008ec <IO_BUS_init>:
{
     8ec:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     8ee:	4b05      	ldr	r3, [pc, #20]	; (904 <IO_BUS_init+0x18>)
     8f0:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     8f2:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     8f6:	4804      	ldr	r0, [pc, #16]	; (908 <IO_BUS_init+0x1c>)
     8f8:	4b04      	ldr	r3, [pc, #16]	; (90c <IO_BUS_init+0x20>)
     8fa:	4798      	blx	r3
	IO_BUS_PORT_init();
     8fc:	4b04      	ldr	r3, [pc, #16]	; (910 <IO_BUS_init+0x24>)
     8fe:	4798      	blx	r3
     900:	bd08      	pop	{r3, pc}
     902:	bf00      	nop
     904:	000008cd 	.word	0x000008cd
     908:	20000698 	.word	0x20000698
     90c:	00000d4d 	.word	0x00000d4d
     910:	0000074d 	.word	0x0000074d

00000914 <delay_driver_init>:
{
     914:	b508      	push	{r3, lr}
	delay_init(SysTick);
     916:	4802      	ldr	r0, [pc, #8]	; (920 <delay_driver_init+0xc>)
     918:	4b02      	ldr	r3, [pc, #8]	; (924 <delay_driver_init+0x10>)
     91a:	4798      	blx	r3
     91c:	bd08      	pop	{r3, pc}
     91e:	bf00      	nop
     920:	e000e010 	.word	0xe000e010
     924:	00000ca1 	.word	0x00000ca1

00000928 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     928:	4a08      	ldr	r2, [pc, #32]	; (94c <PWM_0_PORT_init+0x24>)
     92a:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     92e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     932:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     936:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     93a:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     93e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     942:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     946:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     94a:	4770      	bx	lr
     94c:	41008000 	.word	0x41008000

00000950 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     950:	4a04      	ldr	r2, [pc, #16]	; (964 <PWM_0_CLOCK_init+0x14>)
     952:	6953      	ldr	r3, [r2, #20]
     954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     958:	6153      	str	r3, [r2, #20]
     95a:	2240      	movs	r2, #64	; 0x40
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <PWM_0_CLOCK_init+0x18>)
     95e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     962:	4770      	bx	lr
     964:	40000800 	.word	0x40000800
     968:	40001c00 	.word	0x40001c00

0000096c <PWM_0_init>:
{
     96c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     96e:	4b06      	ldr	r3, [pc, #24]	; (988 <PWM_0_init+0x1c>)
     970:	4798      	blx	r3
	PWM_0_PORT_init();
     972:	4b06      	ldr	r3, [pc, #24]	; (98c <PWM_0_init+0x20>)
     974:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     976:	4b06      	ldr	r3, [pc, #24]	; (990 <PWM_0_init+0x24>)
     978:	4798      	blx	r3
     97a:	4602      	mov	r2, r0
     97c:	4905      	ldr	r1, [pc, #20]	; (994 <PWM_0_init+0x28>)
     97e:	4806      	ldr	r0, [pc, #24]	; (998 <PWM_0_init+0x2c>)
     980:	4b06      	ldr	r3, [pc, #24]	; (99c <PWM_0_init+0x30>)
     982:	4798      	blx	r3
     984:	bd08      	pop	{r3, pc}
     986:	bf00      	nop
     988:	00000951 	.word	0x00000951
     98c:	00000929 	.word	0x00000929
     990:	000020c3 	.word	0x000020c3
     994:	40003800 	.word	0x40003800
     998:	20000658 	.word	0x20000658
     99c:	00000d95 	.word	0x00000d95

000009a0 <system_init>:
}

void system_init(void)
{
     9a0:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9a2:	4b8b      	ldr	r3, [pc, #556]	; (bd0 <system_init+0x230>)
     9a4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9a6:	4b8b      	ldr	r3, [pc, #556]	; (bd4 <system_init+0x234>)
     9a8:	2210      	movs	r2, #16
     9aa:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ac:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9b2:	629a      	str	r2, [r3, #40]	; 0x28
     9b4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9b8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ba:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     9be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c2:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c6:	2520      	movs	r5, #32
     9c8:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9ca:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9cc:	4982      	ldr	r1, [pc, #520]	; (bd8 <system_init+0x238>)
     9ce:	6299      	str	r1, [r3, #40]	; 0x28
     9d0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9d2:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     9d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9da:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9de:	2140      	movs	r1, #64	; 0x40
     9e0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9e6:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     9ea:	6299      	str	r1, [r3, #40]	; 0x28
     9ec:	487b      	ldr	r0, [pc, #492]	; (bdc <system_init+0x23c>)
     9ee:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9f0:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     9f4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     9f8:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fc:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a00:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a04:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a08:	2180      	movs	r1, #128	; 0x80
     a0a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a0c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a10:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a14:	6299      	str	r1, [r3, #40]	; 0x28
     a16:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a18:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a1c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a20:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a24:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a28:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a2c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a34:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a36:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a38:	4c69      	ldr	r4, [pc, #420]	; (be0 <system_init+0x240>)
     a3a:	629c      	str	r4, [r3, #40]	; 0x28
     a3c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a3e:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a42:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a46:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a4a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a4e:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a50:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a52:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a56:	629e      	str	r6, [r3, #40]	; 0x28
     a58:	4e62      	ldr	r6, [pc, #392]	; (be4 <system_init+0x244>)
     a5a:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a5c:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     a60:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a64:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a68:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
     a6c:	605e      	str	r6, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a6e:	4e5e      	ldr	r6, [pc, #376]	; (be8 <system_init+0x248>)
     a70:	629e      	str	r6, [r3, #40]	; 0x28
     a72:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
     a76:	f506 7600 	add.w	r6, r6, #512	; 0x200
     a7a:	629e      	str	r6, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a7c:	f893 6059 	ldrb.w	r6, [r3, #89]	; 0x59
     a80:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
     a84:	f883 6059 	strb.w	r6, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a88:	f893 6059 	ldrb.w	r6, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     a8c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a90:	f883 6059 	strb.w	r6, [r3, #89]	; 0x59
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a94:	2601      	movs	r6, #1
     a96:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a9a:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aa2:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     aa6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aaa:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     aae:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab2:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab6:	2604      	movs	r6, #4
     ab8:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     abc:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ac0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     ac4:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ac8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     acc:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ad4:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ad8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     adc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     ae0:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     ae4:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     ae8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     aec:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     af0:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     af4:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af8:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     afc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b00:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b04:	f44f 7000 	mov.w	r0, #512	; 0x200
     b08:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b0c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b10:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b14:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b1c:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b20:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b24:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b2c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b30:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b34:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b38:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b40:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b44:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b48:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b50:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b54:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b58:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b5c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b64:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     b68:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6c:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b70:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b74:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     b78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b80:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     b84:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b88:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b8c:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b94:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b98:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b9c:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ba0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ba4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ba8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <system_init+0x24c>)
     bae:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bb0:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <system_init+0x250>)
     bb2:	4798      	blx	r3

	CAMERA_0_init();
     bb4:	4b0f      	ldr	r3, [pc, #60]	; (bf4 <system_init+0x254>)
     bb6:	4798      	blx	r3

	USART_0_init();
     bb8:	4b0f      	ldr	r3, [pc, #60]	; (bf8 <system_init+0x258>)
     bba:	4798      	blx	r3

	IO_BUS_init();
     bbc:	4b0f      	ldr	r3, [pc, #60]	; (bfc <system_init+0x25c>)
     bbe:	4798      	blx	r3

	delay_driver_init();
     bc0:	4b0f      	ldr	r3, [pc, #60]	; (c00 <system_init+0x260>)
     bc2:	4798      	blx	r3

	PWM_0_init();
     bc4:	4b0f      	ldr	r3, [pc, #60]	; (c04 <system_init+0x264>)
     bc6:	4798      	blx	r3

	TIMER_0_init();
     bc8:	4b0f      	ldr	r3, [pc, #60]	; (c08 <system_init+0x268>)
     bca:	4798      	blx	r3
     bcc:	bd70      	pop	{r4, r5, r6, pc}
     bce:	bf00      	nop
     bd0:	00001381 	.word	0x00001381
     bd4:	41008000 	.word	0x41008000
     bd8:	40000020 	.word	0x40000020
     bdc:	c0020000 	.word	0xc0020000
     be0:	40008000 	.word	0x40008000
     be4:	c0000100 	.word	0xc0000100
     be8:	40020000 	.word	0x40020000
     bec:	000003f5 	.word	0x000003f5
     bf0:	00000421 	.word	0x00000421
     bf4:	0000068d 	.word	0x0000068d
     bf8:	00000721 	.word	0x00000721
     bfc:	000008ed 	.word	0x000008ed
     c00:	00000915 	.word	0x00000915
     c04:	0000096d 	.word	0x0000096d
     c08:	00000365 	.word	0x00000365

00000c0c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c0c:	b538      	push	{r3, r4, r5, lr}
     c0e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c10:	4605      	mov	r5, r0
     c12:	b160      	cbz	r0, c2e <adc_sync_init+0x22>
     c14:	b149      	cbz	r1, c2a <adc_sync_init+0x1e>
     c16:	2001      	movs	r0, #1
     c18:	2239      	movs	r2, #57	; 0x39
     c1a:	4906      	ldr	r1, [pc, #24]	; (c34 <adc_sync_init+0x28>)
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <adc_sync_init+0x2c>)
     c1e:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c20:	4621      	mov	r1, r4
     c22:	4628      	mov	r0, r5
     c24:	4b05      	ldr	r3, [pc, #20]	; (c3c <adc_sync_init+0x30>)
     c26:	4798      	blx	r3
}
     c28:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c2a:	2000      	movs	r0, #0
     c2c:	e7f4      	b.n	c18 <adc_sync_init+0xc>
     c2e:	2000      	movs	r0, #0
     c30:	e7f2      	b.n	c18 <adc_sync_init+0xc>
     c32:	bf00      	nop
     c34:	00002388 	.word	0x00002388
     c38:	000010d1 	.word	0x000010d1
     c3c:	00001311 	.word	0x00001311

00000c40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     c44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     c46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     c48:	f3bf 8f5f 	dmb	sy
     c4c:	4770      	bx	lr

00000c4e <atomic_leave_critical>:
     c4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     c52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     c54:	f383 8810 	msr	PRIMASK, r3
     c58:	4770      	bx	lr

00000c5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     c5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     c5c:	6903      	ldr	r3, [r0, #16]
     c5e:	b103      	cbz	r3, c62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     c60:	4798      	blx	r3
     c62:	bd08      	pop	{r3, pc}

00000c64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     c64:	b538      	push	{r3, r4, r5, lr}
     c66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     c68:	4604      	mov	r4, r0
     c6a:	b178      	cbz	r0, c8c <camera_async_init+0x28>
     c6c:	b161      	cbz	r1, c88 <camera_async_init+0x24>
     c6e:	2001      	movs	r0, #1
     c70:	2232      	movs	r2, #50	; 0x32
     c72:	4907      	ldr	r1, [pc, #28]	; (c90 <camera_async_init+0x2c>)
     c74:	4b07      	ldr	r3, [pc, #28]	; (c94 <camera_async_init+0x30>)
     c76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     c78:	4629      	mov	r1, r5
     c7a:	4620      	mov	r0, r4
     c7c:	4b06      	ldr	r3, [pc, #24]	; (c98 <camera_async_init+0x34>)
     c7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     c80:	4b06      	ldr	r3, [pc, #24]	; (c9c <camera_async_init+0x38>)
     c82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     c84:	2000      	movs	r0, #0
     c86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c88:	2000      	movs	r0, #0
     c8a:	e7f1      	b.n	c70 <camera_async_init+0xc>
     c8c:	2000      	movs	r0, #0
     c8e:	e7ef      	b.n	c70 <camera_async_init+0xc>
     c90:	000023a4 	.word	0x000023a4
     c94:	000010d1 	.word	0x000010d1
     c98:	00001911 	.word	0x00001911
     c9c:	00000c5b 	.word	0x00000c5b

00000ca0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     ca0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     ca2:	4b02      	ldr	r3, [pc, #8]	; (cac <delay_init+0xc>)
     ca4:	6018      	str	r0, [r3, #0]
     ca6:	4b02      	ldr	r3, [pc, #8]	; (cb0 <delay_init+0x10>)
     ca8:	4798      	blx	r3
     caa:	bd08      	pop	{r3, pc}
     cac:	2000004c 	.word	0x2000004c
     cb0:	00001c11 	.word	0x00001c11

00000cb4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     cb4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     cb6:	4b04      	ldr	r3, [pc, #16]	; (cc8 <delay_us+0x14>)
     cb8:	681c      	ldr	r4, [r3, #0]
     cba:	4b04      	ldr	r3, [pc, #16]	; (ccc <delay_us+0x18>)
     cbc:	4798      	blx	r3
     cbe:	4601      	mov	r1, r0
     cc0:	4620      	mov	r0, r4
     cc2:	4b03      	ldr	r3, [pc, #12]	; (cd0 <delay_us+0x1c>)
     cc4:	4798      	blx	r3
     cc6:	bd10      	pop	{r4, pc}
     cc8:	2000004c 	.word	0x2000004c
     ccc:	00001365 	.word	0x00001365
     cd0:	00001c1d 	.word	0x00001c1d

00000cd4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     cd4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     cd6:	2503      	movs	r5, #3
     cd8:	2400      	movs	r4, #0

	while (upper >= lower) {
     cda:	e007      	b.n	cec <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     cdc:	4a0d      	ldr	r2, [pc, #52]	; (d14 <process_ext_irq+0x40>)
     cde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     ce2:	b1b3      	cbz	r3, d12 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     ce4:	4798      	blx	r3
     ce6:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     ce8:	3a01      	subs	r2, #1
     cea:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     cec:	42ac      	cmp	r4, r5
     cee:	d810      	bhi.n	d12 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     cf0:	192b      	adds	r3, r5, r4
     cf2:	105b      	asrs	r3, r3, #1
     cf4:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     cf6:	2a02      	cmp	r2, #2
     cf8:	d80b      	bhi.n	d12 <process_ext_irq+0x3e>
     cfa:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     cfc:	4905      	ldr	r1, [pc, #20]	; (d14 <process_ext_irq+0x40>)
     cfe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     d02:	6849      	ldr	r1, [r1, #4]
     d04:	4281      	cmp	r1, r0
     d06:	d0e9      	beq.n	cdc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     d08:	4281      	cmp	r1, r0
     d0a:	d2ed      	bcs.n	ce8 <process_ext_irq+0x14>
			lower = middle + 1;
     d0c:	3201      	adds	r2, #1
     d0e:	b2d4      	uxtb	r4, r2
     d10:	e7ec      	b.n	cec <process_ext_irq+0x18>
     d12:	bd38      	pop	{r3, r4, r5, pc}
     d14:	20000050 	.word	0x20000050

00000d18 <ext_irq_init>:
{
     d18:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d1a:	2300      	movs	r3, #0
     d1c:	e00a      	b.n	d34 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     d1e:	4a08      	ldr	r2, [pc, #32]	; (d40 <ext_irq_init+0x28>)
     d20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     d24:	f04f 30ff 	mov.w	r0, #4294967295
     d28:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     d2a:	2100      	movs	r1, #0
     d2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     d30:	3301      	adds	r3, #1
     d32:	b29b      	uxth	r3, r3
     d34:	2b02      	cmp	r3, #2
     d36:	d9f2      	bls.n	d1e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     d38:	4802      	ldr	r0, [pc, #8]	; (d44 <ext_irq_init+0x2c>)
     d3a:	4b03      	ldr	r3, [pc, #12]	; (d48 <ext_irq_init+0x30>)
     d3c:	4798      	blx	r3
}
     d3e:	bd08      	pop	{r3, pc}
     d40:	20000050 	.word	0x20000050
     d44:	00000cd5 	.word	0x00000cd5
     d48:	000016e5 	.word	0x000016e5

00000d4c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     d4c:	b538      	push	{r3, r4, r5, lr}
     d4e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     d50:	4605      	mov	r5, r0
     d52:	b160      	cbz	r0, d6e <mci_sync_init+0x22>
     d54:	b149      	cbz	r1, d6a <mci_sync_init+0x1e>
     d56:	2001      	movs	r0, #1
     d58:	2231      	movs	r2, #49	; 0x31
     d5a:	4906      	ldr	r1, [pc, #24]	; (d74 <mci_sync_init+0x28>)
     d5c:	4b06      	ldr	r3, [pc, #24]	; (d78 <mci_sync_init+0x2c>)
     d5e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     d60:	4621      	mov	r1, r4
     d62:	4628      	mov	r0, r5
     d64:	4b05      	ldr	r3, [pc, #20]	; (d7c <mci_sync_init+0x30>)
     d66:	4798      	blx	r3
}
     d68:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     d6a:	2000      	movs	r0, #0
     d6c:	e7f4      	b.n	d58 <mci_sync_init+0xc>
     d6e:	2000      	movs	r0, #0
     d70:	e7f2      	b.n	d58 <mci_sync_init+0xc>
     d72:	bf00      	nop
     d74:	000023c4 	.word	0x000023c4
     d78:	000010d1 	.word	0x000010d1
     d7c:	000019b9 	.word	0x000019b9

00000d80 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     d80:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     d82:	6943      	ldr	r3, [r0, #20]
     d84:	b103      	cbz	r3, d88 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     d86:	4798      	blx	r3
     d88:	bd08      	pop	{r3, pc}

00000d8a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     d8a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     d8c:	6983      	ldr	r3, [r0, #24]
     d8e:	b103      	cbz	r3, d92 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     d90:	4798      	blx	r3
     d92:	bd08      	pop	{r3, pc}

00000d94 <pwm_init>:
{
     d94:	b538      	push	{r3, r4, r5, lr}
     d96:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d98:	4604      	mov	r4, r0
     d9a:	b188      	cbz	r0, dc0 <pwm_init+0x2c>
     d9c:	b171      	cbz	r1, dbc <pwm_init+0x28>
     d9e:	2001      	movs	r0, #1
     da0:	2233      	movs	r2, #51	; 0x33
     da2:	4908      	ldr	r1, [pc, #32]	; (dc4 <pwm_init+0x30>)
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <pwm_init+0x34>)
     da6:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     da8:	4629      	mov	r1, r5
     daa:	4620      	mov	r0, r4
     dac:	4b07      	ldr	r3, [pc, #28]	; (dcc <pwm_init+0x38>)
     dae:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     db0:	4b07      	ldr	r3, [pc, #28]	; (dd0 <pwm_init+0x3c>)
     db2:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     db4:	4b07      	ldr	r3, [pc, #28]	; (dd4 <pwm_init+0x40>)
     db6:	6063      	str	r3, [r4, #4]
}
     db8:	2000      	movs	r0, #0
     dba:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     dbc:	2000      	movs	r0, #0
     dbe:	e7ef      	b.n	da0 <pwm_init+0xc>
     dc0:	2000      	movs	r0, #0
     dc2:	e7ed      	b.n	da0 <pwm_init+0xc>
     dc4:	000023e0 	.word	0x000023e0
     dc8:	000010d1 	.word	0x000010d1
     dcc:	00001f19 	.word	0x00001f19
     dd0:	00000d81 	.word	0x00000d81
     dd4:	00000d8b 	.word	0x00000d8b

00000dd8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     dda:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     ddc:	b117      	cbz	r7, de4 <timer_add_timer_task+0xc>
     dde:	463c      	mov	r4, r7
     de0:	2600      	movs	r6, #0
     de2:	e00b      	b.n	dfc <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     de4:	4b0e      	ldr	r3, [pc, #56]	; (e20 <timer_add_timer_task+0x48>)
     de6:	4798      	blx	r3
		return;
     de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     dea:	68a5      	ldr	r5, [r4, #8]
     dec:	442b      	add	r3, r5
     dee:	1a9b      	subs	r3, r3, r2
     df0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
     df2:	688d      	ldr	r5, [r1, #8]
     df4:	42ab      	cmp	r3, r5
     df6:	d209      	bcs.n	e0c <timer_add_timer_task+0x34>
			break;
		prev = it;
     df8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     dfa:	6824      	ldr	r4, [r4, #0]
     dfc:	b134      	cbz	r4, e0c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
     dfe:	6863      	ldr	r3, [r4, #4]
     e00:	4293      	cmp	r3, r2
     e02:	d8f2      	bhi.n	dea <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
     e04:	68a5      	ldr	r5, [r4, #8]
     e06:	1a9b      	subs	r3, r3, r2
     e08:	442b      	add	r3, r5
     e0a:	e7f2      	b.n	df2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
     e0c:	42bc      	cmp	r4, r7
     e0e:	d003      	beq.n	e18 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     e10:	4630      	mov	r0, r6
     e12:	4b04      	ldr	r3, [pc, #16]	; (e24 <timer_add_timer_task+0x4c>)
     e14:	4798      	blx	r3
     e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     e18:	4b01      	ldr	r3, [pc, #4]	; (e20 <timer_add_timer_task+0x48>)
     e1a:	4798      	blx	r3
     e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e1e:	bf00      	nop
     e20:	000010ed 	.word	0x000010ed
     e24:	00001119 	.word	0x00001119

00000e28 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e2a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     e2c:	6906      	ldr	r6, [r0, #16]
     e2e:	3601      	adds	r6, #1
     e30:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e32:	7e03      	ldrb	r3, [r0, #24]
     e34:	f013 0f01 	tst.w	r3, #1
     e38:	d105      	bne.n	e46 <timer_process_counted+0x1e>
     e3a:	7e03      	ldrb	r3, [r0, #24]
     e3c:	f013 0f02 	tst.w	r3, #2
     e40:	d101      	bne.n	e46 <timer_process_counted+0x1e>
     e42:	4605      	mov	r5, r0
     e44:	e009      	b.n	e5a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e46:	7e03      	ldrb	r3, [r0, #24]
     e48:	f043 0302 	orr.w	r3, r3, #2
     e4c:	7603      	strb	r3, [r0, #24]
		return;
     e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e50:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     e52:	68e3      	ldr	r3, [r4, #12]
     e54:	4620      	mov	r0, r4
     e56:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     e58:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     e5a:	b19c      	cbz	r4, e84 <timer_process_counted+0x5c>
     e5c:	6863      	ldr	r3, [r4, #4]
     e5e:	1af3      	subs	r3, r6, r3
     e60:	68a2      	ldr	r2, [r4, #8]
     e62:	4293      	cmp	r3, r2
     e64:	d30e      	bcc.n	e84 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
     e66:	f105 0714 	add.w	r7, r5, #20
     e6a:	4638      	mov	r0, r7
     e6c:	4b06      	ldr	r3, [pc, #24]	; (e88 <timer_process_counted+0x60>)
     e6e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     e70:	7c23      	ldrb	r3, [r4, #16]
     e72:	2b01      	cmp	r3, #1
     e74:	d1ec      	bne.n	e50 <timer_process_counted+0x28>
			tmp->time_label = time;
     e76:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     e78:	4632      	mov	r2, r6
     e7a:	4621      	mov	r1, r4
     e7c:	4638      	mov	r0, r7
     e7e:	4b03      	ldr	r3, [pc, #12]	; (e8c <timer_process_counted+0x64>)
     e80:	4798      	blx	r3
     e82:	e7e5      	b.n	e50 <timer_process_counted+0x28>
     e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e86:	bf00      	nop
     e88:	00001121 	.word	0x00001121
     e8c:	00000dd9 	.word	0x00000dd9

00000e90 <timer_init>:
{
     e90:	b538      	push	{r3, r4, r5, lr}
     e92:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     e94:	4604      	mov	r4, r0
     e96:	b180      	cbz	r0, eba <timer_init+0x2a>
     e98:	b169      	cbz	r1, eb6 <timer_init+0x26>
     e9a:	2001      	movs	r0, #1
     e9c:	223b      	movs	r2, #59	; 0x3b
     e9e:	4908      	ldr	r1, [pc, #32]	; (ec0 <timer_init+0x30>)
     ea0:	4b08      	ldr	r3, [pc, #32]	; (ec4 <timer_init+0x34>)
     ea2:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     ea4:	4629      	mov	r1, r5
     ea6:	4620      	mov	r0, r4
     ea8:	4b07      	ldr	r3, [pc, #28]	; (ec8 <timer_init+0x38>)
     eaa:	4798      	blx	r3
	descr->time                           = 0;
     eac:	2000      	movs	r0, #0
     eae:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <timer_init+0x3c>)
     eb2:	6023      	str	r3, [r4, #0]
}
     eb4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     eb6:	2000      	movs	r0, #0
     eb8:	e7f0      	b.n	e9c <timer_init+0xc>
     eba:	2000      	movs	r0, #0
     ebc:	e7ee      	b.n	e9c <timer_init+0xc>
     ebe:	bf00      	nop
     ec0:	000023f8 	.word	0x000023f8
     ec4:	000010d1 	.word	0x000010d1
     ec8:	00001d45 	.word	0x00001d45
     ecc:	00000e29 	.word	0x00000e29

00000ed0 <timer_start>:
{
     ed0:	b510      	push	{r4, lr}
	ASSERT(descr);
     ed2:	4604      	mov	r4, r0
     ed4:	2253      	movs	r2, #83	; 0x53
     ed6:	4909      	ldr	r1, [pc, #36]	; (efc <timer_start+0x2c>)
     ed8:	3000      	adds	r0, #0
     eda:	bf18      	it	ne
     edc:	2001      	movne	r0, #1
     ede:	4b08      	ldr	r3, [pc, #32]	; (f00 <timer_start+0x30>)
     ee0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     ee2:	4620      	mov	r0, r4
     ee4:	4b07      	ldr	r3, [pc, #28]	; (f04 <timer_start+0x34>)
     ee6:	4798      	blx	r3
     ee8:	b920      	cbnz	r0, ef4 <timer_start+0x24>
	_timer_start(&descr->device);
     eea:	4620      	mov	r0, r4
     eec:	4b06      	ldr	r3, [pc, #24]	; (f08 <timer_start+0x38>)
     eee:	4798      	blx	r3
	return ERR_NONE;
     ef0:	2000      	movs	r0, #0
     ef2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     ef4:	f06f 0010 	mvn.w	r0, #16
}
     ef8:	bd10      	pop	{r4, pc}
     efa:	bf00      	nop
     efc:	000023f8 	.word	0x000023f8
     f00:	000010d1 	.word	0x000010d1
     f04:	000020ad 	.word	0x000020ad
     f08:	00002099 	.word	0x00002099

00000f0c <timer_add_task>:
{
     f0c:	b570      	push	{r4, r5, r6, lr}
     f0e:	b082      	sub	sp, #8
     f10:	460d      	mov	r5, r1
	ASSERT(descr && task);
     f12:	4604      	mov	r4, r0
     f14:	b320      	cbz	r0, f60 <timer_add_task+0x54>
     f16:	b309      	cbz	r1, f5c <timer_add_task+0x50>
     f18:	2001      	movs	r0, #1
     f1a:	227a      	movs	r2, #122	; 0x7a
     f1c:	491f      	ldr	r1, [pc, #124]	; (f9c <timer_add_task+0x90>)
     f1e:	4b20      	ldr	r3, [pc, #128]	; (fa0 <timer_add_task+0x94>)
     f20:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     f22:	7e23      	ldrb	r3, [r4, #24]
     f24:	f043 0301 	orr.w	r3, r3, #1
     f28:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     f2a:	f104 0614 	add.w	r6, r4, #20
     f2e:	4629      	mov	r1, r5
     f30:	4630      	mov	r0, r6
     f32:	4b1c      	ldr	r3, [pc, #112]	; (fa4 <timer_add_task+0x98>)
     f34:	4798      	blx	r3
     f36:	b9a8      	cbnz	r0, f64 <timer_add_task+0x58>
	task->time_label = descr->time;
     f38:	6923      	ldr	r3, [r4, #16]
     f3a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     f3c:	6922      	ldr	r2, [r4, #16]
     f3e:	4629      	mov	r1, r5
     f40:	4630      	mov	r0, r6
     f42:	4b19      	ldr	r3, [pc, #100]	; (fa8 <timer_add_task+0x9c>)
     f44:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f46:	7e23      	ldrb	r3, [r4, #24]
     f48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f4c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     f4e:	7e23      	ldrb	r3, [r4, #24]
     f50:	f013 0f02 	tst.w	r3, #2
     f54:	d112      	bne.n	f7c <timer_add_task+0x70>
	return ERR_NONE;
     f56:	2000      	movs	r0, #0
}
     f58:	b002      	add	sp, #8
     f5a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     f5c:	2000      	movs	r0, #0
     f5e:	e7dc      	b.n	f1a <timer_add_task+0xe>
     f60:	2000      	movs	r0, #0
     f62:	e7da      	b.n	f1a <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     f64:	7e23      	ldrb	r3, [r4, #24]
     f66:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f6a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     f6c:	227f      	movs	r2, #127	; 0x7f
     f6e:	490b      	ldr	r1, [pc, #44]	; (f9c <timer_add_task+0x90>)
     f70:	2000      	movs	r0, #0
     f72:	4b0b      	ldr	r3, [pc, #44]	; (fa0 <timer_add_task+0x94>)
     f74:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     f76:	f06f 0011 	mvn.w	r0, #17
     f7a:	e7ed      	b.n	f58 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
     f7c:	a801      	add	r0, sp, #4
     f7e:	4b0b      	ldr	r3, [pc, #44]	; (fac <timer_add_task+0xa0>)
     f80:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     f82:	7e23      	ldrb	r3, [r4, #24]
     f84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     f88:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     f8a:	4620      	mov	r0, r4
     f8c:	4b08      	ldr	r3, [pc, #32]	; (fb0 <timer_add_task+0xa4>)
     f8e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     f90:	a801      	add	r0, sp, #4
     f92:	4b08      	ldr	r3, [pc, #32]	; (fb4 <timer_add_task+0xa8>)
     f94:	4798      	blx	r3
	return ERR_NONE;
     f96:	2000      	movs	r0, #0
     f98:	e7de      	b.n	f58 <timer_add_task+0x4c>
     f9a:	bf00      	nop
     f9c:	000023f8 	.word	0x000023f8
     fa0:	000010d1 	.word	0x000010d1
     fa4:	000010d7 	.word	0x000010d7
     fa8:	00000dd9 	.word	0x00000dd9
     fac:	00000c41 	.word	0x00000c41
     fb0:	000020c9 	.word	0x000020c9
     fb4:	00000c4f 	.word	0x00000c4f

00000fb8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fba:	460e      	mov	r6, r1
     fbc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     fbe:	4605      	mov	r5, r0
     fc0:	b308      	cbz	r0, 1006 <usart_sync_write+0x4e>
     fc2:	b311      	cbz	r1, 100a <usart_sync_write+0x52>
     fc4:	bb1a      	cbnz	r2, 100e <usart_sync_write+0x56>
     fc6:	2000      	movs	r0, #0
     fc8:	22f1      	movs	r2, #241	; 0xf1
     fca:	4912      	ldr	r1, [pc, #72]	; (1014 <usart_sync_write+0x5c>)
     fcc:	4b12      	ldr	r3, [pc, #72]	; (1018 <usart_sync_write+0x60>)
     fce:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     fd0:	f105 0408 	add.w	r4, r5, #8
     fd4:	4620      	mov	r0, r4
     fd6:	4b11      	ldr	r3, [pc, #68]	; (101c <usart_sync_write+0x64>)
     fd8:	4798      	blx	r3
     fda:	2800      	cmp	r0, #0
     fdc:	d0f8      	beq.n	fd0 <usart_sync_write+0x18>
     fde:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     fe0:	5d71      	ldrb	r1, [r6, r5]
     fe2:	4620      	mov	r0, r4
     fe4:	4b0e      	ldr	r3, [pc, #56]	; (1020 <usart_sync_write+0x68>)
     fe6:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     fe8:	4620      	mov	r0, r4
     fea:	4b0c      	ldr	r3, [pc, #48]	; (101c <usart_sync_write+0x64>)
     fec:	4798      	blx	r3
     fee:	2800      	cmp	r0, #0
     ff0:	d0fa      	beq.n	fe8 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     ff2:	3501      	adds	r5, #1
     ff4:	42bd      	cmp	r5, r7
     ff6:	d3f3      	bcc.n	fe0 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     ff8:	4620      	mov	r0, r4
     ffa:	4b0a      	ldr	r3, [pc, #40]	; (1024 <usart_sync_write+0x6c>)
     ffc:	4798      	blx	r3
     ffe:	2800      	cmp	r0, #0
    1000:	d0fa      	beq.n	ff8 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    1002:	4628      	mov	r0, r5
    1004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1006:	2000      	movs	r0, #0
    1008:	e7de      	b.n	fc8 <usart_sync_write+0x10>
    100a:	2000      	movs	r0, #0
    100c:	e7dc      	b.n	fc8 <usart_sync_write+0x10>
    100e:	2001      	movs	r0, #1
    1010:	e7da      	b.n	fc8 <usart_sync_write+0x10>
    1012:	bf00      	nop
    1014:	00002410 	.word	0x00002410
    1018:	000010d1 	.word	0x000010d1
    101c:	00001bdf 	.word	0x00001bdf
    1020:	00001bd1 	.word	0x00001bd1
    1024:	00001be9 	.word	0x00001be9

00001028 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    102c:	460f      	mov	r7, r1
    102e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1030:	4605      	mov	r5, r0
    1032:	b1c8      	cbz	r0, 1068 <usart_sync_read+0x40>
    1034:	b1d1      	cbz	r1, 106c <usart_sync_read+0x44>
    1036:	b9da      	cbnz	r2, 1070 <usart_sync_read+0x48>
    1038:	2000      	movs	r0, #0
    103a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    103e:	490d      	ldr	r1, [pc, #52]	; (1074 <usart_sync_read+0x4c>)
    1040:	4b0d      	ldr	r3, [pc, #52]	; (1078 <usart_sync_read+0x50>)
    1042:	4798      	blx	r3
	uint32_t                      offset = 0;
    1044:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1046:	f105 0408 	add.w	r4, r5, #8
    104a:	4620      	mov	r0, r4
    104c:	4b0b      	ldr	r3, [pc, #44]	; (107c <usart_sync_read+0x54>)
    104e:	4798      	blx	r3
    1050:	2800      	cmp	r0, #0
    1052:	d0f8      	beq.n	1046 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1054:	4620      	mov	r0, r4
    1056:	4b0a      	ldr	r3, [pc, #40]	; (1080 <usart_sync_read+0x58>)
    1058:	4798      	blx	r3
    105a:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    105c:	3601      	adds	r6, #1
    105e:	4546      	cmp	r6, r8
    1060:	d3f1      	bcc.n	1046 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    1062:	4630      	mov	r0, r6
    1064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    1068:	2000      	movs	r0, #0
    106a:	e7e6      	b.n	103a <usart_sync_read+0x12>
    106c:	2000      	movs	r0, #0
    106e:	e7e4      	b.n	103a <usart_sync_read+0x12>
    1070:	2001      	movs	r0, #1
    1072:	e7e2      	b.n	103a <usart_sync_read+0x12>
    1074:	00002410 	.word	0x00002410
    1078:	000010d1 	.word	0x000010d1
    107c:	00001bf3 	.word	0x00001bf3
    1080:	00001bd7 	.word	0x00001bd7

00001084 <usart_sync_init>:
{
    1084:	b538      	push	{r3, r4, r5, lr}
    1086:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1088:	4604      	mov	r4, r0
    108a:	b1a0      	cbz	r0, 10b6 <usart_sync_init+0x32>
    108c:	b189      	cbz	r1, 10b2 <usart_sync_init+0x2e>
    108e:	2001      	movs	r0, #1
    1090:	2234      	movs	r2, #52	; 0x34
    1092:	490a      	ldr	r1, [pc, #40]	; (10bc <usart_sync_init+0x38>)
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <usart_sync_init+0x3c>)
    1096:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1098:	4629      	mov	r1, r5
    109a:	f104 0008 	add.w	r0, r4, #8
    109e:	4b09      	ldr	r3, [pc, #36]	; (10c4 <usart_sync_init+0x40>)
    10a0:	4798      	blx	r3
	if (init_status) {
    10a2:	4603      	mov	r3, r0
    10a4:	b918      	cbnz	r0, 10ae <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    10a6:	4a08      	ldr	r2, [pc, #32]	; (10c8 <usart_sync_init+0x44>)
    10a8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    10aa:	4a08      	ldr	r2, [pc, #32]	; (10cc <usart_sync_init+0x48>)
    10ac:	6022      	str	r2, [r4, #0]
}
    10ae:	4618      	mov	r0, r3
    10b0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    10b2:	2000      	movs	r0, #0
    10b4:	e7ec      	b.n	1090 <usart_sync_init+0xc>
    10b6:	2000      	movs	r0, #0
    10b8:	e7ea      	b.n	1090 <usart_sync_init+0xc>
    10ba:	bf00      	nop
    10bc:	00002410 	.word	0x00002410
    10c0:	000010d1 	.word	0x000010d1
    10c4:	00001ba5 	.word	0x00001ba5
    10c8:	00001029 	.word	0x00001029
    10cc:	00000fb9 	.word	0x00000fb9

000010d0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    10d0:	b900      	cbnz	r0, 10d4 <assert+0x4>
		__asm("BKPT #0");
    10d2:	be00      	bkpt	0x0000
    10d4:	4770      	bx	lr

000010d6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    10d6:	6803      	ldr	r3, [r0, #0]
    10d8:	b11b      	cbz	r3, 10e2 <is_list_element+0xc>
		if (it == element) {
    10da:	428b      	cmp	r3, r1
    10dc:	d003      	beq.n	10e6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	e7fa      	b.n	10d8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    10e2:	2000      	movs	r0, #0
    10e4:	4770      	bx	lr
			return true;
    10e6:	2001      	movs	r0, #1
}
    10e8:	4770      	bx	lr
	...

000010ec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    10ec:	b538      	push	{r3, r4, r5, lr}
    10ee:	4604      	mov	r4, r0
    10f0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    10f2:	4b06      	ldr	r3, [pc, #24]	; (110c <list_insert_as_head+0x20>)
    10f4:	4798      	blx	r3
    10f6:	f080 0001 	eor.w	r0, r0, #1
    10fa:	2239      	movs	r2, #57	; 0x39
    10fc:	4904      	ldr	r1, [pc, #16]	; (1110 <list_insert_as_head+0x24>)
    10fe:	b2c0      	uxtb	r0, r0
    1100:	4b04      	ldr	r3, [pc, #16]	; (1114 <list_insert_as_head+0x28>)
    1102:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1104:	6823      	ldr	r3, [r4, #0]
    1106:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1108:	6025      	str	r5, [r4, #0]
    110a:	bd38      	pop	{r3, r4, r5, pc}
    110c:	000010d7 	.word	0x000010d7
    1110:	0000242c 	.word	0x0000242c
    1114:	000010d1 	.word	0x000010d1

00001118 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1118:	6803      	ldr	r3, [r0, #0]
    111a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    111c:	6001      	str	r1, [r0, #0]
    111e:	4770      	bx	lr

00001120 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1120:	6803      	ldr	r3, [r0, #0]
    1122:	b11b      	cbz	r3, 112c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1124:	681a      	ldr	r2, [r3, #0]
    1126:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1128:	4618      	mov	r0, r3
    112a:	4770      	bx	lr
	}

	return NULL;
    112c:	2000      	movs	r0, #0
}
    112e:	4770      	bx	lr

00001130 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1130:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1134:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    1138:	f3c0 2087 	ubfx	r0, r0, #10, #8
    113c:	4770      	bx	lr
	...

00001140 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1140:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    1142:	4b60      	ldr	r3, [pc, #384]	; (12c4 <_adc_init+0x184>)
    1144:	4298      	cmp	r0, r3
    1146:	f000 809c 	beq.w	1282 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    114a:	4b5f      	ldr	r3, [pc, #380]	; (12c8 <_adc_init+0x188>)
    114c:	4298      	cmp	r0, r3
    114e:	f000 80a8 	beq.w	12a2 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    1152:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1154:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1156:	f013 0f01 	tst.w	r3, #1
    115a:	d11b      	bne.n	1194 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    115c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    115e:	f013 0f03 	tst.w	r3, #3
    1162:	d1fb      	bne.n	115c <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1164:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1166:	f013 0f02 	tst.w	r3, #2
    116a:	d00d      	beq.n	1188 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    116c:	8803      	ldrh	r3, [r0, #0]
    116e:	b29b      	uxth	r3, r3
    1170:	f023 0302 	bic.w	r3, r3, #2
    1174:	b29b      	uxth	r3, r3
    1176:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1178:	6b03      	ldr	r3, [r0, #48]	; 0x30
    117a:	f013 0f03 	tst.w	r3, #3
    117e:	d1fb      	bne.n	1178 <_adc_init+0x38>
    1180:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1182:	f013 0f02 	tst.w	r3, #2
    1186:	d1fb      	bne.n	1180 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1188:	2301      	movs	r3, #1
    118a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    118c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    118e:	f013 0f03 	tst.w	r3, #3
    1192:	d1fb      	bne.n	118c <_adc_init+0x4c>
    1194:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1196:	f013 0f01 	tst.w	r3, #1
    119a:	d1fb      	bne.n	1194 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    119c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    11a0:	2316      	movs	r3, #22
    11a2:	4a4a      	ldr	r2, [pc, #296]	; (12cc <_adc_init+0x18c>)
    11a4:	fb03 2301 	mla	r3, r3, r1, r2
    11a8:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    11aa:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    11b2:	2b00      	cmp	r3, #0
    11b4:	d1fa      	bne.n	11ac <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    11b6:	2316      	movs	r3, #22
    11b8:	4a44      	ldr	r2, [pc, #272]	; (12cc <_adc_init+0x18c>)
    11ba:	fb03 2301 	mla	r3, r3, r1, r2
    11be:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    11c0:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    11c8:	2b00      	cmp	r3, #0
    11ca:	d1fa      	bne.n	11c2 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    11cc:	2316      	movs	r3, #22
    11ce:	4a3f      	ldr	r2, [pc, #252]	; (12cc <_adc_init+0x18c>)
    11d0:	fb03 2301 	mla	r3, r3, r1, r2
    11d4:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    11d6:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    11d8:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    11da:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    11e2:	2b00      	cmp	r3, #0
    11e4:	d1fa      	bne.n	11dc <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    11e6:	2316      	movs	r3, #22
    11e8:	4a38      	ldr	r2, [pc, #224]	; (12cc <_adc_init+0x18c>)
    11ea:	fb03 2301 	mla	r3, r3, r1, r2
    11ee:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    11f0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1fa      	bne.n	11f2 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    11fc:	2316      	movs	r3, #22
    11fe:	4a33      	ldr	r2, [pc, #204]	; (12cc <_adc_init+0x18c>)
    1200:	fb03 2301 	mla	r3, r3, r1, r2
    1204:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    1206:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1208:	6b03      	ldr	r3, [r0, #48]	; 0x30
    120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    120e:	2b00      	cmp	r3, #0
    1210:	d1fa      	bne.n	1208 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1212:	2316      	movs	r3, #22
    1214:	4a2d      	ldr	r2, [pc, #180]	; (12cc <_adc_init+0x18c>)
    1216:	fb03 2301 	mla	r3, r3, r1, r2
    121a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    121c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    121e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1220:	f013 0f80 	tst.w	r3, #128	; 0x80
    1224:	d1fb      	bne.n	121e <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1226:	2316      	movs	r3, #22
    1228:	4a28      	ldr	r2, [pc, #160]	; (12cc <_adc_init+0x18c>)
    122a:	fb03 2301 	mla	r3, r3, r1, r2
    122e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    1230:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1232:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1234:	f413 7f80 	tst.w	r3, #256	; 0x100
    1238:	d1fb      	bne.n	1232 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    123a:	2316      	movs	r3, #22
    123c:	4a23      	ldr	r2, [pc, #140]	; (12cc <_adc_init+0x18c>)
    123e:	fb03 2301 	mla	r3, r3, r1, r2
    1242:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    1244:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1246:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1248:	f413 7f00 	tst.w	r3, #512	; 0x200
    124c:	d1fb      	bne.n	1246 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    124e:	2316      	movs	r3, #22
    1250:	4a1e      	ldr	r2, [pc, #120]	; (12cc <_adc_init+0x18c>)
    1252:	fb03 2301 	mla	r3, r3, r1, r2
    1256:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1258:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    125a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    125c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1260:	d1fb      	bne.n	125a <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1262:	2216      	movs	r2, #22
    1264:	4b19      	ldr	r3, [pc, #100]	; (12cc <_adc_init+0x18c>)
    1266:	fb02 3101 	mla	r1, r2, r1, r3
    126a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    126c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    126e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1270:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1272:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1274:	f013 0f03 	tst.w	r3, #3
    1278:	d1fb      	bne.n	1272 <_adc_init+0x132>

	return ERR_NONE;
}
    127a:	2000      	movs	r0, #0
    127c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1280:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1282:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1286:	681b      	ldr	r3, [r3, #0]
    1288:	095a      	lsrs	r2, r3, #5
    128a:	0212      	lsls	r2, r2, #8
    128c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1290:	0a1c      	lsrs	r4, r3, #8
    1292:	0124      	lsls	r4, r4, #4
    1294:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1298:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    129a:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    129e:	431a      	orrs	r2, r3
    12a0:	e758      	b.n	1154 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    12a2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	0cda      	lsrs	r2, r3, #19
    12aa:	0212      	lsls	r2, r2, #8
    12ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    12b0:	0d9c      	lsrs	r4, r3, #22
    12b2:	0124      	lsls	r4, r4, #4
    12b4:	f004 0470 	and.w	r4, r4, #112	; 0x70
    12b8:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    12ba:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    12be:	431a      	orrs	r2, r3
    12c0:	e748      	b.n	1154 <_adc_init+0x14>
    12c2:	bf00      	nop
    12c4:	43001c00 	.word	0x43001c00
    12c8:	43002000 	.word	0x43002000
    12cc:	0000244c 	.word	0x0000244c

000012d0 <_adc_get_regs>:
{
    12d0:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    12d2:	4b0b      	ldr	r3, [pc, #44]	; (1300 <_adc_get_regs+0x30>)
    12d4:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    12d6:	2300      	movs	r3, #0
    12d8:	b13b      	cbz	r3, 12ea <_adc_get_regs+0x1a>
	ASSERT(false);
    12da:	2288      	movs	r2, #136	; 0x88
    12dc:	4909      	ldr	r1, [pc, #36]	; (1304 <_adc_get_regs+0x34>)
    12de:	2000      	movs	r0, #0
    12e0:	4b09      	ldr	r3, [pc, #36]	; (1308 <_adc_get_regs+0x38>)
    12e2:	4798      	blx	r3
	return 0;
    12e4:	2300      	movs	r3, #0
}
    12e6:	4618      	mov	r0, r3
    12e8:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    12ea:	2216      	movs	r2, #22
    12ec:	fb02 f203 	mul.w	r2, r2, r3
    12f0:	4906      	ldr	r1, [pc, #24]	; (130c <_adc_get_regs+0x3c>)
    12f2:	5c8a      	ldrb	r2, [r1, r2]
    12f4:	4290      	cmp	r0, r2
    12f6:	d0f6      	beq.n	12e6 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    12f8:	3301      	adds	r3, #1
    12fa:	b2db      	uxtb	r3, r3
    12fc:	e7ec      	b.n	12d8 <_adc_get_regs+0x8>
    12fe:	bf00      	nop
    1300:	00001131 	.word	0x00001131
    1304:	00002464 	.word	0x00002464
    1308:	000010d1 	.word	0x000010d1
    130c:	0000244c 	.word	0x0000244c

00001310 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1310:	b538      	push	{r3, r4, r5, lr}
    1312:	460c      	mov	r4, r1
	ASSERT(device);
    1314:	4605      	mov	r5, r0
    1316:	22d9      	movs	r2, #217	; 0xd9
    1318:	4907      	ldr	r1, [pc, #28]	; (1338 <_adc_sync_init+0x28>)
    131a:	3000      	adds	r0, #0
    131c:	bf18      	it	ne
    131e:	2001      	movne	r0, #1
    1320:	4b06      	ldr	r3, [pc, #24]	; (133c <_adc_sync_init+0x2c>)
    1322:	4798      	blx	r3

	device->hw = hw;
    1324:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1326:	4620      	mov	r0, r4
    1328:	4b05      	ldr	r3, [pc, #20]	; (1340 <_adc_sync_init+0x30>)
    132a:	4798      	blx	r3
    132c:	4601      	mov	r1, r0
    132e:	4620      	mov	r0, r4
    1330:	4b04      	ldr	r3, [pc, #16]	; (1344 <_adc_sync_init+0x34>)
    1332:	4798      	blx	r3
}
    1334:	bd38      	pop	{r3, r4, r5, pc}
    1336:	bf00      	nop
    1338:	00002464 	.word	0x00002464
    133c:	000010d1 	.word	0x000010d1
    1340:	000012d1 	.word	0x000012d1
    1344:	00001141 	.word	0x00001141

00001348 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1348:	0943      	lsrs	r3, r0, #5
    134a:	f000 001f 	and.w	r0, r0, #31
    134e:	2201      	movs	r2, #1
    1350:	fa02 f000 	lsl.w	r0, r2, r0
    1354:	3340      	adds	r3, #64	; 0x40
    1356:	4a02      	ldr	r2, [pc, #8]	; (1360 <_irq_set+0x18>)
    1358:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    135c:	4770      	bx	lr
    135e:	bf00      	nop
    1360:	e000e100 	.word	0xe000e100

00001364 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1364:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    1368:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
    136c:	3801      	subs	r0, #1
    136e:	4b03      	ldr	r3, [pc, #12]	; (137c <_get_cycles_for_us+0x18>)
    1370:	fba3 3000 	umull	r3, r0, r3, r0
    1374:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1376:	3001      	adds	r0, #1
    1378:	4770      	bx	lr
    137a:	bf00      	nop
    137c:	cccccccd 	.word	0xcccccccd

00001380 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1380:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1382:	4a0c      	ldr	r2, [pc, #48]	; (13b4 <_init_chip+0x34>)
    1384:	8813      	ldrh	r3, [r2, #0]
    1386:	b29b      	uxth	r3, r3
    1388:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    138a:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <_init_chip+0x38>)
    138c:	4798      	blx	r3
	_oscctrl_init_sources();
    138e:	4b0b      	ldr	r3, [pc, #44]	; (13bc <_init_chip+0x3c>)
    1390:	4798      	blx	r3
	_mclk_init();
    1392:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <_init_chip+0x40>)
    1394:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1396:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <_init_chip+0x44>)
    1398:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    139a:	f640 70ff 	movw	r0, #4095	; 0xfff
    139e:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <_init_chip+0x48>)
    13a0:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    13a2:	4a0a      	ldr	r2, [pc, #40]	; (13cc <_init_chip+0x4c>)
    13a4:	6913      	ldr	r3, [r2, #16]
    13a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    13aa:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    13ac:	4b08      	ldr	r3, [pc, #32]	; (13d0 <_init_chip+0x50>)
    13ae:	4798      	blx	r3
    13b0:	bd08      	pop	{r3, pc}
    13b2:	bf00      	nop
    13b4:	41004000 	.word	0x41004000
    13b8:	00001861 	.word	0x00001861
    13bc:	00001881 	.word	0x00001881
    13c0:	00001855 	.word	0x00001855
    13c4:	00001885 	.word	0x00001885
    13c8:	000017f9 	.word	0x000017f9
    13cc:	40000800 	.word	0x40000800
    13d0:	0000143d 	.word	0x0000143d

000013d4 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    13d4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    13d6:	4a17      	ldr	r2, [pc, #92]	; (1434 <_dmac_handler+0x60>)
    13d8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    13da:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    13de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    13e2:	0088      	lsls	r0, r1, #2
    13e4:	4914      	ldr	r1, [pc, #80]	; (1438 <_dmac_handler+0x64>)
    13e6:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    13e8:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    13ea:	f412 7f80 	tst.w	r2, #256	; 0x100
    13ee:	d105      	bne.n	13fc <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    13f0:	4a10      	ldr	r2, [pc, #64]	; (1434 <_dmac_handler+0x60>)
    13f2:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    13f4:	f412 7f00 	tst.w	r2, #512	; 0x200
    13f8:	d10b      	bne.n	1412 <_dmac_handler+0x3e>
    13fa:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    13fc:	011a      	lsls	r2, r3, #4
    13fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1402:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1406:	2101      	movs	r1, #1
    1408:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    140c:	6843      	ldr	r3, [r0, #4]
    140e:	4798      	blx	r3
    1410:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1412:	011a      	lsls	r2, r3, #4
    1414:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1418:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    141c:	2102      	movs	r1, #2
    141e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1426:	fa03 f201 	lsl.w	r2, r3, r1
    142a:	4b03      	ldr	r3, [pc, #12]	; (1438 <_dmac_handler+0x64>)
    142c:	589b      	ldr	r3, [r3, r2]
    142e:	4798      	blx	r3
	}
}
    1430:	e7e3      	b.n	13fa <_dmac_handler+0x26>
    1432:	bf00      	nop
    1434:	4100a000 	.word	0x4100a000
    1438:	20000068 	.word	0x20000068

0000143c <_dma_init>:
{
    143c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    143e:	4a3c      	ldr	r2, [pc, #240]	; (1530 <_dma_init+0xf4>)
    1440:	8813      	ldrh	r3, [r2, #0]
    1442:	b29b      	uxth	r3, r3
    1444:	f023 0302 	bic.w	r3, r3, #2
    1448:	b29b      	uxth	r3, r3
    144a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    144c:	8853      	ldrh	r3, [r2, #2]
    144e:	b29b      	uxth	r3, r3
    1450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1454:	b29b      	uxth	r3, r3
    1456:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1458:	8813      	ldrh	r3, [r2, #0]
    145a:	b29b      	uxth	r3, r3
    145c:	f043 0301 	orr.w	r3, r3, #1
    1460:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1462:	4b33      	ldr	r3, [pc, #204]	; (1530 <_dma_init+0xf4>)
    1464:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1466:	f013 0f01 	tst.w	r3, #1
    146a:	d1fa      	bne.n	1462 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    146c:	4a30      	ldr	r2, [pc, #192]	; (1530 <_dma_init+0xf4>)
    146e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1472:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1474:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1476:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    147a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    147c:	2300      	movs	r3, #0
    147e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1480:	492c      	ldr	r1, [pc, #176]	; (1534 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1482:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1484:	492c      	ldr	r1, [pc, #176]	; (1538 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1486:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1488:	e016      	b.n	14b8 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    148a:	4a2c      	ldr	r2, [pc, #176]	; (153c <_dma_init+0x100>)
    148c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1490:	4c27      	ldr	r4, [pc, #156]	; (1530 <_dma_init+0xf4>)
    1492:	1d19      	adds	r1, r3, #4
    1494:	0109      	lsls	r1, r1, #4
    1496:	1860      	adds	r0, r4, r1
    1498:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    149a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    149e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    14a0:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    14a2:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    14a4:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    14a6:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    14a8:	4922      	ldr	r1, [pc, #136]	; (1534 <_dma_init+0xf8>)
    14aa:	011a      	lsls	r2, r3, #4
    14ac:	1888      	adds	r0, r1, r2
    14ae:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    14b0:	2200      	movs	r2, #0
    14b2:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    14b4:	3301      	adds	r3, #1
    14b6:	b2db      	uxtb	r3, r3
    14b8:	2b1f      	cmp	r3, #31
    14ba:	d9e6      	bls.n	148a <_dma_init+0x4e>
    14bc:	2300      	movs	r3, #0
    14be:	e00a      	b.n	14d6 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    14c0:	f103 011f 	add.w	r1, r3, #31
    14c4:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    14c6:	2a00      	cmp	r2, #0
    14c8:	da10      	bge.n	14ec <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14ca:	2a00      	cmp	r2, #0
    14cc:	da1c      	bge.n	1508 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    14ce:	2a00      	cmp	r2, #0
    14d0:	da24      	bge.n	151c <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    14d2:	3301      	adds	r3, #1
    14d4:	b2db      	uxtb	r3, r3
    14d6:	2b04      	cmp	r3, #4
    14d8:	d9f2      	bls.n	14c0 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    14da:	4a15      	ldr	r2, [pc, #84]	; (1530 <_dma_init+0xf4>)
    14dc:	8813      	ldrh	r3, [r2, #0]
    14de:	b29b      	uxth	r3, r3
    14e0:	f043 0302 	orr.w	r3, r3, #2
    14e4:	8013      	strh	r3, [r2, #0]
}
    14e6:	2000      	movs	r0, #0
    14e8:	bc30      	pop	{r4, r5}
    14ea:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ec:	0950      	lsrs	r0, r2, #5
    14ee:	f001 051f 	and.w	r5, r1, #31
    14f2:	2401      	movs	r4, #1
    14f4:	40ac      	lsls	r4, r5
    14f6:	3020      	adds	r0, #32
    14f8:	4d11      	ldr	r5, [pc, #68]	; (1540 <_dma_init+0x104>)
    14fa:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    14fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1502:	f3bf 8f6f 	isb	sy
    1506:	e7e0      	b.n	14ca <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1508:	0950      	lsrs	r0, r2, #5
    150a:	f001 051f 	and.w	r5, r1, #31
    150e:	2401      	movs	r4, #1
    1510:	40ac      	lsls	r4, r5
    1512:	3060      	adds	r0, #96	; 0x60
    1514:	4d0a      	ldr	r5, [pc, #40]	; (1540 <_dma_init+0x104>)
    1516:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    151a:	e7d8      	b.n	14ce <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    151c:	0952      	lsrs	r2, r2, #5
    151e:	f001 011f 	and.w	r1, r1, #31
    1522:	2001      	movs	r0, #1
    1524:	fa00 f101 	lsl.w	r1, r0, r1
    1528:	4805      	ldr	r0, [pc, #20]	; (1540 <_dma_init+0x104>)
    152a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    152e:	e7d0      	b.n	14d2 <_dma_init+0x96>
    1530:	4100a000 	.word	0x4100a000
    1534:	200006d0 	.word	0x200006d0
    1538:	200008d0 	.word	0x200008d0
    153c:	0000247c 	.word	0x0000247c
    1540:	e000e100 	.word	0xe000e100

00001544 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1544:	4b02      	ldr	r3, [pc, #8]	; (1550 <_dma_set_destination_address+0xc>)
    1546:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    154a:	6081      	str	r1, [r0, #8]
}
    154c:	2000      	movs	r0, #0
    154e:	4770      	bx	lr
    1550:	200006d0 	.word	0x200006d0

00001554 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1554:	4b02      	ldr	r3, [pc, #8]	; (1560 <_dma_set_source_address+0xc>)
    1556:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    155a:	6041      	str	r1, [r0, #4]
}
    155c:	2000      	movs	r0, #0
    155e:	4770      	bx	lr
    1560:	200006d0 	.word	0x200006d0

00001564 <_dma_set_next_descriptor>:
	                                      (uint32_t)&_descriptor_section[next_channel]);
    1564:	4b03      	ldr	r3, [pc, #12]	; (1574 <_dma_set_next_descriptor+0x10>)
    1566:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    156a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    156e:	60c1      	str	r1, [r0, #12]
}
    1570:	2000      	movs	r0, #0
    1572:	4770      	bx	lr
    1574:	200006d0 	.word	0x200006d0

00001578 <_dma_set_data_amount>:
{
    1578:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    157a:	4c14      	ldr	r4, [pc, #80]	; (15cc <_dma_set_data_amount+0x54>)
    157c:	0102      	lsls	r2, r0, #4
    157e:	18a3      	adds	r3, r4, r2
    1580:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1582:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1584:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1588:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    158a:	f412 6f00 	tst.w	r2, #2048	; 0x800
    158e:	d006      	beq.n	159e <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1590:	fa01 f403 	lsl.w	r4, r1, r3
    1594:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1596:	4a0d      	ldr	r2, [pc, #52]	; (15cc <_dma_set_data_amount+0x54>)
    1598:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    159c:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    159e:	4c0b      	ldr	r4, [pc, #44]	; (15cc <_dma_set_data_amount+0x54>)
    15a0:	0102      	lsls	r2, r0, #4
    15a2:	18a5      	adds	r5, r4, r2
    15a4:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15a6:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    15a8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    15ac:	d005      	beq.n	15ba <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    15ae:	fa01 f303 	lsl.w	r3, r1, r3
    15b2:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    15b4:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    15b8:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    15ba:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    15bc:	4b03      	ldr	r3, [pc, #12]	; (15cc <_dma_set_data_amount+0x54>)
    15be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    15c2:	8041      	strh	r1, [r0, #2]
}
    15c4:	2000      	movs	r0, #0
    15c6:	bc30      	pop	{r4, r5}
    15c8:	4770      	bx	lr
    15ca:	bf00      	nop
    15cc:	200006d0 	.word	0x200006d0

000015d0 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    15d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15d4:	008a      	lsls	r2, r1, #2
    15d6:	4b02      	ldr	r3, [pc, #8]	; (15e0 <_dma_get_channel_resource+0x10>)
    15d8:	4413      	add	r3, r2
    15da:	6003      	str	r3, [r0, #0]
}
    15dc:	2000      	movs	r0, #0
    15de:	4770      	bx	lr
    15e0:	20000068 	.word	0x20000068

000015e4 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    15e4:	b508      	push	{r3, lr}
	_dmac_handler();
    15e6:	4b01      	ldr	r3, [pc, #4]	; (15ec <DMAC_0_Handler+0x8>)
    15e8:	4798      	blx	r3
    15ea:	bd08      	pop	{r3, pc}
    15ec:	000013d5 	.word	0x000013d5

000015f0 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    15f0:	b508      	push	{r3, lr}
	_dmac_handler();
    15f2:	4b01      	ldr	r3, [pc, #4]	; (15f8 <DMAC_1_Handler+0x8>)
    15f4:	4798      	blx	r3
    15f6:	bd08      	pop	{r3, pc}
    15f8:	000013d5 	.word	0x000013d5

000015fc <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    15fc:	b508      	push	{r3, lr}
	_dmac_handler();
    15fe:	4b01      	ldr	r3, [pc, #4]	; (1604 <DMAC_2_Handler+0x8>)
    1600:	4798      	blx	r3
    1602:	bd08      	pop	{r3, pc}
    1604:	000013d5 	.word	0x000013d5

00001608 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1608:	b508      	push	{r3, lr}
	_dmac_handler();
    160a:	4b01      	ldr	r3, [pc, #4]	; (1610 <DMAC_3_Handler+0x8>)
    160c:	4798      	blx	r3
    160e:	bd08      	pop	{r3, pc}
    1610:	000013d5 	.word	0x000013d5

00001614 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1614:	b508      	push	{r3, lr}
	_dmac_handler();
    1616:	4b01      	ldr	r3, [pc, #4]	; (161c <DMAC_4_Handler+0x8>)
    1618:	4798      	blx	r3
    161a:	bd08      	pop	{r3, pc}
    161c:	000013d5 	.word	0x000013d5

00001620 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1620:	b570      	push	{r4, r5, r6, lr}
    1622:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1624:	4b2a      	ldr	r3, [pc, #168]	; (16d0 <_ext_irq_handler+0xb0>)
    1626:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1628:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    162a:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    162c:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    162e:	4b29      	ldr	r3, [pc, #164]	; (16d4 <_ext_irq_handler+0xb4>)
    1630:	6818      	ldr	r0, [r3, #0]
    1632:	22f0      	movs	r2, #240	; 0xf0
    1634:	4928      	ldr	r1, [pc, #160]	; (16d8 <_ext_irq_handler+0xb8>)
    1636:	3000      	adds	r0, #0
    1638:	bf18      	it	ne
    163a:	2001      	movne	r0, #1
    163c:	4b27      	ldr	r3, [pc, #156]	; (16dc <_ext_irq_handler+0xbc>)
    163e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1640:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1644:	e035      	b.n	16b2 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1646:	4b26      	ldr	r3, [pc, #152]	; (16e0 <_ext_irq_handler+0xc0>)
    1648:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    164c:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    164e:	f1b5 3fff 	cmp.w	r5, #4294967295
    1652:	d003      	beq.n	165c <_ext_irq_handler+0x3c>
				callback(pin);
    1654:	4b1f      	ldr	r3, [pc, #124]	; (16d4 <_ext_irq_handler+0xb4>)
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	4628      	mov	r0, r5
    165a:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    165c:	2301      	movs	r3, #1
    165e:	40a3      	lsls	r3, r4
    1660:	9c01      	ldr	r4, [sp, #4]
    1662:	ea24 0403 	bic.w	r4, r4, r3
    1666:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1668:	9b01      	ldr	r3, [sp, #4]
    166a:	fa93 f4a3 	rbit	r4, r3
    166e:	fab4 f484 	clz	r4, r4
    1672:	b90b      	cbnz	r3, 1678 <_ext_irq_handler+0x58>
    1674:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1678:	f1b4 3fff 	cmp.w	r4, #4294967295
    167c:	d014      	beq.n	16a8 <_ext_irq_handler+0x88>
    167e:	2003      	movs	r0, #3
    1680:	2100      	movs	r1, #0
    1682:	e001      	b.n	1688 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1684:	3b01      	subs	r3, #1
    1686:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1688:	4281      	cmp	r1, r0
    168a:	d8e0      	bhi.n	164e <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    168c:	1843      	adds	r3, r0, r1
    168e:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1692:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1694:	4a12      	ldr	r2, [pc, #72]	; (16e0 <_ext_irq_handler+0xc0>)
    1696:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    169a:	42a2      	cmp	r2, r4
    169c:	d0d3      	beq.n	1646 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    169e:	42a2      	cmp	r2, r4
    16a0:	daf0      	bge.n	1684 <_ext_irq_handler+0x64>
					lower = middle + 1;
    16a2:	3301      	adds	r3, #1
    16a4:	b2d9      	uxtb	r1, r3
    16a6:	e7ef      	b.n	1688 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    16a8:	4b09      	ldr	r3, [pc, #36]	; (16d0 <_ext_irq_handler+0xb0>)
    16aa:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    16ac:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    16ae:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    16b0:	615a      	str	r2, [r3, #20]
	while (flags) {
    16b2:	9b01      	ldr	r3, [sp, #4]
    16b4:	b14b      	cbz	r3, 16ca <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    16b6:	9b01      	ldr	r3, [sp, #4]
    16b8:	fa93 f4a3 	rbit	r4, r3
    16bc:	fab4 f484 	clz	r4, r4
    16c0:	2b00      	cmp	r3, #0
    16c2:	d1d9      	bne.n	1678 <_ext_irq_handler+0x58>
    16c4:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    16c8:	e7d6      	b.n	1678 <_ext_irq_handler+0x58>
	}
}
    16ca:	b002      	add	sp, #8
    16cc:	bd70      	pop	{r4, r5, r6, pc}
    16ce:	bf00      	nop
    16d0:	40002800 	.word	0x40002800
    16d4:	200001e8 	.word	0x200001e8
    16d8:	00002594 	.word	0x00002594
    16dc:	000010d1 	.word	0x000010d1
    16e0:	0000257c 	.word	0x0000257c

000016e4 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    16e4:	4b38      	ldr	r3, [pc, #224]	; (17c8 <_ext_irq_init+0xe4>)
    16e6:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    16e8:	f013 0f01 	tst.w	r3, #1
    16ec:	d120      	bne.n	1730 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16ee:	4b36      	ldr	r3, [pc, #216]	; (17c8 <_ext_irq_init+0xe4>)
    16f0:	685b      	ldr	r3, [r3, #4]
    16f2:	f013 0f03 	tst.w	r3, #3
    16f6:	d1fa      	bne.n	16ee <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    16f8:	4b33      	ldr	r3, [pc, #204]	; (17c8 <_ext_irq_init+0xe4>)
    16fa:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    16fc:	f013 0f02 	tst.w	r3, #2
    1700:	d00e      	beq.n	1720 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1702:	4a31      	ldr	r2, [pc, #196]	; (17c8 <_ext_irq_init+0xe4>)
    1704:	7813      	ldrb	r3, [r2, #0]
    1706:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    170a:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    170c:	4b2e      	ldr	r3, [pc, #184]	; (17c8 <_ext_irq_init+0xe4>)
    170e:	685b      	ldr	r3, [r3, #4]
    1710:	f013 0f03 	tst.w	r3, #3
    1714:	d1fa      	bne.n	170c <_ext_irq_init+0x28>
    1716:	4b2c      	ldr	r3, [pc, #176]	; (17c8 <_ext_irq_init+0xe4>)
    1718:	685b      	ldr	r3, [r3, #4]
    171a:	f013 0f02 	tst.w	r3, #2
    171e:	d1fa      	bne.n	1716 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1720:	2201      	movs	r2, #1
    1722:	4b29      	ldr	r3, [pc, #164]	; (17c8 <_ext_irq_init+0xe4>)
    1724:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1726:	4b28      	ldr	r3, [pc, #160]	; (17c8 <_ext_irq_init+0xe4>)
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	f013 0f03 	tst.w	r3, #3
    172e:	d1fa      	bne.n	1726 <_ext_irq_init+0x42>
    1730:	4b25      	ldr	r3, [pc, #148]	; (17c8 <_ext_irq_init+0xe4>)
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	f013 0f01 	tst.w	r3, #1
    1738:	d1fa      	bne.n	1730 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    173a:	4a23      	ldr	r2, [pc, #140]	; (17c8 <_ext_irq_init+0xe4>)
    173c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    173e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1742:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1744:	4b20      	ldr	r3, [pc, #128]	; (17c8 <_ext_irq_init+0xe4>)
    1746:	685b      	ldr	r3, [r3, #4]
    1748:	f013 0f03 	tst.w	r3, #3
    174c:	d1fa      	bne.n	1744 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    174e:	4b1e      	ldr	r3, [pc, #120]	; (17c8 <_ext_irq_init+0xe4>)
    1750:	2200      	movs	r2, #0
    1752:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1754:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1756:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1758:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    175a:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    175c:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1760:	61da      	str	r2, [r3, #28]
    1762:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    1766:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1768:	781a      	ldrb	r2, [r3, #0]
    176a:	f042 0202 	orr.w	r2, r2, #2
    176e:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1770:	4b15      	ldr	r3, [pc, #84]	; (17c8 <_ext_irq_init+0xe4>)
    1772:	685b      	ldr	r3, [r3, #4]
    1774:	f013 0f03 	tst.w	r3, #3
    1778:	d1fa      	bne.n	1770 <_ext_irq_init+0x8c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    177a:	4b14      	ldr	r3, [pc, #80]	; (17cc <_ext_irq_init+0xe8>)
    177c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1788:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    178c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1790:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1792:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    179a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    179e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a6:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    17ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    17b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17b4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17bc:	601a      	str	r2, [r3, #0]
	callback = cb;
    17be:	4b04      	ldr	r3, [pc, #16]	; (17d0 <_ext_irq_init+0xec>)
    17c0:	6018      	str	r0, [r3, #0]
}
    17c2:	2000      	movs	r0, #0
    17c4:	4770      	bx	lr
    17c6:	bf00      	nop
    17c8:	40002800 	.word	0x40002800
    17cc:	e000e100 	.word	0xe000e100
    17d0:	200001e8 	.word	0x200001e8

000017d4 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    17d4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    17d6:	4b01      	ldr	r3, [pc, #4]	; (17dc <EIC_6_Handler+0x8>)
    17d8:	4798      	blx	r3
    17da:	bd08      	pop	{r3, pc}
    17dc:	00001621 	.word	0x00001621

000017e0 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    17e0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    17e2:	4b01      	ldr	r3, [pc, #4]	; (17e8 <EIC_7_Handler+0x8>)
    17e4:	4798      	blx	r3
    17e6:	bd08      	pop	{r3, pc}
    17e8:	00001621 	.word	0x00001621

000017ec <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    17ec:	b508      	push	{r3, lr}
	_ext_irq_handler();
    17ee:	4b01      	ldr	r3, [pc, #4]	; (17f4 <EIC_14_Handler+0x8>)
    17f0:	4798      	blx	r3
    17f2:	bd08      	pop	{r3, pc}
    17f4:	00001621 	.word	0x00001621

000017f8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    17f8:	f010 0f01 	tst.w	r0, #1
    17fc:	d008      	beq.n	1810 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    17fe:	4a11      	ldr	r2, [pc, #68]	; (1844 <_gclk_init_generators_by_fref+0x4c>)
    1800:	4b11      	ldr	r3, [pc, #68]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    1802:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1804:	4b10      	ldr	r3, [pc, #64]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    1806:	685a      	ldr	r2, [r3, #4]
    1808:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    180c:	421a      	tst	r2, r3
    180e:	d1f9      	bne.n	1804 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1810:	f010 0f02 	tst.w	r0, #2
    1814:	d008      	beq.n	1828 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1816:	4a0d      	ldr	r2, [pc, #52]	; (184c <_gclk_init_generators_by_fref+0x54>)
    1818:	4b0b      	ldr	r3, [pc, #44]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    181a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    181e:	685a      	ldr	r2, [r3, #4]
    1820:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1824:	421a      	tst	r2, r3
    1826:	d1f9      	bne.n	181c <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1828:	f010 0f04 	tst.w	r0, #4
    182c:	d008      	beq.n	1840 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    182e:	4a08      	ldr	r2, [pc, #32]	; (1850 <_gclk_init_generators_by_fref+0x58>)
    1830:	4b05      	ldr	r3, [pc, #20]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    1832:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <_gclk_init_generators_by_fref+0x50>)
    1836:	685a      	ldr	r2, [r3, #4]
    1838:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    183c:	421a      	tst	r2, r3
    183e:	d1f9      	bne.n	1834 <_gclk_init_generators_by_fref+0x3c>
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	00010107 	.word	0x00010107
    1848:	40001c00 	.word	0x40001c00
    184c:	00010908 	.word	0x00010908
    1850:	00010105 	.word	0x00010105

00001854 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1854:	2201      	movs	r2, #1
    1856:	4b01      	ldr	r3, [pc, #4]	; (185c <_mclk_init+0x8>)
    1858:	715a      	strb	r2, [r3, #5]
    185a:	4770      	bx	lr
    185c:	40000800 	.word	0x40000800

00001860 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1860:	4b06      	ldr	r3, [pc, #24]	; (187c <_osc32kctrl_init_sources+0x1c>)
    1862:	f242 0286 	movw	r2, #8326	; 0x2086
    1866:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1868:	2200      	movs	r2, #0
    186a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    186c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    186e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1870:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1874:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1876:	2201      	movs	r2, #1
    1878:	741a      	strb	r2, [r3, #16]
    187a:	4770      	bx	lr
    187c:	40001400 	.word	0x40001400

00001880 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1880:	4770      	bx	lr
	...

00001884 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1884:	4a1d      	ldr	r2, [pc, #116]	; (18fc <_oscctrl_init_referenced_generators+0x78>)
    1886:	4b1e      	ldr	r3, [pc, #120]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    1888:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    188a:	4b1d      	ldr	r3, [pc, #116]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    188e:	f013 0f06 	tst.w	r3, #6
    1892:	d1fa      	bne.n	188a <_oscctrl_init_referenced_generators+0x6>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1894:	4b1a      	ldr	r3, [pc, #104]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    1896:	2220      	movs	r2, #32
    1898:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    189a:	2202      	movs	r2, #2
    189c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    18a0:	4b17      	ldr	r3, [pc, #92]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    18a4:	f013 0f02 	tst.w	r3, #2
    18a8:	d1fa      	bne.n	18a0 <_oscctrl_init_referenced_generators+0x1c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    18aa:	4a14      	ldr	r2, [pc, #80]	; (18fc <_oscctrl_init_referenced_generators+0x78>)
    18ac:	4b14      	ldr	r3, [pc, #80]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18ae:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    18b0:	4b13      	ldr	r3, [pc, #76]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    18b4:	f013 0f06 	tst.w	r3, #6
    18b8:	d1fa      	bne.n	18b0 <_oscctrl_init_referenced_generators+0x2c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    18ba:	4b11      	ldr	r3, [pc, #68]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18bc:	2220      	movs	r2, #32
    18be:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    18c0:	2202      	movs	r2, #2
    18c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    18c6:	4b0e      	ldr	r3, [pc, #56]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    18ca:	f013 0f02 	tst.w	r3, #2
    18ce:	d1fa      	bne.n	18c6 <_oscctrl_init_referenced_generators+0x42>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    18d4:	f013 0f01 	tst.w	r3, #1
    18d8:	d104      	bne.n	18e4 <_oscctrl_init_referenced_generators+0x60>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    18da:	4b09      	ldr	r3, [pc, #36]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    18de:	f013 0f02 	tst.w	r3, #2
    18e2:	d0f5      	beq.n	18d0 <_oscctrl_init_referenced_generators+0x4c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    18e4:	4b06      	ldr	r3, [pc, #24]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    18e8:	f013 0f01 	tst.w	r3, #1
    18ec:	d104      	bne.n	18f8 <_oscctrl_init_referenced_generators+0x74>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    18ee:	4b04      	ldr	r3, [pc, #16]	; (1900 <_oscctrl_init_referenced_generators+0x7c>)
    18f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    18f2:	f013 0f02 	tst.w	r3, #2
    18f6:	d0f5      	beq.n	18e4 <_oscctrl_init_referenced_generators+0x60>
    18f8:	4770      	bx	lr
    18fa:	bf00      	nop
    18fc:	000d05b7 	.word	0x000d05b7
    1900:	40001000 	.word	0x40001000

00001904 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1904:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1906:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1908:	6803      	ldr	r3, [r0, #0]
    190a:	2100      	movs	r1, #0
    190c:	4798      	blx	r3
    190e:	bd08      	pop	{r3, pc}

00001910 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1910:	b538      	push	{r3, r4, r5, lr}
    1912:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1914:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1916:	4b07      	ldr	r3, [pc, #28]	; (1934 <_camera_async_init+0x24>)
    1918:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <_camera_async_init+0x28>)
    191c:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    191e:	4d07      	ldr	r5, [pc, #28]	; (193c <_camera_async_init+0x2c>)
    1920:	2100      	movs	r1, #0
    1922:	4628      	mov	r0, r5
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <_camera_async_init+0x30>)
    1926:	4798      	blx	r3
	resource->back                 = device;
    1928:	682b      	ldr	r3, [r5, #0]
    192a:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    192c:	4a05      	ldr	r2, [pc, #20]	; (1944 <_camera_async_init+0x34>)
    192e:	601a      	str	r2, [r3, #0]
    1930:	bd38      	pop	{r3, r4, r5, pc}
    1932:	bf00      	nop
    1934:	c0000020 	.word	0xc0000020
    1938:	200001ec 	.word	0x200001ec
    193c:	20000ad0 	.word	0x20000ad0
    1940:	000015d1 	.word	0x000015d1
    1944:	00001905 	.word	0x00001905

00001948 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    1948:	b500      	push	{lr}
    194a:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    194c:	4b08      	ldr	r3, [pc, #32]	; (1970 <PCC_Handler+0x28>)
    194e:	6818      	ldr	r0, [r3, #0]
    1950:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1952:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1954:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    1956:	2201      	movs	r2, #1
    1958:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    195a:	9b01      	ldr	r3, [sp, #4]
    195c:	f013 0f01 	tst.w	r3, #1
    1960:	d003      	beq.n	196a <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1962:	6803      	ldr	r3, [r0, #0]
    1964:	b10b      	cbz	r3, 196a <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1966:	2100      	movs	r1, #0
    1968:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    196a:	b003      	add	sp, #12
    196c:	f85d fb04 	ldr.w	pc, [sp], #4
    1970:	200001ec 	.word	0x200001ec

00001974 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1974:	b500      	push	{lr}
    1976:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1978:	4b0d      	ldr	r3, [pc, #52]	; (19b0 <RAMECC_Handler+0x3c>)
    197a:	789b      	ldrb	r3, [r3, #2]
    197c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    197e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	f013 0f02 	tst.w	r3, #2
    1986:	d006      	beq.n	1996 <RAMECC_Handler+0x22>
    1988:	4b0a      	ldr	r3, [pc, #40]	; (19b4 <RAMECC_Handler+0x40>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	b11b      	cbz	r3, 1996 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    198e:	4a08      	ldr	r2, [pc, #32]	; (19b0 <RAMECC_Handler+0x3c>)
    1990:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1992:	4798      	blx	r3
    1994:	e009      	b.n	19aa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1996:	9b01      	ldr	r3, [sp, #4]
    1998:	f013 0f01 	tst.w	r3, #1
    199c:	d005      	beq.n	19aa <RAMECC_Handler+0x36>
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <RAMECC_Handler+0x40>)
    19a0:	685b      	ldr	r3, [r3, #4]
    19a2:	b113      	cbz	r3, 19aa <RAMECC_Handler+0x36>
    19a4:	4a02      	ldr	r2, [pc, #8]	; (19b0 <RAMECC_Handler+0x3c>)
    19a6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    19a8:	4798      	blx	r3
	} else {
		return;
	}
}
    19aa:	b003      	add	sp, #12
    19ac:	f85d fb04 	ldr.w	pc, [sp], #4
    19b0:	41020000 	.word	0x41020000
    19b4:	20000ad4 	.word	0x20000ad4

000019b8 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    19b8:	b538      	push	{r3, r4, r5, lr}
    19ba:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    19bc:	4605      	mov	r5, r0
    19be:	b348      	cbz	r0, 1a14 <_mci_sync_init+0x5c>
    19c0:	b331      	cbz	r1, 1a10 <_mci_sync_init+0x58>
    19c2:	2001      	movs	r0, #1
    19c4:	22d8      	movs	r2, #216	; 0xd8
    19c6:	4914      	ldr	r1, [pc, #80]	; (1a18 <_mci_sync_init+0x60>)
    19c8:	4b14      	ldr	r3, [pc, #80]	; (1a1c <_mci_sync_init+0x64>)
    19ca:	4798      	blx	r3

	mci_dev->hw = hw;
    19cc:	602c      	str	r4, [r5, #0]
}

static inline void hri_sdhc_set_SRR_SWRSTALL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    19ce:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    19d2:	f043 0301 	orr.w	r3, r3, #1
    19d6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}

static inline bool hri_sdhc_get_SRR_SWRSTALL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sdhc *)hw)->SRR.reg;
    19da:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    19de:	f013 0f01 	tst.w	r3, #1
    19e2:	d1fa      	bne.n	19da <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    19e4:	230e      	movs	r3, #14
    19e6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    19ea:	230f      	movs	r3, #15
    19ec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}

static inline void hri_sdhc_set_NISTER_reg(const void *const hw, hri_sdhc_nister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->NISTER.reg |= mask;
    19f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    19f2:	b29b      	uxth	r3, r3
    19f4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    19f8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    19fc:	86a3      	strh	r3, [r4, #52]	; 0x34
}

static inline void hri_sdhc_set_EISTER_reg(const void *const hw, hri_sdhc_eister_reg_t mask)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->EISTER.reg |= mask;
    19fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1a00:	b29b      	uxth	r3, r3
    1a02:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    1a06:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    1a0a:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    1a0c:	2000      	movs	r0, #0
    1a0e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    1a10:	2000      	movs	r0, #0
    1a12:	e7d7      	b.n	19c4 <_mci_sync_init+0xc>
    1a14:	2000      	movs	r0, #0
    1a16:	e7d5      	b.n	19c4 <_mci_sync_init+0xc>
    1a18:	000025ac 	.word	0x000025ac
    1a1c:	000010d1 	.word	0x000010d1

00001a20 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1a20:	b470      	push	{r4, r5, r6}
    1a22:	b087      	sub	sp, #28
    1a24:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1a26:	466c      	mov	r4, sp
    1a28:	4d0c      	ldr	r5, [pc, #48]	; (1a5c <_sercom_get_hardware_index+0x3c>)
    1a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1a32:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a36:	2000      	movs	r0, #0
    1a38:	2805      	cmp	r0, #5
    1a3a:	d80a      	bhi.n	1a52 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1a3c:	ab06      	add	r3, sp, #24
    1a3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1a42:	f853 3c18 	ldr.w	r3, [r3, #-24]
    1a46:	42b3      	cmp	r3, r6
    1a48:	d001      	beq.n	1a4e <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a4a:	3001      	adds	r0, #1
    1a4c:	e7f4      	b.n	1a38 <_sercom_get_hardware_index+0x18>
			return i;
    1a4e:	b2c0      	uxtb	r0, r0
    1a50:	e000      	b.n	1a54 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    1a52:	2000      	movs	r0, #0
}
    1a54:	b007      	add	sp, #28
    1a56:	bc70      	pop	{r4, r5, r6}
    1a58:	4770      	bx	lr
    1a5a:	bf00      	nop
    1a5c:	000025c4 	.word	0x000025c4

00001a60 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1a60:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1a62:	4b0c      	ldr	r3, [pc, #48]	; (1a94 <_get_sercom_index+0x34>)
    1a64:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1a66:	2300      	movs	r3, #0
    1a68:	b143      	cbz	r3, 1a7c <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1a6a:	f240 2247 	movw	r2, #583	; 0x247
    1a6e:	490a      	ldr	r1, [pc, #40]	; (1a98 <_get_sercom_index+0x38>)
    1a70:	2000      	movs	r0, #0
    1a72:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_get_sercom_index+0x3c>)
    1a74:	4798      	blx	r3
	return 0;
    1a76:	2300      	movs	r3, #0
}
    1a78:	4618      	mov	r0, r3
    1a7a:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1a7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1a80:	00d1      	lsls	r1, r2, #3
    1a82:	4a07      	ldr	r2, [pc, #28]	; (1aa0 <_get_sercom_index+0x40>)
    1a84:	440a      	add	r2, r1
    1a86:	7e12      	ldrb	r2, [r2, #24]
    1a88:	4290      	cmp	r0, r2
    1a8a:	d0f5      	beq.n	1a78 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1a8c:	3301      	adds	r3, #1
    1a8e:	b2db      	uxtb	r3, r3
    1a90:	e7ea      	b.n	1a68 <_get_sercom_index+0x8>
    1a92:	bf00      	nop
    1a94:	00001a21 	.word	0x00001a21
    1a98:	00002630 	.word	0x00002630
    1a9c:	000010d1 	.word	0x000010d1
    1aa0:	000025c4 	.word	0x000025c4

00001aa4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1aa4:	b538      	push	{r3, r4, r5, lr}
    1aa6:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1aa8:	4b3c      	ldr	r3, [pc, #240]	; (1b9c <_usart_init+0xf8>)
    1aaa:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1aac:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1aae:	f013 0f01 	tst.w	r3, #1
    1ab2:	d122      	bne.n	1afa <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1ab4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ab8:	00da      	lsls	r2, r3, #3
    1aba:	4b39      	ldr	r3, [pc, #228]	; (1ba0 <_usart_init+0xfc>)
    1abc:	4413      	add	r3, r2
    1abe:	69da      	ldr	r2, [r3, #28]
    1ac0:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ac4:	69e3      	ldr	r3, [r4, #28]
    1ac6:	f013 0f03 	tst.w	r3, #3
    1aca:	d1fb      	bne.n	1ac4 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1acc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1ace:	f013 0f02 	tst.w	r3, #2
    1ad2:	d00b      	beq.n	1aec <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1ad4:	6823      	ldr	r3, [r4, #0]
    1ad6:	f023 0302 	bic.w	r3, r3, #2
    1ada:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1adc:	69e3      	ldr	r3, [r4, #28]
    1ade:	f013 0f03 	tst.w	r3, #3
    1ae2:	d1fb      	bne.n	1adc <_usart_init+0x38>
    1ae4:	69e3      	ldr	r3, [r4, #28]
    1ae6:	f013 0f02 	tst.w	r3, #2
    1aea:	d1fb      	bne.n	1ae4 <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1aec:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1af0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1af2:	69e3      	ldr	r3, [r4, #28]
    1af4:	f013 0f03 	tst.w	r3, #3
    1af8:	d1fb      	bne.n	1af2 <_usart_init+0x4e>
    1afa:	69e3      	ldr	r3, [r4, #28]
    1afc:	f013 0f01 	tst.w	r3, #1
    1b00:	d1fb      	bne.n	1afa <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1b02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1b06:	00da      	lsls	r2, r3, #3
    1b08:	4b25      	ldr	r3, [pc, #148]	; (1ba0 <_usart_init+0xfc>)
    1b0a:	4413      	add	r3, r2
    1b0c:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1b0e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b10:	69e3      	ldr	r3, [r4, #28]
    1b12:	f013 0f03 	tst.w	r3, #3
    1b16:	d1fb      	bne.n	1b10 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1b18:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1b1c:	00da      	lsls	r2, r3, #3
    1b1e:	4b20      	ldr	r3, [pc, #128]	; (1ba0 <_usart_init+0xfc>)
    1b20:	4413      	add	r3, r2
    1b22:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1b24:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b26:	69e3      	ldr	r3, [r4, #28]
    1b28:	f013 0f1f 	tst.w	r3, #31
    1b2c:	d1fb      	bne.n	1b26 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1b2e:	0042      	lsls	r2, r0, #1
    1b30:	4402      	add	r2, r0
    1b32:	00d1      	lsls	r1, r2, #3
    1b34:	4b1a      	ldr	r3, [pc, #104]	; (1ba0 <_usart_init+0xfc>)
    1b36:	440b      	add	r3, r1
    1b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1b3a:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1b3c:	69db      	ldr	r3, [r3, #28]
    1b3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1b42:	d10a      	bne.n	1b5a <_usart_init+0xb6>
    1b44:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1b48:	d107      	bne.n	1b5a <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1b4a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1b4e:	00da      	lsls	r2, r3, #3
    1b50:	4b13      	ldr	r3, [pc, #76]	; (1ba0 <_usart_init+0xfc>)
    1b52:	4413      	add	r3, r2
    1b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1b56:	81a3      	strh	r3, [r4, #12]
    1b58:	e00f      	b.n	1b7a <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1b5a:	0042      	lsls	r2, r0, #1
    1b5c:	4402      	add	r2, r0
    1b5e:	00d1      	lsls	r1, r2, #3
    1b60:	4b0f      	ldr	r3, [pc, #60]	; (1ba0 <_usart_init+0xfc>)
    1b62:	440b      	add	r3, r1
    1b64:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    1b66:	89a2      	ldrh	r2, [r4, #12]
    1b68:	f361 020c 	bfi	r2, r1, #0, #13
    1b6c:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1b6e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    1b72:	89a3      	ldrh	r3, [r4, #12]
    1b74:	f362 334f 	bfi	r3, r2, #13, #3
    1b78:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1b7a:	4a09      	ldr	r2, [pc, #36]	; (1ba0 <_usart_init+0xfc>)
    1b7c:	0043      	lsls	r3, r0, #1
    1b7e:	181d      	adds	r5, r3, r0
    1b80:	00e9      	lsls	r1, r5, #3
    1b82:	460d      	mov	r5, r1
    1b84:	4411      	add	r1, r2
    1b86:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1b8a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1b8c:	442a      	add	r2, r5
    1b8e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1b92:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    1b96:	2000      	movs	r0, #0
    1b98:	bd38      	pop	{r3, r4, r5, pc}
    1b9a:	bf00      	nop
    1b9c:	00001a61 	.word	0x00001a61
    1ba0:	000025c4 	.word	0x000025c4

00001ba4 <_usart_sync_init>:
{
    1ba4:	b538      	push	{r3, r4, r5, lr}
    1ba6:	460c      	mov	r4, r1
	ASSERT(device);
    1ba8:	4605      	mov	r5, r0
    1baa:	22bb      	movs	r2, #187	; 0xbb
    1bac:	4905      	ldr	r1, [pc, #20]	; (1bc4 <_usart_sync_init+0x20>)
    1bae:	3000      	adds	r0, #0
    1bb0:	bf18      	it	ne
    1bb2:	2001      	movne	r0, #1
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <_usart_sync_init+0x24>)
    1bb6:	4798      	blx	r3
	device->hw = hw;
    1bb8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1bba:	4620      	mov	r0, r4
    1bbc:	4b03      	ldr	r3, [pc, #12]	; (1bcc <_usart_sync_init+0x28>)
    1bbe:	4798      	blx	r3
}
    1bc0:	bd38      	pop	{r3, r4, r5, pc}
    1bc2:	bf00      	nop
    1bc4:	00002630 	.word	0x00002630
    1bc8:	000010d1 	.word	0x000010d1
    1bcc:	00001aa5 	.word	0x00001aa5

00001bd0 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1bd0:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1bd2:	6299      	str	r1, [r3, #40]	; 0x28
    1bd4:	4770      	bx	lr

00001bd6 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1bd6:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1bd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1bda:	b2c0      	uxtb	r0, r0
    1bdc:	4770      	bx	lr

00001bde <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1bde:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1be0:	7e18      	ldrb	r0, [r3, #24]
}
    1be2:	f000 0001 	and.w	r0, r0, #1
    1be6:	4770      	bx	lr

00001be8 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1be8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1bea:	7e18      	ldrb	r0, [r3, #24]
}
    1bec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1bf0:	4770      	bx	lr

00001bf2 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1bf2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1bf4:	7e18      	ldrb	r0, [r3, #24]
}
    1bf6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1bfa:	4770      	bx	lr

00001bfc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1bfc:	4b03      	ldr	r3, [pc, #12]	; (1c0c <_system_time_init+0x10>)
    1bfe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1c02:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1c04:	2205      	movs	r2, #5
    1c06:	601a      	str	r2, [r3, #0]
    1c08:	4770      	bx	lr
    1c0a:	bf00      	nop
    1c0c:	e000e010 	.word	0xe000e010

00001c10 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c10:	b508      	push	{r3, lr}
	_system_time_init(hw);
    1c12:	4b01      	ldr	r3, [pc, #4]	; (1c18 <_delay_init+0x8>)
    1c14:	4798      	blx	r3
    1c16:	bd08      	pop	{r3, pc}
    1c18:	00001bfd 	.word	0x00001bfd

00001c1c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1c1c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1c1e:	e00d      	b.n	1c3c <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    1c20:	4b0d      	ldr	r3, [pc, #52]	; (1c58 <_delay_cycles+0x3c>)
    1c22:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    1c26:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    1c28:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c2a:	4b0b      	ldr	r3, [pc, #44]	; (1c58 <_delay_cycles+0x3c>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c32:	d0fa      	beq.n	1c2a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    1c34:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1c38:	3101      	adds	r1, #1
	while (n--) {
    1c3a:	4610      	mov	r0, r2
    1c3c:	1e43      	subs	r3, r0, #1
    1c3e:	b2da      	uxtb	r2, r3
    1c40:	2800      	cmp	r0, #0
    1c42:	d1ed      	bne.n	1c20 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1c44:	4b04      	ldr	r3, [pc, #16]	; (1c58 <_delay_cycles+0x3c>)
    1c46:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1c48:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c4a:	4b03      	ldr	r3, [pc, #12]	; (1c58 <_delay_cycles+0x3c>)
    1c4c:	681b      	ldr	r3, [r3, #0]
    1c4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c52:	d0fa      	beq.n	1c4a <_delay_cycles+0x2e>
		;
}
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop
    1c58:	e000e010 	.word	0xe000e010

00001c5c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1c5c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1c5e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c60:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c62:	f012 0f01 	tst.w	r2, #1
    1c66:	d100      	bne.n	1c6a <tc_interrupt_handler+0xe>
    1c68:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c6a:	2201      	movs	r2, #1
    1c6c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    1c6e:	6803      	ldr	r3, [r0, #0]
    1c70:	4798      	blx	r3
	}
}
    1c72:	e7f9      	b.n	1c68 <tc_interrupt_handler+0xc>

00001c74 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1c74:	b538      	push	{r3, r4, r5, lr}
    1c76:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1c78:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1c7a:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1c7c:	f013 0f01 	tst.w	r3, #1
    1c80:	d004      	beq.n	1c8c <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1c82:	2301      	movs	r3, #1
    1c84:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1c86:	6803      	ldr	r3, [r0, #0]
    1c88:	b103      	cbz	r3, 1c8c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1c8a:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1c8c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1c8e:	f013 0f02 	tst.w	r3, #2
    1c92:	d005      	beq.n	1ca0 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1c94:	2302      	movs	r3, #2
    1c96:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1c98:	686b      	ldr	r3, [r5, #4]
    1c9a:	b10b      	cbz	r3, 1ca0 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1c9c:	4628      	mov	r0, r5
    1c9e:	4798      	blx	r3
    1ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

00001ca4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1ca4:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <_tc_init_irq_param+0x1c>)
    1ca6:	4298      	cmp	r0, r3
    1ca8:	d003      	beq.n	1cb2 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <_tc_init_irq_param+0x20>)
    1cac:	4298      	cmp	r0, r3
    1cae:	d003      	beq.n	1cb8 <_tc_init_irq_param+0x14>
    1cb0:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    1cb2:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <_tc_init_irq_param+0x24>)
    1cb4:	6019      	str	r1, [r3, #0]
    1cb6:	e7f8      	b.n	1caa <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    1cb8:	4b03      	ldr	r3, [pc, #12]	; (1cc8 <_tc_init_irq_param+0x24>)
    1cba:	6059      	str	r1, [r3, #4]
	}
}
    1cbc:	e7f8      	b.n	1cb0 <_tc_init_irq_param+0xc>
    1cbe:	bf00      	nop
    1cc0:	40003800 	.word	0x40003800
    1cc4:	40003c00 	.word	0x40003c00
    1cc8:	200001f0 	.word	0x200001f0

00001ccc <get_tc_index>:
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
    1cce:	b086      	sub	sp, #24
    1cd0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cd2:	466c      	mov	r4, sp
    1cd4:	4d17      	ldr	r5, [pc, #92]	; (1d34 <get_tc_index+0x68>)
    1cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1cda:	e895 0003 	ldmia.w	r5, {r0, r1}
    1cde:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1ce2:	2300      	movs	r3, #0
    1ce4:	2b05      	cmp	r3, #5
    1ce6:	d80a      	bhi.n	1cfe <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1ce8:	aa06      	add	r2, sp, #24
    1cea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1cee:	f852 2c18 	ldr.w	r2, [r2, #-24]
    1cf2:	42b2      	cmp	r2, r6
    1cf4:	d001      	beq.n	1cfa <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cf6:	3301      	adds	r3, #1
    1cf8:	e7f4      	b.n	1ce4 <get_tc_index+0x18>
			return i;
    1cfa:	b2db      	uxtb	r3, r3
    1cfc:	e000      	b.n	1d00 <get_tc_index+0x34>
		}
	}
	return 0;
    1cfe:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1d00:	2200      	movs	r2, #0
    1d02:	2a01      	cmp	r2, #1
    1d04:	d80b      	bhi.n	1d1e <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    1d06:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    1d0a:	0081      	lsls	r1, r0, #2
    1d0c:	480a      	ldr	r0, [pc, #40]	; (1d38 <get_tc_index+0x6c>)
    1d0e:	5c41      	ldrb	r1, [r0, r1]
    1d10:	4299      	cmp	r1, r3
    1d12:	d002      	beq.n	1d1a <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1d14:	3201      	adds	r2, #1
    1d16:	b2d2      	uxtb	r2, r2
    1d18:	e7f3      	b.n	1d02 <get_tc_index+0x36>
			return i;
    1d1a:	b250      	sxtb	r0, r2
    1d1c:	e007      	b.n	1d2e <get_tc_index+0x62>
	ASSERT(false);
    1d1e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    1d22:	4906      	ldr	r1, [pc, #24]	; (1d3c <get_tc_index+0x70>)
    1d24:	2000      	movs	r0, #0
    1d26:	4b06      	ldr	r3, [pc, #24]	; (1d40 <get_tc_index+0x74>)
    1d28:	4798      	blx	r3
	return -1;
    1d2a:	f04f 30ff 	mov.w	r0, #4294967295
}
    1d2e:	b006      	add	sp, #24
    1d30:	bd70      	pop	{r4, r5, r6, pc}
    1d32:	bf00      	nop
    1d34:	0000264c 	.word	0x0000264c
    1d38:	20000000 	.word	0x20000000
    1d3c:	00002664 	.word	0x00002664
    1d40:	000010d1 	.word	0x000010d1

00001d44 <_timer_init>:
{
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	4606      	mov	r6, r0
    1d48:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    1d4a:	4608      	mov	r0, r1
    1d4c:	4b6c      	ldr	r3, [pc, #432]	; (1f00 <_timer_init+0x1bc>)
    1d4e:	4798      	blx	r3
    1d50:	4605      	mov	r5, r0
	device->hw = hw;
    1d52:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1d54:	228f      	movs	r2, #143	; 0x8f
    1d56:	496b      	ldr	r1, [pc, #428]	; (1f04 <_timer_init+0x1c0>)
    1d58:	2001      	movs	r0, #1
    1d5a:	4b6b      	ldr	r3, [pc, #428]	; (1f08 <_timer_init+0x1c4>)
    1d5c:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d5e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1d60:	f013 0f01 	tst.w	r3, #1
    1d64:	d119      	bne.n	1d9a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d66:	6923      	ldr	r3, [r4, #16]
    1d68:	f013 0f03 	tst.w	r3, #3
    1d6c:	d1fb      	bne.n	1d66 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d6e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1d70:	f013 0f02 	tst.w	r3, #2
    1d74:	d00b      	beq.n	1d8e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1d76:	6823      	ldr	r3, [r4, #0]
    1d78:	f023 0302 	bic.w	r3, r3, #2
    1d7c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d7e:	6923      	ldr	r3, [r4, #16]
    1d80:	f013 0f03 	tst.w	r3, #3
    1d84:	d1fb      	bne.n	1d7e <_timer_init+0x3a>
    1d86:	6923      	ldr	r3, [r4, #16]
    1d88:	f013 0f02 	tst.w	r3, #2
    1d8c:	d1fb      	bne.n	1d86 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1d8e:	2301      	movs	r3, #1
    1d90:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d92:	6923      	ldr	r3, [r4, #16]
    1d94:	f013 0f03 	tst.w	r3, #3
    1d98:	d1fb      	bne.n	1d92 <_timer_init+0x4e>
    1d9a:	6923      	ldr	r3, [r4, #16]
    1d9c:	f013 0f01 	tst.w	r3, #1
    1da0:	d1fb      	bne.n	1d9a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1da2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1da6:	009a      	lsls	r2, r3, #2
    1da8:	4b58      	ldr	r3, [pc, #352]	; (1f0c <_timer_init+0x1c8>)
    1daa:	4413      	add	r3, r2
    1dac:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dae:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1db0:	6923      	ldr	r3, [r4, #16]
    1db2:	f013 0f03 	tst.w	r3, #3
    1db6:	d1fb      	bne.n	1db0 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1db8:	00aa      	lsls	r2, r5, #2
    1dba:	442a      	add	r2, r5
    1dbc:	0091      	lsls	r1, r2, #2
    1dbe:	4b53      	ldr	r3, [pc, #332]	; (1f0c <_timer_init+0x1c8>)
    1dc0:	440b      	add	r3, r1
    1dc2:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1dc4:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1dc6:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1dc8:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1dca:	2201      	movs	r2, #1
    1dcc:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1dce:	685b      	ldr	r3, [r3, #4]
    1dd0:	f003 030c 	and.w	r3, r3, #12
    1dd4:	2b08      	cmp	r3, #8
    1dd6:	d05b      	beq.n	1e90 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d16d      	bne.n	1eb8 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1ddc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1de0:	009a      	lsls	r2, r3, #2
    1de2:	4b4a      	ldr	r3, [pc, #296]	; (1f0c <_timer_init+0x1c8>)
    1de4:	4413      	add	r3, r2
    1de6:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1de8:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dea:	6923      	ldr	r3, [r4, #16]
    1dec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1df0:	d1fb      	bne.n	1dea <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1df2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1df6:	009a      	lsls	r2, r3, #2
    1df8:	4b44      	ldr	r3, [pc, #272]	; (1f0c <_timer_init+0x1c8>)
    1dfa:	4413      	add	r3, r2
    1dfc:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1dfe:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e00:	6923      	ldr	r3, [r4, #16]
    1e02:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e06:	d1fb      	bne.n	1e00 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1e08:	2301      	movs	r3, #1
    1e0a:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    1e0c:	4631      	mov	r1, r6
    1e0e:	4620      	mov	r0, r4
    1e10:	4b3f      	ldr	r3, [pc, #252]	; (1f10 <_timer_init+0x1cc>)
    1e12:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1e14:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e18:	009a      	lsls	r2, r3, #2
    1e1a:	4b3c      	ldr	r3, [pc, #240]	; (1f0c <_timer_init+0x1c8>)
    1e1c:	4413      	add	r3, r2
    1e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1e22:	2b00      	cmp	r3, #0
    1e24:	db0d      	blt.n	1e42 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e26:	095a      	lsrs	r2, r3, #5
    1e28:	f003 031f 	and.w	r3, r3, #31
    1e2c:	2101      	movs	r1, #1
    1e2e:	fa01 f303 	lsl.w	r3, r1, r3
    1e32:	3220      	adds	r2, #32
    1e34:	4937      	ldr	r1, [pc, #220]	; (1f14 <_timer_init+0x1d0>)
    1e36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e3e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1e42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e46:	009a      	lsls	r2, r3, #2
    1e48:	4b30      	ldr	r3, [pc, #192]	; (1f0c <_timer_init+0x1c8>)
    1e4a:	4413      	add	r3, r2
    1e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1e50:	2b00      	cmp	r3, #0
    1e52:	db09      	blt.n	1e68 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e54:	095a      	lsrs	r2, r3, #5
    1e56:	f003 031f 	and.w	r3, r3, #31
    1e5a:	2101      	movs	r1, #1
    1e5c:	fa01 f303 	lsl.w	r3, r1, r3
    1e60:	3260      	adds	r2, #96	; 0x60
    1e62:	492c      	ldr	r1, [pc, #176]	; (1f14 <_timer_init+0x1d0>)
    1e64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    1e68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1e6c:	00aa      	lsls	r2, r5, #2
    1e6e:	4b27      	ldr	r3, [pc, #156]	; (1f0c <_timer_init+0x1c8>)
    1e70:	4413      	add	r3, r2
    1e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1e76:	2b00      	cmp	r3, #0
    1e78:	db08      	blt.n	1e8c <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e7a:	0959      	lsrs	r1, r3, #5
    1e7c:	f003 031f 	and.w	r3, r3, #31
    1e80:	2201      	movs	r2, #1
    1e82:	fa02 f303 	lsl.w	r3, r2, r3
    1e86:	4a23      	ldr	r2, [pc, #140]	; (1f14 <_timer_init+0x1d0>)
    1e88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1e8c:	2000      	movs	r0, #0
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1e90:	4b1e      	ldr	r3, [pc, #120]	; (1f0c <_timer_init+0x1c8>)
    1e92:	440b      	add	r3, r1
    1e94:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1e96:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e98:	6923      	ldr	r3, [r4, #16]
    1e9a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e9e:	d1fb      	bne.n	1e98 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1ea0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ea4:	009a      	lsls	r2, r3, #2
    1ea6:	4b19      	ldr	r3, [pc, #100]	; (1f0c <_timer_init+0x1c8>)
    1ea8:	4413      	add	r3, r2
    1eaa:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1eac:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1eae:	6923      	ldr	r3, [r4, #16]
    1eb0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1eb4:	d1fb      	bne.n	1eae <_timer_init+0x16a>
    1eb6:	e7a7      	b.n	1e08 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1eb8:	2b04      	cmp	r3, #4
    1eba:	d1a5      	bne.n	1e08 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1ebc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ec0:	009a      	lsls	r2, r3, #2
    1ec2:	4b12      	ldr	r3, [pc, #72]	; (1f0c <_timer_init+0x1c8>)
    1ec4:	4413      	add	r3, r2
    1ec6:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ec8:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1eca:	6923      	ldr	r3, [r4, #16]
    1ecc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ed0:	d1fb      	bne.n	1eca <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    1ed2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ed6:	009a      	lsls	r2, r3, #2
    1ed8:	4b0c      	ldr	r3, [pc, #48]	; (1f0c <_timer_init+0x1c8>)
    1eda:	4413      	add	r3, r2
    1edc:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ede:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ee0:	6923      	ldr	r3, [r4, #16]
    1ee2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ee6:	d1fb      	bne.n	1ee0 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1ee8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1eec:	009a      	lsls	r2, r3, #2
    1eee:	4b07      	ldr	r3, [pc, #28]	; (1f0c <_timer_init+0x1c8>)
    1ef0:	4413      	add	r3, r2
    1ef2:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1ef4:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ef6:	6923      	ldr	r3, [r4, #16]
    1ef8:	f013 0f20 	tst.w	r3, #32
    1efc:	d1fb      	bne.n	1ef6 <_timer_init+0x1b2>
    1efe:	e783      	b.n	1e08 <_timer_init+0xc4>
    1f00:	00001ccd 	.word	0x00001ccd
    1f04:	00002664 	.word	0x00002664
    1f08:	000010d1 	.word	0x000010d1
    1f0c:	20000000 	.word	0x20000000
    1f10:	00001ca5 	.word	0x00001ca5
    1f14:	e000e100 	.word	0xe000e100

00001f18 <_pwm_init>:
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	4606      	mov	r6, r0
    1f1c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    1f1e:	4608      	mov	r0, r1
    1f20:	4b59      	ldr	r3, [pc, #356]	; (2088 <_pwm_init+0x170>)
    1f22:	4798      	blx	r3
    1f24:	4605      	mov	r5, r0
	device->hw = hw;
    1f26:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1f28:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1f2a:	f013 0f01 	tst.w	r3, #1
    1f2e:	d119      	bne.n	1f64 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f30:	6923      	ldr	r3, [r4, #16]
    1f32:	f013 0f03 	tst.w	r3, #3
    1f36:	d1fb      	bne.n	1f30 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1f38:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1f3a:	f013 0f02 	tst.w	r3, #2
    1f3e:	d00b      	beq.n	1f58 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f40:	6823      	ldr	r3, [r4, #0]
    1f42:	f023 0302 	bic.w	r3, r3, #2
    1f46:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f48:	6923      	ldr	r3, [r4, #16]
    1f4a:	f013 0f03 	tst.w	r3, #3
    1f4e:	d1fb      	bne.n	1f48 <_pwm_init+0x30>
    1f50:	6923      	ldr	r3, [r4, #16]
    1f52:	f013 0f02 	tst.w	r3, #2
    1f56:	d1fb      	bne.n	1f50 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f58:	2301      	movs	r3, #1
    1f5a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f5c:	6923      	ldr	r3, [r4, #16]
    1f5e:	f013 0f03 	tst.w	r3, #3
    1f62:	d1fb      	bne.n	1f5c <_pwm_init+0x44>
    1f64:	6923      	ldr	r3, [r4, #16]
    1f66:	f013 0f01 	tst.w	r3, #1
    1f6a:	d1fb      	bne.n	1f64 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1f6c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f70:	009a      	lsls	r2, r3, #2
    1f72:	4b46      	ldr	r3, [pc, #280]	; (208c <_pwm_init+0x174>)
    1f74:	4413      	add	r3, r2
    1f76:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f78:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f7a:	6923      	ldr	r3, [r4, #16]
    1f7c:	f013 0f03 	tst.w	r3, #3
    1f80:	d1fb      	bne.n	1f7a <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1f82:	00aa      	lsls	r2, r5, #2
    1f84:	442a      	add	r2, r5
    1f86:	0091      	lsls	r1, r2, #2
    1f88:	4b40      	ldr	r3, [pc, #256]	; (208c <_pwm_init+0x174>)
    1f8a:	440b      	add	r3, r1
    1f8c:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1f8e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1f90:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1f92:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1f94:	2203      	movs	r2, #3
    1f96:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1f98:	685b      	ldr	r3, [r3, #4]
    1f9a:	f003 030c 	and.w	r3, r3, #12
    1f9e:	2b08      	cmp	r3, #8
    1fa0:	d059      	beq.n	2056 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d16b      	bne.n	207e <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1fa6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1faa:	009a      	lsls	r2, r3, #2
    1fac:	4b37      	ldr	r3, [pc, #220]	; (208c <_pwm_init+0x174>)
    1fae:	4413      	add	r3, r2
    1fb0:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fb2:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fb4:	6923      	ldr	r3, [r4, #16]
    1fb6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1fba:	d1fb      	bne.n	1fb4 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1fbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1fc0:	009a      	lsls	r2, r3, #2
    1fc2:	4b32      	ldr	r3, [pc, #200]	; (208c <_pwm_init+0x174>)
    1fc4:	4413      	add	r3, r2
    1fc6:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fc8:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fca:	6923      	ldr	r3, [r4, #16]
    1fcc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1fd0:	d1fb      	bne.n	1fca <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    1fd2:	4631      	mov	r1, r6
    1fd4:	4620      	mov	r0, r4
    1fd6:	4b2e      	ldr	r3, [pc, #184]	; (2090 <_pwm_init+0x178>)
    1fd8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    1fda:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1fde:	009a      	lsls	r2, r3, #2
    1fe0:	4b2a      	ldr	r3, [pc, #168]	; (208c <_pwm_init+0x174>)
    1fe2:	4413      	add	r3, r2
    1fe4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1fe8:	2b00      	cmp	r3, #0
    1fea:	db0d      	blt.n	2008 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fec:	095a      	lsrs	r2, r3, #5
    1fee:	f003 031f 	and.w	r3, r3, #31
    1ff2:	2101      	movs	r1, #1
    1ff4:	fa01 f303 	lsl.w	r3, r1, r3
    1ff8:	3220      	adds	r2, #32
    1ffa:	4926      	ldr	r1, [pc, #152]	; (2094 <_pwm_init+0x17c>)
    1ffc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2004:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2008:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    200c:	009a      	lsls	r2, r3, #2
    200e:	4b1f      	ldr	r3, [pc, #124]	; (208c <_pwm_init+0x174>)
    2010:	4413      	add	r3, r2
    2012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2016:	2b00      	cmp	r3, #0
    2018:	db09      	blt.n	202e <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    201a:	095a      	lsrs	r2, r3, #5
    201c:	f003 031f 	and.w	r3, r3, #31
    2020:	2101      	movs	r1, #1
    2022:	fa01 f303 	lsl.w	r3, r1, r3
    2026:	3260      	adds	r2, #96	; 0x60
    2028:	491a      	ldr	r1, [pc, #104]	; (2094 <_pwm_init+0x17c>)
    202a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    202e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2032:	00aa      	lsls	r2, r5, #2
    2034:	4b15      	ldr	r3, [pc, #84]	; (208c <_pwm_init+0x174>)
    2036:	4413      	add	r3, r2
    2038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    203c:	2b00      	cmp	r3, #0
    203e:	db21      	blt.n	2084 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2040:	0959      	lsrs	r1, r3, #5
    2042:	f003 031f 	and.w	r3, r3, #31
    2046:	2201      	movs	r2, #1
    2048:	fa02 f303 	lsl.w	r3, r2, r3
    204c:	4a11      	ldr	r2, [pc, #68]	; (2094 <_pwm_init+0x17c>)
    204e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2052:	2000      	movs	r0, #0
    2054:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2056:	4b0d      	ldr	r3, [pc, #52]	; (208c <_pwm_init+0x174>)
    2058:	440b      	add	r3, r1
    205a:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    205c:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    205e:	6923      	ldr	r3, [r4, #16]
    2060:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2064:	d1fb      	bne.n	205e <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2066:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    206a:	009a      	lsls	r2, r3, #2
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <_pwm_init+0x174>)
    206e:	4413      	add	r3, r2
    2070:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2072:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2074:	6923      	ldr	r3, [r4, #16]
    2076:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    207a:	d1fb      	bne.n	2074 <_pwm_init+0x15c>
    207c:	e7a9      	b.n	1fd2 <_pwm_init+0xba>
		return -1;
    207e:	f04f 30ff 	mov.w	r0, #4294967295
    2082:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2084:	2000      	movs	r0, #0
}
    2086:	bd70      	pop	{r4, r5, r6, pc}
    2088:	00001ccd 	.word	0x00001ccd
    208c:	20000000 	.word	0x20000000
    2090:	00001ca5 	.word	0x00001ca5
    2094:	e000e100 	.word	0xe000e100

00002098 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2098:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    209a:	6813      	ldr	r3, [r2, #0]
    209c:	f043 0302 	orr.w	r3, r3, #2
    20a0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20a2:	6913      	ldr	r3, [r2, #16]
    20a4:	f013 0f03 	tst.w	r3, #3
    20a8:	d1fb      	bne.n	20a2 <_timer_start+0xa>
}
    20aa:	4770      	bx	lr

000020ac <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    20ac:	68c2      	ldr	r2, [r0, #12]
    20ae:	6913      	ldr	r3, [r2, #16]
    20b0:	f013 0f03 	tst.w	r3, #3
    20b4:	d1fb      	bne.n	20ae <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20b6:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    20b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    20bc:	4770      	bx	lr

000020be <_tc_get_timer>:
}
    20be:	2000      	movs	r0, #0
    20c0:	4770      	bx	lr

000020c2 <_tc_get_pwm>:
}
    20c2:	2000      	movs	r0, #0
    20c4:	4770      	bx	lr
	...

000020c8 <_timer_set_irq>:
{
    20c8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    20ca:	68c0      	ldr	r0, [r0, #12]
    20cc:	4b08      	ldr	r3, [pc, #32]	; (20f0 <_timer_set_irq+0x28>)
    20ce:	4798      	blx	r3
    20d0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    20d2:	f240 129d 	movw	r2, #413	; 0x19d
    20d6:	4907      	ldr	r1, [pc, #28]	; (20f4 <_timer_set_irq+0x2c>)
    20d8:	2001      	movs	r0, #1
    20da:	4b07      	ldr	r3, [pc, #28]	; (20f8 <_timer_set_irq+0x30>)
    20dc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    20de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    20e2:	00a2      	lsls	r2, r4, #2
    20e4:	4b05      	ldr	r3, [pc, #20]	; (20fc <_timer_set_irq+0x34>)
    20e6:	4413      	add	r3, r2
    20e8:	7898      	ldrb	r0, [r3, #2]
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <_timer_set_irq+0x38>)
    20ec:	4798      	blx	r3
    20ee:	bd10      	pop	{r4, pc}
    20f0:	00001ccd 	.word	0x00001ccd
    20f4:	00002664 	.word	0x00002664
    20f8:	000010d1 	.word	0x000010d1
    20fc:	20000000 	.word	0x20000000
    2100:	00001349 	.word	0x00001349

00002104 <TC0_Handler>:
{
    2104:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2106:	4b02      	ldr	r3, [pc, #8]	; (2110 <TC0_Handler+0xc>)
    2108:	6818      	ldr	r0, [r3, #0]
    210a:	4b02      	ldr	r3, [pc, #8]	; (2114 <TC0_Handler+0x10>)
    210c:	4798      	blx	r3
    210e:	bd08      	pop	{r3, pc}
    2110:	200001f0 	.word	0x200001f0
    2114:	00001c75 	.word	0x00001c75

00002118 <TC1_Handler>:
{
    2118:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    211a:	4b02      	ldr	r3, [pc, #8]	; (2124 <TC1_Handler+0xc>)
    211c:	6858      	ldr	r0, [r3, #4]
    211e:	4b02      	ldr	r3, [pc, #8]	; (2128 <TC1_Handler+0x10>)
    2120:	4798      	blx	r3
    2122:	bd08      	pop	{r3, pc}
    2124:	200001f0 	.word	0x200001f0
    2128:	00001c5d 	.word	0x00001c5d

0000212c <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    212c:	4b14      	ldr	r3, [pc, #80]	; (2180 <I2C_BB_init+0x54>)
    212e:	2201      	movs	r2, #1
    2130:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2138:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    213c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2140:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2144:	490f      	ldr	r1, [pc, #60]	; (2184 <I2C_BB_init+0x58>)
    2146:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    214a:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    214e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2152:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2156:	2204      	movs	r2, #4
    2158:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    215c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2160:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2164:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2168:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    216c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2170:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    2174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2178:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    217c:	4770      	bx	lr
    217e:	bf00      	nop
    2180:	41008000 	.word	0x41008000
    2184:	c0020000 	.word	0xc0020000

00002188 <millisecondTimer_cb>:
void setStatusLED(bool value);
static void millisecondTimer_cb(const struct timer_task *const timer_task);
// --------------------------------------

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
    2188:	4770      	bx	lr
	...

0000218c <spi_BB_Write>:
{
	
}

void spi_BB_Write(uint8_t address, uint16_t value) 
{
    218c:	b570      	push	{r4, r5, r6, lr}
    218e:	4606      	mov	r6, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2194:	4b10      	ldr	r3, [pc, #64]	; (21d8 <spi_BB_Write+0x4c>)
    2196:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	uint8_t i = 0;
	//Bitbang SPI Master.
	//Assuming SS starts high and clock starts low
	
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    219a:	200a      	movs	r0, #10
    219c:	4b0f      	ldr	r3, [pc, #60]	; (21dc <spi_BB_Write+0x50>)
    219e:	4798      	blx	r3
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    21a0:	2408      	movs	r4, #8
    21a2:	e00c      	b.n	21be <spi_BB_Write+0x32>
    21a4:	2210      	movs	r2, #16
    21a6:	4b0c      	ldr	r3, [pc, #48]	; (21d8 <spi_BB_Write+0x4c>)
    21a8:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    21aa:	200a      	movs	r0, #10
    21ac:	4d0b      	ldr	r5, [pc, #44]	; (21dc <spi_BB_Write+0x50>)
    21ae:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21b0:	2220      	movs	r2, #32
    21b2:	4b09      	ldr	r3, [pc, #36]	; (21d8 <spi_BB_Write+0x4c>)
    21b4:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    21b6:	200a      	movs	r0, #10
    21b8:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    21ba:	3c01      	subs	r4, #1
    21bc:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21be:	2220      	movs	r2, #32
    21c0:	4b05      	ldr	r3, [pc, #20]	; (21d8 <spi_BB_Write+0x4c>)
    21c2:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    21c4:	fa46 f304 	asr.w	r3, r6, r4
    21c8:	f013 0f01 	tst.w	r3, #1
    21cc:	d0ea      	beq.n	21a4 <spi_BB_Write+0x18>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21ce:	2210      	movs	r2, #16
    21d0:	4b01      	ldr	r3, [pc, #4]	; (21d8 <spi_BB_Write+0x4c>)
    21d2:	619a      	str	r2, [r3, #24]
    21d4:	e7e9      	b.n	21aa <spi_BB_Write+0x1e>
    21d6:	bf00      	nop
    21d8:	41008000 	.word	0x41008000
    21dc:	00000cb5 	.word	0x00000cb5

000021e0 <EnableClockMngmnt1>:
	delay_us(10);
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

void EnableClockMngmnt1() {
    21e0:	b508      	push	{r3, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    21e2:	2100      	movs	r1, #0
    21e4:	2002      	movs	r0, #2
    21e6:	4b01      	ldr	r3, [pc, #4]	; (21ec <EnableClockMngmnt1+0xc>)
    21e8:	4798      	blx	r3
    21ea:	bf00      	nop
    21ec:	0000218d 	.word	0x0000218d

000021f0 <python480Init>:
{
    21f0:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    21f2:	4b01      	ldr	r3, [pc, #4]	; (21f8 <python480Init+0x8>)
    21f4:	4798      	blx	r3
    21f6:	bf00      	nop
    21f8:	000021e1 	.word	0x000021e1

000021fc <linkedListInit>:
{
	gpio_set_pin_level(LED_STATUS, value);
}

void linkedListInit(void)
{
    21fc:	b538      	push	{r3, r4, r5, lr}
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    21fe:	2300      	movs	r3, #0
    2200:	e019      	b.n	2236 <linkedListInit+0x3a>
		if (i == (NUM_BUFFERS - 1))
			// Last buffer in list. Need to loop back
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
    2202:	4a1e      	ldr	r2, [pc, #120]	; (227c <linkedListInit+0x80>)
    2204:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    2208:	60ca      	str	r2, [r1, #12]
		else
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
		linkedList[i].BTCNT.reg = (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS);
    220a:	481c      	ldr	r0, [pc, #112]	; (227c <linkedListInit+0x80>)
    220c:	011a      	lsls	r2, r3, #4
    220e:	1881      	adds	r1, r0, r2
    2210:	f44f 5420 	mov.w	r4, #10240	; 0x2800
    2214:	804c      	strh	r4, [r1, #2]
		// We aren't actually using the STEPSIZE part of incrementing the destination address. 
		linkedList[i].BTCTRL.reg = DMAC_BTCTRL_STEPSIZE(0) | (CONF_DMAC_STEPSEL_0 << DMAC_BTCTRL_STEPSEL_Pos)						\
    2216:	f44f 6420 	mov.w	r4, #2560	; 0xa00
    221a:	5284      	strh	r4, [r0, r2]
								| (CONF_DMAC_DSTINC_0 << DMAC_BTCTRL_DSTINC_Pos) | (CONF_DMAC_SRCINC_0 << DMAC_BTCTRL_SRCINC_Pos)	\
								| DMAC_BTCTRL_BEATSIZE(CONF_DMAC_BEATSIZE_0) | DMAC_BTCTRL_BLOCKACT(CONF_DMAC_BLOCKACT_0)            \
								| DMAC_BTCTRL_EVOSEL(CONF_DMAC_EVOSEL_0);
	
		linkedList[i].SRCADDR.reg = (uint32_t)(&PCC->RHR.reg);
    221c:	4a18      	ldr	r2, [pc, #96]	; (2280 <linkedListInit+0x84>)
    221e:	604a      	str	r2, [r1, #4]
		// Destination address when incrementing address needs to be the end address and not the start address.
		linkedList[i].DSTADDR.reg = (uint32_t)(&dataBuffer[i][BUFFER_HEADER_LENGTH]) + (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS) * 4;
    2220:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    2224:	0342      	lsls	r2, r0, #13
    2226:	3224      	adds	r2, #36	; 0x24
    2228:	4816      	ldr	r0, [pc, #88]	; (2284 <linkedListInit+0x88>)
    222a:	4402      	add	r2, r0
    222c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2230:	608a      	str	r2, [r1, #8]
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    2232:	3301      	adds	r3, #1
    2234:	b2db      	uxtb	r3, r3
    2236:	2b03      	cmp	r3, #3
    2238:	d809      	bhi.n	224e <linkedListInit+0x52>
		if (i == (NUM_BUFFERS - 1))
    223a:	2b03      	cmp	r3, #3
    223c:	d0e1      	beq.n	2202 <linkedListInit+0x6>
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
    223e:	1c5a      	adds	r2, r3, #1
    2240:	490e      	ldr	r1, [pc, #56]	; (227c <linkedListInit+0x80>)
    2242:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    2246:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    224a:	60ca      	str	r2, [r1, #12]
    224c:	e7dd      	b.n	220a <linkedListInit+0xe>
	}
	// Set up initial DMA descriptor for DMA channel handling PCC. BTCNT is already setup in DMA init step
	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, linkedList[0].SRCADDR.reg);
    224e:	4c0b      	ldr	r4, [pc, #44]	; (227c <linkedListInit+0x80>)
    2250:	6861      	ldr	r1, [r4, #4]
    2252:	2000      	movs	r0, #0
    2254:	4b0c      	ldr	r3, [pc, #48]	; (2288 <linkedListInit+0x8c>)
    2256:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, linkedList[0].DSTADDR.reg);
    2258:	68a1      	ldr	r1, [r4, #8]
    225a:	2000      	movs	r0, #0
    225c:	4d0b      	ldr	r5, [pc, #44]	; (228c <linkedListInit+0x90>)
    225e:	47a8      	blx	r5
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS));
    2260:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    2264:	2000      	movs	r0, #0
    2266:	4b0a      	ldr	r3, [pc, #40]	; (2290 <linkedListInit+0x94>)
    2268:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, linkedList[0].DSTADDR.reg); // Overwrite destination address since set_data_amount function modifies this
    226a:	68a1      	ldr	r1, [r4, #8]
    226c:	2000      	movs	r0, #0
    226e:	47a8      	blx	r5
	_dma_set_next_descriptor(CONF_PCC_DMA_CHANNEL, linkedList[0].DESCADDR.reg);
    2270:	68e1      	ldr	r1, [r4, #12]
    2272:	2000      	movs	r0, #0
    2274:	4b07      	ldr	r3, [pc, #28]	; (2294 <linkedListInit+0x98>)
    2276:	4798      	blx	r3
    2278:	bd38      	pop	{r3, r4, r5, pc}
    227a:	bf00      	nop
    227c:	20000ae8 	.word	0x20000ae8
    2280:	43002c14 	.word	0x43002c14
    2284:	20000b2c 	.word	0x20000b2c
    2288:	00001555 	.word	0x00001555
    228c:	00001545 	.word	0x00001545
    2290:	00001579 	.word	0x00001579
    2294:	00001565 	.word	0x00001565

00002298 <main>:
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}


int main(void)
{
    2298:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    229a:	4b0d      	ldr	r3, [pc, #52]	; (22d0 <main+0x38>)
    229c:	4798      	blx	r3
    229e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    22a2:	4b0c      	ldr	r3, [pc, #48]	; (22d4 <main+0x3c>)
    22a4:	619a      	str	r2, [r3, #24]
	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	I2C_BB_init();
    22a6:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <main+0x40>)
    22a8:	4798      	blx	r3
	
	linkedListInit(); // Sets up a set of circularly linked list for camera DMA.
    22aa:	4b0c      	ldr	r3, [pc, #48]	; (22dc <main+0x44>)
    22ac:	4798      	blx	r3
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 100;
    22ae:	490c      	ldr	r1, [pc, #48]	; (22e0 <main+0x48>)
    22b0:	2364      	movs	r3, #100	; 0x64
    22b2:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb       = millisecondTimer_cb;
    22b4:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <main+0x4c>)
    22b6:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    22b8:	2301      	movs	r3, #1
    22ba:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    22bc:	4c0a      	ldr	r4, [pc, #40]	; (22e8 <main+0x50>)
    22be:	4620      	mov	r0, r4
    22c0:	4b0a      	ldr	r3, [pc, #40]	; (22ec <main+0x54>)
    22c2:	4798      	blx	r3
	timer_start(&TIMER_0);
    22c4:	4620      	mov	r0, r4
    22c6:	4b0a      	ldr	r3, [pc, #40]	; (22f0 <main+0x58>)
    22c8:	4798      	blx	r3
	
	// Wait for SD Card and then load config from it
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	python480Init();
    22ca:	4b0a      	ldr	r3, [pc, #40]	; (22f4 <main+0x5c>)
    22cc:	4798      	blx	r3
    22ce:	bf00      	nop
    22d0:	000002d1 	.word	0x000002d1
    22d4:	41008000 	.word	0x41008000
    22d8:	0000212d 	.word	0x0000212d
    22dc:	000021fd 	.word	0x000021fd
    22e0:	200001f8 	.word	0x200001f8
    22e4:	00002189 	.word	0x00002189
    22e8:	200006b0 	.word	0x200006b0
    22ec:	00000f0d 	.word	0x00000f0d
    22f0:	00000ed1 	.word	0x00000ed1
    22f4:	000021f1 	.word	0x000021f1

000022f8 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    22f8:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    22fa:	2300      	movs	r3, #0
    22fc:	b13b      	cbz	r3, 230e <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    22fe:	4b08      	ldr	r3, [pc, #32]	; (2320 <sd_mmc_init+0x28>)
    2300:	24ff      	movs	r4, #255	; 0xff
    2302:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    2304:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    2306:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    2308:	635a      	str	r2, [r3, #52]	; 0x34
}
    230a:	bc30      	pop	{r4, r5}
    230c:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    230e:	4c04      	ldr	r4, [pc, #16]	; (2320 <sd_mmc_init+0x28>)
    2310:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    2314:	2504      	movs	r5, #4
    2316:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    2318:	3301      	adds	r3, #1
    231a:	b2db      	uxtb	r3, r3
    231c:	e7ee      	b.n	22fc <sd_mmc_init+0x4>
    231e:	bf00      	nop
    2320:	2000061c 	.word	0x2000061c

00002324 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    2324:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    2326:	4903      	ldr	r1, [pc, #12]	; (2334 <sd_mmc_stack_init+0x10>)
    2328:	460a      	mov	r2, r1
    232a:	3104      	adds	r1, #4
    232c:	4802      	ldr	r0, [pc, #8]	; (2338 <sd_mmc_stack_init+0x14>)
    232e:	4b03      	ldr	r3, [pc, #12]	; (233c <sd_mmc_stack_init+0x18>)
    2330:	4798      	blx	r3
    2332:	bd08      	pop	{r3, pc}
    2334:	20000028 	.word	0x20000028
    2338:	20000698 	.word	0x20000698
    233c:	000022f9 	.word	0x000022f9

00002340 <__libc_init_array>:
    2340:	b570      	push	{r4, r5, r6, lr}
    2342:	4e0d      	ldr	r6, [pc, #52]	; (2378 <__libc_init_array+0x38>)
    2344:	4c0d      	ldr	r4, [pc, #52]	; (237c <__libc_init_array+0x3c>)
    2346:	1ba4      	subs	r4, r4, r6
    2348:	10a4      	asrs	r4, r4, #2
    234a:	2500      	movs	r5, #0
    234c:	42a5      	cmp	r5, r4
    234e:	d109      	bne.n	2364 <__libc_init_array+0x24>
    2350:	4e0b      	ldr	r6, [pc, #44]	; (2380 <__libc_init_array+0x40>)
    2352:	4c0c      	ldr	r4, [pc, #48]	; (2384 <__libc_init_array+0x44>)
    2354:	f000 f990 	bl	2678 <_init>
    2358:	1ba4      	subs	r4, r4, r6
    235a:	10a4      	asrs	r4, r4, #2
    235c:	2500      	movs	r5, #0
    235e:	42a5      	cmp	r5, r4
    2360:	d105      	bne.n	236e <__libc_init_array+0x2e>
    2362:	bd70      	pop	{r4, r5, r6, pc}
    2364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2368:	4798      	blx	r3
    236a:	3501      	adds	r5, #1
    236c:	e7ee      	b.n	234c <__libc_init_array+0xc>
    236e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2372:	4798      	blx	r3
    2374:	3501      	adds	r5, #1
    2376:	e7f2      	b.n	235e <__libc_init_array+0x1e>
    2378:	00002684 	.word	0x00002684
    237c:	00002684 	.word	0x00002684
    2380:	00002684 	.word	0x00002684
    2384:	00002688 	.word	0x00002688
    2388:	682f2e2e 	.word	0x682f2e2e
    238c:	732f6c61 	.word	0x732f6c61
    2390:	682f6372 	.word	0x682f6372
    2394:	615f6c61 	.word	0x615f6c61
    2398:	735f6364 	.word	0x735f6364
    239c:	2e636e79 	.word	0x2e636e79
    23a0:	00000063 	.word	0x00000063
    23a4:	682f2e2e 	.word	0x682f2e2e
    23a8:	732f6c61 	.word	0x732f6c61
    23ac:	682f6372 	.word	0x682f6372
    23b0:	635f6c61 	.word	0x635f6c61
    23b4:	72656d61 	.word	0x72656d61
    23b8:	73615f61 	.word	0x73615f61
    23bc:	2e636e79 	.word	0x2e636e79
    23c0:	00000063 	.word	0x00000063
    23c4:	682f2e2e 	.word	0x682f2e2e
    23c8:	732f6c61 	.word	0x732f6c61
    23cc:	682f6372 	.word	0x682f6372
    23d0:	6d5f6c61 	.word	0x6d5f6c61
    23d4:	735f6963 	.word	0x735f6963
    23d8:	2e636e79 	.word	0x2e636e79
    23dc:	00000063 	.word	0x00000063
    23e0:	682f2e2e 	.word	0x682f2e2e
    23e4:	732f6c61 	.word	0x732f6c61
    23e8:	682f6372 	.word	0x682f6372
    23ec:	705f6c61 	.word	0x705f6c61
    23f0:	632e6d77 	.word	0x632e6d77
    23f4:	00000000 	.word	0x00000000
    23f8:	682f2e2e 	.word	0x682f2e2e
    23fc:	732f6c61 	.word	0x732f6c61
    2400:	682f6372 	.word	0x682f6372
    2404:	745f6c61 	.word	0x745f6c61
    2408:	72656d69 	.word	0x72656d69
    240c:	0000632e 	.word	0x0000632e
    2410:	682f2e2e 	.word	0x682f2e2e
    2414:	732f6c61 	.word	0x732f6c61
    2418:	682f6372 	.word	0x682f6372
    241c:	755f6c61 	.word	0x755f6c61
    2420:	74726173 	.word	0x74726173
    2424:	6e79735f 	.word	0x6e79735f
    2428:	00632e63 	.word	0x00632e63
    242c:	682f2e2e 	.word	0x682f2e2e
    2430:	752f6c61 	.word	0x752f6c61
    2434:	736c6974 	.word	0x736c6974
    2438:	6372732f 	.word	0x6372732f
    243c:	6974752f 	.word	0x6974752f
    2440:	6c5f736c 	.word	0x6c5f736c
    2444:	2e747369 	.word	0x2e747369
    2448:	00000063 	.word	0x00000063

0000244c <_adcs>:
    244c:	00000000 00000018 00001800 00000000     ................
	...
    2464:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2474:	632e6364 00000000                       dc.c....

0000247c <_cfgs>:
    247c:	00205000 0a000000 00000000 00000000     .P .............
	...

0000257c <_map>:
    257c:	00000006 00000036 00000007 00000037     ....6.......7...
    258c:	0000000e 0000002e 682f2e2e 652f6c70     ........../hpl/e
    259c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    25ac:	682f2e2e 732f6c70 2f636864 5f6c7068     ../hpl/sdhc/hpl_
    25bc:	63686473 0000632e 40003000 40003400     sdhc.c...0.@.4.@
    25cc:	41012000 41014000 43000000 43000400     . .A.@.A...C...C

000025dc <_usarts>:
    25dc:	00000005 40100004 00030000 00700002     .......@......p.
    25ec:	0000ff2e 00000000                       ........

000025f4 <_i2cms>:
	...

0000260c <_i2css>:
	...

0000261c <sercomspi_regs>:
	...
    2630:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2640:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    2650:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    2660:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    2670:	63745f6c 0000632e                       l_tc.c..

00002678 <_init>:
    2678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    267a:	bf00      	nop
    267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    267e:	bc08      	pop	{r3}
    2680:	469e      	mov	lr, r3
    2682:	4770      	bx	lr

00002684 <__init_array_start>:
    2684:	00000289 	.word	0x00000289

00002688 <_fini>:
    2688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268a:	bf00      	nop
    268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    268e:	bc08      	pop	{r3}
    2690:	469e      	mov	lr, r3
    2692:	4770      	bx	lr

00002694 <__fini_array_start>:
    2694:	00000265 	.word	0x00000265
