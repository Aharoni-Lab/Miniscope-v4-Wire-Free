
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004884  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004884  00004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  0000488c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
  5 .bss          00028ba4  20000040  000048d0  00020040  2**4
                  ALLOC
  6 .stack        00010004  20028be4  0002d474  00020040  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
  9 .debug_info   000435e1  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058df  00000000  00000000  000636a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001949b  00000000  00000000  00068f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001420  00000000  00000000  0008241a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014d0  00000000  00000000  0008383a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00032f18  00000000  00000000  00084d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f0da  00000000  00000000  000b7c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100b52  00000000  00000000  000d6cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000353c  00000000  00000000  001d7850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 a5 1d 00 00     ................
      8c:	b1 1d 00 00 e5 02 00 00 bd 1d 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c9 1d 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	45 1b 00 00 51 1b 00 00 5d 1b 00 00 69 1b 00 00     E...Q...]...i...
      cc:	75 1b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     u...............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	21 20 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ! ..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 cd 28 00 00 e1 28 00 00 f5 28 00 00     .....(...(...(..
     154:	09 29 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .)..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c9 2e 00 00     ................
     1f0:	dd 2e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 f5 1f 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	0000488c 	.word	0x0000488c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000488c 	.word	0x0000488c
     2c4:	20000044 	.word	0x20000044
     2c8:	0000488c 	.word	0x0000488c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
     2d0:	b508      	push	{r3, lr}
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	000041bd 	.word	0x000041bd

000002e4 <Dummy_Handler>:
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
     2e8:	b508      	push	{r3, lr}
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	0000488c 	.word	0x0000488c
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028be4 	.word	0x20028be4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	000044e9 	.word	0x000044e9
     360:	00003cd1 	.word	0x00003cd1

00000364 <TIMER_0_init>:
     364:	b508      	push	{r3, lr}
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002e85 	.word	0x00002e85
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	00001251 	.word	0x00001251

000003a0 <ADC_0_PORT_init>:
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     3ba:	f042 0201 	orr.w	r2, r2, #1
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     3ca:	f042 0201 	orr.w	r2, r2, #1
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
     3f4:	b508      	push	{r3, lr}
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     45e:	f042 0201 	orr.w	r2, r2, #1
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     498:	f042 0201 	orr.w	r2, r2, #1
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
     4a4:	f002 020f 	and.w	r2, r2, #15
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     4cc:	f042 0201 	orr.w	r2, r2, #1
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
     4d8:	f002 020f 	and.w	r2, r2, #15
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     508:	f042 0201 	orr.w	r2, r2, #1
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     556:	f042 0201 	orr.w	r2, r2, #1
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     566:	f042 020a 	orr.w	r2, r2, #10
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     576:	f042 0201 	orr.w	r2, r2, #1
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     586:	f042 020a 	orr.w	r2, r2, #10
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     596:	f042 0201 	orr.w	r2, r2, #1
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
     5a2:	f002 020f 	and.w	r2, r2, #15
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5b6:	f042 0201 	orr.w	r2, r2, #1
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     5c6:	f042 020a 	orr.w	r2, r2, #10
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5d6:	f042 0201 	orr.w	r2, r2, #1
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
     5e2:	f002 020f 	and.w	r2, r2, #15
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5f6:	f042 0201 	orr.w	r2, r2, #1
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     606:	f042 020a 	orr.w	r2, r2, #10
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     616:	f042 0201 	orr.w	r2, r2, #1
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
     622:	f002 020f 	and.w	r2, r2, #15
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     636:	f042 0201 	orr.w	r2, r2, #1
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     646:	f042 020a 	orr.w	r2, r2, #10
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     656:	f042 0201 	orr.w	r2, r2, #1
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     662:	f002 020f 	and.w	r2, r2, #15
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     676:	f042 0201 	orr.w	r2, r2, #1
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     686:	f042 020a 	orr.w	r2, r2, #10
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     696:	f042 0201 	orr.w	r2, r2, #1
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
     6a2:	f002 020f 	and.w	r2, r2, #15
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
     6c4:	b508      	push	{r3, lr}
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     71a:	f042 0201 	orr.w	r2, r2, #1
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     72a:	f042 0202 	orr.w	r2, r2, #2
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     73a:	f042 0201 	orr.w	r2, r2, #1
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     746:	f002 020f 	and.w	r2, r2, #15
     74a:	f042 0220 	orr.w	r2, r2, #32
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	000014cd 	.word	0x000014cd
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
     790:	b470      	push	{r4, r5, r6}
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     7c2:	f041 0101 	orr.w	r1, r1, #1
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
     7ce:	f001 010f 	and.w	r1, r1, #15
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
     7e6:	6159      	str	r1, [r3, #20]
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     7fc:	f041 0101 	orr.w	r1, r1, #1
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
     80c:	f041 0108 	orr.w	r1, r1, #8
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
     822:	6159      	str	r1, [r3, #20]
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     838:	f041 0101 	orr.w	r1, r1, #1
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
     844:	f001 010f 	and.w	r1, r1, #15
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
     85c:	6158      	str	r0, [r3, #20]
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     872:	f041 0101 	orr.w	r1, r1, #1
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
     882:	f041 0108 	orr.w	r1, r1, #8
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
     88a:	609d      	str	r5, [r3, #8]
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
     890:	615d      	str	r5, [r3, #20]
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     8a6:	f041 0101 	orr.w	r1, r1, #1
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
     8b2:	f001 010f 	and.w	r1, r1, #15
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     8e2:	f042 0201 	orr.w	r2, r2, #1
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     8f2:	f042 0208 	orr.w	r2, r2, #8
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
     930:	b508      	push	{r3, lr}
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
     958:	b508      	push	{r3, lr}
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     976:	f043 0301 	orr.w	r3, r3, #1
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     986:	f043 0304 	orr.w	r3, r3, #4
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
     9b0:	b508      	push	{r3, lr}
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	00002e89 	.word	0x00002e89
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	000010e9 	.word	0x000010e9

000009e4 <system_init>:
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
     9f0:	609a      	str	r2, [r3, #8]
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
     a0e:	609d      	str	r5, [r3, #8]
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
     a7a:	6099      	str	r1, [r3, #8]
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
     a94:	609e      	str	r6, [r3, #8]
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     bce:	f042 0201 	orr.w	r2, r2, #1
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
     bda:	f002 020f 	and.w	r2, r2, #15
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001969 	.word	0x00001969
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
     c5c:	bd38      	pop	{r3, r4, r5, pc}
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	00004530 	.word	0x00004530
     c6c:	00001561 	.word	0x00001561
     c70:	00001891 	.word	0x00001891

00000c74 <adc_sync_enable_channel>:
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	00004530 	.word	0x00004530
     c98:	00001561 	.word	0x00001561
     c9c:	000018c9 	.word	0x000018c9

00000ca0 <adc_sync_read_channel>:
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
     d10:	f808 0006 	strb.w	r0, [r8, r6]
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	00001561 	.word	0x00001561
     d2c:	000018df 	.word	0x000018df
     d30:	000018ff 	.word	0x000018ff
     d34:	000018f3 	.word	0x000018f3
     d38:	00001915 	.word	0x00001915
     d3c:	00004530 	.word	0x00004530

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
     d5a:	b508      	push	{r3, lr}
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	0000454c 	.word	0x0000454c
     d94:	00001561 	.word	0x00001561
     d98:	00001fbd 	.word	0x00001fbd
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:
     da0:	b508      	push	{r3, lr}
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	00002931 	.word	0x00002931

00000db4 <delay_us>:
     db4:	b510      	push	{r4, lr}
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	0000193d 	.word	0x0000193d
     dd0:	0000293d 	.word	0x0000293d

00000dd4 <delay_ms>:
     dd4:	b510      	push	{r4, lr}
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	00001959 	.word	0x00001959
     df0:	0000293d 	.word	0x0000293d

00000df4 <process_ext_irq>:
     df4:	b538      	push	{r3, r4, r5, lr}
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
     e38:	b508      	push	{r3, lr}
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001c45 	.word	0x00001c45

00000e6c <ext_irq_register>:
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
     e72:	2300      	movs	r3, #0
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
     e92:	2701      	movs	r7, #1
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
     e96:	2700      	movs	r7, #0
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001d4d 	.word	0x00001d4d

00000f3c <mci_sync_init>:
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
     f58:	bd38      	pop	{r3, r4, r5, pc}
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
     f64:	0000456c 	.word	0x0000456c
     f68:	00001561 	.word	0x00001561
     f6c:	00002279 	.word	0x00002279

00000f70 <mci_sync_select_device>:
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	0000456c 	.word	0x0000456c
     fa4:	00001561 	.word	0x00001561
     fa8:	000022e1 	.word	0x000022e1

00000fac <mci_sync_deselect_device>:
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
     fcc:	0000456c 	.word	0x0000456c
     fd0:	00001561 	.word	0x00001561
     fd4:	00002375 	.word	0x00002375

00000fd8 <mci_sync_send_cmd>:
     fd8:	b570      	push	{r4, r5, r6, lr}
     fda:	460d      	mov	r5, r1
     fdc:	4616      	mov	r6, r2
     fde:	4604      	mov	r4, r0
     fe0:	2272      	movs	r2, #114	; 0x72
     fe2:	4906      	ldr	r1, [pc, #24]	; (ffc <mci_sync_send_cmd+0x24>)
     fe4:	3000      	adds	r0, #0
     fe6:	bf18      	it	ne
     fe8:	2001      	movne	r0, #1
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <mci_sync_send_cmd+0x28>)
     fec:	4798      	blx	r3
     fee:	4632      	mov	r2, r6
     ff0:	4629      	mov	r1, r5
     ff2:	4620      	mov	r0, r4
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <mci_sync_send_cmd+0x2c>)
     ff6:	4798      	blx	r3
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	bf00      	nop
     ffc:	0000456c 	.word	0x0000456c
    1000:	00001561 	.word	0x00001561
    1004:	00002379 	.word	0x00002379

00001008 <mci_sync_get_response>:
    1008:	b510      	push	{r4, lr}
    100a:	4604      	mov	r4, r0
    100c:	227b      	movs	r2, #123	; 0x7b
    100e:	4905      	ldr	r1, [pc, #20]	; (1024 <mci_sync_get_response+0x1c>)
    1010:	3000      	adds	r0, #0
    1012:	bf18      	it	ne
    1014:	2001      	movne	r0, #1
    1016:	4b04      	ldr	r3, [pc, #16]	; (1028 <mci_sync_get_response+0x20>)
    1018:	4798      	blx	r3
    101a:	4620      	mov	r0, r4
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <mci_sync_get_response+0x24>)
    101e:	4798      	blx	r3
    1020:	bd10      	pop	{r4, pc}
    1022:	bf00      	nop
    1024:	0000456c 	.word	0x0000456c
    1028:	00001561 	.word	0x00001561
    102c:	000023d1 	.word	0x000023d1

00001030 <mci_sync_adtc_start>:
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	b083      	sub	sp, #12
    1034:	460d      	mov	r5, r1
    1036:	4616      	mov	r6, r2
    1038:	461f      	mov	r7, r3
    103a:	4604      	mov	r4, r0
    103c:	2290      	movs	r2, #144	; 0x90
    103e:	490a      	ldr	r1, [pc, #40]	; (1068 <mci_sync_adtc_start+0x38>)
    1040:	3000      	adds	r0, #0
    1042:	bf18      	it	ne
    1044:	2001      	movne	r0, #1
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <mci_sync_adtc_start+0x3c>)
    1048:	4798      	blx	r3
    104a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    104e:	9301      	str	r3, [sp, #4]
    1050:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1054:	9300      	str	r3, [sp, #0]
    1056:	463b      	mov	r3, r7
    1058:	4632      	mov	r2, r6
    105a:	4629      	mov	r1, r5
    105c:	4620      	mov	r0, r4
    105e:	4c04      	ldr	r4, [pc, #16]	; (1070 <mci_sync_adtc_start+0x40>)
    1060:	47a0      	blx	r4
    1062:	b003      	add	sp, #12
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	bf00      	nop
    1068:	0000456c 	.word	0x0000456c
    106c:	00001561 	.word	0x00001561
    1070:	000023fd 	.word	0x000023fd

00001074 <mci_sync_start_write_blocks>:
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	460c      	mov	r4, r1
    1078:	4616      	mov	r6, r2
    107a:	4605      	mov	r5, r0
    107c:	b168      	cbz	r0, 109a <mci_sync_start_write_blocks+0x26>
    107e:	b151      	cbz	r1, 1096 <mci_sync_start_write_blocks+0x22>
    1080:	2001      	movs	r0, #1
    1082:	22be      	movs	r2, #190	; 0xbe
    1084:	4906      	ldr	r1, [pc, #24]	; (10a0 <mci_sync_start_write_blocks+0x2c>)
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <mci_sync_start_write_blocks+0x30>)
    1088:	4798      	blx	r3
    108a:	4632      	mov	r2, r6
    108c:	4621      	mov	r1, r4
    108e:	4628      	mov	r0, r5
    1090:	4b05      	ldr	r3, [pc, #20]	; (10a8 <mci_sync_start_write_blocks+0x34>)
    1092:	4798      	blx	r3
    1094:	bd70      	pop	{r4, r5, r6, pc}
    1096:	2000      	movs	r0, #0
    1098:	e7f3      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109a:	2000      	movs	r0, #0
    109c:	e7f1      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109e:	bf00      	nop
    10a0:	0000456c 	.word	0x0000456c
    10a4:	00001561 	.word	0x00001561
    10a8:	00002565 	.word	0x00002565

000010ac <mci_sync_wait_end_of_write_blocks>:
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	22d0      	movs	r2, #208	; 0xd0
    10b2:	4905      	ldr	r1, [pc, #20]	; (10c8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    10b4:	3000      	adds	r0, #0
    10b6:	bf18      	it	ne
    10b8:	2001      	movne	r0, #1
    10ba:	4b04      	ldr	r3, [pc, #16]	; (10cc <mci_sync_wait_end_of_write_blocks+0x20>)
    10bc:	4798      	blx	r3
    10be:	4620      	mov	r0, r4
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <mci_sync_wait_end_of_write_blocks+0x24>)
    10c2:	4798      	blx	r3
    10c4:	bd10      	pop	{r4, pc}
    10c6:	bf00      	nop
    10c8:	0000456c 	.word	0x0000456c
    10cc:	00001561 	.word	0x00001561
    10d0:	000025e5 	.word	0x000025e5

000010d4 <pwm_period_expired>:
    10d4:	b508      	push	{r3, lr}
    10d6:	6943      	ldr	r3, [r0, #20]
    10d8:	b103      	cbz	r3, 10dc <pwm_period_expired+0x8>
    10da:	4798      	blx	r3
    10dc:	bd08      	pop	{r3, pc}

000010de <pwm_detect_fault>:
    10de:	b508      	push	{r3, lr}
    10e0:	6983      	ldr	r3, [r0, #24]
    10e2:	b103      	cbz	r3, 10e6 <pwm_detect_fault+0x8>
    10e4:	4798      	blx	r3
    10e6:	bd08      	pop	{r3, pc}

000010e8 <pwm_init>:
    10e8:	b538      	push	{r3, r4, r5, lr}
    10ea:	460d      	mov	r5, r1
    10ec:	4604      	mov	r4, r0
    10ee:	b188      	cbz	r0, 1114 <pwm_init+0x2c>
    10f0:	b171      	cbz	r1, 1110 <pwm_init+0x28>
    10f2:	2001      	movs	r0, #1
    10f4:	2233      	movs	r2, #51	; 0x33
    10f6:	4908      	ldr	r1, [pc, #32]	; (1118 <pwm_init+0x30>)
    10f8:	4b08      	ldr	r3, [pc, #32]	; (111c <pwm_init+0x34>)
    10fa:	4798      	blx	r3
    10fc:	4629      	mov	r1, r5
    10fe:	4620      	mov	r0, r4
    1100:	4b07      	ldr	r3, [pc, #28]	; (1120 <pwm_init+0x38>)
    1102:	4798      	blx	r3
    1104:	4b07      	ldr	r3, [pc, #28]	; (1124 <pwm_init+0x3c>)
    1106:	6023      	str	r3, [r4, #0]
    1108:	4b07      	ldr	r3, [pc, #28]	; (1128 <pwm_init+0x40>)
    110a:	6063      	str	r3, [r4, #4]
    110c:	2000      	movs	r0, #0
    110e:	bd38      	pop	{r3, r4, r5, pc}
    1110:	2000      	movs	r0, #0
    1112:	e7ef      	b.n	10f4 <pwm_init+0xc>
    1114:	2000      	movs	r0, #0
    1116:	e7ed      	b.n	10f4 <pwm_init+0xc>
    1118:	00004588 	.word	0x00004588
    111c:	00001561 	.word	0x00001561
    1120:	00002c39 	.word	0x00002c39
    1124:	000010d5 	.word	0x000010d5
    1128:	000010df 	.word	0x000010df

0000112c <pwm_enable>:
    112c:	b510      	push	{r4, lr}
    112e:	4604      	mov	r4, r0
    1130:	224a      	movs	r2, #74	; 0x4a
    1132:	4909      	ldr	r1, [pc, #36]	; (1158 <pwm_enable+0x2c>)
    1134:	3000      	adds	r0, #0
    1136:	bf18      	it	ne
    1138:	2001      	movne	r0, #1
    113a:	4b08      	ldr	r3, [pc, #32]	; (115c <pwm_enable+0x30>)
    113c:	4798      	blx	r3
    113e:	4620      	mov	r0, r4
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <pwm_enable+0x34>)
    1142:	4798      	blx	r3
    1144:	b920      	cbnz	r0, 1150 <pwm_enable+0x24>
    1146:	4620      	mov	r0, r4
    1148:	4b06      	ldr	r3, [pc, #24]	; (1164 <pwm_enable+0x38>)
    114a:	4798      	blx	r3
    114c:	2000      	movs	r0, #0
    114e:	bd10      	pop	{r4, pc}
    1150:	f06f 0010 	mvn.w	r0, #16
    1154:	bd10      	pop	{r4, pc}
    1156:	bf00      	nop
    1158:	00004588 	.word	0x00004588
    115c:	00001561 	.word	0x00001561
    1160:	00002e73 	.word	0x00002e73
    1164:	00002dcd 	.word	0x00002dcd

00001168 <pwm_set_parameters>:
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	460d      	mov	r5, r1
    116c:	4616      	mov	r6, r2
    116e:	4604      	mov	r4, r0
    1170:	227c      	movs	r2, #124	; 0x7c
    1172:	4906      	ldr	r1, [pc, #24]	; (118c <pwm_set_parameters+0x24>)
    1174:	3000      	adds	r0, #0
    1176:	bf18      	it	ne
    1178:	2001      	movne	r0, #1
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <pwm_set_parameters+0x28>)
    117c:	4798      	blx	r3
    117e:	4632      	mov	r2, r6
    1180:	4629      	mov	r1, r5
    1182:	4620      	mov	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <pwm_set_parameters+0x2c>)
    1186:	4798      	blx	r3
    1188:	2000      	movs	r0, #0
    118a:	bd70      	pop	{r4, r5, r6, pc}
    118c:	00004588 	.word	0x00004588
    1190:	00001561 	.word	0x00001561
    1194:	00002de1 	.word	0x00002de1

00001198 <timer_add_timer_task>:
    1198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119a:	6807      	ldr	r7, [r0, #0]
    119c:	b117      	cbz	r7, 11a4 <timer_add_timer_task+0xc>
    119e:	463c      	mov	r4, r7
    11a0:	2600      	movs	r6, #0
    11a2:	e00b      	b.n	11bc <timer_add_timer_task+0x24>
    11a4:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <timer_add_timer_task+0x48>)
    11a6:	4798      	blx	r3
    11a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11aa:	68a5      	ldr	r5, [r4, #8]
    11ac:	442b      	add	r3, r5
    11ae:	1a9b      	subs	r3, r3, r2
    11b0:	3301      	adds	r3, #1
    11b2:	688d      	ldr	r5, [r1, #8]
    11b4:	42ab      	cmp	r3, r5
    11b6:	d209      	bcs.n	11cc <timer_add_timer_task+0x34>
    11b8:	4626      	mov	r6, r4
    11ba:	6824      	ldr	r4, [r4, #0]
    11bc:	b134      	cbz	r4, 11cc <timer_add_timer_task+0x34>
    11be:	6863      	ldr	r3, [r4, #4]
    11c0:	4293      	cmp	r3, r2
    11c2:	d8f2      	bhi.n	11aa <timer_add_timer_task+0x12>
    11c4:	68a5      	ldr	r5, [r4, #8]
    11c6:	1a9b      	subs	r3, r3, r2
    11c8:	442b      	add	r3, r5
    11ca:	e7f2      	b.n	11b2 <timer_add_timer_task+0x1a>
    11cc:	42bc      	cmp	r4, r7
    11ce:	d003      	beq.n	11d8 <timer_add_timer_task+0x40>
    11d0:	4630      	mov	r0, r6
    11d2:	4b04      	ldr	r3, [pc, #16]	; (11e4 <timer_add_timer_task+0x4c>)
    11d4:	4798      	blx	r3
    11d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11d8:	4b01      	ldr	r3, [pc, #4]	; (11e0 <timer_add_timer_task+0x48>)
    11da:	4798      	blx	r3
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11de:	bf00      	nop
    11e0:	0000157d 	.word	0x0000157d
    11e4:	000015a9 	.word	0x000015a9

000011e8 <timer_process_counted>:
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	6944      	ldr	r4, [r0, #20]
    11ec:	6906      	ldr	r6, [r0, #16]
    11ee:	3601      	adds	r6, #1
    11f0:	6106      	str	r6, [r0, #16]
    11f2:	7e03      	ldrb	r3, [r0, #24]
    11f4:	f013 0f01 	tst.w	r3, #1
    11f8:	d105      	bne.n	1206 <timer_process_counted+0x1e>
    11fa:	7e03      	ldrb	r3, [r0, #24]
    11fc:	f013 0f02 	tst.w	r3, #2
    1200:	d101      	bne.n	1206 <timer_process_counted+0x1e>
    1202:	4605      	mov	r5, r0
    1204:	e009      	b.n	121a <timer_process_counted+0x32>
    1206:	7e03      	ldrb	r3, [r0, #24]
    1208:	f043 0302 	orr.w	r3, r3, #2
    120c:	7603      	strb	r3, [r0, #24]
    120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1210:	696f      	ldr	r7, [r5, #20]
    1212:	68e3      	ldr	r3, [r4, #12]
    1214:	4620      	mov	r0, r4
    1216:	4798      	blx	r3
    1218:	463c      	mov	r4, r7
    121a:	b19c      	cbz	r4, 1244 <timer_process_counted+0x5c>
    121c:	6863      	ldr	r3, [r4, #4]
    121e:	1af3      	subs	r3, r6, r3
    1220:	68a2      	ldr	r2, [r4, #8]
    1222:	4293      	cmp	r3, r2
    1224:	d30e      	bcc.n	1244 <timer_process_counted+0x5c>
    1226:	f105 0714 	add.w	r7, r5, #20
    122a:	4638      	mov	r0, r7
    122c:	4b06      	ldr	r3, [pc, #24]	; (1248 <timer_process_counted+0x60>)
    122e:	4798      	blx	r3
    1230:	7c23      	ldrb	r3, [r4, #16]
    1232:	2b01      	cmp	r3, #1
    1234:	d1ec      	bne.n	1210 <timer_process_counted+0x28>
    1236:	6066      	str	r6, [r4, #4]
    1238:	4632      	mov	r2, r6
    123a:	4621      	mov	r1, r4
    123c:	4638      	mov	r0, r7
    123e:	4b03      	ldr	r3, [pc, #12]	; (124c <timer_process_counted+0x64>)
    1240:	4798      	blx	r3
    1242:	e7e5      	b.n	1210 <timer_process_counted+0x28>
    1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1246:	bf00      	nop
    1248:	000015b1 	.word	0x000015b1
    124c:	00001199 	.word	0x00001199

00001250 <timer_init>:
    1250:	b538      	push	{r3, r4, r5, lr}
    1252:	460d      	mov	r5, r1
    1254:	4604      	mov	r4, r0
    1256:	b180      	cbz	r0, 127a <timer_init+0x2a>
    1258:	b169      	cbz	r1, 1276 <timer_init+0x26>
    125a:	2001      	movs	r0, #1
    125c:	223b      	movs	r2, #59	; 0x3b
    125e:	4908      	ldr	r1, [pc, #32]	; (1280 <timer_init+0x30>)
    1260:	4b08      	ldr	r3, [pc, #32]	; (1284 <timer_init+0x34>)
    1262:	4798      	blx	r3
    1264:	4629      	mov	r1, r5
    1266:	4620      	mov	r0, r4
    1268:	4b07      	ldr	r3, [pc, #28]	; (1288 <timer_init+0x38>)
    126a:	4798      	blx	r3
    126c:	2000      	movs	r0, #0
    126e:	6120      	str	r0, [r4, #16]
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <timer_init+0x3c>)
    1272:	6023      	str	r3, [r4, #0]
    1274:	bd38      	pop	{r3, r4, r5, pc}
    1276:	2000      	movs	r0, #0
    1278:	e7f0      	b.n	125c <timer_init+0xc>
    127a:	2000      	movs	r0, #0
    127c:	e7ee      	b.n	125c <timer_init+0xc>
    127e:	bf00      	nop
    1280:	000045a0 	.word	0x000045a0
    1284:	00001561 	.word	0x00001561
    1288:	00002a65 	.word	0x00002a65
    128c:	000011e9 	.word	0x000011e9

00001290 <timer_start>:
    1290:	b510      	push	{r4, lr}
    1292:	4604      	mov	r4, r0
    1294:	2253      	movs	r2, #83	; 0x53
    1296:	4909      	ldr	r1, [pc, #36]	; (12bc <timer_start+0x2c>)
    1298:	3000      	adds	r0, #0
    129a:	bf18      	it	ne
    129c:	2001      	movne	r0, #1
    129e:	4b08      	ldr	r3, [pc, #32]	; (12c0 <timer_start+0x30>)
    12a0:	4798      	blx	r3
    12a2:	4620      	mov	r0, r4
    12a4:	4b07      	ldr	r3, [pc, #28]	; (12c4 <timer_start+0x34>)
    12a6:	4798      	blx	r3
    12a8:	b920      	cbnz	r0, 12b4 <timer_start+0x24>
    12aa:	4620      	mov	r0, r4
    12ac:	4b06      	ldr	r3, [pc, #24]	; (12c8 <timer_start+0x38>)
    12ae:	4798      	blx	r3
    12b0:	2000      	movs	r0, #0
    12b2:	bd10      	pop	{r4, pc}
    12b4:	f06f 0010 	mvn.w	r0, #16
    12b8:	bd10      	pop	{r4, pc}
    12ba:	bf00      	nop
    12bc:	000045a0 	.word	0x000045a0
    12c0:	00001561 	.word	0x00001561
    12c4:	00002e61 	.word	0x00002e61
    12c8:	00002db9 	.word	0x00002db9

000012cc <timer_add_task>:
    12cc:	b570      	push	{r4, r5, r6, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	460d      	mov	r5, r1
    12d2:	4604      	mov	r4, r0
    12d4:	b320      	cbz	r0, 1320 <timer_add_task+0x54>
    12d6:	b309      	cbz	r1, 131c <timer_add_task+0x50>
    12d8:	2001      	movs	r0, #1
    12da:	227a      	movs	r2, #122	; 0x7a
    12dc:	491f      	ldr	r1, [pc, #124]	; (135c <timer_add_task+0x90>)
    12de:	4b20      	ldr	r3, [pc, #128]	; (1360 <timer_add_task+0x94>)
    12e0:	4798      	blx	r3
    12e2:	7e23      	ldrb	r3, [r4, #24]
    12e4:	f043 0301 	orr.w	r3, r3, #1
    12e8:	7623      	strb	r3, [r4, #24]
    12ea:	f104 0614 	add.w	r6, r4, #20
    12ee:	4629      	mov	r1, r5
    12f0:	4630      	mov	r0, r6
    12f2:	4b1c      	ldr	r3, [pc, #112]	; (1364 <timer_add_task+0x98>)
    12f4:	4798      	blx	r3
    12f6:	b9a8      	cbnz	r0, 1324 <timer_add_task+0x58>
    12f8:	6923      	ldr	r3, [r4, #16]
    12fa:	606b      	str	r3, [r5, #4]
    12fc:	6922      	ldr	r2, [r4, #16]
    12fe:	4629      	mov	r1, r5
    1300:	4630      	mov	r0, r6
    1302:	4b19      	ldr	r3, [pc, #100]	; (1368 <timer_add_task+0x9c>)
    1304:	4798      	blx	r3
    1306:	7e23      	ldrb	r3, [r4, #24]
    1308:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    130c:	7623      	strb	r3, [r4, #24]
    130e:	7e23      	ldrb	r3, [r4, #24]
    1310:	f013 0f02 	tst.w	r3, #2
    1314:	d112      	bne.n	133c <timer_add_task+0x70>
    1316:	2000      	movs	r0, #0
    1318:	b002      	add	sp, #8
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	2000      	movs	r0, #0
    131e:	e7dc      	b.n	12da <timer_add_task+0xe>
    1320:	2000      	movs	r0, #0
    1322:	e7da      	b.n	12da <timer_add_task+0xe>
    1324:	7e23      	ldrb	r3, [r4, #24]
    1326:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    132a:	7623      	strb	r3, [r4, #24]
    132c:	227f      	movs	r2, #127	; 0x7f
    132e:	490b      	ldr	r1, [pc, #44]	; (135c <timer_add_task+0x90>)
    1330:	2000      	movs	r0, #0
    1332:	4b0b      	ldr	r3, [pc, #44]	; (1360 <timer_add_task+0x94>)
    1334:	4798      	blx	r3
    1336:	f06f 0011 	mvn.w	r0, #17
    133a:	e7ed      	b.n	1318 <timer_add_task+0x4c>
    133c:	a801      	add	r0, sp, #4
    133e:	4b0b      	ldr	r3, [pc, #44]	; (136c <timer_add_task+0xa0>)
    1340:	4798      	blx	r3
    1342:	7e23      	ldrb	r3, [r4, #24]
    1344:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1348:	7623      	strb	r3, [r4, #24]
    134a:	4620      	mov	r0, r4
    134c:	4b08      	ldr	r3, [pc, #32]	; (1370 <timer_add_task+0xa4>)
    134e:	4798      	blx	r3
    1350:	a801      	add	r0, sp, #4
    1352:	4b08      	ldr	r3, [pc, #32]	; (1374 <timer_add_task+0xa8>)
    1354:	4798      	blx	r3
    1356:	2000      	movs	r0, #0
    1358:	e7de      	b.n	1318 <timer_add_task+0x4c>
    135a:	bf00      	nop
    135c:	000045a0 	.word	0x000045a0
    1360:	00001561 	.word	0x00001561
    1364:	00001567 	.word	0x00001567
    1368:	00001199 	.word	0x00001199
    136c:	00000d41 	.word	0x00000d41
    1370:	00002e8d 	.word	0x00002e8d
    1374:	00000d4f 	.word	0x00000d4f

00001378 <usart_transmission_complete>:
    1378:	b508      	push	{r3, lr}
    137a:	2300      	movs	r3, #0
    137c:	6283      	str	r3, [r0, #40]	; 0x28
    137e:	69c3      	ldr	r3, [r0, #28]
    1380:	b11b      	cbz	r3, 138a <usart_transmission_complete+0x12>
    1382:	f1a0 0208 	sub.w	r2, r0, #8
    1386:	4610      	mov	r0, r2
    1388:	4798      	blx	r3
    138a:	bd08      	pop	{r3, pc}

0000138c <usart_error>:
    138c:	b508      	push	{r3, lr}
    138e:	2300      	movs	r3, #0
    1390:	6283      	str	r3, [r0, #40]	; 0x28
    1392:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1394:	b11b      	cbz	r3, 139e <usart_error+0x12>
    1396:	f1a0 0208 	sub.w	r2, r0, #8
    139a:	4610      	mov	r0, r2
    139c:	4798      	blx	r3
    139e:	bd08      	pop	{r3, pc}

000013a0 <usart_fill_rx_buffer>:
    13a0:	b538      	push	{r3, r4, r5, lr}
    13a2:	4604      	mov	r4, r0
    13a4:	f1a0 0508 	sub.w	r5, r0, #8
    13a8:	302c      	adds	r0, #44	; 0x2c
    13aa:	4b03      	ldr	r3, [pc, #12]	; (13b8 <usart_fill_rx_buffer+0x18>)
    13ac:	4798      	blx	r3
    13ae:	6a23      	ldr	r3, [r4, #32]
    13b0:	b10b      	cbz	r3, 13b6 <usart_fill_rx_buffer+0x16>
    13b2:	4628      	mov	r0, r5
    13b4:	4798      	blx	r3
    13b6:	bd38      	pop	{r3, r4, r5, pc}
    13b8:	0000164d 	.word	0x0000164d

000013bc <usart_async_write>:
    13bc:	b570      	push	{r4, r5, r6, lr}
    13be:	460e      	mov	r6, r1
    13c0:	4615      	mov	r5, r2
    13c2:	4604      	mov	r4, r0
    13c4:	b1d8      	cbz	r0, 13fe <usart_async_write+0x42>
    13c6:	b1e1      	cbz	r1, 1402 <usart_async_write+0x46>
    13c8:	b9ea      	cbnz	r2, 1406 <usart_async_write+0x4a>
    13ca:	2000      	movs	r0, #0
    13cc:	f240 123b 	movw	r2, #315	; 0x13b
    13d0:	490f      	ldr	r1, [pc, #60]	; (1410 <usart_async_write+0x54>)
    13d2:	4b10      	ldr	r3, [pc, #64]	; (1414 <usart_async_write+0x58>)
    13d4:	4798      	blx	r3
    13d6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    13da:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    13de:	429a      	cmp	r2, r3
    13e0:	d113      	bne.n	140a <usart_async_write+0x4e>
    13e2:	64a6      	str	r6, [r4, #72]	; 0x48
    13e4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    13e8:	2300      	movs	r3, #0
    13ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    13ee:	2301      	movs	r3, #1
    13f0:	6323      	str	r3, [r4, #48]	; 0x30
    13f2:	f104 0008 	add.w	r0, r4, #8
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <usart_async_write+0x5c>)
    13f8:	4798      	blx	r3
    13fa:	4628      	mov	r0, r5
    13fc:	bd70      	pop	{r4, r5, r6, pc}
    13fe:	2000      	movs	r0, #0
    1400:	e7e4      	b.n	13cc <usart_async_write+0x10>
    1402:	2000      	movs	r0, #0
    1404:	e7e2      	b.n	13cc <usart_async_write+0x10>
    1406:	2001      	movs	r0, #1
    1408:	e7e0      	b.n	13cc <usart_async_write+0x10>
    140a:	f06f 001b 	mvn.w	r0, #27
    140e:	bd70      	pop	{r4, r5, r6, pc}
    1410:	000045b8 	.word	0x000045b8
    1414:	00001561 	.word	0x00001561
    1418:	000028bb 	.word	0x000028bb

0000141c <usart_process_byte_sent>:
    141c:	b510      	push	{r4, lr}
    141e:	4604      	mov	r4, r0
    1420:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1422:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1426:	4293      	cmp	r3, r2
    1428:	d009      	beq.n	143e <usart_process_byte_sent+0x22>
    142a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    142c:	1c59      	adds	r1, r3, #1
    142e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1430:	5cd1      	ldrb	r1, [r2, r3]
    1432:	4b04      	ldr	r3, [pc, #16]	; (1444 <usart_process_byte_sent+0x28>)
    1434:	4798      	blx	r3
    1436:	4620      	mov	r0, r4
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <usart_process_byte_sent+0x2c>)
    143a:	4798      	blx	r3
    143c:	bd10      	pop	{r4, pc}
    143e:	4b03      	ldr	r3, [pc, #12]	; (144c <usart_process_byte_sent+0x30>)
    1440:	4798      	blx	r3
    1442:	bd10      	pop	{r4, pc}
    1444:	000028b5 	.word	0x000028b5
    1448:	000028bb 	.word	0x000028bb
    144c:	000028c3 	.word	0x000028c3

00001450 <usart_async_read>:
    1450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1454:	b082      	sub	sp, #8
    1456:	4688      	mov	r8, r1
    1458:	4616      	mov	r6, r2
    145a:	4605      	mov	r5, r0
    145c:	b1a0      	cbz	r0, 1488 <usart_async_read+0x38>
    145e:	b1a9      	cbz	r1, 148c <usart_async_read+0x3c>
    1460:	b9b2      	cbnz	r2, 1490 <usart_async_read+0x40>
    1462:	2000      	movs	r0, #0
    1464:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1468:	4912      	ldr	r1, [pc, #72]	; (14b4 <usart_async_read+0x64>)
    146a:	4b13      	ldr	r3, [pc, #76]	; (14b8 <usart_async_read+0x68>)
    146c:	4798      	blx	r3
    146e:	a801      	add	r0, sp, #4
    1470:	4b12      	ldr	r3, [pc, #72]	; (14bc <usart_async_read+0x6c>)
    1472:	4798      	blx	r3
    1474:	3534      	adds	r5, #52	; 0x34
    1476:	4628      	mov	r0, r5
    1478:	4b11      	ldr	r3, [pc, #68]	; (14c0 <usart_async_read+0x70>)
    147a:	4798      	blx	r3
    147c:	4607      	mov	r7, r0
    147e:	a801      	add	r0, sp, #4
    1480:	4b10      	ldr	r3, [pc, #64]	; (14c4 <usart_async_read+0x74>)
    1482:	4798      	blx	r3
    1484:	2400      	movs	r4, #0
    1486:	e00b      	b.n	14a0 <usart_async_read+0x50>
    1488:	2000      	movs	r0, #0
    148a:	e7eb      	b.n	1464 <usart_async_read+0x14>
    148c:	2000      	movs	r0, #0
    148e:	e7e9      	b.n	1464 <usart_async_read+0x14>
    1490:	2001      	movs	r0, #1
    1492:	e7e7      	b.n	1464 <usart_async_read+0x14>
    1494:	3401      	adds	r4, #1
    1496:	b2a4      	uxth	r4, r4
    1498:	4441      	add	r1, r8
    149a:	4628      	mov	r0, r5
    149c:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <usart_async_read+0x78>)
    149e:	4798      	blx	r3
    14a0:	4621      	mov	r1, r4
    14a2:	42a7      	cmp	r7, r4
    14a4:	d901      	bls.n	14aa <usart_async_read+0x5a>
    14a6:	42b4      	cmp	r4, r6
    14a8:	d3f4      	bcc.n	1494 <usart_async_read+0x44>
    14aa:	4620      	mov	r0, r4
    14ac:	b002      	add	sp, #8
    14ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14b2:	bf00      	nop
    14b4:	000045b8 	.word	0x000045b8
    14b8:	00001561 	.word	0x00001561
    14bc:	00000d41 	.word	0x00000d41
    14c0:	0000168d 	.word	0x0000168d
    14c4:	00000d4f 	.word	0x00000d4f
    14c8:	00001605 	.word	0x00001605

000014cc <usart_async_init>:
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	460d      	mov	r5, r1
    14d0:	4616      	mov	r6, r2
    14d2:	461f      	mov	r7, r3
    14d4:	4604      	mov	r4, r0
    14d6:	b318      	cbz	r0, 1520 <usart_async_init+0x54>
    14d8:	b321      	cbz	r1, 1524 <usart_async_init+0x58>
    14da:	b32a      	cbz	r2, 1528 <usart_async_init+0x5c>
    14dc:	bb33      	cbnz	r3, 152c <usart_async_init+0x60>
    14de:	2000      	movs	r0, #0
    14e0:	223a      	movs	r2, #58	; 0x3a
    14e2:	4915      	ldr	r1, [pc, #84]	; (1538 <usart_async_init+0x6c>)
    14e4:	4b15      	ldr	r3, [pc, #84]	; (153c <usart_async_init+0x70>)
    14e6:	4798      	blx	r3
    14e8:	463a      	mov	r2, r7
    14ea:	4631      	mov	r1, r6
    14ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
    14f0:	4b13      	ldr	r3, [pc, #76]	; (1540 <usart_async_init+0x74>)
    14f2:	4798      	blx	r3
    14f4:	b9e0      	cbnz	r0, 1530 <usart_async_init+0x64>
    14f6:	4629      	mov	r1, r5
    14f8:	f104 0008 	add.w	r0, r4, #8
    14fc:	4b11      	ldr	r3, [pc, #68]	; (1544 <usart_async_init+0x78>)
    14fe:	4798      	blx	r3
    1500:	4603      	mov	r3, r0
    1502:	b958      	cbnz	r0, 151c <usart_async_init+0x50>
    1504:	4a10      	ldr	r2, [pc, #64]	; (1548 <usart_async_init+0x7c>)
    1506:	6062      	str	r2, [r4, #4]
    1508:	4a10      	ldr	r2, [pc, #64]	; (154c <usart_async_init+0x80>)
    150a:	6022      	str	r2, [r4, #0]
    150c:	4a10      	ldr	r2, [pc, #64]	; (1550 <usart_async_init+0x84>)
    150e:	60a2      	str	r2, [r4, #8]
    1510:	4a10      	ldr	r2, [pc, #64]	; (1554 <usart_async_init+0x88>)
    1512:	60e2      	str	r2, [r4, #12]
    1514:	4a10      	ldr	r2, [pc, #64]	; (1558 <usart_async_init+0x8c>)
    1516:	6122      	str	r2, [r4, #16]
    1518:	4a10      	ldr	r2, [pc, #64]	; (155c <usart_async_init+0x90>)
    151a:	6162      	str	r2, [r4, #20]
    151c:	4618      	mov	r0, r3
    151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1520:	2000      	movs	r0, #0
    1522:	e7dd      	b.n	14e0 <usart_async_init+0x14>
    1524:	2000      	movs	r0, #0
    1526:	e7db      	b.n	14e0 <usart_async_init+0x14>
    1528:	2000      	movs	r0, #0
    152a:	e7d9      	b.n	14e0 <usart_async_init+0x14>
    152c:	2001      	movs	r0, #1
    152e:	e7d7      	b.n	14e0 <usart_async_init+0x14>
    1530:	f06f 030c 	mvn.w	r3, #12
    1534:	e7f2      	b.n	151c <usart_async_init+0x50>
    1536:	bf00      	nop
    1538:	000045b8 	.word	0x000045b8
    153c:	00001561 	.word	0x00001561
    1540:	000015c1 	.word	0x000015c1
    1544:	00002831 	.word	0x00002831
    1548:	00001451 	.word	0x00001451
    154c:	000013bd 	.word	0x000013bd
    1550:	0000141d 	.word	0x0000141d
    1554:	000013a1 	.word	0x000013a1
    1558:	00001379 	.word	0x00001379
    155c:	0000138d 	.word	0x0000138d

00001560 <assert>:
    1560:	b900      	cbnz	r0, 1564 <assert+0x4>
    1562:	be00      	bkpt	0x0000
    1564:	4770      	bx	lr

00001566 <is_list_element>:
    1566:	6803      	ldr	r3, [r0, #0]
    1568:	b11b      	cbz	r3, 1572 <is_list_element+0xc>
    156a:	428b      	cmp	r3, r1
    156c:	d003      	beq.n	1576 <is_list_element+0x10>
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	e7fa      	b.n	1568 <is_list_element+0x2>
    1572:	2000      	movs	r0, #0
    1574:	4770      	bx	lr
    1576:	2001      	movs	r0, #1
    1578:	4770      	bx	lr
	...

0000157c <list_insert_as_head>:
    157c:	b538      	push	{r3, r4, r5, lr}
    157e:	4604      	mov	r4, r0
    1580:	460d      	mov	r5, r1
    1582:	4b06      	ldr	r3, [pc, #24]	; (159c <list_insert_as_head+0x20>)
    1584:	4798      	blx	r3
    1586:	f080 0001 	eor.w	r0, r0, #1
    158a:	2239      	movs	r2, #57	; 0x39
    158c:	4904      	ldr	r1, [pc, #16]	; (15a0 <list_insert_as_head+0x24>)
    158e:	b2c0      	uxtb	r0, r0
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <list_insert_as_head+0x28>)
    1592:	4798      	blx	r3
    1594:	6823      	ldr	r3, [r4, #0]
    1596:	602b      	str	r3, [r5, #0]
    1598:	6025      	str	r5, [r4, #0]
    159a:	bd38      	pop	{r3, r4, r5, pc}
    159c:	00001567 	.word	0x00001567
    15a0:	000045d8 	.word	0x000045d8
    15a4:	00001561 	.word	0x00001561

000015a8 <list_insert_after>:
    15a8:	6803      	ldr	r3, [r0, #0]
    15aa:	600b      	str	r3, [r1, #0]
    15ac:	6001      	str	r1, [r0, #0]
    15ae:	4770      	bx	lr

000015b0 <list_remove_head>:
    15b0:	6803      	ldr	r3, [r0, #0]
    15b2:	b11b      	cbz	r3, 15bc <list_remove_head+0xc>
    15b4:	681a      	ldr	r2, [r3, #0]
    15b6:	6002      	str	r2, [r0, #0]
    15b8:	4618      	mov	r0, r3
    15ba:	4770      	bx	lr
    15bc:	2000      	movs	r0, #0
    15be:	4770      	bx	lr

000015c0 <ringbuffer_init>:
    15c0:	b570      	push	{r4, r5, r6, lr}
    15c2:	460e      	mov	r6, r1
    15c4:	4615      	mov	r5, r2
    15c6:	4604      	mov	r4, r0
    15c8:	b178      	cbz	r0, 15ea <ringbuffer_init+0x2a>
    15ca:	b181      	cbz	r1, 15ee <ringbuffer_init+0x2e>
    15cc:	b98a      	cbnz	r2, 15f2 <ringbuffer_init+0x32>
    15ce:	2000      	movs	r0, #0
    15d0:	2228      	movs	r2, #40	; 0x28
    15d2:	490a      	ldr	r1, [pc, #40]	; (15fc <ringbuffer_init+0x3c>)
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <ringbuffer_init+0x40>)
    15d6:	4798      	blx	r3
    15d8:	1e6b      	subs	r3, r5, #1
    15da:	421d      	tst	r5, r3
    15dc:	d10b      	bne.n	15f6 <ringbuffer_init+0x36>
    15de:	6063      	str	r3, [r4, #4]
    15e0:	2000      	movs	r0, #0
    15e2:	60a0      	str	r0, [r4, #8]
    15e4:	60e0      	str	r0, [r4, #12]
    15e6:	6026      	str	r6, [r4, #0]
    15e8:	bd70      	pop	{r4, r5, r6, pc}
    15ea:	2000      	movs	r0, #0
    15ec:	e7f0      	b.n	15d0 <ringbuffer_init+0x10>
    15ee:	2000      	movs	r0, #0
    15f0:	e7ee      	b.n	15d0 <ringbuffer_init+0x10>
    15f2:	2001      	movs	r0, #1
    15f4:	e7ec      	b.n	15d0 <ringbuffer_init+0x10>
    15f6:	f06f 000c 	mvn.w	r0, #12
    15fa:	bd70      	pop	{r4, r5, r6, pc}
    15fc:	000045f8 	.word	0x000045f8
    1600:	00001561 	.word	0x00001561

00001604 <ringbuffer_get>:
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	460d      	mov	r5, r1
    1608:	4604      	mov	r4, r0
    160a:	b1a8      	cbz	r0, 1638 <ringbuffer_get+0x34>
    160c:	b191      	cbz	r1, 1634 <ringbuffer_get+0x30>
    160e:	2001      	movs	r0, #1
    1610:	2240      	movs	r2, #64	; 0x40
    1612:	490c      	ldr	r1, [pc, #48]	; (1644 <ringbuffer_get+0x40>)
    1614:	4b0c      	ldr	r3, [pc, #48]	; (1648 <ringbuffer_get+0x44>)
    1616:	4798      	blx	r3
    1618:	68e2      	ldr	r2, [r4, #12]
    161a:	68a3      	ldr	r3, [r4, #8]
    161c:	429a      	cmp	r2, r3
    161e:	d00d      	beq.n	163c <ringbuffer_get+0x38>
    1620:	6822      	ldr	r2, [r4, #0]
    1622:	6861      	ldr	r1, [r4, #4]
    1624:	400b      	ands	r3, r1
    1626:	5cd3      	ldrb	r3, [r2, r3]
    1628:	702b      	strb	r3, [r5, #0]
    162a:	68a3      	ldr	r3, [r4, #8]
    162c:	3301      	adds	r3, #1
    162e:	60a3      	str	r3, [r4, #8]
    1630:	2000      	movs	r0, #0
    1632:	bd38      	pop	{r3, r4, r5, pc}
    1634:	2000      	movs	r0, #0
    1636:	e7eb      	b.n	1610 <ringbuffer_get+0xc>
    1638:	2000      	movs	r0, #0
    163a:	e7e9      	b.n	1610 <ringbuffer_get+0xc>
    163c:	f06f 0009 	mvn.w	r0, #9
    1640:	bd38      	pop	{r3, r4, r5, pc}
    1642:	bf00      	nop
    1644:	000045f8 	.word	0x000045f8
    1648:	00001561 	.word	0x00001561

0000164c <ringbuffer_put>:
    164c:	b538      	push	{r3, r4, r5, lr}
    164e:	460d      	mov	r5, r1
    1650:	4604      	mov	r4, r0
    1652:	2251      	movs	r2, #81	; 0x51
    1654:	490b      	ldr	r1, [pc, #44]	; (1684 <ringbuffer_put+0x38>)
    1656:	3000      	adds	r0, #0
    1658:	bf18      	it	ne
    165a:	2001      	movne	r0, #1
    165c:	4b0a      	ldr	r3, [pc, #40]	; (1688 <ringbuffer_put+0x3c>)
    165e:	4798      	blx	r3
    1660:	6822      	ldr	r2, [r4, #0]
    1662:	68e3      	ldr	r3, [r4, #12]
    1664:	6861      	ldr	r1, [r4, #4]
    1666:	400b      	ands	r3, r1
    1668:	54d5      	strb	r5, [r2, r3]
    166a:	68e3      	ldr	r3, [r4, #12]
    166c:	68a2      	ldr	r2, [r4, #8]
    166e:	1a9a      	subs	r2, r3, r2
    1670:	6861      	ldr	r1, [r4, #4]
    1672:	428a      	cmp	r2, r1
    1674:	d901      	bls.n	167a <ringbuffer_put+0x2e>
    1676:	1a59      	subs	r1, r3, r1
    1678:	60a1      	str	r1, [r4, #8]
    167a:	3301      	adds	r3, #1
    167c:	60e3      	str	r3, [r4, #12]
    167e:	2000      	movs	r0, #0
    1680:	bd38      	pop	{r3, r4, r5, pc}
    1682:	bf00      	nop
    1684:	000045f8 	.word	0x000045f8
    1688:	00001561 	.word	0x00001561

0000168c <ringbuffer_num>:
    168c:	b510      	push	{r4, lr}
    168e:	4604      	mov	r4, r0
    1690:	2267      	movs	r2, #103	; 0x67
    1692:	4905      	ldr	r1, [pc, #20]	; (16a8 <ringbuffer_num+0x1c>)
    1694:	3000      	adds	r0, #0
    1696:	bf18      	it	ne
    1698:	2001      	movne	r0, #1
    169a:	4b04      	ldr	r3, [pc, #16]	; (16ac <ringbuffer_num+0x20>)
    169c:	4798      	blx	r3
    169e:	68e0      	ldr	r0, [r4, #12]
    16a0:	68a3      	ldr	r3, [r4, #8]
    16a2:	1ac0      	subs	r0, r0, r3
    16a4:	bd10      	pop	{r4, pc}
    16a6:	bf00      	nop
    16a8:	000045f8 	.word	0x000045f8
    16ac:	00001561 	.word	0x00001561

000016b0 <_adc_get_hardware_index>:
    16b0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    16b4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    16b8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    16bc:	4770      	bx	lr
	...

000016c0 <_adc_init>:
    16c0:	b410      	push	{r4}
    16c2:	4b60      	ldr	r3, [pc, #384]	; (1844 <_adc_init+0x184>)
    16c4:	4298      	cmp	r0, r3
    16c6:	f000 809c 	beq.w	1802 <_adc_init+0x142>
    16ca:	4b5f      	ldr	r3, [pc, #380]	; (1848 <_adc_init+0x188>)
    16cc:	4298      	cmp	r0, r3
    16ce:	f000 80a8 	beq.w	1822 <_adc_init+0x162>
    16d2:	2200      	movs	r2, #0
    16d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16d6:	f013 0f01 	tst.w	r3, #1
    16da:	d11b      	bne.n	1714 <_adc_init+0x54>
    16dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16de:	f013 0f03 	tst.w	r3, #3
    16e2:	d1fb      	bne.n	16dc <_adc_init+0x1c>
    16e4:	8803      	ldrh	r3, [r0, #0]
    16e6:	f013 0f02 	tst.w	r3, #2
    16ea:	d00d      	beq.n	1708 <_adc_init+0x48>
    16ec:	8803      	ldrh	r3, [r0, #0]
    16ee:	b29b      	uxth	r3, r3
    16f0:	f023 0302 	bic.w	r3, r3, #2
    16f4:	b29b      	uxth	r3, r3
    16f6:	8003      	strh	r3, [r0, #0]
    16f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16fa:	f013 0f03 	tst.w	r3, #3
    16fe:	d1fb      	bne.n	16f8 <_adc_init+0x38>
    1700:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1702:	f013 0f02 	tst.w	r3, #2
    1706:	d1fb      	bne.n	1700 <_adc_init+0x40>
    1708:	2301      	movs	r3, #1
    170a:	8003      	strh	r3, [r0, #0]
    170c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    170e:	f013 0f03 	tst.w	r3, #3
    1712:	d1fb      	bne.n	170c <_adc_init+0x4c>
    1714:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1716:	f013 0f01 	tst.w	r3, #1
    171a:	d1fb      	bne.n	1714 <_adc_init+0x54>
    171c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    1720:	2316      	movs	r3, #22
    1722:	4a4a      	ldr	r2, [pc, #296]	; (184c <_adc_init+0x18c>)
    1724:	fb03 2301 	mla	r3, r3, r1, r2
    1728:	889b      	ldrh	r3, [r3, #4]
    172a:	80c3      	strh	r3, [r0, #6]
    172c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    172e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1732:	2b00      	cmp	r3, #0
    1734:	d1fa      	bne.n	172c <_adc_init+0x6c>
    1736:	2316      	movs	r3, #22
    1738:	4a44      	ldr	r2, [pc, #272]	; (184c <_adc_init+0x18c>)
    173a:	fb03 2301 	mla	r3, r3, r1, r2
    173e:	799b      	ldrb	r3, [r3, #6]
    1740:	7203      	strb	r3, [r0, #8]
    1742:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1744:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1748:	2b00      	cmp	r3, #0
    174a:	d1fa      	bne.n	1742 <_adc_init+0x82>
    174c:	2316      	movs	r3, #22
    174e:	4a3f      	ldr	r2, [pc, #252]	; (184c <_adc_init+0x18c>)
    1750:	fb03 2301 	mla	r3, r3, r1, r2
    1754:	79da      	ldrb	r2, [r3, #7]
    1756:	7082      	strb	r2, [r0, #2]
    1758:	891b      	ldrh	r3, [r3, #8]
    175a:	8083      	strh	r3, [r0, #4]
    175c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    175e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1762:	2b00      	cmp	r3, #0
    1764:	d1fa      	bne.n	175c <_adc_init+0x9c>
    1766:	2316      	movs	r3, #22
    1768:	4a38      	ldr	r2, [pc, #224]	; (184c <_adc_init+0x18c>)
    176a:	fb03 2301 	mla	r3, r3, r1, r2
    176e:	7a9b      	ldrb	r3, [r3, #10]
    1770:	7283      	strb	r3, [r0, #10]
    1772:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1774:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1778:	2b00      	cmp	r3, #0
    177a:	d1fa      	bne.n	1772 <_adc_init+0xb2>
    177c:	2316      	movs	r3, #22
    177e:	4a33      	ldr	r2, [pc, #204]	; (184c <_adc_init+0x18c>)
    1780:	fb03 2301 	mla	r3, r3, r1, r2
    1784:	7adb      	ldrb	r3, [r3, #11]
    1786:	72c3      	strb	r3, [r0, #11]
    1788:	6b03      	ldr	r3, [r0, #48]	; 0x30
    178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    178e:	2b00      	cmp	r3, #0
    1790:	d1fa      	bne.n	1788 <_adc_init+0xc8>
    1792:	2316      	movs	r3, #22
    1794:	4a2d      	ldr	r2, [pc, #180]	; (184c <_adc_init+0x18c>)
    1796:	fb03 2301 	mla	r3, r3, r1, r2
    179a:	899b      	ldrh	r3, [r3, #12]
    179c:	8183      	strh	r3, [r0, #12]
    179e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    17a4:	d1fb      	bne.n	179e <_adc_init+0xde>
    17a6:	2316      	movs	r3, #22
    17a8:	4a28      	ldr	r2, [pc, #160]	; (184c <_adc_init+0x18c>)
    17aa:	fb03 2301 	mla	r3, r3, r1, r2
    17ae:	89db      	ldrh	r3, [r3, #14]
    17b0:	81c3      	strh	r3, [r0, #14]
    17b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    17b8:	d1fb      	bne.n	17b2 <_adc_init+0xf2>
    17ba:	2316      	movs	r3, #22
    17bc:	4a23      	ldr	r2, [pc, #140]	; (184c <_adc_init+0x18c>)
    17be:	fb03 2301 	mla	r3, r3, r1, r2
    17c2:	8a1b      	ldrh	r3, [r3, #16]
    17c4:	8203      	strh	r3, [r0, #16]
    17c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17c8:	f413 7f00 	tst.w	r3, #512	; 0x200
    17cc:	d1fb      	bne.n	17c6 <_adc_init+0x106>
    17ce:	2316      	movs	r3, #22
    17d0:	4a1e      	ldr	r2, [pc, #120]	; (184c <_adc_init+0x18c>)
    17d2:	fb03 2301 	mla	r3, r3, r1, r2
    17d6:	8a5b      	ldrh	r3, [r3, #18]
    17d8:	8243      	strh	r3, [r0, #18]
    17da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17e0:	d1fb      	bne.n	17da <_adc_init+0x11a>
    17e2:	2216      	movs	r2, #22
    17e4:	4b19      	ldr	r3, [pc, #100]	; (184c <_adc_init+0x18c>)
    17e6:	fb02 3101 	mla	r1, r2, r1, r3
    17ea:	7d0b      	ldrb	r3, [r1, #20]
    17ec:	70c3      	strb	r3, [r0, #3]
    17ee:	884b      	ldrh	r3, [r1, #2]
    17f0:	8003      	strh	r3, [r0, #0]
    17f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17f4:	f013 0f03 	tst.w	r3, #3
    17f8:	d1fb      	bne.n	17f2 <_adc_init+0x132>
    17fa:	2000      	movs	r0, #0
    17fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1800:	4770      	bx	lr
    1802:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	095a      	lsrs	r2, r3, #5
    180a:	0212      	lsls	r2, r2, #8
    180c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1810:	0a1c      	lsrs	r4, r3, #8
    1812:	0124      	lsls	r4, r4, #4
    1814:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1818:	4322      	orrs	r2, r4
    181a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    181e:	431a      	orrs	r2, r3
    1820:	e758      	b.n	16d4 <_adc_init+0x14>
    1822:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	0cda      	lsrs	r2, r3, #19
    182a:	0212      	lsls	r2, r2, #8
    182c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1830:	0d9c      	lsrs	r4, r3, #22
    1832:	0124      	lsls	r4, r4, #4
    1834:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1838:	4322      	orrs	r2, r4
    183a:	f3c3 4302 	ubfx	r3, r3, #16, #3
    183e:	431a      	orrs	r2, r3
    1840:	e748      	b.n	16d4 <_adc_init+0x14>
    1842:	bf00      	nop
    1844:	43001c00 	.word	0x43001c00
    1848:	43002000 	.word	0x43002000
    184c:	0000461c 	.word	0x0000461c

00001850 <_adc_get_regs>:
    1850:	b508      	push	{r3, lr}
    1852:	4b0b      	ldr	r3, [pc, #44]	; (1880 <_adc_get_regs+0x30>)
    1854:	4798      	blx	r3
    1856:	2300      	movs	r3, #0
    1858:	b13b      	cbz	r3, 186a <_adc_get_regs+0x1a>
    185a:	2288      	movs	r2, #136	; 0x88
    185c:	4909      	ldr	r1, [pc, #36]	; (1884 <_adc_get_regs+0x34>)
    185e:	2000      	movs	r0, #0
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <_adc_get_regs+0x38>)
    1862:	4798      	blx	r3
    1864:	2300      	movs	r3, #0
    1866:	4618      	mov	r0, r3
    1868:	bd08      	pop	{r3, pc}
    186a:	2216      	movs	r2, #22
    186c:	fb02 f203 	mul.w	r2, r2, r3
    1870:	4906      	ldr	r1, [pc, #24]	; (188c <_adc_get_regs+0x3c>)
    1872:	5c8a      	ldrb	r2, [r1, r2]
    1874:	4290      	cmp	r0, r2
    1876:	d0f6      	beq.n	1866 <_adc_get_regs+0x16>
    1878:	3301      	adds	r3, #1
    187a:	b2db      	uxtb	r3, r3
    187c:	e7ec      	b.n	1858 <_adc_get_regs+0x8>
    187e:	bf00      	nop
    1880:	000016b1 	.word	0x000016b1
    1884:	00004634 	.word	0x00004634
    1888:	00001561 	.word	0x00001561
    188c:	0000461c 	.word	0x0000461c

00001890 <_adc_sync_init>:
    1890:	b538      	push	{r3, r4, r5, lr}
    1892:	460c      	mov	r4, r1
    1894:	4605      	mov	r5, r0
    1896:	22d9      	movs	r2, #217	; 0xd9
    1898:	4907      	ldr	r1, [pc, #28]	; (18b8 <_adc_sync_init+0x28>)
    189a:	3000      	adds	r0, #0
    189c:	bf18      	it	ne
    189e:	2001      	movne	r0, #1
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <_adc_sync_init+0x2c>)
    18a2:	4798      	blx	r3
    18a4:	602c      	str	r4, [r5, #0]
    18a6:	4620      	mov	r0, r4
    18a8:	4b05      	ldr	r3, [pc, #20]	; (18c0 <_adc_sync_init+0x30>)
    18aa:	4798      	blx	r3
    18ac:	4601      	mov	r1, r0
    18ae:	4620      	mov	r0, r4
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <_adc_sync_init+0x34>)
    18b2:	4798      	blx	r3
    18b4:	bd38      	pop	{r3, r4, r5, pc}
    18b6:	bf00      	nop
    18b8:	00004634 	.word	0x00004634
    18bc:	00001561 	.word	0x00001561
    18c0:	00001851 	.word	0x00001851
    18c4:	000016c1 	.word	0x000016c1

000018c8 <_adc_sync_enable_channel>:
    18c8:	6802      	ldr	r2, [r0, #0]
    18ca:	8813      	ldrh	r3, [r2, #0]
    18cc:	b29b      	uxth	r3, r3
    18ce:	f043 0302 	orr.w	r3, r3, #2
    18d2:	8013      	strh	r3, [r2, #0]
    18d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    18d6:	f013 0f03 	tst.w	r3, #3
    18da:	d1fb      	bne.n	18d4 <_adc_sync_enable_channel+0xc>
    18dc:	4770      	bx	lr

000018de <_adc_sync_get_data_size>:
    18de:	6803      	ldr	r3, [r0, #0]
    18e0:	88db      	ldrh	r3, [r3, #6]
    18e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    18e6:	2b03      	cmp	r3, #3
    18e8:	d001      	beq.n	18ee <_adc_sync_get_data_size+0x10>
    18ea:	2002      	movs	r0, #2
    18ec:	4770      	bx	lr
    18ee:	2001      	movs	r0, #1
    18f0:	4770      	bx	lr

000018f2 <_adc_sync_is_channel_conversion_done>:
    18f2:	6803      	ldr	r3, [r0, #0]
    18f4:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
    18f8:	f000 0001 	and.w	r0, r0, #1
    18fc:	4770      	bx	lr

000018fe <_adc_sync_convert>:
    18fe:	6802      	ldr	r2, [r0, #0]
    1900:	7d13      	ldrb	r3, [r2, #20]
    1902:	f043 0302 	orr.w	r3, r3, #2
    1906:	7513      	strb	r3, [r2, #20]
    1908:	6b13      	ldr	r3, [r2, #48]	; 0x30
    190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    190e:	2b00      	cmp	r3, #0
    1910:	d1fa      	bne.n	1908 <_adc_sync_convert+0xa>
    1912:	4770      	bx	lr

00001914 <_adc_sync_read_channel_data>:
    1914:	6803      	ldr	r3, [r0, #0]
    1916:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
    191a:	b280      	uxth	r0, r0
    191c:	4770      	bx	lr
	...

00001920 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1920:	0943      	lsrs	r3, r0, #5
    1922:	f000 001f 	and.w	r0, r0, #31
    1926:	2201      	movs	r2, #1
    1928:	fa02 f000 	lsl.w	r0, r2, r0
    192c:	3340      	adds	r3, #64	; 0x40
    192e:	4a02      	ldr	r2, [pc, #8]	; (1938 <_irq_set+0x18>)
    1930:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1934:	4770      	bx	lr
    1936:	bf00      	nop
    1938:	e000e100 	.word	0xe000e100

0000193c <_get_cycles_for_us>:
    193c:	f44f 7316 	mov.w	r3, #600	; 0x258
    1940:	fb03 f000 	mul.w	r0, r3, r0
    1944:	3801      	subs	r0, #1
    1946:	4b03      	ldr	r3, [pc, #12]	; (1954 <_get_cycles_for_us+0x18>)
    1948:	fba3 3000 	umull	r3, r0, r3, r0
    194c:	08c0      	lsrs	r0, r0, #3
    194e:	3001      	adds	r0, #1
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	cccccccd 	.word	0xcccccccd

00001958 <_get_cycles_for_ms>:
    1958:	f44f 7316 	mov.w	r3, #600	; 0x258
    195c:	fb03 f000 	mul.w	r0, r3, r0
    1960:	2364      	movs	r3, #100	; 0x64
    1962:	fb03 f000 	mul.w	r0, r3, r0
    1966:	4770      	bx	lr

00001968 <_init_chip>:
    1968:	b510      	push	{r4, lr}
    196a:	4a0d      	ldr	r2, [pc, #52]	; (19a0 <_init_chip+0x38>)
    196c:	8813      	ldrh	r3, [r2, #0]
    196e:	b29b      	uxth	r3, r3
    1970:	8013      	strh	r3, [r2, #0]
    1972:	4b0c      	ldr	r3, [pc, #48]	; (19a4 <_init_chip+0x3c>)
    1974:	4798      	blx	r3
    1976:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <_init_chip+0x40>)
    1978:	4798      	blx	r3
    197a:	4b0c      	ldr	r3, [pc, #48]	; (19ac <_init_chip+0x44>)
    197c:	4798      	blx	r3
    197e:	200c      	movs	r0, #12
    1980:	4c0b      	ldr	r4, [pc, #44]	; (19b0 <_init_chip+0x48>)
    1982:	47a0      	blx	r4
    1984:	4b0b      	ldr	r3, [pc, #44]	; (19b4 <_init_chip+0x4c>)
    1986:	4798      	blx	r3
    1988:	f640 70f3 	movw	r0, #4083	; 0xff3
    198c:	47a0      	blx	r4
    198e:	4a0a      	ldr	r2, [pc, #40]	; (19b8 <_init_chip+0x50>)
    1990:	6913      	ldr	r3, [r2, #16]
    1992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1996:	6113      	str	r3, [r2, #16]
    1998:	4b08      	ldr	r3, [pc, #32]	; (19bc <_init_chip+0x54>)
    199a:	4798      	blx	r3
    199c:	bd10      	pop	{r4, pc}
    199e:	bf00      	nop
    19a0:	41004000 	.word	0x41004000
    19a4:	00001e59 	.word	0x00001e59
    19a8:	00001e79 	.word	0x00001e79
    19ac:	00001e4d 	.word	0x00001e4d
    19b0:	00001dd5 	.word	0x00001dd5
    19b4:	00001e7d 	.word	0x00001e7d
    19b8:	40000800 	.word	0x40000800
    19bc:	00001a29 	.word	0x00001a29

000019c0 <_dmac_handler>:
    19c0:	b508      	push	{r3, lr}
    19c2:	4a17      	ldr	r2, [pc, #92]	; (1a20 <_dmac_handler+0x60>)
    19c4:	8c13      	ldrh	r3, [r2, #32]
    19c6:	f003 031f 	and.w	r3, r3, #31
    19ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19ce:	0088      	lsls	r0, r1, #2
    19d0:	4914      	ldr	r1, [pc, #80]	; (1a24 <_dmac_handler+0x64>)
    19d2:	4408      	add	r0, r1
    19d4:	8c12      	ldrh	r2, [r2, #32]
    19d6:	f412 7f80 	tst.w	r2, #256	; 0x100
    19da:	d105      	bne.n	19e8 <_dmac_handler+0x28>
    19dc:	4a10      	ldr	r2, [pc, #64]	; (1a20 <_dmac_handler+0x60>)
    19de:	8c12      	ldrh	r2, [r2, #32]
    19e0:	f412 7f00 	tst.w	r2, #512	; 0x200
    19e4:	d10b      	bne.n	19fe <_dmac_handler+0x3e>
    19e6:	bd08      	pop	{r3, pc}
    19e8:	011a      	lsls	r2, r3, #4
    19ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    19ee:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    19f2:	2101      	movs	r1, #1
    19f4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
    19f8:	6843      	ldr	r3, [r0, #4]
    19fa:	4798      	blx	r3
    19fc:	bd08      	pop	{r3, pc}
    19fe:	011a      	lsls	r2, r3, #4
    1a00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a04:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1a08:	2102      	movs	r1, #2
    1a0a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
    1a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a12:	fa03 f201 	lsl.w	r2, r3, r1
    1a16:	4b03      	ldr	r3, [pc, #12]	; (1a24 <_dmac_handler+0x64>)
    1a18:	589b      	ldr	r3, [r3, r2]
    1a1a:	4798      	blx	r3
    1a1c:	e7e3      	b.n	19e6 <_dmac_handler+0x26>
    1a1e:	bf00      	nop
    1a20:	4100a000 	.word	0x4100a000
    1a24:	20000090 	.word	0x20000090

00001a28 <_dma_init>:
    1a28:	b430      	push	{r4, r5}
    1a2a:	4a3c      	ldr	r2, [pc, #240]	; (1b1c <_dma_init+0xf4>)
    1a2c:	8813      	ldrh	r3, [r2, #0]
    1a2e:	b29b      	uxth	r3, r3
    1a30:	f023 0302 	bic.w	r3, r3, #2
    1a34:	b29b      	uxth	r3, r3
    1a36:	8013      	strh	r3, [r2, #0]
    1a38:	8853      	ldrh	r3, [r2, #2]
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1a40:	b29b      	uxth	r3, r3
    1a42:	8053      	strh	r3, [r2, #2]
    1a44:	8813      	ldrh	r3, [r2, #0]
    1a46:	b29b      	uxth	r3, r3
    1a48:	f043 0301 	orr.w	r3, r3, #1
    1a4c:	8013      	strh	r3, [r2, #0]
    1a4e:	4b33      	ldr	r3, [pc, #204]	; (1b1c <_dma_init+0xf4>)
    1a50:	881b      	ldrh	r3, [r3, #0]
    1a52:	f013 0f01 	tst.w	r3, #1
    1a56:	d1fa      	bne.n	1a4e <_dma_init+0x26>
    1a58:	4a30      	ldr	r2, [pc, #192]	; (1b1c <_dma_init+0xf4>)
    1a5a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1a5e:	8013      	strh	r3, [r2, #0]
    1a60:	7b53      	ldrb	r3, [r2, #13]
    1a62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1a66:	7353      	strb	r3, [r2, #13]
    1a68:	2300      	movs	r3, #0
    1a6a:	6153      	str	r3, [r2, #20]
    1a6c:	492c      	ldr	r1, [pc, #176]	; (1b20 <_dma_init+0xf8>)
    1a6e:	6351      	str	r1, [r2, #52]	; 0x34
    1a70:	492c      	ldr	r1, [pc, #176]	; (1b24 <_dma_init+0xfc>)
    1a72:	6391      	str	r1, [r2, #56]	; 0x38
    1a74:	e016      	b.n	1aa4 <_dma_init+0x7c>
    1a76:	4a2c      	ldr	r2, [pc, #176]	; (1b28 <_dma_init+0x100>)
    1a78:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
    1a7c:	4c27      	ldr	r4, [pc, #156]	; (1b1c <_dma_init+0xf4>)
    1a7e:	1d19      	adds	r1, r3, #4
    1a80:	0109      	lsls	r1, r1, #4
    1a82:	1860      	adds	r0, r4, r1
    1a84:	5065      	str	r5, [r4, r1]
    1a86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1a8a:	7911      	ldrb	r1, [r2, #4]
    1a8c:	7141      	strb	r1, [r0, #5]
    1a8e:	7951      	ldrb	r1, [r2, #5]
    1a90:	7181      	strb	r1, [r0, #6]
    1a92:	88d4      	ldrh	r4, [r2, #6]
    1a94:	4922      	ldr	r1, [pc, #136]	; (1b20 <_dma_init+0xf8>)
    1a96:	011a      	lsls	r2, r3, #4
    1a98:	1888      	adds	r0, r1, r2
    1a9a:	528c      	strh	r4, [r1, r2]
    1a9c:	2200      	movs	r2, #0
    1a9e:	60c2      	str	r2, [r0, #12]
    1aa0:	3301      	adds	r3, #1
    1aa2:	b2db      	uxtb	r3, r3
    1aa4:	2b1f      	cmp	r3, #31
    1aa6:	d9e6      	bls.n	1a76 <_dma_init+0x4e>
    1aa8:	2300      	movs	r3, #0
    1aaa:	e00a      	b.n	1ac2 <_dma_init+0x9a>
    1aac:	f103 011f 	add.w	r1, r3, #31
    1ab0:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	da10      	bge.n	1ad8 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ab6:	2a00      	cmp	r2, #0
    1ab8:	da1c      	bge.n	1af4 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1aba:	2a00      	cmp	r2, #0
    1abc:	da24      	bge.n	1b08 <_dma_init+0xe0>
    1abe:	3301      	adds	r3, #1
    1ac0:	b2db      	uxtb	r3, r3
    1ac2:	2b04      	cmp	r3, #4
    1ac4:	d9f2      	bls.n	1aac <_dma_init+0x84>
    1ac6:	4a15      	ldr	r2, [pc, #84]	; (1b1c <_dma_init+0xf4>)
    1ac8:	8813      	ldrh	r3, [r2, #0]
    1aca:	b29b      	uxth	r3, r3
    1acc:	f043 0302 	orr.w	r3, r3, #2
    1ad0:	8013      	strh	r3, [r2, #0]
    1ad2:	2000      	movs	r0, #0
    1ad4:	bc30      	pop	{r4, r5}
    1ad6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad8:	0950      	lsrs	r0, r2, #5
    1ada:	f001 051f 	and.w	r5, r1, #31
    1ade:	2401      	movs	r4, #1
    1ae0:	40ac      	lsls	r4, r5
    1ae2:	3020      	adds	r0, #32
    1ae4:	4d11      	ldr	r5, [pc, #68]	; (1b2c <_dma_init+0x104>)
    1ae6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aee:	f3bf 8f6f 	isb	sy
    1af2:	e7e0      	b.n	1ab6 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1af4:	0950      	lsrs	r0, r2, #5
    1af6:	f001 051f 	and.w	r5, r1, #31
    1afa:	2401      	movs	r4, #1
    1afc:	40ac      	lsls	r4, r5
    1afe:	3060      	adds	r0, #96	; 0x60
    1b00:	4d0a      	ldr	r5, [pc, #40]	; (1b2c <_dma_init+0x104>)
    1b02:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1b06:	e7d8      	b.n	1aba <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b08:	0952      	lsrs	r2, r2, #5
    1b0a:	f001 011f 	and.w	r1, r1, #31
    1b0e:	2001      	movs	r0, #1
    1b10:	fa00 f101 	lsl.w	r1, r0, r1
    1b14:	4805      	ldr	r0, [pc, #20]	; (1b2c <_dma_init+0x104>)
    1b16:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1b1a:	e7d0      	b.n	1abe <_dma_init+0x96>
    1b1c:	4100a000 	.word	0x4100a000
    1b20:	20000760 	.word	0x20000760
    1b24:	20000960 	.word	0x20000960
    1b28:	0000464c 	.word	0x0000464c
    1b2c:	e000e100 	.word	0xe000e100

00001b30 <_dma_get_channel_resource>:
    1b30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1b34:	008a      	lsls	r2, r1, #2
    1b36:	4b02      	ldr	r3, [pc, #8]	; (1b40 <_dma_get_channel_resource+0x10>)
    1b38:	4413      	add	r3, r2
    1b3a:	6003      	str	r3, [r0, #0]
    1b3c:	2000      	movs	r0, #0
    1b3e:	4770      	bx	lr
    1b40:	20000090 	.word	0x20000090

00001b44 <DMAC_0_Handler>:
    1b44:	b508      	push	{r3, lr}
    1b46:	4b01      	ldr	r3, [pc, #4]	; (1b4c <DMAC_0_Handler+0x8>)
    1b48:	4798      	blx	r3
    1b4a:	bd08      	pop	{r3, pc}
    1b4c:	000019c1 	.word	0x000019c1

00001b50 <DMAC_1_Handler>:
    1b50:	b508      	push	{r3, lr}
    1b52:	4b01      	ldr	r3, [pc, #4]	; (1b58 <DMAC_1_Handler+0x8>)
    1b54:	4798      	blx	r3
    1b56:	bd08      	pop	{r3, pc}
    1b58:	000019c1 	.word	0x000019c1

00001b5c <DMAC_2_Handler>:
    1b5c:	b508      	push	{r3, lr}
    1b5e:	4b01      	ldr	r3, [pc, #4]	; (1b64 <DMAC_2_Handler+0x8>)
    1b60:	4798      	blx	r3
    1b62:	bd08      	pop	{r3, pc}
    1b64:	000019c1 	.word	0x000019c1

00001b68 <DMAC_3_Handler>:
    1b68:	b508      	push	{r3, lr}
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <DMAC_3_Handler+0x8>)
    1b6c:	4798      	blx	r3
    1b6e:	bd08      	pop	{r3, pc}
    1b70:	000019c1 	.word	0x000019c1

00001b74 <DMAC_4_Handler>:
    1b74:	b508      	push	{r3, lr}
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <DMAC_4_Handler+0x8>)
    1b78:	4798      	blx	r3
    1b7a:	bd08      	pop	{r3, pc}
    1b7c:	000019c1 	.word	0x000019c1

00001b80 <_ext_irq_handler>:
    1b80:	b570      	push	{r4, r5, r6, lr}
    1b82:	b082      	sub	sp, #8
    1b84:	4b2a      	ldr	r3, [pc, #168]	; (1c30 <_ext_irq_handler+0xb0>)
    1b86:	695a      	ldr	r2, [r3, #20]
    1b88:	9201      	str	r2, [sp, #4]
    1b8a:	9a01      	ldr	r2, [sp, #4]
    1b8c:	615a      	str	r2, [r3, #20]
    1b8e:	4b29      	ldr	r3, [pc, #164]	; (1c34 <_ext_irq_handler+0xb4>)
    1b90:	6818      	ldr	r0, [r3, #0]
    1b92:	22f4      	movs	r2, #244	; 0xf4
    1b94:	4928      	ldr	r1, [pc, #160]	; (1c38 <_ext_irq_handler+0xb8>)
    1b96:	3000      	adds	r0, #0
    1b98:	bf18      	it	ne
    1b9a:	2001      	movne	r0, #1
    1b9c:	4b27      	ldr	r3, [pc, #156]	; (1c3c <_ext_irq_handler+0xbc>)
    1b9e:	4798      	blx	r3
    1ba0:	f04f 35ff 	mov.w	r5, #4294967295
    1ba4:	e035      	b.n	1c12 <_ext_irq_handler+0x92>
    1ba6:	4b26      	ldr	r3, [pc, #152]	; (1c40 <_ext_irq_handler+0xc0>)
    1ba8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1bac:	6875      	ldr	r5, [r6, #4]
    1bae:	f1b5 3fff 	cmp.w	r5, #4294967295
    1bb2:	d003      	beq.n	1bbc <_ext_irq_handler+0x3c>
    1bb4:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <_ext_irq_handler+0xb4>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	4628      	mov	r0, r5
    1bba:	4798      	blx	r3
    1bbc:	2301      	movs	r3, #1
    1bbe:	40a3      	lsls	r3, r4
    1bc0:	9c01      	ldr	r4, [sp, #4]
    1bc2:	ea24 0403 	bic.w	r4, r4, r3
    1bc6:	9401      	str	r4, [sp, #4]
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	fa93 f4a3 	rbit	r4, r3
    1bce:	fab4 f484 	clz	r4, r4
    1bd2:	b90b      	cbnz	r3, 1bd8 <_ext_irq_handler+0x58>
    1bd4:	f04f 34ff 	mov.w	r4, #4294967295
    1bd8:	f1b4 3fff 	cmp.w	r4, #4294967295
    1bdc:	d014      	beq.n	1c08 <_ext_irq_handler+0x88>
    1bde:	2004      	movs	r0, #4
    1be0:	2100      	movs	r1, #0
    1be2:	e001      	b.n	1be8 <_ext_irq_handler+0x68>
    1be4:	3b01      	subs	r3, #1
    1be6:	b2d8      	uxtb	r0, r3
    1be8:	4281      	cmp	r1, r0
    1bea:	d8e0      	bhi.n	1bae <_ext_irq_handler+0x2e>
    1bec:	1843      	adds	r3, r0, r1
    1bee:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1bf2:	461e      	mov	r6, r3
    1bf4:	4a12      	ldr	r2, [pc, #72]	; (1c40 <_ext_irq_handler+0xc0>)
    1bf6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1bfa:	42a2      	cmp	r2, r4
    1bfc:	d0d3      	beq.n	1ba6 <_ext_irq_handler+0x26>
    1bfe:	42a2      	cmp	r2, r4
    1c00:	daf0      	bge.n	1be4 <_ext_irq_handler+0x64>
    1c02:	3301      	adds	r3, #1
    1c04:	b2d9      	uxtb	r1, r3
    1c06:	e7ef      	b.n	1be8 <_ext_irq_handler+0x68>
    1c08:	4b09      	ldr	r3, [pc, #36]	; (1c30 <_ext_irq_handler+0xb0>)
    1c0a:	695a      	ldr	r2, [r3, #20]
    1c0c:	9201      	str	r2, [sp, #4]
    1c0e:	9a01      	ldr	r2, [sp, #4]
    1c10:	615a      	str	r2, [r3, #20]
    1c12:	9b01      	ldr	r3, [sp, #4]
    1c14:	b14b      	cbz	r3, 1c2a <_ext_irq_handler+0xaa>
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	fa93 f4a3 	rbit	r4, r3
    1c1c:	fab4 f484 	clz	r4, r4
    1c20:	2b00      	cmp	r3, #0
    1c22:	d1d9      	bne.n	1bd8 <_ext_irq_handler+0x58>
    1c24:	f04f 34ff 	mov.w	r4, #4294967295
    1c28:	e7d6      	b.n	1bd8 <_ext_irq_handler+0x58>
    1c2a:	b002      	add	sp, #8
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
    1c2e:	bf00      	nop
    1c30:	40002800 	.word	0x40002800
    1c34:	20000210 	.word	0x20000210
    1c38:	0000476c 	.word	0x0000476c
    1c3c:	00001561 	.word	0x00001561
    1c40:	0000474c 	.word	0x0000474c

00001c44 <_ext_irq_init>:
    1c44:	4b3d      	ldr	r3, [pc, #244]	; (1d3c <_ext_irq_init+0xf8>)
    1c46:	685b      	ldr	r3, [r3, #4]
    1c48:	f013 0f01 	tst.w	r3, #1
    1c4c:	d120      	bne.n	1c90 <_ext_irq_init+0x4c>
    1c4e:	4b3b      	ldr	r3, [pc, #236]	; (1d3c <_ext_irq_init+0xf8>)
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	f013 0f03 	tst.w	r3, #3
    1c56:	d1fa      	bne.n	1c4e <_ext_irq_init+0xa>
    1c58:	4b38      	ldr	r3, [pc, #224]	; (1d3c <_ext_irq_init+0xf8>)
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	f013 0f02 	tst.w	r3, #2
    1c60:	d00e      	beq.n	1c80 <_ext_irq_init+0x3c>
    1c62:	4a36      	ldr	r2, [pc, #216]	; (1d3c <_ext_irq_init+0xf8>)
    1c64:	7813      	ldrb	r3, [r2, #0]
    1c66:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1c6a:	7013      	strb	r3, [r2, #0]
    1c6c:	4b33      	ldr	r3, [pc, #204]	; (1d3c <_ext_irq_init+0xf8>)
    1c6e:	685b      	ldr	r3, [r3, #4]
    1c70:	f013 0f03 	tst.w	r3, #3
    1c74:	d1fa      	bne.n	1c6c <_ext_irq_init+0x28>
    1c76:	4b31      	ldr	r3, [pc, #196]	; (1d3c <_ext_irq_init+0xf8>)
    1c78:	685b      	ldr	r3, [r3, #4]
    1c7a:	f013 0f02 	tst.w	r3, #2
    1c7e:	d1fa      	bne.n	1c76 <_ext_irq_init+0x32>
    1c80:	2201      	movs	r2, #1
    1c82:	4b2e      	ldr	r3, [pc, #184]	; (1d3c <_ext_irq_init+0xf8>)
    1c84:	701a      	strb	r2, [r3, #0]
    1c86:	4b2d      	ldr	r3, [pc, #180]	; (1d3c <_ext_irq_init+0xf8>)
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	f013 0f03 	tst.w	r3, #3
    1c8e:	d1fa      	bne.n	1c86 <_ext_irq_init+0x42>
    1c90:	4b2a      	ldr	r3, [pc, #168]	; (1d3c <_ext_irq_init+0xf8>)
    1c92:	685b      	ldr	r3, [r3, #4]
    1c94:	f013 0f01 	tst.w	r3, #1
    1c98:	d1fa      	bne.n	1c90 <_ext_irq_init+0x4c>
    1c9a:	4a28      	ldr	r2, [pc, #160]	; (1d3c <_ext_irq_init+0xf8>)
    1c9c:	7813      	ldrb	r3, [r2, #0]
    1c9e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1ca2:	7013      	strb	r3, [r2, #0]
    1ca4:	4b25      	ldr	r3, [pc, #148]	; (1d3c <_ext_irq_init+0xf8>)
    1ca6:	685b      	ldr	r3, [r3, #4]
    1ca8:	f013 0f03 	tst.w	r3, #3
    1cac:	d1fa      	bne.n	1ca4 <_ext_irq_init+0x60>
    1cae:	4b23      	ldr	r3, [pc, #140]	; (1d3c <_ext_irq_init+0xf8>)
    1cb0:	2200      	movs	r2, #0
    1cb2:	705a      	strb	r2, [r3, #1]
    1cb4:	609a      	str	r2, [r3, #8]
    1cb6:	619a      	str	r2, [r3, #24]
    1cb8:	631a      	str	r2, [r3, #48]	; 0x30
    1cba:	635a      	str	r2, [r3, #52]	; 0x34
    1cbc:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1cc0:	61da      	str	r2, [r3, #28]
    1cc2:	4a1f      	ldr	r2, [pc, #124]	; (1d40 <_ext_irq_init+0xfc>)
    1cc4:	621a      	str	r2, [r3, #32]
    1cc6:	781a      	ldrb	r2, [r3, #0]
    1cc8:	f042 0202 	orr.w	r2, r2, #2
    1ccc:	701a      	strb	r2, [r3, #0]
    1cce:	4b1b      	ldr	r3, [pc, #108]	; (1d3c <_ext_irq_init+0xf8>)
    1cd0:	685b      	ldr	r3, [r3, #4]
    1cd2:	f013 0f03 	tst.w	r3, #3
    1cd6:	d1fa      	bne.n	1cce <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cd8:	4b1a      	ldr	r3, [pc, #104]	; (1d44 <_ext_irq_init+0x100>)
    1cda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ce2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cee:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cfc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d04:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d12:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d1a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d28:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d30:	601a      	str	r2, [r3, #0]
    1d32:	4b05      	ldr	r3, [pc, #20]	; (1d48 <_ext_irq_init+0x104>)
    1d34:	6018      	str	r0, [r3, #0]
    1d36:	2000      	movs	r0, #0
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	40002800 	.word	0x40002800
    1d40:	0a0000b0 	.word	0x0a0000b0
    1d44:	e000e100 	.word	0xe000e100
    1d48:	20000210 	.word	0x20000210

00001d4c <_ext_irq_enable>:
    1d4c:	b410      	push	{r4}
    1d4e:	2300      	movs	r3, #0
    1d50:	2b03      	cmp	r3, #3
    1d52:	d80d      	bhi.n	1d70 <_ext_irq_enable+0x24>
    1d54:	461c      	mov	r4, r3
    1d56:	4a11      	ldr	r2, [pc, #68]	; (1d9c <_ext_irq_enable+0x50>)
    1d58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1d5c:	6852      	ldr	r2, [r2, #4]
    1d5e:	4282      	cmp	r2, r0
    1d60:	d002      	beq.n	1d68 <_ext_irq_enable+0x1c>
    1d62:	3301      	adds	r3, #1
    1d64:	b2db      	uxtb	r3, r3
    1d66:	e7f3      	b.n	1d50 <_ext_irq_enable+0x4>
    1d68:	4b0c      	ldr	r3, [pc, #48]	; (1d9c <_ext_irq_enable+0x50>)
    1d6a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    1d6e:	e000      	b.n	1d72 <_ext_irq_enable+0x26>
    1d70:	22ff      	movs	r2, #255	; 0xff
    1d72:	2aff      	cmp	r2, #255	; 0xff
    1d74:	d00f      	beq.n	1d96 <_ext_irq_enable+0x4a>
    1d76:	b941      	cbnz	r1, 1d8a <_ext_irq_enable+0x3e>
    1d78:	2301      	movs	r3, #1
    1d7a:	4093      	lsls	r3, r2
    1d7c:	4a08      	ldr	r2, [pc, #32]	; (1da0 <_ext_irq_enable+0x54>)
    1d7e:	60d3      	str	r3, [r2, #12]
    1d80:	6153      	str	r3, [r2, #20]
    1d82:	2000      	movs	r0, #0
    1d84:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d88:	4770      	bx	lr
    1d8a:	2301      	movs	r3, #1
    1d8c:	4093      	lsls	r3, r2
    1d8e:	4a04      	ldr	r2, [pc, #16]	; (1da0 <_ext_irq_enable+0x54>)
    1d90:	6113      	str	r3, [r2, #16]
    1d92:	2000      	movs	r0, #0
    1d94:	e7f6      	b.n	1d84 <_ext_irq_enable+0x38>
    1d96:	f04f 30ff 	mov.w	r0, #4294967295
    1d9a:	e7f3      	b.n	1d84 <_ext_irq_enable+0x38>
    1d9c:	0000474c 	.word	0x0000474c
    1da0:	40002800 	.word	0x40002800

00001da4 <EIC_6_Handler>:
    1da4:	b508      	push	{r3, lr}
    1da6:	4b01      	ldr	r3, [pc, #4]	; (1dac <EIC_6_Handler+0x8>)
    1da8:	4798      	blx	r3
    1daa:	bd08      	pop	{r3, pc}
    1dac:	00001b81 	.word	0x00001b81

00001db0 <EIC_7_Handler>:
    1db0:	b508      	push	{r3, lr}
    1db2:	4b01      	ldr	r3, [pc, #4]	; (1db8 <EIC_7_Handler+0x8>)
    1db4:	4798      	blx	r3
    1db6:	bd08      	pop	{r3, pc}
    1db8:	00001b81 	.word	0x00001b81

00001dbc <EIC_9_Handler>:
    1dbc:	b508      	push	{r3, lr}
    1dbe:	4b01      	ldr	r3, [pc, #4]	; (1dc4 <EIC_9_Handler+0x8>)
    1dc0:	4798      	blx	r3
    1dc2:	bd08      	pop	{r3, pc}
    1dc4:	00001b81 	.word	0x00001b81

00001dc8 <EIC_14_Handler>:
    1dc8:	b508      	push	{r3, lr}
    1dca:	4b01      	ldr	r3, [pc, #4]	; (1dd0 <EIC_14_Handler+0x8>)
    1dcc:	4798      	blx	r3
    1dce:	bd08      	pop	{r3, pc}
    1dd0:	00001b81 	.word	0x00001b81

00001dd4 <_gclk_init_generators_by_fref>:
    1dd4:	f010 0f01 	tst.w	r0, #1
    1dd8:	d008      	beq.n	1dec <_gclk_init_generators_by_fref+0x18>
    1dda:	4a17      	ldr	r2, [pc, #92]	; (1e38 <_gclk_init_generators_by_fref+0x64>)
    1ddc:	4b17      	ldr	r3, [pc, #92]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1dde:	621a      	str	r2, [r3, #32]
    1de0:	4b16      	ldr	r3, [pc, #88]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1de2:	685a      	ldr	r2, [r3, #4]
    1de4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1de8:	421a      	tst	r2, r3
    1dea:	d1f9      	bne.n	1de0 <_gclk_init_generators_by_fref+0xc>
    1dec:	f010 0f02 	tst.w	r0, #2
    1df0:	d008      	beq.n	1e04 <_gclk_init_generators_by_fref+0x30>
    1df2:	4a13      	ldr	r2, [pc, #76]	; (1e40 <_gclk_init_generators_by_fref+0x6c>)
    1df4:	4b11      	ldr	r3, [pc, #68]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1df6:	625a      	str	r2, [r3, #36]	; 0x24
    1df8:	4b10      	ldr	r3, [pc, #64]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1dfa:	685a      	ldr	r2, [r3, #4]
    1dfc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e00:	421a      	tst	r2, r3
    1e02:	d1f9      	bne.n	1df8 <_gclk_init_generators_by_fref+0x24>
    1e04:	f010 0f04 	tst.w	r0, #4
    1e08:	d008      	beq.n	1e1c <_gclk_init_generators_by_fref+0x48>
    1e0a:	4a0e      	ldr	r2, [pc, #56]	; (1e44 <_gclk_init_generators_by_fref+0x70>)
    1e0c:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e0e:	629a      	str	r2, [r3, #40]	; 0x28
    1e10:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e12:	685a      	ldr	r2, [r3, #4]
    1e14:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e18:	421a      	tst	r2, r3
    1e1a:	d1f9      	bne.n	1e10 <_gclk_init_generators_by_fref+0x3c>
    1e1c:	f010 0f08 	tst.w	r0, #8
    1e20:	d008      	beq.n	1e34 <_gclk_init_generators_by_fref+0x60>
    1e22:	4a09      	ldr	r2, [pc, #36]	; (1e48 <_gclk_init_generators_by_fref+0x74>)
    1e24:	4b05      	ldr	r3, [pc, #20]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e26:	62da      	str	r2, [r3, #44]	; 0x2c
    1e28:	4b04      	ldr	r3, [pc, #16]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e2a:	685a      	ldr	r2, [r3, #4]
    1e2c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e30:	421a      	tst	r2, r3
    1e32:	d1f9      	bne.n	1e28 <_gclk_init_generators_by_fref+0x54>
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop
    1e38:	00020107 	.word	0x00020107
    1e3c:	40001c00 	.word	0x40001c00
    1e40:	00020b07 	.word	0x00020b07
    1e44:	00010105 	.word	0x00010105
    1e48:	00100106 	.word	0x00100106

00001e4c <_mclk_init>:
    1e4c:	2201      	movs	r2, #1
    1e4e:	4b01      	ldr	r3, [pc, #4]	; (1e54 <_mclk_init+0x8>)
    1e50:	715a      	strb	r2, [r3, #5]
    1e52:	4770      	bx	lr
    1e54:	40000800 	.word	0x40000800

00001e58 <_osc32kctrl_init_sources>:
    1e58:	4b06      	ldr	r3, [pc, #24]	; (1e74 <_osc32kctrl_init_sources+0x1c>)
    1e5a:	f242 228e 	movw	r2, #8846	; 0x228e
    1e5e:	829a      	strh	r2, [r3, #20]
    1e60:	2200      	movs	r2, #0
    1e62:	759a      	strb	r2, [r3, #22]
    1e64:	75da      	strb	r2, [r3, #23]
    1e66:	69da      	ldr	r2, [r3, #28]
    1e68:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    1e6c:	61da      	str	r2, [r3, #28]
    1e6e:	2201      	movs	r2, #1
    1e70:	741a      	strb	r2, [r3, #16]
    1e72:	4770      	bx	lr
    1e74:	40001400 	.word	0x40001400

00001e78 <_oscctrl_init_sources>:
    1e78:	4770      	bx	lr
	...

00001e7c <_oscctrl_init_referenced_generators>:
    1e7c:	4a49      	ldr	r2, [pc, #292]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e7e:	6a13      	ldr	r3, [r2, #32]
    1e80:	f023 030f 	bic.w	r3, r3, #15
    1e84:	f043 0304 	orr.w	r3, r3, #4
    1e88:	6213      	str	r3, [r2, #32]
    1e8a:	4b46      	ldr	r3, [pc, #280]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e8c:	685a      	ldr	r2, [r3, #4]
    1e8e:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e92:	421a      	tst	r2, r3
    1e94:	d1f9      	bne.n	1e8a <_oscctrl_init_referenced_generators+0xe>
    1e96:	4b43      	ldr	r3, [pc, #268]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	f013 0f04 	tst.w	r3, #4
    1e9e:	d1fa      	bne.n	1e96 <_oscctrl_init_referenced_generators+0x1a>
    1ea0:	4b41      	ldr	r3, [pc, #260]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ea2:	2200      	movs	r2, #0
    1ea4:	771a      	strb	r2, [r3, #28]
    1ea6:	2142      	movs	r1, #66	; 0x42
    1ea8:	4a3e      	ldr	r2, [pc, #248]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1eaa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    1eae:	4a3f      	ldr	r2, [pc, #252]	; (1fac <_oscctrl_init_referenced_generators+0x130>)
    1eb0:	629a      	str	r2, [r3, #40]	; 0x28
    1eb2:	4b3d      	ldr	r3, [pc, #244]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1eb8:	f013 0f10 	tst.w	r3, #16
    1ebc:	d1f9      	bne.n	1eb2 <_oscctrl_init_referenced_generators+0x36>
    1ebe:	2200      	movs	r2, #0
    1ec0:	4b39      	ldr	r3, [pc, #228]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ec2:	f883 2020 	strb.w	r2, [r3, #32]
    1ec6:	4b38      	ldr	r3, [pc, #224]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ec8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ecc:	f013 0f04 	tst.w	r3, #4
    1ed0:	d1f9      	bne.n	1ec6 <_oscctrl_init_referenced_generators+0x4a>
    1ed2:	2202      	movs	r2, #2
    1ed4:	4b34      	ldr	r3, [pc, #208]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ed6:	771a      	strb	r2, [r3, #28]
    1ed8:	4b33      	ldr	r3, [pc, #204]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ede:	f013 0f02 	tst.w	r3, #2
    1ee2:	d1f9      	bne.n	1ed8 <_oscctrl_init_referenced_generators+0x5c>
    1ee4:	4b30      	ldr	r3, [pc, #192]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ee8:	625a      	str	r2, [r3, #36]	; 0x24
    1eea:	4b2f      	ldr	r3, [pc, #188]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ef0:	f013 0f08 	tst.w	r3, #8
    1ef4:	d1f9      	bne.n	1eea <_oscctrl_init_referenced_generators+0x6e>
    1ef6:	2281      	movs	r2, #129	; 0x81
    1ef8:	4b2b      	ldr	r3, [pc, #172]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1efa:	f883 2020 	strb.w	r2, [r3, #32]
    1efe:	4b2a      	ldr	r3, [pc, #168]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1f04:	f013 0f04 	tst.w	r3, #4
    1f08:	d1f9      	bne.n	1efe <_oscctrl_init_referenced_generators+0x82>
    1f0a:	2243      	movs	r2, #67	; 0x43
    1f0c:	4b25      	ldr	r3, [pc, #148]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1f12:	2227      	movs	r2, #39	; 0x27
    1f14:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1f18:	635a      	str	r2, [r3, #52]	; 0x34
    1f1a:	4b23      	ldr	r3, [pc, #140]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f1e:	f013 0f06 	tst.w	r3, #6
    1f22:	d1fa      	bne.n	1f1a <_oscctrl_init_referenced_generators+0x9e>
    1f24:	4b20      	ldr	r3, [pc, #128]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f26:	2200      	movs	r2, #0
    1f28:	639a      	str	r2, [r3, #56]	; 0x38
    1f2a:	2202      	movs	r2, #2
    1f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1f30:	4b1d      	ldr	r3, [pc, #116]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f34:	f013 0f02 	tst.w	r3, #2
    1f38:	d1fa      	bne.n	1f30 <_oscctrl_init_referenced_generators+0xb4>
    1f3a:	4b1b      	ldr	r3, [pc, #108]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1f40:	f013 0f01 	tst.w	r3, #1
    1f44:	d027      	beq.n	1f96 <_oscctrl_init_referenced_generators+0x11a>
    1f46:	4b18      	ldr	r3, [pc, #96]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f48:	691b      	ldr	r3, [r3, #16]
    1f4a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
    1f4e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1f52:	d1f8      	bne.n	1f46 <_oscctrl_init_referenced_generators+0xca>
    1f54:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f58:	f013 0f01 	tst.w	r3, #1
    1f5c:	d104      	bne.n	1f68 <_oscctrl_init_referenced_generators+0xec>
    1f5e:	4b12      	ldr	r3, [pc, #72]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f62:	f013 0f02 	tst.w	r3, #2
    1f66:	d0f5      	beq.n	1f54 <_oscctrl_init_referenced_generators+0xd8>
    1f68:	4b0e      	ldr	r3, [pc, #56]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f6a:	685b      	ldr	r3, [r3, #4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d1fb      	bne.n	1f68 <_oscctrl_init_referenced_generators+0xec>
    1f70:	4a0c      	ldr	r2, [pc, #48]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f72:	6a13      	ldr	r3, [r2, #32]
    1f74:	f023 030f 	bic.w	r3, r3, #15
    1f78:	f043 0307 	orr.w	r3, r3, #7
    1f7c:	6213      	str	r3, [r2, #32]
    1f7e:	4b09      	ldr	r3, [pc, #36]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f80:	685a      	ldr	r2, [r3, #4]
    1f82:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f86:	421a      	tst	r2, r3
    1f88:	d1f9      	bne.n	1f7e <_oscctrl_init_referenced_generators+0x102>
    1f8a:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	f013 0f04 	tst.w	r3, #4
    1f92:	d1fa      	bne.n	1f8a <_oscctrl_init_referenced_generators+0x10e>
    1f94:	4770      	bx	lr
    1f96:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f98:	691b      	ldr	r3, [r3, #16]
    1f9a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f9e:	d0fa      	beq.n	1f96 <_oscctrl_init_referenced_generators+0x11a>
    1fa0:	e7d8      	b.n	1f54 <_oscctrl_init_referenced_generators+0xd8>
    1fa2:	bf00      	nop
    1fa4:	40001c00 	.word	0x40001c00
    1fa8:	40001000 	.word	0x40001000
    1fac:	7c7f05b9 	.word	0x7c7f05b9

00001fb0 <_pcc_dma_transfer_done>:
    1fb0:	b508      	push	{r3, lr}
    1fb2:	6880      	ldr	r0, [r0, #8]
    1fb4:	6803      	ldr	r3, [r0, #0]
    1fb6:	2100      	movs	r1, #0
    1fb8:	4798      	blx	r3
    1fba:	bd08      	pop	{r3, pc}

00001fbc <_camera_async_init>:
    1fbc:	b538      	push	{r3, r4, r5, lr}
    1fbe:	4604      	mov	r4, r0
    1fc0:	60c1      	str	r1, [r0, #12]
    1fc2:	4b07      	ldr	r3, [pc, #28]	; (1fe0 <_camera_async_init+0x24>)
    1fc4:	600b      	str	r3, [r1, #0]
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <_camera_async_init+0x28>)
    1fc8:	6018      	str	r0, [r3, #0]
    1fca:	4d07      	ldr	r5, [pc, #28]	; (1fe8 <_camera_async_init+0x2c>)
    1fcc:	2100      	movs	r1, #0
    1fce:	4628      	mov	r0, r5
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <_camera_async_init+0x30>)
    1fd2:	4798      	blx	r3
    1fd4:	682b      	ldr	r3, [r5, #0]
    1fd6:	609c      	str	r4, [r3, #8]
    1fd8:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <_camera_async_init+0x34>)
    1fda:	601a      	str	r2, [r3, #0]
    1fdc:	bd38      	pop	{r3, r4, r5, pc}
    1fde:	bf00      	nop
    1fe0:	c0000020 	.word	0xc0000020
    1fe4:	20000214 	.word	0x20000214
    1fe8:	20000b60 	.word	0x20000b60
    1fec:	00001b31 	.word	0x00001b31
    1ff0:	00001fb1 	.word	0x00001fb1

00001ff4 <PCC_Handler>:
    1ff4:	b500      	push	{lr}
    1ff6:	b083      	sub	sp, #12
    1ff8:	4b08      	ldr	r3, [pc, #32]	; (201c <PCC_Handler+0x28>)
    1ffa:	6818      	ldr	r0, [r3, #0]
    1ffc:	68c3      	ldr	r3, [r0, #12]
    1ffe:	691a      	ldr	r2, [r3, #16]
    2000:	9201      	str	r2, [sp, #4]
    2002:	2201      	movs	r2, #1
    2004:	609a      	str	r2, [r3, #8]
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	f013 0f01 	tst.w	r3, #1
    200c:	d003      	beq.n	2016 <PCC_Handler+0x22>
    200e:	6803      	ldr	r3, [r0, #0]
    2010:	b10b      	cbz	r3, 2016 <PCC_Handler+0x22>
    2012:	2100      	movs	r1, #0
    2014:	4798      	blx	r3
    2016:	b003      	add	sp, #12
    2018:	f85d fb04 	ldr.w	pc, [sp], #4
    201c:	20000214 	.word	0x20000214

00002020 <RAMECC_Handler>:
    2020:	b500      	push	{lr}
    2022:	b083      	sub	sp, #12
    2024:	4b0d      	ldr	r3, [pc, #52]	; (205c <RAMECC_Handler+0x3c>)
    2026:	789b      	ldrb	r3, [r3, #2]
    2028:	b2db      	uxtb	r3, r3
    202a:	9301      	str	r3, [sp, #4]
    202c:	9b01      	ldr	r3, [sp, #4]
    202e:	f013 0f02 	tst.w	r3, #2
    2032:	d006      	beq.n	2042 <RAMECC_Handler+0x22>
    2034:	4b0a      	ldr	r3, [pc, #40]	; (2060 <RAMECC_Handler+0x40>)
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	b11b      	cbz	r3, 2042 <RAMECC_Handler+0x22>
    203a:	4a08      	ldr	r2, [pc, #32]	; (205c <RAMECC_Handler+0x3c>)
    203c:	6850      	ldr	r0, [r2, #4]
    203e:	4798      	blx	r3
    2040:	e009      	b.n	2056 <RAMECC_Handler+0x36>
    2042:	9b01      	ldr	r3, [sp, #4]
    2044:	f013 0f01 	tst.w	r3, #1
    2048:	d005      	beq.n	2056 <RAMECC_Handler+0x36>
    204a:	4b05      	ldr	r3, [pc, #20]	; (2060 <RAMECC_Handler+0x40>)
    204c:	685b      	ldr	r3, [r3, #4]
    204e:	b113      	cbz	r3, 2056 <RAMECC_Handler+0x36>
    2050:	4a02      	ldr	r2, [pc, #8]	; (205c <RAMECC_Handler+0x3c>)
    2052:	6850      	ldr	r0, [r2, #4]
    2054:	4798      	blx	r3
    2056:	b003      	add	sp, #12
    2058:	f85d fb04 	ldr.w	pc, [sp], #4
    205c:	41020000 	.word	0x41020000
    2060:	20000b64 	.word	0x20000b64

00002064 <_mci_set_speed>:
    2064:	b410      	push	{r4}
    2066:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2068:	f013 0f04 	tst.w	r3, #4
    206c:	d009      	beq.n	2082 <_mci_set_speed+0x1e>
    206e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    2070:	f014 0f03 	tst.w	r4, #3
    2074:	d1fb      	bne.n	206e <_mci_set_speed+0xa>
    2076:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2078:	b2a4      	uxth	r4, r4
    207a:	f024 0404 	bic.w	r4, r4, #4
    207e:	b2a4      	uxth	r4, r4
    2080:	8584      	strh	r4, [r0, #44]	; 0x2c
    2082:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2084:	f3c4 4407 	ubfx	r4, r4, #16, #8
    2088:	2c00      	cmp	r4, #0
    208a:	d135      	bne.n	20f8 <_mci_set_speed+0x94>
    208c:	4b22      	ldr	r3, [pc, #136]	; (2118 <_mci_set_speed+0xb4>)
    208e:	2a00      	cmp	r2, #0
    2090:	d134      	bne.n	20fc <_mci_set_speed+0x98>
    2092:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2094:	b292      	uxth	r2, r2
    2096:	f022 0220 	bic.w	r2, r2, #32
    209a:	b292      	uxth	r2, r2
    209c:	8582      	strh	r2, [r0, #44]	; 0x2c
    209e:	fbb3 f1f1 	udiv	r1, r3, r1
    20a2:	0849      	lsrs	r1, r1, #1
    20a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    20a8:	f013 0f04 	tst.w	r3, #4
    20ac:	d001      	beq.n	20b2 <_mci_set_speed+0x4e>
    20ae:	b901      	cbnz	r1, 20b2 <_mci_set_speed+0x4e>
    20b0:	2101      	movs	r1, #1
    20b2:	b28a      	uxth	r2, r1
    20b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20b6:	b2db      	uxtb	r3, r3
    20b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    20bc:	b29b      	uxth	r3, r3
    20be:	8583      	strh	r3, [r0, #44]	; 0x2c
    20c0:	f3c1 210f 	ubfx	r1, r1, #8, #16
    20c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20c6:	b29b      	uxth	r3, r3
    20c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    20cc:	0189      	lsls	r1, r1, #6
    20ce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    20d2:	4319      	orrs	r1, r3
    20d4:	8581      	strh	r1, [r0, #44]	; 0x2c
    20d6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20d8:	b29b      	uxth	r3, r3
    20da:	f043 0301 	orr.w	r3, r3, #1
    20de:	8583      	strh	r3, [r0, #44]	; 0x2c
    20e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20e2:	f013 0f02 	tst.w	r3, #2
    20e6:	d0fb      	beq.n	20e0 <_mci_set_speed+0x7c>
    20e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20ea:	b29b      	uxth	r3, r3
    20ec:	f043 0304 	orr.w	r3, r3, #4
    20f0:	8583      	strh	r3, [r0, #44]	; 0x2c
    20f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    20f6:	4770      	bx	lr
    20f8:	4b08      	ldr	r3, [pc, #32]	; (211c <_mci_set_speed+0xb8>)
    20fa:	e7c8      	b.n	208e <_mci_set_speed+0x2a>
    20fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    20fe:	b292      	uxth	r2, r2
    2100:	f042 0220 	orr.w	r2, r2, #32
    2104:	8582      	strh	r2, [r0, #44]	; 0x2c
    2106:	fb04 3303 	mla	r3, r4, r3, r3
    210a:	fbb3 f1f1 	udiv	r1, r3, r1
    210e:	2900      	cmp	r1, #0
    2110:	d0c8      	beq.n	20a4 <_mci_set_speed+0x40>
    2112:	3901      	subs	r1, #1
    2114:	e7c6      	b.n	20a4 <_mci_set_speed+0x40>
    2116:	bf00      	nop
    2118:	0393a000 	.word	0x0393a000
    211c:	01c9d000 	.word	0x01c9d000

00002120 <_mci_reset>:
    2120:	b510      	push	{r4, lr}
    2122:	4604      	mov	r4, r0
    2124:	2234      	movs	r2, #52	; 0x34
    2126:	4906      	ldr	r1, [pc, #24]	; (2140 <_mci_reset+0x20>)
    2128:	3000      	adds	r0, #0
    212a:	bf18      	it	ne
    212c:	2001      	movne	r0, #1
    212e:	4b05      	ldr	r3, [pc, #20]	; (2144 <_mci_reset+0x24>)
    2130:	4798      	blx	r3
    2132:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2136:	f043 0302 	orr.w	r3, r3, #2
    213a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    213e:	bd10      	pop	{r4, pc}
    2140:	00004784 	.word	0x00004784
    2144:	00001561 	.word	0x00001561

00002148 <_mci_wait_busy>:
    2148:	b510      	push	{r4, lr}
    214a:	4604      	mov	r4, r0
    214c:	227f      	movs	r2, #127	; 0x7f
    214e:	490b      	ldr	r1, [pc, #44]	; (217c <_mci_wait_busy+0x34>)
    2150:	3000      	adds	r0, #0
    2152:	bf18      	it	ne
    2154:	2001      	movne	r0, #1
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <_mci_wait_busy+0x38>)
    2158:	4798      	blx	r3
    215a:	f04f 33ff 	mov.w	r3, #4294967295
    215e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2160:	1e59      	subs	r1, r3, #1
    2162:	b12b      	cbz	r3, 2170 <_mci_wait_busy+0x28>
    2164:	460b      	mov	r3, r1
    2166:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    216a:	d0f8      	beq.n	215e <_mci_wait_busy+0x16>
    216c:	2001      	movs	r0, #1
    216e:	bd10      	pop	{r4, pc}
    2170:	4620      	mov	r0, r4
    2172:	4b04      	ldr	r3, [pc, #16]	; (2184 <_mci_wait_busy+0x3c>)
    2174:	4798      	blx	r3
    2176:	2000      	movs	r0, #0
    2178:	bd10      	pop	{r4, pc}
    217a:	bf00      	nop
    217c:	00004784 	.word	0x00004784
    2180:	00001561 	.word	0x00001561
    2184:	00002121 	.word	0x00002121

00002188 <_mci_send_cmd_execute>:
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	460f      	mov	r7, r1
    218c:	4615      	mov	r5, r2
    218e:	461e      	mov	r6, r3
    2190:	4604      	mov	r4, r0
    2192:	2299      	movs	r2, #153	; 0x99
    2194:	4934      	ldr	r1, [pc, #208]	; (2268 <_mci_send_cmd_execute+0xe0>)
    2196:	3000      	adds	r0, #0
    2198:	bf18      	it	ne
    219a:	2001      	movne	r0, #1
    219c:	4b33      	ldr	r3, [pc, #204]	; (226c <_mci_send_cmd_execute+0xe4>)
    219e:	4798      	blx	r3
    21a0:	0229      	lsls	r1, r5, #8
    21a2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    21a6:	4339      	orrs	r1, r7
    21a8:	f415 7f80 	tst.w	r5, #256	; 0x100
    21ac:	d004      	beq.n	21b8 <_mci_send_cmd_execute+0x30>
    21ae:	f415 6f00 	tst.w	r5, #2048	; 0x800
    21b2:	d00e      	beq.n	21d2 <_mci_send_cmd_execute+0x4a>
    21b4:	f041 0101 	orr.w	r1, r1, #1
    21b8:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    21bc:	d012      	beq.n	21e4 <_mci_send_cmd_execute+0x5c>
    21be:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    21c2:	f043 0310 	orr.w	r3, r3, #16
    21c6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    21ca:	60a6      	str	r6, [r4, #8]
    21cc:	b28b      	uxth	r3, r1
    21ce:	81e3      	strh	r3, [r4, #14]
    21d0:	e017      	b.n	2202 <_mci_send_cmd_execute+0x7a>
    21d2:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    21d6:	d002      	beq.n	21de <_mci_send_cmd_execute+0x56>
    21d8:	f041 0103 	orr.w	r1, r1, #3
    21dc:	e7ec      	b.n	21b8 <_mci_send_cmd_execute+0x30>
    21de:	f041 0102 	orr.w	r1, r1, #2
    21e2:	e7e9      	b.n	21b8 <_mci_send_cmd_execute+0x30>
    21e4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    21e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    21ec:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    21f0:	e7eb      	b.n	21ca <_mci_send_cmd_execute+0x42>
    21f2:	f240 227f 	movw	r2, #639	; 0x27f
    21f6:	4213      	tst	r3, r2
    21f8:	d118      	bne.n	222c <_mci_send_cmd_execute+0xa4>
    21fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    21fc:	f013 0f01 	tst.w	r3, #1
    2200:	d120      	bne.n	2244 <_mci_send_cmd_execute+0xbc>
    2202:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2204:	b29b      	uxth	r3, r3
    2206:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    220a:	d0f2      	beq.n	21f2 <_mci_send_cmd_execute+0x6a>
    220c:	f240 225d 	movw	r2, #605	; 0x25d
    2210:	4213      	tst	r3, r2
    2212:	d0f2      	beq.n	21fa <_mci_send_cmd_execute+0x72>
    2214:	4620      	mov	r0, r4
    2216:	4b16      	ldr	r3, [pc, #88]	; (2270 <_mci_send_cmd_execute+0xe8>)
    2218:	4798      	blx	r3
    221a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    221c:	b29b      	uxth	r3, r3
    221e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2222:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2226:	8663      	strh	r3, [r4, #50]	; 0x32
    2228:	2000      	movs	r0, #0
    222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    222c:	4620      	mov	r0, r4
    222e:	4b10      	ldr	r3, [pc, #64]	; (2270 <_mci_send_cmd_execute+0xe8>)
    2230:	4798      	blx	r3
    2232:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2234:	b29b      	uxth	r3, r3
    2236:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    223a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    223e:	8663      	strh	r3, [r4, #50]	; 0x32
    2240:	2000      	movs	r0, #0
    2242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2244:	f011 0f20 	tst.w	r1, #32
    2248:	d104      	bne.n	2254 <_mci_send_cmd_execute+0xcc>
    224a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    224c:	b29b      	uxth	r3, r3
    224e:	f043 0301 	orr.w	r3, r3, #1
    2252:	8623      	strh	r3, [r4, #48]	; 0x30
    2254:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2258:	d101      	bne.n	225e <_mci_send_cmd_execute+0xd6>
    225a:	2001      	movs	r0, #1
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    225e:	4620      	mov	r0, r4
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <_mci_send_cmd_execute+0xec>)
    2262:	4798      	blx	r3
    2264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2266:	bf00      	nop
    2268:	00004784 	.word	0x00004784
    226c:	00001561 	.word	0x00001561
    2270:	00002121 	.word	0x00002121
    2274:	00002149 	.word	0x00002149

00002278 <_mci_sync_init>:
    2278:	b538      	push	{r3, r4, r5, lr}
    227a:	460c      	mov	r4, r1
    227c:	4605      	mov	r5, r0
    227e:	b348      	cbz	r0, 22d4 <_mci_sync_init+0x5c>
    2280:	b331      	cbz	r1, 22d0 <_mci_sync_init+0x58>
    2282:	2001      	movs	r0, #1
    2284:	22d8      	movs	r2, #216	; 0xd8
    2286:	4914      	ldr	r1, [pc, #80]	; (22d8 <_mci_sync_init+0x60>)
    2288:	4b14      	ldr	r3, [pc, #80]	; (22dc <_mci_sync_init+0x64>)
    228a:	4798      	blx	r3
    228c:	602c      	str	r4, [r5, #0]
    228e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2292:	f043 0301 	orr.w	r3, r3, #1
    2296:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    229a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    229e:	f013 0f01 	tst.w	r3, #1
    22a2:	d1fa      	bne.n	229a <_mci_sync_init+0x22>
    22a4:	230e      	movs	r3, #14
    22a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    22aa:	230f      	movs	r3, #15
    22ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    22b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    22b2:	b29b      	uxth	r3, r3
    22b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    22b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    22bc:	86a3      	strh	r3, [r4, #52]	; 0x34
    22be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    22c0:	b29b      	uxth	r3, r3
    22c2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    22c6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    22ca:	86e3      	strh	r3, [r4, #54]	; 0x36
    22cc:	2000      	movs	r0, #0
    22ce:	bd38      	pop	{r3, r4, r5, pc}
    22d0:	2000      	movs	r0, #0
    22d2:	e7d7      	b.n	2284 <_mci_sync_init+0xc>
    22d4:	2000      	movs	r0, #0
    22d6:	e7d5      	b.n	2284 <_mci_sync_init+0xc>
    22d8:	00004784 	.word	0x00004784
    22dc:	00001561 	.word	0x00001561

000022e0 <_mci_sync_select_device>:
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e2:	4616      	mov	r6, r2
    22e4:	461d      	mov	r5, r3
    22e6:	f89d 7018 	ldrb.w	r7, [sp, #24]
    22ea:	4604      	mov	r4, r0
    22ec:	b1e0      	cbz	r0, 2328 <_mci_sync_select_device+0x48>
    22ee:	6803      	ldr	r3, [r0, #0]
    22f0:	b1c3      	cbz	r3, 2324 <_mci_sync_select_device+0x44>
    22f2:	2001      	movs	r0, #1
    22f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    22f8:	491b      	ldr	r1, [pc, #108]	; (2368 <_mci_sync_select_device+0x88>)
    22fa:	4b1c      	ldr	r3, [pc, #112]	; (236c <_mci_sync_select_device+0x8c>)
    22fc:	4798      	blx	r3
    22fe:	6824      	ldr	r4, [r4, #0]
    2300:	b1a7      	cbz	r7, 232c <_mci_sync_select_device+0x4c>
    2302:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2306:	f043 0304 	orr.w	r3, r3, #4
    230a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    230e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    2310:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2314:	d011      	beq.n	233a <_mci_sync_select_device+0x5a>
    2316:	2d01      	cmp	r5, #1
    2318:	d015      	beq.n	2346 <_mci_sync_select_device+0x66>
    231a:	2d04      	cmp	r5, #4
    231c:	d01b      	beq.n	2356 <_mci_sync_select_device+0x76>
    231e:	f06f 000c 	mvn.w	r0, #12
    2322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2324:	2000      	movs	r0, #0
    2326:	e7e5      	b.n	22f4 <_mci_sync_select_device+0x14>
    2328:	2000      	movs	r0, #0
    232a:	e7e3      	b.n	22f4 <_mci_sync_select_device+0x14>
    232c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2330:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2334:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2338:	e7e9      	b.n	230e <_mci_sync_select_device+0x2e>
    233a:	2200      	movs	r2, #0
    233c:	4631      	mov	r1, r6
    233e:	4620      	mov	r0, r4
    2340:	4b0b      	ldr	r3, [pc, #44]	; (2370 <_mci_sync_select_device+0x90>)
    2342:	4798      	blx	r3
    2344:	e7e7      	b.n	2316 <_mci_sync_select_device+0x36>
    2346:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    234a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    234e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2352:	2000      	movs	r0, #0
    2354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2356:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    235a:	f043 0302 	orr.w	r3, r3, #2
    235e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2362:	2000      	movs	r0, #0
    2364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2366:	bf00      	nop
    2368:	00004784 	.word	0x00004784
    236c:	00001561 	.word	0x00001561
    2370:	00002065 	.word	0x00002065

00002374 <_mci_sync_deselect_device>:
    2374:	2000      	movs	r0, #0
    2376:	4770      	bx	lr

00002378 <_mci_sync_send_cmd>:
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	460d      	mov	r5, r1
    237c:	4616      	mov	r6, r2
    237e:	4604      	mov	r4, r0
    2380:	b180      	cbz	r0, 23a4 <_mci_sync_send_cmd+0x2c>
    2382:	6803      	ldr	r3, [r0, #0]
    2384:	b163      	cbz	r3, 23a0 <_mci_sync_send_cmd+0x28>
    2386:	2001      	movs	r0, #1
    2388:	f44f 72ab 	mov.w	r2, #342	; 0x156
    238c:	490d      	ldr	r1, [pc, #52]	; (23c4 <_mci_sync_send_cmd+0x4c>)
    238e:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <_mci_sync_send_cmd+0x50>)
    2390:	4798      	blx	r3
    2392:	6820      	ldr	r0, [r4, #0]
    2394:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2396:	f013 0f01 	tst.w	r3, #1
    239a:	d005      	beq.n	23a8 <_mci_sync_send_cmd+0x30>
    239c:	2000      	movs	r0, #0
    239e:	bd70      	pop	{r4, r5, r6, pc}
    23a0:	2000      	movs	r0, #0
    23a2:	e7f1      	b.n	2388 <_mci_sync_send_cmd+0x10>
    23a4:	2000      	movs	r0, #0
    23a6:	e7ef      	b.n	2388 <_mci_sync_send_cmd+0x10>
    23a8:	8983      	ldrh	r3, [r0, #12]
    23aa:	b29b      	uxth	r3, r3
    23ac:	f023 0301 	bic.w	r3, r3, #1
    23b0:	b29b      	uxth	r3, r3
    23b2:	8183      	strh	r3, [r0, #12]
    23b4:	2100      	movs	r1, #0
    23b6:	80c1      	strh	r1, [r0, #6]
    23b8:	4633      	mov	r3, r6
    23ba:	462a      	mov	r2, r5
    23bc:	4c03      	ldr	r4, [pc, #12]	; (23cc <_mci_sync_send_cmd+0x54>)
    23be:	47a0      	blx	r4
    23c0:	bd70      	pop	{r4, r5, r6, pc}
    23c2:	bf00      	nop
    23c4:	00004784 	.word	0x00004784
    23c8:	00001561 	.word	0x00001561
    23cc:	00002189 	.word	0x00002189

000023d0 <_mci_sync_get_response>:
    23d0:	b510      	push	{r4, lr}
    23d2:	4604      	mov	r4, r0
    23d4:	b160      	cbz	r0, 23f0 <_mci_sync_get_response+0x20>
    23d6:	6803      	ldr	r3, [r0, #0]
    23d8:	b143      	cbz	r3, 23ec <_mci_sync_get_response+0x1c>
    23da:	2001      	movs	r0, #1
    23dc:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    23e0:	4904      	ldr	r1, [pc, #16]	; (23f4 <_mci_sync_get_response+0x24>)
    23e2:	4b05      	ldr	r3, [pc, #20]	; (23f8 <_mci_sync_get_response+0x28>)
    23e4:	4798      	blx	r3
    23e6:	6823      	ldr	r3, [r4, #0]
    23e8:	6918      	ldr	r0, [r3, #16]
    23ea:	bd10      	pop	{r4, pc}
    23ec:	2000      	movs	r0, #0
    23ee:	e7f5      	b.n	23dc <_mci_sync_get_response+0xc>
    23f0:	2000      	movs	r0, #0
    23f2:	e7f3      	b.n	23dc <_mci_sync_get_response+0xc>
    23f4:	00004784 	.word	0x00004784
    23f8:	00001561 	.word	0x00001561

000023fc <_mci_sync_adtc_start>:
    23fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2400:	460d      	mov	r5, r1
    2402:	4690      	mov	r8, r2
    2404:	461f      	mov	r7, r3
    2406:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    240a:	4604      	mov	r4, r0
    240c:	2800      	cmp	r0, #0
    240e:	d031      	beq.n	2474 <_mci_sync_adtc_start+0x78>
    2410:	6803      	ldr	r3, [r0, #0]
    2412:	b36b      	cbz	r3, 2470 <_mci_sync_adtc_start+0x74>
    2414:	2001      	movs	r0, #1
    2416:	f240 1293 	movw	r2, #403	; 0x193
    241a:	4921      	ldr	r1, [pc, #132]	; (24a0 <_mci_sync_adtc_start+0xa4>)
    241c:	4b21      	ldr	r3, [pc, #132]	; (24a4 <_mci_sync_adtc_start+0xa8>)
    241e:	4798      	blx	r3
    2420:	6820      	ldr	r0, [r4, #0]
    2422:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2424:	f013 0f01 	tst.w	r3, #1
    2428:	d131      	bne.n	248e <_mci_sync_adtc_start+0x92>
    242a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    242c:	f013 0f02 	tst.w	r3, #2
    2430:	d130      	bne.n	2494 <_mci_sync_adtc_start+0x98>
    2432:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    2436:	d01f      	beq.n	2478 <_mci_sync_adtc_start+0x7c>
    2438:	2300      	movs	r3, #0
    243a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    243e:	d104      	bne.n	244a <_mci_sync_adtc_start+0x4e>
    2440:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    2444:	d01a      	beq.n	247c <_mci_sync_adtc_start+0x80>
    2446:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    244a:	b29b      	uxth	r3, r3
    244c:	8183      	strh	r3, [r0, #12]
    244e:	f3c7 0309 	ubfx	r3, r7, #0, #10
    2452:	8083      	strh	r3, [r0, #4]
    2454:	80c6      	strh	r6, [r0, #6]
    2456:	2200      	movs	r2, #0
    2458:	2300      	movs	r3, #0
    245a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    245e:	8227      	strh	r7, [r4, #16]
    2460:	8266      	strh	r6, [r4, #18]
    2462:	4643      	mov	r3, r8
    2464:	462a      	mov	r2, r5
    2466:	2120      	movs	r1, #32
    2468:	4c0f      	ldr	r4, [pc, #60]	; (24a8 <_mci_sync_adtc_start+0xac>)
    246a:	47a0      	blx	r4
    246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2470:	2000      	movs	r0, #0
    2472:	e7d0      	b.n	2416 <_mci_sync_adtc_start+0x1a>
    2474:	2000      	movs	r0, #0
    2476:	e7ce      	b.n	2416 <_mci_sync_adtc_start+0x1a>
    2478:	2310      	movs	r3, #16
    247a:	e7de      	b.n	243a <_mci_sync_adtc_start+0x3e>
    247c:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2480:	d1e3      	bne.n	244a <_mci_sync_adtc_start+0x4e>
    2482:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    2486:	d008      	beq.n	249a <_mci_sync_adtc_start+0x9e>
    2488:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    248c:	e7dd      	b.n	244a <_mci_sync_adtc_start+0x4e>
    248e:	2000      	movs	r0, #0
    2490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2494:	2000      	movs	r0, #0
    2496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    249a:	2000      	movs	r0, #0
    249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24a0:	00004784 	.word	0x00004784
    24a4:	00001561 	.word	0x00001561
    24a8:	00002189 	.word	0x00002189

000024ac <_mci_sync_write_word>:
    24ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ae:	460f      	mov	r7, r1
    24b0:	4605      	mov	r5, r0
    24b2:	2800      	cmp	r0, #0
    24b4:	d03f      	beq.n	2536 <_mci_sync_write_word+0x8a>
    24b6:	6803      	ldr	r3, [r0, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d03a      	beq.n	2532 <_mci_sync_write_word+0x86>
    24bc:	2001      	movs	r0, #1
    24be:	f240 220f 	movw	r2, #527	; 0x20f
    24c2:	4924      	ldr	r1, [pc, #144]	; (2554 <_mci_sync_write_word+0xa8>)
    24c4:	4b24      	ldr	r3, [pc, #144]	; (2558 <_mci_sync_write_word+0xac>)
    24c6:	4798      	blx	r3
    24c8:	682c      	ldr	r4, [r5, #0]
    24ca:	8a2a      	ldrh	r2, [r5, #16]
    24cc:	2300      	movs	r3, #0
    24ce:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    24d2:	4e22      	ldr	r6, [pc, #136]	; (255c <_mci_sync_write_word+0xb0>)
    24d4:	47b0      	blx	r6
    24d6:	4313      	orrs	r3, r2
    24d8:	d10c      	bne.n	24f4 <_mci_sync_write_word+0x48>
    24da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    24dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    24e0:	bb5b      	cbnz	r3, 253a <_mci_sync_write_word+0x8e>
    24e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24e4:	f013 0f10 	tst.w	r3, #16
    24e8:	d0f7      	beq.n	24da <_mci_sync_write_word+0x2e>
    24ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24ec:	b29b      	uxth	r3, r3
    24ee:	f043 0310 	orr.w	r3, r3, #16
    24f2:	8623      	strh	r3, [r4, #48]	; 0x30
    24f4:	6227      	str	r7, [r4, #32]
    24f6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    24fa:	3204      	adds	r2, #4
    24fc:	f143 0300 	adc.w	r3, r3, #0
    2500:	e9c5 2302 	strd	r2, r3, [r5, #8]
    2504:	8a28      	ldrh	r0, [r5, #16]
    2506:	8a6e      	ldrh	r6, [r5, #18]
    2508:	fba0 0106 	umull	r0, r1, r0, r6
    250c:	428b      	cmp	r3, r1
    250e:	bf08      	it	eq
    2510:	4282      	cmpeq	r2, r0
    2512:	d31c      	bcc.n	254e <_mci_sync_write_word+0xa2>
    2514:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2516:	f003 0370 	and.w	r3, r3, #112	; 0x70
    251a:	b99b      	cbnz	r3, 2544 <_mci_sync_write_word+0x98>
    251c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    251e:	f013 0f02 	tst.w	r3, #2
    2522:	d0f7      	beq.n	2514 <_mci_sync_write_word+0x68>
    2524:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2526:	b29b      	uxth	r3, r3
    2528:	f043 0302 	orr.w	r3, r3, #2
    252c:	8623      	strh	r3, [r4, #48]	; 0x30
    252e:	2001      	movs	r0, #1
    2530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2532:	2000      	movs	r0, #0
    2534:	e7c3      	b.n	24be <_mci_sync_write_word+0x12>
    2536:	2000      	movs	r0, #0
    2538:	e7c1      	b.n	24be <_mci_sync_write_word+0x12>
    253a:	4620      	mov	r0, r4
    253c:	4b08      	ldr	r3, [pc, #32]	; (2560 <_mci_sync_write_word+0xb4>)
    253e:	4798      	blx	r3
    2540:	2000      	movs	r0, #0
    2542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2544:	4620      	mov	r0, r4
    2546:	4b06      	ldr	r3, [pc, #24]	; (2560 <_mci_sync_write_word+0xb4>)
    2548:	4798      	blx	r3
    254a:	2000      	movs	r0, #0
    254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254e:	2001      	movs	r0, #1
    2550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2552:	bf00      	nop
    2554:	00004784 	.word	0x00004784
    2558:	00001561 	.word	0x00001561
    255c:	000041d9 	.word	0x000041d9
    2560:	00002121 	.word	0x00002121

00002564 <_mci_sync_start_write_blocks>:
    2564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2568:	460e      	mov	r6, r1
    256a:	4690      	mov	r8, r2
    256c:	4607      	mov	r7, r0
    256e:	b1f0      	cbz	r0, 25ae <_mci_sync_start_write_blocks+0x4a>
    2570:	6803      	ldr	r3, [r0, #0]
    2572:	b1d3      	cbz	r3, 25aa <_mci_sync_start_write_blocks+0x46>
    2574:	2001      	movs	r0, #1
    2576:	4d18      	ldr	r5, [pc, #96]	; (25d8 <_mci_sync_start_write_blocks+0x74>)
    2578:	f240 225a 	movw	r2, #602	; 0x25a
    257c:	4629      	mov	r1, r5
    257e:	4c17      	ldr	r4, [pc, #92]	; (25dc <_mci_sync_start_write_blocks+0x78>)
    2580:	47a0      	blx	r4
    2582:	f240 225b 	movw	r2, #603	; 0x25b
    2586:	4629      	mov	r1, r5
    2588:	f118 0000 	adds.w	r0, r8, #0
    258c:	bf18      	it	ne
    258e:	2001      	movne	r0, #1
    2590:	47a0      	blx	r4
    2592:	f44f 7217 	mov.w	r2, #604	; 0x25c
    2596:	4629      	mov	r1, r5
    2598:	1c30      	adds	r0, r6, #0
    259a:	bf18      	it	ne
    259c:	2001      	movne	r0, #1
    259e:	47a0      	blx	r4
    25a0:	8a3d      	ldrh	r5, [r7, #16]
    25a2:	fb05 f508 	mul.w	r5, r5, r8
    25a6:	2404      	movs	r4, #4
    25a8:	e005      	b.n	25b6 <_mci_sync_start_write_blocks+0x52>
    25aa:	2000      	movs	r0, #0
    25ac:	e7e3      	b.n	2576 <_mci_sync_start_write_blocks+0x12>
    25ae:	2000      	movs	r0, #0
    25b0:	e7e1      	b.n	2576 <_mci_sync_start_write_blocks+0x12>
    25b2:	1b2d      	subs	r5, r5, r4
    25b4:	4426      	add	r6, r4
    25b6:	b165      	cbz	r5, 25d2 <_mci_sync_start_write_blocks+0x6e>
    25b8:	6831      	ldr	r1, [r6, #0]
    25ba:	4638      	mov	r0, r7
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <_mci_sync_start_write_blocks+0x7c>)
    25be:	4798      	blx	r3
    25c0:	42a5      	cmp	r5, r4
    25c2:	d2f6      	bcs.n	25b2 <_mci_sync_start_write_blocks+0x4e>
    25c4:	8a3b      	ldrh	r3, [r7, #16]
    25c6:	fb93 f2f4 	sdiv	r2, r3, r4
    25ca:	fb04 3412 	mls	r4, r4, r2, r3
    25ce:	b2e4      	uxtb	r4, r4
    25d0:	e7ef      	b.n	25b2 <_mci_sync_start_write_blocks+0x4e>
    25d2:	2001      	movs	r0, #1
    25d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25d8:	00004784 	.word	0x00004784
    25dc:	00001561 	.word	0x00001561
    25e0:	000024ad 	.word	0x000024ad

000025e4 <_mci_sync_wait_end_of_write_blocks>:
    25e4:	b508      	push	{r3, lr}
    25e6:	b158      	cbz	r0, 2600 <_mci_sync_wait_end_of_write_blocks+0x1c>
    25e8:	6803      	ldr	r3, [r0, #0]
    25ea:	b13b      	cbz	r3, 25fc <_mci_sync_wait_end_of_write_blocks+0x18>
    25ec:	2001      	movs	r0, #1
    25ee:	f44f 721f 	mov.w	r2, #636	; 0x27c
    25f2:	4904      	ldr	r1, [pc, #16]	; (2604 <_mci_sync_wait_end_of_write_blocks+0x20>)
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <_mci_sync_wait_end_of_write_blocks+0x24>)
    25f6:	4798      	blx	r3
    25f8:	2001      	movs	r0, #1
    25fa:	bd08      	pop	{r3, pc}
    25fc:	2000      	movs	r0, #0
    25fe:	e7f6      	b.n	25ee <_mci_sync_wait_end_of_write_blocks+0xa>
    2600:	2000      	movs	r0, #0
    2602:	e7f4      	b.n	25ee <_mci_sync_wait_end_of_write_blocks+0xa>
    2604:	00004784 	.word	0x00004784
    2608:	00001561 	.word	0x00001561

0000260c <_sercom_get_hardware_index>:
    260c:	b470      	push	{r4, r5, r6}
    260e:	b087      	sub	sp, #28
    2610:	4606      	mov	r6, r0
    2612:	466c      	mov	r4, sp
    2614:	4d0c      	ldr	r5, [pc, #48]	; (2648 <_sercom_get_hardware_index+0x3c>)
    2616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    261a:	e895 0003 	ldmia.w	r5, {r0, r1}
    261e:	e884 0003 	stmia.w	r4, {r0, r1}
    2622:	2000      	movs	r0, #0
    2624:	2805      	cmp	r0, #5
    2626:	d80a      	bhi.n	263e <_sercom_get_hardware_index+0x32>
    2628:	ab06      	add	r3, sp, #24
    262a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    262e:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2632:	42b3      	cmp	r3, r6
    2634:	d001      	beq.n	263a <_sercom_get_hardware_index+0x2e>
    2636:	3001      	adds	r0, #1
    2638:	e7f4      	b.n	2624 <_sercom_get_hardware_index+0x18>
    263a:	b2c0      	uxtb	r0, r0
    263c:	e000      	b.n	2640 <_sercom_get_hardware_index+0x34>
    263e:	2000      	movs	r0, #0
    2640:	b007      	add	sp, #28
    2642:	bc70      	pop	{r4, r5, r6}
    2644:	4770      	bx	lr
    2646:	bf00      	nop
    2648:	0000479c 	.word	0x0000479c

0000264c <_sercom_usart_interrupt_handler>:
    264c:	b510      	push	{r4, lr}
    264e:	6984      	ldr	r4, [r0, #24]
    2650:	7e23      	ldrb	r3, [r4, #24]
    2652:	f013 0f01 	tst.w	r3, #1
    2656:	d003      	beq.n	2660 <_sercom_usart_interrupt_handler+0x14>
    2658:	7da3      	ldrb	r3, [r4, #22]
    265a:	f013 0f01 	tst.w	r3, #1
    265e:	d112      	bne.n	2686 <_sercom_usart_interrupt_handler+0x3a>
    2660:	7e23      	ldrb	r3, [r4, #24]
    2662:	f013 0f02 	tst.w	r3, #2
    2666:	d003      	beq.n	2670 <_sercom_usart_interrupt_handler+0x24>
    2668:	7da3      	ldrb	r3, [r4, #22]
    266a:	f013 0f02 	tst.w	r3, #2
    266e:	d10f      	bne.n	2690 <_sercom_usart_interrupt_handler+0x44>
    2670:	7e23      	ldrb	r3, [r4, #24]
    2672:	f013 0f04 	tst.w	r3, #4
    2676:	d015      	beq.n	26a4 <_sercom_usart_interrupt_handler+0x58>
    2678:	8b63      	ldrh	r3, [r4, #26]
    267a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    267e:	b163      	cbz	r3, 269a <_sercom_usart_interrupt_handler+0x4e>
    2680:	23ff      	movs	r3, #255	; 0xff
    2682:	8363      	strh	r3, [r4, #26]
    2684:	bd10      	pop	{r4, pc}
    2686:	2301      	movs	r3, #1
    2688:	7523      	strb	r3, [r4, #20]
    268a:	6803      	ldr	r3, [r0, #0]
    268c:	4798      	blx	r3
    268e:	bd10      	pop	{r4, pc}
    2690:	2302      	movs	r3, #2
    2692:	7523      	strb	r3, [r4, #20]
    2694:	6883      	ldr	r3, [r0, #8]
    2696:	4798      	blx	r3
    2698:	bd10      	pop	{r4, pc}
    269a:	6843      	ldr	r3, [r0, #4]
    269c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    269e:	b2c9      	uxtb	r1, r1
    26a0:	4798      	blx	r3
    26a2:	bd10      	pop	{r4, pc}
    26a4:	7e23      	ldrb	r3, [r4, #24]
    26a6:	09db      	lsrs	r3, r3, #7
    26a8:	d100      	bne.n	26ac <_sercom_usart_interrupt_handler+0x60>
    26aa:	bd10      	pop	{r4, pc}
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	7623      	strb	r3, [r4, #24]
    26b0:	68c3      	ldr	r3, [r0, #12]
    26b2:	4798      	blx	r3
    26b4:	8b63      	ldrh	r3, [r4, #26]
    26b6:	b29b      	uxth	r3, r3
    26b8:	8363      	strh	r3, [r4, #26]
    26ba:	e7f6      	b.n	26aa <_sercom_usart_interrupt_handler+0x5e>

000026bc <_sercom_init_irq_param>:
    26bc:	4b03      	ldr	r3, [pc, #12]	; (26cc <_sercom_init_irq_param+0x10>)
    26be:	4298      	cmp	r0, r3
    26c0:	d000      	beq.n	26c4 <_sercom_init_irq_param+0x8>
    26c2:	4770      	bx	lr
    26c4:	4b02      	ldr	r3, [pc, #8]	; (26d0 <_sercom_init_irq_param+0x14>)
    26c6:	6019      	str	r1, [r3, #0]
    26c8:	e7fb      	b.n	26c2 <_sercom_init_irq_param+0x6>
    26ca:	bf00      	nop
    26cc:	43000400 	.word	0x43000400
    26d0:	20000218 	.word	0x20000218

000026d4 <_sercom_get_irq_num>:
    26d4:	b508      	push	{r3, lr}
    26d6:	4b04      	ldr	r3, [pc, #16]	; (26e8 <_sercom_get_irq_num+0x14>)
    26d8:	4798      	blx	r3
    26da:	0080      	lsls	r0, r0, #2
    26dc:	b2c0      	uxtb	r0, r0
    26de:	302e      	adds	r0, #46	; 0x2e
    26e0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    26e4:	bd08      	pop	{r3, pc}
    26e6:	bf00      	nop
    26e8:	0000260d 	.word	0x0000260d

000026ec <_get_sercom_index>:
    26ec:	b508      	push	{r3, lr}
    26ee:	4b0c      	ldr	r3, [pc, #48]	; (2720 <_get_sercom_index+0x34>)
    26f0:	4798      	blx	r3
    26f2:	2300      	movs	r3, #0
    26f4:	b143      	cbz	r3, 2708 <_get_sercom_index+0x1c>
    26f6:	f240 226b 	movw	r2, #619	; 0x26b
    26fa:	490a      	ldr	r1, [pc, #40]	; (2724 <_get_sercom_index+0x38>)
    26fc:	2000      	movs	r0, #0
    26fe:	4b0a      	ldr	r3, [pc, #40]	; (2728 <_get_sercom_index+0x3c>)
    2700:	4798      	blx	r3
    2702:	2300      	movs	r3, #0
    2704:	4618      	mov	r0, r3
    2706:	bd08      	pop	{r3, pc}
    2708:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    270c:	00d1      	lsls	r1, r2, #3
    270e:	4a07      	ldr	r2, [pc, #28]	; (272c <_get_sercom_index+0x40>)
    2710:	440a      	add	r2, r1
    2712:	7e12      	ldrb	r2, [r2, #24]
    2714:	4290      	cmp	r0, r2
    2716:	d0f5      	beq.n	2704 <_get_sercom_index+0x18>
    2718:	3301      	adds	r3, #1
    271a:	b2db      	uxtb	r3, r3
    271c:	e7ea      	b.n	26f4 <_get_sercom_index+0x8>
    271e:	bf00      	nop
    2720:	0000260d 	.word	0x0000260d
    2724:	00004808 	.word	0x00004808
    2728:	00001561 	.word	0x00001561
    272c:	0000479c 	.word	0x0000479c

00002730 <_usart_init>:
    2730:	b538      	push	{r3, r4, r5, lr}
    2732:	4604      	mov	r4, r0
    2734:	4b3c      	ldr	r3, [pc, #240]	; (2828 <_usart_init+0xf8>)
    2736:	4798      	blx	r3
    2738:	69e3      	ldr	r3, [r4, #28]
    273a:	f013 0f01 	tst.w	r3, #1
    273e:	d122      	bne.n	2786 <_usart_init+0x56>
    2740:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2744:	00da      	lsls	r2, r3, #3
    2746:	4b39      	ldr	r3, [pc, #228]	; (282c <_usart_init+0xfc>)
    2748:	4413      	add	r3, r2
    274a:	69da      	ldr	r2, [r3, #28]
    274c:	f002 021c 	and.w	r2, r2, #28
    2750:	69e3      	ldr	r3, [r4, #28]
    2752:	f013 0f03 	tst.w	r3, #3
    2756:	d1fb      	bne.n	2750 <_usart_init+0x20>
    2758:	6823      	ldr	r3, [r4, #0]
    275a:	f013 0f02 	tst.w	r3, #2
    275e:	d00b      	beq.n	2778 <_usart_init+0x48>
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	f023 0302 	bic.w	r3, r3, #2
    2766:	6023      	str	r3, [r4, #0]
    2768:	69e3      	ldr	r3, [r4, #28]
    276a:	f013 0f03 	tst.w	r3, #3
    276e:	d1fb      	bne.n	2768 <_usart_init+0x38>
    2770:	69e3      	ldr	r3, [r4, #28]
    2772:	f013 0f02 	tst.w	r3, #2
    2776:	d1fb      	bne.n	2770 <_usart_init+0x40>
    2778:	f042 0201 	orr.w	r2, r2, #1
    277c:	6022      	str	r2, [r4, #0]
    277e:	69e3      	ldr	r3, [r4, #28]
    2780:	f013 0f03 	tst.w	r3, #3
    2784:	d1fb      	bne.n	277e <_usart_init+0x4e>
    2786:	69e3      	ldr	r3, [r4, #28]
    2788:	f013 0f01 	tst.w	r3, #1
    278c:	d1fb      	bne.n	2786 <_usart_init+0x56>
    278e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2792:	00da      	lsls	r2, r3, #3
    2794:	4b25      	ldr	r3, [pc, #148]	; (282c <_usart_init+0xfc>)
    2796:	4413      	add	r3, r2
    2798:	69db      	ldr	r3, [r3, #28]
    279a:	6023      	str	r3, [r4, #0]
    279c:	69e3      	ldr	r3, [r4, #28]
    279e:	f013 0f03 	tst.w	r3, #3
    27a2:	d1fb      	bne.n	279c <_usart_init+0x6c>
    27a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27a8:	00da      	lsls	r2, r3, #3
    27aa:	4b20      	ldr	r3, [pc, #128]	; (282c <_usart_init+0xfc>)
    27ac:	4413      	add	r3, r2
    27ae:	6a1b      	ldr	r3, [r3, #32]
    27b0:	6063      	str	r3, [r4, #4]
    27b2:	69e3      	ldr	r3, [r4, #28]
    27b4:	f013 0f1f 	tst.w	r3, #31
    27b8:	d1fb      	bne.n	27b2 <_usart_init+0x82>
    27ba:	0042      	lsls	r2, r0, #1
    27bc:	4402      	add	r2, r0
    27be:	00d1      	lsls	r1, r2, #3
    27c0:	4b1a      	ldr	r3, [pc, #104]	; (282c <_usart_init+0xfc>)
    27c2:	440b      	add	r3, r1
    27c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27c6:	60a2      	str	r2, [r4, #8]
    27c8:	69db      	ldr	r3, [r3, #28]
    27ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    27ce:	d10a      	bne.n	27e6 <_usart_init+0xb6>
    27d0:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    27d4:	d107      	bne.n	27e6 <_usart_init+0xb6>
    27d6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27da:	00da      	lsls	r2, r3, #3
    27dc:	4b13      	ldr	r3, [pc, #76]	; (282c <_usart_init+0xfc>)
    27de:	4413      	add	r3, r2
    27e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    27e2:	81a3      	strh	r3, [r4, #12]
    27e4:	e00f      	b.n	2806 <_usart_init+0xd6>
    27e6:	0042      	lsls	r2, r0, #1
    27e8:	4402      	add	r2, r0
    27ea:	00d1      	lsls	r1, r2, #3
    27ec:	4b0f      	ldr	r3, [pc, #60]	; (282c <_usart_init+0xfc>)
    27ee:	440b      	add	r3, r1
    27f0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    27f2:	89a2      	ldrh	r2, [r4, #12]
    27f4:	f361 020c 	bfi	r2, r1, #0, #13
    27f8:	81a2      	strh	r2, [r4, #12]
    27fa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    27fe:	89a3      	ldrh	r3, [r4, #12]
    2800:	f362 334f 	bfi	r3, r2, #13, #3
    2804:	81a3      	strh	r3, [r4, #12]
    2806:	4a09      	ldr	r2, [pc, #36]	; (282c <_usart_init+0xfc>)
    2808:	0043      	lsls	r3, r0, #1
    280a:	181d      	adds	r5, r3, r0
    280c:	00e9      	lsls	r1, r5, #3
    280e:	460d      	mov	r5, r1
    2810:	4411      	add	r1, r2
    2812:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
    2816:	73a1      	strb	r1, [r4, #14]
    2818:	442a      	add	r2, r5
    281a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    281e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    2822:	2000      	movs	r0, #0
    2824:	bd38      	pop	{r3, r4, r5, pc}
    2826:	bf00      	nop
    2828:	000026ed 	.word	0x000026ed
    282c:	0000479c 	.word	0x0000479c

00002830 <_usart_async_init>:
    2830:	b570      	push	{r4, r5, r6, lr}
    2832:	460c      	mov	r4, r1
    2834:	4606      	mov	r6, r0
    2836:	22cb      	movs	r2, #203	; 0xcb
    2838:	4918      	ldr	r1, [pc, #96]	; (289c <_usart_async_init+0x6c>)
    283a:	3000      	adds	r0, #0
    283c:	bf18      	it	ne
    283e:	2001      	movne	r0, #1
    2840:	4b17      	ldr	r3, [pc, #92]	; (28a0 <_usart_async_init+0x70>)
    2842:	4798      	blx	r3
    2844:	4620      	mov	r0, r4
    2846:	4b17      	ldr	r3, [pc, #92]	; (28a4 <_usart_async_init+0x74>)
    2848:	4798      	blx	r3
    284a:	4605      	mov	r5, r0
    284c:	b108      	cbz	r0, 2852 <_usart_async_init+0x22>
    284e:	4628      	mov	r0, r5
    2850:	bd70      	pop	{r4, r5, r6, pc}
    2852:	61b4      	str	r4, [r6, #24]
    2854:	4631      	mov	r1, r6
    2856:	4620      	mov	r0, r4
    2858:	4b13      	ldr	r3, [pc, #76]	; (28a8 <_usart_async_init+0x78>)
    285a:	4798      	blx	r3
    285c:	4620      	mov	r0, r4
    285e:	4b13      	ldr	r3, [pc, #76]	; (28ac <_usart_async_init+0x7c>)
    2860:	4798      	blx	r3
    2862:	2400      	movs	r4, #0
    2864:	e016      	b.n	2894 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2866:	0941      	lsrs	r1, r0, #5
    2868:	f000 021f 	and.w	r2, r0, #31
    286c:	2301      	movs	r3, #1
    286e:	4093      	lsls	r3, r2
    2870:	4a0f      	ldr	r2, [pc, #60]	; (28b0 <_usart_async_init+0x80>)
    2872:	f101 0620 	add.w	r6, r1, #32
    2876:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    287a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    287e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2882:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2886:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    288a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    288e:	3001      	adds	r0, #1
    2890:	b2c0      	uxtb	r0, r0
    2892:	3401      	adds	r4, #1
    2894:	2c03      	cmp	r4, #3
    2896:	d9e6      	bls.n	2866 <_usart_async_init+0x36>
    2898:	e7d9      	b.n	284e <_usart_async_init+0x1e>
    289a:	bf00      	nop
    289c:	00004808 	.word	0x00004808
    28a0:	00001561 	.word	0x00001561
    28a4:	00002731 	.word	0x00002731
    28a8:	000026bd 	.word	0x000026bd
    28ac:	000026d5 	.word	0x000026d5
    28b0:	e000e100 	.word	0xe000e100

000028b4 <_usart_async_write_byte>:
    28b4:	6983      	ldr	r3, [r0, #24]
    28b6:	6299      	str	r1, [r3, #40]	; 0x28
    28b8:	4770      	bx	lr

000028ba <_usart_async_enable_byte_sent_irq>:
    28ba:	6983      	ldr	r3, [r0, #24]
    28bc:	2201      	movs	r2, #1
    28be:	759a      	strb	r2, [r3, #22]
    28c0:	4770      	bx	lr

000028c2 <_usart_async_enable_tx_done_irq>:
    28c2:	6983      	ldr	r3, [r0, #24]
    28c4:	2202      	movs	r2, #2
    28c6:	759a      	strb	r2, [r3, #22]
    28c8:	4770      	bx	lr
	...

000028cc <SERCOM5_0_Handler>:
    28cc:	b508      	push	{r3, lr}
    28ce:	4b02      	ldr	r3, [pc, #8]	; (28d8 <SERCOM5_0_Handler+0xc>)
    28d0:	6818      	ldr	r0, [r3, #0]
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <SERCOM5_0_Handler+0x10>)
    28d4:	4798      	blx	r3
    28d6:	bd08      	pop	{r3, pc}
    28d8:	20000218 	.word	0x20000218
    28dc:	0000264d 	.word	0x0000264d

000028e0 <SERCOM5_1_Handler>:
    28e0:	b508      	push	{r3, lr}
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <SERCOM5_1_Handler+0xc>)
    28e4:	6818      	ldr	r0, [r3, #0]
    28e6:	4b02      	ldr	r3, [pc, #8]	; (28f0 <SERCOM5_1_Handler+0x10>)
    28e8:	4798      	blx	r3
    28ea:	bd08      	pop	{r3, pc}
    28ec:	20000218 	.word	0x20000218
    28f0:	0000264d 	.word	0x0000264d

000028f4 <SERCOM5_2_Handler>:
    28f4:	b508      	push	{r3, lr}
    28f6:	4b02      	ldr	r3, [pc, #8]	; (2900 <SERCOM5_2_Handler+0xc>)
    28f8:	6818      	ldr	r0, [r3, #0]
    28fa:	4b02      	ldr	r3, [pc, #8]	; (2904 <SERCOM5_2_Handler+0x10>)
    28fc:	4798      	blx	r3
    28fe:	bd08      	pop	{r3, pc}
    2900:	20000218 	.word	0x20000218
    2904:	0000264d 	.word	0x0000264d

00002908 <SERCOM5_3_Handler>:
    2908:	b508      	push	{r3, lr}
    290a:	4b02      	ldr	r3, [pc, #8]	; (2914 <SERCOM5_3_Handler+0xc>)
    290c:	6818      	ldr	r0, [r3, #0]
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <SERCOM5_3_Handler+0x10>)
    2910:	4798      	blx	r3
    2912:	bd08      	pop	{r3, pc}
    2914:	20000218 	.word	0x20000218
    2918:	0000264d 	.word	0x0000264d

0000291c <_system_time_init>:
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <_system_time_init+0x10>)
    291e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2922:	605a      	str	r2, [r3, #4]
    2924:	2205      	movs	r2, #5
    2926:	601a      	str	r2, [r3, #0]
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	e000e010 	.word	0xe000e010

00002930 <_delay_init>:
    2930:	b508      	push	{r3, lr}
    2932:	4b01      	ldr	r3, [pc, #4]	; (2938 <_delay_init+0x8>)
    2934:	4798      	blx	r3
    2936:	bd08      	pop	{r3, pc}
    2938:	0000291d 	.word	0x0000291d

0000293c <_delay_cycles>:
    293c:	0e08      	lsrs	r0, r1, #24
    293e:	e00d      	b.n	295c <_delay_cycles+0x20>
    2940:	4b0d      	ldr	r3, [pc, #52]	; (2978 <_delay_cycles+0x3c>)
    2942:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2946:	6058      	str	r0, [r3, #4]
    2948:	6098      	str	r0, [r3, #8]
    294a:	4b0b      	ldr	r3, [pc, #44]	; (2978 <_delay_cycles+0x3c>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2952:	d0fa      	beq.n	294a <_delay_cycles+0xe>
    2954:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2958:	3101      	adds	r1, #1
    295a:	4610      	mov	r0, r2
    295c:	1e43      	subs	r3, r0, #1
    295e:	b2da      	uxtb	r2, r3
    2960:	2800      	cmp	r0, #0
    2962:	d1ed      	bne.n	2940 <_delay_cycles+0x4>
    2964:	4b04      	ldr	r3, [pc, #16]	; (2978 <_delay_cycles+0x3c>)
    2966:	6059      	str	r1, [r3, #4]
    2968:	6099      	str	r1, [r3, #8]
    296a:	4b03      	ldr	r3, [pc, #12]	; (2978 <_delay_cycles+0x3c>)
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2972:	d0fa      	beq.n	296a <_delay_cycles+0x2e>
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	e000e010 	.word	0xe000e010

0000297c <tc_interrupt_handler>:
    297c:	b508      	push	{r3, lr}
    297e:	68c3      	ldr	r3, [r0, #12]
    2980:	7a9a      	ldrb	r2, [r3, #10]
    2982:	f012 0f01 	tst.w	r2, #1
    2986:	d100      	bne.n	298a <tc_interrupt_handler+0xe>
    2988:	bd08      	pop	{r3, pc}
    298a:	2201      	movs	r2, #1
    298c:	729a      	strb	r2, [r3, #10]
    298e:	6803      	ldr	r3, [r0, #0]
    2990:	4798      	blx	r3
    2992:	e7f9      	b.n	2988 <tc_interrupt_handler+0xc>

00002994 <tc_pwm_interrupt_handler>:
    2994:	b538      	push	{r3, r4, r5, lr}
    2996:	4605      	mov	r5, r0
    2998:	6904      	ldr	r4, [r0, #16]
    299a:	7aa3      	ldrb	r3, [r4, #10]
    299c:	f013 0f01 	tst.w	r3, #1
    29a0:	d004      	beq.n	29ac <tc_pwm_interrupt_handler+0x18>
    29a2:	2301      	movs	r3, #1
    29a4:	72a3      	strb	r3, [r4, #10]
    29a6:	6803      	ldr	r3, [r0, #0]
    29a8:	b103      	cbz	r3, 29ac <tc_pwm_interrupt_handler+0x18>
    29aa:	4798      	blx	r3
    29ac:	7a63      	ldrb	r3, [r4, #9]
    29ae:	f013 0f02 	tst.w	r3, #2
    29b2:	d005      	beq.n	29c0 <tc_pwm_interrupt_handler+0x2c>
    29b4:	2302      	movs	r3, #2
    29b6:	72a3      	strb	r3, [r4, #10]
    29b8:	686b      	ldr	r3, [r5, #4]
    29ba:	b10b      	cbz	r3, 29c0 <tc_pwm_interrupt_handler+0x2c>
    29bc:	4628      	mov	r0, r5
    29be:	4798      	blx	r3
    29c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000029c4 <_tc_init_irq_param>:
    29c4:	4b06      	ldr	r3, [pc, #24]	; (29e0 <_tc_init_irq_param+0x1c>)
    29c6:	4298      	cmp	r0, r3
    29c8:	d003      	beq.n	29d2 <_tc_init_irq_param+0xe>
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <_tc_init_irq_param+0x20>)
    29cc:	4298      	cmp	r0, r3
    29ce:	d003      	beq.n	29d8 <_tc_init_irq_param+0x14>
    29d0:	4770      	bx	lr
    29d2:	4b05      	ldr	r3, [pc, #20]	; (29e8 <_tc_init_irq_param+0x24>)
    29d4:	6019      	str	r1, [r3, #0]
    29d6:	e7f8      	b.n	29ca <_tc_init_irq_param+0x6>
    29d8:	4b03      	ldr	r3, [pc, #12]	; (29e8 <_tc_init_irq_param+0x24>)
    29da:	6059      	str	r1, [r3, #4]
    29dc:	e7f8      	b.n	29d0 <_tc_init_irq_param+0xc>
    29de:	bf00      	nop
    29e0:	40003800 	.word	0x40003800
    29e4:	40003c00 	.word	0x40003c00
    29e8:	2000021c 	.word	0x2000021c

000029ec <get_tc_index>:
    29ec:	b570      	push	{r4, r5, r6, lr}
    29ee:	b086      	sub	sp, #24
    29f0:	4606      	mov	r6, r0
    29f2:	466c      	mov	r4, sp
    29f4:	4d17      	ldr	r5, [pc, #92]	; (2a54 <get_tc_index+0x68>)
    29f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    29f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    29fa:	e895 0003 	ldmia.w	r5, {r0, r1}
    29fe:	e884 0003 	stmia.w	r4, {r0, r1}
    2a02:	2300      	movs	r3, #0
    2a04:	2b05      	cmp	r3, #5
    2a06:	d80a      	bhi.n	2a1e <get_tc_index+0x32>
    2a08:	aa06      	add	r2, sp, #24
    2a0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2a0e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2a12:	42b2      	cmp	r2, r6
    2a14:	d001      	beq.n	2a1a <get_tc_index+0x2e>
    2a16:	3301      	adds	r3, #1
    2a18:	e7f4      	b.n	2a04 <get_tc_index+0x18>
    2a1a:	b2db      	uxtb	r3, r3
    2a1c:	e000      	b.n	2a20 <get_tc_index+0x34>
    2a1e:	2300      	movs	r3, #0
    2a20:	2200      	movs	r2, #0
    2a22:	2a01      	cmp	r2, #1
    2a24:	d80b      	bhi.n	2a3e <get_tc_index+0x52>
    2a26:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2a2a:	0081      	lsls	r1, r0, #2
    2a2c:	480a      	ldr	r0, [pc, #40]	; (2a58 <get_tc_index+0x6c>)
    2a2e:	5c41      	ldrb	r1, [r0, r1]
    2a30:	4299      	cmp	r1, r3
    2a32:	d002      	beq.n	2a3a <get_tc_index+0x4e>
    2a34:	3201      	adds	r2, #1
    2a36:	b2d2      	uxtb	r2, r2
    2a38:	e7f3      	b.n	2a22 <get_tc_index+0x36>
    2a3a:	b250      	sxtb	r0, r2
    2a3c:	e007      	b.n	2a4e <get_tc_index+0x62>
    2a3e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2a42:	4906      	ldr	r1, [pc, #24]	; (2a5c <get_tc_index+0x70>)
    2a44:	2000      	movs	r0, #0
    2a46:	4b06      	ldr	r3, [pc, #24]	; (2a60 <get_tc_index+0x74>)
    2a48:	4798      	blx	r3
    2a4a:	f04f 30ff 	mov.w	r0, #4294967295
    2a4e:	b006      	add	sp, #24
    2a50:	bd70      	pop	{r4, r5, r6, pc}
    2a52:	bf00      	nop
    2a54:	00004824 	.word	0x00004824
    2a58:	20000000 	.word	0x20000000
    2a5c:	0000483c 	.word	0x0000483c
    2a60:	00001561 	.word	0x00001561

00002a64 <_timer_init>:
    2a64:	b570      	push	{r4, r5, r6, lr}
    2a66:	4606      	mov	r6, r0
    2a68:	460c      	mov	r4, r1
    2a6a:	4608      	mov	r0, r1
    2a6c:	4b6c      	ldr	r3, [pc, #432]	; (2c20 <_timer_init+0x1bc>)
    2a6e:	4798      	blx	r3
    2a70:	4605      	mov	r5, r0
    2a72:	60f4      	str	r4, [r6, #12]
    2a74:	228f      	movs	r2, #143	; 0x8f
    2a76:	496b      	ldr	r1, [pc, #428]	; (2c24 <_timer_init+0x1c0>)
    2a78:	2001      	movs	r0, #1
    2a7a:	4b6b      	ldr	r3, [pc, #428]	; (2c28 <_timer_init+0x1c4>)
    2a7c:	4798      	blx	r3
    2a7e:	6923      	ldr	r3, [r4, #16]
    2a80:	f013 0f01 	tst.w	r3, #1
    2a84:	d119      	bne.n	2aba <_timer_init+0x56>
    2a86:	6923      	ldr	r3, [r4, #16]
    2a88:	f013 0f03 	tst.w	r3, #3
    2a8c:	d1fb      	bne.n	2a86 <_timer_init+0x22>
    2a8e:	6823      	ldr	r3, [r4, #0]
    2a90:	f013 0f02 	tst.w	r3, #2
    2a94:	d00b      	beq.n	2aae <_timer_init+0x4a>
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	f023 0302 	bic.w	r3, r3, #2
    2a9c:	6023      	str	r3, [r4, #0]
    2a9e:	6923      	ldr	r3, [r4, #16]
    2aa0:	f013 0f03 	tst.w	r3, #3
    2aa4:	d1fb      	bne.n	2a9e <_timer_init+0x3a>
    2aa6:	6923      	ldr	r3, [r4, #16]
    2aa8:	f013 0f02 	tst.w	r3, #2
    2aac:	d1fb      	bne.n	2aa6 <_timer_init+0x42>
    2aae:	2301      	movs	r3, #1
    2ab0:	6023      	str	r3, [r4, #0]
    2ab2:	6923      	ldr	r3, [r4, #16]
    2ab4:	f013 0f03 	tst.w	r3, #3
    2ab8:	d1fb      	bne.n	2ab2 <_timer_init+0x4e>
    2aba:	6923      	ldr	r3, [r4, #16]
    2abc:	f013 0f01 	tst.w	r3, #1
    2ac0:	d1fb      	bne.n	2aba <_timer_init+0x56>
    2ac2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ac6:	009a      	lsls	r2, r3, #2
    2ac8:	4b58      	ldr	r3, [pc, #352]	; (2c2c <_timer_init+0x1c8>)
    2aca:	4413      	add	r3, r2
    2acc:	685b      	ldr	r3, [r3, #4]
    2ace:	6023      	str	r3, [r4, #0]
    2ad0:	6923      	ldr	r3, [r4, #16]
    2ad2:	f013 0f03 	tst.w	r3, #3
    2ad6:	d1fb      	bne.n	2ad0 <_timer_init+0x6c>
    2ad8:	00aa      	lsls	r2, r5, #2
    2ada:	442a      	add	r2, r5
    2adc:	0091      	lsls	r1, r2, #2
    2ade:	4b53      	ldr	r3, [pc, #332]	; (2c2c <_timer_init+0x1c8>)
    2ae0:	440b      	add	r3, r1
    2ae2:	7a9a      	ldrb	r2, [r3, #10]
    2ae4:	73e2      	strb	r2, [r4, #15]
    2ae6:	891a      	ldrh	r2, [r3, #8]
    2ae8:	80e2      	strh	r2, [r4, #6]
    2aea:	2201      	movs	r2, #1
    2aec:	7322      	strb	r2, [r4, #12]
    2aee:	685b      	ldr	r3, [r3, #4]
    2af0:	f003 030c 	and.w	r3, r3, #12
    2af4:	2b08      	cmp	r3, #8
    2af6:	d05b      	beq.n	2bb0 <_timer_init+0x14c>
    2af8:	2b00      	cmp	r3, #0
    2afa:	d16d      	bne.n	2bd8 <_timer_init+0x174>
    2afc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b00:	009a      	lsls	r2, r3, #2
    2b02:	4b4a      	ldr	r3, [pc, #296]	; (2c2c <_timer_init+0x1c8>)
    2b04:	4413      	add	r3, r2
    2b06:	899b      	ldrh	r3, [r3, #12]
    2b08:	83a3      	strh	r3, [r4, #28]
    2b0a:	6923      	ldr	r3, [r4, #16]
    2b0c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b10:	d1fb      	bne.n	2b0a <_timer_init+0xa6>
    2b12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b16:	009a      	lsls	r2, r3, #2
    2b18:	4b44      	ldr	r3, [pc, #272]	; (2c2c <_timer_init+0x1c8>)
    2b1a:	4413      	add	r3, r2
    2b1c:	8a1b      	ldrh	r3, [r3, #16]
    2b1e:	83e3      	strh	r3, [r4, #30]
    2b20:	6923      	ldr	r3, [r4, #16]
    2b22:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b26:	d1fb      	bne.n	2b20 <_timer_init+0xbc>
    2b28:	2301      	movs	r3, #1
    2b2a:	7263      	strb	r3, [r4, #9]
    2b2c:	4631      	mov	r1, r6
    2b2e:	4620      	mov	r0, r4
    2b30:	4b3f      	ldr	r3, [pc, #252]	; (2c30 <_timer_init+0x1cc>)
    2b32:	4798      	blx	r3
    2b34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b38:	009a      	lsls	r2, r3, #2
    2b3a:	4b3c      	ldr	r3, [pc, #240]	; (2c2c <_timer_init+0x1c8>)
    2b3c:	4413      	add	r3, r2
    2b3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b42:	2b00      	cmp	r3, #0
    2b44:	db0d      	blt.n	2b62 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b46:	095a      	lsrs	r2, r3, #5
    2b48:	f003 031f 	and.w	r3, r3, #31
    2b4c:	2101      	movs	r1, #1
    2b4e:	fa01 f303 	lsl.w	r3, r1, r3
    2b52:	3220      	adds	r2, #32
    2b54:	4937      	ldr	r1, [pc, #220]	; (2c34 <_timer_init+0x1d0>)
    2b56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b5e:	f3bf 8f6f 	isb	sy
    2b62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b66:	009a      	lsls	r2, r3, #2
    2b68:	4b30      	ldr	r3, [pc, #192]	; (2c2c <_timer_init+0x1c8>)
    2b6a:	4413      	add	r3, r2
    2b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b70:	2b00      	cmp	r3, #0
    2b72:	db09      	blt.n	2b88 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b74:	095a      	lsrs	r2, r3, #5
    2b76:	f003 031f 	and.w	r3, r3, #31
    2b7a:	2101      	movs	r1, #1
    2b7c:	fa01 f303 	lsl.w	r3, r1, r3
    2b80:	3260      	adds	r2, #96	; 0x60
    2b82:	492c      	ldr	r1, [pc, #176]	; (2c34 <_timer_init+0x1d0>)
    2b84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2b88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b8c:	00aa      	lsls	r2, r5, #2
    2b8e:	4b27      	ldr	r3, [pc, #156]	; (2c2c <_timer_init+0x1c8>)
    2b90:	4413      	add	r3, r2
    2b92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b96:	2b00      	cmp	r3, #0
    2b98:	db08      	blt.n	2bac <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b9a:	0959      	lsrs	r1, r3, #5
    2b9c:	f003 031f 	and.w	r3, r3, #31
    2ba0:	2201      	movs	r2, #1
    2ba2:	fa02 f303 	lsl.w	r3, r2, r3
    2ba6:	4a23      	ldr	r2, [pc, #140]	; (2c34 <_timer_init+0x1d0>)
    2ba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    2bac:	2000      	movs	r0, #0
    2bae:	bd70      	pop	{r4, r5, r6, pc}
    2bb0:	4b1e      	ldr	r3, [pc, #120]	; (2c2c <_timer_init+0x1c8>)
    2bb2:	440b      	add	r3, r1
    2bb4:	68db      	ldr	r3, [r3, #12]
    2bb6:	61e3      	str	r3, [r4, #28]
    2bb8:	6923      	ldr	r3, [r4, #16]
    2bba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bbe:	d1fb      	bne.n	2bb8 <_timer_init+0x154>
    2bc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bc4:	009a      	lsls	r2, r3, #2
    2bc6:	4b19      	ldr	r3, [pc, #100]	; (2c2c <_timer_init+0x1c8>)
    2bc8:	4413      	add	r3, r2
    2bca:	691b      	ldr	r3, [r3, #16]
    2bcc:	6223      	str	r3, [r4, #32]
    2bce:	6923      	ldr	r3, [r4, #16]
    2bd0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bd4:	d1fb      	bne.n	2bce <_timer_init+0x16a>
    2bd6:	e7a7      	b.n	2b28 <_timer_init+0xc4>
    2bd8:	2b04      	cmp	r3, #4
    2bda:	d1a5      	bne.n	2b28 <_timer_init+0xc4>
    2bdc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2be0:	009a      	lsls	r2, r3, #2
    2be2:	4b12      	ldr	r3, [pc, #72]	; (2c2c <_timer_init+0x1c8>)
    2be4:	4413      	add	r3, r2
    2be6:	7b1b      	ldrb	r3, [r3, #12]
    2be8:	7723      	strb	r3, [r4, #28]
    2bea:	6923      	ldr	r3, [r4, #16]
    2bec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bf0:	d1fb      	bne.n	2bea <_timer_init+0x186>
    2bf2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bf6:	009a      	lsls	r2, r3, #2
    2bf8:	4b0c      	ldr	r3, [pc, #48]	; (2c2c <_timer_init+0x1c8>)
    2bfa:	4413      	add	r3, r2
    2bfc:	7c1b      	ldrb	r3, [r3, #16]
    2bfe:	7763      	strb	r3, [r4, #29]
    2c00:	6923      	ldr	r3, [r4, #16]
    2c02:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c06:	d1fb      	bne.n	2c00 <_timer_init+0x19c>
    2c08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c0c:	009a      	lsls	r2, r3, #2
    2c0e:	4b07      	ldr	r3, [pc, #28]	; (2c2c <_timer_init+0x1c8>)
    2c10:	4413      	add	r3, r2
    2c12:	7adb      	ldrb	r3, [r3, #11]
    2c14:	76e3      	strb	r3, [r4, #27]
    2c16:	6923      	ldr	r3, [r4, #16]
    2c18:	f013 0f20 	tst.w	r3, #32
    2c1c:	d1fb      	bne.n	2c16 <_timer_init+0x1b2>
    2c1e:	e783      	b.n	2b28 <_timer_init+0xc4>
    2c20:	000029ed 	.word	0x000029ed
    2c24:	0000483c 	.word	0x0000483c
    2c28:	00001561 	.word	0x00001561
    2c2c:	20000000 	.word	0x20000000
    2c30:	000029c5 	.word	0x000029c5
    2c34:	e000e100 	.word	0xe000e100

00002c38 <_pwm_init>:
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	4606      	mov	r6, r0
    2c3c:	460c      	mov	r4, r1
    2c3e:	4608      	mov	r0, r1
    2c40:	4b59      	ldr	r3, [pc, #356]	; (2da8 <_pwm_init+0x170>)
    2c42:	4798      	blx	r3
    2c44:	4605      	mov	r5, r0
    2c46:	6134      	str	r4, [r6, #16]
    2c48:	6923      	ldr	r3, [r4, #16]
    2c4a:	f013 0f01 	tst.w	r3, #1
    2c4e:	d119      	bne.n	2c84 <_pwm_init+0x4c>
    2c50:	6923      	ldr	r3, [r4, #16]
    2c52:	f013 0f03 	tst.w	r3, #3
    2c56:	d1fb      	bne.n	2c50 <_pwm_init+0x18>
    2c58:	6823      	ldr	r3, [r4, #0]
    2c5a:	f013 0f02 	tst.w	r3, #2
    2c5e:	d00b      	beq.n	2c78 <_pwm_init+0x40>
    2c60:	6823      	ldr	r3, [r4, #0]
    2c62:	f023 0302 	bic.w	r3, r3, #2
    2c66:	6023      	str	r3, [r4, #0]
    2c68:	6923      	ldr	r3, [r4, #16]
    2c6a:	f013 0f03 	tst.w	r3, #3
    2c6e:	d1fb      	bne.n	2c68 <_pwm_init+0x30>
    2c70:	6923      	ldr	r3, [r4, #16]
    2c72:	f013 0f02 	tst.w	r3, #2
    2c76:	d1fb      	bne.n	2c70 <_pwm_init+0x38>
    2c78:	2301      	movs	r3, #1
    2c7a:	6023      	str	r3, [r4, #0]
    2c7c:	6923      	ldr	r3, [r4, #16]
    2c7e:	f013 0f03 	tst.w	r3, #3
    2c82:	d1fb      	bne.n	2c7c <_pwm_init+0x44>
    2c84:	6923      	ldr	r3, [r4, #16]
    2c86:	f013 0f01 	tst.w	r3, #1
    2c8a:	d1fb      	bne.n	2c84 <_pwm_init+0x4c>
    2c8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c90:	009a      	lsls	r2, r3, #2
    2c92:	4b46      	ldr	r3, [pc, #280]	; (2dac <_pwm_init+0x174>)
    2c94:	4413      	add	r3, r2
    2c96:	685b      	ldr	r3, [r3, #4]
    2c98:	6023      	str	r3, [r4, #0]
    2c9a:	6923      	ldr	r3, [r4, #16]
    2c9c:	f013 0f03 	tst.w	r3, #3
    2ca0:	d1fb      	bne.n	2c9a <_pwm_init+0x62>
    2ca2:	00aa      	lsls	r2, r5, #2
    2ca4:	442a      	add	r2, r5
    2ca6:	0091      	lsls	r1, r2, #2
    2ca8:	4b40      	ldr	r3, [pc, #256]	; (2dac <_pwm_init+0x174>)
    2caa:	440b      	add	r3, r1
    2cac:	7a9a      	ldrb	r2, [r3, #10]
    2cae:	73e2      	strb	r2, [r4, #15]
    2cb0:	891a      	ldrh	r2, [r3, #8]
    2cb2:	80e2      	strh	r2, [r4, #6]
    2cb4:	2203      	movs	r2, #3
    2cb6:	7322      	strb	r2, [r4, #12]
    2cb8:	685b      	ldr	r3, [r3, #4]
    2cba:	f003 030c 	and.w	r3, r3, #12
    2cbe:	2b08      	cmp	r3, #8
    2cc0:	d059      	beq.n	2d76 <_pwm_init+0x13e>
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d16b      	bne.n	2d9e <_pwm_init+0x166>
    2cc6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cca:	009a      	lsls	r2, r3, #2
    2ccc:	4b37      	ldr	r3, [pc, #220]	; (2dac <_pwm_init+0x174>)
    2cce:	4413      	add	r3, r2
    2cd0:	899b      	ldrh	r3, [r3, #12]
    2cd2:	83a3      	strh	r3, [r4, #28]
    2cd4:	6923      	ldr	r3, [r4, #16]
    2cd6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cda:	d1fb      	bne.n	2cd4 <_pwm_init+0x9c>
    2cdc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ce0:	009a      	lsls	r2, r3, #2
    2ce2:	4b32      	ldr	r3, [pc, #200]	; (2dac <_pwm_init+0x174>)
    2ce4:	4413      	add	r3, r2
    2ce6:	8a1b      	ldrh	r3, [r3, #16]
    2ce8:	83e3      	strh	r3, [r4, #30]
    2cea:	6923      	ldr	r3, [r4, #16]
    2cec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cf0:	d1fb      	bne.n	2cea <_pwm_init+0xb2>
    2cf2:	4631      	mov	r1, r6
    2cf4:	4620      	mov	r0, r4
    2cf6:	4b2e      	ldr	r3, [pc, #184]	; (2db0 <_pwm_init+0x178>)
    2cf8:	4798      	blx	r3
    2cfa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cfe:	009a      	lsls	r2, r3, #2
    2d00:	4b2a      	ldr	r3, [pc, #168]	; (2dac <_pwm_init+0x174>)
    2d02:	4413      	add	r3, r2
    2d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d08:	2b00      	cmp	r3, #0
    2d0a:	db0d      	blt.n	2d28 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d0c:	095a      	lsrs	r2, r3, #5
    2d0e:	f003 031f 	and.w	r3, r3, #31
    2d12:	2101      	movs	r1, #1
    2d14:	fa01 f303 	lsl.w	r3, r1, r3
    2d18:	3220      	adds	r2, #32
    2d1a:	4926      	ldr	r1, [pc, #152]	; (2db4 <_pwm_init+0x17c>)
    2d1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d24:	f3bf 8f6f 	isb	sy
    2d28:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d2c:	009a      	lsls	r2, r3, #2
    2d2e:	4b1f      	ldr	r3, [pc, #124]	; (2dac <_pwm_init+0x174>)
    2d30:	4413      	add	r3, r2
    2d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d36:	2b00      	cmp	r3, #0
    2d38:	db09      	blt.n	2d4e <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d3a:	095a      	lsrs	r2, r3, #5
    2d3c:	f003 031f 	and.w	r3, r3, #31
    2d40:	2101      	movs	r1, #1
    2d42:	fa01 f303 	lsl.w	r3, r1, r3
    2d46:	3260      	adds	r2, #96	; 0x60
    2d48:	491a      	ldr	r1, [pc, #104]	; (2db4 <_pwm_init+0x17c>)
    2d4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2d4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2d52:	00aa      	lsls	r2, r5, #2
    2d54:	4b15      	ldr	r3, [pc, #84]	; (2dac <_pwm_init+0x174>)
    2d56:	4413      	add	r3, r2
    2d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	db21      	blt.n	2da4 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d60:	0959      	lsrs	r1, r3, #5
    2d62:	f003 031f 	and.w	r3, r3, #31
    2d66:	2201      	movs	r2, #1
    2d68:	fa02 f303 	lsl.w	r3, r2, r3
    2d6c:	4a11      	ldr	r2, [pc, #68]	; (2db4 <_pwm_init+0x17c>)
    2d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    2d72:	2000      	movs	r0, #0
    2d74:	bd70      	pop	{r4, r5, r6, pc}
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <_pwm_init+0x174>)
    2d78:	440b      	add	r3, r1
    2d7a:	68db      	ldr	r3, [r3, #12]
    2d7c:	61e3      	str	r3, [r4, #28]
    2d7e:	6923      	ldr	r3, [r4, #16]
    2d80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d84:	d1fb      	bne.n	2d7e <_pwm_init+0x146>
    2d86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d8a:	009a      	lsls	r2, r3, #2
    2d8c:	4b07      	ldr	r3, [pc, #28]	; (2dac <_pwm_init+0x174>)
    2d8e:	4413      	add	r3, r2
    2d90:	691b      	ldr	r3, [r3, #16]
    2d92:	6223      	str	r3, [r4, #32]
    2d94:	6923      	ldr	r3, [r4, #16]
    2d96:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d9a:	d1fb      	bne.n	2d94 <_pwm_init+0x15c>
    2d9c:	e7a9      	b.n	2cf2 <_pwm_init+0xba>
    2d9e:	f04f 30ff 	mov.w	r0, #4294967295
    2da2:	bd70      	pop	{r4, r5, r6, pc}
    2da4:	2000      	movs	r0, #0
    2da6:	bd70      	pop	{r4, r5, r6, pc}
    2da8:	000029ed 	.word	0x000029ed
    2dac:	20000000 	.word	0x20000000
    2db0:	000029c5 	.word	0x000029c5
    2db4:	e000e100 	.word	0xe000e100

00002db8 <_timer_start>:
    2db8:	68c2      	ldr	r2, [r0, #12]
    2dba:	6813      	ldr	r3, [r2, #0]
    2dbc:	f043 0302 	orr.w	r3, r3, #2
    2dc0:	6013      	str	r3, [r2, #0]
    2dc2:	6913      	ldr	r3, [r2, #16]
    2dc4:	f013 0f03 	tst.w	r3, #3
    2dc8:	d1fb      	bne.n	2dc2 <_timer_start+0xa>
    2dca:	4770      	bx	lr

00002dcc <_pwm_enable>:
    2dcc:	6902      	ldr	r2, [r0, #16]
    2dce:	6813      	ldr	r3, [r2, #0]
    2dd0:	f043 0302 	orr.w	r3, r3, #2
    2dd4:	6013      	str	r3, [r2, #0]
    2dd6:	6913      	ldr	r3, [r2, #16]
    2dd8:	f013 0f03 	tst.w	r3, #3
    2ddc:	d1fb      	bne.n	2dd6 <_pwm_enable+0xa>
    2dde:	4770      	bx	lr

00002de0 <_pwm_set_param>:
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	460e      	mov	r6, r1
    2de4:	4615      	mov	r5, r2
    2de6:	6904      	ldr	r4, [r0, #16]
    2de8:	4620      	mov	r0, r4
    2dea:	4b1b      	ldr	r3, [pc, #108]	; (2e58 <_pwm_set_param+0x78>)
    2dec:	4798      	blx	r3
    2dee:	0082      	lsls	r2, r0, #2
    2df0:	4402      	add	r2, r0
    2df2:	0091      	lsls	r1, r2, #2
    2df4:	4b19      	ldr	r3, [pc, #100]	; (2e5c <_pwm_set_param+0x7c>)
    2df6:	440b      	add	r3, r1
    2df8:	60de      	str	r6, [r3, #12]
    2dfa:	611d      	str	r5, [r3, #16]
    2dfc:	685b      	ldr	r3, [r3, #4]
    2dfe:	f003 030c 	and.w	r3, r3, #12
    2e02:	2b08      	cmp	r3, #8
    2e04:	d016      	beq.n	2e34 <_pwm_set_param+0x54>
    2e06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2e0a:	009a      	lsls	r2, r3, #2
    2e0c:	4b13      	ldr	r3, [pc, #76]	; (2e5c <_pwm_set_param+0x7c>)
    2e0e:	4413      	add	r3, r2
    2e10:	899b      	ldrh	r3, [r3, #12]
    2e12:	83a3      	strh	r3, [r4, #28]
    2e14:	6923      	ldr	r3, [r4, #16]
    2e16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e1a:	d1fb      	bne.n	2e14 <_pwm_set_param+0x34>
    2e1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e20:	0082      	lsls	r2, r0, #2
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <_pwm_set_param+0x7c>)
    2e24:	4413      	add	r3, r2
    2e26:	8a1b      	ldrh	r3, [r3, #16]
    2e28:	83e3      	strh	r3, [r4, #30]
    2e2a:	6923      	ldr	r3, [r4, #16]
    2e2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e30:	d1fb      	bne.n	2e2a <_pwm_set_param+0x4a>
    2e32:	bd70      	pop	{r4, r5, r6, pc}
    2e34:	61e6      	str	r6, [r4, #28]
    2e36:	6923      	ldr	r3, [r4, #16]
    2e38:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e3c:	d1fb      	bne.n	2e36 <_pwm_set_param+0x56>
    2e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e42:	0082      	lsls	r2, r0, #2
    2e44:	4b05      	ldr	r3, [pc, #20]	; (2e5c <_pwm_set_param+0x7c>)
    2e46:	4413      	add	r3, r2
    2e48:	691b      	ldr	r3, [r3, #16]
    2e4a:	6223      	str	r3, [r4, #32]
    2e4c:	6923      	ldr	r3, [r4, #16]
    2e4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e52:	d1fb      	bne.n	2e4c <_pwm_set_param+0x6c>
    2e54:	bd70      	pop	{r4, r5, r6, pc}
    2e56:	bf00      	nop
    2e58:	000029ed 	.word	0x000029ed
    2e5c:	20000000 	.word	0x20000000

00002e60 <_timer_is_started>:
    2e60:	68c2      	ldr	r2, [r0, #12]
    2e62:	6913      	ldr	r3, [r2, #16]
    2e64:	f013 0f03 	tst.w	r3, #3
    2e68:	d1fb      	bne.n	2e62 <_timer_is_started+0x2>
    2e6a:	6810      	ldr	r0, [r2, #0]
    2e6c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e70:	4770      	bx	lr

00002e72 <_pwm_is_enabled>:
    2e72:	6902      	ldr	r2, [r0, #16]
    2e74:	6913      	ldr	r3, [r2, #16]
    2e76:	f013 0f03 	tst.w	r3, #3
    2e7a:	d1fb      	bne.n	2e74 <_pwm_is_enabled+0x2>
    2e7c:	6810      	ldr	r0, [r2, #0]
    2e7e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e82:	4770      	bx	lr

00002e84 <_tc_get_timer>:
    2e84:	2000      	movs	r0, #0
    2e86:	4770      	bx	lr

00002e88 <_tc_get_pwm>:
    2e88:	2000      	movs	r0, #0
    2e8a:	4770      	bx	lr

00002e8c <_timer_set_irq>:
    2e8c:	b510      	push	{r4, lr}
    2e8e:	68c0      	ldr	r0, [r0, #12]
    2e90:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <_timer_set_irq+0x28>)
    2e92:	4798      	blx	r3
    2e94:	4604      	mov	r4, r0
    2e96:	f240 129d 	movw	r2, #413	; 0x19d
    2e9a:	4907      	ldr	r1, [pc, #28]	; (2eb8 <_timer_set_irq+0x2c>)
    2e9c:	2001      	movs	r0, #1
    2e9e:	4b07      	ldr	r3, [pc, #28]	; (2ebc <_timer_set_irq+0x30>)
    2ea0:	4798      	blx	r3
    2ea2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ea6:	00a2      	lsls	r2, r4, #2
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <_timer_set_irq+0x34>)
    2eaa:	4413      	add	r3, r2
    2eac:	7898      	ldrb	r0, [r3, #2]
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <_timer_set_irq+0x38>)
    2eb0:	4798      	blx	r3
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	000029ed 	.word	0x000029ed
    2eb8:	0000483c 	.word	0x0000483c
    2ebc:	00001561 	.word	0x00001561
    2ec0:	20000000 	.word	0x20000000
    2ec4:	00001921 	.word	0x00001921

00002ec8 <TC0_Handler>:
    2ec8:	b508      	push	{r3, lr}
    2eca:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <TC0_Handler+0xc>)
    2ecc:	6818      	ldr	r0, [r3, #0]
    2ece:	4b02      	ldr	r3, [pc, #8]	; (2ed8 <TC0_Handler+0x10>)
    2ed0:	4798      	blx	r3
    2ed2:	bd08      	pop	{r3, pc}
    2ed4:	2000021c 	.word	0x2000021c
    2ed8:	00002995 	.word	0x00002995

00002edc <TC1_Handler>:
    2edc:	b508      	push	{r3, lr}
    2ede:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <TC1_Handler+0xc>)
    2ee0:	6858      	ldr	r0, [r3, #4]
    2ee2:	4b02      	ldr	r3, [pc, #8]	; (2eec <TC1_Handler+0x10>)
    2ee4:	4798      	blx	r3
    2ee6:	bd08      	pop	{r3, pc}
    2ee8:	2000021c 	.word	0x2000021c
    2eec:	0000297d 	.word	0x0000297d

00002ef0 <SDA_low>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <SDA_low+0x1c>)
    2ef2:	2201      	movs	r2, #1
    2ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ef8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2efc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f00:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2f04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop
    2f0c:	41008000 	.word	0x41008000

00002f10 <SDA_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f10:	4b06      	ldr	r3, [pc, #24]	; (2f2c <SDA_high+0x1c>)
    2f12:	2201      	movs	r2, #1
    2f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f1c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f20:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f24:	4a02      	ldr	r2, [pc, #8]	; (2f30 <SDA_high+0x20>)
    2f26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f2a:	4770      	bx	lr
    2f2c:	41008000 	.word	0x41008000
    2f30:	c0020000 	.word	0xc0020000

00002f34 <SDA_read>:
void SDA_high()
{
	gpio_set_pin_direction(I2C_BB_SDA, GPIO_DIRECTION_IN);
}
uint8_t SDA_read()
{
    2f34:	b510      	push	{r4, lr}
    2f36:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2f38:	a801      	add	r0, sp, #4
    2f3a:	4b09      	ldr	r3, [pc, #36]	; (2f60 <SDA_read+0x2c>)
    2f3c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2f3e:	4b09      	ldr	r3, [pc, #36]	; (2f64 <SDA_read+0x30>)
    2f40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2f44:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2f48:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2f4c:	4060      	eors	r0, r4
    2f4e:	4010      	ands	r0, r2
    2f50:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    2f52:	a801      	add	r0, sp, #4
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <SDA_read+0x34>)
    2f56:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2f58:	f004 0001 	and.w	r0, r4, #1
	return gpio_get_pin_level(I2C_BB_SDA);
}
    2f5c:	b002      	add	sp, #8
    2f5e:	bd10      	pop	{r4, pc}
    2f60:	00000d41 	.word	0x00000d41
    2f64:	41008000 	.word	0x41008000
    2f68:	00000d4f 	.word	0x00000d4f

00002f6c <SCL_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f6c:	4b06      	ldr	r3, [pc, #24]	; (2f88 <SCL_low+0x1c>)
    2f6e:	2204      	movs	r2, #4
    2f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f7c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2f80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f84:	4770      	bx	lr
    2f86:	bf00      	nop
    2f88:	41008000 	.word	0x41008000

00002f8c <SCL_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <SCL_high+0x1c>)
    2f8e:	2204      	movs	r2, #4
    2f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f98:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2fa0:	4a02      	ldr	r2, [pc, #8]	; (2fac <SCL_high+0x20>)
    2fa2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2fa6:	4770      	bx	lr
    2fa8:	41008000 	.word	0x41008000
    2fac:	c0020000 	.word	0xc0020000

00002fb0 <I2C_BB_sleep>:
{
	gpio_set_pin_direction(I2C_BB_SCL, GPIO_DIRECTION_IN);
}

void I2C_BB_sleep(void)
{
    2fb0:	b508      	push	{r3, lr}
	delay_us(SLEEP_LENGTH);
    2fb2:	2064      	movs	r0, #100	; 0x64
    2fb4:	4b01      	ldr	r3, [pc, #4]	; (2fbc <I2C_BB_sleep+0xc>)
    2fb6:	4798      	blx	r3
    2fb8:	bd08      	pop	{r3, pc}
    2fba:	bf00      	nop
    2fbc:	00000db5 	.word	0x00000db5

00002fc0 <I2C_BB_end>:
}


void I2C_BB_end()
{
    2fc0:	b510      	push	{r4, lr}
	SDA_low();
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <I2C_BB_end+0x18>)
    2fc4:	4798      	blx	r3
	I2C_BB_sleep();
    2fc6:	4c05      	ldr	r4, [pc, #20]	; (2fdc <I2C_BB_end+0x1c>)
    2fc8:	47a0      	blx	r4
	SCL_high();
    2fca:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <I2C_BB_end+0x20>)
    2fcc:	4798      	blx	r3
	I2C_BB_sleep();
    2fce:	47a0      	blx	r4
	SDA_high();
    2fd0:	4b04      	ldr	r3, [pc, #16]	; (2fe4 <I2C_BB_end+0x24>)
    2fd2:	4798      	blx	r3
	I2C_BB_sleep();
    2fd4:	47a0      	blx	r4
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	00002ef1 	.word	0x00002ef1
    2fdc:	00002fb1 	.word	0x00002fb1
    2fe0:	00002f8d 	.word	0x00002f8d
    2fe4:	00002f11 	.word	0x00002f11

00002fe8 <I2C_BB_byte_out>:
		
	return I2C_BB_byte_out(addr);	//should receive a bool?
}

bool I2C_BB_byte_out(uint8_t byte)
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	4605      	mov	r5, r0
	uint8_t i, ack;

	// send byte	
	for (i = 0; i < 8; i++) {
    2fec:	2400      	movs	r4, #0
    2fee:	e00c      	b.n	300a <I2C_BB_byte_out+0x22>
		if (byte & 0x80)
			SDA_high();
    2ff0:	4b13      	ldr	r3, [pc, #76]	; (3040 <I2C_BB_byte_out+0x58>)
    2ff2:	4798      	blx	r3
		else
			SDA_low();
		SCL_high();
    2ff4:	4b13      	ldr	r3, [pc, #76]	; (3044 <I2C_BB_byte_out+0x5c>)
    2ff6:	4798      	blx	r3
		I2C_BB_sleep();
    2ff8:	4e13      	ldr	r6, [pc, #76]	; (3048 <I2C_BB_byte_out+0x60>)
    2ffa:	47b0      	blx	r6
		SCL_low();
    2ffc:	4b13      	ldr	r3, [pc, #76]	; (304c <I2C_BB_byte_out+0x64>)
    2ffe:	4798      	blx	r3
		byte <<= 1;
    3000:	006d      	lsls	r5, r5, #1
    3002:	b2ed      	uxtb	r5, r5
		I2C_BB_sleep();
    3004:	47b0      	blx	r6
	for (i = 0; i < 8; i++) {
    3006:	3401      	adds	r4, #1
    3008:	b2e4      	uxtb	r4, r4
    300a:	2c07      	cmp	r4, #7
    300c:	d805      	bhi.n	301a <I2C_BB_byte_out+0x32>
		if (byte & 0x80)
    300e:	f015 0f80 	tst.w	r5, #128	; 0x80
    3012:	d1ed      	bne.n	2ff0 <I2C_BB_byte_out+0x8>
			SDA_low();
    3014:	4b0e      	ldr	r3, [pc, #56]	; (3050 <I2C_BB_byte_out+0x68>)
    3016:	4798      	blx	r3
    3018:	e7ec      	b.n	2ff4 <I2C_BB_byte_out+0xc>
	}
	// read ack bit
	SDA_high();
    301a:	4b09      	ldr	r3, [pc, #36]	; (3040 <I2C_BB_byte_out+0x58>)
    301c:	4798      	blx	r3
	SCL_high();
    301e:	4b09      	ldr	r3, [pc, #36]	; (3044 <I2C_BB_byte_out+0x5c>)
    3020:	4798      	blx	r3
	I2C_BB_sleep();
    3022:	4c09      	ldr	r4, [pc, #36]	; (3048 <I2C_BB_byte_out+0x60>)
    3024:	47a0      	blx	r4
	ack = SDA_read();
    3026:	4b0b      	ldr	r3, [pc, #44]	; (3054 <I2C_BB_byte_out+0x6c>)
    3028:	4798      	blx	r3
    302a:	4605      	mov	r5, r0
	SCL_low();
    302c:	4b07      	ldr	r3, [pc, #28]	; (304c <I2C_BB_byte_out+0x64>)
    302e:	4798      	blx	r3
	I2C_BB_sleep();
    3030:	47a0      	blx	r4
	SDA_low();
    3032:	4b07      	ldr	r3, [pc, #28]	; (3050 <I2C_BB_byte_out+0x68>)
    3034:	4798      	blx	r3
	return (ack == 0) ? 1:0;   //
}
    3036:	fab5 f085 	clz	r0, r5
    303a:	0940      	lsrs	r0, r0, #5
    303c:	bd70      	pop	{r4, r5, r6, pc}
    303e:	bf00      	nop
    3040:	00002f11 	.word	0x00002f11
    3044:	00002f8d 	.word	0x00002f8d
    3048:	00002fb1 	.word	0x00002fb1
    304c:	00002f6d 	.word	0x00002f6d
    3050:	00002ef1 	.word	0x00002ef1
    3054:	00002f35 	.word	0x00002f35

00003058 <I2C_BB_begin>:
{
    3058:	b538      	push	{r3, r4, r5, lr}
    305a:	4604      	mov	r4, r0
    305c:	460d      	mov	r5, r1
	SDA_low();
    305e:	4b07      	ldr	r3, [pc, #28]	; (307c <I2C_BB_begin+0x24>)
    3060:	4798      	blx	r3
	I2C_BB_sleep();
    3062:	4b07      	ldr	r3, [pc, #28]	; (3080 <I2C_BB_begin+0x28>)
    3064:	4798      	blx	r3
	SCL_low();
    3066:	4b07      	ldr	r3, [pc, #28]	; (3084 <I2C_BB_begin+0x2c>)
    3068:	4798      	blx	r3
	addr=addr<<1;		//7 bit address shifted one bit to make room for the RW bit
    306a:	0060      	lsls	r0, r4, #1
    306c:	b2c0      	uxtb	r0, r0
	if (read)
    306e:	b10d      	cbz	r5, 3074 <I2C_BB_begin+0x1c>
		addr++;		
    3070:	3001      	adds	r0, #1
    3072:	b2c0      	uxtb	r0, r0
	return I2C_BB_byte_out(addr);	//should receive a bool?
    3074:	4b04      	ldr	r3, [pc, #16]	; (3088 <I2C_BB_begin+0x30>)
    3076:	4798      	blx	r3
}
    3078:	bd38      	pop	{r3, r4, r5, pc}
    307a:	bf00      	nop
    307c:	00002ef1 	.word	0x00002ef1
    3080:	00002fb1 	.word	0x00002fb1
    3084:	00002f6d 	.word	0x00002f6d
    3088:	00002fe9 	.word	0x00002fe9

0000308c <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    308c:	4b14      	ldr	r3, [pc, #80]	; (30e0 <I2C_BB_init+0x54>)
    308e:	2201      	movs	r2, #1
    3090:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    309c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    30a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    30a4:	490f      	ldr	r1, [pc, #60]	; (30e4 <I2C_BB_init+0x58>)
    30a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30aa:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    30ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30b6:	2204      	movs	r2, #4
    30b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    30bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    30c4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    30c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    30cc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30d0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    30d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30d8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	41008000 	.word	0x41008000
    30e4:	c0020000 	.word	0xc0020000

000030e8 <I2C_BB_write>:
	// The HV892 is write only. 
	return 0;
}

uint8_t I2C_BB_write(uint8_t addr, uint8_t value)
{
    30e8:	b510      	push	{r4, lr}
    30ea:	460c      	mov	r4, r1
	uint8_t rc = 0;

	rc = I2C_BB_begin(addr, 0);    //read ack
    30ec:	2100      	movs	r1, #0
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <I2C_BB_write+0x1c>)
    30f0:	4798      	blx	r3
	if (rc == 1) { // ack was received
    30f2:	b918      	cbnz	r0, 30fc <I2C_BB_write+0x14>
		I2C_BB_byte_out(value);
	}

	I2C_BB_end();
    30f4:	4b04      	ldr	r3, [pc, #16]	; (3108 <I2C_BB_write+0x20>)
    30f6:	4798      	blx	r3
	return 0;
}
    30f8:	2000      	movs	r0, #0
    30fa:	bd10      	pop	{r4, pc}
		I2C_BB_byte_out(value);
    30fc:	4620      	mov	r0, r4
    30fe:	4b03      	ldr	r3, [pc, #12]	; (310c <I2C_BB_write+0x24>)
    3100:	4798      	blx	r3
    3102:	e7f7      	b.n	30f4 <I2C_BB_write+0xc>
    3104:	00003059 	.word	0x00003059
    3108:	00002fc1 	.word	0x00002fc1
    310c:	00002fe9 	.word	0x00002fe9

00003110 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    3110:	4a02      	ldr	r2, [pc, #8]	; (311c <millisecondTimer_cb+0xc>)
    3112:	6813      	ldr	r3, [r2, #0]
    3114:	3301      	adds	r3, #1
    3116:	6013      	str	r3, [r2, #0]
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	20000224 	.word	0x20000224

00003120 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    3120:	b510      	push	{r4, lr}
    3122:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3124:	2301      	movs	r3, #1
    3126:	f10d 0207 	add.w	r2, sp, #7
    312a:	2100      	movs	r1, #0
    312c:	4807      	ldr	r0, [pc, #28]	; (314c <checkBattVoltage_cb+0x2c>)
    312e:	4c08      	ldr	r4, [pc, #32]	; (3150 <checkBattVoltage_cb+0x30>)
    3130:	47a0      	blx	r4
	battVolt = adcValue;
    3132:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3136:	4a07      	ldr	r2, [pc, #28]	; (3154 <checkBattVoltage_cb+0x34>)
    3138:	7013      	strb	r3, [r2, #0]
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 158) {
    313a:	2b9d      	cmp	r3, #157	; 0x9d
    313c:	d804      	bhi.n	3148 <checkBattVoltage_cb+0x28>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    313e:	4a06      	ldr	r2, [pc, #24]	; (3158 <checkBattVoltage_cb+0x38>)
    3140:	6813      	ldr	r3, [r2, #0]
    3142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3146:	6013      	str	r3, [r2, #0]
	}
}
    3148:	b002      	add	sp, #8
    314a:	bd10      	pop	{r4, pc}
    314c:	200006c8 	.word	0x200006c8
    3150:	00000ca1 	.word	0x00000ca1
    3154:	20000b7a 	.word	0x20000b7a
    3158:	20000028 	.word	0x20000028

0000315c <irReceive_cb>:
		deviceState |= DEVICE_STATE_CHARGING;
	}
}

static void irReceive_cb(void)
{
    315c:	b500      	push	{lr}
    315e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3160:	a801      	add	r0, sp, #4
    3162:	4b07      	ldr	r3, [pc, #28]	; (3180 <irReceive_cb+0x24>)
    3164:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3166:	4b07      	ldr	r3, [pc, #28]	; (3184 <irReceive_cb+0x28>)
    3168:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    316c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3174:	a801      	add	r0, sp, #4
    3176:	4b04      	ldr	r3, [pc, #16]	; (3188 <irReceive_cb+0x2c>)
    3178:	4798      	blx	r3
		
	}
	else {
		
	}	
}
    317a:	b003      	add	sp, #12
    317c:	f85d fb04 	ldr.w	pc, [sp], #4
    3180:	00000d41 	.word	0x00000d41
    3184:	41008000 	.word	0x41008000
    3188:	00000d4f 	.word	0x00000d4f

0000318c <pushButton_cb>:

static void pushButton_cb(void)
{
    318c:	b500      	push	{lr}
    318e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3190:	a801      	add	r0, sp, #4
    3192:	4b06      	ldr	r3, [pc, #24]	; (31ac <pushButton_cb+0x20>)
    3194:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3196:	4b06      	ldr	r3, [pc, #24]	; (31b0 <pushButton_cb+0x24>)
    3198:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    319a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    319c:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    319e:	a801      	add	r0, sp, #4
    31a0:	4b04      	ldr	r3, [pc, #16]	; (31b4 <pushButton_cb+0x28>)
    31a2:	4798      	blx	r3
		
	}
	else {
		
	}
}
    31a4:	b003      	add	sp, #12
    31a6:	f85d fb04 	ldr.w	pc, [sp], #4
    31aa:	bf00      	nop
    31ac:	00000d41 	.word	0x00000d41
    31b0:	41008000 	.word	0x41008000
    31b4:	00000d4f 	.word	0x00000d4f

000031b8 <battCharging_cb>:
{
    31b8:	b510      	push	{r4, lr}
    31ba:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    31bc:	a801      	add	r0, sp, #4
    31be:	4b0f      	ldr	r3, [pc, #60]	; (31fc <battCharging_cb+0x44>)
    31c0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31c2:	4b0f      	ldr	r3, [pc, #60]	; (3200 <battCharging_cb+0x48>)
    31c4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31cc:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    31d0:	4054      	eors	r4, r2
    31d2:	400c      	ands	r4, r1
    31d4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    31d6:	a801      	add	r0, sp, #4
    31d8:	4b0a      	ldr	r3, [pc, #40]	; (3204 <battCharging_cb+0x4c>)
    31da:	4798      	blx	r3
	if (pinState == true) {
    31dc:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    31e0:	d106      	bne.n	31f0 <battCharging_cb+0x38>
		deviceState |= DEVICE_STATE_CHARGING;
    31e2:	4a09      	ldr	r2, [pc, #36]	; (3208 <battCharging_cb+0x50>)
    31e4:	6813      	ldr	r3, [r2, #0]
    31e6:	f043 0320 	orr.w	r3, r3, #32
    31ea:	6013      	str	r3, [r2, #0]
}
    31ec:	b002      	add	sp, #8
    31ee:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    31f0:	4b05      	ldr	r3, [pc, #20]	; (3208 <battCharging_cb+0x50>)
    31f2:	681a      	ldr	r2, [r3, #0]
    31f4:	2200      	movs	r2, #0
    31f6:	601a      	str	r2, [r3, #0]
    31f8:	e7f8      	b.n	31ec <battCharging_cb+0x34>
    31fa:	bf00      	nop
    31fc:	00000d41 	.word	0x00000d41
    3200:	41008000 	.word	0x41008000
    3204:	00000d4f 	.word	0x00000d4f
    3208:	20000028 	.word	0x20000028

0000320c <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
    320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3210:	4607      	mov	r7, r0
    3212:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3214:	4d2f      	ldr	r5, [pc, #188]	; (32d4 <spi_BB_Write+0xc8>)
    3216:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    321a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    321e:	200a      	movs	r0, #10
    3220:	4c2d      	ldr	r4, [pc, #180]	; (32d8 <spi_BB_Write+0xcc>)
    3222:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3224:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3228:	200a      	movs	r0, #10
    322a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    322c:	2408      	movs	r4, #8
    322e:	e00c      	b.n	324a <spi_BB_Write+0x3e>
    3230:	2210      	movs	r2, #16
    3232:	4b28      	ldr	r3, [pc, #160]	; (32d4 <spi_BB_Write+0xc8>)
    3234:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    3236:	200a      	movs	r0, #10
    3238:	4d27      	ldr	r5, [pc, #156]	; (32d8 <spi_BB_Write+0xcc>)
    323a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    323c:	2220      	movs	r2, #32
    323e:	4b25      	ldr	r3, [pc, #148]	; (32d4 <spi_BB_Write+0xc8>)
    3240:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3242:	200a      	movs	r0, #10
    3244:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3246:	3c01      	subs	r4, #1
    3248:	b264      	sxtb	r4, r4
    324a:	2c00      	cmp	r4, #0
    324c:	db0b      	blt.n	3266 <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    324e:	2220      	movs	r2, #32
    3250:	4b20      	ldr	r3, [pc, #128]	; (32d4 <spi_BB_Write+0xc8>)
    3252:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3254:	fa47 f304 	asr.w	r3, r7, r4
    3258:	f013 0f01 	tst.w	r3, #1
    325c:	d0e8      	beq.n	3230 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    325e:	2210      	movs	r2, #16
    3260:	4b1c      	ldr	r3, [pc, #112]	; (32d4 <spi_BB_Write+0xc8>)
    3262:	619a      	str	r2, [r3, #24]
    3264:	e7e7      	b.n	3236 <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3266:	4c1b      	ldr	r4, [pc, #108]	; (32d4 <spi_BB_Write+0xc8>)
    3268:	2720      	movs	r7, #32
    326a:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    326c:	2310      	movs	r3, #16
    326e:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    3270:	200a      	movs	r0, #10
    3272:	4d19      	ldr	r5, [pc, #100]	; (32d8 <spi_BB_Write+0xcc>)
    3274:	47a8      	blx	r5
    3276:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    3278:	200a      	movs	r0, #10
    327a:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    327c:	240f      	movs	r4, #15
    327e:	e00c      	b.n	329a <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3280:	2210      	movs	r2, #16
    3282:	4b14      	ldr	r3, [pc, #80]	; (32d4 <spi_BB_Write+0xc8>)
    3284:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    3286:	200a      	movs	r0, #10
    3288:	4d13      	ldr	r5, [pc, #76]	; (32d8 <spi_BB_Write+0xcc>)
    328a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    328c:	2220      	movs	r2, #32
    328e:	4b11      	ldr	r3, [pc, #68]	; (32d4 <spi_BB_Write+0xc8>)
    3290:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3292:	200a      	movs	r0, #10
    3294:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    3296:	3c01      	subs	r4, #1
    3298:	b264      	sxtb	r4, r4
    329a:	2c00      	cmp	r4, #0
    329c:	db0b      	blt.n	32b6 <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    329e:	2220      	movs	r2, #32
    32a0:	4b0c      	ldr	r3, [pc, #48]	; (32d4 <spi_BB_Write+0xc8>)
    32a2:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    32a4:	fa46 f304 	asr.w	r3, r6, r4
    32a8:	f013 0f01 	tst.w	r3, #1
    32ac:	d0e8      	beq.n	3280 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32ae:	2210      	movs	r2, #16
    32b0:	4b08      	ldr	r3, [pc, #32]	; (32d4 <spi_BB_Write+0xc8>)
    32b2:	619a      	str	r2, [r3, #24]
    32b4:	e7e7      	b.n	3286 <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32b6:	4c07      	ldr	r4, [pc, #28]	; (32d4 <spi_BB_Write+0xc8>)
    32b8:	2320      	movs	r3, #32
    32ba:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    32bc:	200a      	movs	r0, #10
    32be:	4d06      	ldr	r5, [pc, #24]	; (32d8 <spi_BB_Write+0xcc>)
    32c0:	47a8      	blx	r5
	delay_us(10);
    32c2:	200a      	movs	r0, #10
    32c4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    32ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    32ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32d2:	bf00      	nop
    32d4:	41008000 	.word	0x41008000
    32d8:	00000db5 	.word	0x00000db5

000032dc <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
    32dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32e0:	b082      	sub	sp, #8
    32e2:	4606      	mov	r6, r0
    32e4:	4d33      	ldr	r5, [pc, #204]	; (33b4 <spi_BB_Read+0xd8>)
    32e6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    32ea:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    32ee:	200a      	movs	r0, #10
    32f0:	4c31      	ldr	r4, [pc, #196]	; (33b8 <spi_BB_Read+0xdc>)
    32f2:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32f4:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    32f8:	200a      	movs	r0, #10
    32fa:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    32fc:	2408      	movs	r4, #8
    32fe:	e00c      	b.n	331a <spi_BB_Read+0x3e>
    3300:	2210      	movs	r2, #16
    3302:	4b2c      	ldr	r3, [pc, #176]	; (33b4 <spi_BB_Read+0xd8>)
    3304:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    3306:	200a      	movs	r0, #10
    3308:	4d2b      	ldr	r5, [pc, #172]	; (33b8 <spi_BB_Read+0xdc>)
    330a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    330c:	2220      	movs	r2, #32
    330e:	4b29      	ldr	r3, [pc, #164]	; (33b4 <spi_BB_Read+0xd8>)
    3310:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3312:	200a      	movs	r0, #10
    3314:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3316:	3c01      	subs	r4, #1
    3318:	b264      	sxtb	r4, r4
    331a:	2c00      	cmp	r4, #0
    331c:	db0b      	blt.n	3336 <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    331e:	2220      	movs	r2, #32
    3320:	4b24      	ldr	r3, [pc, #144]	; (33b4 <spi_BB_Read+0xd8>)
    3322:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3324:	fa46 f304 	asr.w	r3, r6, r4
    3328:	f013 0f01 	tst.w	r3, #1
    332c:	d0e8      	beq.n	3300 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    332e:	2210      	movs	r2, #16
    3330:	4b20      	ldr	r3, [pc, #128]	; (33b4 <spi_BB_Read+0xd8>)
    3332:	619a      	str	r2, [r3, #24]
    3334:	e7e7      	b.n	3306 <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3336:	4c1f      	ldr	r4, [pc, #124]	; (33b4 <spi_BB_Read+0xd8>)
    3338:	2620      	movs	r6, #32
    333a:	6166      	str	r6, [r4, #20]
    333c:	2310      	movs	r3, #16
    333e:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    3340:	200a      	movs	r0, #10
    3342:	4d1d      	ldr	r5, [pc, #116]	; (33b8 <spi_BB_Read+0xdc>)
    3344:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3346:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    3348:	200a      	movs	r0, #10
    334a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    334c:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    334e:	200a      	movs	r0, #10
    3350:	47a8      	blx	r5
	uint16_t value = 0;
    3352:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    3354:	250f      	movs	r5, #15
    3356:	e01e      	b.n	3396 <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3358:	4c16      	ldr	r4, [pc, #88]	; (33b4 <spi_BB_Read+0xd8>)
    335a:	f04f 0820 	mov.w	r8, #32
    335e:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3362:	200a      	movs	r0, #10
    3364:	4e14      	ldr	r6, [pc, #80]	; (33b8 <spi_BB_Read+0xdc>)
    3366:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3368:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    336c:	a801      	add	r0, sp, #4
    336e:	4b13      	ldr	r3, [pc, #76]	; (33bc <spi_BB_Read+0xe0>)
    3370:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3372:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3374:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3376:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3378:	405c      	eors	r4, r3
    337a:	4014      	ands	r4, r2
    337c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    337e:	a801      	add	r0, sp, #4
    3380:	4b0f      	ldr	r3, [pc, #60]	; (33c0 <spi_BB_Read+0xe4>)
    3382:	4798      	blx	r3
    3384:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    3388:	40ac      	lsls	r4, r5
    338a:	433c      	orrs	r4, r7
    338c:	b2a7      	uxth	r7, r4
		delay_us(10);	
    338e:	200a      	movs	r0, #10
    3390:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    3392:	3d01      	subs	r5, #1
    3394:	b26d      	sxtb	r5, r5
    3396:	2d00      	cmp	r5, #0
    3398:	dade      	bge.n	3358 <spi_BB_Read+0x7c>
	}
	delay_us(10);
    339a:	200a      	movs	r0, #10
    339c:	4b06      	ldr	r3, [pc, #24]	; (33b8 <spi_BB_Read+0xdc>)
    339e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    33a4:	4b03      	ldr	r3, [pc, #12]	; (33b4 <spi_BB_Read+0xd8>)
    33a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    33aa:	4638      	mov	r0, r7
    33ac:	b002      	add	sp, #8
    33ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33b2:	bf00      	nop
    33b4:	41008000 	.word	0x41008000
    33b8:	00000db5 	.word	0x00000db5
    33bc:	00000d41 	.word	0x00000d41
    33c0:	00000d4f 	.word	0x00000d4f

000033c4 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    33c4:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    33c6:	2100      	movs	r1, #0
    33c8:	2002      	movs	r0, #2
    33ca:	4c0e      	ldr	r4, [pc, #56]	; (3404 <EnableClockMngmnt1+0x40>)
    33cc:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    33ce:	f242 1113 	movw	r1, #8467	; 0x2113
    33d2:	2011      	movs	r0, #17
    33d4:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    33d6:	2100      	movs	r1, #0
    33d8:	2014      	movs	r0, #20
    33da:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    33dc:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    33e0:	201a      	movs	r0, #26
    33e2:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    33e4:	f643 512d 	movw	r1, #15661	; 0x3d2d
    33e8:	201b      	movs	r0, #27
    33ea:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    33ec:	f247 011c 	movw	r1, #28700	; 0x701c
    33f0:	2020      	movs	r0, #32
    33f2:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    33f4:	2100      	movs	r1, #0
    33f6:	2008      	movs	r0, #8
    33f8:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    33fa:	2107      	movs	r1, #7
    33fc:	2010      	movs	r0, #16
    33fe:	47a0      	blx	r4
    3400:	bd10      	pop	{r4, pc}
    3402:	bf00      	nop
    3404:	0000320d 	.word	0x0000320d

00003408 <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    3408:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    340a:	2100      	movs	r1, #0
    340c:	2009      	movs	r0, #9
    340e:	4c05      	ldr	r4, [pc, #20]	; (3424 <EnableClockMngmnt2+0x1c>)
    3410:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    3412:	f247 010e 	movw	r1, #28686	; 0x700e
    3416:	2020      	movs	r0, #32
    3418:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    341a:	2101      	movs	r1, #1
    341c:	2022      	movs	r0, #34	; 0x22
    341e:	47a0      	blx	r4
    3420:	bd10      	pop	{r4, pc}
    3422:	bf00      	nop
    3424:	0000320d 	.word	0x0000320d

00003428 <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    3428:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    342a:	2100      	movs	r1, #0
    342c:	2002      	movs	r0, #2
    342e:	4ccd      	ldr	r4, [pc, #820]	; (3764 <RequiredUploads+0x33c>)
    3430:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    3432:	2100      	movs	r1, #0
    3434:	2008      	movs	r0, #8
    3436:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    3438:	2100      	movs	r1, #0
    343a:	2009      	movs	r0, #9
    343c:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    343e:	2100      	movs	r1, #0
    3440:	200a      	movs	r0, #10
    3442:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    3444:	2100      	movs	r1, #0
    3446:	2014      	movs	r0, #20
    3448:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    344a:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    344e:	201a      	movs	r0, #26
    3450:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    3452:	f643 512d 	movw	r1, #15661	; 0x3d2d
    3456:	201b      	movs	r0, #27
    3458:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    345a:	f247 010f 	movw	r1, #28687	; 0x700f
    345e:	2020      	movs	r0, #32
    3460:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    3462:	2101      	movs	r1, #1
    3464:	2022      	movs	r0, #34	; 0x22
    3466:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    3468:	2107      	movs	r1, #7
    346a:	2028      	movs	r0, #40	; 0x28
    346c:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    346e:	f640 015f 	movw	r1, #2143	; 0x85f
    3472:	2029      	movs	r0, #41	; 0x29
    3474:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    3476:	f244 1103 	movw	r1, #16643	; 0x4103
    347a:	202a      	movs	r0, #42	; 0x2a
    347c:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    347e:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    3482:	202b      	movs	r0, #43	; 0x2b
    3484:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    3486:	2101      	movs	r1, #1
    3488:	2030      	movs	r0, #48	; 0x30
    348a:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    348c:	2101      	movs	r1, #1
    348e:	2040      	movs	r0, #64	; 0x40
    3490:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3492:	f643 012a 	movw	r1, #14378	; 0x382a
    3496:	2041      	movs	r0, #65	; 0x41
    3498:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    349a:	f245 31c8 	movw	r1, #21448	; 0x53c8
    349e:	2042      	movs	r0, #66	; 0x42
    34a0:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    34a2:	f240 6165 	movw	r1, #1637	; 0x665
    34a6:	2043      	movs	r0, #67	; 0x43
    34a8:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    34aa:	2185      	movs	r1, #133	; 0x85
    34ac:	2044      	movs	r0, #68	; 0x44
    34ae:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    34b0:	f640 0188 	movw	r1, #2184	; 0x888
    34b4:	2045      	movs	r0, #69	; 0x45
    34b6:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    34b8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    34bc:	2046      	movs	r0, #70	; 0x46
    34be:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    34c0:	f648 0188 	movw	r1, #34952	; 0x8888
    34c4:	2047      	movs	r0, #71	; 0x47
    34c6:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    34c8:	f240 1117 	movw	r1, #279	; 0x117
    34cc:	2048      	movs	r0, #72	; 0x48
    34ce:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    34d0:	2100      	movs	r1, #0
    34d2:	2070      	movs	r0, #112	; 0x70
    34d4:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    34d6:	f244 710a 	movw	r1, #18186	; 0x470a
    34da:	2080      	movs	r0, #128	; 0x80
    34dc:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    34de:	f248 0101 	movw	r1, #32769	; 0x8001
    34e2:	2081      	movs	r0, #129	; 0x81
    34e4:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    34e6:	2115      	movs	r1, #21
    34e8:	2082      	movs	r0, #130	; 0x82
    34ea:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function
    34ec:	f640 0101 	movw	r1, #2049	; 0x801
    34f0:	20c0      	movs	r0, #192	; 0xc0
    34f2:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    34f4:	21e4      	movs	r1, #228	; 0xe4
    34f6:	20c2      	movs	r0, #194	; 0xc2
    34f8:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    34fa:	f44f 7182 	mov.w	r1, #260	; 0x104
    34fe:	20c5      	movs	r0, #197	; 0xc5
    3500:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    3502:	21a7      	movs	r1, #167	; 0xa7
    3504:	20c7      	movs	r0, #199	; 0xc7
    3506:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    3508:	f640 41e4 	movw	r1, #3300	; 0xce4
    350c:	20c8      	movs	r0, #200	; 0xc8
    350e:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    3510:	f640 41e4 	movw	r1, #3300	; 0xce4
    3514:	20c9      	movs	r0, #201	; 0xc9
    3516:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    3518:	21e4      	movs	r1, #228	; 0xe4
    351a:	20cc      	movs	r0, #204	; 0xcc
    351c:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    351e:	2114      	movs	r1, #20
    3520:	20cf      	movs	r0, #207	; 0xcf
    3522:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3524:	f44f 7180 	mov.w	r1, #256	; 0x100
    3528:	20d6      	movs	r0, #214	; 0xd6
    352a:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    352c:	f241 011f 	movw	r1, #4127	; 0x101f
    3530:	20d7      	movs	r0, #215	; 0xd7
    3532:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3534:	2100      	movs	r1, #0
    3536:	20d8      	movs	r0, #216	; 0xd8
    3538:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    353a:	2123      	movs	r1, #35	; 0x23
    353c:	20db      	movs	r0, #219	; 0xdb
    353e:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3540:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3544:	20dc      	movs	r0, #220	; 0xdc
    3546:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3548:	f642 314d 	movw	r1, #11085	; 0x2b4d
    354c:	20dd      	movs	r0, #221	; 0xdd
    354e:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    3550:	f643 615e 	movw	r1, #15966	; 0x3e5e
    3554:	20e0      	movs	r0, #224	; 0xe0
    3556:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    3558:	2149      	movs	r1, #73	; 0x49
    355a:	20d3      	movs	r0, #211	; 0xd3
    355c:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    355e:	2100      	movs	r1, #0
    3560:	20d8      	movs	r0, #216	; 0xd8
    3562:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3564:	2123      	movs	r1, #35	; 0x23
    3566:	20db      	movs	r0, #219	; 0xdb
    3568:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    356a:	f643 412b 	movw	r1, #15403	; 0x3c2b
    356e:	20dc      	movs	r0, #220	; 0xdc
    3570:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3572:	f642 314d 	movw	r1, #11085	; 0x2b4d
    3576:	20dd      	movs	r0, #221	; 0xdd
    3578:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    357a:	f240 2199 	movw	r1, #665	; 0x299
    357e:	20e6      	movs	r0, #230	; 0xe6
    3580:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    3582:	f44f 7154 	mov.w	r1, #848	; 0x350
    3586:	20e7      	movs	r0, #231	; 0xe7
    3588:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    358a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    358e:	20e8      	movs	r0, #232	; 0xe8
    3590:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3592:	21e1      	movs	r1, #225	; 0xe1
    3594:	20eb      	movs	r0, #235	; 0xeb
    3596:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    3598:	f24b 0119 	movw	r1, #45081	; 0xb019
    359c:	f44f 7080 	mov.w	r0, #256	; 0x100
    35a0:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    35a2:	f24b 0119 	movw	r1, #45081	; 0xb019
    35a6:	f44f 7081 	mov.w	r0, #258	; 0x102
    35aa:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    35ac:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    35b0:	f44f 70c0 	mov.w	r0, #384	; 0x180
    35b4:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    35b6:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    35ba:	f240 1081 	movw	r0, #385	; 0x181
    35be:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    35c0:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    35c4:	f44f 70c1 	mov.w	r0, #386	; 0x182
    35c8:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    35ca:	f64f 3112 	movw	r1, #64274	; 0xfb12
    35ce:	f240 1083 	movw	r0, #387	; 0x183
    35d2:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    35d4:	f64f 1112 	movw	r1, #63762	; 0xf912
    35d8:	f44f 70c2 	mov.w	r0, #388	; 0x184
    35dc:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    35de:	f64f 1103 	movw	r1, #63747	; 0xf903
    35e2:	f240 1085 	movw	r0, #389	; 0x185
    35e6:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    35e8:	f64f 0102 	movw	r1, #63490	; 0xf802
    35ec:	f44f 70c3 	mov.w	r0, #390	; 0x186
    35f0:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    35f2:	f24f 310f 	movw	r1, #62223	; 0xf30f
    35f6:	f240 1087 	movw	r0, #391	; 0x187
    35fa:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    35fc:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3600:	f44f 70c4 	mov.w	r0, #392	; 0x188
    3604:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    3606:	f24f 310f 	movw	r1, #62223	; 0xf30f
    360a:	f240 1089 	movw	r0, #393	; 0x189
    360e:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3610:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3614:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    3618:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    361a:	f24f 1101 	movw	r1, #61697	; 0xf101
    361e:	f240 108b 	movw	r0, #395	; 0x18b
    3622:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3624:	f24f 010a 	movw	r1, #61450	; 0xf00a
    3628:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    362c:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    362e:	f24f 214b 	movw	r1, #62027	; 0xf24b
    3632:	f240 108d 	movw	r0, #397	; 0x18d
    3636:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    3638:	f24f 2101 	movw	r1, #61953	; 0xf201
    363c:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    3640:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    3642:	f24f 2126 	movw	r1, #61990	; 0xf226
    3646:	f240 108f 	movw	r0, #399	; 0x18f
    364a:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    364c:	f24f 0121 	movw	r1, #61473	; 0xf021
    3650:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3654:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    3656:	f24f 0101 	movw	r1, #61441	; 0xf001
    365a:	f240 1091 	movw	r0, #401	; 0x191
    365e:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    3660:	f24f 4102 	movw	r1, #62466	; 0xf402
    3664:	f44f 70c9 	mov.w	r0, #402	; 0x192
    3668:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    366a:	f24f 0107 	movw	r1, #61447	; 0xf007
    366e:	f240 1093 	movw	r0, #403	; 0x193
    3672:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    3674:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3678:	f44f 70ca 	mov.w	r0, #404	; 0x194
    367c:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    367e:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3682:	f240 1095 	movw	r0, #405	; 0x195
    3686:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    3688:	f24f 2102 	movw	r1, #61954	; 0xf202
    368c:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3690:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3692:	f24f 0106 	movw	r1, #61446	; 0xf006
    3696:	f240 1097 	movw	r0, #407	; 0x197
    369a:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    369c:	f64e 4108 	movw	r1, #60424	; 0xec08
    36a0:	f44f 70cc 	mov.w	r0, #408	; 0x198
    36a4:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    36a6:	f64c 0101 	movw	r1, #51201	; 0xc801
    36aa:	f240 1099 	movw	r0, #409	; 0x199
    36ae:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    36b0:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    36b4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    36b8:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    36ba:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    36be:	f240 10a3 	movw	r0, #419	; 0x1a3
    36c2:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    36c4:	f64c 4102 	movw	r1, #52226	; 0xcc02
    36c8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    36cc:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    36ce:	f64c 4101 	movw	r1, #52225	; 0xcc01
    36d2:	f240 10a5 	movw	r0, #421	; 0x1a5
    36d6:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    36d8:	f64c 4102 	movw	r1, #52226	; 0xcc02
    36dc:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    36e0:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    36e2:	f64c 4101 	movw	r1, #52225	; 0xcc01
    36e6:	f240 10a7 	movw	r0, #423	; 0x1a7
    36ea:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    36ec:	f64c 4102 	movw	r1, #52226	; 0xcc02
    36f0:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    36f4:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    36f6:	f64c 0105 	movw	r1, #51205	; 0xc805
    36fa:	f240 10a9 	movw	r0, #425	; 0x1a9
    36fe:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3700:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3704:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    3708:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    370a:	2130      	movs	r1, #48	; 0x30
    370c:	f240 10ab 	movw	r0, #427	; 0x1ab
    3710:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3712:	f242 017b 	movw	r1, #8315	; 0x207b
    3716:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    371a:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    371c:	f242 0171 	movw	r1, #8305	; 0x2071
    3720:	f240 10ad 	movw	r0, #429	; 0x1ad
    3724:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    3726:	2171      	movs	r1, #113	; 0x71
    3728:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    372c:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    372e:	f241 017f 	movw	r1, #4223	; 0x107f
    3732:	f240 10af 	movw	r0, #431	; 0x1af
    3736:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    3738:	f241 0172 	movw	r1, #4210	; 0x1072
    373c:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    3740:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    3742:	f241 0174 	movw	r1, #4212	; 0x1074
    3746:	f240 10b1 	movw	r0, #433	; 0x1b1
    374a:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    374c:	2171      	movs	r1, #113	; 0x71
    374e:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    3752:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    3754:	2131      	movs	r1, #49	; 0x31
    3756:	f240 10b3 	movw	r0, #435	; 0x1b3
    375a:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    375c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3760:	e002      	b.n	3768 <RequiredUploads+0x340>
    3762:	bf00      	nop
    3764:	0000320d 	.word	0x0000320d
    3768:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    376c:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    376e:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3772:	f240 10b5 	movw	r0, #437	; 0x1b5
    3776:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    3778:	21b1      	movs	r1, #177	; 0xb1
    377a:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    377e:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    3780:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3784:	f240 10b7 	movw	r0, #439	; 0x1b7
    3788:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    378a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    378e:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3792:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3794:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3798:	f240 10b9 	movw	r0, #441	; 0x1b9
    379c:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    379e:	21b1      	movs	r1, #177	; 0xb1
    37a0:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    37a4:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    37a6:	2130      	movs	r1, #48	; 0x30
    37a8:	f240 10bb 	movw	r0, #443	; 0x1bb
    37ac:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    37ae:	2130      	movs	r1, #48	; 0x30
    37b0:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    37b4:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    37b6:	f242 117b 	movw	r1, #8571	; 0x217b
    37ba:	f240 10bd 	movw	r0, #445	; 0x1bd
    37be:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    37c0:	f242 0171 	movw	r1, #8305	; 0x2071
    37c4:	f44f 70df 	mov.w	r0, #446	; 0x1be
    37c8:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    37ca:	2171      	movs	r1, #113	; 0x71
    37cc:	f240 10bf 	movw	r0, #447	; 0x1bf
    37d0:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    37d2:	f241 017f 	movw	r1, #4223	; 0x107f
    37d6:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    37da:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    37dc:	f241 0172 	movw	r1, #4210	; 0x1072
    37e0:	f240 10c1 	movw	r0, #449	; 0x1c1
    37e4:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    37e6:	f241 0174 	movw	r1, #4212	; 0x1074
    37ea:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    37ee:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    37f0:	2171      	movs	r1, #113	; 0x71
    37f2:	f240 10c3 	movw	r0, #451	; 0x1c3
    37f6:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    37f8:	2131      	movs	r1, #49	; 0x31
    37fa:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    37fe:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3800:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3804:	f240 10c5 	movw	r0, #453	; 0x1c5
    3808:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    380a:	f242 01b1 	movw	r1, #8369	; 0x20b1
    380e:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3812:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3814:	21b1      	movs	r1, #177	; 0xb1
    3816:	f240 10c7 	movw	r0, #455	; 0x1c7
    381a:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    381c:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3820:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3824:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    3826:	f241 01b2 	movw	r1, #4274	; 0x10b2
    382a:	f240 10c9 	movw	r0, #457	; 0x1c9
    382e:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    3830:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3834:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    3838:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    383a:	21b1      	movs	r1, #177	; 0xb1
    383c:	f240 10cb 	movw	r0, #459	; 0x1cb
    3840:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    3842:	2130      	movs	r1, #48	; 0x30
    3844:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    3848:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    384a:	2130      	movs	r1, #48	; 0x30
    384c:	f240 10cd 	movw	r0, #461	; 0x1cd
    3850:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    3852:	f242 117b 	movw	r1, #8571	; 0x217b
    3856:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    385a:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    385c:	f242 0171 	movw	r1, #8305	; 0x2071
    3860:	f240 10cf 	movw	r0, #463	; 0x1cf
    3864:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    3866:	2171      	movs	r1, #113	; 0x71
    3868:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    386c:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    386e:	f241 0171 	movw	r1, #4209	; 0x1071
    3872:	f240 10d1 	movw	r0, #465	; 0x1d1
    3876:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    3878:	2171      	movs	r1, #113	; 0x71
    387a:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    387e:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    3880:	2131      	movs	r1, #49	; 0x31
    3882:	f240 10d3 	movw	r0, #467	; 0x1d3
    3886:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    3888:	f242 11bb 	movw	r1, #8635	; 0x21bb
    388c:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3890:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3892:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3896:	f240 10d5 	movw	r0, #469	; 0x1d5
    389a:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    389c:	21b1      	movs	r1, #177	; 0xb1
    389e:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    38a2:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    38a4:	f241 01b3 	movw	r1, #4275	; 0x10b3
    38a8:	f240 10d7 	movw	r0, #471	; 0x1d7
    38ac:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    38ae:	f241 01b1 	movw	r1, #4273	; 0x10b1
    38b2:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    38b6:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    38b8:	21b1      	movs	r1, #177	; 0xb1
    38ba:	f240 10d9 	movw	r0, #473	; 0x1d9
    38be:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    38c0:	213f      	movs	r1, #63	; 0x3f
    38c2:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    38c6:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    38c8:	2132      	movs	r1, #50	; 0x32
    38ca:	f240 10db 	movw	r0, #475	; 0x1db
    38ce:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    38d0:	2130      	movs	r1, #48	; 0x30
    38d2:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    38d6:	47a0      	blx	r4
    38d8:	bd10      	pop	{r4, pc}
    38da:	bf00      	nop

000038dc <SoftPowerUp>:
}

void SoftPowerUp() {
    38dc:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    38de:	2100      	movs	r1, #0
    38e0:	200a      	movs	r0, #10
    38e2:	4c0d      	ldr	r4, [pc, #52]	; (3918 <SoftPowerUp+0x3c>)
    38e4:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    38e6:	f247 010f 	movw	r1, #28687	; 0x700f
    38ea:	2020      	movs	r0, #32
    38ec:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    38ee:	2107      	movs	r1, #7
    38f0:	2028      	movs	r0, #40	; 0x28
    38f2:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    38f4:	f244 1113 	movw	r1, #16659	; 0x4113
    38f8:	202a      	movs	r0, #42	; 0x2a
    38fa:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    38fc:	2101      	movs	r1, #1
    38fe:	2030      	movs	r0, #48	; 0x30
    3900:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3902:	2101      	movs	r1, #1
    3904:	2040      	movs	r0, #64	; 0x40
    3906:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    3908:	f240 1127 	movw	r1, #295	; 0x127
    390c:	2048      	movs	r0, #72	; 0x48
    390e:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3910:	2100      	movs	r1, #0
    3912:	2070      	movs	r0, #112	; 0x70
    3914:	47a0      	blx	r4
    3916:	bd10      	pop	{r4, pc}
    3918:	0000320d 	.word	0x0000320d

0000391c <python480Init>:
{
    391c:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    391e:	4b06      	ldr	r3, [pc, #24]	; (3938 <python480Init+0x1c>)
    3920:	4798      	blx	r3
	delay_ms(10);
    3922:	200a      	movs	r0, #10
    3924:	4b05      	ldr	r3, [pc, #20]	; (393c <python480Init+0x20>)
    3926:	4798      	blx	r3
	EnableClockMngmnt2();
    3928:	4b05      	ldr	r3, [pc, #20]	; (3940 <python480Init+0x24>)
    392a:	4798      	blx	r3
	RequiredUploads();
    392c:	4b05      	ldr	r3, [pc, #20]	; (3944 <python480Init+0x28>)
    392e:	4798      	blx	r3
	SoftPowerUp();
    3930:	4b05      	ldr	r3, [pc, #20]	; (3948 <python480Init+0x2c>)
    3932:	4798      	blx	r3
    3934:	bd08      	pop	{r3, pc}
    3936:	bf00      	nop
    3938:	000033c5 	.word	0x000033c5
    393c:	00000dd5 	.word	0x00000dd5
    3940:	00003409 	.word	0x00003409
    3944:	00003429 	.word	0x00003429
    3948:	000038dd 	.word	0x000038dd

0000394c <getCurrentTimeMS>:
	return timeMS;
    394c:	4b01      	ldr	r3, [pc, #4]	; (3954 <getCurrentTimeMS+0x8>)
    394e:	6818      	ldr	r0, [r3, #0]
}
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	20000224 	.word	0x20000224

00003958 <getPropFromHeader>:
	return header32bit[headerPos];
    3958:	4b02      	ldr	r3, [pc, #8]	; (3964 <getPropFromHeader+0xc>)
    395a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    395e:	6840      	ldr	r0, [r0, #4]
    3960:	4770      	bx	lr
    3962:	bf00      	nop
    3964:	20000224 	.word	0x20000224

00003968 <setExcitationLED>:
	}
	*/
}

void setExcitationLED(uint32_t value, bool enable)
{
    3968:	b538      	push	{r3, r4, r5, lr}
    396a:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    396c:	2864      	cmp	r0, #100	; 0x64
    396e:	d900      	bls.n	3972 <setExcitationLED+0xa>
		value = 100;
    3970:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    3972:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    3976:	490b      	ldr	r1, [pc, #44]	; (39a4 <setExcitationLED+0x3c>)
    3978:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // value sets duty cycle out of 2^16. We aren't using CC1 so just send it 0
    397c:	4c0a      	ldr	r4, [pc, #40]	; (39a8 <setExcitationLED+0x40>)
    397e:	2200      	movs	r2, #0
    3980:	0949      	lsrs	r1, r1, #5
    3982:	4620      	mov	r0, r4
    3984:	4b09      	ldr	r3, [pc, #36]	; (39ac <setExcitationLED+0x44>)
    3986:	4798      	blx	r3
	pwm_enable(&PWM_0); //Only actually needs to be done once. Consider moving to init stuff at top of main()
    3988:	4620      	mov	r0, r4
    398a:	4b09      	ldr	r3, [pc, #36]	; (39b0 <setExcitationLED+0x48>)
    398c:	4798      	blx	r3
	if (level) {
    398e:	b925      	cbnz	r5, 399a <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3990:	2202      	movs	r2, #2
    3992:	4b08      	ldr	r3, [pc, #32]	; (39b4 <setExcitationLED+0x4c>)
    3994:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3998:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    399a:	2202      	movs	r2, #2
    399c:	4b05      	ldr	r3, [pc, #20]	; (39b4 <setExcitationLED+0x4c>)
    399e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    39a2:	bd38      	pop	{r3, r4, r5, pc}
    39a4:	51eb851f 	.word	0x51eb851f
    39a8:	20000698 	.word	0x20000698
    39ac:	00001169 	.word	0x00001169
    39b0:	0000112d 	.word	0x0000112d
    39b4:	41008000 	.word	0x41008000

000039b8 <setEWL>:
	
	gpio_set_pin_level(ENT_LED, enable);
}

void setEWL(uint32_t value)
{
    39b8:	b508      	push	{r3, lr}
	I2C_BB_write(EWL_I2C_ADDR,value);
    39ba:	b2c1      	uxtb	r1, r0
    39bc:	2023      	movs	r0, #35	; 0x23
    39be:	4b01      	ldr	r3, [pc, #4]	; (39c4 <setEWL+0xc>)
    39c0:	4798      	blx	r3
    39c2:	bd08      	pop	{r3, pc}
    39c4:	000030e9 	.word	0x000030e9

000039c8 <setStatusLED>:
    39c8:	b928      	cbnz	r0, 39d6 <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    39ca:	f44f 7200 	mov.w	r2, #512	; 0x200
    39ce:	4b05      	ldr	r3, [pc, #20]	; (39e4 <setStatusLED+0x1c>)
    39d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    39d4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    39d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    39da:	4b02      	ldr	r3, [pc, #8]	; (39e4 <setStatusLED+0x1c>)
    39dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	41008000 	.word	0x41008000

000039e8 <frameValid_cb>:
{
    39e8:	b570      	push	{r4, r5, r6, lr}
    39ea:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    39ec:	a801      	add	r0, sp, #4
    39ee:	4c12      	ldr	r4, [pc, #72]	; (3a38 <frameValid_cb+0x50>)
    39f0:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    39f2:	4d12      	ldr	r5, [pc, #72]	; (3a3c <frameValid_cb+0x54>)
    39f4:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    39f8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    39fc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3a00:	a801      	add	r0, sp, #4
    3a02:	4e0f      	ldr	r6, [pc, #60]	; (3a40 <frameValid_cb+0x58>)
    3a04:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    3a06:	4668      	mov	r0, sp
    3a08:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a0a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a0e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a12:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3a16:	405c      	eors	r4, r3
    3a18:	4014      	ands	r4, r2
    3a1a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3a1c:	4668      	mov	r0, sp
    3a1e:	47b0      	blx	r6
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    3a20:	f414 7f00 	tst.w	r4, #512	; 0x200
    3a24:	d104      	bne.n	3a30 <frameValid_cb+0x48>
		setStatusLED(1);
    3a26:	2001      	movs	r0, #1
    3a28:	4b06      	ldr	r3, [pc, #24]	; (3a44 <frameValid_cb+0x5c>)
    3a2a:	4798      	blx	r3
}
    3a2c:	b002      	add	sp, #8
    3a2e:	bd70      	pop	{r4, r5, r6, pc}
		setStatusLED(0);
    3a30:	2000      	movs	r0, #0
    3a32:	4b04      	ldr	r3, [pc, #16]	; (3a44 <frameValid_cb+0x5c>)
    3a34:	4798      	blx	r3
    3a36:	e7f9      	b.n	3a2c <frameValid_cb+0x44>
    3a38:	00000d41 	.word	0x00000d41
    3a3c:	41008000 	.word	0x41008000
    3a40:	00000d4f 	.word	0x00000d4f
    3a44:	000039c9 	.word	0x000039c9

00003a48 <startRecording>:
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void startRecording()
{
    3a48:	b538      	push	{r3, r4, r5, lr}
	writeFrameNum = 0;
    3a4a:	2400      	movs	r4, #0
    3a4c:	4b10      	ldr	r3, [pc, #64]	; (3a90 <startRecording+0x48>)
    3a4e:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    3a50:	4b10      	ldr	r3, [pc, #64]	; (3a94 <startRecording+0x4c>)
    3a52:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    3a54:	4b10      	ldr	r3, [pc, #64]	; (3a98 <startRecording+0x50>)
    3a56:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    3a58:	4b10      	ldr	r3, [pc, #64]	; (3a9c <startRecording+0x54>)
    3a5a:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    3a5c:	4b10      	ldr	r3, [pc, #64]	; (3aa0 <startRecording+0x58>)
    3a5e:	601c      	str	r4, [r3, #0]
	
	// This gets the next set of blocks ready to be written into
	sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK); 
    3a60:	4d10      	ldr	r5, [pc, #64]	; (3aa4 <startRecording+0x5c>)
    3a62:	6869      	ldr	r1, [r5, #4]
    3a64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3a68:	4620      	mov	r0, r4
    3a6a:	4b0f      	ldr	r3, [pc, #60]	; (3aa8 <startRecording+0x60>)
    3a6c:	4798      	blx	r3
	initBlocksRemaining = BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK;
    3a6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3a72:	4b0e      	ldr	r3, [pc, #56]	; (3aac <startRecording+0x64>)
    3a74:	601a      	str	r2, [r3, #0]
		
	startTimeMS = getCurrentTimeMS();
    3a76:	4b0e      	ldr	r3, [pc, #56]	; (3ab0 <startRecording+0x68>)
    3a78:	4798      	blx	r3
    3a7a:	4b0e      	ldr	r3, [pc, #56]	; (3ab4 <startRecording+0x6c>)
    3a7c:	6018      	str	r0, [r3, #0]
	
	deviceState &= !(DEVICE_STATE_IDLE);
    3a7e:	682b      	ldr	r3, [r5, #0]
    3a80:	602c      	str	r4, [r5, #0]
	deviceState &= !(DEVICE_STATE_START_RECORDING);
    3a82:	682b      	ldr	r3, [r5, #0]
    3a84:	602c      	str	r4, [r5, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3a86:	682b      	ldr	r3, [r5, #0]
    3a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3a8c:	602b      	str	r3, [r5, #0]
    3a8e:	bd38      	pop	{r3, r4, r5, pc}
    3a90:	20000bd8 	.word	0x20000bd8
    3a94:	20000bd4 	.word	0x20000bd4
    3a98:	20000b84 	.word	0x20000b84
    3a9c:	20000bd0 	.word	0x20000bd0
    3aa0:	20000b80 	.word	0x20000b80
    3aa4:	20000028 	.word	0x20000028
    3aa8:	00004069 	.word	0x00004069
    3aac:	20028be0 	.word	0x20028be0
    3ab0:	0000394d 	.word	0x0000394d
    3ab4:	20000bcc 	.word	0x20000bcc

00003ab8 <stopRecording>:
}

void stopRecording()
{
    3ab8:	b510      	push	{r4, lr}
	
	// TODO: Update currentBlock maybe to get ready for next recording??
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
    3aba:	4b12      	ldr	r3, [pc, #72]	; (3b04 <stopRecording+0x4c>)
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	b2db      	uxtb	r3, r3
    3ac0:	4c11      	ldr	r4, [pc, #68]	; (3b08 <stopRecording+0x50>)
    3ac2:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    3ac6:	4b11      	ldr	r3, [pc, #68]	; (3b0c <stopRecording+0x54>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	b2db      	uxtb	r3, r3
    3acc:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    3ad0:	2201      	movs	r2, #1
    3ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3ad6:	2000      	movs	r0, #0
    3ad8:	4b0d      	ldr	r3, [pc, #52]	; (3b10 <stopRecording+0x58>)
    3ada:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3adc:	2101      	movs	r1, #1
    3ade:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3ae2:	4b0c      	ldr	r3, [pc, #48]	; (3b14 <stopRecording+0x5c>)
    3ae4:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    3ae6:	2000      	movs	r0, #0
    3ae8:	4b0b      	ldr	r3, [pc, #44]	; (3b18 <stopRecording+0x60>)
    3aea:	4798      	blx	r3
	
	deviceState &= !(DEVICE_STATE_STOP_RECORDING);
    3aec:	4b0b      	ldr	r3, [pc, #44]	; (3b1c <stopRecording+0x64>)
    3aee:	681a      	ldr	r2, [r3, #0]
    3af0:	2200      	movs	r2, #0
    3af2:	601a      	str	r2, [r3, #0]
	deviceState &= !(DEVICE_STATE_RECORDING);
    3af4:	6819      	ldr	r1, [r3, #0]
    3af6:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_IDLE;
    3af8:	681a      	ldr	r2, [r3, #0]
    3afa:	f042 0202 	orr.w	r2, r2, #2
    3afe:	601a      	str	r2, [r3, #0]
    3b00:	bd10      	pop	{r4, pc}
    3b02:	bf00      	nop
    3b04:	20000bd4 	.word	0x20000bd4
    3b08:	20000224 	.word	0x20000224
    3b0c:	20000b84 	.word	0x20000b84
    3b10:	00004069 	.word	0x00004069
    3b14:	00004109 	.word	0x00004109
    3b18:	00004155 	.word	0x00004155
    3b1c:	20000028 	.word	0x20000028

00003b20 <recording>:
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    3b20:	4b5d      	ldr	r3, [pc, #372]	; (3c98 <recording+0x178>)
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	4a5d      	ldr	r2, [pc, #372]	; (3c9c <recording+0x17c>)
    3b26:	6812      	ldr	r2, [r2, #0]
    3b28:	4413      	add	r3, r2
    3b2a:	4a5d      	ldr	r2, [pc, #372]	; (3ca0 <recording+0x180>)
    3b2c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3b30:	4293      	cmp	r3, r2
    3b32:	f080 80b0 	bcs.w	3c96 <recording+0x176>
{
    3b36:	b510      	push	{r4, lr}
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    3b38:	4b57      	ldr	r3, [pc, #348]	; (3c98 <recording+0x178>)
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	4a57      	ldr	r2, [pc, #348]	; (3c9c <recording+0x17c>)
    3b3e:	6812      	ldr	r2, [r2, #0]
    3b40:	4413      	add	r3, r2
    3b42:	3304      	adds	r3, #4
    3b44:	4a56      	ldr	r2, [pc, #344]	; (3ca0 <recording+0x180>)
    3b46:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3b4a:	4293      	cmp	r3, r2
    3b4c:	d225      	bcs.n	3b9a <recording+0x7a>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
    3b4e:	4b52      	ldr	r3, [pc, #328]	; (3c98 <recording+0x178>)
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	4a52      	ldr	r2, [pc, #328]	; (3c9c <recording+0x17c>)
    3b54:	6811      	ldr	r1, [r2, #0]
    3b56:	440b      	add	r3, r1
    3b58:	f003 0303 	and.w	r3, r3, #3
    3b5c:	f1c3 0304 	rsb	r3, r3, #4
    3b60:	6811      	ldr	r1, [r2, #0]
    3b62:	440b      	add	r3, r1
    3b64:	6013      	str	r3, [r2, #0]
			writeBufferCount++;
			sd_mmc_wait_end_of_write_blocks(false);
			
		}
		
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    3b66:	4b4f      	ldr	r3, [pc, #316]	; (3ca4 <recording+0x184>)
    3b68:	4798      	blx	r3
    3b6a:	4b4f      	ldr	r3, [pc, #316]	; (3ca8 <recording+0x188>)
    3b6c:	681c      	ldr	r4, [r3, #0]
    3b6e:	1b04      	subs	r4, r0, r4
    3b70:	2007      	movs	r0, #7
    3b72:	4b4e      	ldr	r3, [pc, #312]	; (3cac <recording+0x18c>)
    3b74:	4798      	blx	r3
    3b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3b7a:	fb03 f300 	mul.w	r3, r3, r0
    3b7e:	429c      	cmp	r4, r3
    3b80:	bf34      	ite	cc
    3b82:	2400      	movcc	r4, #0
    3b84:	2401      	movcs	r4, #1
    3b86:	2800      	cmp	r0, #0
    3b88:	bf08      	it	eq
    3b8a:	2400      	moveq	r4, #0
    3b8c:	b124      	cbz	r4, 3b98 <recording+0x78>
			// Recording time has elapsed
			deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording			
    3b8e:	4a48      	ldr	r2, [pc, #288]	; (3cb0 <recording+0x190>)
    3b90:	6813      	ldr	r3, [r2, #0]
    3b92:	f043 0310 	orr.w	r3, r3, #16
    3b96:	6013      	str	r3, [r2, #0]
    3b98:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    3b9a:	4c3f      	ldr	r4, [pc, #252]	; (3c98 <recording+0x178>)
    3b9c:	6823      	ldr	r3, [r4, #0]
    3b9e:	493f      	ldr	r1, [pc, #252]	; (3c9c <recording+0x17c>)
    3ba0:	680a      	ldr	r2, [r1, #0]
    3ba2:	4413      	add	r3, r2
    3ba4:	f003 0303 	and.w	r3, r3, #3
    3ba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3bac:	0358      	lsls	r0, r3, #13
    3bae:	4b41      	ldr	r3, [pc, #260]	; (3cb4 <recording+0x194>)
    3bb0:	4418      	add	r0, r3
    3bb2:	4b41      	ldr	r3, [pc, #260]	; (3cb8 <recording+0x198>)
    3bb4:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3bb6:	6a03      	ldr	r3, [r0, #32]
    3bb8:	f203 2323 	addw	r3, r3, #547	; 0x223
    3bbc:	0a5b      	lsrs	r3, r3, #9
    3bbe:	4a3f      	ldr	r2, [pc, #252]	; (3cbc <recording+0x19c>)
    3bc0:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3bc2:	6823      	ldr	r3, [r4, #0]
    3bc4:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3bc6:	680b      	ldr	r3, [r1, #0]
    3bc8:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    3bca:	6812      	ldr	r2, [r2, #0]
    3bcc:	4b3c      	ldr	r3, [pc, #240]	; (3cc0 <recording+0x1a0>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	429a      	cmp	r2, r3
    3bd2:	d21d      	bcs.n	3c10 <recording+0xf0>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    3bd4:	4b39      	ldr	r3, [pc, #228]	; (3cbc <recording+0x19c>)
    3bd6:	6819      	ldr	r1, [r3, #0]
    3bd8:	b289      	uxth	r1, r1
    3bda:	4b3a      	ldr	r3, [pc, #232]	; (3cc4 <recording+0x1a4>)
    3bdc:	4798      	blx	r3
    3bde:	b120      	cbz	r0, 3bea <recording+0xca>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    3be0:	4a33      	ldr	r2, [pc, #204]	; (3cb0 <recording+0x190>)
    3be2:	6813      	ldr	r3, [r2, #0]
    3be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3be8:	6013      	str	r3, [r2, #0]
				initBlocksRemaining -= numBlocks;
    3bea:	4a34      	ldr	r2, [pc, #208]	; (3cbc <recording+0x19c>)
    3bec:	6810      	ldr	r0, [r2, #0]
    3bee:	4934      	ldr	r1, [pc, #208]	; (3cc0 <recording+0x1a0>)
    3bf0:	680b      	ldr	r3, [r1, #0]
    3bf2:	1a1b      	subs	r3, r3, r0
    3bf4:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    3bf6:	6813      	ldr	r3, [r2, #0]
    3bf8:	4a2d      	ldr	r2, [pc, #180]	; (3cb0 <recording+0x190>)
    3bfa:	6851      	ldr	r1, [r2, #4]
    3bfc:	440b      	add	r3, r1
    3bfe:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    3c00:	4a25      	ldr	r2, [pc, #148]	; (3c98 <recording+0x178>)
    3c02:	6813      	ldr	r3, [r2, #0]
    3c04:	3301      	adds	r3, #1
    3c06:	6013      	str	r3, [r2, #0]
			sd_mmc_wait_end_of_write_blocks(false);
    3c08:	2000      	movs	r0, #0
    3c0a:	4b2f      	ldr	r3, [pc, #188]	; (3cc8 <recording+0x1a8>)
    3c0c:	4798      	blx	r3
    3c0e:	e7aa      	b.n	3b66 <recording+0x46>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    3c10:	4b2b      	ldr	r3, [pc, #172]	; (3cc0 <recording+0x1a0>)
    3c12:	6819      	ldr	r1, [r3, #0]
    3c14:	b289      	uxth	r1, r1
    3c16:	4b2b      	ldr	r3, [pc, #172]	; (3cc4 <recording+0x1a4>)
    3c18:	4798      	blx	r3
    3c1a:	b120      	cbz	r0, 3c26 <recording+0x106>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;				
    3c1c:	4a24      	ldr	r2, [pc, #144]	; (3cb0 <recording+0x190>)
    3c1e:	6813      	ldr	r3, [r2, #0]
    3c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3c24:	6013      	str	r3, [r2, #0]
				sd_mmc_wait_end_of_write_blocks(false);
    3c26:	2000      	movs	r0, #0
    3c28:	4b27      	ldr	r3, [pc, #156]	; (3cc8 <recording+0x1a8>)
    3c2a:	4798      	blx	r3
				currentBlock += initBlocksRemaining;
    3c2c:	4b24      	ldr	r3, [pc, #144]	; (3cc0 <recording+0x1a0>)
    3c2e:	681a      	ldr	r2, [r3, #0]
    3c30:	4b1f      	ldr	r3, [pc, #124]	; (3cb0 <recording+0x190>)
    3c32:	6859      	ldr	r1, [r3, #4]
    3c34:	440a      	add	r2, r1
    3c36:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    3c38:	6859      	ldr	r1, [r3, #4]
    3c3a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3c3e:	2000      	movs	r0, #0
    3c40:	4b22      	ldr	r3, [pc, #136]	; (3ccc <recording+0x1ac>)
    3c42:	4798      	blx	r3
    3c44:	b120      	cbz	r0, 3c50 <recording+0x130>
					deviceState |= DEVICE_STATE_SDCARD_INIT_WRITE_ERROR;
    3c46:	4a1a      	ldr	r2, [pc, #104]	; (3cb0 <recording+0x190>)
    3c48:	6813      	ldr	r3, [r2, #0]
    3c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3c4e:	6013      	str	r3, [r2, #0]
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    3c50:	4b19      	ldr	r3, [pc, #100]	; (3cb8 <recording+0x198>)
    3c52:	681a      	ldr	r2, [r3, #0]
    3c54:	4b1a      	ldr	r3, [pc, #104]	; (3cc0 <recording+0x1a0>)
    3c56:	6818      	ldr	r0, [r3, #0]
    3c58:	4918      	ldr	r1, [pc, #96]	; (3cbc <recording+0x19c>)
    3c5a:	6809      	ldr	r1, [r1, #0]
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	1ac9      	subs	r1, r1, r3
    3c60:	b289      	uxth	r1, r1
    3c62:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    3c66:	4b17      	ldr	r3, [pc, #92]	; (3cc4 <recording+0x1a4>)
    3c68:	4798      	blx	r3
    3c6a:	b120      	cbz	r0, 3c76 <recording+0x156>
					deviceState |= DEVICE_STATE_SDCARD_WRITE_ERROR;
    3c6c:	4a10      	ldr	r2, [pc, #64]	; (3cb0 <recording+0x190>)
    3c6e:	6813      	ldr	r3, [r2, #0]
    3c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3c74:	6013      	str	r3, [r2, #0]
				currentBlock += numBlocks - initBlocksRemaining;
    3c76:	4911      	ldr	r1, [pc, #68]	; (3cbc <recording+0x19c>)
    3c78:	680b      	ldr	r3, [r1, #0]
    3c7a:	4a11      	ldr	r2, [pc, #68]	; (3cc0 <recording+0x1a0>)
    3c7c:	6810      	ldr	r0, [r2, #0]
    3c7e:	1a1b      	subs	r3, r3, r0
    3c80:	480b      	ldr	r0, [pc, #44]	; (3cb0 <recording+0x190>)
    3c82:	6844      	ldr	r4, [r0, #4]
    3c84:	4423      	add	r3, r4
    3c86:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    3c88:	6813      	ldr	r3, [r2, #0]
    3c8a:	6809      	ldr	r1, [r1, #0]
    3c8c:	1a5b      	subs	r3, r3, r1
    3c8e:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    3c92:	6013      	str	r3, [r2, #0]
    3c94:	e7b4      	b.n	3c00 <recording+0xe0>
    3c96:	4770      	bx	lr
    3c98:	20000bd4 	.word	0x20000bd4
    3c9c:	20000b84 	.word	0x20000b84
    3ca0:	20000224 	.word	0x20000224
    3ca4:	0000394d 	.word	0x0000394d
    3ca8:	20000bcc 	.word	0x20000bcc
    3cac:	00003959 	.word	0x00003959
    3cb0:	20000028 	.word	0x20000028
    3cb4:	20000bdc 	.word	0x20000bdc
    3cb8:	20000bc8 	.word	0x20000bc8
    3cbc:	20028bdc 	.word	0x20028bdc
    3cc0:	20028be0 	.word	0x20028be0
    3cc4:	00004109 	.word	0x00004109
    3cc8:	00004155 	.word	0x00004155
    3ccc:	00004069 	.word	0x00004069

00003cd0 <main>:
// Make sure lipo charge callback works: TODO
// Consider putting ADC value and deviceState in frame header: TODO

// ================================================================
int main(void)
{
    3cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    3cd4:	4b3a      	ldr	r3, [pc, #232]	; (3dc0 <main+0xf0>)
    3cd6:	4798      	blx	r3
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3cd8:	2202      	movs	r2, #2
    3cda:	4b3a      	ldr	r3, [pc, #232]	; (3dc4 <main+0xf4>)
    3cdc:	731a      	strb	r2, [r3, #12]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cde:	4e3a      	ldr	r6, [pc, #232]	; (3dc8 <main+0xf8>)
    3ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3ce4:	61b3      	str	r3, [r6, #24]
	// We need to change the PWM mode from MPWM to NPWM because we are using WO[0] as waveform output
	hri_tc_write_WAVE_reg(TC0, TC_WAVE_WAVEGEN_NPWM_Val);	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3ce6:	2100      	movs	r1, #0
    3ce8:	4838      	ldr	r0, [pc, #224]	; (3dcc <main+0xfc>)
    3cea:	4b39      	ldr	r3, [pc, #228]	; (3dd0 <main+0x100>)
    3cec:	4798      	blx	r3
	
	
	setStatusLED(1);	
    3cee:	2001      	movs	r0, #1
    3cf0:	4b38      	ldr	r3, [pc, #224]	; (3dd4 <main+0x104>)
    3cf2:	4798      	blx	r3
	
	
	
	I2C_BB_init();
    3cf4:	4b38      	ldr	r3, [pc, #224]	; (3dd8 <main+0x108>)
    3cf6:	4798      	blx	r3
	I2C_BB_write(EWL_I2C_ADDR,0x22);
    3cf8:	2122      	movs	r1, #34	; 0x22
    3cfa:	2023      	movs	r0, #35	; 0x23
    3cfc:	4b37      	ldr	r3, [pc, #220]	; (3ddc <main+0x10c>)
    3cfe:	4798      	blx	r3
	
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    3d00:	4c37      	ldr	r4, [pc, #220]	; (3de0 <main+0x110>)
    3d02:	2501      	movs	r5, #1
    3d04:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3d08:	4b36      	ldr	r3, [pc, #216]	; (3de4 <main+0x114>)
    3d0a:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    3d0e:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    3d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3d16:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3d1a:	4b33      	ldr	r3, [pc, #204]	; (3de8 <main+0x118>)
    3d1c:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3d20:	f884 5434 	strb.w	r5, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3d24:	4f31      	ldr	r7, [pc, #196]	; (3dec <main+0x11c>)
    3d26:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    3d2a:	4638      	mov	r0, r7
    3d2c:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3e34 <main+0x164>
    3d30:	47c0      	blx	r8
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3d32:	f204 4124 	addw	r1, r4, #1060	; 0x424
    3d36:	4638      	mov	r0, r7
    3d38:	47c0      	blx	r8
	timer_start(&TIMER_0);
    3d3a:	4638      	mov	r0, r7
    3d3c:	4b2c      	ldr	r3, [pc, #176]	; (3df0 <main+0x120>)
    3d3e:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    3d40:	492c      	ldr	r1, [pc, #176]	; (3df4 <main+0x124>)
    3d42:	2036      	movs	r0, #54	; 0x36
    3d44:	4c2c      	ldr	r4, [pc, #176]	; (3df8 <main+0x128>)
    3d46:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    3d48:	492c      	ldr	r1, [pc, #176]	; (3dfc <main+0x12c>)
    3d4a:	2037      	movs	r0, #55	; 0x37
    3d4c:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    3d4e:	492c      	ldr	r1, [pc, #176]	; (3e00 <main+0x130>)
    3d50:	202e      	movs	r0, #46	; 0x2e
    3d52:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    3d54:	492b      	ldr	r1, [pc, #172]	; (3e04 <main+0x134>)
    3d56:	2019      	movs	r0, #25
    3d58:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d5a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    3d5e:	f8c6 4094 	str.w	r4, [r6, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
    3d62:	2064      	movs	r0, #100	; 0x64
    3d64:	4b28      	ldr	r3, [pc, #160]	; (3e08 <main+0x138>)
    3d66:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d68:	f8c6 4098 	str.w	r4, [r6, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    3d6c:	2064      	movs	r0, #100	; 0x64
    3d6e:	4b27      	ldr	r3, [pc, #156]	; (3e0c <main+0x13c>)
    3d70:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    3d72:	2000      	movs	r0, #0
    3d74:	4b26      	ldr	r3, [pc, #152]	; (3e10 <main+0x140>)
    3d76:	4798      	blx	r3
    3d78:	4b26      	ldr	r3, [pc, #152]	; (3e14 <main+0x144>)
    3d7a:	8018      	strh	r0, [r3, #0]
	python480Init();
    3d7c:	4b26      	ldr	r3, [pc, #152]	; (3e18 <main+0x148>)
    3d7e:	4798      	blx	r3
	//sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
	//sd_mmc_wait_end_of_write_blocks(false);
	
	
	// Just a debugging point for turning on excitation LED
	setExcitationLED(5,1);
    3d80:	4629      	mov	r1, r5
    3d82:	2005      	movs	r0, #5
    3d84:	4b25      	ldr	r3, [pc, #148]	; (3e1c <main+0x14c>)
    3d86:	4798      	blx	r3
    3d88:	e008      	b.n	3d9c <main+0xcc>
	
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING) {
			startRecording();
    3d8a:	4b25      	ldr	r3, [pc, #148]	; (3e20 <main+0x150>)
    3d8c:	4798      	blx	r3
    3d8e:	e00a      	b.n	3da6 <main+0xd6>
		}
		if (deviceState & DEVICE_STATE_RECORDING) {
			recording();
    3d90:	4b24      	ldr	r3, [pc, #144]	; (3e24 <main+0x154>)
    3d92:	4798      	blx	r3
    3d94:	e00c      	b.n	3db0 <main+0xe0>
		}
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
			stopRecording();
		}
		
		setEWL(0x33);
    3d96:	2033      	movs	r0, #51	; 0x33
    3d98:	4b23      	ldr	r3, [pc, #140]	; (3e28 <main+0x158>)
    3d9a:	4798      	blx	r3
		if (deviceState & DEVICE_STATE_START_RECORDING) {
    3d9c:	4b23      	ldr	r3, [pc, #140]	; (3e2c <main+0x15c>)
    3d9e:	681b      	ldr	r3, [r3, #0]
    3da0:	f013 0f04 	tst.w	r3, #4
    3da4:	d1f1      	bne.n	3d8a <main+0xba>
		if (deviceState & DEVICE_STATE_RECORDING) {
    3da6:	4b21      	ldr	r3, [pc, #132]	; (3e2c <main+0x15c>)
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	f013 0f08 	tst.w	r3, #8
    3dae:	d1ef      	bne.n	3d90 <main+0xc0>
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    3db0:	4b1e      	ldr	r3, [pc, #120]	; (3e2c <main+0x15c>)
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	f013 0f10 	tst.w	r3, #16
    3db8:	d0ed      	beq.n	3d96 <main+0xc6>
			stopRecording();
    3dba:	4b1d      	ldr	r3, [pc, #116]	; (3e30 <main+0x160>)
    3dbc:	4798      	blx	r3
    3dbe:	e7ea      	b.n	3d96 <main+0xc6>
    3dc0:	000002d1 	.word	0x000002d1
    3dc4:	40003800 	.word	0x40003800
    3dc8:	41008000 	.word	0x41008000
    3dcc:	200006c8 	.word	0x200006c8
    3dd0:	00000c75 	.word	0x00000c75
    3dd4:	000039c9 	.word	0x000039c9
    3dd8:	0000308d 	.word	0x0000308d
    3ddc:	000030e9 	.word	0x000030e9
    3de0:	20000224 	.word	0x20000224
    3de4:	00003111 	.word	0x00003111
    3de8:	00003121 	.word	0x00003121
    3dec:	20000738 	.word	0x20000738
    3df0:	00001291 	.word	0x00001291
    3df4:	0000315d 	.word	0x0000315d
    3df8:	00000e6d 	.word	0x00000e6d
    3dfc:	000031b9 	.word	0x000031b9
    3e00:	000039e9 	.word	0x000039e9
    3e04:	0000318d 	.word	0x0000318d
    3e08:	00000dd5 	.word	0x00000dd5
    3e0c:	00000db5 	.word	0x00000db5
    3e10:	000032dd 	.word	0x000032dd
    3e14:	20000b78 	.word	0x20000b78
    3e18:	0000391d 	.word	0x0000391d
    3e1c:	00003969 	.word	0x00003969
    3e20:	00003a49 	.word	0x00003a49
    3e24:	00003b21 	.word	0x00003b21
    3e28:	000039b9 	.word	0x000039b9
    3e2c:	20000028 	.word	0x20000028
    3e30:	00003ab9 	.word	0x00003ab9
    3e34:	000012cd 	.word	0x000012cd

00003e38 <sd_mmc_configure_slot>:
    3e38:	b510      	push	{r4, lr}
    3e3a:	b082      	sub	sp, #8
    3e3c:	4807      	ldr	r0, [pc, #28]	; (3e5c <sd_mmc_configure_slot+0x24>)
    3e3e:	6802      	ldr	r2, [r0, #0]
    3e40:	7f94      	ldrb	r4, [r2, #30]
    3e42:	7b53      	ldrb	r3, [r2, #13]
    3e44:	6812      	ldr	r2, [r2, #0]
    3e46:	7901      	ldrb	r1, [r0, #4]
    3e48:	6880      	ldr	r0, [r0, #8]
    3e4a:	3400      	adds	r4, #0
    3e4c:	bf18      	it	ne
    3e4e:	2401      	movne	r4, #1
    3e50:	9400      	str	r4, [sp, #0]
    3e52:	4c03      	ldr	r4, [pc, #12]	; (3e60 <sd_mmc_configure_slot+0x28>)
    3e54:	47a0      	blx	r4
    3e56:	b002      	add	sp, #8
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	bf00      	nop
    3e5c:	2000065c 	.word	0x2000065c
    3e60:	00000f71 	.word	0x00000f71

00003e64 <sd_mmc_select_slot>:
    3e64:	b108      	cbz	r0, 3e6a <sd_mmc_select_slot+0x6>
    3e66:	2004      	movs	r0, #4
    3e68:	4770      	bx	lr
    3e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e6c:	b083      	sub	sp, #12
    3e6e:	4604      	mov	r4, r0
    3e70:	4b45      	ldr	r3, [pc, #276]	; (3f88 <sd_mmc_select_slot+0x124>)
    3e72:	68db      	ldr	r3, [r3, #12]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d050      	beq.n	3f1a <sd_mmc_select_slot+0xb6>
    3e78:	0087      	lsls	r7, r0, #2
    3e7a:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3e7e:	f1b5 3fff 	cmp.w	r5, #4294967295
    3e82:	d04a      	beq.n	3f1a <sd_mmc_select_slot+0xb6>
    3e84:	b2ed      	uxtb	r5, r5
    3e86:	096e      	lsrs	r6, r5, #5
    3e88:	a801      	add	r0, sp, #4
    3e8a:	4b40      	ldr	r3, [pc, #256]	; (3f8c <sd_mmc_select_slot+0x128>)
    3e8c:	4798      	blx	r3
    3e8e:	4940      	ldr	r1, [pc, #256]	; (3f90 <sd_mmc_select_slot+0x12c>)
    3e90:	01f3      	lsls	r3, r6, #7
    3e92:	18ca      	adds	r2, r1, r3
    3e94:	58c9      	ldr	r1, [r1, r3]
    3e96:	6a13      	ldr	r3, [r2, #32]
    3e98:	6916      	ldr	r6, [r2, #16]
    3e9a:	405e      	eors	r6, r3
    3e9c:	400e      	ands	r6, r1
    3e9e:	405e      	eors	r6, r3
    3ea0:	a801      	add	r0, sp, #4
    3ea2:	4b3c      	ldr	r3, [pc, #240]	; (3f94 <sd_mmc_select_slot+0x130>)
    3ea4:	4798      	blx	r3
    3ea6:	f005 051f 	and.w	r5, r5, #31
    3eaa:	2301      	movs	r3, #1
    3eac:	fa03 f505 	lsl.w	r5, r3, r5
    3eb0:	4235      	tst	r5, r6
    3eb2:	bf14      	ite	ne
    3eb4:	461a      	movne	r2, r3
    3eb6:	2200      	moveq	r2, #0
    3eb8:	4b33      	ldr	r3, [pc, #204]	; (3f88 <sd_mmc_select_slot+0x124>)
    3eba:	68db      	ldr	r3, [r3, #12]
    3ebc:	441f      	add	r7, r3
    3ebe:	887b      	ldrh	r3, [r7, #2]
    3ec0:	429a      	cmp	r2, r3
    3ec2:	d006      	beq.n	3ed2 <sd_mmc_select_slot+0x6e>
    3ec4:	4b30      	ldr	r3, [pc, #192]	; (3f88 <sd_mmc_select_slot+0x124>)
    3ec6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3eca:	2304      	movs	r3, #4
    3ecc:	76a3      	strb	r3, [r4, #26]
    3ece:	2002      	movs	r0, #2
    3ed0:	e047      	b.n	3f62 <sd_mmc_select_slot+0xfe>
    3ed2:	4b2d      	ldr	r3, [pc, #180]	; (3f88 <sd_mmc_select_slot+0x124>)
    3ed4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3ed8:	7e9b      	ldrb	r3, [r3, #26]
    3eda:	2b04      	cmp	r3, #4
    3edc:	d009      	beq.n	3ef2 <sd_mmc_select_slot+0x8e>
    3ede:	2b01      	cmp	r3, #1
    3ee0:	d00e      	beq.n	3f00 <sd_mmc_select_slot+0x9c>
    3ee2:	4b29      	ldr	r3, [pc, #164]	; (3f88 <sd_mmc_select_slot+0x124>)
    3ee4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3ee8:	7e9b      	ldrb	r3, [r3, #26]
    3eea:	2b03      	cmp	r3, #3
    3eec:	d11d      	bne.n	3f2a <sd_mmc_select_slot+0xc6>
    3eee:	2003      	movs	r0, #3
    3ef0:	e037      	b.n	3f62 <sd_mmc_select_slot+0xfe>
    3ef2:	4b25      	ldr	r3, [pc, #148]	; (3f88 <sd_mmc_select_slot+0x124>)
    3ef4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3ef8:	2301      	movs	r3, #1
    3efa:	76a3      	strb	r3, [r4, #26]
    3efc:	2002      	movs	r0, #2
    3efe:	e030      	b.n	3f62 <sd_mmc_select_slot+0xfe>
    3f00:	4b21      	ldr	r3, [pc, #132]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f02:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f06:	2202      	movs	r2, #2
    3f08:	769a      	strb	r2, [r3, #26]
    3f0a:	4a23      	ldr	r2, [pc, #140]	; (3f98 <sd_mmc_select_slot+0x134>)
    3f0c:	611a      	str	r2, [r3, #16]
    3f0e:	2201      	movs	r2, #1
    3f10:	775a      	strb	r2, [r3, #29]
    3f12:	2200      	movs	r2, #0
    3f14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f18:	e7e3      	b.n	3ee2 <sd_mmc_select_slot+0x7e>
    3f1a:	4b1b      	ldr	r3, [pc, #108]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f1c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f20:	7e9b      	ldrb	r3, [r3, #26]
    3f22:	3b03      	subs	r3, #3
    3f24:	b2db      	uxtb	r3, r3
    3f26:	2b01      	cmp	r3, #1
    3f28:	d91d      	bls.n	3f66 <sd_mmc_select_slot+0x102>
    3f2a:	4b17      	ldr	r3, [pc, #92]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f2c:	791b      	ldrb	r3, [r3, #4]
    3f2e:	429c      	cmp	r4, r3
    3f30:	d026      	beq.n	3f80 <sd_mmc_select_slot+0x11c>
    3f32:	4b15      	ldr	r3, [pc, #84]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f34:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3f36:	bb2b      	cbnz	r3, 3f84 <sd_mmc_select_slot+0x120>
    3f38:	2001      	movs	r0, #1
    3f3a:	f240 422c 	movw	r2, #1068	; 0x42c
    3f3e:	4917      	ldr	r1, [pc, #92]	; (3f9c <sd_mmc_select_slot+0x138>)
    3f40:	4b17      	ldr	r3, [pc, #92]	; (3fa0 <sd_mmc_select_slot+0x13c>)
    3f42:	4798      	blx	r3
    3f44:	4d10      	ldr	r5, [pc, #64]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f46:	712c      	strb	r4, [r5, #4]
    3f48:	f105 0310 	add.w	r3, r5, #16
    3f4c:	0164      	lsls	r4, r4, #5
    3f4e:	4423      	add	r3, r4
    3f50:	602b      	str	r3, [r5, #0]
    3f52:	4b14      	ldr	r3, [pc, #80]	; (3fa4 <sd_mmc_select_slot+0x140>)
    3f54:	4798      	blx	r3
    3f56:	442c      	add	r4, r5
    3f58:	7ea0      	ldrb	r0, [r4, #26]
    3f5a:	2802      	cmp	r0, #2
    3f5c:	bf14      	ite	ne
    3f5e:	2000      	movne	r0, #0
    3f60:	2001      	moveq	r0, #1
    3f62:	b003      	add	sp, #12
    3f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f66:	4b08      	ldr	r3, [pc, #32]	; (3f88 <sd_mmc_select_slot+0x124>)
    3f68:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f6c:	2202      	movs	r2, #2
    3f6e:	769a      	strb	r2, [r3, #26]
    3f70:	4a09      	ldr	r2, [pc, #36]	; (3f98 <sd_mmc_select_slot+0x134>)
    3f72:	611a      	str	r2, [r3, #16]
    3f74:	2201      	movs	r2, #1
    3f76:	775a      	strb	r2, [r3, #29]
    3f78:	2200      	movs	r2, #0
    3f7a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f7e:	e7d4      	b.n	3f2a <sd_mmc_select_slot+0xc6>
    3f80:	2001      	movs	r0, #1
    3f82:	e7da      	b.n	3f3a <sd_mmc_select_slot+0xd6>
    3f84:	2000      	movs	r0, #0
    3f86:	e7d8      	b.n	3f3a <sd_mmc_select_slot+0xd6>
    3f88:	2000065c 	.word	0x2000065c
    3f8c:	00000d41 	.word	0x00000d41
    3f90:	41008000 	.word	0x41008000
    3f94:	00000d4f 	.word	0x00000d4f
    3f98:	00061a80 	.word	0x00061a80
    3f9c:	00004850 	.word	0x00004850
    3fa0:	00001561 	.word	0x00001561
    3fa4:	00003e39 	.word	0x00003e39

00003fa8 <sd_mmc_deselect_slot>:
    3fa8:	b508      	push	{r3, lr}
    3faa:	4b04      	ldr	r3, [pc, #16]	; (3fbc <sd_mmc_deselect_slot+0x14>)
    3fac:	7919      	ldrb	r1, [r3, #4]
    3fae:	b101      	cbz	r1, 3fb2 <sd_mmc_deselect_slot+0xa>
    3fb0:	bd08      	pop	{r3, pc}
    3fb2:	6898      	ldr	r0, [r3, #8]
    3fb4:	4b02      	ldr	r3, [pc, #8]	; (3fc0 <sd_mmc_deselect_slot+0x18>)
    3fb6:	4798      	blx	r3
    3fb8:	e7fa      	b.n	3fb0 <sd_mmc_deselect_slot+0x8>
    3fba:	bf00      	nop
    3fbc:	2000065c 	.word	0x2000065c
    3fc0:	00000fad 	.word	0x00000fad

00003fc4 <sd_mmc_init>:
    3fc4:	b430      	push	{r4, r5}
    3fc6:	2300      	movs	r3, #0
    3fc8:	b13b      	cbz	r3, 3fda <sd_mmc_init+0x16>
    3fca:	4b08      	ldr	r3, [pc, #32]	; (3fec <sd_mmc_init+0x28>)
    3fcc:	24ff      	movs	r4, #255	; 0xff
    3fce:	711c      	strb	r4, [r3, #4]
    3fd0:	6098      	str	r0, [r3, #8]
    3fd2:	60d9      	str	r1, [r3, #12]
    3fd4:	635a      	str	r2, [r3, #52]	; 0x34
    3fd6:	bc30      	pop	{r4, r5}
    3fd8:	4770      	bx	lr
    3fda:	4c04      	ldr	r4, [pc, #16]	; (3fec <sd_mmc_init+0x28>)
    3fdc:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    3fe0:	2504      	movs	r5, #4
    3fe2:	76a5      	strb	r5, [r4, #26]
    3fe4:	3301      	adds	r3, #1
    3fe6:	b2db      	uxtb	r3, r3
    3fe8:	e7ee      	b.n	3fc8 <sd_mmc_init+0x4>
    3fea:	bf00      	nop
    3fec:	2000065c 	.word	0x2000065c

00003ff0 <sd_mmc_is_write_protected>:
    3ff0:	4b19      	ldr	r3, [pc, #100]	; (4058 <sd_mmc_is_write_protected+0x68>)
    3ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3ff4:	b35b      	cbz	r3, 404e <sd_mmc_is_write_protected+0x5e>
    3ff6:	b570      	push	{r4, r5, r6, lr}
    3ff8:	b082      	sub	sp, #8
    3ffa:	0085      	lsls	r5, r0, #2
    3ffc:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4000:	f1b3 3fff 	cmp.w	r3, #4294967295
    4004:	d025      	beq.n	4052 <sd_mmc_is_write_protected+0x62>
    4006:	b2de      	uxtb	r6, r3
    4008:	0974      	lsrs	r4, r6, #5
    400a:	a801      	add	r0, sp, #4
    400c:	4b13      	ldr	r3, [pc, #76]	; (405c <sd_mmc_is_write_protected+0x6c>)
    400e:	4798      	blx	r3
    4010:	4913      	ldr	r1, [pc, #76]	; (4060 <sd_mmc_is_write_protected+0x70>)
    4012:	01e3      	lsls	r3, r4, #7
    4014:	18ca      	adds	r2, r1, r3
    4016:	58c9      	ldr	r1, [r1, r3]
    4018:	6a13      	ldr	r3, [r2, #32]
    401a:	6914      	ldr	r4, [r2, #16]
    401c:	405c      	eors	r4, r3
    401e:	400c      	ands	r4, r1
    4020:	405c      	eors	r4, r3
    4022:	a801      	add	r0, sp, #4
    4024:	4b0f      	ldr	r3, [pc, #60]	; (4064 <sd_mmc_is_write_protected+0x74>)
    4026:	4798      	blx	r3
    4028:	f006 031f 	and.w	r3, r6, #31
    402c:	2201      	movs	r2, #1
    402e:	fa02 f303 	lsl.w	r3, r2, r3
    4032:	4223      	tst	r3, r4
    4034:	bf08      	it	eq
    4036:	2200      	moveq	r2, #0
    4038:	4b07      	ldr	r3, [pc, #28]	; (4058 <sd_mmc_is_write_protected+0x68>)
    403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    403c:	441d      	add	r5, r3
    403e:	886b      	ldrh	r3, [r5, #2]
    4040:	429a      	cmp	r2, r3
    4042:	d002      	beq.n	404a <sd_mmc_is_write_protected+0x5a>
    4044:	2000      	movs	r0, #0
    4046:	b002      	add	sp, #8
    4048:	bd70      	pop	{r4, r5, r6, pc}
    404a:	2001      	movs	r0, #1
    404c:	e7fb      	b.n	4046 <sd_mmc_is_write_protected+0x56>
    404e:	2000      	movs	r0, #0
    4050:	4770      	bx	lr
    4052:	2000      	movs	r0, #0
    4054:	e7f7      	b.n	4046 <sd_mmc_is_write_protected+0x56>
    4056:	bf00      	nop
    4058:	2000065c 	.word	0x2000065c
    405c:	00000d41 	.word	0x00000d41
    4060:	41008000 	.word	0x41008000
    4064:	00000d4f 	.word	0x00000d4f

00004068 <sd_mmc_init_write_blocks>:
    4068:	b5f0      	push	{r4, r5, r6, r7, lr}
    406a:	b083      	sub	sp, #12
    406c:	4607      	mov	r7, r0
    406e:	460e      	mov	r6, r1
    4070:	4615      	mov	r5, r2
    4072:	4b1c      	ldr	r3, [pc, #112]	; (40e4 <sd_mmc_init_write_blocks+0x7c>)
    4074:	4798      	blx	r3
    4076:	4604      	mov	r4, r0
    4078:	b110      	cbz	r0, 4080 <sd_mmc_init_write_blocks+0x18>
    407a:	4620      	mov	r0, r4
    407c:	b003      	add	sp, #12
    407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4080:	4638      	mov	r0, r7
    4082:	4b19      	ldr	r3, [pc, #100]	; (40e8 <sd_mmc_init_write_blocks+0x80>)
    4084:	4798      	blx	r3
    4086:	b9c0      	cbnz	r0, 40ba <sd_mmc_init_write_blocks+0x52>
    4088:	2d01      	cmp	r5, #1
    408a:	d91a      	bls.n	40c2 <sd_mmc_init_write_blocks+0x5a>
    408c:	4917      	ldr	r1, [pc, #92]	; (40ec <sd_mmc_init_write_blocks+0x84>)
    408e:	4b18      	ldr	r3, [pc, #96]	; (40f0 <sd_mmc_init_write_blocks+0x88>)
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	7adb      	ldrb	r3, [r3, #11]
    4094:	f013 0f08 	tst.w	r3, #8
    4098:	d100      	bne.n	409c <sd_mmc_init_write_blocks+0x34>
    409a:	0276      	lsls	r6, r6, #9
    409c:	4b14      	ldr	r3, [pc, #80]	; (40f0 <sd_mmc_init_write_blocks+0x88>)
    409e:	6898      	ldr	r0, [r3, #8]
    40a0:	2301      	movs	r3, #1
    40a2:	9301      	str	r3, [sp, #4]
    40a4:	9500      	str	r5, [sp, #0]
    40a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    40aa:	4632      	mov	r2, r6
    40ac:	4e11      	ldr	r6, [pc, #68]	; (40f4 <sd_mmc_init_write_blocks+0x8c>)
    40ae:	47b0      	blx	r6
    40b0:	b948      	cbnz	r0, 40c6 <sd_mmc_init_write_blocks+0x5e>
    40b2:	4b11      	ldr	r3, [pc, #68]	; (40f8 <sd_mmc_init_write_blocks+0x90>)
    40b4:	4798      	blx	r3
    40b6:	2405      	movs	r4, #5
    40b8:	e7df      	b.n	407a <sd_mmc_init_write_blocks+0x12>
    40ba:	4b0f      	ldr	r3, [pc, #60]	; (40f8 <sd_mmc_init_write_blocks+0x90>)
    40bc:	4798      	blx	r3
    40be:	2407      	movs	r4, #7
    40c0:	e7db      	b.n	407a <sd_mmc_init_write_blocks+0x12>
    40c2:	490e      	ldr	r1, [pc, #56]	; (40fc <sd_mmc_init_write_blocks+0x94>)
    40c4:	e7e3      	b.n	408e <sd_mmc_init_write_blocks+0x26>
    40c6:	4b0a      	ldr	r3, [pc, #40]	; (40f0 <sd_mmc_init_write_blocks+0x88>)
    40c8:	6898      	ldr	r0, [r3, #8]
    40ca:	4b0d      	ldr	r3, [pc, #52]	; (4100 <sd_mmc_init_write_blocks+0x98>)
    40cc:	4798      	blx	r3
    40ce:	4b0d      	ldr	r3, [pc, #52]	; (4104 <sd_mmc_init_write_blocks+0x9c>)
    40d0:	4003      	ands	r3, r0
    40d2:	b91b      	cbnz	r3, 40dc <sd_mmc_init_write_blocks+0x74>
    40d4:	4b06      	ldr	r3, [pc, #24]	; (40f0 <sd_mmc_init_write_blocks+0x88>)
    40d6:	861d      	strh	r5, [r3, #48]	; 0x30
    40d8:	871d      	strh	r5, [r3, #56]	; 0x38
    40da:	e7ce      	b.n	407a <sd_mmc_init_write_blocks+0x12>
    40dc:	4b06      	ldr	r3, [pc, #24]	; (40f8 <sd_mmc_init_write_blocks+0x90>)
    40de:	4798      	blx	r3
    40e0:	2405      	movs	r4, #5
    40e2:	e7ca      	b.n	407a <sd_mmc_init_write_blocks+0x12>
    40e4:	00003e65 	.word	0x00003e65
    40e8:	00003ff1 	.word	0x00003ff1
    40ec:	00109119 	.word	0x00109119
    40f0:	2000065c 	.word	0x2000065c
    40f4:	00001031 	.word	0x00001031
    40f8:	00003fa9 	.word	0x00003fa9
    40fc:	00089118 	.word	0x00089118
    4100:	00001009 	.word	0x00001009
    4104:	e4580000 	.word	0xe4580000

00004108 <sd_mmc_start_write_blocks>:
    4108:	b570      	push	{r4, r5, r6, lr}
    410a:	4606      	mov	r6, r0
    410c:	460c      	mov	r4, r1
    410e:	4d0d      	ldr	r5, [pc, #52]	; (4144 <sd_mmc_start_write_blocks+0x3c>)
    4110:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4112:	f240 52fa 	movw	r2, #1530	; 0x5fa
    4116:	490c      	ldr	r1, [pc, #48]	; (4148 <sd_mmc_start_write_blocks+0x40>)
    4118:	42a0      	cmp	r0, r4
    411a:	bf34      	ite	cc
    411c:	2000      	movcc	r0, #0
    411e:	2001      	movcs	r0, #1
    4120:	4b0a      	ldr	r3, [pc, #40]	; (414c <sd_mmc_start_write_blocks+0x44>)
    4122:	4798      	blx	r3
    4124:	4622      	mov	r2, r4
    4126:	4631      	mov	r1, r6
    4128:	68a8      	ldr	r0, [r5, #8]
    412a:	4b09      	ldr	r3, [pc, #36]	; (4150 <sd_mmc_start_write_blocks+0x48>)
    412c:	4798      	blx	r3
    412e:	b918      	cbnz	r0, 4138 <sd_mmc_start_write_blocks+0x30>
    4130:	2200      	movs	r2, #0
    4132:	862a      	strh	r2, [r5, #48]	; 0x30
    4134:	2005      	movs	r0, #5
    4136:	bd70      	pop	{r4, r5, r6, pc}
    4138:	4a02      	ldr	r2, [pc, #8]	; (4144 <sd_mmc_start_write_blocks+0x3c>)
    413a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    413c:	1b1c      	subs	r4, r3, r4
    413e:	8614      	strh	r4, [r2, #48]	; 0x30
    4140:	2000      	movs	r0, #0
    4142:	bd70      	pop	{r4, r5, r6, pc}
    4144:	2000065c 	.word	0x2000065c
    4148:	00004850 	.word	0x00004850
    414c:	00001561 	.word	0x00001561
    4150:	00001075 	.word	0x00001075

00004154 <sd_mmc_wait_end_of_write_blocks>:
    4154:	b510      	push	{r4, lr}
    4156:	4604      	mov	r4, r0
    4158:	4b14      	ldr	r3, [pc, #80]	; (41ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    415a:	6898      	ldr	r0, [r3, #8]
    415c:	4b14      	ldr	r3, [pc, #80]	; (41b0 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    415e:	4798      	blx	r3
    4160:	b908      	cbnz	r0, 4166 <sd_mmc_wait_end_of_write_blocks+0x12>
    4162:	2005      	movs	r0, #5
    4164:	bd10      	pop	{r4, pc}
    4166:	b194      	cbz	r4, 418e <sd_mmc_wait_end_of_write_blocks+0x3a>
    4168:	2200      	movs	r2, #0
    416a:	4b10      	ldr	r3, [pc, #64]	; (41ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    416c:	861a      	strh	r2, [r3, #48]	; 0x30
    416e:	4b0f      	ldr	r3, [pc, #60]	; (41ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    4170:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4172:	2b01      	cmp	r3, #1
    4174:	d011      	beq.n	419a <sd_mmc_wait_end_of_write_blocks+0x46>
    4176:	2200      	movs	r2, #0
    4178:	f243 110c 	movw	r1, #12556	; 0x310c
    417c:	4b0b      	ldr	r3, [pc, #44]	; (41ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    417e:	6898      	ldr	r0, [r3, #8]
    4180:	4b0c      	ldr	r3, [pc, #48]	; (41b4 <sd_mmc_wait_end_of_write_blocks+0x60>)
    4182:	4798      	blx	r3
    4184:	b968      	cbnz	r0, 41a2 <sd_mmc_wait_end_of_write_blocks+0x4e>
    4186:	4b0c      	ldr	r3, [pc, #48]	; (41b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4188:	4798      	blx	r3
    418a:	2005      	movs	r0, #5
    418c:	bd10      	pop	{r4, pc}
    418e:	4b07      	ldr	r3, [pc, #28]	; (41ac <sd_mmc_wait_end_of_write_blocks+0x58>)
    4190:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4192:	2b00      	cmp	r3, #0
    4194:	d0eb      	beq.n	416e <sd_mmc_wait_end_of_write_blocks+0x1a>
    4196:	2000      	movs	r0, #0
    4198:	bd10      	pop	{r4, pc}
    419a:	4b07      	ldr	r3, [pc, #28]	; (41b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    419c:	4798      	blx	r3
    419e:	2000      	movs	r0, #0
    41a0:	bd10      	pop	{r4, pc}
    41a2:	4b05      	ldr	r3, [pc, #20]	; (41b8 <sd_mmc_wait_end_of_write_blocks+0x64>)
    41a4:	4798      	blx	r3
    41a6:	2000      	movs	r0, #0
    41a8:	bd10      	pop	{r4, pc}
    41aa:	bf00      	nop
    41ac:	2000065c 	.word	0x2000065c
    41b0:	000010ad 	.word	0x000010ad
    41b4:	00000fd9 	.word	0x00000fd9
    41b8:	00003fa9 	.word	0x00003fa9

000041bc <sd_mmc_stack_init>:
    41bc:	b508      	push	{r3, lr}
    41be:	4903      	ldr	r1, [pc, #12]	; (41cc <sd_mmc_stack_init+0x10>)
    41c0:	460a      	mov	r2, r1
    41c2:	3104      	adds	r1, #4
    41c4:	4802      	ldr	r0, [pc, #8]	; (41d0 <sd_mmc_stack_init+0x14>)
    41c6:	4b03      	ldr	r3, [pc, #12]	; (41d4 <sd_mmc_stack_init+0x18>)
    41c8:	4798      	blx	r3
    41ca:	bd08      	pop	{r3, pc}
    41cc:	20000030 	.word	0x20000030
    41d0:	20000720 	.word	0x20000720
    41d4:	00003fc5 	.word	0x00003fc5

000041d8 <__aeabi_uldivmod>:
    41d8:	b953      	cbnz	r3, 41f0 <__aeabi_uldivmod+0x18>
    41da:	b94a      	cbnz	r2, 41f0 <__aeabi_uldivmod+0x18>
    41dc:	2900      	cmp	r1, #0
    41de:	bf08      	it	eq
    41e0:	2800      	cmpeq	r0, #0
    41e2:	bf1c      	itt	ne
    41e4:	f04f 31ff 	movne.w	r1, #4294967295
    41e8:	f04f 30ff 	movne.w	r0, #4294967295
    41ec:	f000 b97a 	b.w	44e4 <__aeabi_idiv0>
    41f0:	f1ad 0c08 	sub.w	ip, sp, #8
    41f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    41f8:	f000 f806 	bl	4208 <__udivmoddi4>
    41fc:	f8dd e004 	ldr.w	lr, [sp, #4]
    4200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4204:	b004      	add	sp, #16
    4206:	4770      	bx	lr

00004208 <__udivmoddi4>:
    4208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    420c:	468c      	mov	ip, r1
    420e:	460d      	mov	r5, r1
    4210:	4604      	mov	r4, r0
    4212:	9e08      	ldr	r6, [sp, #32]
    4214:	2b00      	cmp	r3, #0
    4216:	d151      	bne.n	42bc <__udivmoddi4+0xb4>
    4218:	428a      	cmp	r2, r1
    421a:	4617      	mov	r7, r2
    421c:	d96d      	bls.n	42fa <__udivmoddi4+0xf2>
    421e:	fab2 fe82 	clz	lr, r2
    4222:	f1be 0f00 	cmp.w	lr, #0
    4226:	d00b      	beq.n	4240 <__udivmoddi4+0x38>
    4228:	f1ce 0c20 	rsb	ip, lr, #32
    422c:	fa01 f50e 	lsl.w	r5, r1, lr
    4230:	fa20 fc0c 	lsr.w	ip, r0, ip
    4234:	fa02 f70e 	lsl.w	r7, r2, lr
    4238:	ea4c 0c05 	orr.w	ip, ip, r5
    423c:	fa00 f40e 	lsl.w	r4, r0, lr
    4240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4244:	0c25      	lsrs	r5, r4, #16
    4246:	fbbc f8fa 	udiv	r8, ip, sl
    424a:	fa1f f987 	uxth.w	r9, r7
    424e:	fb0a cc18 	mls	ip, sl, r8, ip
    4252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    4256:	fb08 f309 	mul.w	r3, r8, r9
    425a:	42ab      	cmp	r3, r5
    425c:	d90a      	bls.n	4274 <__udivmoddi4+0x6c>
    425e:	19ed      	adds	r5, r5, r7
    4260:	f108 32ff 	add.w	r2, r8, #4294967295
    4264:	f080 8123 	bcs.w	44ae <__udivmoddi4+0x2a6>
    4268:	42ab      	cmp	r3, r5
    426a:	f240 8120 	bls.w	44ae <__udivmoddi4+0x2a6>
    426e:	f1a8 0802 	sub.w	r8, r8, #2
    4272:	443d      	add	r5, r7
    4274:	1aed      	subs	r5, r5, r3
    4276:	b2a4      	uxth	r4, r4
    4278:	fbb5 f0fa 	udiv	r0, r5, sl
    427c:	fb0a 5510 	mls	r5, sl, r0, r5
    4280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4284:	fb00 f909 	mul.w	r9, r0, r9
    4288:	45a1      	cmp	r9, r4
    428a:	d909      	bls.n	42a0 <__udivmoddi4+0x98>
    428c:	19e4      	adds	r4, r4, r7
    428e:	f100 33ff 	add.w	r3, r0, #4294967295
    4292:	f080 810a 	bcs.w	44aa <__udivmoddi4+0x2a2>
    4296:	45a1      	cmp	r9, r4
    4298:	f240 8107 	bls.w	44aa <__udivmoddi4+0x2a2>
    429c:	3802      	subs	r0, #2
    429e:	443c      	add	r4, r7
    42a0:	eba4 0409 	sub.w	r4, r4, r9
    42a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    42a8:	2100      	movs	r1, #0
    42aa:	2e00      	cmp	r6, #0
    42ac:	d061      	beq.n	4372 <__udivmoddi4+0x16a>
    42ae:	fa24 f40e 	lsr.w	r4, r4, lr
    42b2:	2300      	movs	r3, #0
    42b4:	6034      	str	r4, [r6, #0]
    42b6:	6073      	str	r3, [r6, #4]
    42b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42bc:	428b      	cmp	r3, r1
    42be:	d907      	bls.n	42d0 <__udivmoddi4+0xc8>
    42c0:	2e00      	cmp	r6, #0
    42c2:	d054      	beq.n	436e <__udivmoddi4+0x166>
    42c4:	2100      	movs	r1, #0
    42c6:	e886 0021 	stmia.w	r6, {r0, r5}
    42ca:	4608      	mov	r0, r1
    42cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42d0:	fab3 f183 	clz	r1, r3
    42d4:	2900      	cmp	r1, #0
    42d6:	f040 808e 	bne.w	43f6 <__udivmoddi4+0x1ee>
    42da:	42ab      	cmp	r3, r5
    42dc:	d302      	bcc.n	42e4 <__udivmoddi4+0xdc>
    42de:	4282      	cmp	r2, r0
    42e0:	f200 80fa 	bhi.w	44d8 <__udivmoddi4+0x2d0>
    42e4:	1a84      	subs	r4, r0, r2
    42e6:	eb65 0503 	sbc.w	r5, r5, r3
    42ea:	2001      	movs	r0, #1
    42ec:	46ac      	mov	ip, r5
    42ee:	2e00      	cmp	r6, #0
    42f0:	d03f      	beq.n	4372 <__udivmoddi4+0x16a>
    42f2:	e886 1010 	stmia.w	r6, {r4, ip}
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	b912      	cbnz	r2, 4302 <__udivmoddi4+0xfa>
    42fc:	2701      	movs	r7, #1
    42fe:	fbb7 f7f2 	udiv	r7, r7, r2
    4302:	fab7 fe87 	clz	lr, r7
    4306:	f1be 0f00 	cmp.w	lr, #0
    430a:	d134      	bne.n	4376 <__udivmoddi4+0x16e>
    430c:	1beb      	subs	r3, r5, r7
    430e:	0c3a      	lsrs	r2, r7, #16
    4310:	fa1f fc87 	uxth.w	ip, r7
    4314:	2101      	movs	r1, #1
    4316:	fbb3 f8f2 	udiv	r8, r3, r2
    431a:	0c25      	lsrs	r5, r4, #16
    431c:	fb02 3318 	mls	r3, r2, r8, r3
    4320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4324:	fb0c f308 	mul.w	r3, ip, r8
    4328:	42ab      	cmp	r3, r5
    432a:	d907      	bls.n	433c <__udivmoddi4+0x134>
    432c:	19ed      	adds	r5, r5, r7
    432e:	f108 30ff 	add.w	r0, r8, #4294967295
    4332:	d202      	bcs.n	433a <__udivmoddi4+0x132>
    4334:	42ab      	cmp	r3, r5
    4336:	f200 80d1 	bhi.w	44dc <__udivmoddi4+0x2d4>
    433a:	4680      	mov	r8, r0
    433c:	1aed      	subs	r5, r5, r3
    433e:	b2a3      	uxth	r3, r4
    4340:	fbb5 f0f2 	udiv	r0, r5, r2
    4344:	fb02 5510 	mls	r5, r2, r0, r5
    4348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    434c:	fb0c fc00 	mul.w	ip, ip, r0
    4350:	45a4      	cmp	ip, r4
    4352:	d907      	bls.n	4364 <__udivmoddi4+0x15c>
    4354:	19e4      	adds	r4, r4, r7
    4356:	f100 33ff 	add.w	r3, r0, #4294967295
    435a:	d202      	bcs.n	4362 <__udivmoddi4+0x15a>
    435c:	45a4      	cmp	ip, r4
    435e:	f200 80b8 	bhi.w	44d2 <__udivmoddi4+0x2ca>
    4362:	4618      	mov	r0, r3
    4364:	eba4 040c 	sub.w	r4, r4, ip
    4368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    436c:	e79d      	b.n	42aa <__udivmoddi4+0xa2>
    436e:	4631      	mov	r1, r6
    4370:	4630      	mov	r0, r6
    4372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4376:	f1ce 0420 	rsb	r4, lr, #32
    437a:	fa05 f30e 	lsl.w	r3, r5, lr
    437e:	fa07 f70e 	lsl.w	r7, r7, lr
    4382:	fa20 f804 	lsr.w	r8, r0, r4
    4386:	0c3a      	lsrs	r2, r7, #16
    4388:	fa25 f404 	lsr.w	r4, r5, r4
    438c:	ea48 0803 	orr.w	r8, r8, r3
    4390:	fbb4 f1f2 	udiv	r1, r4, r2
    4394:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4398:	fb02 4411 	mls	r4, r2, r1, r4
    439c:	fa1f fc87 	uxth.w	ip, r7
    43a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    43a4:	fb01 f30c 	mul.w	r3, r1, ip
    43a8:	42ab      	cmp	r3, r5
    43aa:	fa00 f40e 	lsl.w	r4, r0, lr
    43ae:	d909      	bls.n	43c4 <__udivmoddi4+0x1bc>
    43b0:	19ed      	adds	r5, r5, r7
    43b2:	f101 30ff 	add.w	r0, r1, #4294967295
    43b6:	f080 808a 	bcs.w	44ce <__udivmoddi4+0x2c6>
    43ba:	42ab      	cmp	r3, r5
    43bc:	f240 8087 	bls.w	44ce <__udivmoddi4+0x2c6>
    43c0:	3902      	subs	r1, #2
    43c2:	443d      	add	r5, r7
    43c4:	1aeb      	subs	r3, r5, r3
    43c6:	fa1f f588 	uxth.w	r5, r8
    43ca:	fbb3 f0f2 	udiv	r0, r3, r2
    43ce:	fb02 3310 	mls	r3, r2, r0, r3
    43d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    43d6:	fb00 f30c 	mul.w	r3, r0, ip
    43da:	42ab      	cmp	r3, r5
    43dc:	d907      	bls.n	43ee <__udivmoddi4+0x1e6>
    43de:	19ed      	adds	r5, r5, r7
    43e0:	f100 38ff 	add.w	r8, r0, #4294967295
    43e4:	d26f      	bcs.n	44c6 <__udivmoddi4+0x2be>
    43e6:	42ab      	cmp	r3, r5
    43e8:	d96d      	bls.n	44c6 <__udivmoddi4+0x2be>
    43ea:	3802      	subs	r0, #2
    43ec:	443d      	add	r5, r7
    43ee:	1aeb      	subs	r3, r5, r3
    43f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    43f4:	e78f      	b.n	4316 <__udivmoddi4+0x10e>
    43f6:	f1c1 0720 	rsb	r7, r1, #32
    43fa:	fa22 f807 	lsr.w	r8, r2, r7
    43fe:	408b      	lsls	r3, r1
    4400:	fa05 f401 	lsl.w	r4, r5, r1
    4404:	ea48 0303 	orr.w	r3, r8, r3
    4408:	fa20 fe07 	lsr.w	lr, r0, r7
    440c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4410:	40fd      	lsrs	r5, r7
    4412:	ea4e 0e04 	orr.w	lr, lr, r4
    4416:	fbb5 f9fc 	udiv	r9, r5, ip
    441a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    441e:	fb0c 5519 	mls	r5, ip, r9, r5
    4422:	fa1f f883 	uxth.w	r8, r3
    4426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    442a:	fb09 f408 	mul.w	r4, r9, r8
    442e:	42ac      	cmp	r4, r5
    4430:	fa02 f201 	lsl.w	r2, r2, r1
    4434:	fa00 fa01 	lsl.w	sl, r0, r1
    4438:	d908      	bls.n	444c <__udivmoddi4+0x244>
    443a:	18ed      	adds	r5, r5, r3
    443c:	f109 30ff 	add.w	r0, r9, #4294967295
    4440:	d243      	bcs.n	44ca <__udivmoddi4+0x2c2>
    4442:	42ac      	cmp	r4, r5
    4444:	d941      	bls.n	44ca <__udivmoddi4+0x2c2>
    4446:	f1a9 0902 	sub.w	r9, r9, #2
    444a:	441d      	add	r5, r3
    444c:	1b2d      	subs	r5, r5, r4
    444e:	fa1f fe8e 	uxth.w	lr, lr
    4452:	fbb5 f0fc 	udiv	r0, r5, ip
    4456:	fb0c 5510 	mls	r5, ip, r0, r5
    445a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    445e:	fb00 f808 	mul.w	r8, r0, r8
    4462:	45a0      	cmp	r8, r4
    4464:	d907      	bls.n	4476 <__udivmoddi4+0x26e>
    4466:	18e4      	adds	r4, r4, r3
    4468:	f100 35ff 	add.w	r5, r0, #4294967295
    446c:	d229      	bcs.n	44c2 <__udivmoddi4+0x2ba>
    446e:	45a0      	cmp	r8, r4
    4470:	d927      	bls.n	44c2 <__udivmoddi4+0x2ba>
    4472:	3802      	subs	r0, #2
    4474:	441c      	add	r4, r3
    4476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    447a:	eba4 0408 	sub.w	r4, r4, r8
    447e:	fba0 8902 	umull	r8, r9, r0, r2
    4482:	454c      	cmp	r4, r9
    4484:	46c6      	mov	lr, r8
    4486:	464d      	mov	r5, r9
    4488:	d315      	bcc.n	44b6 <__udivmoddi4+0x2ae>
    448a:	d012      	beq.n	44b2 <__udivmoddi4+0x2aa>
    448c:	b156      	cbz	r6, 44a4 <__udivmoddi4+0x29c>
    448e:	ebba 030e 	subs.w	r3, sl, lr
    4492:	eb64 0405 	sbc.w	r4, r4, r5
    4496:	fa04 f707 	lsl.w	r7, r4, r7
    449a:	40cb      	lsrs	r3, r1
    449c:	431f      	orrs	r7, r3
    449e:	40cc      	lsrs	r4, r1
    44a0:	6037      	str	r7, [r6, #0]
    44a2:	6074      	str	r4, [r6, #4]
    44a4:	2100      	movs	r1, #0
    44a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44aa:	4618      	mov	r0, r3
    44ac:	e6f8      	b.n	42a0 <__udivmoddi4+0x98>
    44ae:	4690      	mov	r8, r2
    44b0:	e6e0      	b.n	4274 <__udivmoddi4+0x6c>
    44b2:	45c2      	cmp	sl, r8
    44b4:	d2ea      	bcs.n	448c <__udivmoddi4+0x284>
    44b6:	ebb8 0e02 	subs.w	lr, r8, r2
    44ba:	eb69 0503 	sbc.w	r5, r9, r3
    44be:	3801      	subs	r0, #1
    44c0:	e7e4      	b.n	448c <__udivmoddi4+0x284>
    44c2:	4628      	mov	r0, r5
    44c4:	e7d7      	b.n	4476 <__udivmoddi4+0x26e>
    44c6:	4640      	mov	r0, r8
    44c8:	e791      	b.n	43ee <__udivmoddi4+0x1e6>
    44ca:	4681      	mov	r9, r0
    44cc:	e7be      	b.n	444c <__udivmoddi4+0x244>
    44ce:	4601      	mov	r1, r0
    44d0:	e778      	b.n	43c4 <__udivmoddi4+0x1bc>
    44d2:	3802      	subs	r0, #2
    44d4:	443c      	add	r4, r7
    44d6:	e745      	b.n	4364 <__udivmoddi4+0x15c>
    44d8:	4608      	mov	r0, r1
    44da:	e708      	b.n	42ee <__udivmoddi4+0xe6>
    44dc:	f1a8 0802 	sub.w	r8, r8, #2
    44e0:	443d      	add	r5, r7
    44e2:	e72b      	b.n	433c <__udivmoddi4+0x134>

000044e4 <__aeabi_idiv0>:
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop

000044e8 <__libc_init_array>:
    44e8:	b570      	push	{r4, r5, r6, lr}
    44ea:	4e0d      	ldr	r6, [pc, #52]	; (4520 <__libc_init_array+0x38>)
    44ec:	4c0d      	ldr	r4, [pc, #52]	; (4524 <__libc_init_array+0x3c>)
    44ee:	1ba4      	subs	r4, r4, r6
    44f0:	10a4      	asrs	r4, r4, #2
    44f2:	2500      	movs	r5, #0
    44f4:	42a5      	cmp	r5, r4
    44f6:	d109      	bne.n	450c <__libc_init_array+0x24>
    44f8:	4e0b      	ldr	r6, [pc, #44]	; (4528 <__libc_init_array+0x40>)
    44fa:	4c0c      	ldr	r4, [pc, #48]	; (452c <__libc_init_array+0x44>)
    44fc:	f000 f9b2 	bl	4864 <_init>
    4500:	1ba4      	subs	r4, r4, r6
    4502:	10a4      	asrs	r4, r4, #2
    4504:	2500      	movs	r5, #0
    4506:	42a5      	cmp	r5, r4
    4508:	d105      	bne.n	4516 <__libc_init_array+0x2e>
    450a:	bd70      	pop	{r4, r5, r6, pc}
    450c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4510:	4798      	blx	r3
    4512:	3501      	adds	r5, #1
    4514:	e7ee      	b.n	44f4 <__libc_init_array+0xc>
    4516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    451a:	4798      	blx	r3
    451c:	3501      	adds	r5, #1
    451e:	e7f2      	b.n	4506 <__libc_init_array+0x1e>
    4520:	00004870 	.word	0x00004870
    4524:	00004870 	.word	0x00004870
    4528:	00004870 	.word	0x00004870
    452c:	00004874 	.word	0x00004874
    4530:	682f2e2e 	.word	0x682f2e2e
    4534:	732f6c61 	.word	0x732f6c61
    4538:	682f6372 	.word	0x682f6372
    453c:	615f6c61 	.word	0x615f6c61
    4540:	735f6364 	.word	0x735f6364
    4544:	2e636e79 	.word	0x2e636e79
    4548:	00000063 	.word	0x00000063
    454c:	682f2e2e 	.word	0x682f2e2e
    4550:	732f6c61 	.word	0x732f6c61
    4554:	682f6372 	.word	0x682f6372
    4558:	635f6c61 	.word	0x635f6c61
    455c:	72656d61 	.word	0x72656d61
    4560:	73615f61 	.word	0x73615f61
    4564:	2e636e79 	.word	0x2e636e79
    4568:	00000063 	.word	0x00000063
    456c:	682f2e2e 	.word	0x682f2e2e
    4570:	732f6c61 	.word	0x732f6c61
    4574:	682f6372 	.word	0x682f6372
    4578:	6d5f6c61 	.word	0x6d5f6c61
    457c:	735f6963 	.word	0x735f6963
    4580:	2e636e79 	.word	0x2e636e79
    4584:	00000063 	.word	0x00000063
    4588:	682f2e2e 	.word	0x682f2e2e
    458c:	732f6c61 	.word	0x732f6c61
    4590:	682f6372 	.word	0x682f6372
    4594:	705f6c61 	.word	0x705f6c61
    4598:	632e6d77 	.word	0x632e6d77
    459c:	00000000 	.word	0x00000000
    45a0:	682f2e2e 	.word	0x682f2e2e
    45a4:	732f6c61 	.word	0x732f6c61
    45a8:	682f6372 	.word	0x682f6372
    45ac:	745f6c61 	.word	0x745f6c61
    45b0:	72656d69 	.word	0x72656d69
    45b4:	0000632e 	.word	0x0000632e
    45b8:	682f2e2e 	.word	0x682f2e2e
    45bc:	732f6c61 	.word	0x732f6c61
    45c0:	682f6372 	.word	0x682f6372
    45c4:	755f6c61 	.word	0x755f6c61
    45c8:	74726173 	.word	0x74726173
    45cc:	7973615f 	.word	0x7973615f
    45d0:	632e636e 	.word	0x632e636e
    45d4:	00000000 	.word	0x00000000
    45d8:	682f2e2e 	.word	0x682f2e2e
    45dc:	752f6c61 	.word	0x752f6c61
    45e0:	736c6974 	.word	0x736c6974
    45e4:	6372732f 	.word	0x6372732f
    45e8:	6974752f 	.word	0x6974752f
    45ec:	6c5f736c 	.word	0x6c5f736c
    45f0:	2e747369 	.word	0x2e747369
    45f4:	00000063 	.word	0x00000063
    45f8:	682f2e2e 	.word	0x682f2e2e
    45fc:	752f6c61 	.word	0x752f6c61
    4600:	736c6974 	.word	0x736c6974
    4604:	6372732f 	.word	0x6372732f
    4608:	6974752f 	.word	0x6974752f
    460c:	725f736c 	.word	0x725f736c
    4610:	62676e69 	.word	0x62676e69
    4614:	65666675 	.word	0x65666675
    4618:	00632e72 	.word	0x00632e72

0000461c <_adcs>:
    461c:	00000000 00000018 00001800 00000000     ................
	...
    4634:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    4644:	632e6364 00000000                       dc.c....

0000464c <_cfgs>:
    464c:	00205000 0a000000 00000000 00000000     .P .............
	...

0000474c <_map>:
    474c:	00000006 00000036 00000007 00000037     ....6.......7...
    475c:	00000009 00000019 0000000e 0000002e     ................
    476c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    477c:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    478c:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    479c:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    47ac:	43000000 43000400                       ...C...C

000047b4 <_usarts>:
    47b4:	00000005 40100004 00030000 00700002     .......@......p.
    47c4:	0000ff58 00000000                       X.......

000047cc <_i2cms>:
	...

000047e4 <_i2css>:
	...

000047f4 <sercomspi_regs>:
	...
    4808:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4818:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    4828:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    4838:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    4848:	63745f6c 0000632e 732f2e2e 6d6d5f64     l_tc.c..../sd_mm
    4858:	64732f63 636d6d5f 0000632e              c/sd_mmc.c..

00004864 <_init>:
    4864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4866:	bf00      	nop
    4868:	bcf8      	pop	{r3, r4, r5, r6, r7}
    486a:	bc08      	pop	{r3}
    486c:	469e      	mov	lr, r3
    486e:	4770      	bx	lr

00004870 <__init_array_start>:
    4870:	00000289 	.word	0x00000289

00004874 <_fini>:
    4874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4876:	bf00      	nop
    4878:	bcf8      	pop	{r3, r4, r5, r6, r7}
    487a:	bc08      	pop	{r3}
    487c:	469e      	mov	lr, r3
    487e:	4770      	bx	lr

00004880 <__fini_array_start>:
    4880:	00000265 	.word	0x00000265
