
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         000048d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000048d4  000048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  000048dc  00020000  2**2
=======
  0 .text         000054d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000054d8  000054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  000054e0  00020000  2**2
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
<<<<<<< HEAD
  5 .bss          00028ba4  20000040  00004920  00020040  2**4
                  ALLOC
  6 .stack        00010004  20028be4  0002d4c4  00020040  2**0
=======
  5 .bss          00028ba4  20000040  00005520  00020038  2**4
                  ALLOC
  6 .stack        00010004  20028be4  0002e0c4  00020038  2**0
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
  9 .debug_info   0004370a  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000058fd  00000000  00000000  000637c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019567  00000000  00000000  000690c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001420  00000000  00000000  0008262d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014d0  00000000  00000000  00083a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00032f0c  00000000  00000000  00084f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f110  00000000  00000000  000b7e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100b0a  00000000  00000000  000d6f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003534  00000000  00000000  001d7a44  2**2
=======
  9 .debug_info   00041ebf  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005544  00000000  00000000  00061f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018ccb  00000000  00000000  000674c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013a8  00000000  00000000  0008018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001468  00000000  00000000  00081535  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000328ae  00000000  00000000  0008299d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e3cb  00000000  00000000  000b524b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001009e3  00000000  00000000  000d3616  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003440  00000000  00000000  001d3ffc  2**2
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 a5 1d 00 00     ................
      8c:	b1 1d 00 00 e5 02 00 00 bd 1d 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c9 1d 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	45 1b 00 00 51 1b 00 00 5d 1b 00 00 69 1b 00 00     E...Q...]...i...
      cc:	75 1b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     u...............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	21 20 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ! ..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 cd 28 00 00 e1 28 00 00 f5 28 00 00     .....(...(...(..
     154:	09 29 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .)..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c9 2e 00 00     ................
     1f0:	dd 2e 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 f5 1f 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
<<<<<<< HEAD
     284:	000048dc 	.word	0x000048dc
=======
     284:	000054e0 	.word	0x000054e0
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
     2c0:	000048dc 	.word	0x000048dc
     2c4:	20000044 	.word	0x20000044
     2c8:	000048dc 	.word	0x000048dc
=======
     2c0:	000054e0 	.word	0x000054e0
     2c4:	20000044 	.word	0x20000044
     2c8:	000054e0 	.word	0x000054e0
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
     2d0:	b508      	push	{r3, lr}
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
<<<<<<< HEAD
     2e0:	0000420d 	.word	0x0000420d
=======
     2e0:	00004d65 	.word	0x00004d65
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

000002e4 <Dummy_Handler>:
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
     2e8:	b508      	push	{r3, lr}
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
<<<<<<< HEAD
     344:	000048dc 	.word	0x000048dc
=======
     344:	000054e0 	.word	0x000054e0
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028be4 	.word	0x20028be4
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
<<<<<<< HEAD
     35c:	00004539 	.word	0x00004539
     360:	00003cc1 	.word	0x00003cc1
=======
     35c:	00005091 	.word	0x00005091
     360:	00003e2d 	.word	0x00003e2d
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000364 <TIMER_0_init>:
     364:	b508      	push	{r3, lr}
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002e85 	.word	0x00002e85
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	00001251 	.word	0x00001251

000003a0 <ADC_0_PORT_init>:
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     3ba:	f042 0201 	orr.w	r2, r2, #1
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     3ca:	f042 0201 	orr.w	r2, r2, #1
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
     3f4:	b508      	push	{r3, lr}
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     45e:	f042 0201 	orr.w	r2, r2, #1
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     498:	f042 0201 	orr.w	r2, r2, #1
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
     4a4:	f002 020f 	and.w	r2, r2, #15
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     4cc:	f042 0201 	orr.w	r2, r2, #1
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
     4d8:	f002 020f 	and.w	r2, r2, #15
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     508:	f042 0201 	orr.w	r2, r2, #1
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     556:	f042 0201 	orr.w	r2, r2, #1
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     566:	f042 020a 	orr.w	r2, r2, #10
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     576:	f042 0201 	orr.w	r2, r2, #1
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     586:	f042 020a 	orr.w	r2, r2, #10
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     596:	f042 0201 	orr.w	r2, r2, #1
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
     5a2:	f002 020f 	and.w	r2, r2, #15
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5b6:	f042 0201 	orr.w	r2, r2, #1
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     5c6:	f042 020a 	orr.w	r2, r2, #10
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5d6:	f042 0201 	orr.w	r2, r2, #1
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
     5e2:	f002 020f 	and.w	r2, r2, #15
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     5f6:	f042 0201 	orr.w	r2, r2, #1
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     606:	f042 020a 	orr.w	r2, r2, #10
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     616:	f042 0201 	orr.w	r2, r2, #1
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
     622:	f002 020f 	and.w	r2, r2, #15
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     636:	f042 0201 	orr.w	r2, r2, #1
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     646:	f042 020a 	orr.w	r2, r2, #10
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     656:	f042 0201 	orr.w	r2, r2, #1
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
     662:	f002 020f 	and.w	r2, r2, #15
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     676:	f042 0201 	orr.w	r2, r2, #1
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     686:	f042 020a 	orr.w	r2, r2, #10
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     696:	f042 0201 	orr.w	r2, r2, #1
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
     6a2:	f002 020f 	and.w	r2, r2, #15
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
     6c4:	b508      	push	{r3, lr}
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     71a:	f042 0201 	orr.w	r2, r2, #1
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     72a:	f042 0202 	orr.w	r2, r2, #2
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     73a:	f042 0201 	orr.w	r2, r2, #1
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
     746:	f002 020f 	and.w	r2, r2, #15
     74a:	f042 0220 	orr.w	r2, r2, #32
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	000014cd 	.word	0x000014cd
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
     790:	b470      	push	{r4, r5, r6}
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     7c2:	f041 0101 	orr.w	r1, r1, #1
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
     7ce:	f001 010f 	and.w	r1, r1, #15
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
     7e6:	6159      	str	r1, [r3, #20]
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     7fc:	f041 0101 	orr.w	r1, r1, #1
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
     80c:	f041 0108 	orr.w	r1, r1, #8
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
     822:	6159      	str	r1, [r3, #20]
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     838:	f041 0101 	orr.w	r1, r1, #1
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
     844:	f001 010f 	and.w	r1, r1, #15
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
     85c:	6158      	str	r0, [r3, #20]
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     872:	f041 0101 	orr.w	r1, r1, #1
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
     882:	f041 0108 	orr.w	r1, r1, #8
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
     88a:	609d      	str	r5, [r3, #8]
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
     890:	615d      	str	r5, [r3, #20]
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     8a6:	f041 0101 	orr.w	r1, r1, #1
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
     8b2:	f001 010f 	and.w	r1, r1, #15
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     8e2:	f042 0201 	orr.w	r2, r2, #1
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
     8f2:	f042 0208 	orr.w	r2, r2, #8
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
     930:	b508      	push	{r3, lr}
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
     958:	b508      	push	{r3, lr}
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     976:	f043 0301 	orr.w	r3, r3, #1
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     986:	f043 0304 	orr.w	r3, r3, #4
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
     9b0:	b508      	push	{r3, lr}
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	00002e89 	.word	0x00002e89
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	000010e9 	.word	0x000010e9

000009e4 <system_init>:
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
     9f0:	609a      	str	r2, [r3, #8]
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
     a0e:	609d      	str	r5, [r3, #8]
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
     a7a:	6099      	str	r1, [r3, #8]
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
     a94:	609e      	str	r6, [r3, #8]
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
     bce:	f042 0201 	orr.w	r2, r2, #1
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
     bda:	f002 020f 	and.w	r2, r2, #15
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001969 	.word	0x00001969
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
     c5c:	bd38      	pop	{r3, r4, r5, pc}
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
<<<<<<< HEAD
     c68:	00004580 	.word	0x00004580
     c6c:	00001561 	.word	0x00001561
     c70:	00001891 	.word	0x00001891
=======
     c68:	000050e8 	.word	0x000050e8
     c6c:	00001671 	.word	0x00001671
     c70:	000019a1 	.word	0x000019a1
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000c74 <adc_sync_enable_channel>:
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
<<<<<<< HEAD
     c94:	00004580 	.word	0x00004580
     c98:	00001561 	.word	0x00001561
     c9c:	000018c9 	.word	0x000018c9
=======
     c94:	000050e8 	.word	0x000050e8
     c98:	00001671 	.word	0x00001671
     c9c:	000019d9 	.word	0x000019d9
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000ca0 <adc_sync_read_channel>:
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
     d10:	f808 0006 	strb.w	r0, [r8, r6]
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
<<<<<<< HEAD
     d28:	00001561 	.word	0x00001561
     d2c:	000018df 	.word	0x000018df
     d30:	000018ff 	.word	0x000018ff
     d34:	000018f3 	.word	0x000018f3
     d38:	00001915 	.word	0x00001915
     d3c:	00004580 	.word	0x00004580
=======
     d28:	00001671 	.word	0x00001671
     d2c:	000019ef 	.word	0x000019ef
     d30:	00001a0f 	.word	0x00001a0f
     d34:	00001a03 	.word	0x00001a03
     d38:	00001a25 	.word	0x00001a25
     d3c:	000050e8 	.word	0x000050e8
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
     d5a:	b508      	push	{r3, lr}
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
<<<<<<< HEAD
     d90:	0000459c 	.word	0x0000459c
     d94:	00001561 	.word	0x00001561
     d98:	00001fbd 	.word	0x00001fbd
=======
     d90:	00005104 	.word	0x00005104
     d94:	00001671 	.word	0x00001671
     d98:	000020cd 	.word	0x000020cd
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:
     da0:	b508      	push	{r3, lr}
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	00002931 	.word	0x00002931

00000db4 <delay_us>:
     db4:	b510      	push	{r4, lr}
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	0000193d 	.word	0x0000193d
     dd0:	0000293d 	.word	0x0000293d

00000dd4 <delay_ms>:
     dd4:	b510      	push	{r4, lr}
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	00001959 	.word	0x00001959
     df0:	0000293d 	.word	0x0000293d

00000df4 <process_ext_irq>:
     df4:	b538      	push	{r3, r4, r5, lr}
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
     e38:	b508      	push	{r3, lr}
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001c45 	.word	0x00001c45

00000e6c <ext_irq_register>:
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
     e72:	2300      	movs	r3, #0
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
     e92:	2701      	movs	r7, #1
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
     e96:	2700      	movs	r7, #0
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001d4d 	.word	0x00001d4d

00000f3c <mci_sync_init>:
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
     f58:	bd38      	pop	{r3, r4, r5, pc}
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
<<<<<<< HEAD
     f64:	000045bc 	.word	0x000045bc
     f68:	00001561 	.word	0x00001561
     f6c:	00002279 	.word	0x00002279
=======
     f64:	00005124 	.word	0x00005124
     f68:	00001671 	.word	0x00001671
     f6c:	00002389 	.word	0x00002389
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000f70 <mci_sync_select_device>:
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
<<<<<<< HEAD
     fa0:	000045bc 	.word	0x000045bc
     fa4:	00001561 	.word	0x00001561
     fa8:	000022e1 	.word	0x000022e1
=======
     fa0:	00005124 	.word	0x00005124
     fa4:	00001671 	.word	0x00001671
     fa8:	000023f1 	.word	0x000023f1
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000fac <mci_sync_deselect_device>:
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
<<<<<<< HEAD
     fcc:	000045bc 	.word	0x000045bc
     fd0:	00001561 	.word	0x00001561
     fd4:	00002375 	.word	0x00002375
=======
     fcc:	00005124 	.word	0x00005124
     fd0:	00001671 	.word	0x00001671
     fd4:	00002485 	.word	0x00002485

00000fd8 <mci_sync_get_bus_width>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

00000fd8 <mci_sync_send_cmd>:
     fd8:	b570      	push	{r4, r5, r6, lr}
     fda:	460d      	mov	r5, r1
<<<<<<< HEAD
     fdc:	4616      	mov	r6, r2
     fde:	4604      	mov	r4, r0
     fe0:	2272      	movs	r2, #114	; 0x72
     fe2:	4906      	ldr	r1, [pc, #24]	; (ffc <mci_sync_send_cmd+0x24>)
     fe4:	3000      	adds	r0, #0
     fe6:	bf18      	it	ne
     fe8:	2001      	movne	r0, #1
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <mci_sync_send_cmd+0x28>)
     fec:	4798      	blx	r3
     fee:	4632      	mov	r2, r6
     ff0:	4629      	mov	r1, r5
     ff2:	4620      	mov	r0, r4
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <mci_sync_send_cmd+0x2c>)
     ff6:	4798      	blx	r3
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	bf00      	nop
     ffc:	000045bc 	.word	0x000045bc
    1000:	00001561 	.word	0x00001561
    1004:	00002379 	.word	0x00002379

00001008 <mci_sync_get_response>:
    1008:	b510      	push	{r4, lr}
    100a:	4604      	mov	r4, r0
    100c:	227b      	movs	r2, #123	; 0x7b
    100e:	4905      	ldr	r1, [pc, #20]	; (1024 <mci_sync_get_response+0x1c>)
    1010:	3000      	adds	r0, #0
    1012:	bf18      	it	ne
    1014:	2001      	movne	r0, #1
    1016:	4b04      	ldr	r3, [pc, #16]	; (1028 <mci_sync_get_response+0x20>)
    1018:	4798      	blx	r3
    101a:	4620      	mov	r0, r4
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <mci_sync_get_response+0x24>)
    101e:	4798      	blx	r3
    1020:	bd10      	pop	{r4, pc}
    1022:	bf00      	nop
    1024:	000045bc 	.word	0x000045bc
    1028:	00001561 	.word	0x00001561
    102c:	000023d1 	.word	0x000023d1

00001030 <mci_sync_adtc_start>:
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	b083      	sub	sp, #12
    1034:	460d      	mov	r5, r1
    1036:	4616      	mov	r6, r2
    1038:	461f      	mov	r7, r3
    103a:	4604      	mov	r4, r0
    103c:	2290      	movs	r2, #144	; 0x90
    103e:	490a      	ldr	r1, [pc, #40]	; (1068 <mci_sync_adtc_start+0x38>)
    1040:	3000      	adds	r0, #0
    1042:	bf18      	it	ne
    1044:	2001      	movne	r0, #1
    1046:	4b09      	ldr	r3, [pc, #36]	; (106c <mci_sync_adtc_start+0x3c>)
    1048:	4798      	blx	r3
    104a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    104e:	9301      	str	r3, [sp, #4]
    1050:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1054:	9300      	str	r3, [sp, #0]
    1056:	463b      	mov	r3, r7
    1058:	4632      	mov	r2, r6
    105a:	4629      	mov	r1, r5
    105c:	4620      	mov	r0, r4
    105e:	4c04      	ldr	r4, [pc, #16]	; (1070 <mci_sync_adtc_start+0x40>)
    1060:	47a0      	blx	r4
    1062:	b003      	add	sp, #12
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	bf00      	nop
    1068:	000045bc 	.word	0x000045bc
    106c:	00001561 	.word	0x00001561
    1070:	000023fd 	.word	0x000023fd

00001074 <mci_sync_start_write_blocks>:
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	460c      	mov	r4, r1
    1078:	4616      	mov	r6, r2
    107a:	4605      	mov	r5, r0
    107c:	b168      	cbz	r0, 109a <mci_sync_start_write_blocks+0x26>
    107e:	b151      	cbz	r1, 1096 <mci_sync_start_write_blocks+0x22>
    1080:	2001      	movs	r0, #1
    1082:	22be      	movs	r2, #190	; 0xbe
    1084:	4906      	ldr	r1, [pc, #24]	; (10a0 <mci_sync_start_write_blocks+0x2c>)
    1086:	4b07      	ldr	r3, [pc, #28]	; (10a4 <mci_sync_start_write_blocks+0x30>)
    1088:	4798      	blx	r3
    108a:	4632      	mov	r2, r6
    108c:	4621      	mov	r1, r4
    108e:	4628      	mov	r0, r5
    1090:	4b05      	ldr	r3, [pc, #20]	; (10a8 <mci_sync_start_write_blocks+0x34>)
    1092:	4798      	blx	r3
    1094:	bd70      	pop	{r4, r5, r6, pc}
    1096:	2000      	movs	r0, #0
    1098:	e7f3      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109a:	2000      	movs	r0, #0
    109c:	e7f1      	b.n	1082 <mci_sync_start_write_blocks+0xe>
    109e:	bf00      	nop
    10a0:	000045bc 	.word	0x000045bc
    10a4:	00001561 	.word	0x00001561
    10a8:	00002565 	.word	0x00002565

000010ac <mci_sync_wait_end_of_write_blocks>:
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	22d0      	movs	r2, #208	; 0xd0
    10b2:	4905      	ldr	r1, [pc, #20]	; (10c8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    10b4:	3000      	adds	r0, #0
    10b6:	bf18      	it	ne
    10b8:	2001      	movne	r0, #1
    10ba:	4b04      	ldr	r3, [pc, #16]	; (10cc <mci_sync_wait_end_of_write_blocks+0x20>)
    10bc:	4798      	blx	r3
    10be:	4620      	mov	r0, r4
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <mci_sync_wait_end_of_write_blocks+0x24>)
    10c2:	4798      	blx	r3
    10c4:	bd10      	pop	{r4, pc}
    10c6:	bf00      	nop
    10c8:	000045bc 	.word	0x000045bc
    10cc:	00001561 	.word	0x00001561
    10d0:	000025e5 	.word	0x000025e5

000010d4 <pwm_period_expired>:
    10d4:	b508      	push	{r3, lr}
    10d6:	6943      	ldr	r3, [r0, #20]
    10d8:	b103      	cbz	r3, 10dc <pwm_period_expired+0x8>
    10da:	4798      	blx	r3
    10dc:	bd08      	pop	{r3, pc}

000010de <pwm_detect_fault>:
    10de:	b508      	push	{r3, lr}
    10e0:	6983      	ldr	r3, [r0, #24]
    10e2:	b103      	cbz	r3, 10e6 <pwm_detect_fault+0x8>
    10e4:	4798      	blx	r3
    10e6:	bd08      	pop	{r3, pc}

000010e8 <pwm_init>:
    10e8:	b538      	push	{r3, r4, r5, lr}
    10ea:	460d      	mov	r5, r1
    10ec:	4604      	mov	r4, r0
    10ee:	b188      	cbz	r0, 1114 <pwm_init+0x2c>
    10f0:	b171      	cbz	r1, 1110 <pwm_init+0x28>
    10f2:	2001      	movs	r0, #1
    10f4:	2233      	movs	r2, #51	; 0x33
    10f6:	4908      	ldr	r1, [pc, #32]	; (1118 <pwm_init+0x30>)
    10f8:	4b08      	ldr	r3, [pc, #32]	; (111c <pwm_init+0x34>)
    10fa:	4798      	blx	r3
    10fc:	4629      	mov	r1, r5
    10fe:	4620      	mov	r0, r4
    1100:	4b07      	ldr	r3, [pc, #28]	; (1120 <pwm_init+0x38>)
    1102:	4798      	blx	r3
    1104:	4b07      	ldr	r3, [pc, #28]	; (1124 <pwm_init+0x3c>)
    1106:	6023      	str	r3, [r4, #0]
    1108:	4b07      	ldr	r3, [pc, #28]	; (1128 <pwm_init+0x40>)
    110a:	6063      	str	r3, [r4, #4]
    110c:	2000      	movs	r0, #0
    110e:	bd38      	pop	{r3, r4, r5, pc}
    1110:	2000      	movs	r0, #0
    1112:	e7ef      	b.n	10f4 <pwm_init+0xc>
    1114:	2000      	movs	r0, #0
    1116:	e7ed      	b.n	10f4 <pwm_init+0xc>
    1118:	000045d8 	.word	0x000045d8
    111c:	00001561 	.word	0x00001561
    1120:	00002c39 	.word	0x00002c39
    1124:	000010d5 	.word	0x000010d5
    1128:	000010df 	.word	0x000010df

0000112c <pwm_enable>:
    112c:	b510      	push	{r4, lr}
    112e:	4604      	mov	r4, r0
    1130:	224a      	movs	r2, #74	; 0x4a
    1132:	4909      	ldr	r1, [pc, #36]	; (1158 <pwm_enable+0x2c>)
    1134:	3000      	adds	r0, #0
    1136:	bf18      	it	ne
    1138:	2001      	movne	r0, #1
    113a:	4b08      	ldr	r3, [pc, #32]	; (115c <pwm_enable+0x30>)
    113c:	4798      	blx	r3
    113e:	4620      	mov	r0, r4
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <pwm_enable+0x34>)
    1142:	4798      	blx	r3
    1144:	b920      	cbnz	r0, 1150 <pwm_enable+0x24>
    1146:	4620      	mov	r0, r4
    1148:	4b06      	ldr	r3, [pc, #24]	; (1164 <pwm_enable+0x38>)
    114a:	4798      	blx	r3
    114c:	2000      	movs	r0, #0
    114e:	bd10      	pop	{r4, pc}
    1150:	f06f 0010 	mvn.w	r0, #16
    1154:	bd10      	pop	{r4, pc}
    1156:	bf00      	nop
    1158:	000045d8 	.word	0x000045d8
    115c:	00001561 	.word	0x00001561
    1160:	00002e73 	.word	0x00002e73
    1164:	00002dcd 	.word	0x00002dcd

00001168 <pwm_set_parameters>:
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	460d      	mov	r5, r1
    116c:	4616      	mov	r6, r2
    116e:	4604      	mov	r4, r0
    1170:	227c      	movs	r2, #124	; 0x7c
    1172:	4906      	ldr	r1, [pc, #24]	; (118c <pwm_set_parameters+0x24>)
    1174:	3000      	adds	r0, #0
    1176:	bf18      	it	ne
    1178:	2001      	movne	r0, #1
    117a:	4b05      	ldr	r3, [pc, #20]	; (1190 <pwm_set_parameters+0x28>)
    117c:	4798      	blx	r3
    117e:	4632      	mov	r2, r6
    1180:	4629      	mov	r1, r5
    1182:	4620      	mov	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <pwm_set_parameters+0x2c>)
    1186:	4798      	blx	r3
    1188:	2000      	movs	r0, #0
    118a:	bd70      	pop	{r4, r5, r6, pc}
    118c:	000045d8 	.word	0x000045d8
    1190:	00001561 	.word	0x00001561
    1194:	00002de1 	.word	0x00002de1

00001198 <timer_add_timer_task>:
    1198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119a:	6807      	ldr	r7, [r0, #0]
    119c:	b117      	cbz	r7, 11a4 <timer_add_timer_task+0xc>
    119e:	463c      	mov	r4, r7
    11a0:	2600      	movs	r6, #0
    11a2:	e00b      	b.n	11bc <timer_add_timer_task+0x24>
    11a4:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <timer_add_timer_task+0x48>)
    11a6:	4798      	blx	r3
    11a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11aa:	68a5      	ldr	r5, [r4, #8]
    11ac:	442b      	add	r3, r5
    11ae:	1a9b      	subs	r3, r3, r2
    11b0:	3301      	adds	r3, #1
    11b2:	688d      	ldr	r5, [r1, #8]
    11b4:	42ab      	cmp	r3, r5
    11b6:	d209      	bcs.n	11cc <timer_add_timer_task+0x34>
    11b8:	4626      	mov	r6, r4
    11ba:	6824      	ldr	r4, [r4, #0]
    11bc:	b134      	cbz	r4, 11cc <timer_add_timer_task+0x34>
    11be:	6863      	ldr	r3, [r4, #4]
    11c0:	4293      	cmp	r3, r2
    11c2:	d8f2      	bhi.n	11aa <timer_add_timer_task+0x12>
    11c4:	68a5      	ldr	r5, [r4, #8]
    11c6:	1a9b      	subs	r3, r3, r2
    11c8:	442b      	add	r3, r5
    11ca:	e7f2      	b.n	11b2 <timer_add_timer_task+0x1a>
    11cc:	42bc      	cmp	r4, r7
    11ce:	d003      	beq.n	11d8 <timer_add_timer_task+0x40>
    11d0:	4630      	mov	r0, r6
    11d2:	4b04      	ldr	r3, [pc, #16]	; (11e4 <timer_add_timer_task+0x4c>)
    11d4:	4798      	blx	r3
    11d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11d8:	4b01      	ldr	r3, [pc, #4]	; (11e0 <timer_add_timer_task+0x48>)
    11da:	4798      	blx	r3
    11dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11de:	bf00      	nop
    11e0:	0000157d 	.word	0x0000157d
    11e4:	000015a9 	.word	0x000015a9

000011e8 <timer_process_counted>:
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	6944      	ldr	r4, [r0, #20]
    11ec:	6906      	ldr	r6, [r0, #16]
    11ee:	3601      	adds	r6, #1
    11f0:	6106      	str	r6, [r0, #16]
    11f2:	7e03      	ldrb	r3, [r0, #24]
    11f4:	f013 0f01 	tst.w	r3, #1
    11f8:	d105      	bne.n	1206 <timer_process_counted+0x1e>
    11fa:	7e03      	ldrb	r3, [r0, #24]
    11fc:	f013 0f02 	tst.w	r3, #2
    1200:	d101      	bne.n	1206 <timer_process_counted+0x1e>
    1202:	4605      	mov	r5, r0
    1204:	e009      	b.n	121a <timer_process_counted+0x32>
    1206:	7e03      	ldrb	r3, [r0, #24]
    1208:	f043 0302 	orr.w	r3, r3, #2
    120c:	7603      	strb	r3, [r0, #24]
    120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1210:	696f      	ldr	r7, [r5, #20]
    1212:	68e3      	ldr	r3, [r4, #12]
    1214:	4620      	mov	r0, r4
    1216:	4798      	blx	r3
    1218:	463c      	mov	r4, r7
    121a:	b19c      	cbz	r4, 1244 <timer_process_counted+0x5c>
    121c:	6863      	ldr	r3, [r4, #4]
    121e:	1af3      	subs	r3, r6, r3
    1220:	68a2      	ldr	r2, [r4, #8]
    1222:	4293      	cmp	r3, r2
    1224:	d30e      	bcc.n	1244 <timer_process_counted+0x5c>
    1226:	f105 0714 	add.w	r7, r5, #20
    122a:	4638      	mov	r0, r7
    122c:	4b06      	ldr	r3, [pc, #24]	; (1248 <timer_process_counted+0x60>)
    122e:	4798      	blx	r3
    1230:	7c23      	ldrb	r3, [r4, #16]
    1232:	2b01      	cmp	r3, #1
    1234:	d1ec      	bne.n	1210 <timer_process_counted+0x28>
    1236:	6066      	str	r6, [r4, #4]
    1238:	4632      	mov	r2, r6
    123a:	4621      	mov	r1, r4
    123c:	4638      	mov	r0, r7
    123e:	4b03      	ldr	r3, [pc, #12]	; (124c <timer_process_counted+0x64>)
    1240:	4798      	blx	r3
    1242:	e7e5      	b.n	1210 <timer_process_counted+0x28>
    1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1246:	bf00      	nop
    1248:	000015b1 	.word	0x000015b1
    124c:	00001199 	.word	0x00001199

00001250 <timer_init>:
    1250:	b538      	push	{r3, r4, r5, lr}
    1252:	460d      	mov	r5, r1
    1254:	4604      	mov	r4, r0
    1256:	b180      	cbz	r0, 127a <timer_init+0x2a>
    1258:	b169      	cbz	r1, 1276 <timer_init+0x26>
    125a:	2001      	movs	r0, #1
    125c:	223b      	movs	r2, #59	; 0x3b
    125e:	4908      	ldr	r1, [pc, #32]	; (1280 <timer_init+0x30>)
    1260:	4b08      	ldr	r3, [pc, #32]	; (1284 <timer_init+0x34>)
    1262:	4798      	blx	r3
    1264:	4629      	mov	r1, r5
    1266:	4620      	mov	r0, r4
    1268:	4b07      	ldr	r3, [pc, #28]	; (1288 <timer_init+0x38>)
    126a:	4798      	blx	r3
    126c:	2000      	movs	r0, #0
    126e:	6120      	str	r0, [r4, #16]
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <timer_init+0x3c>)
    1272:	6023      	str	r3, [r4, #0]
    1274:	bd38      	pop	{r3, r4, r5, pc}
    1276:	2000      	movs	r0, #0
    1278:	e7f0      	b.n	125c <timer_init+0xc>
    127a:	2000      	movs	r0, #0
    127c:	e7ee      	b.n	125c <timer_init+0xc>
    127e:	bf00      	nop
    1280:	000045f0 	.word	0x000045f0
    1284:	00001561 	.word	0x00001561
    1288:	00002a65 	.word	0x00002a65
    128c:	000011e9 	.word	0x000011e9

00001290 <timer_start>:
    1290:	b510      	push	{r4, lr}
    1292:	4604      	mov	r4, r0
    1294:	2253      	movs	r2, #83	; 0x53
    1296:	4909      	ldr	r1, [pc, #36]	; (12bc <timer_start+0x2c>)
    1298:	3000      	adds	r0, #0
    129a:	bf18      	it	ne
    129c:	2001      	movne	r0, #1
    129e:	4b08      	ldr	r3, [pc, #32]	; (12c0 <timer_start+0x30>)
    12a0:	4798      	blx	r3
    12a2:	4620      	mov	r0, r4
    12a4:	4b07      	ldr	r3, [pc, #28]	; (12c4 <timer_start+0x34>)
    12a6:	4798      	blx	r3
    12a8:	b920      	cbnz	r0, 12b4 <timer_start+0x24>
    12aa:	4620      	mov	r0, r4
    12ac:	4b06      	ldr	r3, [pc, #24]	; (12c8 <timer_start+0x38>)
    12ae:	4798      	blx	r3
    12b0:	2000      	movs	r0, #0
    12b2:	bd10      	pop	{r4, pc}
    12b4:	f06f 0010 	mvn.w	r0, #16
    12b8:	bd10      	pop	{r4, pc}
    12ba:	bf00      	nop
    12bc:	000045f0 	.word	0x000045f0
    12c0:	00001561 	.word	0x00001561
    12c4:	00002e61 	.word	0x00002e61
    12c8:	00002db9 	.word	0x00002db9

000012cc <timer_add_task>:
    12cc:	b570      	push	{r4, r5, r6, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	460d      	mov	r5, r1
    12d2:	4604      	mov	r4, r0
    12d4:	b320      	cbz	r0, 1320 <timer_add_task+0x54>
    12d6:	b309      	cbz	r1, 131c <timer_add_task+0x50>
    12d8:	2001      	movs	r0, #1
    12da:	227a      	movs	r2, #122	; 0x7a
    12dc:	491f      	ldr	r1, [pc, #124]	; (135c <timer_add_task+0x90>)
    12de:	4b20      	ldr	r3, [pc, #128]	; (1360 <timer_add_task+0x94>)
    12e0:	4798      	blx	r3
    12e2:	7e23      	ldrb	r3, [r4, #24]
    12e4:	f043 0301 	orr.w	r3, r3, #1
    12e8:	7623      	strb	r3, [r4, #24]
    12ea:	f104 0614 	add.w	r6, r4, #20
    12ee:	4629      	mov	r1, r5
    12f0:	4630      	mov	r0, r6
    12f2:	4b1c      	ldr	r3, [pc, #112]	; (1364 <timer_add_task+0x98>)
    12f4:	4798      	blx	r3
    12f6:	b9a8      	cbnz	r0, 1324 <timer_add_task+0x58>
    12f8:	6923      	ldr	r3, [r4, #16]
    12fa:	606b      	str	r3, [r5, #4]
    12fc:	6922      	ldr	r2, [r4, #16]
    12fe:	4629      	mov	r1, r5
    1300:	4630      	mov	r0, r6
    1302:	4b19      	ldr	r3, [pc, #100]	; (1368 <timer_add_task+0x9c>)
    1304:	4798      	blx	r3
    1306:	7e23      	ldrb	r3, [r4, #24]
    1308:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    130c:	7623      	strb	r3, [r4, #24]
    130e:	7e23      	ldrb	r3, [r4, #24]
    1310:	f013 0f02 	tst.w	r3, #2
    1314:	d112      	bne.n	133c <timer_add_task+0x70>
    1316:	2000      	movs	r0, #0
    1318:	b002      	add	sp, #8
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	2000      	movs	r0, #0
    131e:	e7dc      	b.n	12da <timer_add_task+0xe>
    1320:	2000      	movs	r0, #0
    1322:	e7da      	b.n	12da <timer_add_task+0xe>
    1324:	7e23      	ldrb	r3, [r4, #24]
    1326:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    132a:	7623      	strb	r3, [r4, #24]
    132c:	227f      	movs	r2, #127	; 0x7f
    132e:	490b      	ldr	r1, [pc, #44]	; (135c <timer_add_task+0x90>)
    1330:	2000      	movs	r0, #0
    1332:	4b0b      	ldr	r3, [pc, #44]	; (1360 <timer_add_task+0x94>)
    1334:	4798      	blx	r3
    1336:	f06f 0011 	mvn.w	r0, #17
    133a:	e7ed      	b.n	1318 <timer_add_task+0x4c>
    133c:	a801      	add	r0, sp, #4
    133e:	4b0b      	ldr	r3, [pc, #44]	; (136c <timer_add_task+0xa0>)
    1340:	4798      	blx	r3
    1342:	7e23      	ldrb	r3, [r4, #24]
    1344:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1348:	7623      	strb	r3, [r4, #24]
    134a:	4620      	mov	r0, r4
    134c:	4b08      	ldr	r3, [pc, #32]	; (1370 <timer_add_task+0xa4>)
    134e:	4798      	blx	r3
    1350:	a801      	add	r0, sp, #4
    1352:	4b08      	ldr	r3, [pc, #32]	; (1374 <timer_add_task+0xa8>)
    1354:	4798      	blx	r3
    1356:	2000      	movs	r0, #0
    1358:	e7de      	b.n	1318 <timer_add_task+0x4c>
    135a:	bf00      	nop
    135c:	000045f0 	.word	0x000045f0
    1360:	00001561 	.word	0x00001561
    1364:	00001567 	.word	0x00001567
    1368:	00001199 	.word	0x00001199
    136c:	00000d41 	.word	0x00000d41
    1370:	00002e8d 	.word	0x00002e8d
    1374:	00000d4f 	.word	0x00000d4f

00001378 <usart_transmission_complete>:
    1378:	b508      	push	{r3, lr}
    137a:	2300      	movs	r3, #0
    137c:	6283      	str	r3, [r0, #40]	; 0x28
    137e:	69c3      	ldr	r3, [r0, #28]
    1380:	b11b      	cbz	r3, 138a <usart_transmission_complete+0x12>
    1382:	f1a0 0208 	sub.w	r2, r0, #8
    1386:	4610      	mov	r0, r2
    1388:	4798      	blx	r3
    138a:	bd08      	pop	{r3, pc}

0000138c <usart_error>:
    138c:	b508      	push	{r3, lr}
    138e:	2300      	movs	r3, #0
    1390:	6283      	str	r3, [r0, #40]	; 0x28
    1392:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1394:	b11b      	cbz	r3, 139e <usart_error+0x12>
    1396:	f1a0 0208 	sub.w	r2, r0, #8
    139a:	4610      	mov	r0, r2
    139c:	4798      	blx	r3
    139e:	bd08      	pop	{r3, pc}

000013a0 <usart_fill_rx_buffer>:
    13a0:	b538      	push	{r3, r4, r5, lr}
    13a2:	4604      	mov	r4, r0
    13a4:	f1a0 0508 	sub.w	r5, r0, #8
    13a8:	302c      	adds	r0, #44	; 0x2c
    13aa:	4b03      	ldr	r3, [pc, #12]	; (13b8 <usart_fill_rx_buffer+0x18>)
    13ac:	4798      	blx	r3
    13ae:	6a23      	ldr	r3, [r4, #32]
    13b0:	b10b      	cbz	r3, 13b6 <usart_fill_rx_buffer+0x16>
    13b2:	4628      	mov	r0, r5
    13b4:	4798      	blx	r3
    13b6:	bd38      	pop	{r3, r4, r5, pc}
    13b8:	0000164d 	.word	0x0000164d

000013bc <usart_async_write>:
    13bc:	b570      	push	{r4, r5, r6, lr}
    13be:	460e      	mov	r6, r1
    13c0:	4615      	mov	r5, r2
    13c2:	4604      	mov	r4, r0
    13c4:	b1d8      	cbz	r0, 13fe <usart_async_write+0x42>
    13c6:	b1e1      	cbz	r1, 1402 <usart_async_write+0x46>
    13c8:	b9ea      	cbnz	r2, 1406 <usart_async_write+0x4a>
    13ca:	2000      	movs	r0, #0
    13cc:	f240 123b 	movw	r2, #315	; 0x13b
    13d0:	490f      	ldr	r1, [pc, #60]	; (1410 <usart_async_write+0x54>)
    13d2:	4b10      	ldr	r3, [pc, #64]	; (1414 <usart_async_write+0x58>)
    13d4:	4798      	blx	r3
    13d6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    13da:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    13de:	429a      	cmp	r2, r3
    13e0:	d113      	bne.n	140a <usart_async_write+0x4e>
    13e2:	64a6      	str	r6, [r4, #72]	; 0x48
    13e4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    13e8:	2300      	movs	r3, #0
    13ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    13ee:	2301      	movs	r3, #1
    13f0:	6323      	str	r3, [r4, #48]	; 0x30
    13f2:	f104 0008 	add.w	r0, r4, #8
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <usart_async_write+0x5c>)
    13f8:	4798      	blx	r3
    13fa:	4628      	mov	r0, r5
    13fc:	bd70      	pop	{r4, r5, r6, pc}
    13fe:	2000      	movs	r0, #0
    1400:	e7e4      	b.n	13cc <usart_async_write+0x10>
    1402:	2000      	movs	r0, #0
    1404:	e7e2      	b.n	13cc <usart_async_write+0x10>
    1406:	2001      	movs	r0, #1
    1408:	e7e0      	b.n	13cc <usart_async_write+0x10>
    140a:	f06f 001b 	mvn.w	r0, #27
    140e:	bd70      	pop	{r4, r5, r6, pc}
    1410:	00004608 	.word	0x00004608
    1414:	00001561 	.word	0x00001561
    1418:	000028bb 	.word	0x000028bb

0000141c <usart_process_byte_sent>:
    141c:	b510      	push	{r4, lr}
    141e:	4604      	mov	r4, r0
    1420:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1422:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1426:	4293      	cmp	r3, r2
    1428:	d009      	beq.n	143e <usart_process_byte_sent+0x22>
    142a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    142c:	1c59      	adds	r1, r3, #1
    142e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1430:	5cd1      	ldrb	r1, [r2, r3]
    1432:	4b04      	ldr	r3, [pc, #16]	; (1444 <usart_process_byte_sent+0x28>)
    1434:	4798      	blx	r3
    1436:	4620      	mov	r0, r4
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <usart_process_byte_sent+0x2c>)
    143a:	4798      	blx	r3
    143c:	bd10      	pop	{r4, pc}
    143e:	4b03      	ldr	r3, [pc, #12]	; (144c <usart_process_byte_sent+0x30>)
    1440:	4798      	blx	r3
    1442:	bd10      	pop	{r4, pc}
    1444:	000028b5 	.word	0x000028b5
    1448:	000028bb 	.word	0x000028bb
    144c:	000028c3 	.word	0x000028c3

00001450 <usart_async_read>:
    1450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1454:	b082      	sub	sp, #8
    1456:	4688      	mov	r8, r1
    1458:	4616      	mov	r6, r2
    145a:	4605      	mov	r5, r0
    145c:	b1a0      	cbz	r0, 1488 <usart_async_read+0x38>
    145e:	b1a9      	cbz	r1, 148c <usart_async_read+0x3c>
    1460:	b9b2      	cbnz	r2, 1490 <usart_async_read+0x40>
    1462:	2000      	movs	r0, #0
    1464:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1468:	4912      	ldr	r1, [pc, #72]	; (14b4 <usart_async_read+0x64>)
    146a:	4b13      	ldr	r3, [pc, #76]	; (14b8 <usart_async_read+0x68>)
    146c:	4798      	blx	r3
    146e:	a801      	add	r0, sp, #4
    1470:	4b12      	ldr	r3, [pc, #72]	; (14bc <usart_async_read+0x6c>)
    1472:	4798      	blx	r3
    1474:	3534      	adds	r5, #52	; 0x34
    1476:	4628      	mov	r0, r5
    1478:	4b11      	ldr	r3, [pc, #68]	; (14c0 <usart_async_read+0x70>)
    147a:	4798      	blx	r3
    147c:	4607      	mov	r7, r0
    147e:	a801      	add	r0, sp, #4
    1480:	4b10      	ldr	r3, [pc, #64]	; (14c4 <usart_async_read+0x74>)
    1482:	4798      	blx	r3
    1484:	2400      	movs	r4, #0
    1486:	e00b      	b.n	14a0 <usart_async_read+0x50>
    1488:	2000      	movs	r0, #0
    148a:	e7eb      	b.n	1464 <usart_async_read+0x14>
    148c:	2000      	movs	r0, #0
    148e:	e7e9      	b.n	1464 <usart_async_read+0x14>
    1490:	2001      	movs	r0, #1
    1492:	e7e7      	b.n	1464 <usart_async_read+0x14>
    1494:	3401      	adds	r4, #1
    1496:	b2a4      	uxth	r4, r4
    1498:	4441      	add	r1, r8
    149a:	4628      	mov	r0, r5
    149c:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <usart_async_read+0x78>)
    149e:	4798      	blx	r3
    14a0:	4621      	mov	r1, r4
    14a2:	42a7      	cmp	r7, r4
    14a4:	d901      	bls.n	14aa <usart_async_read+0x5a>
    14a6:	42b4      	cmp	r4, r6
    14a8:	d3f4      	bcc.n	1494 <usart_async_read+0x44>
    14aa:	4620      	mov	r0, r4
    14ac:	b002      	add	sp, #8
    14ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14b2:	bf00      	nop
    14b4:	00004608 	.word	0x00004608
    14b8:	00001561 	.word	0x00001561
    14bc:	00000d41 	.word	0x00000d41
    14c0:	0000168d 	.word	0x0000168d
    14c4:	00000d4f 	.word	0x00000d4f
    14c8:	00001605 	.word	0x00001605

000014cc <usart_async_init>:
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	460d      	mov	r5, r1
    14d0:	4616      	mov	r6, r2
    14d2:	461f      	mov	r7, r3
    14d4:	4604      	mov	r4, r0
    14d6:	b318      	cbz	r0, 1520 <usart_async_init+0x54>
    14d8:	b321      	cbz	r1, 1524 <usart_async_init+0x58>
    14da:	b32a      	cbz	r2, 1528 <usart_async_init+0x5c>
    14dc:	bb33      	cbnz	r3, 152c <usart_async_init+0x60>
    14de:	2000      	movs	r0, #0
    14e0:	223a      	movs	r2, #58	; 0x3a
    14e2:	4915      	ldr	r1, [pc, #84]	; (1538 <usart_async_init+0x6c>)
    14e4:	4b15      	ldr	r3, [pc, #84]	; (153c <usart_async_init+0x70>)
    14e6:	4798      	blx	r3
    14e8:	463a      	mov	r2, r7
    14ea:	4631      	mov	r1, r6
    14ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
    14f0:	4b13      	ldr	r3, [pc, #76]	; (1540 <usart_async_init+0x74>)
    14f2:	4798      	blx	r3
    14f4:	b9e0      	cbnz	r0, 1530 <usart_async_init+0x64>
    14f6:	4629      	mov	r1, r5
    14f8:	f104 0008 	add.w	r0, r4, #8
    14fc:	4b11      	ldr	r3, [pc, #68]	; (1544 <usart_async_init+0x78>)
    14fe:	4798      	blx	r3
    1500:	4603      	mov	r3, r0
    1502:	b958      	cbnz	r0, 151c <usart_async_init+0x50>
    1504:	4a10      	ldr	r2, [pc, #64]	; (1548 <usart_async_init+0x7c>)
    1506:	6062      	str	r2, [r4, #4]
    1508:	4a10      	ldr	r2, [pc, #64]	; (154c <usart_async_init+0x80>)
    150a:	6022      	str	r2, [r4, #0]
    150c:	4a10      	ldr	r2, [pc, #64]	; (1550 <usart_async_init+0x84>)
    150e:	60a2      	str	r2, [r4, #8]
    1510:	4a10      	ldr	r2, [pc, #64]	; (1554 <usart_async_init+0x88>)
    1512:	60e2      	str	r2, [r4, #12]
    1514:	4a10      	ldr	r2, [pc, #64]	; (1558 <usart_async_init+0x8c>)
    1516:	6122      	str	r2, [r4, #16]
    1518:	4a10      	ldr	r2, [pc, #64]	; (155c <usart_async_init+0x90>)
    151a:	6162      	str	r2, [r4, #20]
    151c:	4618      	mov	r0, r3
    151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1520:	2000      	movs	r0, #0
    1522:	e7dd      	b.n	14e0 <usart_async_init+0x14>
    1524:	2000      	movs	r0, #0
    1526:	e7db      	b.n	14e0 <usart_async_init+0x14>
    1528:	2000      	movs	r0, #0
    152a:	e7d9      	b.n	14e0 <usart_async_init+0x14>
    152c:	2001      	movs	r0, #1
    152e:	e7d7      	b.n	14e0 <usart_async_init+0x14>
    1530:	f06f 030c 	mvn.w	r3, #12
    1534:	e7f2      	b.n	151c <usart_async_init+0x50>
    1536:	bf00      	nop
    1538:	00004608 	.word	0x00004608
    153c:	00001561 	.word	0x00001561
    1540:	000015c1 	.word	0x000015c1
    1544:	00002831 	.word	0x00002831
    1548:	00001451 	.word	0x00001451
    154c:	000013bd 	.word	0x000013bd
    1550:	0000141d 	.word	0x0000141d
    1554:	000013a1 	.word	0x000013a1
    1558:	00001379 	.word	0x00001379
    155c:	0000138d 	.word	0x0000138d

00001560 <assert>:
    1560:	b900      	cbnz	r0, 1564 <assert+0x4>
    1562:	be00      	bkpt	0x0000
    1564:	4770      	bx	lr

00001566 <is_list_element>:
    1566:	6803      	ldr	r3, [r0, #0]
    1568:	b11b      	cbz	r3, 1572 <is_list_element+0xc>
    156a:	428b      	cmp	r3, r1
    156c:	d003      	beq.n	1576 <is_list_element+0x10>
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	e7fa      	b.n	1568 <is_list_element+0x2>
    1572:	2000      	movs	r0, #0
    1574:	4770      	bx	lr
    1576:	2001      	movs	r0, #1
    1578:	4770      	bx	lr
	...

0000157c <list_insert_as_head>:
    157c:	b538      	push	{r3, r4, r5, lr}
    157e:	4604      	mov	r4, r0
    1580:	460d      	mov	r5, r1
    1582:	4b06      	ldr	r3, [pc, #24]	; (159c <list_insert_as_head+0x20>)
    1584:	4798      	blx	r3
    1586:	f080 0001 	eor.w	r0, r0, #1
    158a:	2239      	movs	r2, #57	; 0x39
    158c:	4904      	ldr	r1, [pc, #16]	; (15a0 <list_insert_as_head+0x24>)
    158e:	b2c0      	uxtb	r0, r0
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <list_insert_as_head+0x28>)
    1592:	4798      	blx	r3
    1594:	6823      	ldr	r3, [r4, #0]
    1596:	602b      	str	r3, [r5, #0]
    1598:	6025      	str	r5, [r4, #0]
    159a:	bd38      	pop	{r3, r4, r5, pc}
    159c:	00001567 	.word	0x00001567
    15a0:	00004628 	.word	0x00004628
    15a4:	00001561 	.word	0x00001561

000015a8 <list_insert_after>:
    15a8:	6803      	ldr	r3, [r0, #0]
    15aa:	600b      	str	r3, [r1, #0]
    15ac:	6001      	str	r1, [r0, #0]
    15ae:	4770      	bx	lr

000015b0 <list_remove_head>:
    15b0:	6803      	ldr	r3, [r0, #0]
    15b2:	b11b      	cbz	r3, 15bc <list_remove_head+0xc>
    15b4:	681a      	ldr	r2, [r3, #0]
    15b6:	6002      	str	r2, [r0, #0]
    15b8:	4618      	mov	r0, r3
    15ba:	4770      	bx	lr
    15bc:	2000      	movs	r0, #0
    15be:	4770      	bx	lr

000015c0 <ringbuffer_init>:
    15c0:	b570      	push	{r4, r5, r6, lr}
    15c2:	460e      	mov	r6, r1
    15c4:	4615      	mov	r5, r2
    15c6:	4604      	mov	r4, r0
    15c8:	b178      	cbz	r0, 15ea <ringbuffer_init+0x2a>
    15ca:	b181      	cbz	r1, 15ee <ringbuffer_init+0x2e>
    15cc:	b98a      	cbnz	r2, 15f2 <ringbuffer_init+0x32>
    15ce:	2000      	movs	r0, #0
    15d0:	2228      	movs	r2, #40	; 0x28
    15d2:	490a      	ldr	r1, [pc, #40]	; (15fc <ringbuffer_init+0x3c>)
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <ringbuffer_init+0x40>)
    15d6:	4798      	blx	r3
    15d8:	1e6b      	subs	r3, r5, #1
    15da:	421d      	tst	r5, r3
    15dc:	d10b      	bne.n	15f6 <ringbuffer_init+0x36>
    15de:	6063      	str	r3, [r4, #4]
    15e0:	2000      	movs	r0, #0
    15e2:	60a0      	str	r0, [r4, #8]
    15e4:	60e0      	str	r0, [r4, #12]
    15e6:	6026      	str	r6, [r4, #0]
    15e8:	bd70      	pop	{r4, r5, r6, pc}
    15ea:	2000      	movs	r0, #0
    15ec:	e7f0      	b.n	15d0 <ringbuffer_init+0x10>
    15ee:	2000      	movs	r0, #0
    15f0:	e7ee      	b.n	15d0 <ringbuffer_init+0x10>
    15f2:	2001      	movs	r0, #1
    15f4:	e7ec      	b.n	15d0 <ringbuffer_init+0x10>
    15f6:	f06f 000c 	mvn.w	r0, #12
    15fa:	bd70      	pop	{r4, r5, r6, pc}
    15fc:	00004648 	.word	0x00004648
    1600:	00001561 	.word	0x00001561

00001604 <ringbuffer_get>:
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	460d      	mov	r5, r1
    1608:	4604      	mov	r4, r0
    160a:	b1a8      	cbz	r0, 1638 <ringbuffer_get+0x34>
    160c:	b191      	cbz	r1, 1634 <ringbuffer_get+0x30>
    160e:	2001      	movs	r0, #1
    1610:	2240      	movs	r2, #64	; 0x40
    1612:	490c      	ldr	r1, [pc, #48]	; (1644 <ringbuffer_get+0x40>)
    1614:	4b0c      	ldr	r3, [pc, #48]	; (1648 <ringbuffer_get+0x44>)
    1616:	4798      	blx	r3
    1618:	68e2      	ldr	r2, [r4, #12]
    161a:	68a3      	ldr	r3, [r4, #8]
    161c:	429a      	cmp	r2, r3
    161e:	d00d      	beq.n	163c <ringbuffer_get+0x38>
    1620:	6822      	ldr	r2, [r4, #0]
    1622:	6861      	ldr	r1, [r4, #4]
    1624:	400b      	ands	r3, r1
    1626:	5cd3      	ldrb	r3, [r2, r3]
    1628:	702b      	strb	r3, [r5, #0]
    162a:	68a3      	ldr	r3, [r4, #8]
    162c:	3301      	adds	r3, #1
    162e:	60a3      	str	r3, [r4, #8]
    1630:	2000      	movs	r0, #0
    1632:	bd38      	pop	{r3, r4, r5, pc}
    1634:	2000      	movs	r0, #0
    1636:	e7eb      	b.n	1610 <ringbuffer_get+0xc>
    1638:	2000      	movs	r0, #0
    163a:	e7e9      	b.n	1610 <ringbuffer_get+0xc>
    163c:	f06f 0009 	mvn.w	r0, #9
    1640:	bd38      	pop	{r3, r4, r5, pc}
    1642:	bf00      	nop
    1644:	00004648 	.word	0x00004648
    1648:	00001561 	.word	0x00001561

0000164c <ringbuffer_put>:
    164c:	b538      	push	{r3, r4, r5, lr}
    164e:	460d      	mov	r5, r1
    1650:	4604      	mov	r4, r0
    1652:	2251      	movs	r2, #81	; 0x51
    1654:	490b      	ldr	r1, [pc, #44]	; (1684 <ringbuffer_put+0x38>)
    1656:	3000      	adds	r0, #0
    1658:	bf18      	it	ne
    165a:	2001      	movne	r0, #1
    165c:	4b0a      	ldr	r3, [pc, #40]	; (1688 <ringbuffer_put+0x3c>)
    165e:	4798      	blx	r3
    1660:	6822      	ldr	r2, [r4, #0]
    1662:	68e3      	ldr	r3, [r4, #12]
    1664:	6861      	ldr	r1, [r4, #4]
    1666:	400b      	ands	r3, r1
    1668:	54d5      	strb	r5, [r2, r3]
    166a:	68e3      	ldr	r3, [r4, #12]
    166c:	68a2      	ldr	r2, [r4, #8]
    166e:	1a9a      	subs	r2, r3, r2
    1670:	6861      	ldr	r1, [r4, #4]
    1672:	428a      	cmp	r2, r1
    1674:	d901      	bls.n	167a <ringbuffer_put+0x2e>
    1676:	1a59      	subs	r1, r3, r1
    1678:	60a1      	str	r1, [r4, #8]
    167a:	3301      	adds	r3, #1
    167c:	60e3      	str	r3, [r4, #12]
    167e:	2000      	movs	r0, #0
    1680:	bd38      	pop	{r3, r4, r5, pc}
    1682:	bf00      	nop
    1684:	00004648 	.word	0x00004648
    1688:	00001561 	.word	0x00001561

0000168c <ringbuffer_num>:
    168c:	b510      	push	{r4, lr}
    168e:	4604      	mov	r4, r0
    1690:	2267      	movs	r2, #103	; 0x67
    1692:	4905      	ldr	r1, [pc, #20]	; (16a8 <ringbuffer_num+0x1c>)
    1694:	3000      	adds	r0, #0
    1696:	bf18      	it	ne
    1698:	2001      	movne	r0, #1
    169a:	4b04      	ldr	r3, [pc, #16]	; (16ac <ringbuffer_num+0x20>)
    169c:	4798      	blx	r3
    169e:	68e0      	ldr	r0, [r4, #12]
    16a0:	68a3      	ldr	r3, [r4, #8]
    16a2:	1ac0      	subs	r0, r0, r3
    16a4:	bd10      	pop	{r4, pc}
    16a6:	bf00      	nop
    16a8:	00004648 	.word	0x00004648
    16ac:	00001561 	.word	0x00001561

000016b0 <_adc_get_hardware_index>:
    16b0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    16b4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    16b8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    16bc:	4770      	bx	lr
	...
=======
	ASSERT(mci);
     fdc:	4604      	mov	r4, r0
     fde:	2256      	movs	r2, #86	; 0x56
     fe0:	4905      	ldr	r1, [pc, #20]	; (ff8 <mci_sync_get_bus_width+0x20>)
     fe2:	3000      	adds	r0, #0
     fe4:	bf18      	it	ne
     fe6:	2001      	movne	r0, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <mci_sync_get_bus_width+0x24>)
     fea:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
     fec:	4629      	mov	r1, r5
     fee:	4620      	mov	r0, r4
     ff0:	4b03      	ldr	r3, [pc, #12]	; (1000 <mci_sync_get_bus_width+0x28>)
     ff2:	4798      	blx	r3
}
     ff4:	bd38      	pop	{r3, r4, r5, pc}
     ff6:	bf00      	nop
     ff8:	00005124 	.word	0x00005124
     ffc:	00001671 	.word	0x00001671
    1000:	00002489 	.word	0x00002489

00001004 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    1004:	b510      	push	{r4, lr}
	ASSERT(mci);
    1006:	4604      	mov	r4, r0
    1008:	2260      	movs	r2, #96	; 0x60
    100a:	4905      	ldr	r1, [pc, #20]	; (1020 <mci_sync_is_high_speed_capable+0x1c>)
    100c:	3000      	adds	r0, #0
    100e:	bf18      	it	ne
    1010:	2001      	movne	r0, #1
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <mci_sync_is_high_speed_capable+0x20>)
    1014:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    1016:	4620      	mov	r0, r4
    1018:	4b03      	ldr	r3, [pc, #12]	; (1028 <mci_sync_is_high_speed_capable+0x24>)
    101a:	4798      	blx	r3
}
    101c:	bd10      	pop	{r4, pc}
    101e:	bf00      	nop
    1020:	00005124 	.word	0x00005124
    1024:	00001671 	.word	0x00001671
    1028:	00002493 	.word	0x00002493
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

000016c0 <_adc_init>:
    16c0:	b410      	push	{r4}
    16c2:	4b60      	ldr	r3, [pc, #384]	; (1844 <_adc_init+0x184>)
    16c4:	4298      	cmp	r0, r3
    16c6:	f000 809c 	beq.w	1802 <_adc_init+0x142>
    16ca:	4b5f      	ldr	r3, [pc, #380]	; (1848 <_adc_init+0x188>)
    16cc:	4298      	cmp	r0, r3
    16ce:	f000 80a8 	beq.w	1822 <_adc_init+0x162>
    16d2:	2200      	movs	r2, #0
    16d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16d6:	f013 0f01 	tst.w	r3, #1
    16da:	d11b      	bne.n	1714 <_adc_init+0x54>
    16dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16de:	f013 0f03 	tst.w	r3, #3
    16e2:	d1fb      	bne.n	16dc <_adc_init+0x1c>
    16e4:	8803      	ldrh	r3, [r0, #0]
    16e6:	f013 0f02 	tst.w	r3, #2
    16ea:	d00d      	beq.n	1708 <_adc_init+0x48>
    16ec:	8803      	ldrh	r3, [r0, #0]
    16ee:	b29b      	uxth	r3, r3
    16f0:	f023 0302 	bic.w	r3, r3, #2
    16f4:	b29b      	uxth	r3, r3
    16f6:	8003      	strh	r3, [r0, #0]
    16f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16fa:	f013 0f03 	tst.w	r3, #3
    16fe:	d1fb      	bne.n	16f8 <_adc_init+0x38>
    1700:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1702:	f013 0f02 	tst.w	r3, #2
    1706:	d1fb      	bne.n	1700 <_adc_init+0x40>
    1708:	2301      	movs	r3, #1
    170a:	8003      	strh	r3, [r0, #0]
    170c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    170e:	f013 0f03 	tst.w	r3, #3
    1712:	d1fb      	bne.n	170c <_adc_init+0x4c>
    1714:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1716:	f013 0f01 	tst.w	r3, #1
    171a:	d1fb      	bne.n	1714 <_adc_init+0x54>
    171c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    1720:	2316      	movs	r3, #22
    1722:	4a4a      	ldr	r2, [pc, #296]	; (184c <_adc_init+0x18c>)
    1724:	fb03 2301 	mla	r3, r3, r1, r2
    1728:	889b      	ldrh	r3, [r3, #4]
    172a:	80c3      	strh	r3, [r0, #6]
    172c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    172e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1732:	2b00      	cmp	r3, #0
    1734:	d1fa      	bne.n	172c <_adc_init+0x6c>
    1736:	2316      	movs	r3, #22
    1738:	4a44      	ldr	r2, [pc, #272]	; (184c <_adc_init+0x18c>)
    173a:	fb03 2301 	mla	r3, r3, r1, r2
    173e:	799b      	ldrb	r3, [r3, #6]
    1740:	7203      	strb	r3, [r0, #8]
    1742:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1744:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1748:	2b00      	cmp	r3, #0
    174a:	d1fa      	bne.n	1742 <_adc_init+0x82>
    174c:	2316      	movs	r3, #22
    174e:	4a3f      	ldr	r2, [pc, #252]	; (184c <_adc_init+0x18c>)
    1750:	fb03 2301 	mla	r3, r3, r1, r2
    1754:	79da      	ldrb	r2, [r3, #7]
    1756:	7082      	strb	r2, [r0, #2]
    1758:	891b      	ldrh	r3, [r3, #8]
    175a:	8083      	strh	r3, [r0, #4]
    175c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    175e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1762:	2b00      	cmp	r3, #0
    1764:	d1fa      	bne.n	175c <_adc_init+0x9c>
    1766:	2316      	movs	r3, #22
    1768:	4a38      	ldr	r2, [pc, #224]	; (184c <_adc_init+0x18c>)
    176a:	fb03 2301 	mla	r3, r3, r1, r2
    176e:	7a9b      	ldrb	r3, [r3, #10]
    1770:	7283      	strb	r3, [r0, #10]
    1772:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1774:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1778:	2b00      	cmp	r3, #0
    177a:	d1fa      	bne.n	1772 <_adc_init+0xb2>
    177c:	2316      	movs	r3, #22
    177e:	4a33      	ldr	r2, [pc, #204]	; (184c <_adc_init+0x18c>)
    1780:	fb03 2301 	mla	r3, r3, r1, r2
    1784:	7adb      	ldrb	r3, [r3, #11]
    1786:	72c3      	strb	r3, [r0, #11]
    1788:	6b03      	ldr	r3, [r0, #48]	; 0x30
    178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    178e:	2b00      	cmp	r3, #0
    1790:	d1fa      	bne.n	1788 <_adc_init+0xc8>
    1792:	2316      	movs	r3, #22
    1794:	4a2d      	ldr	r2, [pc, #180]	; (184c <_adc_init+0x18c>)
    1796:	fb03 2301 	mla	r3, r3, r1, r2
    179a:	899b      	ldrh	r3, [r3, #12]
    179c:	8183      	strh	r3, [r0, #12]
    179e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    17a4:	d1fb      	bne.n	179e <_adc_init+0xde>
    17a6:	2316      	movs	r3, #22
    17a8:	4a28      	ldr	r2, [pc, #160]	; (184c <_adc_init+0x18c>)
    17aa:	fb03 2301 	mla	r3, r3, r1, r2
    17ae:	89db      	ldrh	r3, [r3, #14]
    17b0:	81c3      	strh	r3, [r0, #14]
    17b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    17b8:	d1fb      	bne.n	17b2 <_adc_init+0xf2>
    17ba:	2316      	movs	r3, #22
    17bc:	4a23      	ldr	r2, [pc, #140]	; (184c <_adc_init+0x18c>)
    17be:	fb03 2301 	mla	r3, r3, r1, r2
    17c2:	8a1b      	ldrh	r3, [r3, #16]
    17c4:	8203      	strh	r3, [r0, #16]
    17c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17c8:	f413 7f00 	tst.w	r3, #512	; 0x200
    17cc:	d1fb      	bne.n	17c6 <_adc_init+0x106>
    17ce:	2316      	movs	r3, #22
    17d0:	4a1e      	ldr	r2, [pc, #120]	; (184c <_adc_init+0x18c>)
    17d2:	fb03 2301 	mla	r3, r3, r1, r2
    17d6:	8a5b      	ldrh	r3, [r3, #18]
    17d8:	8243      	strh	r3, [r0, #18]
    17da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17e0:	d1fb      	bne.n	17da <_adc_init+0x11a>
    17e2:	2216      	movs	r2, #22
    17e4:	4b19      	ldr	r3, [pc, #100]	; (184c <_adc_init+0x18c>)
    17e6:	fb02 3101 	mla	r1, r2, r1, r3
    17ea:	7d0b      	ldrb	r3, [r1, #20]
    17ec:	70c3      	strb	r3, [r0, #3]
    17ee:	884b      	ldrh	r3, [r1, #2]
    17f0:	8003      	strh	r3, [r0, #0]
    17f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17f4:	f013 0f03 	tst.w	r3, #3
    17f8:	d1fb      	bne.n	17f2 <_adc_init+0x132>
    17fa:	2000      	movs	r0, #0
    17fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1800:	4770      	bx	lr
    1802:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	095a      	lsrs	r2, r3, #5
    180a:	0212      	lsls	r2, r2, #8
    180c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1810:	0a1c      	lsrs	r4, r3, #8
    1812:	0124      	lsls	r4, r4, #4
    1814:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1818:	4322      	orrs	r2, r4
    181a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    181e:	431a      	orrs	r2, r3
    1820:	e758      	b.n	16d4 <_adc_init+0x14>
    1822:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	0cda      	lsrs	r2, r3, #19
    182a:	0212      	lsls	r2, r2, #8
    182c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1830:	0d9c      	lsrs	r4, r3, #22
    1832:	0124      	lsls	r4, r4, #4
    1834:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1838:	4322      	orrs	r2, r4
    183a:	f3c3 4302 	ubfx	r3, r3, #16, #3
    183e:	431a      	orrs	r2, r3
    1840:	e748      	b.n	16d4 <_adc_init+0x14>
    1842:	bf00      	nop
    1844:	43001c00 	.word	0x43001c00
    1848:	43002000 	.word	0x43002000
    184c:	0000466c 	.word	0x0000466c

00001850 <_adc_get_regs>:
    1850:	b508      	push	{r3, lr}
    1852:	4b0b      	ldr	r3, [pc, #44]	; (1880 <_adc_get_regs+0x30>)
    1854:	4798      	blx	r3
    1856:	2300      	movs	r3, #0
    1858:	b13b      	cbz	r3, 186a <_adc_get_regs+0x1a>
    185a:	2288      	movs	r2, #136	; 0x88
    185c:	4909      	ldr	r1, [pc, #36]	; (1884 <_adc_get_regs+0x34>)
    185e:	2000      	movs	r0, #0
    1860:	4b09      	ldr	r3, [pc, #36]	; (1888 <_adc_get_regs+0x38>)
    1862:	4798      	blx	r3
    1864:	2300      	movs	r3, #0
    1866:	4618      	mov	r0, r3
    1868:	bd08      	pop	{r3, pc}
    186a:	2216      	movs	r2, #22
    186c:	fb02 f203 	mul.w	r2, r2, r3
    1870:	4906      	ldr	r1, [pc, #24]	; (188c <_adc_get_regs+0x3c>)
    1872:	5c8a      	ldrb	r2, [r1, r2]
    1874:	4290      	cmp	r0, r2
    1876:	d0f6      	beq.n	1866 <_adc_get_regs+0x16>
    1878:	3301      	adds	r3, #1
    187a:	b2db      	uxtb	r3, r3
    187c:	e7ec      	b.n	1858 <_adc_get_regs+0x8>
    187e:	bf00      	nop
    1880:	000016b1 	.word	0x000016b1
    1884:	00004684 	.word	0x00004684
    1888:	00001561 	.word	0x00001561
    188c:	0000466c 	.word	0x0000466c

00001890 <_adc_sync_init>:
    1890:	b538      	push	{r3, r4, r5, lr}
    1892:	460c      	mov	r4, r1
    1894:	4605      	mov	r5, r0
    1896:	22d9      	movs	r2, #217	; 0xd9
    1898:	4907      	ldr	r1, [pc, #28]	; (18b8 <_adc_sync_init+0x28>)
    189a:	3000      	adds	r0, #0
    189c:	bf18      	it	ne
    189e:	2001      	movne	r0, #1
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <_adc_sync_init+0x2c>)
    18a2:	4798      	blx	r3
    18a4:	602c      	str	r4, [r5, #0]
    18a6:	4620      	mov	r0, r4
    18a8:	4b05      	ldr	r3, [pc, #20]	; (18c0 <_adc_sync_init+0x30>)
    18aa:	4798      	blx	r3
    18ac:	4601      	mov	r1, r0
    18ae:	4620      	mov	r0, r4
    18b0:	4b04      	ldr	r3, [pc, #16]	; (18c4 <_adc_sync_init+0x34>)
    18b2:	4798      	blx	r3
    18b4:	bd38      	pop	{r3, r4, r5, pc}
    18b6:	bf00      	nop
    18b8:	00004684 	.word	0x00004684
    18bc:	00001561 	.word	0x00001561
    18c0:	00001851 	.word	0x00001851
    18c4:	000016c1 	.word	0x000016c1

000018c8 <_adc_sync_enable_channel>:
    18c8:	6802      	ldr	r2, [r0, #0]
    18ca:	8813      	ldrh	r3, [r2, #0]
    18cc:	b29b      	uxth	r3, r3
    18ce:	f043 0302 	orr.w	r3, r3, #2
    18d2:	8013      	strh	r3, [r2, #0]
    18d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    18d6:	f013 0f03 	tst.w	r3, #3
    18da:	d1fb      	bne.n	18d4 <_adc_sync_enable_channel+0xc>
    18dc:	4770      	bx	lr

000018de <_adc_sync_get_data_size>:
    18de:	6803      	ldr	r3, [r0, #0]
    18e0:	88db      	ldrh	r3, [r3, #6]
    18e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    18e6:	2b03      	cmp	r3, #3
    18e8:	d001      	beq.n	18ee <_adc_sync_get_data_size+0x10>
    18ea:	2002      	movs	r0, #2
    18ec:	4770      	bx	lr
    18ee:	2001      	movs	r0, #1
    18f0:	4770      	bx	lr

000018f2 <_adc_sync_is_channel_conversion_done>:
    18f2:	6803      	ldr	r3, [r0, #0]
    18f4:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
    18f8:	f000 0001 	and.w	r0, r0, #1
    18fc:	4770      	bx	lr

000018fe <_adc_sync_convert>:
    18fe:	6802      	ldr	r2, [r0, #0]
    1900:	7d13      	ldrb	r3, [r2, #20]
    1902:	f043 0302 	orr.w	r3, r3, #2
    1906:	7513      	strb	r3, [r2, #20]
    1908:	6b13      	ldr	r3, [r2, #48]	; 0x30
    190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    190e:	2b00      	cmp	r3, #0
    1910:	d1fa      	bne.n	1908 <_adc_sync_convert+0xa>
    1912:	4770      	bx	lr

00001914 <_adc_sync_read_channel_data>:
    1914:	6803      	ldr	r3, [r0, #0]
    1916:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
    191a:	b280      	uxth	r0, r0
    191c:	4770      	bx	lr
	...

00001920 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1920:	0943      	lsrs	r3, r0, #5
    1922:	f000 001f 	and.w	r0, r0, #31
    1926:	2201      	movs	r2, #1
    1928:	fa02 f000 	lsl.w	r0, r2, r0
    192c:	3340      	adds	r3, #64	; 0x40
    192e:	4a02      	ldr	r2, [pc, #8]	; (1938 <_irq_set+0x18>)
    1930:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1934:	4770      	bx	lr
    1936:	bf00      	nop
    1938:	e000e100 	.word	0xe000e100

0000193c <_get_cycles_for_us>:
    193c:	f44f 7316 	mov.w	r3, #600	; 0x258
    1940:	fb03 f000 	mul.w	r0, r3, r0
    1944:	3801      	subs	r0, #1
    1946:	4b03      	ldr	r3, [pc, #12]	; (1954 <_get_cycles_for_us+0x18>)
    1948:	fba3 3000 	umull	r3, r0, r3, r0
    194c:	08c0      	lsrs	r0, r0, #3
    194e:	3001      	adds	r0, #1
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	cccccccd 	.word	0xcccccccd

00001958 <_get_cycles_for_ms>:
    1958:	f44f 7316 	mov.w	r3, #600	; 0x258
    195c:	fb03 f000 	mul.w	r0, r3, r0
    1960:	2364      	movs	r3, #100	; 0x64
    1962:	fb03 f000 	mul.w	r0, r3, r0
    1966:	4770      	bx	lr

00001968 <_init_chip>:
    1968:	b510      	push	{r4, lr}
    196a:	4a0d      	ldr	r2, [pc, #52]	; (19a0 <_init_chip+0x38>)
    196c:	8813      	ldrh	r3, [r2, #0]
    196e:	b29b      	uxth	r3, r3
    1970:	8013      	strh	r3, [r2, #0]
    1972:	4b0c      	ldr	r3, [pc, #48]	; (19a4 <_init_chip+0x3c>)
    1974:	4798      	blx	r3
    1976:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <_init_chip+0x40>)
    1978:	4798      	blx	r3
    197a:	4b0c      	ldr	r3, [pc, #48]	; (19ac <_init_chip+0x44>)
    197c:	4798      	blx	r3
    197e:	200c      	movs	r0, #12
    1980:	4c0b      	ldr	r4, [pc, #44]	; (19b0 <_init_chip+0x48>)
    1982:	47a0      	blx	r4
    1984:	4b0b      	ldr	r3, [pc, #44]	; (19b4 <_init_chip+0x4c>)
    1986:	4798      	blx	r3
    1988:	f640 70f3 	movw	r0, #4083	; 0xff3
    198c:	47a0      	blx	r4
    198e:	4a0a      	ldr	r2, [pc, #40]	; (19b8 <_init_chip+0x50>)
    1990:	6913      	ldr	r3, [r2, #16]
    1992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1996:	6113      	str	r3, [r2, #16]
    1998:	4b08      	ldr	r3, [pc, #32]	; (19bc <_init_chip+0x54>)
    199a:	4798      	blx	r3
    199c:	bd10      	pop	{r4, pc}
    199e:	bf00      	nop
    19a0:	41004000 	.word	0x41004000
    19a4:	00001e59 	.word	0x00001e59
    19a8:	00001e79 	.word	0x00001e79
    19ac:	00001e4d 	.word	0x00001e4d
    19b0:	00001dd5 	.word	0x00001dd5
    19b4:	00001e7d 	.word	0x00001e7d
    19b8:	40000800 	.word	0x40000800
    19bc:	00001a29 	.word	0x00001a29

000019c0 <_dmac_handler>:
    19c0:	b508      	push	{r3, lr}
    19c2:	4a17      	ldr	r2, [pc, #92]	; (1a20 <_dmac_handler+0x60>)
    19c4:	8c13      	ldrh	r3, [r2, #32]
    19c6:	f003 031f 	and.w	r3, r3, #31
    19ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19ce:	0088      	lsls	r0, r1, #2
    19d0:	4914      	ldr	r1, [pc, #80]	; (1a24 <_dmac_handler+0x64>)
    19d2:	4408      	add	r0, r1
    19d4:	8c12      	ldrh	r2, [r2, #32]
    19d6:	f412 7f80 	tst.w	r2, #256	; 0x100
    19da:	d105      	bne.n	19e8 <_dmac_handler+0x28>
    19dc:	4a10      	ldr	r2, [pc, #64]	; (1a20 <_dmac_handler+0x60>)
    19de:	8c12      	ldrh	r2, [r2, #32]
    19e0:	f412 7f00 	tst.w	r2, #512	; 0x200
    19e4:	d10b      	bne.n	19fe <_dmac_handler+0x3e>
    19e6:	bd08      	pop	{r3, pc}
    19e8:	011a      	lsls	r2, r3, #4
    19ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    19ee:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    19f2:	2101      	movs	r1, #1
    19f4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
    19f8:	6843      	ldr	r3, [r0, #4]
    19fa:	4798      	blx	r3
    19fc:	bd08      	pop	{r3, pc}
    19fe:	011a      	lsls	r2, r3, #4
    1a00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a04:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1a08:	2102      	movs	r1, #2
    1a0a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
    1a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a12:	fa03 f201 	lsl.w	r2, r3, r1
    1a16:	4b03      	ldr	r3, [pc, #12]	; (1a24 <_dmac_handler+0x64>)
    1a18:	589b      	ldr	r3, [r3, r2]
    1a1a:	4798      	blx	r3
    1a1c:	e7e3      	b.n	19e6 <_dmac_handler+0x26>
    1a1e:	bf00      	nop
    1a20:	4100a000 	.word	0x4100a000
    1a24:	20000090 	.word	0x20000090

00001a28 <_dma_init>:
    1a28:	b430      	push	{r4, r5}
    1a2a:	4a3c      	ldr	r2, [pc, #240]	; (1b1c <_dma_init+0xf4>)
    1a2c:	8813      	ldrh	r3, [r2, #0]
    1a2e:	b29b      	uxth	r3, r3
    1a30:	f023 0302 	bic.w	r3, r3, #2
    1a34:	b29b      	uxth	r3, r3
    1a36:	8013      	strh	r3, [r2, #0]
    1a38:	8853      	ldrh	r3, [r2, #2]
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1a40:	b29b      	uxth	r3, r3
    1a42:	8053      	strh	r3, [r2, #2]
    1a44:	8813      	ldrh	r3, [r2, #0]
    1a46:	b29b      	uxth	r3, r3
    1a48:	f043 0301 	orr.w	r3, r3, #1
    1a4c:	8013      	strh	r3, [r2, #0]
    1a4e:	4b33      	ldr	r3, [pc, #204]	; (1b1c <_dma_init+0xf4>)
    1a50:	881b      	ldrh	r3, [r3, #0]
    1a52:	f013 0f01 	tst.w	r3, #1
    1a56:	d1fa      	bne.n	1a4e <_dma_init+0x26>
    1a58:	4a30      	ldr	r2, [pc, #192]	; (1b1c <_dma_init+0xf4>)
    1a5a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1a5e:	8013      	strh	r3, [r2, #0]
    1a60:	7b53      	ldrb	r3, [r2, #13]
    1a62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1a66:	7353      	strb	r3, [r2, #13]
    1a68:	2300      	movs	r3, #0
    1a6a:	6153      	str	r3, [r2, #20]
    1a6c:	492c      	ldr	r1, [pc, #176]	; (1b20 <_dma_init+0xf8>)
    1a6e:	6351      	str	r1, [r2, #52]	; 0x34
    1a70:	492c      	ldr	r1, [pc, #176]	; (1b24 <_dma_init+0xfc>)
    1a72:	6391      	str	r1, [r2, #56]	; 0x38
    1a74:	e016      	b.n	1aa4 <_dma_init+0x7c>
    1a76:	4a2c      	ldr	r2, [pc, #176]	; (1b28 <_dma_init+0x100>)
    1a78:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
    1a7c:	4c27      	ldr	r4, [pc, #156]	; (1b1c <_dma_init+0xf4>)
    1a7e:	1d19      	adds	r1, r3, #4
    1a80:	0109      	lsls	r1, r1, #4
    1a82:	1860      	adds	r0, r4, r1
    1a84:	5065      	str	r5, [r4, r1]
    1a86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1a8a:	7911      	ldrb	r1, [r2, #4]
    1a8c:	7141      	strb	r1, [r0, #5]
    1a8e:	7951      	ldrb	r1, [r2, #5]
    1a90:	7181      	strb	r1, [r0, #6]
    1a92:	88d4      	ldrh	r4, [r2, #6]
    1a94:	4922      	ldr	r1, [pc, #136]	; (1b20 <_dma_init+0xf8>)
    1a96:	011a      	lsls	r2, r3, #4
    1a98:	1888      	adds	r0, r1, r2
    1a9a:	528c      	strh	r4, [r1, r2]
    1a9c:	2200      	movs	r2, #0
    1a9e:	60c2      	str	r2, [r0, #12]
    1aa0:	3301      	adds	r3, #1
    1aa2:	b2db      	uxtb	r3, r3
    1aa4:	2b1f      	cmp	r3, #31
    1aa6:	d9e6      	bls.n	1a76 <_dma_init+0x4e>
    1aa8:	2300      	movs	r3, #0
    1aaa:	e00a      	b.n	1ac2 <_dma_init+0x9a>
    1aac:	f103 011f 	add.w	r1, r3, #31
    1ab0:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	da10      	bge.n	1ad8 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
=======
    102c:	b510      	push	{r4, lr}
	ASSERT(mci);
    102e:	4604      	mov	r4, r0
    1030:	2269      	movs	r2, #105	; 0x69
    1032:	4905      	ldr	r1, [pc, #20]	; (1048 <mci_sync_send_clock+0x1c>)
    1034:	3000      	adds	r0, #0
    1036:	bf18      	it	ne
    1038:	2001      	movne	r0, #1
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <mci_sync_send_clock+0x20>)
    103c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    103e:	4620      	mov	r0, r4
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <mci_sync_send_clock+0x24>)
    1042:	4798      	blx	r3
    1044:	bd10      	pop	{r4, pc}
    1046:	bf00      	nop
    1048:	00005124 	.word	0x00005124
    104c:	00001671 	.word	0x00001671
    1050:	0000249d 	.word	0x0000249d

00001054 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
  if ((int32_t)(IRQn) >= 0)
    1ab6:	2a00      	cmp	r2, #0
    1ab8:	da1c      	bge.n	1af4 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1aba:	2a00      	cmp	r2, #0
    1abc:	da24      	bge.n	1b08 <_dma_init+0xe0>
    1abe:	3301      	adds	r3, #1
    1ac0:	b2db      	uxtb	r3, r3
    1ac2:	2b04      	cmp	r3, #4
    1ac4:	d9f2      	bls.n	1aac <_dma_init+0x84>
    1ac6:	4a15      	ldr	r2, [pc, #84]	; (1b1c <_dma_init+0xf4>)
    1ac8:	8813      	ldrh	r3, [r2, #0]
    1aca:	b29b      	uxth	r3, r3
    1acc:	f043 0302 	orr.w	r3, r3, #2
    1ad0:	8013      	strh	r3, [r2, #0]
    1ad2:	2000      	movs	r0, #0
    1ad4:	bc30      	pop	{r4, r5}
    1ad6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ad8:	0950      	lsrs	r0, r2, #5
    1ada:	f001 051f 	and.w	r5, r1, #31
    1ade:	2401      	movs	r4, #1
    1ae0:	40ac      	lsls	r4, r5
    1ae2:	3020      	adds	r0, #32
    1ae4:	4d11      	ldr	r5, [pc, #68]	; (1b2c <_dma_init+0x104>)
    1ae6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1aea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aee:	f3bf 8f6f 	isb	sy
    1af2:	e7e0      	b.n	1ab6 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1af4:	0950      	lsrs	r0, r2, #5
    1af6:	f001 051f 	and.w	r5, r1, #31
    1afa:	2401      	movs	r4, #1
    1afc:	40ac      	lsls	r4, r5
    1afe:	3060      	adds	r0, #96	; 0x60
    1b00:	4d0a      	ldr	r5, [pc, #40]	; (1b2c <_dma_init+0x104>)
    1b02:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1b06:	e7d8      	b.n	1aba <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b08:	0952      	lsrs	r2, r2, #5
    1b0a:	f001 011f 	and.w	r1, r1, #31
    1b0e:	2001      	movs	r0, #1
    1b10:	fa00 f101 	lsl.w	r1, r0, r1
    1b14:	4805      	ldr	r0, [pc, #20]	; (1b2c <_dma_init+0x104>)
    1b16:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1b1a:	e7d0      	b.n	1abe <_dma_init+0x96>
    1b1c:	4100a000 	.word	0x4100a000
    1b20:	20000760 	.word	0x20000760
    1b24:	20000960 	.word	0x20000960
    1b28:	0000469c 	.word	0x0000469c
    1b2c:	e000e100 	.word	0xe000e100

00001b30 <_dma_get_channel_resource>:
    1b30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1b34:	008a      	lsls	r2, r1, #2
    1b36:	4b02      	ldr	r3, [pc, #8]	; (1b40 <_dma_get_channel_resource+0x10>)
    1b38:	4413      	add	r3, r2
    1b3a:	6003      	str	r3, [r0, #0]
    1b3c:	2000      	movs	r0, #0
    1b3e:	4770      	bx	lr
    1b40:	20000090 	.word	0x20000090

00001b44 <DMAC_0_Handler>:
    1b44:	b508      	push	{r3, lr}
    1b46:	4b01      	ldr	r3, [pc, #4]	; (1b4c <DMAC_0_Handler+0x8>)
    1b48:	4798      	blx	r3
    1b4a:	bd08      	pop	{r3, pc}
    1b4c:	000019c1 	.word	0x000019c1

00001b50 <DMAC_1_Handler>:
    1b50:	b508      	push	{r3, lr}
    1b52:	4b01      	ldr	r3, [pc, #4]	; (1b58 <DMAC_1_Handler+0x8>)
    1b54:	4798      	blx	r3
    1b56:	bd08      	pop	{r3, pc}
    1b58:	000019c1 	.word	0x000019c1

00001b5c <DMAC_2_Handler>:
    1b5c:	b508      	push	{r3, lr}
    1b5e:	4b01      	ldr	r3, [pc, #4]	; (1b64 <DMAC_2_Handler+0x8>)
    1b60:	4798      	blx	r3
    1b62:	bd08      	pop	{r3, pc}
    1b64:	000019c1 	.word	0x000019c1

00001b68 <DMAC_3_Handler>:
    1b68:	b508      	push	{r3, lr}
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <DMAC_3_Handler+0x8>)
    1b6c:	4798      	blx	r3
    1b6e:	bd08      	pop	{r3, pc}
    1b70:	000019c1 	.word	0x000019c1

00001b74 <DMAC_4_Handler>:
    1b74:	b508      	push	{r3, lr}
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <DMAC_4_Handler+0x8>)
    1b78:	4798      	blx	r3
    1b7a:	bd08      	pop	{r3, pc}
    1b7c:	000019c1 	.word	0x000019c1

00001b80 <_ext_irq_handler>:
    1b80:	b570      	push	{r4, r5, r6, lr}
    1b82:	b082      	sub	sp, #8
    1b84:	4b2a      	ldr	r3, [pc, #168]	; (1c30 <_ext_irq_handler+0xb0>)
    1b86:	695a      	ldr	r2, [r3, #20]
    1b88:	9201      	str	r2, [sp, #4]
    1b8a:	9a01      	ldr	r2, [sp, #4]
    1b8c:	615a      	str	r2, [r3, #20]
    1b8e:	4b29      	ldr	r3, [pc, #164]	; (1c34 <_ext_irq_handler+0xb4>)
    1b90:	6818      	ldr	r0, [r3, #0]
    1b92:	22f4      	movs	r2, #244	; 0xf4
    1b94:	4928      	ldr	r1, [pc, #160]	; (1c38 <_ext_irq_handler+0xb8>)
    1b96:	3000      	adds	r0, #0
    1b98:	bf18      	it	ne
    1b9a:	2001      	movne	r0, #1
    1b9c:	4b27      	ldr	r3, [pc, #156]	; (1c3c <_ext_irq_handler+0xbc>)
    1b9e:	4798      	blx	r3
    1ba0:	f04f 35ff 	mov.w	r5, #4294967295
    1ba4:	e035      	b.n	1c12 <_ext_irq_handler+0x92>
    1ba6:	4b26      	ldr	r3, [pc, #152]	; (1c40 <_ext_irq_handler+0xc0>)
    1ba8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1bac:	6875      	ldr	r5, [r6, #4]
    1bae:	f1b5 3fff 	cmp.w	r5, #4294967295
    1bb2:	d003      	beq.n	1bbc <_ext_irq_handler+0x3c>
    1bb4:	4b1f      	ldr	r3, [pc, #124]	; (1c34 <_ext_irq_handler+0xb4>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	4628      	mov	r0, r5
    1bba:	4798      	blx	r3
    1bbc:	2301      	movs	r3, #1
    1bbe:	40a3      	lsls	r3, r4
    1bc0:	9c01      	ldr	r4, [sp, #4]
    1bc2:	ea24 0403 	bic.w	r4, r4, r3
    1bc6:	9401      	str	r4, [sp, #4]
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	fa93 f4a3 	rbit	r4, r3
    1bce:	fab4 f484 	clz	r4, r4
    1bd2:	b90b      	cbnz	r3, 1bd8 <_ext_irq_handler+0x58>
    1bd4:	f04f 34ff 	mov.w	r4, #4294967295
    1bd8:	f1b4 3fff 	cmp.w	r4, #4294967295
    1bdc:	d014      	beq.n	1c08 <_ext_irq_handler+0x88>
    1bde:	2004      	movs	r0, #4
    1be0:	2100      	movs	r1, #0
    1be2:	e001      	b.n	1be8 <_ext_irq_handler+0x68>
    1be4:	3b01      	subs	r3, #1
    1be6:	b2d8      	uxtb	r0, r3
    1be8:	4281      	cmp	r1, r0
    1bea:	d8e0      	bhi.n	1bae <_ext_irq_handler+0x2e>
    1bec:	1843      	adds	r3, r0, r1
    1bee:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1bf2:	461e      	mov	r6, r3
    1bf4:	4a12      	ldr	r2, [pc, #72]	; (1c40 <_ext_irq_handler+0xc0>)
    1bf6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1bfa:	42a2      	cmp	r2, r4
    1bfc:	d0d3      	beq.n	1ba6 <_ext_irq_handler+0x26>
    1bfe:	42a2      	cmp	r2, r4
    1c00:	daf0      	bge.n	1be4 <_ext_irq_handler+0x64>
    1c02:	3301      	adds	r3, #1
    1c04:	b2d9      	uxtb	r1, r3
    1c06:	e7ef      	b.n	1be8 <_ext_irq_handler+0x68>
    1c08:	4b09      	ldr	r3, [pc, #36]	; (1c30 <_ext_irq_handler+0xb0>)
    1c0a:	695a      	ldr	r2, [r3, #20]
    1c0c:	9201      	str	r2, [sp, #4]
    1c0e:	9a01      	ldr	r2, [sp, #4]
    1c10:	615a      	str	r2, [r3, #20]
    1c12:	9b01      	ldr	r3, [sp, #4]
    1c14:	b14b      	cbz	r3, 1c2a <_ext_irq_handler+0xaa>
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	fa93 f4a3 	rbit	r4, r3
    1c1c:	fab4 f484 	clz	r4, r4
    1c20:	2b00      	cmp	r3, #0
    1c22:	d1d9      	bne.n	1bd8 <_ext_irq_handler+0x58>
    1c24:	f04f 34ff 	mov.w	r4, #4294967295
    1c28:	e7d6      	b.n	1bd8 <_ext_irq_handler+0x58>
    1c2a:	b002      	add	sp, #8
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
    1c2e:	bf00      	nop
    1c30:	40002800 	.word	0x40002800
    1c34:	20000210 	.word	0x20000210
    1c38:	000047bc 	.word	0x000047bc
    1c3c:	00001561 	.word	0x00001561
    1c40:	0000479c 	.word	0x0000479c

00001c44 <_ext_irq_init>:
    1c44:	4b3d      	ldr	r3, [pc, #244]	; (1d3c <_ext_irq_init+0xf8>)
    1c46:	685b      	ldr	r3, [r3, #4]
    1c48:	f013 0f01 	tst.w	r3, #1
    1c4c:	d120      	bne.n	1c90 <_ext_irq_init+0x4c>
    1c4e:	4b3b      	ldr	r3, [pc, #236]	; (1d3c <_ext_irq_init+0xf8>)
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	f013 0f03 	tst.w	r3, #3
    1c56:	d1fa      	bne.n	1c4e <_ext_irq_init+0xa>
    1c58:	4b38      	ldr	r3, [pc, #224]	; (1d3c <_ext_irq_init+0xf8>)
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	f013 0f02 	tst.w	r3, #2
    1c60:	d00e      	beq.n	1c80 <_ext_irq_init+0x3c>
    1c62:	4a36      	ldr	r2, [pc, #216]	; (1d3c <_ext_irq_init+0xf8>)
    1c64:	7813      	ldrb	r3, [r2, #0]
    1c66:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1c6a:	7013      	strb	r3, [r2, #0]
    1c6c:	4b33      	ldr	r3, [pc, #204]	; (1d3c <_ext_irq_init+0xf8>)
    1c6e:	685b      	ldr	r3, [r3, #4]
    1c70:	f013 0f03 	tst.w	r3, #3
    1c74:	d1fa      	bne.n	1c6c <_ext_irq_init+0x28>
    1c76:	4b31      	ldr	r3, [pc, #196]	; (1d3c <_ext_irq_init+0xf8>)
    1c78:	685b      	ldr	r3, [r3, #4]
    1c7a:	f013 0f02 	tst.w	r3, #2
    1c7e:	d1fa      	bne.n	1c76 <_ext_irq_init+0x32>
    1c80:	2201      	movs	r2, #1
    1c82:	4b2e      	ldr	r3, [pc, #184]	; (1d3c <_ext_irq_init+0xf8>)
    1c84:	701a      	strb	r2, [r3, #0]
    1c86:	4b2d      	ldr	r3, [pc, #180]	; (1d3c <_ext_irq_init+0xf8>)
    1c88:	685b      	ldr	r3, [r3, #4]
    1c8a:	f013 0f03 	tst.w	r3, #3
    1c8e:	d1fa      	bne.n	1c86 <_ext_irq_init+0x42>
    1c90:	4b2a      	ldr	r3, [pc, #168]	; (1d3c <_ext_irq_init+0xf8>)
    1c92:	685b      	ldr	r3, [r3, #4]
    1c94:	f013 0f01 	tst.w	r3, #1
    1c98:	d1fa      	bne.n	1c90 <_ext_irq_init+0x4c>
    1c9a:	4a28      	ldr	r2, [pc, #160]	; (1d3c <_ext_irq_init+0xf8>)
    1c9c:	7813      	ldrb	r3, [r2, #0]
    1c9e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1ca2:	7013      	strb	r3, [r2, #0]
    1ca4:	4b25      	ldr	r3, [pc, #148]	; (1d3c <_ext_irq_init+0xf8>)
    1ca6:	685b      	ldr	r3, [r3, #4]
    1ca8:	f013 0f03 	tst.w	r3, #3
    1cac:	d1fa      	bne.n	1ca4 <_ext_irq_init+0x60>
    1cae:	4b23      	ldr	r3, [pc, #140]	; (1d3c <_ext_irq_init+0xf8>)
    1cb0:	2200      	movs	r2, #0
    1cb2:	705a      	strb	r2, [r3, #1]
    1cb4:	609a      	str	r2, [r3, #8]
    1cb6:	619a      	str	r2, [r3, #24]
    1cb8:	631a      	str	r2, [r3, #48]	; 0x30
    1cba:	635a      	str	r2, [r3, #52]	; 0x34
    1cbc:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1cc0:	61da      	str	r2, [r3, #28]
    1cc2:	4a1f      	ldr	r2, [pc, #124]	; (1d40 <_ext_irq_init+0xfc>)
    1cc4:	621a      	str	r2, [r3, #32]
    1cc6:	781a      	ldrb	r2, [r3, #0]
    1cc8:	f042 0202 	orr.w	r2, r2, #2
    1ccc:	701a      	strb	r2, [r3, #0]
    1cce:	4b1b      	ldr	r3, [pc, #108]	; (1d3c <_ext_irq_init+0xf8>)
    1cd0:	685b      	ldr	r3, [r3, #4]
    1cd2:	f013 0f03 	tst.w	r3, #3
    1cd6:	d1fa      	bne.n	1cce <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cd8:	4b1a      	ldr	r3, [pc, #104]	; (1d44 <_ext_irq_init+0x100>)
    1cda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ce2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cee:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cfc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d04:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d12:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d1a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1d24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d28:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d30:	601a      	str	r2, [r3, #0]
    1d32:	4b05      	ldr	r3, [pc, #20]	; (1d48 <_ext_irq_init+0x104>)
    1d34:	6018      	str	r0, [r3, #0]
    1d36:	2000      	movs	r0, #0
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop
    1d3c:	40002800 	.word	0x40002800
    1d40:	0a0000b0 	.word	0x0a0000b0
    1d44:	e000e100 	.word	0xe000e100
    1d48:	20000210 	.word	0x20000210

00001d4c <_ext_irq_enable>:
    1d4c:	b410      	push	{r4}
    1d4e:	2300      	movs	r3, #0
    1d50:	2b03      	cmp	r3, #3
    1d52:	d80d      	bhi.n	1d70 <_ext_irq_enable+0x24>
    1d54:	461c      	mov	r4, r3
    1d56:	4a11      	ldr	r2, [pc, #68]	; (1d9c <_ext_irq_enable+0x50>)
    1d58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1d5c:	6852      	ldr	r2, [r2, #4]
    1d5e:	4282      	cmp	r2, r0
    1d60:	d002      	beq.n	1d68 <_ext_irq_enable+0x1c>
    1d62:	3301      	adds	r3, #1
    1d64:	b2db      	uxtb	r3, r3
    1d66:	e7f3      	b.n	1d50 <_ext_irq_enable+0x4>
    1d68:	4b0c      	ldr	r3, [pc, #48]	; (1d9c <_ext_irq_enable+0x50>)
    1d6a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    1d6e:	e000      	b.n	1d72 <_ext_irq_enable+0x26>
    1d70:	22ff      	movs	r2, #255	; 0xff
    1d72:	2aff      	cmp	r2, #255	; 0xff
    1d74:	d00f      	beq.n	1d96 <_ext_irq_enable+0x4a>
    1d76:	b941      	cbnz	r1, 1d8a <_ext_irq_enable+0x3e>
    1d78:	2301      	movs	r3, #1
    1d7a:	4093      	lsls	r3, r2
    1d7c:	4a08      	ldr	r2, [pc, #32]	; (1da0 <_ext_irq_enable+0x54>)
    1d7e:	60d3      	str	r3, [r2, #12]
    1d80:	6153      	str	r3, [r2, #20]
    1d82:	2000      	movs	r0, #0
    1d84:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d88:	4770      	bx	lr
    1d8a:	2301      	movs	r3, #1
    1d8c:	4093      	lsls	r3, r2
    1d8e:	4a04      	ldr	r2, [pc, #16]	; (1da0 <_ext_irq_enable+0x54>)
    1d90:	6113      	str	r3, [r2, #16]
    1d92:	2000      	movs	r0, #0
    1d94:	e7f6      	b.n	1d84 <_ext_irq_enable+0x38>
    1d96:	f04f 30ff 	mov.w	r0, #4294967295
    1d9a:	e7f3      	b.n	1d84 <_ext_irq_enable+0x38>
    1d9c:	0000479c 	.word	0x0000479c
    1da0:	40002800 	.word	0x40002800

00001da4 <EIC_6_Handler>:
    1da4:	b508      	push	{r3, lr}
    1da6:	4b01      	ldr	r3, [pc, #4]	; (1dac <EIC_6_Handler+0x8>)
    1da8:	4798      	blx	r3
    1daa:	bd08      	pop	{r3, pc}
    1dac:	00001b81 	.word	0x00001b81

00001db0 <EIC_7_Handler>:
    1db0:	b508      	push	{r3, lr}
    1db2:	4b01      	ldr	r3, [pc, #4]	; (1db8 <EIC_7_Handler+0x8>)
    1db4:	4798      	blx	r3
    1db6:	bd08      	pop	{r3, pc}
    1db8:	00001b81 	.word	0x00001b81

00001dbc <EIC_9_Handler>:
    1dbc:	b508      	push	{r3, lr}
    1dbe:	4b01      	ldr	r3, [pc, #4]	; (1dc4 <EIC_9_Handler+0x8>)
    1dc0:	4798      	blx	r3
    1dc2:	bd08      	pop	{r3, pc}
    1dc4:	00001b81 	.word	0x00001b81

00001dc8 <EIC_14_Handler>:
    1dc8:	b508      	push	{r3, lr}
    1dca:	4b01      	ldr	r3, [pc, #4]	; (1dd0 <EIC_14_Handler+0x8>)
    1dcc:	4798      	blx	r3
    1dce:	bd08      	pop	{r3, pc}
    1dd0:	00001b81 	.word	0x00001b81

00001dd4 <_gclk_init_generators_by_fref>:
    1dd4:	f010 0f01 	tst.w	r0, #1
    1dd8:	d008      	beq.n	1dec <_gclk_init_generators_by_fref+0x18>
    1dda:	4a17      	ldr	r2, [pc, #92]	; (1e38 <_gclk_init_generators_by_fref+0x64>)
    1ddc:	4b17      	ldr	r3, [pc, #92]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1dde:	621a      	str	r2, [r3, #32]
    1de0:	4b16      	ldr	r3, [pc, #88]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1de2:	685a      	ldr	r2, [r3, #4]
    1de4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1de8:	421a      	tst	r2, r3
    1dea:	d1f9      	bne.n	1de0 <_gclk_init_generators_by_fref+0xc>
    1dec:	f010 0f02 	tst.w	r0, #2
    1df0:	d008      	beq.n	1e04 <_gclk_init_generators_by_fref+0x30>
    1df2:	4a13      	ldr	r2, [pc, #76]	; (1e40 <_gclk_init_generators_by_fref+0x6c>)
    1df4:	4b11      	ldr	r3, [pc, #68]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1df6:	625a      	str	r2, [r3, #36]	; 0x24
    1df8:	4b10      	ldr	r3, [pc, #64]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1dfa:	685a      	ldr	r2, [r3, #4]
    1dfc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e00:	421a      	tst	r2, r3
    1e02:	d1f9      	bne.n	1df8 <_gclk_init_generators_by_fref+0x24>
    1e04:	f010 0f04 	tst.w	r0, #4
    1e08:	d008      	beq.n	1e1c <_gclk_init_generators_by_fref+0x48>
    1e0a:	4a0e      	ldr	r2, [pc, #56]	; (1e44 <_gclk_init_generators_by_fref+0x70>)
    1e0c:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e0e:	629a      	str	r2, [r3, #40]	; 0x28
    1e10:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e12:	685a      	ldr	r2, [r3, #4]
    1e14:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e18:	421a      	tst	r2, r3
    1e1a:	d1f9      	bne.n	1e10 <_gclk_init_generators_by_fref+0x3c>
    1e1c:	f010 0f08 	tst.w	r0, #8
    1e20:	d008      	beq.n	1e34 <_gclk_init_generators_by_fref+0x60>
    1e22:	4a09      	ldr	r2, [pc, #36]	; (1e48 <_gclk_init_generators_by_fref+0x74>)
    1e24:	4b05      	ldr	r3, [pc, #20]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e26:	62da      	str	r2, [r3, #44]	; 0x2c
    1e28:	4b04      	ldr	r3, [pc, #16]	; (1e3c <_gclk_init_generators_by_fref+0x68>)
    1e2a:	685a      	ldr	r2, [r3, #4]
    1e2c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e30:	421a      	tst	r2, r3
    1e32:	d1f9      	bne.n	1e28 <_gclk_init_generators_by_fref+0x54>
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop
    1e38:	00020107 	.word	0x00020107
    1e3c:	40001c00 	.word	0x40001c00
    1e40:	00020b07 	.word	0x00020b07
    1e44:	00010105 	.word	0x00010105
    1e48:	00100106 	.word	0x00100106

00001e4c <_mclk_init>:
    1e4c:	2201      	movs	r2, #1
    1e4e:	4b01      	ldr	r3, [pc, #4]	; (1e54 <_mclk_init+0x8>)
    1e50:	715a      	strb	r2, [r3, #5]
    1e52:	4770      	bx	lr
    1e54:	40000800 	.word	0x40000800

00001e58 <_osc32kctrl_init_sources>:
    1e58:	4b06      	ldr	r3, [pc, #24]	; (1e74 <_osc32kctrl_init_sources+0x1c>)
    1e5a:	f242 228e 	movw	r2, #8846	; 0x228e
    1e5e:	829a      	strh	r2, [r3, #20]
    1e60:	2200      	movs	r2, #0
    1e62:	759a      	strb	r2, [r3, #22]
    1e64:	75da      	strb	r2, [r3, #23]
    1e66:	69da      	ldr	r2, [r3, #28]
    1e68:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    1e6c:	61da      	str	r2, [r3, #28]
    1e6e:	2201      	movs	r2, #1
    1e70:	741a      	strb	r2, [r3, #16]
    1e72:	4770      	bx	lr
    1e74:	40001400 	.word	0x40001400

00001e78 <_oscctrl_init_sources>:
    1e78:	4770      	bx	lr
	...

00001e7c <_oscctrl_init_referenced_generators>:
    1e7c:	4a49      	ldr	r2, [pc, #292]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e7e:	6a13      	ldr	r3, [r2, #32]
    1e80:	f023 030f 	bic.w	r3, r3, #15
    1e84:	f043 0304 	orr.w	r3, r3, #4
    1e88:	6213      	str	r3, [r2, #32]
    1e8a:	4b46      	ldr	r3, [pc, #280]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e8c:	685a      	ldr	r2, [r3, #4]
    1e8e:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1e92:	421a      	tst	r2, r3
    1e94:	d1f9      	bne.n	1e8a <_oscctrl_init_referenced_generators+0xe>
    1e96:	4b43      	ldr	r3, [pc, #268]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	f013 0f04 	tst.w	r3, #4
    1e9e:	d1fa      	bne.n	1e96 <_oscctrl_init_referenced_generators+0x1a>
    1ea0:	4b41      	ldr	r3, [pc, #260]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ea2:	2200      	movs	r2, #0
    1ea4:	771a      	strb	r2, [r3, #28]
    1ea6:	2142      	movs	r1, #66	; 0x42
    1ea8:	4a3e      	ldr	r2, [pc, #248]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1eaa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    1eae:	4a3f      	ldr	r2, [pc, #252]	; (1fac <_oscctrl_init_referenced_generators+0x130>)
    1eb0:	629a      	str	r2, [r3, #40]	; 0x28
    1eb2:	4b3d      	ldr	r3, [pc, #244]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1eb8:	f013 0f10 	tst.w	r3, #16
    1ebc:	d1f9      	bne.n	1eb2 <_oscctrl_init_referenced_generators+0x36>
    1ebe:	2200      	movs	r2, #0
    1ec0:	4b39      	ldr	r3, [pc, #228]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ec2:	f883 2020 	strb.w	r2, [r3, #32]
    1ec6:	4b38      	ldr	r3, [pc, #224]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ec8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ecc:	f013 0f04 	tst.w	r3, #4
    1ed0:	d1f9      	bne.n	1ec6 <_oscctrl_init_referenced_generators+0x4a>
    1ed2:	2202      	movs	r2, #2
    1ed4:	4b34      	ldr	r3, [pc, #208]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ed6:	771a      	strb	r2, [r3, #28]
    1ed8:	4b33      	ldr	r3, [pc, #204]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ede:	f013 0f02 	tst.w	r3, #2
    1ee2:	d1f9      	bne.n	1ed8 <_oscctrl_init_referenced_generators+0x5c>
    1ee4:	4b30      	ldr	r3, [pc, #192]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ee8:	625a      	str	r2, [r3, #36]	; 0x24
    1eea:	4b2f      	ldr	r3, [pc, #188]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1eec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1ef0:	f013 0f08 	tst.w	r3, #8
    1ef4:	d1f9      	bne.n	1eea <_oscctrl_init_referenced_generators+0x6e>
    1ef6:	2281      	movs	r2, #129	; 0x81
    1ef8:	4b2b      	ldr	r3, [pc, #172]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1efa:	f883 2020 	strb.w	r2, [r3, #32]
    1efe:	4b2a      	ldr	r3, [pc, #168]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    1f04:	f013 0f04 	tst.w	r3, #4
    1f08:	d1f9      	bne.n	1efe <_oscctrl_init_referenced_generators+0x82>
    1f0a:	2243      	movs	r2, #67	; 0x43
    1f0c:	4b25      	ldr	r3, [pc, #148]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1f12:	2227      	movs	r2, #39	; 0x27
    1f14:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1f18:	635a      	str	r2, [r3, #52]	; 0x34
    1f1a:	4b23      	ldr	r3, [pc, #140]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f1e:	f013 0f06 	tst.w	r3, #6
    1f22:	d1fa      	bne.n	1f1a <_oscctrl_init_referenced_generators+0x9e>
    1f24:	4b20      	ldr	r3, [pc, #128]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f26:	2200      	movs	r2, #0
    1f28:	639a      	str	r2, [r3, #56]	; 0x38
    1f2a:	2202      	movs	r2, #2
    1f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1f30:	4b1d      	ldr	r3, [pc, #116]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f34:	f013 0f02 	tst.w	r3, #2
    1f38:	d1fa      	bne.n	1f30 <_oscctrl_init_referenced_generators+0xb4>
    1f3a:	4b1b      	ldr	r3, [pc, #108]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1f40:	f013 0f01 	tst.w	r3, #1
    1f44:	d027      	beq.n	1f96 <_oscctrl_init_referenced_generators+0x11a>
    1f46:	4b18      	ldr	r3, [pc, #96]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f48:	691b      	ldr	r3, [r3, #16]
    1f4a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
    1f4e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1f52:	d1f8      	bne.n	1f46 <_oscctrl_init_referenced_generators+0xca>
    1f54:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f58:	f013 0f01 	tst.w	r3, #1
    1f5c:	d104      	bne.n	1f68 <_oscctrl_init_referenced_generators+0xec>
    1f5e:	4b12      	ldr	r3, [pc, #72]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f62:	f013 0f02 	tst.w	r3, #2
    1f66:	d0f5      	beq.n	1f54 <_oscctrl_init_referenced_generators+0xd8>
    1f68:	4b0e      	ldr	r3, [pc, #56]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f6a:	685b      	ldr	r3, [r3, #4]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d1fb      	bne.n	1f68 <_oscctrl_init_referenced_generators+0xec>
    1f70:	4a0c      	ldr	r2, [pc, #48]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f72:	6a13      	ldr	r3, [r2, #32]
    1f74:	f023 030f 	bic.w	r3, r3, #15
    1f78:	f043 0307 	orr.w	r3, r3, #7
    1f7c:	6213      	str	r3, [r2, #32]
    1f7e:	4b09      	ldr	r3, [pc, #36]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f80:	685a      	ldr	r2, [r3, #4]
    1f82:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f86:	421a      	tst	r2, r3
    1f88:	d1f9      	bne.n	1f7e <_oscctrl_init_referenced_generators+0x102>
    1f8a:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <_oscctrl_init_referenced_generators+0x128>)
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	f013 0f04 	tst.w	r3, #4
    1f92:	d1fa      	bne.n	1f8a <_oscctrl_init_referenced_generators+0x10e>
    1f94:	4770      	bx	lr
    1f96:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <_oscctrl_init_referenced_generators+0x12c>)
    1f98:	691b      	ldr	r3, [r3, #16]
    1f9a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f9e:	d0fa      	beq.n	1f96 <_oscctrl_init_referenced_generators+0x11a>
    1fa0:	e7d8      	b.n	1f54 <_oscctrl_init_referenced_generators+0xd8>
    1fa2:	bf00      	nop
    1fa4:	40001c00 	.word	0x40001c00
    1fa8:	40001000 	.word	0x40001000
    1fac:	7c7f05b9 	.word	0x7c7f05b9

00001fb0 <_pcc_dma_transfer_done>:
    1fb0:	b508      	push	{r3, lr}
    1fb2:	6880      	ldr	r0, [r0, #8]
    1fb4:	6803      	ldr	r3, [r0, #0]
    1fb6:	2100      	movs	r1, #0
    1fb8:	4798      	blx	r3
    1fba:	bd08      	pop	{r3, pc}

00001fbc <_camera_async_init>:
    1fbc:	b538      	push	{r3, r4, r5, lr}
    1fbe:	4604      	mov	r4, r0
    1fc0:	60c1      	str	r1, [r0, #12]
    1fc2:	4b07      	ldr	r3, [pc, #28]	; (1fe0 <_camera_async_init+0x24>)
    1fc4:	600b      	str	r3, [r1, #0]
    1fc6:	4b07      	ldr	r3, [pc, #28]	; (1fe4 <_camera_async_init+0x28>)
    1fc8:	6018      	str	r0, [r3, #0]
    1fca:	4d07      	ldr	r5, [pc, #28]	; (1fe8 <_camera_async_init+0x2c>)
    1fcc:	2100      	movs	r1, #0
    1fce:	4628      	mov	r0, r5
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <_camera_async_init+0x30>)
    1fd2:	4798      	blx	r3
    1fd4:	682b      	ldr	r3, [r5, #0]
    1fd6:	609c      	str	r4, [r3, #8]
    1fd8:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <_camera_async_init+0x34>)
    1fda:	601a      	str	r2, [r3, #0]
    1fdc:	bd38      	pop	{r3, r4, r5, pc}
    1fde:	bf00      	nop
    1fe0:	c0000020 	.word	0xc0000020
    1fe4:	20000214 	.word	0x20000214
    1fe8:	20000b60 	.word	0x20000b60
    1fec:	00001b31 	.word	0x00001b31
    1ff0:	00001fb1 	.word	0x00001fb1

00001ff4 <PCC_Handler>:
    1ff4:	b500      	push	{lr}
    1ff6:	b083      	sub	sp, #12
    1ff8:	4b08      	ldr	r3, [pc, #32]	; (201c <PCC_Handler+0x28>)
    1ffa:	6818      	ldr	r0, [r3, #0]
    1ffc:	68c3      	ldr	r3, [r0, #12]
    1ffe:	691a      	ldr	r2, [r3, #16]
    2000:	9201      	str	r2, [sp, #4]
    2002:	2201      	movs	r2, #1
    2004:	609a      	str	r2, [r3, #8]
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	f013 0f01 	tst.w	r3, #1
    200c:	d003      	beq.n	2016 <PCC_Handler+0x22>
    200e:	6803      	ldr	r3, [r0, #0]
    2010:	b10b      	cbz	r3, 2016 <PCC_Handler+0x22>
    2012:	2100      	movs	r1, #0
    2014:	4798      	blx	r3
    2016:	b003      	add	sp, #12
    2018:	f85d fb04 	ldr.w	pc, [sp], #4
    201c:	20000214 	.word	0x20000214

00002020 <RAMECC_Handler>:
    2020:	b500      	push	{lr}
    2022:	b083      	sub	sp, #12
    2024:	4b0d      	ldr	r3, [pc, #52]	; (205c <RAMECC_Handler+0x3c>)
    2026:	789b      	ldrb	r3, [r3, #2]
    2028:	b2db      	uxtb	r3, r3
    202a:	9301      	str	r3, [sp, #4]
    202c:	9b01      	ldr	r3, [sp, #4]
    202e:	f013 0f02 	tst.w	r3, #2
    2032:	d006      	beq.n	2042 <RAMECC_Handler+0x22>
    2034:	4b0a      	ldr	r3, [pc, #40]	; (2060 <RAMECC_Handler+0x40>)
    2036:	681b      	ldr	r3, [r3, #0]
    2038:	b11b      	cbz	r3, 2042 <RAMECC_Handler+0x22>
    203a:	4a08      	ldr	r2, [pc, #32]	; (205c <RAMECC_Handler+0x3c>)
    203c:	6850      	ldr	r0, [r2, #4]
    203e:	4798      	blx	r3
    2040:	e009      	b.n	2056 <RAMECC_Handler+0x36>
    2042:	9b01      	ldr	r3, [sp, #4]
    2044:	f013 0f01 	tst.w	r3, #1
    2048:	d005      	beq.n	2056 <RAMECC_Handler+0x36>
    204a:	4b05      	ldr	r3, [pc, #20]	; (2060 <RAMECC_Handler+0x40>)
    204c:	685b      	ldr	r3, [r3, #4]
    204e:	b113      	cbz	r3, 2056 <RAMECC_Handler+0x36>
    2050:	4a02      	ldr	r2, [pc, #8]	; (205c <RAMECC_Handler+0x3c>)
    2052:	6850      	ldr	r0, [r2, #4]
    2054:	4798      	blx	r3
    2056:	b003      	add	sp, #12
    2058:	f85d fb04 	ldr.w	pc, [sp], #4
    205c:	41020000 	.word	0x41020000
    2060:	20000b64 	.word	0x20000b64

00002064 <_mci_set_speed>:
    2064:	b410      	push	{r4}
    2066:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2068:	f013 0f04 	tst.w	r3, #4
    206c:	d009      	beq.n	2082 <_mci_set_speed+0x1e>
    206e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    2070:	f014 0f03 	tst.w	r4, #3
    2074:	d1fb      	bne.n	206e <_mci_set_speed+0xa>
    2076:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2078:	b2a4      	uxth	r4, r4
    207a:	f024 0404 	bic.w	r4, r4, #4
    207e:	b2a4      	uxth	r4, r4
    2080:	8584      	strh	r4, [r0, #44]	; 0x2c
    2082:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2084:	f3c4 4407 	ubfx	r4, r4, #16, #8
    2088:	2c00      	cmp	r4, #0
    208a:	d135      	bne.n	20f8 <_mci_set_speed+0x94>
    208c:	4b22      	ldr	r3, [pc, #136]	; (2118 <_mci_set_speed+0xb4>)
    208e:	2a00      	cmp	r2, #0
    2090:	d134      	bne.n	20fc <_mci_set_speed+0x98>
    2092:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2094:	b292      	uxth	r2, r2
    2096:	f022 0220 	bic.w	r2, r2, #32
    209a:	b292      	uxth	r2, r2
    209c:	8582      	strh	r2, [r0, #44]	; 0x2c
    209e:	fbb3 f1f1 	udiv	r1, r3, r1
    20a2:	0849      	lsrs	r1, r1, #1
    20a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    20a8:	f013 0f04 	tst.w	r3, #4
    20ac:	d001      	beq.n	20b2 <_mci_set_speed+0x4e>
    20ae:	b901      	cbnz	r1, 20b2 <_mci_set_speed+0x4e>
    20b0:	2101      	movs	r1, #1
    20b2:	b28a      	uxth	r2, r1
    20b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20b6:	b2db      	uxtb	r3, r3
    20b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    20bc:	b29b      	uxth	r3, r3
    20be:	8583      	strh	r3, [r0, #44]	; 0x2c
    20c0:	f3c1 210f 	ubfx	r1, r1, #8, #16
    20c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20c6:	b29b      	uxth	r3, r3
    20c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    20cc:	0189      	lsls	r1, r1, #6
    20ce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    20d2:	4319      	orrs	r1, r3
    20d4:	8581      	strh	r1, [r0, #44]	; 0x2c
    20d6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20d8:	b29b      	uxth	r3, r3
    20da:	f043 0301 	orr.w	r3, r3, #1
    20de:	8583      	strh	r3, [r0, #44]	; 0x2c
    20e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20e2:	f013 0f02 	tst.w	r3, #2
    20e6:	d0fb      	beq.n	20e0 <_mci_set_speed+0x7c>
    20e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    20ea:	b29b      	uxth	r3, r3
    20ec:	f043 0304 	orr.w	r3, r3, #4
    20f0:	8583      	strh	r3, [r0, #44]	; 0x2c
    20f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    20f6:	4770      	bx	lr
    20f8:	4b08      	ldr	r3, [pc, #32]	; (211c <_mci_set_speed+0xb8>)
    20fa:	e7c8      	b.n	208e <_mci_set_speed+0x2a>
    20fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    20fe:	b292      	uxth	r2, r2
    2100:	f042 0220 	orr.w	r2, r2, #32
    2104:	8582      	strh	r2, [r0, #44]	; 0x2c
    2106:	fb04 3303 	mla	r3, r4, r3, r3
    210a:	fbb3 f1f1 	udiv	r1, r3, r1
    210e:	2900      	cmp	r1, #0
    2110:	d0c8      	beq.n	20a4 <_mci_set_speed+0x40>
    2112:	3901      	subs	r1, #1
    2114:	e7c6      	b.n	20a4 <_mci_set_speed+0x40>
    2116:	bf00      	nop
    2118:	0393a000 	.word	0x0393a000
    211c:	01c9d000 	.word	0x01c9d000

00002120 <_mci_reset>:
    2120:	b510      	push	{r4, lr}
    2122:	4604      	mov	r4, r0
    2124:	2234      	movs	r2, #52	; 0x34
    2126:	4906      	ldr	r1, [pc, #24]	; (2140 <_mci_reset+0x20>)
    2128:	3000      	adds	r0, #0
    212a:	bf18      	it	ne
    212c:	2001      	movne	r0, #1
    212e:	4b05      	ldr	r3, [pc, #20]	; (2144 <_mci_reset+0x24>)
    2130:	4798      	blx	r3
    2132:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2136:	f043 0302 	orr.w	r3, r3, #2
    213a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    213e:	bd10      	pop	{r4, pc}
    2140:	000047d4 	.word	0x000047d4
    2144:	00001561 	.word	0x00001561

00002148 <_mci_wait_busy>:
    2148:	b510      	push	{r4, lr}
    214a:	4604      	mov	r4, r0
    214c:	227f      	movs	r2, #127	; 0x7f
    214e:	490b      	ldr	r1, [pc, #44]	; (217c <_mci_wait_busy+0x34>)
    2150:	3000      	adds	r0, #0
    2152:	bf18      	it	ne
    2154:	2001      	movne	r0, #1
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <_mci_wait_busy+0x38>)
    2158:	4798      	blx	r3
    215a:	f04f 33ff 	mov.w	r3, #4294967295
    215e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2160:	1e59      	subs	r1, r3, #1
    2162:	b12b      	cbz	r3, 2170 <_mci_wait_busy+0x28>
    2164:	460b      	mov	r3, r1
    2166:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    216a:	d0f8      	beq.n	215e <_mci_wait_busy+0x16>
    216c:	2001      	movs	r0, #1
    216e:	bd10      	pop	{r4, pc}
    2170:	4620      	mov	r0, r4
    2172:	4b04      	ldr	r3, [pc, #16]	; (2184 <_mci_wait_busy+0x3c>)
    2174:	4798      	blx	r3
    2176:	2000      	movs	r0, #0
    2178:	bd10      	pop	{r4, pc}
    217a:	bf00      	nop
    217c:	000047d4 	.word	0x000047d4
    2180:	00001561 	.word	0x00001561
    2184:	00002121 	.word	0x00002121

00002188 <_mci_send_cmd_execute>:
    2188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    218a:	460f      	mov	r7, r1
    218c:	4615      	mov	r5, r2
    218e:	461e      	mov	r6, r3
    2190:	4604      	mov	r4, r0
    2192:	2299      	movs	r2, #153	; 0x99
    2194:	4934      	ldr	r1, [pc, #208]	; (2268 <_mci_send_cmd_execute+0xe0>)
    2196:	3000      	adds	r0, #0
    2198:	bf18      	it	ne
    219a:	2001      	movne	r0, #1
    219c:	4b33      	ldr	r3, [pc, #204]	; (226c <_mci_send_cmd_execute+0xe4>)
    219e:	4798      	blx	r3
    21a0:	0229      	lsls	r1, r5, #8
    21a2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    21a6:	4339      	orrs	r1, r7
    21a8:	f415 7f80 	tst.w	r5, #256	; 0x100
    21ac:	d004      	beq.n	21b8 <_mci_send_cmd_execute+0x30>
    21ae:	f415 6f00 	tst.w	r5, #2048	; 0x800
    21b2:	d00e      	beq.n	21d2 <_mci_send_cmd_execute+0x4a>
    21b4:	f041 0101 	orr.w	r1, r1, #1
    21b8:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    21bc:	d012      	beq.n	21e4 <_mci_send_cmd_execute+0x5c>
    21be:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    21c2:	f043 0310 	orr.w	r3, r3, #16
    21c6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    21ca:	60a6      	str	r6, [r4, #8]
    21cc:	b28b      	uxth	r3, r1
    21ce:	81e3      	strh	r3, [r4, #14]
    21d0:	e017      	b.n	2202 <_mci_send_cmd_execute+0x7a>
    21d2:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    21d6:	d002      	beq.n	21de <_mci_send_cmd_execute+0x56>
    21d8:	f041 0103 	orr.w	r1, r1, #3
    21dc:	e7ec      	b.n	21b8 <_mci_send_cmd_execute+0x30>
    21de:	f041 0102 	orr.w	r1, r1, #2
    21e2:	e7e9      	b.n	21b8 <_mci_send_cmd_execute+0x30>
    21e4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    21e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    21ec:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    21f0:	e7eb      	b.n	21ca <_mci_send_cmd_execute+0x42>
    21f2:	f240 227f 	movw	r2, #639	; 0x27f
    21f6:	4213      	tst	r3, r2
    21f8:	d118      	bne.n	222c <_mci_send_cmd_execute+0xa4>
    21fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    21fc:	f013 0f01 	tst.w	r3, #1
    2200:	d120      	bne.n	2244 <_mci_send_cmd_execute+0xbc>
    2202:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2204:	b29b      	uxth	r3, r3
    2206:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    220a:	d0f2      	beq.n	21f2 <_mci_send_cmd_execute+0x6a>
    220c:	f240 225d 	movw	r2, #605	; 0x25d
    2210:	4213      	tst	r3, r2
    2212:	d0f2      	beq.n	21fa <_mci_send_cmd_execute+0x72>
    2214:	4620      	mov	r0, r4
    2216:	4b16      	ldr	r3, [pc, #88]	; (2270 <_mci_send_cmd_execute+0xe8>)
    2218:	4798      	blx	r3
    221a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    221c:	b29b      	uxth	r3, r3
    221e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2222:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2226:	8663      	strh	r3, [r4, #50]	; 0x32
    2228:	2000      	movs	r0, #0
    222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    222c:	4620      	mov	r0, r4
    222e:	4b10      	ldr	r3, [pc, #64]	; (2270 <_mci_send_cmd_execute+0xe8>)
    2230:	4798      	blx	r3
    2232:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2234:	b29b      	uxth	r3, r3
    2236:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    223a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    223e:	8663      	strh	r3, [r4, #50]	; 0x32
    2240:	2000      	movs	r0, #0
    2242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2244:	f011 0f20 	tst.w	r1, #32
    2248:	d104      	bne.n	2254 <_mci_send_cmd_execute+0xcc>
    224a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    224c:	b29b      	uxth	r3, r3
    224e:	f043 0301 	orr.w	r3, r3, #1
    2252:	8623      	strh	r3, [r4, #48]	; 0x30
    2254:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2258:	d101      	bne.n	225e <_mci_send_cmd_execute+0xd6>
    225a:	2001      	movs	r0, #1
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    225e:	4620      	mov	r0, r4
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <_mci_send_cmd_execute+0xec>)
    2262:	4798      	blx	r3
    2264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2266:	bf00      	nop
    2268:	000047d4 	.word	0x000047d4
    226c:	00001561 	.word	0x00001561
    2270:	00002121 	.word	0x00002121
    2274:	00002149 	.word	0x00002149

00002278 <_mci_sync_init>:
    2278:	b538      	push	{r3, r4, r5, lr}
    227a:	460c      	mov	r4, r1
    227c:	4605      	mov	r5, r0
    227e:	b348      	cbz	r0, 22d4 <_mci_sync_init+0x5c>
    2280:	b331      	cbz	r1, 22d0 <_mci_sync_init+0x58>
    2282:	2001      	movs	r0, #1
    2284:	22d8      	movs	r2, #216	; 0xd8
    2286:	4914      	ldr	r1, [pc, #80]	; (22d8 <_mci_sync_init+0x60>)
    2288:	4b14      	ldr	r3, [pc, #80]	; (22dc <_mci_sync_init+0x64>)
    228a:	4798      	blx	r3
    228c:	602c      	str	r4, [r5, #0]
    228e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2292:	f043 0301 	orr.w	r3, r3, #1
    2296:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    229a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    229e:	f013 0f01 	tst.w	r3, #1
    22a2:	d1fa      	bne.n	229a <_mci_sync_init+0x22>
    22a4:	230e      	movs	r3, #14
    22a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    22aa:	230f      	movs	r3, #15
    22ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    22b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    22b2:	b29b      	uxth	r3, r3
    22b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    22b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    22bc:	86a3      	strh	r3, [r4, #52]	; 0x34
    22be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    22c0:	b29b      	uxth	r3, r3
    22c2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    22c6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    22ca:	86e3      	strh	r3, [r4, #54]	; 0x36
    22cc:	2000      	movs	r0, #0
    22ce:	bd38      	pop	{r3, r4, r5, pc}
    22d0:	2000      	movs	r0, #0
    22d2:	e7d7      	b.n	2284 <_mci_sync_init+0xc>
    22d4:	2000      	movs	r0, #0
    22d6:	e7d5      	b.n	2284 <_mci_sync_init+0xc>
    22d8:	000047d4 	.word	0x000047d4
    22dc:	00001561 	.word	0x00001561

000022e0 <_mci_sync_select_device>:
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e2:	4616      	mov	r6, r2
    22e4:	461d      	mov	r5, r3
    22e6:	f89d 7018 	ldrb.w	r7, [sp, #24]
    22ea:	4604      	mov	r4, r0
    22ec:	b1e0      	cbz	r0, 2328 <_mci_sync_select_device+0x48>
    22ee:	6803      	ldr	r3, [r0, #0]
    22f0:	b1c3      	cbz	r3, 2324 <_mci_sync_select_device+0x44>
    22f2:	2001      	movs	r0, #1
    22f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    22f8:	491b      	ldr	r1, [pc, #108]	; (2368 <_mci_sync_select_device+0x88>)
    22fa:	4b1c      	ldr	r3, [pc, #112]	; (236c <_mci_sync_select_device+0x8c>)
    22fc:	4798      	blx	r3
    22fe:	6824      	ldr	r4, [r4, #0]
    2300:	b1a7      	cbz	r7, 232c <_mci_sync_select_device+0x4c>
    2302:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2306:	f043 0304 	orr.w	r3, r3, #4
    230a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    230e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    2310:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2314:	d011      	beq.n	233a <_mci_sync_select_device+0x5a>
    2316:	2d01      	cmp	r5, #1
    2318:	d015      	beq.n	2346 <_mci_sync_select_device+0x66>
    231a:	2d04      	cmp	r5, #4
    231c:	d01b      	beq.n	2356 <_mci_sync_select_device+0x76>
    231e:	f06f 000c 	mvn.w	r0, #12
    2322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2324:	2000      	movs	r0, #0
    2326:	e7e5      	b.n	22f4 <_mci_sync_select_device+0x14>
    2328:	2000      	movs	r0, #0
    232a:	e7e3      	b.n	22f4 <_mci_sync_select_device+0x14>
    232c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2330:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2334:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2338:	e7e9      	b.n	230e <_mci_sync_select_device+0x2e>
    233a:	2200      	movs	r2, #0
    233c:	4631      	mov	r1, r6
    233e:	4620      	mov	r0, r4
    2340:	4b0b      	ldr	r3, [pc, #44]	; (2370 <_mci_sync_select_device+0x90>)
    2342:	4798      	blx	r3
    2344:	e7e7      	b.n	2316 <_mci_sync_select_device+0x36>
    2346:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    234a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    234e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2352:	2000      	movs	r0, #0
    2354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2356:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    235a:	f043 0302 	orr.w	r3, r3, #2
    235e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2362:	2000      	movs	r0, #0
    2364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2366:	bf00      	nop
    2368:	000047d4 	.word	0x000047d4
    236c:	00001561 	.word	0x00001561
    2370:	00002065 	.word	0x00002065

00002374 <_mci_sync_deselect_device>:
    2374:	2000      	movs	r0, #0
    2376:	4770      	bx	lr

00002378 <_mci_sync_send_cmd>:
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	460d      	mov	r5, r1
    237c:	4616      	mov	r6, r2
    237e:	4604      	mov	r4, r0
    2380:	b180      	cbz	r0, 23a4 <_mci_sync_send_cmd+0x2c>
    2382:	6803      	ldr	r3, [r0, #0]
    2384:	b163      	cbz	r3, 23a0 <_mci_sync_send_cmd+0x28>
    2386:	2001      	movs	r0, #1
    2388:	f44f 72ab 	mov.w	r2, #342	; 0x156
    238c:	490d      	ldr	r1, [pc, #52]	; (23c4 <_mci_sync_send_cmd+0x4c>)
    238e:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <_mci_sync_send_cmd+0x50>)
    2390:	4798      	blx	r3
    2392:	6820      	ldr	r0, [r4, #0]
    2394:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2396:	f013 0f01 	tst.w	r3, #1
    239a:	d005      	beq.n	23a8 <_mci_sync_send_cmd+0x30>
    239c:	2000      	movs	r0, #0
    239e:	bd70      	pop	{r4, r5, r6, pc}
    23a0:	2000      	movs	r0, #0
    23a2:	e7f1      	b.n	2388 <_mci_sync_send_cmd+0x10>
    23a4:	2000      	movs	r0, #0
    23a6:	e7ef      	b.n	2388 <_mci_sync_send_cmd+0x10>
    23a8:	8983      	ldrh	r3, [r0, #12]
    23aa:	b29b      	uxth	r3, r3
    23ac:	f023 0301 	bic.w	r3, r3, #1
    23b0:	b29b      	uxth	r3, r3
    23b2:	8183      	strh	r3, [r0, #12]
    23b4:	2100      	movs	r1, #0
    23b6:	80c1      	strh	r1, [r0, #6]
    23b8:	4633      	mov	r3, r6
    23ba:	462a      	mov	r2, r5
    23bc:	4c03      	ldr	r4, [pc, #12]	; (23cc <_mci_sync_send_cmd+0x54>)
    23be:	47a0      	blx	r4
    23c0:	bd70      	pop	{r4, r5, r6, pc}
    23c2:	bf00      	nop
    23c4:	000047d4 	.word	0x000047d4
    23c8:	00001561 	.word	0x00001561
    23cc:	00002189 	.word	0x00002189

000023d0 <_mci_sync_get_response>:
    23d0:	b510      	push	{r4, lr}
    23d2:	4604      	mov	r4, r0
    23d4:	b160      	cbz	r0, 23f0 <_mci_sync_get_response+0x20>
    23d6:	6803      	ldr	r3, [r0, #0]
    23d8:	b143      	cbz	r3, 23ec <_mci_sync_get_response+0x1c>
    23da:	2001      	movs	r0, #1
    23dc:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    23e0:	4904      	ldr	r1, [pc, #16]	; (23f4 <_mci_sync_get_response+0x24>)
    23e2:	4b05      	ldr	r3, [pc, #20]	; (23f8 <_mci_sync_get_response+0x28>)
    23e4:	4798      	blx	r3
    23e6:	6823      	ldr	r3, [r4, #0]
    23e8:	6918      	ldr	r0, [r3, #16]
    23ea:	bd10      	pop	{r4, pc}
    23ec:	2000      	movs	r0, #0
    23ee:	e7f5      	b.n	23dc <_mci_sync_get_response+0xc>
    23f0:	2000      	movs	r0, #0
    23f2:	e7f3      	b.n	23dc <_mci_sync_get_response+0xc>
    23f4:	000047d4 	.word	0x000047d4
    23f8:	00001561 	.word	0x00001561

000023fc <_mci_sync_adtc_start>:
    23fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2400:	460d      	mov	r5, r1
    2402:	4690      	mov	r8, r2
    2404:	461f      	mov	r7, r3
    2406:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    240a:	4604      	mov	r4, r0
    240c:	2800      	cmp	r0, #0
    240e:	d031      	beq.n	2474 <_mci_sync_adtc_start+0x78>
    2410:	6803      	ldr	r3, [r0, #0]
    2412:	b36b      	cbz	r3, 2470 <_mci_sync_adtc_start+0x74>
    2414:	2001      	movs	r0, #1
    2416:	f240 1293 	movw	r2, #403	; 0x193
    241a:	4921      	ldr	r1, [pc, #132]	; (24a0 <_mci_sync_adtc_start+0xa4>)
    241c:	4b21      	ldr	r3, [pc, #132]	; (24a4 <_mci_sync_adtc_start+0xa8>)
    241e:	4798      	blx	r3
    2420:	6820      	ldr	r0, [r4, #0]
    2422:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2424:	f013 0f01 	tst.w	r3, #1
    2428:	d131      	bne.n	248e <_mci_sync_adtc_start+0x92>
    242a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    242c:	f013 0f02 	tst.w	r3, #2
    2430:	d130      	bne.n	2494 <_mci_sync_adtc_start+0x98>
    2432:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    2436:	d01f      	beq.n	2478 <_mci_sync_adtc_start+0x7c>
    2438:	2300      	movs	r3, #0
    243a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    243e:	d104      	bne.n	244a <_mci_sync_adtc_start+0x4e>
    2440:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    2444:	d01a      	beq.n	247c <_mci_sync_adtc_start+0x80>
    2446:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    244a:	b29b      	uxth	r3, r3
    244c:	8183      	strh	r3, [r0, #12]
    244e:	f3c7 0309 	ubfx	r3, r7, #0, #10
    2452:	8083      	strh	r3, [r0, #4]
    2454:	80c6      	strh	r6, [r0, #6]
    2456:	2200      	movs	r2, #0
    2458:	2300      	movs	r3, #0
    245a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    245e:	8227      	strh	r7, [r4, #16]
    2460:	8266      	strh	r6, [r4, #18]
    2462:	4643      	mov	r3, r8
    2464:	462a      	mov	r2, r5
    2466:	2120      	movs	r1, #32
    2468:	4c0f      	ldr	r4, [pc, #60]	; (24a8 <_mci_sync_adtc_start+0xac>)
    246a:	47a0      	blx	r4
    246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2470:	2000      	movs	r0, #0
    2472:	e7d0      	b.n	2416 <_mci_sync_adtc_start+0x1a>
    2474:	2000      	movs	r0, #0
    2476:	e7ce      	b.n	2416 <_mci_sync_adtc_start+0x1a>
    2478:	2310      	movs	r3, #16
    247a:	e7de      	b.n	243a <_mci_sync_adtc_start+0x3e>
    247c:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2480:	d1e3      	bne.n	244a <_mci_sync_adtc_start+0x4e>
    2482:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    2486:	d008      	beq.n	249a <_mci_sync_adtc_start+0x9e>
    2488:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    248c:	e7dd      	b.n	244a <_mci_sync_adtc_start+0x4e>
    248e:	2000      	movs	r0, #0
    2490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2494:	2000      	movs	r0, #0
    2496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    249a:	2000      	movs	r0, #0
    249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24a0:	000047d4 	.word	0x000047d4
    24a4:	00001561 	.word	0x00001561
    24a8:	00002189 	.word	0x00002189

000024ac <_mci_sync_write_word>:
    24ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ae:	460f      	mov	r7, r1
    24b0:	4605      	mov	r5, r0
    24b2:	2800      	cmp	r0, #0
    24b4:	d03f      	beq.n	2536 <_mci_sync_write_word+0x8a>
    24b6:	6803      	ldr	r3, [r0, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d03a      	beq.n	2532 <_mci_sync_write_word+0x86>
    24bc:	2001      	movs	r0, #1
    24be:	f240 220f 	movw	r2, #527	; 0x20f
    24c2:	4924      	ldr	r1, [pc, #144]	; (2554 <_mci_sync_write_word+0xa8>)
    24c4:	4b24      	ldr	r3, [pc, #144]	; (2558 <_mci_sync_write_word+0xac>)
    24c6:	4798      	blx	r3
    24c8:	682c      	ldr	r4, [r5, #0]
    24ca:	8a2a      	ldrh	r2, [r5, #16]
    24cc:	2300      	movs	r3, #0
    24ce:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    24d2:	4e22      	ldr	r6, [pc, #136]	; (255c <_mci_sync_write_word+0xb0>)
    24d4:	47b0      	blx	r6
    24d6:	4313      	orrs	r3, r2
    24d8:	d10c      	bne.n	24f4 <_mci_sync_write_word+0x48>
    24da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    24dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    24e0:	bb5b      	cbnz	r3, 253a <_mci_sync_write_word+0x8e>
    24e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24e4:	f013 0f10 	tst.w	r3, #16
    24e8:	d0f7      	beq.n	24da <_mci_sync_write_word+0x2e>
    24ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24ec:	b29b      	uxth	r3, r3
    24ee:	f043 0310 	orr.w	r3, r3, #16
    24f2:	8623      	strh	r3, [r4, #48]	; 0x30
    24f4:	6227      	str	r7, [r4, #32]
    24f6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    24fa:	3204      	adds	r2, #4
    24fc:	f143 0300 	adc.w	r3, r3, #0
    2500:	e9c5 2302 	strd	r2, r3, [r5, #8]
    2504:	8a28      	ldrh	r0, [r5, #16]
    2506:	8a6e      	ldrh	r6, [r5, #18]
    2508:	fba0 0106 	umull	r0, r1, r0, r6
    250c:	428b      	cmp	r3, r1
    250e:	bf08      	it	eq
    2510:	4282      	cmpeq	r2, r0
    2512:	d31c      	bcc.n	254e <_mci_sync_write_word+0xa2>
    2514:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2516:	f003 0370 	and.w	r3, r3, #112	; 0x70
    251a:	b99b      	cbnz	r3, 2544 <_mci_sync_write_word+0x98>
    251c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    251e:	f013 0f02 	tst.w	r3, #2
    2522:	d0f7      	beq.n	2514 <_mci_sync_write_word+0x68>
    2524:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2526:	b29b      	uxth	r3, r3
    2528:	f043 0302 	orr.w	r3, r3, #2
    252c:	8623      	strh	r3, [r4, #48]	; 0x30
    252e:	2001      	movs	r0, #1
    2530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2532:	2000      	movs	r0, #0
    2534:	e7c3      	b.n	24be <_mci_sync_write_word+0x12>
    2536:	2000      	movs	r0, #0
    2538:	e7c1      	b.n	24be <_mci_sync_write_word+0x12>
    253a:	4620      	mov	r0, r4
    253c:	4b08      	ldr	r3, [pc, #32]	; (2560 <_mci_sync_write_word+0xb4>)
    253e:	4798      	blx	r3
    2540:	2000      	movs	r0, #0
    2542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2544:	4620      	mov	r0, r4
    2546:	4b06      	ldr	r3, [pc, #24]	; (2560 <_mci_sync_write_word+0xb4>)
    2548:	4798      	blx	r3
    254a:	2000      	movs	r0, #0
    254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    254e:	2001      	movs	r0, #1
    2550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2552:	bf00      	nop
    2554:	000047d4 	.word	0x000047d4
    2558:	00001561 	.word	0x00001561
    255c:	00004229 	.word	0x00004229
    2560:	00002121 	.word	0x00002121

00002564 <_mci_sync_start_write_blocks>:
    2564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2568:	460e      	mov	r6, r1
    256a:	4690      	mov	r8, r2
    256c:	4607      	mov	r7, r0
    256e:	b1f0      	cbz	r0, 25ae <_mci_sync_start_write_blocks+0x4a>
    2570:	6803      	ldr	r3, [r0, #0]
    2572:	b1d3      	cbz	r3, 25aa <_mci_sync_start_write_blocks+0x46>
    2574:	2001      	movs	r0, #1
    2576:	4d18      	ldr	r5, [pc, #96]	; (25d8 <_mci_sync_start_write_blocks+0x74>)
    2578:	f240 225a 	movw	r2, #602	; 0x25a
    257c:	4629      	mov	r1, r5
    257e:	4c17      	ldr	r4, [pc, #92]	; (25dc <_mci_sync_start_write_blocks+0x78>)
    2580:	47a0      	blx	r4
    2582:	f240 225b 	movw	r2, #603	; 0x25b
    2586:	4629      	mov	r1, r5
    2588:	f118 0000 	adds.w	r0, r8, #0
    258c:	bf18      	it	ne
    258e:	2001      	movne	r0, #1
    2590:	47a0      	blx	r4
    2592:	f44f 7217 	mov.w	r2, #604	; 0x25c
    2596:	4629      	mov	r1, r5
    2598:	1c30      	adds	r0, r6, #0
    259a:	bf18      	it	ne
    259c:	2001      	movne	r0, #1
    259e:	47a0      	blx	r4
    25a0:	8a3d      	ldrh	r5, [r7, #16]
    25a2:	fb05 f508 	mul.w	r5, r5, r8
    25a6:	2404      	movs	r4, #4
    25a8:	e005      	b.n	25b6 <_mci_sync_start_write_blocks+0x52>
    25aa:	2000      	movs	r0, #0
    25ac:	e7e3      	b.n	2576 <_mci_sync_start_write_blocks+0x12>
    25ae:	2000      	movs	r0, #0
    25b0:	e7e1      	b.n	2576 <_mci_sync_start_write_blocks+0x12>
    25b2:	1b2d      	subs	r5, r5, r4
    25b4:	4426      	add	r6, r4
    25b6:	b165      	cbz	r5, 25d2 <_mci_sync_start_write_blocks+0x6e>
    25b8:	6831      	ldr	r1, [r6, #0]
    25ba:	4638      	mov	r0, r7
    25bc:	4b08      	ldr	r3, [pc, #32]	; (25e0 <_mci_sync_start_write_blocks+0x7c>)
    25be:	4798      	blx	r3
    25c0:	42a5      	cmp	r5, r4
    25c2:	d2f6      	bcs.n	25b2 <_mci_sync_start_write_blocks+0x4e>
    25c4:	8a3b      	ldrh	r3, [r7, #16]
    25c6:	fb93 f2f4 	sdiv	r2, r3, r4
    25ca:	fb04 3412 	mls	r4, r4, r2, r3
    25ce:	b2e4      	uxtb	r4, r4
    25d0:	e7ef      	b.n	25b2 <_mci_sync_start_write_blocks+0x4e>
    25d2:	2001      	movs	r0, #1
    25d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25d8:	000047d4 	.word	0x000047d4
    25dc:	00001561 	.word	0x00001561
    25e0:	000024ad 	.word	0x000024ad

000025e4 <_mci_sync_wait_end_of_write_blocks>:
    25e4:	b508      	push	{r3, lr}
    25e6:	b158      	cbz	r0, 2600 <_mci_sync_wait_end_of_write_blocks+0x1c>
    25e8:	6803      	ldr	r3, [r0, #0]
    25ea:	b13b      	cbz	r3, 25fc <_mci_sync_wait_end_of_write_blocks+0x18>
    25ec:	2001      	movs	r0, #1
    25ee:	f44f 721f 	mov.w	r2, #636	; 0x27c
    25f2:	4904      	ldr	r1, [pc, #16]	; (2604 <_mci_sync_wait_end_of_write_blocks+0x20>)
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <_mci_sync_wait_end_of_write_blocks+0x24>)
    25f6:	4798      	blx	r3
    25f8:	2001      	movs	r0, #1
    25fa:	bd08      	pop	{r3, pc}
    25fc:	2000      	movs	r0, #0
    25fe:	e7f6      	b.n	25ee <_mci_sync_wait_end_of_write_blocks+0xa>
    2600:	2000      	movs	r0, #0
    2602:	e7f4      	b.n	25ee <_mci_sync_wait_end_of_write_blocks+0xa>
    2604:	000047d4 	.word	0x000047d4
    2608:	00001561 	.word	0x00001561

0000260c <_sercom_get_hardware_index>:
    260c:	b470      	push	{r4, r5, r6}
    260e:	b087      	sub	sp, #28
    2610:	4606      	mov	r6, r0
    2612:	466c      	mov	r4, sp
    2614:	4d0c      	ldr	r5, [pc, #48]	; (2648 <_sercom_get_hardware_index+0x3c>)
    2616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    261a:	e895 0003 	ldmia.w	r5, {r0, r1}
    261e:	e884 0003 	stmia.w	r4, {r0, r1}
    2622:	2000      	movs	r0, #0
    2624:	2805      	cmp	r0, #5
    2626:	d80a      	bhi.n	263e <_sercom_get_hardware_index+0x32>
    2628:	ab06      	add	r3, sp, #24
    262a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    262e:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2632:	42b3      	cmp	r3, r6
    2634:	d001      	beq.n	263a <_sercom_get_hardware_index+0x2e>
    2636:	3001      	adds	r0, #1
    2638:	e7f4      	b.n	2624 <_sercom_get_hardware_index+0x18>
    263a:	b2c0      	uxtb	r0, r0
    263c:	e000      	b.n	2640 <_sercom_get_hardware_index+0x34>
    263e:	2000      	movs	r0, #0
    2640:	b007      	add	sp, #28
    2642:	bc70      	pop	{r4, r5, r6}
    2644:	4770      	bx	lr
    2646:	bf00      	nop
    2648:	000047ec 	.word	0x000047ec

0000264c <_sercom_usart_interrupt_handler>:
    264c:	b510      	push	{r4, lr}
    264e:	6984      	ldr	r4, [r0, #24]
    2650:	7e23      	ldrb	r3, [r4, #24]
    2652:	f013 0f01 	tst.w	r3, #1
    2656:	d003      	beq.n	2660 <_sercom_usart_interrupt_handler+0x14>
    2658:	7da3      	ldrb	r3, [r4, #22]
    265a:	f013 0f01 	tst.w	r3, #1
    265e:	d112      	bne.n	2686 <_sercom_usart_interrupt_handler+0x3a>
    2660:	7e23      	ldrb	r3, [r4, #24]
    2662:	f013 0f02 	tst.w	r3, #2
    2666:	d003      	beq.n	2670 <_sercom_usart_interrupt_handler+0x24>
    2668:	7da3      	ldrb	r3, [r4, #22]
    266a:	f013 0f02 	tst.w	r3, #2
    266e:	d10f      	bne.n	2690 <_sercom_usart_interrupt_handler+0x44>
    2670:	7e23      	ldrb	r3, [r4, #24]
    2672:	f013 0f04 	tst.w	r3, #4
    2676:	d015      	beq.n	26a4 <_sercom_usart_interrupt_handler+0x58>
    2678:	8b63      	ldrh	r3, [r4, #26]
    267a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    267e:	b163      	cbz	r3, 269a <_sercom_usart_interrupt_handler+0x4e>
    2680:	23ff      	movs	r3, #255	; 0xff
    2682:	8363      	strh	r3, [r4, #26]
    2684:	bd10      	pop	{r4, pc}
    2686:	2301      	movs	r3, #1
    2688:	7523      	strb	r3, [r4, #20]
    268a:	6803      	ldr	r3, [r0, #0]
    268c:	4798      	blx	r3
    268e:	bd10      	pop	{r4, pc}
    2690:	2302      	movs	r3, #2
    2692:	7523      	strb	r3, [r4, #20]
    2694:	6883      	ldr	r3, [r0, #8]
    2696:	4798      	blx	r3
    2698:	bd10      	pop	{r4, pc}
    269a:	6843      	ldr	r3, [r0, #4]
    269c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    269e:	b2c9      	uxtb	r1, r1
    26a0:	4798      	blx	r3
    26a2:	bd10      	pop	{r4, pc}
    26a4:	7e23      	ldrb	r3, [r4, #24]
    26a6:	09db      	lsrs	r3, r3, #7
    26a8:	d100      	bne.n	26ac <_sercom_usart_interrupt_handler+0x60>
    26aa:	bd10      	pop	{r4, pc}
    26ac:	2380      	movs	r3, #128	; 0x80
    26ae:	7623      	strb	r3, [r4, #24]
    26b0:	68c3      	ldr	r3, [r0, #12]
    26b2:	4798      	blx	r3
    26b4:	8b63      	ldrh	r3, [r4, #26]
    26b6:	b29b      	uxth	r3, r3
    26b8:	8363      	strh	r3, [r4, #26]
    26ba:	e7f6      	b.n	26aa <_sercom_usart_interrupt_handler+0x5e>

000026bc <_sercom_init_irq_param>:
    26bc:	4b03      	ldr	r3, [pc, #12]	; (26cc <_sercom_init_irq_param+0x10>)
    26be:	4298      	cmp	r0, r3
    26c0:	d000      	beq.n	26c4 <_sercom_init_irq_param+0x8>
    26c2:	4770      	bx	lr
    26c4:	4b02      	ldr	r3, [pc, #8]	; (26d0 <_sercom_init_irq_param+0x14>)
    26c6:	6019      	str	r1, [r3, #0]
    26c8:	e7fb      	b.n	26c2 <_sercom_init_irq_param+0x6>
    26ca:	bf00      	nop
    26cc:	43000400 	.word	0x43000400
    26d0:	20000218 	.word	0x20000218

000026d4 <_sercom_get_irq_num>:
    26d4:	b508      	push	{r3, lr}
    26d6:	4b04      	ldr	r3, [pc, #16]	; (26e8 <_sercom_get_irq_num+0x14>)
    26d8:	4798      	blx	r3
    26da:	0080      	lsls	r0, r0, #2
    26dc:	b2c0      	uxtb	r0, r0
    26de:	302e      	adds	r0, #46	; 0x2e
    26e0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    26e4:	bd08      	pop	{r3, pc}
    26e6:	bf00      	nop
    26e8:	0000260d 	.word	0x0000260d

000026ec <_get_sercom_index>:
    26ec:	b508      	push	{r3, lr}
    26ee:	4b0c      	ldr	r3, [pc, #48]	; (2720 <_get_sercom_index+0x34>)
    26f0:	4798      	blx	r3
    26f2:	2300      	movs	r3, #0
    26f4:	b143      	cbz	r3, 2708 <_get_sercom_index+0x1c>
    26f6:	f240 226b 	movw	r2, #619	; 0x26b
    26fa:	490a      	ldr	r1, [pc, #40]	; (2724 <_get_sercom_index+0x38>)
    26fc:	2000      	movs	r0, #0
    26fe:	4b0a      	ldr	r3, [pc, #40]	; (2728 <_get_sercom_index+0x3c>)
    2700:	4798      	blx	r3
    2702:	2300      	movs	r3, #0
    2704:	4618      	mov	r0, r3
    2706:	bd08      	pop	{r3, pc}
    2708:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    270c:	00d1      	lsls	r1, r2, #3
    270e:	4a07      	ldr	r2, [pc, #28]	; (272c <_get_sercom_index+0x40>)
    2710:	440a      	add	r2, r1
    2712:	7e12      	ldrb	r2, [r2, #24]
    2714:	4290      	cmp	r0, r2
    2716:	d0f5      	beq.n	2704 <_get_sercom_index+0x18>
    2718:	3301      	adds	r3, #1
    271a:	b2db      	uxtb	r3, r3
    271c:	e7ea      	b.n	26f4 <_get_sercom_index+0x8>
    271e:	bf00      	nop
    2720:	0000260d 	.word	0x0000260d
    2724:	00004858 	.word	0x00004858
    2728:	00001561 	.word	0x00001561
    272c:	000047ec 	.word	0x000047ec

00002730 <_usart_init>:
    2730:	b538      	push	{r3, r4, r5, lr}
    2732:	4604      	mov	r4, r0
    2734:	4b3c      	ldr	r3, [pc, #240]	; (2828 <_usart_init+0xf8>)
    2736:	4798      	blx	r3
    2738:	69e3      	ldr	r3, [r4, #28]
    273a:	f013 0f01 	tst.w	r3, #1
    273e:	d122      	bne.n	2786 <_usart_init+0x56>
    2740:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2744:	00da      	lsls	r2, r3, #3
    2746:	4b39      	ldr	r3, [pc, #228]	; (282c <_usart_init+0xfc>)
    2748:	4413      	add	r3, r2
    274a:	69da      	ldr	r2, [r3, #28]
    274c:	f002 021c 	and.w	r2, r2, #28
    2750:	69e3      	ldr	r3, [r4, #28]
    2752:	f013 0f03 	tst.w	r3, #3
    2756:	d1fb      	bne.n	2750 <_usart_init+0x20>
    2758:	6823      	ldr	r3, [r4, #0]
    275a:	f013 0f02 	tst.w	r3, #2
    275e:	d00b      	beq.n	2778 <_usart_init+0x48>
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	f023 0302 	bic.w	r3, r3, #2
    2766:	6023      	str	r3, [r4, #0]
    2768:	69e3      	ldr	r3, [r4, #28]
    276a:	f013 0f03 	tst.w	r3, #3
    276e:	d1fb      	bne.n	2768 <_usart_init+0x38>
    2770:	69e3      	ldr	r3, [r4, #28]
    2772:	f013 0f02 	tst.w	r3, #2
    2776:	d1fb      	bne.n	2770 <_usart_init+0x40>
    2778:	f042 0201 	orr.w	r2, r2, #1
    277c:	6022      	str	r2, [r4, #0]
    277e:	69e3      	ldr	r3, [r4, #28]
    2780:	f013 0f03 	tst.w	r3, #3
    2784:	d1fb      	bne.n	277e <_usart_init+0x4e>
    2786:	69e3      	ldr	r3, [r4, #28]
    2788:	f013 0f01 	tst.w	r3, #1
    278c:	d1fb      	bne.n	2786 <_usart_init+0x56>
    278e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2792:	00da      	lsls	r2, r3, #3
    2794:	4b25      	ldr	r3, [pc, #148]	; (282c <_usart_init+0xfc>)
    2796:	4413      	add	r3, r2
    2798:	69db      	ldr	r3, [r3, #28]
    279a:	6023      	str	r3, [r4, #0]
    279c:	69e3      	ldr	r3, [r4, #28]
    279e:	f013 0f03 	tst.w	r3, #3
    27a2:	d1fb      	bne.n	279c <_usart_init+0x6c>
    27a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27a8:	00da      	lsls	r2, r3, #3
    27aa:	4b20      	ldr	r3, [pc, #128]	; (282c <_usart_init+0xfc>)
    27ac:	4413      	add	r3, r2
    27ae:	6a1b      	ldr	r3, [r3, #32]
    27b0:	6063      	str	r3, [r4, #4]
    27b2:	69e3      	ldr	r3, [r4, #28]
    27b4:	f013 0f1f 	tst.w	r3, #31
    27b8:	d1fb      	bne.n	27b2 <_usart_init+0x82>
    27ba:	0042      	lsls	r2, r0, #1
    27bc:	4402      	add	r2, r0
    27be:	00d1      	lsls	r1, r2, #3
    27c0:	4b1a      	ldr	r3, [pc, #104]	; (282c <_usart_init+0xfc>)
    27c2:	440b      	add	r3, r1
    27c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    27c6:	60a2      	str	r2, [r4, #8]
    27c8:	69db      	ldr	r3, [r3, #28]
    27ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    27ce:	d10a      	bne.n	27e6 <_usart_init+0xb6>
    27d0:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    27d4:	d107      	bne.n	27e6 <_usart_init+0xb6>
    27d6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    27da:	00da      	lsls	r2, r3, #3
    27dc:	4b13      	ldr	r3, [pc, #76]	; (282c <_usart_init+0xfc>)
    27de:	4413      	add	r3, r2
    27e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    27e2:	81a3      	strh	r3, [r4, #12]
    27e4:	e00f      	b.n	2806 <_usart_init+0xd6>
    27e6:	0042      	lsls	r2, r0, #1
    27e8:	4402      	add	r2, r0
    27ea:	00d1      	lsls	r1, r2, #3
    27ec:	4b0f      	ldr	r3, [pc, #60]	; (282c <_usart_init+0xfc>)
    27ee:	440b      	add	r3, r1
    27f0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    27f2:	89a2      	ldrh	r2, [r4, #12]
    27f4:	f361 020c 	bfi	r2, r1, #0, #13
    27f8:	81a2      	strh	r2, [r4, #12]
    27fa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    27fe:	89a3      	ldrh	r3, [r4, #12]
    2800:	f362 334f 	bfi	r3, r2, #13, #3
    2804:	81a3      	strh	r3, [r4, #12]
    2806:	4a09      	ldr	r2, [pc, #36]	; (282c <_usart_init+0xfc>)
    2808:	0043      	lsls	r3, r0, #1
    280a:	181d      	adds	r5, r3, r0
    280c:	00e9      	lsls	r1, r5, #3
    280e:	460d      	mov	r5, r1
    2810:	4411      	add	r1, r2
    2812:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
    2816:	73a1      	strb	r1, [r4, #14]
    2818:	442a      	add	r2, r5
    281a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    281e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    2822:	2000      	movs	r0, #0
    2824:	bd38      	pop	{r3, r4, r5, pc}
    2826:	bf00      	nop
    2828:	000026ed 	.word	0x000026ed
    282c:	000047ec 	.word	0x000047ec

00002830 <_usart_async_init>:
    2830:	b570      	push	{r4, r5, r6, lr}
    2832:	460c      	mov	r4, r1
    2834:	4606      	mov	r6, r0
    2836:	22cb      	movs	r2, #203	; 0xcb
    2838:	4918      	ldr	r1, [pc, #96]	; (289c <_usart_async_init+0x6c>)
    283a:	3000      	adds	r0, #0
    283c:	bf18      	it	ne
    283e:	2001      	movne	r0, #1
    2840:	4b17      	ldr	r3, [pc, #92]	; (28a0 <_usart_async_init+0x70>)
    2842:	4798      	blx	r3
    2844:	4620      	mov	r0, r4
    2846:	4b17      	ldr	r3, [pc, #92]	; (28a4 <_usart_async_init+0x74>)
    2848:	4798      	blx	r3
    284a:	4605      	mov	r5, r0
    284c:	b108      	cbz	r0, 2852 <_usart_async_init+0x22>
    284e:	4628      	mov	r0, r5
    2850:	bd70      	pop	{r4, r5, r6, pc}
    2852:	61b4      	str	r4, [r6, #24]
    2854:	4631      	mov	r1, r6
    2856:	4620      	mov	r0, r4
    2858:	4b13      	ldr	r3, [pc, #76]	; (28a8 <_usart_async_init+0x78>)
    285a:	4798      	blx	r3
    285c:	4620      	mov	r0, r4
    285e:	4b13      	ldr	r3, [pc, #76]	; (28ac <_usart_async_init+0x7c>)
    2860:	4798      	blx	r3
    2862:	2400      	movs	r4, #0
    2864:	e016      	b.n	2894 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2866:	0941      	lsrs	r1, r0, #5
    2868:	f000 021f 	and.w	r2, r0, #31
    286c:	2301      	movs	r3, #1
    286e:	4093      	lsls	r3, r2
    2870:	4a0f      	ldr	r2, [pc, #60]	; (28b0 <_usart_async_init+0x80>)
    2872:	f101 0620 	add.w	r6, r1, #32
    2876:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    287a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    287e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2882:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2886:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    288a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    288e:	3001      	adds	r0, #1
    2890:	b2c0      	uxtb	r0, r0
    2892:	3401      	adds	r4, #1
    2894:	2c03      	cmp	r4, #3
    2896:	d9e6      	bls.n	2866 <_usart_async_init+0x36>
    2898:	e7d9      	b.n	284e <_usart_async_init+0x1e>
    289a:	bf00      	nop
    289c:	00004858 	.word	0x00004858
    28a0:	00001561 	.word	0x00001561
    28a4:	00002731 	.word	0x00002731
    28a8:	000026bd 	.word	0x000026bd
    28ac:	000026d5 	.word	0x000026d5
    28b0:	e000e100 	.word	0xe000e100

000028b4 <_usart_async_write_byte>:
    28b4:	6983      	ldr	r3, [r0, #24]
    28b6:	6299      	str	r1, [r3, #40]	; 0x28
    28b8:	4770      	bx	lr

000028ba <_usart_async_enable_byte_sent_irq>:
    28ba:	6983      	ldr	r3, [r0, #24]
    28bc:	2201      	movs	r2, #1
    28be:	759a      	strb	r2, [r3, #22]
    28c0:	4770      	bx	lr

000028c2 <_usart_async_enable_tx_done_irq>:
    28c2:	6983      	ldr	r3, [r0, #24]
    28c4:	2202      	movs	r2, #2
    28c6:	759a      	strb	r2, [r3, #22]
    28c8:	4770      	bx	lr
	...
=======
    1054:	b570      	push	{r4, r5, r6, lr}
    1056:	460d      	mov	r5, r1
    1058:	4616      	mov	r6, r2
	ASSERT(mci);
    105a:	4604      	mov	r4, r0
    105c:	2272      	movs	r2, #114	; 0x72
    105e:	4906      	ldr	r1, [pc, #24]	; (1078 <mci_sync_send_cmd+0x24>)
    1060:	3000      	adds	r0, #0
    1062:	bf18      	it	ne
    1064:	2001      	movne	r0, #1
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <mci_sync_send_cmd+0x28>)
    1068:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    106a:	4632      	mov	r2, r6
    106c:	4629      	mov	r1, r5
    106e:	4620      	mov	r0, r4
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <mci_sync_send_cmd+0x2c>)
    1072:	4798      	blx	r3
}
    1074:	bd70      	pop	{r4, r5, r6, pc}
    1076:	bf00      	nop
    1078:	00005124 	.word	0x00005124
    107c:	00001671 	.word	0x00001671
    1080:	000024d5 	.word	0x000024d5

00001084 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1084:	b510      	push	{r4, lr}
	ASSERT(mci);
    1086:	4604      	mov	r4, r0
    1088:	227b      	movs	r2, #123	; 0x7b
    108a:	4905      	ldr	r1, [pc, #20]	; (10a0 <mci_sync_get_response+0x1c>)
    108c:	3000      	adds	r0, #0
    108e:	bf18      	it	ne
    1090:	2001      	movne	r0, #1
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <mci_sync_get_response+0x20>)
    1094:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    1096:	4620      	mov	r0, r4
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <mci_sync_get_response+0x24>)
    109a:	4798      	blx	r3
}
    109c:	bd10      	pop	{r4, pc}
    109e:	bf00      	nop
    10a0:	00005124 	.word	0x00005124
    10a4:	00001671 	.word	0x00001671
    10a8:	0000252d 	.word	0x0000252d
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

000028cc <SERCOM5_0_Handler>:
    28cc:	b508      	push	{r3, lr}
    28ce:	4b02      	ldr	r3, [pc, #8]	; (28d8 <SERCOM5_0_Handler+0xc>)
    28d0:	6818      	ldr	r0, [r3, #0]
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <SERCOM5_0_Handler+0x10>)
    28d4:	4798      	blx	r3
    28d6:	bd08      	pop	{r3, pc}
    28d8:	20000218 	.word	0x20000218
    28dc:	0000264d 	.word	0x0000264d

000028e0 <SERCOM5_1_Handler>:
    28e0:	b508      	push	{r3, lr}
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <SERCOM5_1_Handler+0xc>)
    28e4:	6818      	ldr	r0, [r3, #0]
    28e6:	4b02      	ldr	r3, [pc, #8]	; (28f0 <SERCOM5_1_Handler+0x10>)
    28e8:	4798      	blx	r3
    28ea:	bd08      	pop	{r3, pc}
    28ec:	20000218 	.word	0x20000218
    28f0:	0000264d 	.word	0x0000264d

000028f4 <SERCOM5_2_Handler>:
    28f4:	b508      	push	{r3, lr}
    28f6:	4b02      	ldr	r3, [pc, #8]	; (2900 <SERCOM5_2_Handler+0xc>)
    28f8:	6818      	ldr	r0, [r3, #0]
    28fa:	4b02      	ldr	r3, [pc, #8]	; (2904 <SERCOM5_2_Handler+0x10>)
    28fc:	4798      	blx	r3
    28fe:	bd08      	pop	{r3, pc}
    2900:	20000218 	.word	0x20000218
    2904:	0000264d 	.word	0x0000264d

00002908 <SERCOM5_3_Handler>:
    2908:	b508      	push	{r3, lr}
    290a:	4b02      	ldr	r3, [pc, #8]	; (2914 <SERCOM5_3_Handler+0xc>)
    290c:	6818      	ldr	r0, [r3, #0]
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <SERCOM5_3_Handler+0x10>)
    2910:	4798      	blx	r3
    2912:	bd08      	pop	{r3, pc}
    2914:	20000218 	.word	0x20000218
    2918:	0000264d 	.word	0x0000264d

0000291c <_system_time_init>:
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <_system_time_init+0x10>)
    291e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2922:	605a      	str	r2, [r3, #4]
    2924:	2205      	movs	r2, #5
    2926:	601a      	str	r2, [r3, #0]
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	e000e010 	.word	0xe000e010

00002930 <_delay_init>:
    2930:	b508      	push	{r3, lr}
    2932:	4b01      	ldr	r3, [pc, #4]	; (2938 <_delay_init+0x8>)
    2934:	4798      	blx	r3
    2936:	bd08      	pop	{r3, pc}
    2938:	0000291d 	.word	0x0000291d

0000293c <_delay_cycles>:
    293c:	0e08      	lsrs	r0, r1, #24
    293e:	e00d      	b.n	295c <_delay_cycles+0x20>
    2940:	4b0d      	ldr	r3, [pc, #52]	; (2978 <_delay_cycles+0x3c>)
    2942:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2946:	6058      	str	r0, [r3, #4]
    2948:	6098      	str	r0, [r3, #8]
    294a:	4b0b      	ldr	r3, [pc, #44]	; (2978 <_delay_cycles+0x3c>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2952:	d0fa      	beq.n	294a <_delay_cycles+0xe>
    2954:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2958:	3101      	adds	r1, #1
    295a:	4610      	mov	r0, r2
    295c:	1e43      	subs	r3, r0, #1
    295e:	b2da      	uxtb	r2, r3
    2960:	2800      	cmp	r0, #0
    2962:	d1ed      	bne.n	2940 <_delay_cycles+0x4>
    2964:	4b04      	ldr	r3, [pc, #16]	; (2978 <_delay_cycles+0x3c>)
    2966:	6059      	str	r1, [r3, #4]
    2968:	6099      	str	r1, [r3, #8]
    296a:	4b03      	ldr	r3, [pc, #12]	; (2978 <_delay_cycles+0x3c>)
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2972:	d0fa      	beq.n	296a <_delay_cycles+0x2e>
    2974:	4770      	bx	lr
    2976:	bf00      	nop
    2978:	e000e010 	.word	0xe000e010

0000297c <tc_interrupt_handler>:
    297c:	b508      	push	{r3, lr}
    297e:	68c3      	ldr	r3, [r0, #12]
    2980:	7a9a      	ldrb	r2, [r3, #10]
    2982:	f012 0f01 	tst.w	r2, #1
    2986:	d100      	bne.n	298a <tc_interrupt_handler+0xe>
    2988:	bd08      	pop	{r3, pc}
    298a:	2201      	movs	r2, #1
    298c:	729a      	strb	r2, [r3, #10]
    298e:	6803      	ldr	r3, [r0, #0]
    2990:	4798      	blx	r3
    2992:	e7f9      	b.n	2988 <tc_interrupt_handler+0xc>

00002994 <tc_pwm_interrupt_handler>:
    2994:	b538      	push	{r3, r4, r5, lr}
    2996:	4605      	mov	r5, r0
    2998:	6904      	ldr	r4, [r0, #16]
    299a:	7aa3      	ldrb	r3, [r4, #10]
    299c:	f013 0f01 	tst.w	r3, #1
    29a0:	d004      	beq.n	29ac <tc_pwm_interrupt_handler+0x18>
    29a2:	2301      	movs	r3, #1
    29a4:	72a3      	strb	r3, [r4, #10]
    29a6:	6803      	ldr	r3, [r0, #0]
    29a8:	b103      	cbz	r3, 29ac <tc_pwm_interrupt_handler+0x18>
    29aa:	4798      	blx	r3
    29ac:	7a63      	ldrb	r3, [r4, #9]
    29ae:	f013 0f02 	tst.w	r3, #2
    29b2:	d005      	beq.n	29c0 <tc_pwm_interrupt_handler+0x2c>
    29b4:	2302      	movs	r3, #2
    29b6:	72a3      	strb	r3, [r4, #10]
    29b8:	686b      	ldr	r3, [r5, #4]
    29ba:	b10b      	cbz	r3, 29c0 <tc_pwm_interrupt_handler+0x2c>
    29bc:	4628      	mov	r0, r5
    29be:	4798      	blx	r3
    29c0:	bd38      	pop	{r3, r4, r5, pc}
	...

<<<<<<< HEAD
000029c4 <_tc_init_irq_param>:
    29c4:	4b06      	ldr	r3, [pc, #24]	; (29e0 <_tc_init_irq_param+0x1c>)
    29c6:	4298      	cmp	r0, r3
    29c8:	d003      	beq.n	29d2 <_tc_init_irq_param+0xe>
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <_tc_init_irq_param+0x20>)
    29cc:	4298      	cmp	r0, r3
    29ce:	d003      	beq.n	29d8 <_tc_init_irq_param+0x14>
    29d0:	4770      	bx	lr
    29d2:	4b05      	ldr	r3, [pc, #20]	; (29e8 <_tc_init_irq_param+0x24>)
    29d4:	6019      	str	r1, [r3, #0]
    29d6:	e7f8      	b.n	29ca <_tc_init_irq_param+0x6>
    29d8:	4b03      	ldr	r3, [pc, #12]	; (29e8 <_tc_init_irq_param+0x24>)
    29da:	6059      	str	r1, [r3, #4]
    29dc:	e7f8      	b.n	29d0 <_tc_init_irq_param+0xc>
    29de:	bf00      	nop
    29e0:	40003800 	.word	0x40003800
    29e4:	40003c00 	.word	0x40003c00
    29e8:	2000021c 	.word	0x2000021c

000029ec <get_tc_index>:
    29ec:	b570      	push	{r4, r5, r6, lr}
    29ee:	b086      	sub	sp, #24
    29f0:	4606      	mov	r6, r0
    29f2:	466c      	mov	r4, sp
    29f4:	4d17      	ldr	r5, [pc, #92]	; (2a54 <get_tc_index+0x68>)
    29f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    29f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    29fa:	e895 0003 	ldmia.w	r5, {r0, r1}
    29fe:	e884 0003 	stmia.w	r4, {r0, r1}
    2a02:	2300      	movs	r3, #0
    2a04:	2b05      	cmp	r3, #5
    2a06:	d80a      	bhi.n	2a1e <get_tc_index+0x32>
    2a08:	aa06      	add	r2, sp, #24
    2a0a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2a0e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2a12:	42b2      	cmp	r2, r6
    2a14:	d001      	beq.n	2a1a <get_tc_index+0x2e>
    2a16:	3301      	adds	r3, #1
    2a18:	e7f4      	b.n	2a04 <get_tc_index+0x18>
    2a1a:	b2db      	uxtb	r3, r3
    2a1c:	e000      	b.n	2a20 <get_tc_index+0x34>
    2a1e:	2300      	movs	r3, #0
    2a20:	2200      	movs	r2, #0
    2a22:	2a01      	cmp	r2, #1
    2a24:	d80b      	bhi.n	2a3e <get_tc_index+0x52>
    2a26:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2a2a:	0081      	lsls	r1, r0, #2
    2a2c:	480a      	ldr	r0, [pc, #40]	; (2a58 <get_tc_index+0x6c>)
    2a2e:	5c41      	ldrb	r1, [r0, r1]
    2a30:	4299      	cmp	r1, r3
    2a32:	d002      	beq.n	2a3a <get_tc_index+0x4e>
    2a34:	3201      	adds	r2, #1
    2a36:	b2d2      	uxtb	r2, r2
    2a38:	e7f3      	b.n	2a22 <get_tc_index+0x36>
    2a3a:	b250      	sxtb	r0, r2
    2a3c:	e007      	b.n	2a4e <get_tc_index+0x62>
    2a3e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2a42:	4906      	ldr	r1, [pc, #24]	; (2a5c <get_tc_index+0x70>)
    2a44:	2000      	movs	r0, #0
    2a46:	4b06      	ldr	r3, [pc, #24]	; (2a60 <get_tc_index+0x74>)
    2a48:	4798      	blx	r3
    2a4a:	f04f 30ff 	mov.w	r0, #4294967295
    2a4e:	b006      	add	sp, #24
    2a50:	bd70      	pop	{r4, r5, r6, pc}
    2a52:	bf00      	nop
    2a54:	00004874 	.word	0x00004874
    2a58:	20000000 	.word	0x20000000
    2a5c:	0000488c 	.word	0x0000488c
    2a60:	00001561 	.word	0x00001561

00002a64 <_timer_init>:
    2a64:	b570      	push	{r4, r5, r6, lr}
    2a66:	4606      	mov	r6, r0
    2a68:	460c      	mov	r4, r1
    2a6a:	4608      	mov	r0, r1
    2a6c:	4b6c      	ldr	r3, [pc, #432]	; (2c20 <_timer_init+0x1bc>)
    2a6e:	4798      	blx	r3
    2a70:	4605      	mov	r5, r0
    2a72:	60f4      	str	r4, [r6, #12]
    2a74:	228f      	movs	r2, #143	; 0x8f
    2a76:	496b      	ldr	r1, [pc, #428]	; (2c24 <_timer_init+0x1c0>)
    2a78:	2001      	movs	r0, #1
    2a7a:	4b6b      	ldr	r3, [pc, #428]	; (2c28 <_timer_init+0x1c4>)
    2a7c:	4798      	blx	r3
    2a7e:	6923      	ldr	r3, [r4, #16]
    2a80:	f013 0f01 	tst.w	r3, #1
    2a84:	d119      	bne.n	2aba <_timer_init+0x56>
    2a86:	6923      	ldr	r3, [r4, #16]
    2a88:	f013 0f03 	tst.w	r3, #3
    2a8c:	d1fb      	bne.n	2a86 <_timer_init+0x22>
    2a8e:	6823      	ldr	r3, [r4, #0]
    2a90:	f013 0f02 	tst.w	r3, #2
    2a94:	d00b      	beq.n	2aae <_timer_init+0x4a>
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	f023 0302 	bic.w	r3, r3, #2
    2a9c:	6023      	str	r3, [r4, #0]
    2a9e:	6923      	ldr	r3, [r4, #16]
    2aa0:	f013 0f03 	tst.w	r3, #3
    2aa4:	d1fb      	bne.n	2a9e <_timer_init+0x3a>
    2aa6:	6923      	ldr	r3, [r4, #16]
    2aa8:	f013 0f02 	tst.w	r3, #2
    2aac:	d1fb      	bne.n	2aa6 <_timer_init+0x42>
    2aae:	2301      	movs	r3, #1
    2ab0:	6023      	str	r3, [r4, #0]
    2ab2:	6923      	ldr	r3, [r4, #16]
    2ab4:	f013 0f03 	tst.w	r3, #3
    2ab8:	d1fb      	bne.n	2ab2 <_timer_init+0x4e>
    2aba:	6923      	ldr	r3, [r4, #16]
    2abc:	f013 0f01 	tst.w	r3, #1
    2ac0:	d1fb      	bne.n	2aba <_timer_init+0x56>
    2ac2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ac6:	009a      	lsls	r2, r3, #2
    2ac8:	4b58      	ldr	r3, [pc, #352]	; (2c2c <_timer_init+0x1c8>)
    2aca:	4413      	add	r3, r2
    2acc:	685b      	ldr	r3, [r3, #4]
    2ace:	6023      	str	r3, [r4, #0]
    2ad0:	6923      	ldr	r3, [r4, #16]
    2ad2:	f013 0f03 	tst.w	r3, #3
    2ad6:	d1fb      	bne.n	2ad0 <_timer_init+0x6c>
    2ad8:	00aa      	lsls	r2, r5, #2
    2ada:	442a      	add	r2, r5
    2adc:	0091      	lsls	r1, r2, #2
    2ade:	4b53      	ldr	r3, [pc, #332]	; (2c2c <_timer_init+0x1c8>)
    2ae0:	440b      	add	r3, r1
    2ae2:	7a9a      	ldrb	r2, [r3, #10]
    2ae4:	73e2      	strb	r2, [r4, #15]
    2ae6:	891a      	ldrh	r2, [r3, #8]
    2ae8:	80e2      	strh	r2, [r4, #6]
    2aea:	2201      	movs	r2, #1
    2aec:	7322      	strb	r2, [r4, #12]
    2aee:	685b      	ldr	r3, [r3, #4]
    2af0:	f003 030c 	and.w	r3, r3, #12
    2af4:	2b08      	cmp	r3, #8
    2af6:	d05b      	beq.n	2bb0 <_timer_init+0x14c>
    2af8:	2b00      	cmp	r3, #0
    2afa:	d16d      	bne.n	2bd8 <_timer_init+0x174>
    2afc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b00:	009a      	lsls	r2, r3, #2
    2b02:	4b4a      	ldr	r3, [pc, #296]	; (2c2c <_timer_init+0x1c8>)
    2b04:	4413      	add	r3, r2
    2b06:	899b      	ldrh	r3, [r3, #12]
    2b08:	83a3      	strh	r3, [r4, #28]
    2b0a:	6923      	ldr	r3, [r4, #16]
    2b0c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b10:	d1fb      	bne.n	2b0a <_timer_init+0xa6>
    2b12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b16:	009a      	lsls	r2, r3, #2
    2b18:	4b44      	ldr	r3, [pc, #272]	; (2c2c <_timer_init+0x1c8>)
    2b1a:	4413      	add	r3, r2
    2b1c:	8a1b      	ldrh	r3, [r3, #16]
    2b1e:	83e3      	strh	r3, [r4, #30]
    2b20:	6923      	ldr	r3, [r4, #16]
    2b22:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b26:	d1fb      	bne.n	2b20 <_timer_init+0xbc>
    2b28:	2301      	movs	r3, #1
    2b2a:	7263      	strb	r3, [r4, #9]
    2b2c:	4631      	mov	r1, r6
    2b2e:	4620      	mov	r0, r4
    2b30:	4b3f      	ldr	r3, [pc, #252]	; (2c30 <_timer_init+0x1cc>)
    2b32:	4798      	blx	r3
    2b34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b38:	009a      	lsls	r2, r3, #2
    2b3a:	4b3c      	ldr	r3, [pc, #240]	; (2c2c <_timer_init+0x1c8>)
    2b3c:	4413      	add	r3, r2
    2b3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b42:	2b00      	cmp	r3, #0
    2b44:	db0d      	blt.n	2b62 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b46:	095a      	lsrs	r2, r3, #5
    2b48:	f003 031f 	and.w	r3, r3, #31
    2b4c:	2101      	movs	r1, #1
    2b4e:	fa01 f303 	lsl.w	r3, r1, r3
    2b52:	3220      	adds	r2, #32
    2b54:	4937      	ldr	r1, [pc, #220]	; (2c34 <_timer_init+0x1d0>)
    2b56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b5e:	f3bf 8f6f 	isb	sy
    2b62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b66:	009a      	lsls	r2, r3, #2
    2b68:	4b30      	ldr	r3, [pc, #192]	; (2c2c <_timer_init+0x1c8>)
    2b6a:	4413      	add	r3, r2
    2b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b70:	2b00      	cmp	r3, #0
    2b72:	db09      	blt.n	2b88 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b74:	095a      	lsrs	r2, r3, #5
    2b76:	f003 031f 	and.w	r3, r3, #31
    2b7a:	2101      	movs	r1, #1
    2b7c:	fa01 f303 	lsl.w	r3, r1, r3
    2b80:	3260      	adds	r2, #96	; 0x60
    2b82:	492c      	ldr	r1, [pc, #176]	; (2c34 <_timer_init+0x1d0>)
    2b84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2b88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2b8c:	00aa      	lsls	r2, r5, #2
    2b8e:	4b27      	ldr	r3, [pc, #156]	; (2c2c <_timer_init+0x1c8>)
    2b90:	4413      	add	r3, r2
    2b92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2b96:	2b00      	cmp	r3, #0
    2b98:	db08      	blt.n	2bac <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b9a:	0959      	lsrs	r1, r3, #5
    2b9c:	f003 031f 	and.w	r3, r3, #31
    2ba0:	2201      	movs	r2, #1
    2ba2:	fa02 f303 	lsl.w	r3, r2, r3
    2ba6:	4a23      	ldr	r2, [pc, #140]	; (2c34 <_timer_init+0x1d0>)
    2ba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    2bac:	2000      	movs	r0, #0
    2bae:	bd70      	pop	{r4, r5, r6, pc}
    2bb0:	4b1e      	ldr	r3, [pc, #120]	; (2c2c <_timer_init+0x1c8>)
    2bb2:	440b      	add	r3, r1
    2bb4:	68db      	ldr	r3, [r3, #12]
    2bb6:	61e3      	str	r3, [r4, #28]
    2bb8:	6923      	ldr	r3, [r4, #16]
    2bba:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bbe:	d1fb      	bne.n	2bb8 <_timer_init+0x154>
    2bc0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bc4:	009a      	lsls	r2, r3, #2
    2bc6:	4b19      	ldr	r3, [pc, #100]	; (2c2c <_timer_init+0x1c8>)
    2bc8:	4413      	add	r3, r2
    2bca:	691b      	ldr	r3, [r3, #16]
    2bcc:	6223      	str	r3, [r4, #32]
    2bce:	6923      	ldr	r3, [r4, #16]
    2bd0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bd4:	d1fb      	bne.n	2bce <_timer_init+0x16a>
    2bd6:	e7a7      	b.n	2b28 <_timer_init+0xc4>
    2bd8:	2b04      	cmp	r3, #4
    2bda:	d1a5      	bne.n	2b28 <_timer_init+0xc4>
    2bdc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2be0:	009a      	lsls	r2, r3, #2
    2be2:	4b12      	ldr	r3, [pc, #72]	; (2c2c <_timer_init+0x1c8>)
    2be4:	4413      	add	r3, r2
    2be6:	7b1b      	ldrb	r3, [r3, #12]
    2be8:	7723      	strb	r3, [r4, #28]
    2bea:	6923      	ldr	r3, [r4, #16]
    2bec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2bf0:	d1fb      	bne.n	2bea <_timer_init+0x186>
    2bf2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2bf6:	009a      	lsls	r2, r3, #2
    2bf8:	4b0c      	ldr	r3, [pc, #48]	; (2c2c <_timer_init+0x1c8>)
    2bfa:	4413      	add	r3, r2
    2bfc:	7c1b      	ldrb	r3, [r3, #16]
    2bfe:	7763      	strb	r3, [r4, #29]
    2c00:	6923      	ldr	r3, [r4, #16]
    2c02:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2c06:	d1fb      	bne.n	2c00 <_timer_init+0x19c>
    2c08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c0c:	009a      	lsls	r2, r3, #2
    2c0e:	4b07      	ldr	r3, [pc, #28]	; (2c2c <_timer_init+0x1c8>)
    2c10:	4413      	add	r3, r2
    2c12:	7adb      	ldrb	r3, [r3, #11]
    2c14:	76e3      	strb	r3, [r4, #27]
    2c16:	6923      	ldr	r3, [r4, #16]
    2c18:	f013 0f20 	tst.w	r3, #32
    2c1c:	d1fb      	bne.n	2c16 <_timer_init+0x1b2>
    2c1e:	e783      	b.n	2b28 <_timer_init+0xc4>
    2c20:	000029ed 	.word	0x000029ed
    2c24:	0000488c 	.word	0x0000488c
    2c28:	00001561 	.word	0x00001561
    2c2c:	20000000 	.word	0x20000000
    2c30:	000029c5 	.word	0x000029c5
    2c34:	e000e100 	.word	0xe000e100

00002c38 <_pwm_init>:
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	4606      	mov	r6, r0
    2c3c:	460c      	mov	r4, r1
    2c3e:	4608      	mov	r0, r1
    2c40:	4b59      	ldr	r3, [pc, #356]	; (2da8 <_pwm_init+0x170>)
    2c42:	4798      	blx	r3
    2c44:	4605      	mov	r5, r0
    2c46:	6134      	str	r4, [r6, #16]
    2c48:	6923      	ldr	r3, [r4, #16]
    2c4a:	f013 0f01 	tst.w	r3, #1
    2c4e:	d119      	bne.n	2c84 <_pwm_init+0x4c>
    2c50:	6923      	ldr	r3, [r4, #16]
    2c52:	f013 0f03 	tst.w	r3, #3
    2c56:	d1fb      	bne.n	2c50 <_pwm_init+0x18>
    2c58:	6823      	ldr	r3, [r4, #0]
    2c5a:	f013 0f02 	tst.w	r3, #2
    2c5e:	d00b      	beq.n	2c78 <_pwm_init+0x40>
    2c60:	6823      	ldr	r3, [r4, #0]
    2c62:	f023 0302 	bic.w	r3, r3, #2
    2c66:	6023      	str	r3, [r4, #0]
    2c68:	6923      	ldr	r3, [r4, #16]
    2c6a:	f013 0f03 	tst.w	r3, #3
    2c6e:	d1fb      	bne.n	2c68 <_pwm_init+0x30>
    2c70:	6923      	ldr	r3, [r4, #16]
    2c72:	f013 0f02 	tst.w	r3, #2
    2c76:	d1fb      	bne.n	2c70 <_pwm_init+0x38>
    2c78:	2301      	movs	r3, #1
    2c7a:	6023      	str	r3, [r4, #0]
    2c7c:	6923      	ldr	r3, [r4, #16]
    2c7e:	f013 0f03 	tst.w	r3, #3
    2c82:	d1fb      	bne.n	2c7c <_pwm_init+0x44>
    2c84:	6923      	ldr	r3, [r4, #16]
    2c86:	f013 0f01 	tst.w	r3, #1
    2c8a:	d1fb      	bne.n	2c84 <_pwm_init+0x4c>
    2c8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2c90:	009a      	lsls	r2, r3, #2
    2c92:	4b46      	ldr	r3, [pc, #280]	; (2dac <_pwm_init+0x174>)
    2c94:	4413      	add	r3, r2
    2c96:	685b      	ldr	r3, [r3, #4]
    2c98:	6023      	str	r3, [r4, #0]
    2c9a:	6923      	ldr	r3, [r4, #16]
    2c9c:	f013 0f03 	tst.w	r3, #3
    2ca0:	d1fb      	bne.n	2c9a <_pwm_init+0x62>
    2ca2:	00aa      	lsls	r2, r5, #2
    2ca4:	442a      	add	r2, r5
    2ca6:	0091      	lsls	r1, r2, #2
    2ca8:	4b40      	ldr	r3, [pc, #256]	; (2dac <_pwm_init+0x174>)
    2caa:	440b      	add	r3, r1
    2cac:	7a9a      	ldrb	r2, [r3, #10]
    2cae:	73e2      	strb	r2, [r4, #15]
    2cb0:	891a      	ldrh	r2, [r3, #8]
    2cb2:	80e2      	strh	r2, [r4, #6]
    2cb4:	2203      	movs	r2, #3
    2cb6:	7322      	strb	r2, [r4, #12]
    2cb8:	685b      	ldr	r3, [r3, #4]
    2cba:	f003 030c 	and.w	r3, r3, #12
    2cbe:	2b08      	cmp	r3, #8
    2cc0:	d059      	beq.n	2d76 <_pwm_init+0x13e>
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d16b      	bne.n	2d9e <_pwm_init+0x166>
    2cc6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cca:	009a      	lsls	r2, r3, #2
    2ccc:	4b37      	ldr	r3, [pc, #220]	; (2dac <_pwm_init+0x174>)
    2cce:	4413      	add	r3, r2
    2cd0:	899b      	ldrh	r3, [r3, #12]
    2cd2:	83a3      	strh	r3, [r4, #28]
    2cd4:	6923      	ldr	r3, [r4, #16]
    2cd6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cda:	d1fb      	bne.n	2cd4 <_pwm_init+0x9c>
    2cdc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ce0:	009a      	lsls	r2, r3, #2
    2ce2:	4b32      	ldr	r3, [pc, #200]	; (2dac <_pwm_init+0x174>)
    2ce4:	4413      	add	r3, r2
    2ce6:	8a1b      	ldrh	r3, [r3, #16]
    2ce8:	83e3      	strh	r3, [r4, #30]
    2cea:	6923      	ldr	r3, [r4, #16]
    2cec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2cf0:	d1fb      	bne.n	2cea <_pwm_init+0xb2>
    2cf2:	4631      	mov	r1, r6
    2cf4:	4620      	mov	r0, r4
    2cf6:	4b2e      	ldr	r3, [pc, #184]	; (2db0 <_pwm_init+0x178>)
    2cf8:	4798      	blx	r3
    2cfa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2cfe:	009a      	lsls	r2, r3, #2
    2d00:	4b2a      	ldr	r3, [pc, #168]	; (2dac <_pwm_init+0x174>)
    2d02:	4413      	add	r3, r2
    2d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d08:	2b00      	cmp	r3, #0
    2d0a:	db0d      	blt.n	2d28 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d0c:	095a      	lsrs	r2, r3, #5
    2d0e:	f003 031f 	and.w	r3, r3, #31
    2d12:	2101      	movs	r1, #1
    2d14:	fa01 f303 	lsl.w	r3, r1, r3
    2d18:	3220      	adds	r2, #32
    2d1a:	4926      	ldr	r1, [pc, #152]	; (2db4 <_pwm_init+0x17c>)
    2d1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d24:	f3bf 8f6f 	isb	sy
    2d28:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d2c:	009a      	lsls	r2, r3, #2
    2d2e:	4b1f      	ldr	r3, [pc, #124]	; (2dac <_pwm_init+0x174>)
    2d30:	4413      	add	r3, r2
    2d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d36:	2b00      	cmp	r3, #0
    2d38:	db09      	blt.n	2d4e <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d3a:	095a      	lsrs	r2, r3, #5
    2d3c:	f003 031f 	and.w	r3, r3, #31
    2d40:	2101      	movs	r1, #1
    2d42:	fa01 f303 	lsl.w	r3, r1, r3
    2d46:	3260      	adds	r2, #96	; 0x60
    2d48:	491a      	ldr	r1, [pc, #104]	; (2db4 <_pwm_init+0x17c>)
    2d4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2d4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2d52:	00aa      	lsls	r2, r5, #2
    2d54:	4b15      	ldr	r3, [pc, #84]	; (2dac <_pwm_init+0x174>)
    2d56:	4413      	add	r3, r2
    2d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	db21      	blt.n	2da4 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d60:	0959      	lsrs	r1, r3, #5
    2d62:	f003 031f 	and.w	r3, r3, #31
    2d66:	2201      	movs	r2, #1
    2d68:	fa02 f303 	lsl.w	r3, r2, r3
    2d6c:	4a11      	ldr	r2, [pc, #68]	; (2db4 <_pwm_init+0x17c>)
    2d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    2d72:	2000      	movs	r0, #0
    2d74:	bd70      	pop	{r4, r5, r6, pc}
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <_pwm_init+0x174>)
    2d78:	440b      	add	r3, r1
    2d7a:	68db      	ldr	r3, [r3, #12]
    2d7c:	61e3      	str	r3, [r4, #28]
    2d7e:	6923      	ldr	r3, [r4, #16]
    2d80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d84:	d1fb      	bne.n	2d7e <_pwm_init+0x146>
    2d86:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2d8a:	009a      	lsls	r2, r3, #2
    2d8c:	4b07      	ldr	r3, [pc, #28]	; (2dac <_pwm_init+0x174>)
    2d8e:	4413      	add	r3, r2
    2d90:	691b      	ldr	r3, [r3, #16]
    2d92:	6223      	str	r3, [r4, #32]
    2d94:	6923      	ldr	r3, [r4, #16]
    2d96:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2d9a:	d1fb      	bne.n	2d94 <_pwm_init+0x15c>
    2d9c:	e7a9      	b.n	2cf2 <_pwm_init+0xba>
    2d9e:	f04f 30ff 	mov.w	r0, #4294967295
    2da2:	bd70      	pop	{r4, r5, r6, pc}
    2da4:	2000      	movs	r0, #0
    2da6:	bd70      	pop	{r4, r5, r6, pc}
    2da8:	000029ed 	.word	0x000029ed
    2dac:	20000000 	.word	0x20000000
    2db0:	000029c5 	.word	0x000029c5
    2db4:	e000e100 	.word	0xe000e100

00002db8 <_timer_start>:
    2db8:	68c2      	ldr	r2, [r0, #12]
    2dba:	6813      	ldr	r3, [r2, #0]
    2dbc:	f043 0302 	orr.w	r3, r3, #2
    2dc0:	6013      	str	r3, [r2, #0]
    2dc2:	6913      	ldr	r3, [r2, #16]
    2dc4:	f013 0f03 	tst.w	r3, #3
    2dc8:	d1fb      	bne.n	2dc2 <_timer_start+0xa>
    2dca:	4770      	bx	lr

00002dcc <_pwm_enable>:
    2dcc:	6902      	ldr	r2, [r0, #16]
    2dce:	6813      	ldr	r3, [r2, #0]
    2dd0:	f043 0302 	orr.w	r3, r3, #2
    2dd4:	6013      	str	r3, [r2, #0]
    2dd6:	6913      	ldr	r3, [r2, #16]
    2dd8:	f013 0f03 	tst.w	r3, #3
    2ddc:	d1fb      	bne.n	2dd6 <_pwm_enable+0xa>
    2dde:	4770      	bx	lr

00002de0 <_pwm_set_param>:
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	460e      	mov	r6, r1
    2de4:	4615      	mov	r5, r2
    2de6:	6904      	ldr	r4, [r0, #16]
    2de8:	4620      	mov	r0, r4
    2dea:	4b1b      	ldr	r3, [pc, #108]	; (2e58 <_pwm_set_param+0x78>)
    2dec:	4798      	blx	r3
    2dee:	0082      	lsls	r2, r0, #2
    2df0:	4402      	add	r2, r0
    2df2:	0091      	lsls	r1, r2, #2
    2df4:	4b19      	ldr	r3, [pc, #100]	; (2e5c <_pwm_set_param+0x7c>)
    2df6:	440b      	add	r3, r1
    2df8:	60de      	str	r6, [r3, #12]
    2dfa:	611d      	str	r5, [r3, #16]
    2dfc:	685b      	ldr	r3, [r3, #4]
    2dfe:	f003 030c 	and.w	r3, r3, #12
    2e02:	2b08      	cmp	r3, #8
    2e04:	d016      	beq.n	2e34 <_pwm_set_param+0x54>
    2e06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2e0a:	009a      	lsls	r2, r3, #2
    2e0c:	4b13      	ldr	r3, [pc, #76]	; (2e5c <_pwm_set_param+0x7c>)
    2e0e:	4413      	add	r3, r2
    2e10:	899b      	ldrh	r3, [r3, #12]
    2e12:	83a3      	strh	r3, [r4, #28]
    2e14:	6923      	ldr	r3, [r4, #16]
    2e16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e1a:	d1fb      	bne.n	2e14 <_pwm_set_param+0x34>
    2e1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e20:	0082      	lsls	r2, r0, #2
    2e22:	4b0e      	ldr	r3, [pc, #56]	; (2e5c <_pwm_set_param+0x7c>)
    2e24:	4413      	add	r3, r2
    2e26:	8a1b      	ldrh	r3, [r3, #16]
    2e28:	83e3      	strh	r3, [r4, #30]
    2e2a:	6923      	ldr	r3, [r4, #16]
    2e2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e30:	d1fb      	bne.n	2e2a <_pwm_set_param+0x4a>
    2e32:	bd70      	pop	{r4, r5, r6, pc}
    2e34:	61e6      	str	r6, [r4, #28]
    2e36:	6923      	ldr	r3, [r4, #16]
    2e38:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e3c:	d1fb      	bne.n	2e36 <_pwm_set_param+0x56>
    2e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e42:	0082      	lsls	r2, r0, #2
    2e44:	4b05      	ldr	r3, [pc, #20]	; (2e5c <_pwm_set_param+0x7c>)
    2e46:	4413      	add	r3, r2
    2e48:	691b      	ldr	r3, [r3, #16]
    2e4a:	6223      	str	r3, [r4, #32]
    2e4c:	6923      	ldr	r3, [r4, #16]
    2e4e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e52:	d1fb      	bne.n	2e4c <_pwm_set_param+0x6c>
    2e54:	bd70      	pop	{r4, r5, r6, pc}
    2e56:	bf00      	nop
    2e58:	000029ed 	.word	0x000029ed
    2e5c:	20000000 	.word	0x20000000

00002e60 <_timer_is_started>:
    2e60:	68c2      	ldr	r2, [r0, #12]
    2e62:	6913      	ldr	r3, [r2, #16]
    2e64:	f013 0f03 	tst.w	r3, #3
    2e68:	d1fb      	bne.n	2e62 <_timer_is_started+0x2>
    2e6a:	6810      	ldr	r0, [r2, #0]
    2e6c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e70:	4770      	bx	lr

00002e72 <_pwm_is_enabled>:
    2e72:	6902      	ldr	r2, [r0, #16]
    2e74:	6913      	ldr	r3, [r2, #16]
    2e76:	f013 0f03 	tst.w	r3, #3
    2e7a:	d1fb      	bne.n	2e74 <_pwm_is_enabled+0x2>
    2e7c:	6810      	ldr	r0, [r2, #0]
    2e7e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e82:	4770      	bx	lr

00002e84 <_tc_get_timer>:
    2e84:	2000      	movs	r0, #0
    2e86:	4770      	bx	lr

00002e88 <_tc_get_pwm>:
    2e88:	2000      	movs	r0, #0
    2e8a:	4770      	bx	lr

00002e8c <_timer_set_irq>:
    2e8c:	b510      	push	{r4, lr}
    2e8e:	68c0      	ldr	r0, [r0, #12]
    2e90:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <_timer_set_irq+0x28>)
    2e92:	4798      	blx	r3
    2e94:	4604      	mov	r4, r0
    2e96:	f240 129d 	movw	r2, #413	; 0x19d
    2e9a:	4907      	ldr	r1, [pc, #28]	; (2eb8 <_timer_set_irq+0x2c>)
    2e9c:	2001      	movs	r0, #1
    2e9e:	4b07      	ldr	r3, [pc, #28]	; (2ebc <_timer_set_irq+0x30>)
    2ea0:	4798      	blx	r3
    2ea2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ea6:	00a2      	lsls	r2, r4, #2
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <_timer_set_irq+0x34>)
    2eaa:	4413      	add	r3, r2
    2eac:	7898      	ldrb	r0, [r3, #2]
    2eae:	4b05      	ldr	r3, [pc, #20]	; (2ec4 <_timer_set_irq+0x38>)
    2eb0:	4798      	blx	r3
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	000029ed 	.word	0x000029ed
    2eb8:	0000488c 	.word	0x0000488c
    2ebc:	00001561 	.word	0x00001561
    2ec0:	20000000 	.word	0x20000000
    2ec4:	00001921 	.word	0x00001921

00002ec8 <TC0_Handler>:
    2ec8:	b508      	push	{r3, lr}
    2eca:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <TC0_Handler+0xc>)
    2ecc:	6818      	ldr	r0, [r3, #0]
    2ece:	4b02      	ldr	r3, [pc, #8]	; (2ed8 <TC0_Handler+0x10>)
    2ed0:	4798      	blx	r3
    2ed2:	bd08      	pop	{r3, pc}
    2ed4:	2000021c 	.word	0x2000021c
    2ed8:	00002995 	.word	0x00002995

00002edc <TC1_Handler>:
    2edc:	b508      	push	{r3, lr}
    2ede:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <TC1_Handler+0xc>)
    2ee0:	6858      	ldr	r0, [r3, #4]
    2ee2:	4b02      	ldr	r3, [pc, #8]	; (2eec <TC1_Handler+0x10>)
    2ee4:	4798      	blx	r3
    2ee6:	bd08      	pop	{r3, pc}
    2ee8:	2000021c 	.word	0x2000021c
    2eec:	0000297d 	.word	0x0000297d

00002ef0 <SDA_low>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <SDA_low+0x1c>)
    2ef2:	2201      	movs	r2, #1
    2ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ef8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2efc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f00:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2f04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop
    2f0c:	41008000 	.word	0x41008000

00002f10 <SDA_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f10:	4b06      	ldr	r3, [pc, #24]	; (2f2c <SDA_high+0x1c>)
    2f12:	2201      	movs	r2, #1
    2f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f18:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f1c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f20:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f24:	4a02      	ldr	r2, [pc, #8]	; (2f30 <SDA_high+0x20>)
    2f26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f2a:	4770      	bx	lr
    2f2c:	41008000 	.word	0x41008000
    2f30:	c0020000 	.word	0xc0020000

00002f34 <SDA_read>:
void SDA_high()
=======
/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    10ac:	b538      	push	{r3, r4, r5, lr}
    10ae:	460c      	mov	r4, r1
	ASSERT(mci && response);
    10b0:	4605      	mov	r5, r0
    10b2:	b160      	cbz	r0, 10ce <mci_sync_get_response_128+0x22>
    10b4:	b149      	cbz	r1, 10ca <mci_sync_get_response_128+0x1e>
    10b6:	2001      	movs	r0, #1
    10b8:	2284      	movs	r2, #132	; 0x84
    10ba:	4906      	ldr	r1, [pc, #24]	; (10d4 <mci_sync_get_response_128+0x28>)
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <mci_sync_get_response_128+0x2c>)
    10be:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    10c0:	4621      	mov	r1, r4
    10c2:	4628      	mov	r0, r5
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <mci_sync_get_response_128+0x30>)
    10c6:	4798      	blx	r3
    10c8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    10ca:	2000      	movs	r0, #0
    10cc:	e7f4      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10ce:	2000      	movs	r0, #0
    10d0:	e7f2      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10d2:	bf00      	nop
    10d4:	00005124 	.word	0x00005124
    10d8:	00001671 	.word	0x00001671
    10dc:	00002559 	.word	0x00002559

000010e0 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    10e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e2:	b083      	sub	sp, #12
    10e4:	460d      	mov	r5, r1
    10e6:	4616      	mov	r6, r2
    10e8:	461f      	mov	r7, r3
	ASSERT(mci);
    10ea:	4604      	mov	r4, r0
    10ec:	2290      	movs	r2, #144	; 0x90
    10ee:	490a      	ldr	r1, [pc, #40]	; (1118 <mci_sync_adtc_start+0x38>)
    10f0:	3000      	adds	r0, #0
    10f2:	bf18      	it	ne
    10f4:	2001      	movne	r0, #1
    10f6:	4b09      	ldr	r3, [pc, #36]	; (111c <mci_sync_adtc_start+0x3c>)
    10f8:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    10fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    10fe:	9301      	str	r3, [sp, #4]
    1100:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1104:	9300      	str	r3, [sp, #0]
    1106:	463b      	mov	r3, r7
    1108:	4632      	mov	r2, r6
    110a:	4629      	mov	r1, r5
    110c:	4620      	mov	r0, r4
    110e:	4c04      	ldr	r4, [pc, #16]	; (1120 <mci_sync_adtc_start+0x40>)
    1110:	47a0      	blx	r4
}
    1112:	b003      	add	sp, #12
    1114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1116:	bf00      	nop
    1118:	00005124 	.word	0x00005124
    111c:	00001671 	.word	0x00001671
    1120:	000025b1 	.word	0x000025b1

00001124 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	460c      	mov	r4, r1
    1128:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    112a:	4605      	mov	r5, r0
    112c:	b168      	cbz	r0, 114a <mci_sync_start_read_blocks+0x26>
    112e:	b151      	cbz	r1, 1146 <mci_sync_start_read_blocks+0x22>
    1130:	2001      	movs	r0, #1
    1132:	22b5      	movs	r2, #181	; 0xb5
    1134:	4906      	ldr	r1, [pc, #24]	; (1150 <mci_sync_start_read_blocks+0x2c>)
    1136:	4b07      	ldr	r3, [pc, #28]	; (1154 <mci_sync_start_read_blocks+0x30>)
    1138:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    113a:	4632      	mov	r2, r6
    113c:	4621      	mov	r1, r4
    113e:	4628      	mov	r0, r5
    1140:	4b05      	ldr	r3, [pc, #20]	; (1158 <mci_sync_start_read_blocks+0x34>)
    1142:	4798      	blx	r3
}
    1144:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    1146:	2000      	movs	r0, #0
    1148:	e7f3      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114a:	2000      	movs	r0, #0
    114c:	e7f1      	b.n	1132 <mci_sync_start_read_blocks+0xe>
    114e:	bf00      	nop
    1150:	00005124 	.word	0x00005124
    1154:	00001671 	.word	0x00001671
    1158:	0000281d 	.word	0x0000281d

0000115c <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
{
	gpio_set_pin_direction(I2C_BB_SDA, GPIO_DIRECTION_IN);
}
<<<<<<< HEAD
uint8_t SDA_read()
{
    2f34:	b510      	push	{r4, lr}
    2f36:	b082      	sub	sp, #8
=======
    117c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    117e:	2000      	movs	r0, #0
    1180:	e7f3      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1182:	2000      	movs	r0, #0
    1184:	e7f1      	b.n	116a <mci_sync_start_write_blocks+0xe>
    1186:	bf00      	nop
    1188:	00005124 	.word	0x00005124
    118c:	00001671 	.word	0x00001671
    1190:	0000289d 	.word	0x0000289d

00001194 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    1194:	b510      	push	{r4, lr}
	ASSERT(mci);
    1196:	4604      	mov	r4, r0
    1198:	22c7      	movs	r2, #199	; 0xc7
    119a:	4905      	ldr	r1, [pc, #20]	; (11b0 <mci_sync_wait_end_of_read_blocks+0x1c>)
    119c:	3000      	adds	r0, #0
    119e:	bf18      	it	ne
    11a0:	2001      	movne	r0, #1
    11a2:	4b04      	ldr	r3, [pc, #16]	; (11b4 <mci_sync_wait_end_of_read_blocks+0x20>)
    11a4:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    11a6:	4620      	mov	r0, r4
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <mci_sync_wait_end_of_read_blocks+0x24>)
    11aa:	4798      	blx	r3
}
    11ac:	bd10      	pop	{r4, pc}
    11ae:	bf00      	nop
    11b0:	00005124 	.word	0x00005124
    11b4:	00001671 	.word	0x00001671
    11b8:	0000291d 	.word	0x0000291d

000011bc <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
<<<<<<< HEAD
	uint32_t tmp;
=======
    11bc:	b510      	push	{r4, lr}
	ASSERT(mci);
    11be:	4604      	mov	r4, r0
    11c0:	22d0      	movs	r2, #208	; 0xd0
    11c2:	4905      	ldr	r1, [pc, #20]	; (11d8 <mci_sync_wait_end_of_write_blocks+0x1c>)
    11c4:	3000      	adds	r0, #0
    11c6:	bf18      	it	ne
    11c8:	2001      	movne	r0, #1
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <mci_sync_wait_end_of_write_blocks+0x20>)
    11cc:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    11ce:	4620      	mov	r0, r4
    11d0:	4b03      	ldr	r3, [pc, #12]	; (11e0 <mci_sync_wait_end_of_write_blocks+0x24>)
    11d2:	4798      	blx	r3
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	bf00      	nop
    11d8:	00005124 	.word	0x00005124
    11dc:	00001671 	.word	0x00001671
    11e0:	00002945 	.word	0x00002945

000011e4 <pwm_period_expired>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

	CRITICAL_SECTION_ENTER();
    2f38:	a801      	add	r0, sp, #4
    2f3a:	4b09      	ldr	r3, [pc, #36]	; (2f60 <SDA_read+0x2c>)
    2f3c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2f3e:	4b09      	ldr	r3, [pc, #36]	; (2f64 <SDA_read+0x30>)
    2f40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2f44:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2f48:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2f4c:	4060      	eors	r0, r4
    2f4e:	4010      	ands	r0, r2
    2f50:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    2f52:	a801      	add	r0, sp, #4
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <SDA_read+0x34>)
    2f56:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2f58:	f004 0001 	and.w	r0, r4, #1
	return gpio_get_pin_level(I2C_BB_SDA);
}
    2f5c:	b002      	add	sp, #8
    2f5e:	bd10      	pop	{r4, pc}
    2f60:	00000d41 	.word	0x00000d41
    2f64:	41008000 	.word	0x41008000
    2f68:	00000d4f 	.word	0x00000d4f

00002f6c <SCL_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f6c:	4b06      	ldr	r3, [pc, #24]	; (2f88 <SCL_low+0x1c>)
    2f6e:	2204      	movs	r2, #4
    2f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f7c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2f80:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2f84:	4770      	bx	lr
    2f86:	bf00      	nop
    2f88:	41008000 	.word	0x41008000

00002f8c <SCL_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <SCL_high+0x1c>)
    2f8e:	2204      	movs	r2, #4
    2f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f98:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    2f9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2fa0:	4a02      	ldr	r2, [pc, #8]	; (2fac <SCL_high+0x20>)
    2fa2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    2fa6:	4770      	bx	lr
    2fa8:	41008000 	.word	0x41008000
    2fac:	c0020000 	.word	0xc0020000

00002fb0 <I2C_BB_sleep>:
{
	gpio_set_pin_direction(I2C_BB_SCL, GPIO_DIRECTION_IN);
}

void I2C_BB_sleep(void)
{
    2fb0:	b508      	push	{r3, lr}
	delay_us(SLEEP_LENGTH);
    2fb2:	2064      	movs	r0, #100	; 0x64
    2fb4:	4b01      	ldr	r3, [pc, #4]	; (2fbc <I2C_BB_sleep+0xc>)
    2fb6:	4798      	blx	r3
    2fb8:	bd08      	pop	{r3, pc}
    2fba:	bf00      	nop
    2fbc:	00000db5 	.word	0x00000db5

00002fc0 <I2C_BB_end>:
}


void I2C_BB_end()
{
    2fc0:	b510      	push	{r4, lr}
	SDA_low();
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <I2C_BB_end+0x18>)
    2fc4:	4798      	blx	r3
	I2C_BB_sleep();
    2fc6:	4c05      	ldr	r4, [pc, #20]	; (2fdc <I2C_BB_end+0x1c>)
    2fc8:	47a0      	blx	r4
	SCL_high();
    2fca:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <I2C_BB_end+0x20>)
    2fcc:	4798      	blx	r3
	I2C_BB_sleep();
    2fce:	47a0      	blx	r4
	SDA_high();
    2fd0:	4b04      	ldr	r3, [pc, #16]	; (2fe4 <I2C_BB_end+0x24>)
    2fd2:	4798      	blx	r3
	I2C_BB_sleep();
    2fd4:	47a0      	blx	r4
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	00002ef1 	.word	0x00002ef1
    2fdc:	00002fb1 	.word	0x00002fb1
    2fe0:	00002f8d 	.word	0x00002f8d
    2fe4:	00002f11 	.word	0x00002f11

00002fe8 <I2C_BB_byte_out>:
		
	return I2C_BB_byte_out(addr);	//should receive a bool?
}

bool I2C_BB_byte_out(uint8_t byte)
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	4605      	mov	r5, r0
	uint8_t i, ack;

	// send byte	
	for (i = 0; i < 8; i++) {
    2fec:	2400      	movs	r4, #0
    2fee:	e00c      	b.n	300a <I2C_BB_byte_out+0x22>
		if (byte & 0x80)
			SDA_high();
    2ff0:	4b13      	ldr	r3, [pc, #76]	; (3040 <I2C_BB_byte_out+0x58>)
    2ff2:	4798      	blx	r3
		else
			SDA_low();
		SCL_high();
    2ff4:	4b13      	ldr	r3, [pc, #76]	; (3044 <I2C_BB_byte_out+0x5c>)
    2ff6:	4798      	blx	r3
		I2C_BB_sleep();
    2ff8:	4e13      	ldr	r6, [pc, #76]	; (3048 <I2C_BB_byte_out+0x60>)
    2ffa:	47b0      	blx	r6
		SCL_low();
    2ffc:	4b13      	ldr	r3, [pc, #76]	; (304c <I2C_BB_byte_out+0x64>)
    2ffe:	4798      	blx	r3
		byte <<= 1;
    3000:	006d      	lsls	r5, r5, #1
    3002:	b2ed      	uxtb	r5, r5
		I2C_BB_sleep();
    3004:	47b0      	blx	r6
	for (i = 0; i < 8; i++) {
    3006:	3401      	adds	r4, #1
    3008:	b2e4      	uxtb	r4, r4
    300a:	2c07      	cmp	r4, #7
    300c:	d805      	bhi.n	301a <I2C_BB_byte_out+0x32>
		if (byte & 0x80)
    300e:	f015 0f80 	tst.w	r5, #128	; 0x80
    3012:	d1ed      	bne.n	2ff0 <I2C_BB_byte_out+0x8>
			SDA_low();
    3014:	4b0e      	ldr	r3, [pc, #56]	; (3050 <I2C_BB_byte_out+0x68>)
    3016:	4798      	blx	r3
    3018:	e7ec      	b.n	2ff4 <I2C_BB_byte_out+0xc>
	}
	// read ack bit
	SDA_high();
    301a:	4b09      	ldr	r3, [pc, #36]	; (3040 <I2C_BB_byte_out+0x58>)
    301c:	4798      	blx	r3
	SCL_high();
    301e:	4b09      	ldr	r3, [pc, #36]	; (3044 <I2C_BB_byte_out+0x5c>)
    3020:	4798      	blx	r3
	I2C_BB_sleep();
    3022:	4c09      	ldr	r4, [pc, #36]	; (3048 <I2C_BB_byte_out+0x60>)
    3024:	47a0      	blx	r4
	ack = SDA_read();
    3026:	4b0b      	ldr	r3, [pc, #44]	; (3054 <I2C_BB_byte_out+0x6c>)
    3028:	4798      	blx	r3
    302a:	4605      	mov	r5, r0
	SCL_low();
    302c:	4b07      	ldr	r3, [pc, #28]	; (304c <I2C_BB_byte_out+0x64>)
    302e:	4798      	blx	r3
	I2C_BB_sleep();
    3030:	47a0      	blx	r4
	SDA_low();
    3032:	4b07      	ldr	r3, [pc, #28]	; (3050 <I2C_BB_byte_out+0x68>)
    3034:	4798      	blx	r3
	return (ack == 0) ? 1:0;   //
}
    3036:	fab5 f085 	clz	r0, r5
    303a:	0940      	lsrs	r0, r0, #5
    303c:	bd70      	pop	{r4, r5, r6, pc}
    303e:	bf00      	nop
    3040:	00002f11 	.word	0x00002f11
    3044:	00002f8d 	.word	0x00002f8d
    3048:	00002fb1 	.word	0x00002fb1
    304c:	00002f6d 	.word	0x00002f6d
    3050:	00002ef1 	.word	0x00002ef1
    3054:	00002f35 	.word	0x00002f35

00003058 <I2C_BB_begin>:
{
    3058:	b538      	push	{r3, r4, r5, lr}
    305a:	4604      	mov	r4, r0
    305c:	460d      	mov	r5, r1
	SDA_low();
    305e:	4b07      	ldr	r3, [pc, #28]	; (307c <I2C_BB_begin+0x24>)
    3060:	4798      	blx	r3
	I2C_BB_sleep();
    3062:	4b07      	ldr	r3, [pc, #28]	; (3080 <I2C_BB_begin+0x28>)
    3064:	4798      	blx	r3
	SCL_low();
    3066:	4b07      	ldr	r3, [pc, #28]	; (3084 <I2C_BB_begin+0x2c>)
    3068:	4798      	blx	r3
	addr=addr<<1;		//7 bit address shifted one bit to make room for the RW bit
    306a:	0060      	lsls	r0, r4, #1
    306c:	b2c0      	uxtb	r0, r0
	if (read)
    306e:	b10d      	cbz	r5, 3074 <I2C_BB_begin+0x1c>
		addr++;		
    3070:	3001      	adds	r0, #1
    3072:	b2c0      	uxtb	r0, r0
	return I2C_BB_byte_out(addr);	//should receive a bool?
    3074:	4b04      	ldr	r3, [pc, #16]	; (3088 <I2C_BB_begin+0x30>)
    3076:	4798      	blx	r3
}
    3078:	bd38      	pop	{r3, r4, r5, pc}
    307a:	bf00      	nop
    307c:	00002ef1 	.word	0x00002ef1
    3080:	00002fb1 	.word	0x00002fb1
    3084:	00002f6d 	.word	0x00002f6d
    3088:	00002fe9 	.word	0x00002fe9

0000308c <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    308c:	4b14      	ldr	r3, [pc, #80]	; (30e0 <I2C_BB_init+0x54>)
    308e:	2201      	movs	r2, #1
    3090:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    309c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    30a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    30a4:	490f      	ldr	r1, [pc, #60]	; (30e4 <I2C_BB_init+0x58>)
    30a6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30aa:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    30ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30b6:	2204      	movs	r2, #4
    30b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    30bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    30c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    30c4:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    30c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    30cc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    30d0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    30d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    30d8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	41008000 	.word	0x41008000
    30e4:	c0020000 	.word	0xc0020000

<<<<<<< HEAD
000030e8 <I2C_BB_write>:
	return 0;
}

//uint8_t I2C_BB_write(uint8_t addr, uint8_t *buf, uint8_t length)
uint8_t I2C_BB_write(uint8_t addr, uint8_t value)
=======
000011f8 <pwm_init>:
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11fc:	4604      	mov	r4, r0
    11fe:	b188      	cbz	r0, 1224 <pwm_init+0x2c>
    1200:	b171      	cbz	r1, 1220 <pwm_init+0x28>
    1202:	2001      	movs	r0, #1
    1204:	2233      	movs	r2, #51	; 0x33
    1206:	4908      	ldr	r1, [pc, #32]	; (1228 <pwm_init+0x30>)
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <pwm_init+0x34>)
    120a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    120c:	4629      	mov	r1, r5
    120e:	4620      	mov	r0, r4
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <pwm_init+0x38>)
    1212:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1214:	4b07      	ldr	r3, [pc, #28]	; (1234 <pwm_init+0x3c>)
    1216:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1218:	4b07      	ldr	r3, [pc, #28]	; (1238 <pwm_init+0x40>)
    121a:	6063      	str	r3, [r4, #4]
}
    121c:	2000      	movs	r0, #0
    121e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1220:	2000      	movs	r0, #0
    1222:	e7ef      	b.n	1204 <pwm_init+0xc>
    1224:	2000      	movs	r0, #0
    1226:	e7ed      	b.n	1204 <pwm_init+0xc>
    1228:	00005140 	.word	0x00005140
    122c:	00001671 	.word	0x00001671
    1230:	00002f99 	.word	0x00002f99
    1234:	000011e5 	.word	0x000011e5
    1238:	000011ef 	.word	0x000011ef

0000123c <pwm_enable>:
{
    123c:	b510      	push	{r4, lr}
	ASSERT(descr);
    123e:	4604      	mov	r4, r0
    1240:	224a      	movs	r2, #74	; 0x4a
    1242:	4909      	ldr	r1, [pc, #36]	; (1268 <pwm_enable+0x2c>)
    1244:	3000      	adds	r0, #0
    1246:	bf18      	it	ne
    1248:	2001      	movne	r0, #1
    124a:	4b08      	ldr	r3, [pc, #32]	; (126c <pwm_enable+0x30>)
    124c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    124e:	4620      	mov	r0, r4
    1250:	4b07      	ldr	r3, [pc, #28]	; (1270 <pwm_enable+0x34>)
    1252:	4798      	blx	r3
    1254:	b920      	cbnz	r0, 1260 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    1256:	4620      	mov	r0, r4
    1258:	4b06      	ldr	r3, [pc, #24]	; (1274 <pwm_enable+0x38>)
    125a:	4798      	blx	r3
	return ERR_NONE;
    125c:	2000      	movs	r0, #0
    125e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1260:	f06f 0010 	mvn.w	r0, #16
}
    1264:	bd10      	pop	{r4, pc}
    1266:	bf00      	nop
    1268:	00005140 	.word	0x00005140
    126c:	00001671 	.word	0x00001671
    1270:	000031d3 	.word	0x000031d3
    1274:	0000312d 	.word	0x0000312d

00001278 <pwm_set_parameters>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
{
    30e8:	b510      	push	{r4, lr}
    30ea:	460c      	mov	r4, r1
	uint8_t rc = 0;
	//uint8_t originalLength = length;
	//uint8_t byte;
	
	rc = I2C_BB_begin(addr, 0);    //read ack
    30ec:	2100      	movs	r1, #0
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <I2C_BB_write+0x1c>)
    30f0:	4798      	blx	r3
	if (rc == 1) { // ack was received
    30f2:	b918      	cbnz	r0, 30fc <I2C_BB_write+0x14>
			//rc = I2C_BB_byte_out(byte);
			//if (rc == 1)
				//length--;
		//}
	//}
	I2C_BB_end();
    30f4:	4b04      	ldr	r3, [pc, #16]	; (3108 <I2C_BB_write+0x20>)
    30f6:	4798      	blx	r3
	return 0;
	//return (rc == 1) ? (originalLength - length) : 0; // returns number of bytes written
}
    30f8:	2000      	movs	r0, #0
    30fa:	bd10      	pop	{r4, pc}
		I2C_BB_byte_out(value);
    30fc:	4620      	mov	r0, r4
    30fe:	4b03      	ldr	r3, [pc, #12]	; (310c <I2C_BB_write+0x24>)
    3100:	4798      	blx	r3
    3102:	e7f7      	b.n	30f4 <I2C_BB_write+0xc>
    3104:	00003059 	.word	0x00003059
    3108:	00002fc1 	.word	0x00002fc1
    310c:	00002fe9 	.word	0x00002fe9

00003110 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}
<<<<<<< HEAD

static void millisecondTimer_cb(const struct timer_task *const timer_task)
=======
    1298:	2000      	movs	r0, #0
    129a:	bd70      	pop	{r4, r5, r6, pc}
    129c:	00005140 	.word	0x00005140
    12a0:	00001671 	.word	0x00001671
    12a4:	00003141 	.word	0x00003141

000012a8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    12a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
{
	timeMS++;
    3110:	4a02      	ldr	r2, [pc, #8]	; (311c <millisecondTimer_cb+0xc>)
    3112:	6813      	ldr	r3, [r2, #0]
    3114:	3301      	adds	r3, #1
    3116:	6013      	str	r3, [r2, #0]
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	20000224 	.word	0x20000224

00003120 <battCharging_cb>:
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
	}
}

static void battCharging_cb(void)
{
    3120:	b510      	push	{r4, lr}
    3122:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    3124:	a801      	add	r0, sp, #4
    3126:	4b0f      	ldr	r3, [pc, #60]	; (3164 <battCharging_cb+0x44>)
    3128:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    312a:	4b0f      	ldr	r3, [pc, #60]	; (3168 <battCharging_cb+0x48>)
    312c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3130:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3134:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3138:	4054      	eors	r4, r2
    313a:	400c      	ands	r4, r1
    313c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    313e:	a801      	add	r0, sp, #4
    3140:	4b0a      	ldr	r3, [pc, #40]	; (316c <battCharging_cb+0x4c>)
    3142:	4798      	blx	r3
	bool pinState = gpio_get_pin_level(nCHRG);
	if (pinState == true) {
    3144:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    3148:	d106      	bne.n	3158 <battCharging_cb+0x38>
		// Not charging
		deviceState &= !(DEVICE_STATE_CHARGING);
	}
	else {
		// charging
		deviceState |= DEVICE_STATE_CHARGING;
    314a:	4a09      	ldr	r2, [pc, #36]	; (3170 <battCharging_cb+0x50>)
    314c:	6813      	ldr	r3, [r2, #0]
    314e:	f043 0320 	orr.w	r3, r3, #32
    3152:	6013      	str	r3, [r2, #0]
	}
}
<<<<<<< HEAD
    3154:	b002      	add	sp, #8
    3156:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    3158:	4b05      	ldr	r3, [pc, #20]	; (3170 <battCharging_cb+0x50>)
    315a:	681a      	ldr	r2, [r3, #0]
    315c:	2200      	movs	r2, #0
    315e:	601a      	str	r2, [r3, #0]
    3160:	e7f8      	b.n	3154 <battCharging_cb+0x34>
    3162:	bf00      	nop
    3164:	00000d41 	.word	0x00000d41
    3168:	41008000 	.word	0x41008000
    316c:	00000d4f 	.word	0x00000d4f
    3170:	20000028 	.word	0x20000028

00003174 <checkBattVoltage_cb>:
{
    3174:	b510      	push	{r4, lr}
    3176:	b082      	sub	sp, #8
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3178:	2301      	movs	r3, #1
    317a:	f10d 0207 	add.w	r2, sp, #7
    317e:	2100      	movs	r1, #0
    3180:	4807      	ldr	r0, [pc, #28]	; (31a0 <checkBattVoltage_cb+0x2c>)
    3182:	4c08      	ldr	r4, [pc, #32]	; (31a4 <checkBattVoltage_cb+0x30>)
    3184:	47a0      	blx	r4
	battVolt = adcValue;
    3186:	f89d 3007 	ldrb.w	r3, [sp, #7]
    318a:	4a07      	ldr	r2, [pc, #28]	; (31a8 <checkBattVoltage_cb+0x34>)
    318c:	7013      	strb	r3, [r2, #0]
	if (adcValue < 158) {
    318e:	2b9d      	cmp	r3, #157	; 0x9d
    3190:	d804      	bhi.n	319c <checkBattVoltage_cb+0x28>
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    3192:	4a06      	ldr	r2, [pc, #24]	; (31ac <checkBattVoltage_cb+0x38>)
    3194:	6813      	ldr	r3, [r2, #0]
    3196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    319a:	6013      	str	r3, [r2, #0]
}
    319c:	b002      	add	sp, #8
    319e:	bd10      	pop	{r4, pc}
    31a0:	200006c8 	.word	0x200006c8
    31a4:	00000ca1 	.word	0x00000ca1
    31a8:	20000b7a 	.word	0x20000b7a
    31ac:	20000028 	.word	0x20000028

000031b0 <irReceive_cb>:

static void irReceive_cb(void)
=======
    1384:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1386:	2000      	movs	r0, #0
    1388:	e7f0      	b.n	136c <timer_init+0xc>
    138a:	2000      	movs	r0, #0
    138c:	e7ee      	b.n	136c <timer_init+0xc>
    138e:	bf00      	nop
    1390:	00005158 	.word	0x00005158
    1394:	00001671 	.word	0x00001671
    1398:	00002dc5 	.word	0x00002dc5
    139c:	000012f9 	.word	0x000012f9

000013a0 <timer_start>:
{
    13a0:	b510      	push	{r4, lr}
	ASSERT(descr);
    13a2:	4604      	mov	r4, r0
    13a4:	2253      	movs	r2, #83	; 0x53
    13a6:	4909      	ldr	r1, [pc, #36]	; (13cc <timer_start+0x2c>)
    13a8:	3000      	adds	r0, #0
    13aa:	bf18      	it	ne
    13ac:	2001      	movne	r0, #1
    13ae:	4b08      	ldr	r3, [pc, #32]	; (13d0 <timer_start+0x30>)
    13b0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    13b2:	4620      	mov	r0, r4
    13b4:	4b07      	ldr	r3, [pc, #28]	; (13d4 <timer_start+0x34>)
    13b6:	4798      	blx	r3
    13b8:	b920      	cbnz	r0, 13c4 <timer_start+0x24>
	_timer_start(&descr->device);
    13ba:	4620      	mov	r0, r4
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <timer_start+0x38>)
    13be:	4798      	blx	r3
	return ERR_NONE;
    13c0:	2000      	movs	r0, #0
    13c2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    13c4:	f06f 0010 	mvn.w	r0, #16
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	bf00      	nop
    13cc:	00005158 	.word	0x00005158
    13d0:	00001671 	.word	0x00001671
    13d4:	000031c1 	.word	0x000031c1
    13d8:	00003119 	.word	0x00003119

000013dc <timer_add_task>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
{
    31b0:	b500      	push	{lr}
    31b2:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    31b4:	a801      	add	r0, sp, #4
    31b6:	4b07      	ldr	r3, [pc, #28]	; (31d4 <irReceive_cb+0x24>)
    31b8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <irReceive_cb+0x28>)
    31bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    31c8:	a801      	add	r0, sp, #4
    31ca:	4b04      	ldr	r3, [pc, #16]	; (31dc <irReceive_cb+0x2c>)
    31cc:	4798      	blx	r3
		
	}
	else {
		
	}	
}
<<<<<<< HEAD
    31ce:	b003      	add	sp, #12
    31d0:	f85d fb04 	ldr.w	pc, [sp], #4
    31d4:	00000d41 	.word	0x00000d41
    31d8:	41008000 	.word	0x41008000
    31dc:	00000d4f 	.word	0x00000d4f

000031e0 <pushButton_cb>:

static void pushButton_cb(void)
{
    31e0:	b500      	push	{lr}
    31e2:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    31e4:	a801      	add	r0, sp, #4
    31e6:	4b06      	ldr	r3, [pc, #24]	; (3200 <pushButton_cb+0x20>)
    31e8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31ea:	4b06      	ldr	r3, [pc, #24]	; (3204 <pushButton_cb+0x24>)
    31ec:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    31ee:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31f0:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    31f2:	a801      	add	r0, sp, #4
    31f4:	4b04      	ldr	r3, [pc, #16]	; (3208 <pushButton_cb+0x28>)
    31f6:	4798      	blx	r3
=======
    1428:	b002      	add	sp, #8
    142a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    142c:	2000      	movs	r0, #0
    142e:	e7dc      	b.n	13ea <timer_add_task+0xe>
    1430:	2000      	movs	r0, #0
    1432:	e7da      	b.n	13ea <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1434:	7e23      	ldrb	r3, [r4, #24]
    1436:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    143a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    143c:	227f      	movs	r2, #127	; 0x7f
    143e:	490b      	ldr	r1, [pc, #44]	; (146c <timer_add_task+0x90>)
    1440:	2000      	movs	r0, #0
    1442:	4b0b      	ldr	r3, [pc, #44]	; (1470 <timer_add_task+0x94>)
    1444:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1446:	f06f 0011 	mvn.w	r0, #17
    144a:	e7ed      	b.n	1428 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    144c:	a801      	add	r0, sp, #4
    144e:	4b0b      	ldr	r3, [pc, #44]	; (147c <timer_add_task+0xa0>)
    1450:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1452:	7e23      	ldrb	r3, [r4, #24]
    1454:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1458:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    145a:	4620      	mov	r0, r4
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <timer_add_task+0xa4>)
    145e:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1460:	a801      	add	r0, sp, #4
    1462:	4b08      	ldr	r3, [pc, #32]	; (1484 <timer_add_task+0xa8>)
    1464:	4798      	blx	r3
	return ERR_NONE;
    1466:	2000      	movs	r0, #0
    1468:	e7de      	b.n	1428 <timer_add_task+0x4c>
    146a:	bf00      	nop
    146c:	00005158 	.word	0x00005158
    1470:	00001671 	.word	0x00001671
    1474:	00001677 	.word	0x00001677
    1478:	000012a9 	.word	0x000012a9
    147c:	00000d41 	.word	0x00000d41
    1480:	000031ed 	.word	0x000031ed
    1484:	00000d4f 	.word	0x00000d4f

00001488 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1488:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    148a:	2300      	movs	r3, #0
    148c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    148e:	69c3      	ldr	r3, [r0, #28]
    1490:	b11b      	cbz	r3, 149a <usart_transmission_complete+0x12>
    1492:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1496:	4610      	mov	r0, r2
    1498:	4798      	blx	r3
    149a:	bd08      	pop	{r3, pc}

0000149c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    149c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    149e:	2300      	movs	r3, #0
    14a0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    14a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    14a4:	b11b      	cbz	r3, 14ae <usart_error+0x12>
    14a6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    14aa:	4610      	mov	r0, r2
    14ac:	4798      	blx	r3
    14ae:	bd08      	pop	{r3, pc}

000014b0 <usart_fill_rx_buffer>:
{
    14b0:	b538      	push	{r3, r4, r5, lr}
    14b2:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14b4:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    14b8:	302c      	adds	r0, #44	; 0x2c
    14ba:	4b03      	ldr	r3, [pc, #12]	; (14c8 <usart_fill_rx_buffer+0x18>)
    14bc:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    14be:	6a23      	ldr	r3, [r4, #32]
    14c0:	b10b      	cbz	r3, 14c6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    14c2:	4628      	mov	r0, r5
    14c4:	4798      	blx	r3
    14c6:	bd38      	pop	{r3, r4, r5, pc}
    14c8:	0000175d 	.word	0x0000175d

000014cc <usart_async_write>:
{
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	460e      	mov	r6, r1
    14d0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    14d2:	4604      	mov	r4, r0
    14d4:	b1d8      	cbz	r0, 150e <usart_async_write+0x42>
    14d6:	b1e1      	cbz	r1, 1512 <usart_async_write+0x46>
    14d8:	b9ea      	cbnz	r2, 1516 <usart_async_write+0x4a>
    14da:	2000      	movs	r0, #0
    14dc:	f240 123b 	movw	r2, #315	; 0x13b
    14e0:	490f      	ldr	r1, [pc, #60]	; (1520 <usart_async_write+0x54>)
    14e2:	4b10      	ldr	r3, [pc, #64]	; (1524 <usart_async_write+0x58>)
    14e4:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    14e6:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    14ea:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    14ee:	429a      	cmp	r2, r3
    14f0:	d113      	bne.n	151a <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    14f2:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    14f4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    14fe:	2301      	movs	r3, #1
    1500:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1502:	f104 0008 	add.w	r0, r4, #8
    1506:	4b08      	ldr	r3, [pc, #32]	; (1528 <usart_async_write+0x5c>)
    1508:	4798      	blx	r3
	return (int32_t)length;
    150a:	4628      	mov	r0, r5
    150c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    150e:	2000      	movs	r0, #0
    1510:	e7e4      	b.n	14dc <usart_async_write+0x10>
    1512:	2000      	movs	r0, #0
    1514:	e7e2      	b.n	14dc <usart_async_write+0x10>
    1516:	2001      	movs	r0, #1
    1518:	e7e0      	b.n	14dc <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    151a:	f06f 001b 	mvn.w	r0, #27
}
    151e:	bd70      	pop	{r4, r5, r6, pc}
    1520:	00005170 	.word	0x00005170
    1524:	00001671 	.word	0x00001671
    1528:	00002c1b 	.word	0x00002c1b

0000152c <usart_process_byte_sent>:
{
    152c:	b510      	push	{r4, lr}
    152e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1530:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1532:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1536:	4293      	cmp	r3, r2
    1538:	d009      	beq.n	154e <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    153a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    153c:	1c59      	adds	r1, r3, #1
    153e:	8781      	strh	r1, [r0, #60]	; 0x3c
    1540:	5cd1      	ldrb	r1, [r2, r3]
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <usart_process_byte_sent+0x28>)
    1544:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1546:	4620      	mov	r0, r4
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <usart_process_byte_sent+0x2c>)
    154a:	4798      	blx	r3
    154c:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    154e:	4b03      	ldr	r3, [pc, #12]	; (155c <usart_process_byte_sent+0x30>)
    1550:	4798      	blx	r3
    1552:	bd10      	pop	{r4, pc}
    1554:	00002c15 	.word	0x00002c15
    1558:	00002c1b 	.word	0x00002c1b
    155c:	00002c23 	.word	0x00002c23

00001560 <usart_async_read>:
{
    1560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1564:	b082      	sub	sp, #8
    1566:	4688      	mov	r8, r1
    1568:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    156a:	4605      	mov	r5, r0
    156c:	b1a0      	cbz	r0, 1598 <usart_async_read+0x38>
    156e:	b1a9      	cbz	r1, 159c <usart_async_read+0x3c>
    1570:	b9b2      	cbnz	r2, 15a0 <usart_async_read+0x40>
    1572:	2000      	movs	r0, #0
    1574:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1578:	4912      	ldr	r1, [pc, #72]	; (15c4 <usart_async_read+0x64>)
    157a:	4b13      	ldr	r3, [pc, #76]	; (15c8 <usart_async_read+0x68>)
    157c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    157e:	a801      	add	r0, sp, #4
    1580:	4b12      	ldr	r3, [pc, #72]	; (15cc <usart_async_read+0x6c>)
    1582:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1584:	3534      	adds	r5, #52	; 0x34
    1586:	4628      	mov	r0, r5
    1588:	4b11      	ldr	r3, [pc, #68]	; (15d0 <usart_async_read+0x70>)
    158a:	4798      	blx	r3
    158c:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    158e:	a801      	add	r0, sp, #4
    1590:	4b10      	ldr	r3, [pc, #64]	; (15d4 <usart_async_read+0x74>)
    1592:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1594:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1596:	e00b      	b.n	15b0 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    1598:	2000      	movs	r0, #0
    159a:	e7eb      	b.n	1574 <usart_async_read+0x14>
    159c:	2000      	movs	r0, #0
    159e:	e7e9      	b.n	1574 <usart_async_read+0x14>
    15a0:	2001      	movs	r0, #1
    15a2:	e7e7      	b.n	1574 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    15a4:	3401      	adds	r4, #1
    15a6:	b2a4      	uxth	r4, r4
    15a8:	4441      	add	r1, r8
    15aa:	4628      	mov	r0, r5
    15ac:	4b0a      	ldr	r3, [pc, #40]	; (15d8 <usart_async_read+0x78>)
    15ae:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    15b0:	4621      	mov	r1, r4
    15b2:	42a7      	cmp	r7, r4
    15b4:	d901      	bls.n	15ba <usart_async_read+0x5a>
    15b6:	42b4      	cmp	r4, r6
    15b8:	d3f4      	bcc.n	15a4 <usart_async_read+0x44>
}
    15ba:	4620      	mov	r0, r4
    15bc:	b002      	add	sp, #8
    15be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15c2:	bf00      	nop
    15c4:	00005170 	.word	0x00005170
    15c8:	00001671 	.word	0x00001671
    15cc:	00000d41 	.word	0x00000d41
    15d0:	0000179d 	.word	0x0000179d
    15d4:	00000d4f 	.word	0x00000d4f
    15d8:	00001715 	.word	0x00001715

000015dc <usart_async_init>:
{
    15dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15de:	460d      	mov	r5, r1
    15e0:	4616      	mov	r6, r2
    15e2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    15e4:	4604      	mov	r4, r0
    15e6:	b318      	cbz	r0, 1630 <usart_async_init+0x54>
    15e8:	b321      	cbz	r1, 1634 <usart_async_init+0x58>
    15ea:	b32a      	cbz	r2, 1638 <usart_async_init+0x5c>
    15ec:	bb33      	cbnz	r3, 163c <usart_async_init+0x60>
    15ee:	2000      	movs	r0, #0
    15f0:	223a      	movs	r2, #58	; 0x3a
    15f2:	4915      	ldr	r1, [pc, #84]	; (1648 <usart_async_init+0x6c>)
    15f4:	4b15      	ldr	r3, [pc, #84]	; (164c <usart_async_init+0x70>)
    15f6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    15f8:	463a      	mov	r2, r7
    15fa:	4631      	mov	r1, r6
    15fc:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <usart_async_init+0x74>)
    1602:	4798      	blx	r3
    1604:	b9e0      	cbnz	r0, 1640 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    1606:	4629      	mov	r1, r5
    1608:	f104 0008 	add.w	r0, r4, #8
    160c:	4b11      	ldr	r3, [pc, #68]	; (1654 <usart_async_init+0x78>)
    160e:	4798      	blx	r3
	if (init_status) {
    1610:	4603      	mov	r3, r0
    1612:	b958      	cbnz	r0, 162c <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    1614:	4a10      	ldr	r2, [pc, #64]	; (1658 <usart_async_init+0x7c>)
    1616:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1618:	4a10      	ldr	r2, [pc, #64]	; (165c <usart_async_init+0x80>)
    161a:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    161c:	4a10      	ldr	r2, [pc, #64]	; (1660 <usart_async_init+0x84>)
    161e:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <usart_async_init+0x88>)
    1622:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1624:	4a10      	ldr	r2, [pc, #64]	; (1668 <usart_async_init+0x8c>)
    1626:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1628:	4a10      	ldr	r2, [pc, #64]	; (166c <usart_async_init+0x90>)
    162a:	6162      	str	r2, [r4, #20]
}
    162c:	4618      	mov	r0, r3
    162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1630:	2000      	movs	r0, #0
    1632:	e7dd      	b.n	15f0 <usart_async_init+0x14>
    1634:	2000      	movs	r0, #0
    1636:	e7db      	b.n	15f0 <usart_async_init+0x14>
    1638:	2000      	movs	r0, #0
    163a:	e7d9      	b.n	15f0 <usart_async_init+0x14>
    163c:	2001      	movs	r0, #1
    163e:	e7d7      	b.n	15f0 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    1640:	f06f 030c 	mvn.w	r3, #12
    1644:	e7f2      	b.n	162c <usart_async_init+0x50>
    1646:	bf00      	nop
    1648:	00005170 	.word	0x00005170
    164c:	00001671 	.word	0x00001671
    1650:	000016d1 	.word	0x000016d1
    1654:	00002b91 	.word	0x00002b91
    1658:	00001561 	.word	0x00001561
    165c:	000014cd 	.word	0x000014cd
    1660:	0000152d 	.word	0x0000152d
    1664:	000014b1 	.word	0x000014b1
    1668:	00001489 	.word	0x00001489
    166c:	0000149d 	.word	0x0000149d

00001670 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1670:	b900      	cbnz	r0, 1674 <assert+0x4>
		__asm("BKPT #0");
    1672:	be00      	bkpt	0x0000
    1674:	4770      	bx	lr

00001676 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1676:	6803      	ldr	r3, [r0, #0]
    1678:	b11b      	cbz	r3, 1682 <is_list_element+0xc>
		if (it == element) {
    167a:	428b      	cmp	r3, r1
    167c:	d003      	beq.n	1686 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	e7fa      	b.n	1678 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    1682:	2000      	movs	r0, #0
    1684:	4770      	bx	lr
			return true;
    1686:	2001      	movs	r0, #1
}
    1688:	4770      	bx	lr
	...

0000168c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    168c:	b538      	push	{r3, r4, r5, lr}
    168e:	4604      	mov	r4, r0
    1690:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <list_insert_as_head+0x20>)
    1694:	4798      	blx	r3
    1696:	f080 0001 	eor.w	r0, r0, #1
    169a:	2239      	movs	r2, #57	; 0x39
    169c:	4904      	ldr	r1, [pc, #16]	; (16b0 <list_insert_as_head+0x24>)
    169e:	b2c0      	uxtb	r0, r0
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <list_insert_as_head+0x28>)
    16a2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    16a4:	6823      	ldr	r3, [r4, #0]
    16a6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    16a8:	6025      	str	r5, [r4, #0]
    16aa:	bd38      	pop	{r3, r4, r5, pc}
    16ac:	00001677 	.word	0x00001677
    16b0:	00005190 	.word	0x00005190
    16b4:	00001671 	.word	0x00001671

000016b8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    16b8:	6803      	ldr	r3, [r0, #0]
    16ba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    16bc:	6001      	str	r1, [r0, #0]
    16be:	4770      	bx	lr

000016c0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    16c0:	6803      	ldr	r3, [r0, #0]
    16c2:	b11b      	cbz	r3, 16cc <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    16c4:	681a      	ldr	r2, [r3, #0]
    16c6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    16c8:	4618      	mov	r0, r3
    16ca:	4770      	bx	lr
	}

	return NULL;
    16cc:	2000      	movs	r0, #0
}
    16ce:	4770      	bx	lr

000016d0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	460e      	mov	r6, r1
    16d4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    16d6:	4604      	mov	r4, r0
    16d8:	b178      	cbz	r0, 16fa <ringbuffer_init+0x2a>
    16da:	b181      	cbz	r1, 16fe <ringbuffer_init+0x2e>
    16dc:	b98a      	cbnz	r2, 1702 <ringbuffer_init+0x32>
    16de:	2000      	movs	r0, #0
    16e0:	2228      	movs	r2, #40	; 0x28
    16e2:	490a      	ldr	r1, [pc, #40]	; (170c <ringbuffer_init+0x3c>)
    16e4:	4b0a      	ldr	r3, [pc, #40]	; (1710 <ringbuffer_init+0x40>)
    16e6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    16e8:	1e6b      	subs	r3, r5, #1
    16ea:	421d      	tst	r5, r3
    16ec:	d10b      	bne.n	1706 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    16ee:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    16f0:	2000      	movs	r0, #0
    16f2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    16f4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    16f6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    16f8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    16fa:	2000      	movs	r0, #0
    16fc:	e7f0      	b.n	16e0 <ringbuffer_init+0x10>
    16fe:	2000      	movs	r0, #0
    1700:	e7ee      	b.n	16e0 <ringbuffer_init+0x10>
    1702:	2001      	movs	r0, #1
    1704:	e7ec      	b.n	16e0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1706:	f06f 000c 	mvn.w	r0, #12
}
    170a:	bd70      	pop	{r4, r5, r6, pc}
    170c:	000051b0 	.word	0x000051b0
    1710:	00001671 	.word	0x00001671

00001714 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1714:	b538      	push	{r3, r4, r5, lr}
    1716:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1718:	4604      	mov	r4, r0
    171a:	b1a8      	cbz	r0, 1748 <ringbuffer_get+0x34>
    171c:	b191      	cbz	r1, 1744 <ringbuffer_get+0x30>
    171e:	2001      	movs	r0, #1
    1720:	2240      	movs	r2, #64	; 0x40
    1722:	490c      	ldr	r1, [pc, #48]	; (1754 <ringbuffer_get+0x40>)
    1724:	4b0c      	ldr	r3, [pc, #48]	; (1758 <ringbuffer_get+0x44>)
    1726:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1728:	68e2      	ldr	r2, [r4, #12]
    172a:	68a3      	ldr	r3, [r4, #8]
    172c:	429a      	cmp	r2, r3
    172e:	d00d      	beq.n	174c <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    1730:	6822      	ldr	r2, [r4, #0]
    1732:	6861      	ldr	r1, [r4, #4]
    1734:	400b      	ands	r3, r1
    1736:	5cd3      	ldrb	r3, [r2, r3]
    1738:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    173a:	68a3      	ldr	r3, [r4, #8]
    173c:	3301      	adds	r3, #1
    173e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1740:	2000      	movs	r0, #0
    1742:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    1744:	2000      	movs	r0, #0
    1746:	e7eb      	b.n	1720 <ringbuffer_get+0xc>
    1748:	2000      	movs	r0, #0
    174a:	e7e9      	b.n	1720 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    174c:	f06f 0009 	mvn.w	r0, #9
}
    1750:	bd38      	pop	{r3, r4, r5, pc}
    1752:	bf00      	nop
    1754:	000051b0 	.word	0x000051b0
    1758:	00001671 	.word	0x00001671

0000175c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    175c:	b538      	push	{r3, r4, r5, lr}
    175e:	460d      	mov	r5, r1
	ASSERT(rb);
    1760:	4604      	mov	r4, r0
    1762:	2251      	movs	r2, #81	; 0x51
    1764:	490b      	ldr	r1, [pc, #44]	; (1794 <ringbuffer_put+0x38>)
    1766:	3000      	adds	r0, #0
    1768:	bf18      	it	ne
    176a:	2001      	movne	r0, #1
    176c:	4b0a      	ldr	r3, [pc, #40]	; (1798 <ringbuffer_put+0x3c>)
    176e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1770:	6822      	ldr	r2, [r4, #0]
    1772:	68e3      	ldr	r3, [r4, #12]
    1774:	6861      	ldr	r1, [r4, #4]
    1776:	400b      	ands	r3, r1
    1778:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    177a:	68e3      	ldr	r3, [r4, #12]
    177c:	68a2      	ldr	r2, [r4, #8]
    177e:	1a9a      	subs	r2, r3, r2
    1780:	6861      	ldr	r1, [r4, #4]
    1782:	428a      	cmp	r2, r1
    1784:	d901      	bls.n	178a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1786:	1a59      	subs	r1, r3, r1
    1788:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    178a:	3301      	adds	r3, #1
    178c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    178e:	2000      	movs	r0, #0
    1790:	bd38      	pop	{r3, r4, r5, pc}
    1792:	bf00      	nop
    1794:	000051b0 	.word	0x000051b0
    1798:	00001671 	.word	0x00001671

0000179c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    179c:	b510      	push	{r4, lr}
	ASSERT(rb);
    179e:	4604      	mov	r4, r0
    17a0:	2267      	movs	r2, #103	; 0x67
    17a2:	4905      	ldr	r1, [pc, #20]	; (17b8 <ringbuffer_num+0x1c>)
    17a4:	3000      	adds	r0, #0
    17a6:	bf18      	it	ne
    17a8:	2001      	movne	r0, #1
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <ringbuffer_num+0x20>)
    17ac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    17ae:	68e0      	ldr	r0, [r4, #12]
    17b0:	68a3      	ldr	r3, [r4, #8]
}
    17b2:	1ac0      	subs	r0, r0, r3
    17b4:	bd10      	pop	{r4, pc}
    17b6:	bf00      	nop
    17b8:	000051b0 	.word	0x000051b0
    17bc:	00001671 	.word	0x00001671

000017c0 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    17c0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    17c4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    17c8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    17cc:	4770      	bx	lr
	...

000017d0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    17d0:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    17d2:	4b60      	ldr	r3, [pc, #384]	; (1954 <_adc_init+0x184>)
    17d4:	4298      	cmp	r0, r3
    17d6:	f000 809c 	beq.w	1912 <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    17da:	4b5f      	ldr	r3, [pc, #380]	; (1958 <_adc_init+0x188>)
    17dc:	4298      	cmp	r0, r3
    17de:	f000 80a8 	beq.w	1932 <_adc_init+0x162>
	uint16_t calib_reg = 0;
    17e2:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    17e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    17e6:	f013 0f01 	tst.w	r3, #1
    17ea:	d11b      	bne.n	1824 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17ee:	f013 0f03 	tst.w	r3, #3
    17f2:	d1fb      	bne.n	17ec <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    17f4:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    17f6:	f013 0f02 	tst.w	r3, #2
    17fa:	d00d      	beq.n	1818 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    17fc:	8803      	ldrh	r3, [r0, #0]
    17fe:	b29b      	uxth	r3, r3
    1800:	f023 0302 	bic.w	r3, r3, #2
    1804:	b29b      	uxth	r3, r3
    1806:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1808:	6b03      	ldr	r3, [r0, #48]	; 0x30
    180a:	f013 0f03 	tst.w	r3, #3
    180e:	d1fb      	bne.n	1808 <_adc_init+0x38>
    1810:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1812:	f013 0f02 	tst.w	r3, #2
    1816:	d1fb      	bne.n	1810 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1818:	2301      	movs	r3, #1
    181a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    181c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    181e:	f013 0f03 	tst.w	r3, #3
    1822:	d1fb      	bne.n	181c <_adc_init+0x4c>
    1824:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1826:	f013 0f01 	tst.w	r3, #1
    182a:	d1fb      	bne.n	1824 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    182c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1830:	2316      	movs	r3, #22
    1832:	4a4a      	ldr	r2, [pc, #296]	; (195c <_adc_init+0x18c>)
    1834:	fb03 2301 	mla	r3, r3, r1, r2
    1838:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    183a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    183c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1842:	2b00      	cmp	r3, #0
    1844:	d1fa      	bne.n	183c <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1846:	2316      	movs	r3, #22
    1848:	4a44      	ldr	r2, [pc, #272]	; (195c <_adc_init+0x18c>)
    184a:	fb03 2301 	mla	r3, r3, r1, r2
    184e:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1850:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1852:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1854:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1858:	2b00      	cmp	r3, #0
    185a:	d1fa      	bne.n	1852 <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    185c:	2316      	movs	r3, #22
    185e:	4a3f      	ldr	r2, [pc, #252]	; (195c <_adc_init+0x18c>)
    1860:	fb03 2301 	mla	r3, r3, r1, r2
    1864:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1866:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1868:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    186a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    186c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1872:	2b00      	cmp	r3, #0
    1874:	d1fa      	bne.n	186c <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1876:	2316      	movs	r3, #22
    1878:	4a38      	ldr	r2, [pc, #224]	; (195c <_adc_init+0x18c>)
    187a:	fb03 2301 	mla	r3, r3, r1, r2
    187e:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    1880:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1882:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1884:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1888:	2b00      	cmp	r3, #0
    188a:	d1fa      	bne.n	1882 <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    188c:	2316      	movs	r3, #22
    188e:	4a33      	ldr	r2, [pc, #204]	; (195c <_adc_init+0x18c>)
    1890:	fb03 2301 	mla	r3, r3, r1, r2
    1894:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    1896:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1898:	6b03      	ldr	r3, [r0, #48]	; 0x30
    189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    189e:	2b00      	cmp	r3, #0
    18a0:	d1fa      	bne.n	1898 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    18a2:	2316      	movs	r3, #22
    18a4:	4a2d      	ldr	r2, [pc, #180]	; (195c <_adc_init+0x18c>)
    18a6:	fb03 2301 	mla	r3, r3, r1, r2
    18aa:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    18ac:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    18b4:	d1fb      	bne.n	18ae <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    18b6:	2316      	movs	r3, #22
    18b8:	4a28      	ldr	r2, [pc, #160]	; (195c <_adc_init+0x18c>)
    18ba:	fb03 2301 	mla	r3, r3, r1, r2
    18be:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    18c0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18c4:	f413 7f80 	tst.w	r3, #256	; 0x100
    18c8:	d1fb      	bne.n	18c2 <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    18ca:	2316      	movs	r3, #22
    18cc:	4a23      	ldr	r2, [pc, #140]	; (195c <_adc_init+0x18c>)
    18ce:	fb03 2301 	mla	r3, r3, r1, r2
    18d2:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    18d4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18d8:	f413 7f00 	tst.w	r3, #512	; 0x200
    18dc:	d1fb      	bne.n	18d6 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    18de:	2316      	movs	r3, #22
    18e0:	4a1e      	ldr	r2, [pc, #120]	; (195c <_adc_init+0x18c>)
    18e2:	fb03 2301 	mla	r3, r3, r1, r2
    18e6:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    18e8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
    18f0:	d1fb      	bne.n	18ea <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    18f2:	2216      	movs	r2, #22
    18f4:	4b19      	ldr	r3, [pc, #100]	; (195c <_adc_init+0x18c>)
    18f6:	fb02 3101 	mla	r1, r2, r1, r3
    18fa:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    18fc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    18fe:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1900:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1902:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1904:	f013 0f03 	tst.w	r3, #3
    1908:	d1fb      	bne.n	1902 <_adc_init+0x132>

	return ERR_NONE;
}
    190a:	2000      	movs	r0, #0
    190c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1910:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1912:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	095a      	lsrs	r2, r3, #5
    191a:	0212      	lsls	r2, r2, #8
    191c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1920:	0a1c      	lsrs	r4, r3, #8
    1922:	0124      	lsls	r4, r4, #4
    1924:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1928:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    192a:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    192e:	431a      	orrs	r2, r3
    1930:	e758      	b.n	17e4 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1932:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	0cda      	lsrs	r2, r3, #19
    193a:	0212      	lsls	r2, r2, #8
    193c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1940:	0d9c      	lsrs	r4, r3, #22
    1942:	0124      	lsls	r4, r4, #4
    1944:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1948:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    194a:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    194e:	431a      	orrs	r2, r3
    1950:	e748      	b.n	17e4 <_adc_init+0x14>
    1952:	bf00      	nop
    1954:	43001c00 	.word	0x43001c00
    1958:	43002000 	.word	0x43002000
    195c:	000051d4 	.word	0x000051d4

00001960 <_adc_get_regs>:
{
    1960:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1962:	4b0b      	ldr	r3, [pc, #44]	; (1990 <_adc_get_regs+0x30>)
    1964:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1966:	2300      	movs	r3, #0
    1968:	b13b      	cbz	r3, 197a <_adc_get_regs+0x1a>
	ASSERT(false);
    196a:	2288      	movs	r2, #136	; 0x88
    196c:	4909      	ldr	r1, [pc, #36]	; (1994 <_adc_get_regs+0x34>)
    196e:	2000      	movs	r0, #0
    1970:	4b09      	ldr	r3, [pc, #36]	; (1998 <_adc_get_regs+0x38>)
    1972:	4798      	blx	r3
	return 0;
    1974:	2300      	movs	r3, #0
}
    1976:	4618      	mov	r0, r3
    1978:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    197a:	2216      	movs	r2, #22
    197c:	fb02 f203 	mul.w	r2, r2, r3
    1980:	4906      	ldr	r1, [pc, #24]	; (199c <_adc_get_regs+0x3c>)
    1982:	5c8a      	ldrb	r2, [r1, r2]
    1984:	4290      	cmp	r0, r2
    1986:	d0f6      	beq.n	1976 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1988:	3301      	adds	r3, #1
    198a:	b2db      	uxtb	r3, r3
    198c:	e7ec      	b.n	1968 <_adc_get_regs+0x8>
    198e:	bf00      	nop
    1990:	000017c1 	.word	0x000017c1
    1994:	000051ec 	.word	0x000051ec
    1998:	00001671 	.word	0x00001671
    199c:	000051d4 	.word	0x000051d4

000019a0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    19a0:	b538      	push	{r3, r4, r5, lr}
    19a2:	460c      	mov	r4, r1
	ASSERT(device);
    19a4:	4605      	mov	r5, r0
    19a6:	22d9      	movs	r2, #217	; 0xd9
    19a8:	4907      	ldr	r1, [pc, #28]	; (19c8 <_adc_sync_init+0x28>)
    19aa:	3000      	adds	r0, #0
    19ac:	bf18      	it	ne
    19ae:	2001      	movne	r0, #1
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <_adc_sync_init+0x2c>)
    19b2:	4798      	blx	r3

	device->hw = hw;
    19b4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    19b6:	4620      	mov	r0, r4
    19b8:	4b05      	ldr	r3, [pc, #20]	; (19d0 <_adc_sync_init+0x30>)
    19ba:	4798      	blx	r3
    19bc:	4601      	mov	r1, r0
    19be:	4620      	mov	r0, r4
    19c0:	4b04      	ldr	r3, [pc, #16]	; (19d4 <_adc_sync_init+0x34>)
    19c2:	4798      	blx	r3
}
    19c4:	bd38      	pop	{r3, r4, r5, pc}
    19c6:	bf00      	nop
    19c8:	000051ec 	.word	0x000051ec
    19cc:	00001671 	.word	0x00001671
    19d0:	00001961 	.word	0x00001961
    19d4:	000017d1 	.word	0x000017d1

000019d8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    19d8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19da:	8813      	ldrh	r3, [r2, #0]
    19dc:	b29b      	uxth	r3, r3
    19de:	f043 0302 	orr.w	r3, r3, #2
    19e2:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19e6:	f013 0f03 	tst.w	r3, #3
    19ea:	d1fb      	bne.n	19e4 <_adc_sync_enable_channel+0xc>
}
    19ec:	4770      	bx	lr

000019ee <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19ee:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    19f0:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    19f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    19f6:	2b03      	cmp	r3, #3
    19f8:	d001      	beq.n	19fe <_adc_sync_get_data_size+0x10>
    19fa:	2002      	movs	r0, #2
}
    19fc:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19fe:	2001      	movs	r0, #1
    1a00:	4770      	bx	lr

00001a02 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1a02:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1a04:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    1a08:	f000 0001 	and.w	r0, r0, #1
    1a0c:	4770      	bx	lr

00001a0e <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1a0e:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1a10:	7d13      	ldrb	r3, [r2, #20]
    1a12:	f043 0302 	orr.w	r3, r3, #2
    1a16:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a18:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d1fa      	bne.n	1a18 <_adc_sync_convert+0xa>
}
    1a22:	4770      	bx	lr

00001a24 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1a24:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    1a26:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    1a2a:	b280      	uxth	r0, r0
    1a2c:	4770      	bx	lr
	...

00001a30 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a30:	0943      	lsrs	r3, r0, #5
    1a32:	f000 001f 	and.w	r0, r0, #31
    1a36:	2201      	movs	r2, #1
    1a38:	fa02 f000 	lsl.w	r0, r2, r0
    1a3c:	3340      	adds	r3, #64	; 0x40
    1a3e:	4a02      	ldr	r2, [pc, #8]	; (1a48 <_irq_set+0x18>)
    1a40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1a44:	4770      	bx	lr
    1a46:	bf00      	nop
    1a48:	e000e100 	.word	0xe000e100

00001a4c <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1a4c:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a50:	fb03 f000 	mul.w	r0, r3, r0
    1a54:	3801      	subs	r0, #1
    1a56:	4b03      	ldr	r3, [pc, #12]	; (1a64 <_get_cycles_for_us+0x18>)
    1a58:	fba3 3000 	umull	r3, r0, r3, r0
    1a5c:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a5e:	3001      	adds	r0, #1
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop
    1a64:	cccccccd 	.word	0xcccccccd

00001a68 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    1a68:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a6c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a70:	2364      	movs	r3, #100	; 0x64
    1a72:	fb03 f000 	mul.w	r0, r3, r0
    1a76:	4770      	bx	lr

00001a78 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a78:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1a7a:	4a0d      	ldr	r2, [pc, #52]	; (1ab0 <_init_chip+0x38>)
    1a7c:	8813      	ldrh	r3, [r2, #0]
    1a7e:	b29b      	uxth	r3, r3
    1a80:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1a82:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <_init_chip+0x3c>)
    1a84:	4798      	blx	r3
	_oscctrl_init_sources();
    1a86:	4b0c      	ldr	r3, [pc, #48]	; (1ab8 <_init_chip+0x40>)
    1a88:	4798      	blx	r3
	_mclk_init();
    1a8a:	4b0c      	ldr	r3, [pc, #48]	; (1abc <_init_chip+0x44>)
    1a8c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1a8e:	200c      	movs	r0, #12
    1a90:	4c0b      	ldr	r4, [pc, #44]	; (1ac0 <_init_chip+0x48>)
    1a92:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1a94:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <_init_chip+0x4c>)
    1a96:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1a98:	f640 70f3 	movw	r0, #4083	; 0xff3
    1a9c:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1a9e:	4a0a      	ldr	r2, [pc, #40]	; (1ac8 <_init_chip+0x50>)
    1aa0:	6913      	ldr	r3, [r2, #16]
    1aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1aa6:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <_init_chip+0x54>)
    1aaa:	4798      	blx	r3
    1aac:	bd10      	pop	{r4, pc}
    1aae:	bf00      	nop
    1ab0:	41004000 	.word	0x41004000
    1ab4:	00001f69 	.word	0x00001f69
    1ab8:	00001f89 	.word	0x00001f89
    1abc:	00001f5d 	.word	0x00001f5d
    1ac0:	00001ee5 	.word	0x00001ee5
    1ac4:	00001f8d 	.word	0x00001f8d
    1ac8:	40000800 	.word	0x40000800
    1acc:	00001b39 	.word	0x00001b39

00001ad0 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1ad0:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1ad2:	4a17      	ldr	r2, [pc, #92]	; (1b30 <_dmac_handler+0x60>)
    1ad4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1ad6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1ada:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1ade:	0088      	lsls	r0, r1, #2
    1ae0:	4914      	ldr	r1, [pc, #80]	; (1b34 <_dmac_handler+0x64>)
    1ae2:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1ae4:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1ae6:	f412 7f80 	tst.w	r2, #256	; 0x100
    1aea:	d105      	bne.n	1af8 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1aec:	4a10      	ldr	r2, [pc, #64]	; (1b30 <_dmac_handler+0x60>)
    1aee:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1af0:	f412 7f00 	tst.w	r2, #512	; 0x200
    1af4:	d10b      	bne.n	1b0e <_dmac_handler+0x3e>
    1af6:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1af8:	011a      	lsls	r2, r3, #4
    1afa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1afe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b02:	2101      	movs	r1, #1
    1b04:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1b08:	6843      	ldr	r3, [r0, #4]
    1b0a:	4798      	blx	r3
    1b0c:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1b0e:	011a      	lsls	r2, r3, #4
    1b10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b14:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b18:	2102      	movs	r1, #2
    1b1a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1b1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b22:	fa03 f201 	lsl.w	r2, r3, r1
    1b26:	4b03      	ldr	r3, [pc, #12]	; (1b34 <_dmac_handler+0x64>)
    1b28:	589b      	ldr	r3, [r3, r2]
    1b2a:	4798      	blx	r3
	}
}
    1b2c:	e7e3      	b.n	1af6 <_dmac_handler+0x26>
    1b2e:	bf00      	nop
    1b30:	4100a000 	.word	0x4100a000
    1b34:	20000090 	.word	0x20000090

00001b38 <_dma_init>:
{
    1b38:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1b3a:	4a3c      	ldr	r2, [pc, #240]	; (1c2c <_dma_init+0xf4>)
    1b3c:	8813      	ldrh	r3, [r2, #0]
    1b3e:	b29b      	uxth	r3, r3
    1b40:	f023 0302 	bic.w	r3, r3, #2
    1b44:	b29b      	uxth	r3, r3
    1b46:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1b48:	8853      	ldrh	r3, [r2, #2]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1b50:	b29b      	uxth	r3, r3
    1b52:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1b54:	8813      	ldrh	r3, [r2, #0]
    1b56:	b29b      	uxth	r3, r3
    1b58:	f043 0301 	orr.w	r3, r3, #1
    1b5c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1b5e:	4b33      	ldr	r3, [pc, #204]	; (1c2c <_dma_init+0xf4>)
    1b60:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1b62:	f013 0f01 	tst.w	r3, #1
    1b66:	d1fa      	bne.n	1b5e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1b68:	4a30      	ldr	r2, [pc, #192]	; (1c2c <_dma_init+0xf4>)
    1b6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1b6e:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1b70:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1b72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1b76:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1b78:	2300      	movs	r3, #0
    1b7a:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1b7c:	492c      	ldr	r1, [pc, #176]	; (1c30 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1b7e:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1b80:	492c      	ldr	r1, [pc, #176]	; (1c34 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1b82:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1b84:	e016      	b.n	1bb4 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1b86:	4a2c      	ldr	r2, [pc, #176]	; (1c38 <_dma_init+0x100>)
    1b88:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1b8c:	4c27      	ldr	r4, [pc, #156]	; (1c2c <_dma_init+0xf4>)
    1b8e:	1d19      	adds	r1, r3, #4
    1b90:	0109      	lsls	r1, r1, #4
    1b92:	1860      	adds	r0, r4, r1
    1b94:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1b96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b9a:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1b9c:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1b9e:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1ba0:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1ba2:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1ba4:	4922      	ldr	r1, [pc, #136]	; (1c30 <_dma_init+0xf8>)
    1ba6:	011a      	lsls	r2, r3, #4
    1ba8:	1888      	adds	r0, r1, r2
    1baa:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1bac:	2200      	movs	r2, #0
    1bae:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1bb0:	3301      	adds	r3, #1
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	2b1f      	cmp	r3, #31
    1bb6:	d9e6      	bls.n	1b86 <_dma_init+0x4e>
    1bb8:	2300      	movs	r3, #0
    1bba:	e00a      	b.n	1bd2 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1bbc:	f103 011f 	add.w	r1, r3, #31
    1bc0:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	da10      	bge.n	1be8 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bc6:	2a00      	cmp	r2, #0
    1bc8:	da1c      	bge.n	1c04 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1bca:	2a00      	cmp	r2, #0
    1bcc:	da24      	bge.n	1c18 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1bce:	3301      	adds	r3, #1
    1bd0:	b2db      	uxtb	r3, r3
    1bd2:	2b04      	cmp	r3, #4
    1bd4:	d9f2      	bls.n	1bbc <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1bd6:	4a15      	ldr	r2, [pc, #84]	; (1c2c <_dma_init+0xf4>)
    1bd8:	8813      	ldrh	r3, [r2, #0]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	f043 0302 	orr.w	r3, r3, #2
    1be0:	8013      	strh	r3, [r2, #0]
}
    1be2:	2000      	movs	r0, #0
    1be4:	bc30      	pop	{r4, r5}
    1be6:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be8:	0950      	lsrs	r0, r2, #5
    1bea:	f001 051f 	and.w	r5, r1, #31
    1bee:	2401      	movs	r4, #1
    1bf0:	40ac      	lsls	r4, r5
    1bf2:	3020      	adds	r0, #32
    1bf4:	4d11      	ldr	r5, [pc, #68]	; (1c3c <_dma_init+0x104>)
    1bf6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bfe:	f3bf 8f6f 	isb	sy
    1c02:	e7e0      	b.n	1bc6 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c04:	0950      	lsrs	r0, r2, #5
    1c06:	f001 051f 	and.w	r5, r1, #31
    1c0a:	2401      	movs	r4, #1
    1c0c:	40ac      	lsls	r4, r5
    1c0e:	3060      	adds	r0, #96	; 0x60
    1c10:	4d0a      	ldr	r5, [pc, #40]	; (1c3c <_dma_init+0x104>)
    1c12:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1c16:	e7d8      	b.n	1bca <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c18:	0952      	lsrs	r2, r2, #5
    1c1a:	f001 011f 	and.w	r1, r1, #31
    1c1e:	2001      	movs	r0, #1
    1c20:	fa00 f101 	lsl.w	r1, r0, r1
    1c24:	4805      	ldr	r0, [pc, #20]	; (1c3c <_dma_init+0x104>)
    1c26:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1c2a:	e7d0      	b.n	1bce <_dma_init+0x96>
    1c2c:	4100a000 	.word	0x4100a000
    1c30:	20000760 	.word	0x20000760
    1c34:	20000960 	.word	0x20000960
    1c38:	00005204 	.word	0x00005204
    1c3c:	e000e100 	.word	0xe000e100

00001c40 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1c40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1c44:	008a      	lsls	r2, r1, #2
    1c46:	4b02      	ldr	r3, [pc, #8]	; (1c50 <_dma_get_channel_resource+0x10>)
    1c48:	4413      	add	r3, r2
    1c4a:	6003      	str	r3, [r0, #0]
}
    1c4c:	2000      	movs	r0, #0
    1c4e:	4770      	bx	lr
    1c50:	20000090 	.word	0x20000090

00001c54 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1c54:	b508      	push	{r3, lr}
	_dmac_handler();
    1c56:	4b01      	ldr	r3, [pc, #4]	; (1c5c <DMAC_0_Handler+0x8>)
    1c58:	4798      	blx	r3
    1c5a:	bd08      	pop	{r3, pc}
    1c5c:	00001ad1 	.word	0x00001ad1

00001c60 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1c60:	b508      	push	{r3, lr}
	_dmac_handler();
    1c62:	4b01      	ldr	r3, [pc, #4]	; (1c68 <DMAC_1_Handler+0x8>)
    1c64:	4798      	blx	r3
    1c66:	bd08      	pop	{r3, pc}
    1c68:	00001ad1 	.word	0x00001ad1

00001c6c <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1c6c:	b508      	push	{r3, lr}
	_dmac_handler();
    1c6e:	4b01      	ldr	r3, [pc, #4]	; (1c74 <DMAC_2_Handler+0x8>)
    1c70:	4798      	blx	r3
    1c72:	bd08      	pop	{r3, pc}
    1c74:	00001ad1 	.word	0x00001ad1

00001c78 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1c78:	b508      	push	{r3, lr}
	_dmac_handler();
    1c7a:	4b01      	ldr	r3, [pc, #4]	; (1c80 <DMAC_3_Handler+0x8>)
    1c7c:	4798      	blx	r3
    1c7e:	bd08      	pop	{r3, pc}
    1c80:	00001ad1 	.word	0x00001ad1

00001c84 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1c84:	b508      	push	{r3, lr}
	_dmac_handler();
    1c86:	4b01      	ldr	r3, [pc, #4]	; (1c8c <DMAC_4_Handler+0x8>)
    1c88:	4798      	blx	r3
    1c8a:	bd08      	pop	{r3, pc}
    1c8c:	00001ad1 	.word	0x00001ad1

00001c90 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1c90:	b570      	push	{r4, r5, r6, lr}
    1c92:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1c94:	4b2a      	ldr	r3, [pc, #168]	; (1d40 <_ext_irq_handler+0xb0>)
    1c96:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1c98:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1c9a:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1c9c:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1c9e:	4b29      	ldr	r3, [pc, #164]	; (1d44 <_ext_irq_handler+0xb4>)
    1ca0:	6818      	ldr	r0, [r3, #0]
    1ca2:	22f4      	movs	r2, #244	; 0xf4
    1ca4:	4928      	ldr	r1, [pc, #160]	; (1d48 <_ext_irq_handler+0xb8>)
    1ca6:	3000      	adds	r0, #0
    1ca8:	bf18      	it	ne
    1caa:	2001      	movne	r0, #1
    1cac:	4b27      	ldr	r3, [pc, #156]	; (1d4c <_ext_irq_handler+0xbc>)
    1cae:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1cb0:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1cb4:	e035      	b.n	1d22 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1cb6:	4b26      	ldr	r3, [pc, #152]	; (1d50 <_ext_irq_handler+0xc0>)
    1cb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1cbc:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1cbe:	f1b5 3fff 	cmp.w	r5, #4294967295
    1cc2:	d003      	beq.n	1ccc <_ext_irq_handler+0x3c>
				callback(pin);
    1cc4:	4b1f      	ldr	r3, [pc, #124]	; (1d44 <_ext_irq_handler+0xb4>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	4628      	mov	r0, r5
    1cca:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1ccc:	2301      	movs	r3, #1
    1cce:	40a3      	lsls	r3, r4
    1cd0:	9c01      	ldr	r4, [sp, #4]
    1cd2:	ea24 0403 	bic.w	r4, r4, r3
    1cd6:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	fa93 f4a3 	rbit	r4, r3
    1cde:	fab4 f484 	clz	r4, r4
    1ce2:	b90b      	cbnz	r3, 1ce8 <_ext_irq_handler+0x58>
    1ce4:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1ce8:	f1b4 3fff 	cmp.w	r4, #4294967295
    1cec:	d014      	beq.n	1d18 <_ext_irq_handler+0x88>
    1cee:	2004      	movs	r0, #4
    1cf0:	2100      	movs	r1, #0
    1cf2:	e001      	b.n	1cf8 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1cf4:	3b01      	subs	r3, #1
    1cf6:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1cf8:	4281      	cmp	r1, r0
    1cfa:	d8e0      	bhi.n	1cbe <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1cfc:	1843      	adds	r3, r0, r1
    1cfe:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1d02:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1d04:	4a12      	ldr	r2, [pc, #72]	; (1d50 <_ext_irq_handler+0xc0>)
    1d06:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1d0a:	42a2      	cmp	r2, r4
    1d0c:	d0d3      	beq.n	1cb6 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1d0e:	42a2      	cmp	r2, r4
    1d10:	daf0      	bge.n	1cf4 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1d12:	3301      	adds	r3, #1
    1d14:	b2d9      	uxtb	r1, r3
    1d16:	e7ef      	b.n	1cf8 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1d18:	4b09      	ldr	r3, [pc, #36]	; (1d40 <_ext_irq_handler+0xb0>)
    1d1a:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1d1c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1d1e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1d20:	615a      	str	r2, [r3, #20]
	while (flags) {
    1d22:	9b01      	ldr	r3, [sp, #4]
    1d24:	b14b      	cbz	r3, 1d3a <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1d26:	9b01      	ldr	r3, [sp, #4]
    1d28:	fa93 f4a3 	rbit	r4, r3
    1d2c:	fab4 f484 	clz	r4, r4
    1d30:	2b00      	cmp	r3, #0
    1d32:	d1d9      	bne.n	1ce8 <_ext_irq_handler+0x58>
    1d34:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1d38:	e7d6      	b.n	1ce8 <_ext_irq_handler+0x58>
	}
}
    1d3a:	b002      	add	sp, #8
    1d3c:	bd70      	pop	{r4, r5, r6, pc}
    1d3e:	bf00      	nop
    1d40:	40002800 	.word	0x40002800
    1d44:	20000210 	.word	0x20000210
    1d48:	00005324 	.word	0x00005324
    1d4c:	00001671 	.word	0x00001671
    1d50:	00005304 	.word	0x00005304

00001d54 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1d54:	4b3d      	ldr	r3, [pc, #244]	; (1e4c <_ext_irq_init+0xf8>)
    1d56:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1d58:	f013 0f01 	tst.w	r3, #1
    1d5c:	d120      	bne.n	1da0 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d5e:	4b3b      	ldr	r3, [pc, #236]	; (1e4c <_ext_irq_init+0xf8>)
    1d60:	685b      	ldr	r3, [r3, #4]
    1d62:	f013 0f03 	tst.w	r3, #3
    1d66:	d1fa      	bne.n	1d5e <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1d68:	4b38      	ldr	r3, [pc, #224]	; (1e4c <_ext_irq_init+0xf8>)
    1d6a:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1d6c:	f013 0f02 	tst.w	r3, #2
    1d70:	d00e      	beq.n	1d90 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1d72:	4a36      	ldr	r2, [pc, #216]	; (1e4c <_ext_irq_init+0xf8>)
    1d74:	7813      	ldrb	r3, [r2, #0]
    1d76:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1d7a:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d7c:	4b33      	ldr	r3, [pc, #204]	; (1e4c <_ext_irq_init+0xf8>)
    1d7e:	685b      	ldr	r3, [r3, #4]
    1d80:	f013 0f03 	tst.w	r3, #3
    1d84:	d1fa      	bne.n	1d7c <_ext_irq_init+0x28>
    1d86:	4b31      	ldr	r3, [pc, #196]	; (1e4c <_ext_irq_init+0xf8>)
    1d88:	685b      	ldr	r3, [r3, #4]
    1d8a:	f013 0f02 	tst.w	r3, #2
    1d8e:	d1fa      	bne.n	1d86 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1d90:	2201      	movs	r2, #1
    1d92:	4b2e      	ldr	r3, [pc, #184]	; (1e4c <_ext_irq_init+0xf8>)
    1d94:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1d96:	4b2d      	ldr	r3, [pc, #180]	; (1e4c <_ext_irq_init+0xf8>)
    1d98:	685b      	ldr	r3, [r3, #4]
    1d9a:	f013 0f03 	tst.w	r3, #3
    1d9e:	d1fa      	bne.n	1d96 <_ext_irq_init+0x42>
    1da0:	4b2a      	ldr	r3, [pc, #168]	; (1e4c <_ext_irq_init+0xf8>)
    1da2:	685b      	ldr	r3, [r3, #4]
    1da4:	f013 0f01 	tst.w	r3, #1
    1da8:	d1fa      	bne.n	1da0 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1daa:	4a28      	ldr	r2, [pc, #160]	; (1e4c <_ext_irq_init+0xf8>)
    1dac:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1dae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1db2:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1db4:	4b25      	ldr	r3, [pc, #148]	; (1e4c <_ext_irq_init+0xf8>)
    1db6:	685b      	ldr	r3, [r3, #4]
    1db8:	f013 0f03 	tst.w	r3, #3
    1dbc:	d1fa      	bne.n	1db4 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1dbe:	4b23      	ldr	r3, [pc, #140]	; (1e4c <_ext_irq_init+0xf8>)
    1dc0:	2200      	movs	r2, #0
    1dc2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1dc4:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1dc6:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1dc8:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1dca:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1dcc:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1dd0:	61da      	str	r2, [r3, #28]
    1dd2:	4a1f      	ldr	r2, [pc, #124]	; (1e50 <_ext_irq_init+0xfc>)
    1dd4:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1dd6:	781a      	ldrb	r2, [r3, #0]
    1dd8:	f042 0202 	orr.w	r2, r2, #2
    1ddc:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1dde:	4b1b      	ldr	r3, [pc, #108]	; (1e4c <_ext_irq_init+0xf8>)
    1de0:	685b      	ldr	r3, [r3, #4]
    1de2:	f013 0f03 	tst.w	r3, #3
    1de6:	d1fa      	bne.n	1dde <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1de8:	4b1a      	ldr	r3, [pc, #104]	; (1e54 <_ext_irq_init+0x100>)
    1dea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1df2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1df6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dfe:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e0c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e14:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e22:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e26:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e2a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e38:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e40:	601a      	str	r2, [r3, #0]
	callback = cb;
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <_ext_irq_init+0x104>)
    1e44:	6018      	str	r0, [r3, #0]
}
    1e46:	2000      	movs	r0, #0
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop
    1e4c:	40002800 	.word	0x40002800
    1e50:	0a0000b0 	.word	0x0a0000b0
    1e54:	e000e100 	.word	0xe000e100
    1e58:	20000210 	.word	0x20000210

00001e5c <_ext_irq_enable>:
{
    1e5c:	b410      	push	{r4}
	uint8_t i      = 0;
    1e5e:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1e60:	2b03      	cmp	r3, #3
    1e62:	d80d      	bhi.n	1e80 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1e64:	461c      	mov	r4, r3
    1e66:	4a11      	ldr	r2, [pc, #68]	; (1eac <_ext_irq_enable+0x50>)
    1e68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1e6c:	6852      	ldr	r2, [r2, #4]
    1e6e:	4282      	cmp	r2, r0
    1e70:	d002      	beq.n	1e78 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1e72:	3301      	adds	r3, #1
    1e74:	b2db      	uxtb	r3, r3
    1e76:	e7f3      	b.n	1e60 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1e78:	4b0c      	ldr	r3, [pc, #48]	; (1eac <_ext_irq_enable+0x50>)
    1e7a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1e7e:	e000      	b.n	1e82 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1e80:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1e82:	2aff      	cmp	r2, #255	; 0xff
    1e84:	d00f      	beq.n	1ea6 <_ext_irq_enable+0x4a>
	if (enable) {
    1e86:	b941      	cbnz	r1, 1e9a <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1e88:	2301      	movs	r3, #1
    1e8a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1e8c:	4a08      	ldr	r2, [pc, #32]	; (1eb0 <_ext_irq_enable+0x54>)
    1e8e:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1e90:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1e92:	2000      	movs	r0, #0
}
    1e94:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e98:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1e9a:	2301      	movs	r3, #1
    1e9c:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1e9e:	4a04      	ldr	r2, [pc, #16]	; (1eb0 <_ext_irq_enable+0x54>)
    1ea0:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1ea2:	2000      	movs	r0, #0
    1ea4:	e7f6      	b.n	1e94 <_ext_irq_enable+0x38>
		return -1;
    1ea6:	f04f 30ff 	mov.w	r0, #4294967295
    1eaa:	e7f3      	b.n	1e94 <_ext_irq_enable+0x38>
    1eac:	00005304 	.word	0x00005304
    1eb0:	40002800 	.word	0x40002800

00001eb4 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1eb4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1eb6:	4b01      	ldr	r3, [pc, #4]	; (1ebc <EIC_6_Handler+0x8>)
    1eb8:	4798      	blx	r3
    1eba:	bd08      	pop	{r3, pc}
    1ebc:	00001c91 	.word	0x00001c91

00001ec0 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1ec0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1ec2:	4b01      	ldr	r3, [pc, #4]	; (1ec8 <EIC_7_Handler+0x8>)
    1ec4:	4798      	blx	r3
    1ec6:	bd08      	pop	{r3, pc}
    1ec8:	00001c91 	.word	0x00001c91

00001ecc <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1ecc:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1ece:	4b01      	ldr	r3, [pc, #4]	; (1ed4 <EIC_9_Handler+0x8>)
    1ed0:	4798      	blx	r3
    1ed2:	bd08      	pop	{r3, pc}
    1ed4:	00001c91 	.word	0x00001c91

00001ed8 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1ed8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1eda:	4b01      	ldr	r3, [pc, #4]	; (1ee0 <EIC_14_Handler+0x8>)
    1edc:	4798      	blx	r3
    1ede:	bd08      	pop	{r3, pc}
    1ee0:	00001c91 	.word	0x00001c91

00001ee4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1ee4:	f010 0f01 	tst.w	r0, #1
    1ee8:	d008      	beq.n	1efc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1eea:	4a17      	ldr	r2, [pc, #92]	; (1f48 <_gclk_init_generators_by_fref+0x64>)
    1eec:	4b17      	ldr	r3, [pc, #92]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1eee:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ef0:	4b16      	ldr	r3, [pc, #88]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1ef2:	685a      	ldr	r2, [r3, #4]
    1ef4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ef8:	421a      	tst	r2, r3
    1efa:	d1f9      	bne.n	1ef0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1efc:	f010 0f02 	tst.w	r0, #2
    1f00:	d008      	beq.n	1f14 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f02:	4a13      	ldr	r2, [pc, #76]	; (1f50 <_gclk_init_generators_by_fref+0x6c>)
    1f04:	4b11      	ldr	r3, [pc, #68]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f06:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f08:	4b10      	ldr	r3, [pc, #64]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f0a:	685a      	ldr	r2, [r3, #4]
    1f0c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f10:	421a      	tst	r2, r3
    1f12:	d1f9      	bne.n	1f08 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1f14:	f010 0f04 	tst.w	r0, #4
    1f18:	d008      	beq.n	1f2c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f1a:	4a0e      	ldr	r2, [pc, #56]	; (1f54 <_gclk_init_generators_by_fref+0x70>)
    1f1c:	4b0b      	ldr	r3, [pc, #44]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f1e:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f20:	4b0a      	ldr	r3, [pc, #40]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f22:	685a      	ldr	r2, [r3, #4]
    1f24:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f28:	421a      	tst	r2, r3
    1f2a:	d1f9      	bne.n	1f20 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1f2c:	f010 0f08 	tst.w	r0, #8
    1f30:	d008      	beq.n	1f44 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f32:	4a09      	ldr	r2, [pc, #36]	; (1f58 <_gclk_init_generators_by_fref+0x74>)
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f36:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f38:	4b04      	ldr	r3, [pc, #16]	; (1f4c <_gclk_init_generators_by_fref+0x68>)
    1f3a:	685a      	ldr	r2, [r3, #4]
    1f3c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1f40:	421a      	tst	r2, r3
    1f42:	d1f9      	bne.n	1f38 <_gclk_init_generators_by_fref+0x54>
    1f44:	4770      	bx	lr
    1f46:	bf00      	nop
    1f48:	00020107 	.word	0x00020107
    1f4c:	40001c00 	.word	0x40001c00
    1f50:	00020b07 	.word	0x00020b07
    1f54:	00010105 	.word	0x00010105
    1f58:	00100106 	.word	0x00100106

00001f5c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1f5c:	2201      	movs	r2, #1
    1f5e:	4b01      	ldr	r3, [pc, #4]	; (1f64 <_mclk_init+0x8>)
    1f60:	715a      	strb	r2, [r3, #5]
    1f62:	4770      	bx	lr
    1f64:	40000800 	.word	0x40000800

00001f68 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1f68:	4b06      	ldr	r3, [pc, #24]	; (1f84 <_osc32kctrl_init_sources+0x1c>)
    1f6a:	f242 228e 	movw	r2, #8846	; 0x228e
    1f6e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1f70:	2200      	movs	r2, #0
    1f72:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1f74:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1f76:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1f78:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1f7c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1f7e:	2201      	movs	r2, #1
    1f80:	741a      	strb	r2, [r3, #16]
    1f82:	4770      	bx	lr
    1f84:	40001400 	.word	0x40001400

00001f88 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1f88:	4770      	bx	lr
	...

00001f8c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1f8c:	4a49      	ldr	r2, [pc, #292]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    1f8e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1f90:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1f94:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1f98:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f9a:	4b46      	ldr	r3, [pc, #280]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    1f9c:	685a      	ldr	r2, [r3, #4]
    1f9e:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1fa2:	421a      	tst	r2, r3
    1fa4:	d1f9      	bne.n	1f9a <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1fa6:	4b43      	ldr	r3, [pc, #268]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    1fa8:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1faa:	f013 0f04 	tst.w	r3, #4
    1fae:	d1fa      	bne.n	1fa6 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1fb0:	4b41      	ldr	r3, [pc, #260]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fb2:	2200      	movs	r2, #0
    1fb4:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1fb6:	2142      	movs	r1, #66	; 0x42
    1fb8:	4a3e      	ldr	r2, [pc, #248]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    1fba:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1fbe:	4a3f      	ldr	r2, [pc, #252]	; (20bc <_oscctrl_init_referenced_generators+0x130>)
    1fc0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fc2:	4b3d      	ldr	r3, [pc, #244]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1fc8:	f013 0f10 	tst.w	r3, #16
    1fcc:	d1f9      	bne.n	1fc2 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1fce:	2200      	movs	r2, #0
    1fd0:	4b39      	ldr	r3, [pc, #228]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fd2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fd6:	4b38      	ldr	r3, [pc, #224]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1fdc:	f013 0f04 	tst.w	r3, #4
    1fe0:	d1f9      	bne.n	1fd6 <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1fe2:	2202      	movs	r2, #2
    1fe4:	4b34      	ldr	r3, [pc, #208]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fe6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fe8:	4b33      	ldr	r3, [pc, #204]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1fee:	f013 0f02 	tst.w	r3, #2
    1ff2:	d1f9      	bne.n	1fe8 <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1ff4:	4b30      	ldr	r3, [pc, #192]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1ff8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ffa:	4b2f      	ldr	r3, [pc, #188]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    1ffc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2000:	f013 0f08 	tst.w	r3, #8
    2004:	d1f9      	bne.n	1ffa <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2006:	2281      	movs	r2, #129	; 0x81
    2008:	4b2b      	ldr	r3, [pc, #172]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    200a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    200e:	4b2a      	ldr	r3, [pc, #168]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2010:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2014:	f013 0f04 	tst.w	r3, #4
    2018:	d1f9      	bne.n	200e <_oscctrl_init_referenced_generators+0x82>
    201a:	2243      	movs	r2, #67	; 0x43
    201c:	4b25      	ldr	r3, [pc, #148]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    201e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2022:	2227      	movs	r2, #39	; 0x27
    2024:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2028:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    202a:	4b23      	ldr	r3, [pc, #140]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    202e:	f013 0f06 	tst.w	r3, #6
    2032:	d1fa      	bne.n	202a <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2034:	4b20      	ldr	r3, [pc, #128]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2036:	2200      	movs	r2, #0
    2038:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    203a:	2202      	movs	r2, #2
    203c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2040:	4b1d      	ldr	r3, [pc, #116]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2044:	f013 0f02 	tst.w	r3, #2
    2048:	d1fa      	bne.n	2040 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    204a:	4b1b      	ldr	r3, [pc, #108]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    204c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2050:	f013 0f01 	tst.w	r3, #1
    2054:	d027      	beq.n	20a6 <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2056:	4b18      	ldr	r3, [pc, #96]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2058:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    205a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    205e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2062:	d1f8      	bne.n	2056 <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2064:	4b14      	ldr	r3, [pc, #80]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    2068:	f013 0f01 	tst.w	r3, #1
    206c:	d104      	bne.n	2078 <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    206e:	4b12      	ldr	r3, [pc, #72]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    2070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2072:	f013 0f02 	tst.w	r3, #2
    2076:	d0f5      	beq.n	2064 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2078:	4b0e      	ldr	r3, [pc, #56]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    207a:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    207c:	2b00      	cmp	r3, #0
    207e:	d1fb      	bne.n	2078 <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2080:	4a0c      	ldr	r2, [pc, #48]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    2082:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2084:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2088:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    208c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    208e:	4b09      	ldr	r3, [pc, #36]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    2090:	685a      	ldr	r2, [r3, #4]
    2092:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2096:	421a      	tst	r2, r3
    2098:	d1f9      	bne.n	208e <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    209a:	4b06      	ldr	r3, [pc, #24]	; (20b4 <_oscctrl_init_referenced_generators+0x128>)
    209c:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    209e:	f013 0f04 	tst.w	r3, #4
    20a2:	d1fa      	bne.n	209a <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    20a4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    20a6:	4b04      	ldr	r3, [pc, #16]	; (20b8 <_oscctrl_init_referenced_generators+0x12c>)
    20a8:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    20aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    20ae:	d0fa      	beq.n	20a6 <_oscctrl_init_referenced_generators+0x11a>
    20b0:	e7d8      	b.n	2064 <_oscctrl_init_referenced_generators+0xd8>
    20b2:	bf00      	nop
    20b4:	40001c00 	.word	0x40001c00
    20b8:	40001000 	.word	0x40001000
    20bc:	7c7f05b9 	.word	0x7c7f05b9

000020c0 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    20c0:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    20c2:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    20c4:	6803      	ldr	r3, [r0, #0]
    20c6:	2100      	movs	r1, #0
    20c8:	4798      	blx	r3
    20ca:	bd08      	pop	{r3, pc}

000020cc <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    20cc:	b538      	push	{r3, r4, r5, lr}
    20ce:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    20d0:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    20d2:	4b07      	ldr	r3, [pc, #28]	; (20f0 <_camera_async_init+0x24>)
    20d4:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    20d6:	4b07      	ldr	r3, [pc, #28]	; (20f4 <_camera_async_init+0x28>)
    20d8:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    20da:	4d07      	ldr	r5, [pc, #28]	; (20f8 <_camera_async_init+0x2c>)
    20dc:	2100      	movs	r1, #0
    20de:	4628      	mov	r0, r5
    20e0:	4b06      	ldr	r3, [pc, #24]	; (20fc <_camera_async_init+0x30>)
    20e2:	4798      	blx	r3
	resource->back                 = device;
    20e4:	682b      	ldr	r3, [r5, #0]
    20e6:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    20e8:	4a05      	ldr	r2, [pc, #20]	; (2100 <_camera_async_init+0x34>)
    20ea:	601a      	str	r2, [r3, #0]
    20ec:	bd38      	pop	{r3, r4, r5, pc}
    20ee:	bf00      	nop
    20f0:	c0000020 	.word	0xc0000020
    20f4:	20000214 	.word	0x20000214
    20f8:	20000b60 	.word	0x20000b60
    20fc:	00001c41 	.word	0x00001c41
    2100:	000020c1 	.word	0x000020c1

00002104 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    2104:	b500      	push	{lr}
    2106:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    2108:	4b08      	ldr	r3, [pc, #32]	; (212c <PCC_Handler+0x28>)
    210a:	6818      	ldr	r0, [r3, #0]
    210c:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    210e:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    2110:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    2112:	2201      	movs	r2, #1
    2114:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    2116:	9b01      	ldr	r3, [sp, #4]
    2118:	f013 0f01 	tst.w	r3, #1
    211c:	d003      	beq.n	2126 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    211e:	6803      	ldr	r3, [r0, #0]
    2120:	b10b      	cbz	r3, 2126 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    2122:	2100      	movs	r1, #0
    2124:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    2126:	b003      	add	sp, #12
    2128:	f85d fb04 	ldr.w	pc, [sp], #4
    212c:	20000214 	.word	0x20000214

00002130 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2130:	b500      	push	{lr}
    2132:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2134:	4b0d      	ldr	r3, [pc, #52]	; (216c <RAMECC_Handler+0x3c>)
    2136:	789b      	ldrb	r3, [r3, #2]
    2138:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    213a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    213c:	9b01      	ldr	r3, [sp, #4]
    213e:	f013 0f02 	tst.w	r3, #2
    2142:	d006      	beq.n	2152 <RAMECC_Handler+0x22>
    2144:	4b0a      	ldr	r3, [pc, #40]	; (2170 <RAMECC_Handler+0x40>)
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	b11b      	cbz	r3, 2152 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    214a:	4a08      	ldr	r2, [pc, #32]	; (216c <RAMECC_Handler+0x3c>)
    214c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    214e:	4798      	blx	r3
    2150:	e009      	b.n	2166 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2152:	9b01      	ldr	r3, [sp, #4]
    2154:	f013 0f01 	tst.w	r3, #1
    2158:	d005      	beq.n	2166 <RAMECC_Handler+0x36>
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <RAMECC_Handler+0x40>)
    215c:	685b      	ldr	r3, [r3, #4]
    215e:	b113      	cbz	r3, 2166 <RAMECC_Handler+0x36>
    2160:	4a02      	ldr	r2, [pc, #8]	; (216c <RAMECC_Handler+0x3c>)
    2162:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2164:	4798      	blx	r3
	} else {
		return;
	}
}
    2166:	b003      	add	sp, #12
    2168:	f85d fb04 	ldr.w	pc, [sp], #4
    216c:	41020000 	.word	0x41020000
    2170:	20000b64 	.word	0x20000b64

00002174 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    2174:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    2176:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2178:	f013 0f04 	tst.w	r3, #4
    217c:	d009      	beq.n	2192 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    217e:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2180:	f014 0f03 	tst.w	r4, #3
    2184:	d1fb      	bne.n	217e <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2186:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2188:	b2a4      	uxth	r4, r4
    218a:	f024 0404 	bic.w	r4, r4, #4
    218e:	b2a4      	uxth	r4, r4
    2190:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2192:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2194:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    2198:	2c00      	cmp	r4, #0
    219a:	d135      	bne.n	2208 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    219c:	4b22      	ldr	r3, [pc, #136]	; (2228 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    219e:	2a00      	cmp	r2, #0
    21a0:	d134      	bne.n	220c <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    21a2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    21a4:	b292      	uxth	r2, r2
    21a6:	f022 0220 	bic.w	r2, r2, #32
    21aa:	b292      	uxth	r2, r2
    21ac:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    21ae:	fbb3 f1f1 	udiv	r1, r3, r1
    21b2:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    21b4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    21b8:	f013 0f04 	tst.w	r3, #4
    21bc:	d001      	beq.n	21c2 <_mci_set_speed+0x4e>
    21be:	b901      	cbnz	r1, 21c2 <_mci_set_speed+0x4e>
		div = 1;
    21c0:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    21c2:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    21c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    21c6:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    21c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    21cc:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    21ce:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    21d0:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    21d4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    21d6:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    21d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    21dc:	0189      	lsls	r1, r1, #6
    21de:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    21e2:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    21e4:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    21e6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    21e8:	b29b      	uxth	r3, r3
    21ea:	f043 0301 	orr.w	r3, r3, #1
    21ee:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    21f0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    21f2:	f013 0f02 	tst.w	r3, #2
    21f6:	d0fb      	beq.n	21f0 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    21f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    21fa:	b29b      	uxth	r3, r3
    21fc:	f043 0304 	orr.w	r3, r3, #4
    2200:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    2202:	f85d 4b04 	ldr.w	r4, [sp], #4
    2206:	4770      	bx	lr
		clkbase = clkbase / 2;
    2208:	4b08      	ldr	r3, [pc, #32]	; (222c <_mci_set_speed+0xb8>)
    220a:	e7c8      	b.n	219e <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    220c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    220e:	b292      	uxth	r2, r2
    2210:	f042 0220 	orr.w	r2, r2, #32
    2214:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    2216:	fb04 3303 	mla	r3, r4, r3, r3
    221a:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    221e:	2900      	cmp	r1, #0
    2220:	d0c8      	beq.n	21b4 <_mci_set_speed+0x40>
			div = div - 1;
    2222:	3901      	subs	r1, #1
    2224:	e7c6      	b.n	21b4 <_mci_set_speed+0x40>
    2226:	bf00      	nop
    2228:	0393a000 	.word	0x0393a000
    222c:	01c9d000 	.word	0x01c9d000

00002230 <_mci_reset>:
{
    2230:	b510      	push	{r4, lr}
	ASSERT(hw);
    2232:	4604      	mov	r4, r0
    2234:	2234      	movs	r2, #52	; 0x34
    2236:	4906      	ldr	r1, [pc, #24]	; (2250 <_mci_reset+0x20>)
    2238:	3000      	adds	r0, #0
    223a:	bf18      	it	ne
    223c:	2001      	movne	r0, #1
    223e:	4b05      	ldr	r3, [pc, #20]	; (2254 <_mci_reset+0x24>)
    2240:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2242:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2246:	f043 0302 	orr.w	r3, r3, #2
    224a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    224e:	bd10      	pop	{r4, pc}
    2250:	0000533c 	.word	0x0000533c
    2254:	00001671 	.word	0x00001671

00002258 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    2258:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    225a:	4604      	mov	r4, r0
    225c:	227f      	movs	r2, #127	; 0x7f
    225e:	490b      	ldr	r1, [pc, #44]	; (228c <_mci_wait_busy+0x34>)
    2260:	3000      	adds	r0, #0
    2262:	bf18      	it	ne
    2264:	2001      	movne	r0, #1
    2266:	4b0a      	ldr	r3, [pc, #40]	; (2290 <_mci_wait_busy+0x38>)
    2268:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    226a:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    226e:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    2270:	1e59      	subs	r1, r3, #1
    2272:	b12b      	cbz	r3, 2280 <_mci_wait_busy+0x28>
    2274:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2276:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    227a:	d0f8      	beq.n	226e <_mci_wait_busy+0x16>
	return true;
    227c:	2001      	movs	r0, #1
}
    227e:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    2280:	4620      	mov	r0, r4
    2282:	4b04      	ldr	r3, [pc, #16]	; (2294 <_mci_wait_busy+0x3c>)
    2284:	4798      	blx	r3
			return false;
    2286:	2000      	movs	r0, #0
    2288:	bd10      	pop	{r4, pc}
    228a:	bf00      	nop
    228c:	0000533c 	.word	0x0000533c
    2290:	00001671 	.word	0x00001671
    2294:	00002231 	.word	0x00002231

00002298 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    229a:	460f      	mov	r7, r1
    229c:	4615      	mov	r5, r2
    229e:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    22a0:	4604      	mov	r4, r0
    22a2:	2299      	movs	r2, #153	; 0x99
    22a4:	4934      	ldr	r1, [pc, #208]	; (2378 <_mci_send_cmd_execute+0xe0>)
    22a6:	3000      	adds	r0, #0
    22a8:	bf18      	it	ne
    22aa:	2001      	movne	r0, #1
    22ac:	4b33      	ldr	r3, [pc, #204]	; (237c <_mci_send_cmd_execute+0xe4>)
    22ae:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    22b0:	0229      	lsls	r1, r5, #8
    22b2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    22b6:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    22b8:	f415 7f80 	tst.w	r5, #256	; 0x100
    22bc:	d004      	beq.n	22c8 <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    22be:	f415 6f00 	tst.w	r5, #2048	; 0x800
    22c2:	d00e      	beq.n	22e2 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    22c4:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    22c8:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    22cc:	d012      	beq.n	22f4 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    22ce:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    22d2:	f043 0310 	orr.w	r3, r3, #16
    22d6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    22da:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    22dc:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    22de:	81e3      	strh	r3, [r4, #14]
    22e0:	e017      	b.n	2312 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    22e2:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    22e6:	d002      	beq.n	22ee <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    22e8:	f041 0103 	orr.w	r1, r1, #3
    22ec:	e7ec      	b.n	22c8 <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    22ee:	f041 0102 	orr.w	r1, r1, #2
    22f2:	e7e9      	b.n	22c8 <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    22f4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    22f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    22fc:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    2300:	e7eb      	b.n	22da <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    2302:	f240 227f 	movw	r2, #639	; 0x27f
    2306:	4213      	tst	r3, r2
    2308:	d118      	bne.n	233c <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    230a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    230c:	f013 0f01 	tst.w	r3, #1
    2310:	d120      	bne.n	2354 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2312:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2314:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    2316:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    231a:	d0f2      	beq.n	2302 <_mci_send_cmd_execute+0x6a>
			if (sr
    231c:	f240 225d 	movw	r2, #605	; 0x25d
    2320:	4213      	tst	r3, r2
    2322:	d0f2      	beq.n	230a <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    2324:	4620      	mov	r0, r4
    2326:	4b16      	ldr	r3, [pc, #88]	; (2380 <_mci_send_cmd_execute+0xe8>)
    2328:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    232a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    232c:	b29b      	uxth	r3, r3
    232e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2332:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2336:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2338:	2000      	movs	r0, #0
    233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    233c:	4620      	mov	r0, r4
    233e:	4b10      	ldr	r3, [pc, #64]	; (2380 <_mci_send_cmd_execute+0xe8>)
    2340:	4798      	blx	r3
    2342:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2344:	b29b      	uxth	r3, r3
    2346:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    234a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    234e:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2350:	2000      	movs	r0, #0
    2352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2354:	f011 0f20 	tst.w	r1, #32
    2358:	d104      	bne.n	2364 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    235a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    235c:	b29b      	uxth	r3, r3
    235e:	f043 0301 	orr.w	r3, r3, #1
    2362:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2364:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2368:	d101      	bne.n	236e <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    236a:	2001      	movs	r0, #1
}
    236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    236e:	4620      	mov	r0, r4
    2370:	4b04      	ldr	r3, [pc, #16]	; (2384 <_mci_send_cmd_execute+0xec>)
    2372:	4798      	blx	r3
    2374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2376:	bf00      	nop
    2378:	0000533c 	.word	0x0000533c
    237c:	00001671 	.word	0x00001671
    2380:	00002231 	.word	0x00002231
    2384:	00002259 	.word	0x00002259

00002388 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2388:	b538      	push	{r3, r4, r5, lr}
    238a:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    238c:	4605      	mov	r5, r0
    238e:	b348      	cbz	r0, 23e4 <_mci_sync_init+0x5c>
    2390:	b331      	cbz	r1, 23e0 <_mci_sync_init+0x58>
    2392:	2001      	movs	r0, #1
    2394:	22d8      	movs	r2, #216	; 0xd8
    2396:	4914      	ldr	r1, [pc, #80]	; (23e8 <_mci_sync_init+0x60>)
    2398:	4b14      	ldr	r3, [pc, #80]	; (23ec <_mci_sync_init+0x64>)
    239a:	4798      	blx	r3

	mci_dev->hw = hw;
    239c:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    239e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    23a2:	f043 0301 	orr.w	r3, r3, #1
    23a6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    23aa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    23ae:	f013 0f01 	tst.w	r3, #1
    23b2:	d1fa      	bne.n	23aa <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    23b4:	230e      	movs	r3, #14
    23b6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    23ba:	230f      	movs	r3, #15
    23bc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    23c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    23c2:	b29b      	uxth	r3, r3
    23c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    23c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    23cc:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    23ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    23d0:	b29b      	uxth	r3, r3
    23d2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    23d6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    23da:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    23dc:	2000      	movs	r0, #0
    23de:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    23e0:	2000      	movs	r0, #0
    23e2:	e7d7      	b.n	2394 <_mci_sync_init+0xc>
    23e4:	2000      	movs	r0, #0
    23e6:	e7d5      	b.n	2394 <_mci_sync_init+0xc>
    23e8:	0000533c 	.word	0x0000533c
    23ec:	00001671 	.word	0x00001671

000023f0 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    23f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23f2:	4616      	mov	r6, r2
    23f4:	461d      	mov	r5, r3
    23f6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    23fa:	4604      	mov	r4, r0
    23fc:	b1e0      	cbz	r0, 2438 <_mci_sync_select_device+0x48>
    23fe:	6803      	ldr	r3, [r0, #0]
    2400:	b1c3      	cbz	r3, 2434 <_mci_sync_select_device+0x44>
    2402:	2001      	movs	r0, #1
    2404:	f44f 7280 	mov.w	r2, #256	; 0x100
    2408:	491b      	ldr	r1, [pc, #108]	; (2478 <_mci_sync_select_device+0x88>)
    240a:	4b1c      	ldr	r3, [pc, #112]	; (247c <_mci_sync_select_device+0x8c>)
    240c:	4798      	blx	r3
	hw = mci_dev->hw;
    240e:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    2410:	b1a7      	cbz	r7, 243c <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2412:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2416:	f043 0304 	orr.w	r3, r3, #4
    241a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    241e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2420:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2424:	d011      	beq.n	244a <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2426:	2d01      	cmp	r5, #1
    2428:	d015      	beq.n	2456 <_mci_sync_select_device+0x66>
    242a:	2d04      	cmp	r5, #4
    242c:	d01b      	beq.n	2466 <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    242e:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2434:	2000      	movs	r0, #0
    2436:	e7e5      	b.n	2404 <_mci_sync_select_device+0x14>
    2438:	2000      	movs	r0, #0
    243a:	e7e3      	b.n	2404 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    243c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2440:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2444:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2448:	e7e9      	b.n	241e <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    244a:	2200      	movs	r2, #0
    244c:	4631      	mov	r1, r6
    244e:	4620      	mov	r0, r4
    2450:	4b0b      	ldr	r3, [pc, #44]	; (2480 <_mci_sync_select_device+0x90>)
    2452:	4798      	blx	r3
    2454:	e7e7      	b.n	2426 <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2456:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    245a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    245e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    2462:	2000      	movs	r0, #0
    2464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2466:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    246a:	f043 0302 	orr.w	r3, r3, #2
    246e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2472:	2000      	movs	r0, #0
    2474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2476:	bf00      	nop
    2478:	0000533c 	.word	0x0000533c
    247c:	00001671 	.word	0x00001671
    2480:	00002175 	.word	0x00002175

00002484 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2484:	2000      	movs	r0, #0
    2486:	4770      	bx	lr

00002488 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2488:	b909      	cbnz	r1, 248e <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    248a:	2004      	movs	r0, #4
    248c:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    248e:	2000      	movs	r0, #0
	}
}
    2490:	4770      	bx	lr

00002492 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2492:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2494:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2496:	f3c0 5040 	ubfx	r0, r0, #21, #1
    249a:	4770      	bx	lr

0000249c <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    249c:	b500      	push	{lr}
    249e:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    24a0:	f240 1249 	movw	r2, #329	; 0x149
    24a4:	4909      	ldr	r1, [pc, #36]	; (24cc <_mci_sync_send_clock+0x30>)
    24a6:	3000      	adds	r0, #0
    24a8:	bf18      	it	ne
    24aa:	2001      	movne	r0, #1
    24ac:	4b08      	ldr	r3, [pc, #32]	; (24d0 <_mci_sync_send_clock+0x34>)
    24ae:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    24b0:	2300      	movs	r3, #0
    24b2:	9301      	str	r3, [sp, #4]
    24b4:	e002      	b.n	24bc <_mci_sync_send_clock+0x20>
    24b6:	9b01      	ldr	r3, [sp, #4]
    24b8:	3301      	adds	r3, #1
    24ba:	9301      	str	r3, [sp, #4]
    24bc:	9a01      	ldr	r2, [sp, #4]
    24be:	f241 3387 	movw	r3, #4999	; 0x1387
    24c2:	429a      	cmp	r2, r3
    24c4:	d9f7      	bls.n	24b6 <_mci_sync_send_clock+0x1a>
		;
}
    24c6:	b003      	add	sp, #12
    24c8:	f85d fb04 	ldr.w	pc, [sp], #4
    24cc:	0000533c 	.word	0x0000533c
    24d0:	00001671 	.word	0x00001671

000024d4 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    24d4:	b570      	push	{r4, r5, r6, lr}
    24d6:	460d      	mov	r5, r1
    24d8:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    24da:	4604      	mov	r4, r0
    24dc:	b180      	cbz	r0, 2500 <_mci_sync_send_cmd+0x2c>
    24de:	6803      	ldr	r3, [r0, #0]
    24e0:	b163      	cbz	r3, 24fc <_mci_sync_send_cmd+0x28>
    24e2:	2001      	movs	r0, #1
    24e4:	f44f 72ab 	mov.w	r2, #342	; 0x156
    24e8:	490d      	ldr	r1, [pc, #52]	; (2520 <_mci_sync_send_cmd+0x4c>)
    24ea:	4b0e      	ldr	r3, [pc, #56]	; (2524 <_mci_sync_send_cmd+0x50>)
    24ec:	4798      	blx	r3
	hw = mci_dev->hw;
    24ee:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    24f0:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    24f2:	f013 0f01 	tst.w	r3, #1
    24f6:	d005      	beq.n	2504 <_mci_sync_send_cmd+0x30>
		return false;
    24f8:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    24fa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    24fc:	2000      	movs	r0, #0
    24fe:	e7f1      	b.n	24e4 <_mci_sync_send_cmd+0x10>
    2500:	2000      	movs	r0, #0
    2502:	e7ef      	b.n	24e4 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2504:	8983      	ldrh	r3, [r0, #12]
    2506:	b29b      	uxth	r3, r3
    2508:	f023 0301 	bic.w	r3, r3, #1
    250c:	b29b      	uxth	r3, r3
    250e:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2510:	2100      	movs	r1, #0
    2512:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2514:	4633      	mov	r3, r6
    2516:	462a      	mov	r2, r5
    2518:	4c03      	ldr	r4, [pc, #12]	; (2528 <_mci_sync_send_cmd+0x54>)
    251a:	47a0      	blx	r4
    251c:	bd70      	pop	{r4, r5, r6, pc}
    251e:	bf00      	nop
    2520:	0000533c 	.word	0x0000533c
    2524:	00001671 	.word	0x00001671
    2528:	00002299 	.word	0x00002299

0000252c <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    252c:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    252e:	4604      	mov	r4, r0
    2530:	b160      	cbz	r0, 254c <_mci_sync_get_response+0x20>
    2532:	6803      	ldr	r3, [r0, #0]
    2534:	b143      	cbz	r3, 2548 <_mci_sync_get_response+0x1c>
    2536:	2001      	movs	r0, #1
    2538:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    253c:	4904      	ldr	r1, [pc, #16]	; (2550 <_mci_sync_get_response+0x24>)
    253e:	4b05      	ldr	r3, [pc, #20]	; (2554 <_mci_sync_get_response+0x28>)
    2540:	4798      	blx	r3
	hw = mci_dev->hw;
    2542:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2544:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    2546:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2548:	2000      	movs	r0, #0
    254a:	e7f5      	b.n	2538 <_mci_sync_get_response+0xc>
    254c:	2000      	movs	r0, #0
    254e:	e7f3      	b.n	2538 <_mci_sync_get_response+0xc>
    2550:	0000533c 	.word	0x0000533c
    2554:	00001671 	.word	0x00001671

00002558 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    2558:	b538      	push	{r3, r4, r5, lr}
    255a:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    255c:	4605      	mov	r5, r0
    255e:	b160      	cbz	r0, 257a <_mci_sync_get_response_128+0x22>
    2560:	6803      	ldr	r3, [r0, #0]
    2562:	b143      	cbz	r3, 2576 <_mci_sync_get_response_128+0x1e>
    2564:	2001      	movs	r0, #1
    2566:	f240 1277 	movw	r2, #375	; 0x177
    256a:	490f      	ldr	r1, [pc, #60]	; (25a8 <_mci_sync_get_response_128+0x50>)
    256c:	4b0f      	ldr	r3, [pc, #60]	; (25ac <_mci_sync_get_response_128+0x54>)
    256e:	4798      	blx	r3
	hw = mci_dev->hw;
    2570:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    2572:	2103      	movs	r1, #3
    2574:	e00b      	b.n	258e <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    2576:	2000      	movs	r0, #0
    2578:	e7f5      	b.n	2566 <_mci_sync_get_response_128+0xe>
    257a:	2000      	movs	r0, #0
    257c:	e7f3      	b.n	2566 <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    257e:	0c11      	lsrs	r1, r2, #16
    2580:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2582:	0a11      	lsrs	r1, r2, #8
    2584:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    2586:	70a2      	strb	r2, [r4, #2]
		response++;
    2588:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    258a:	3b01      	subs	r3, #1
    258c:	b259      	sxtb	r1, r3
    258e:	2900      	cmp	r1, #0
    2590:	db09      	blt.n	25a6 <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    2592:	b2cb      	uxtb	r3, r1
    2594:	1d1a      	adds	r2, r3, #4
    2596:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    259a:	2903      	cmp	r1, #3
    259c:	d0ef      	beq.n	257e <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    259e:	0e11      	lsrs	r1, r2, #24
    25a0:	f804 1b01 	strb.w	r1, [r4], #1
    25a4:	e7eb      	b.n	257e <_mci_sync_get_response_128+0x26>
	}
}
    25a6:	bd38      	pop	{r3, r4, r5, pc}
    25a8:	0000533c 	.word	0x0000533c
    25ac:	00001671 	.word	0x00001671

000025b0 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    25b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25b4:	460d      	mov	r5, r1
    25b6:	4690      	mov	r8, r2
    25b8:	461f      	mov	r7, r3
    25ba:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    25be:	4604      	mov	r4, r0
    25c0:	2800      	cmp	r0, #0
    25c2:	d031      	beq.n	2628 <_mci_sync_adtc_start+0x78>
    25c4:	6803      	ldr	r3, [r0, #0]
    25c6:	b36b      	cbz	r3, 2624 <_mci_sync_adtc_start+0x74>
    25c8:	2001      	movs	r0, #1
    25ca:	f240 1293 	movw	r2, #403	; 0x193
    25ce:	4921      	ldr	r1, [pc, #132]	; (2654 <_mci_sync_adtc_start+0xa4>)
    25d0:	4b21      	ldr	r3, [pc, #132]	; (2658 <_mci_sync_adtc_start+0xa8>)
    25d2:	4798      	blx	r3
	hw = mci_dev->hw;
    25d4:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    25d6:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    25d8:	f013 0f01 	tst.w	r3, #1
    25dc:	d131      	bne.n	2642 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    25de:	6a43      	ldr	r3, [r0, #36]	; 0x24
    25e0:	f013 0f02 	tst.w	r3, #2
    25e4:	d130      	bne.n	2648 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    25e6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    25ea:	d01f      	beq.n	262c <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    25ec:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    25ee:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    25f2:	d104      	bne.n	25fe <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    25f4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    25f8:	d01a      	beq.n	2630 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    25fa:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    25fe:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    2600:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    2602:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    2606:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    2608:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    260a:	2200      	movs	r2, #0
    260c:	2300      	movs	r3, #0
    260e:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    2612:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    2614:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    2616:	4643      	mov	r3, r8
    2618:	462a      	mov	r2, r5
    261a:	2120      	movs	r1, #32
    261c:	4c0f      	ldr	r4, [pc, #60]	; (265c <_mci_sync_adtc_start+0xac>)
    261e:	47a0      	blx	r4
    2620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2624:	2000      	movs	r0, #0
    2626:	e7d0      	b.n	25ca <_mci_sync_adtc_start+0x1a>
    2628:	2000      	movs	r0, #0
    262a:	e7ce      	b.n	25ca <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    262c:	2310      	movs	r3, #16
    262e:	e7de      	b.n	25ee <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2630:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2634:	d1e3      	bne.n	25fe <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    2636:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    263a:	d008      	beq.n	264e <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    263c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2640:	e7dd      	b.n	25fe <_mci_sync_adtc_start+0x4e>
		return false;
    2642:	2000      	movs	r0, #0
    2644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2648:	2000      	movs	r0, #0
    264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    264e:	2000      	movs	r0, #0
}
    2650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2654:	0000533c 	.word	0x0000533c
    2658:	00001671 	.word	0x00001671
    265c:	00002299 	.word	0x00002299

00002660 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    2660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2664:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2666:	4605      	mov	r5, r0
    2668:	2800      	cmp	r0, #0
    266a:	d05d      	beq.n	2728 <_mci_sync_read_word+0xc8>
    266c:	6803      	ldr	r3, [r0, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	d058      	beq.n	2724 <_mci_sync_read_word+0xc4>
    2672:	2001      	movs	r0, #1
    2674:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
    2678:	4936      	ldr	r1, [pc, #216]	; (2754 <_mci_sync_read_word+0xf4>)
    267a:	4b37      	ldr	r3, [pc, #220]	; (2758 <_mci_sync_read_word+0xf8>)
    267c:	4798      	blx	r3
	hw = mci_dev->hw;
    267e:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2680:	8a2a      	ldrh	r2, [r5, #16]
    2682:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    2686:	fb08 f802 	mul.w	r8, r8, r2
    268a:	ea4f 79e8 	mov.w	r9, r8, asr #31
    268e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2692:	ebb8 0800 	subs.w	r8, r8, r0
    2696:	eb69 0901 	sbc.w	r9, r9, r1
    269a:	f1b9 0f00 	cmp.w	r9, #0
    269e:	bf08      	it	eq
    26a0:	f1b8 0f04 	cmpeq.w	r8, #4
    26a4:	d242      	bcs.n	272c <_mci_sync_read_word+0xcc>
    26a6:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    26aa:	b292      	uxth	r2, r2
    26ac:	2300      	movs	r3, #0
    26ae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2760 <_mci_sync_read_word+0x100>
    26b2:	47c0      	blx	r8
    26b4:	4313      	orrs	r3, r2
    26b6:	d10d      	bne.n	26d4 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    26b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    26ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
    26be:	2b00      	cmp	r3, #0
    26c0:	d136      	bne.n	2730 <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    26c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    26c4:	f013 0f20 	tst.w	r3, #32
    26c8:	d0f6      	beq.n	26b8 <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    26ca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26cc:	b29b      	uxth	r3, r3
    26ce:	f043 0320 	orr.w	r3, r3, #32
    26d2:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    26d4:	2e04      	cmp	r6, #4
    26d6:	d031      	beq.n	273c <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    26d8:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    26da:	1e72      	subs	r2, r6, #1
    26dc:	2a02      	cmp	r2, #2
    26de:	d801      	bhi.n	26e4 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    26e0:	b2db      	uxtb	r3, r3
    26e2:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    26e4:	b2f6      	uxtb	r6, r6
    26e6:	2700      	movs	r7, #0
    26e8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    26ec:	18b6      	adds	r6, r6, r2
    26ee:	415f      	adcs	r7, r3
    26f0:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    26f4:	8a2a      	ldrh	r2, [r5, #16]
    26f6:	8a68      	ldrh	r0, [r5, #18]
    26f8:	fba2 2300 	umull	r2, r3, r2, r0
    26fc:	429f      	cmp	r7, r3
    26fe:	bf08      	it	eq
    2700:	4296      	cmpeq	r6, r2
    2702:	d324      	bcc.n	274e <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    2704:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2706:	f003 0370 	and.w	r3, r3, #112	; 0x70
    270a:	b9d3      	cbnz	r3, 2742 <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    270c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    270e:	f013 0f02 	tst.w	r3, #2
    2712:	d0f7      	beq.n	2704 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2714:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2716:	b29b      	uxth	r3, r3
    2718:	f043 0302 	orr.w	r3, r3, #2
    271c:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    271e:	2001      	movs	r0, #1
    2720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2724:	2000      	movs	r0, #0
    2726:	e7a5      	b.n	2674 <_mci_sync_read_word+0x14>
    2728:	2000      	movs	r0, #0
    272a:	e7a3      	b.n	2674 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    272c:	2604      	movs	r6, #4
    272e:	e7bc      	b.n	26aa <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    2730:	4620      	mov	r0, r4
    2732:	4b0a      	ldr	r3, [pc, #40]	; (275c <_mci_sync_read_word+0xfc>)
    2734:	4798      	blx	r3
				return false;
    2736:	2000      	movs	r0, #0
    2738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    273c:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    273e:	603b      	str	r3, [r7, #0]
    2740:	e7d0      	b.n	26e4 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    2742:	4620      	mov	r0, r4
    2744:	4b05      	ldr	r3, [pc, #20]	; (275c <_mci_sync_read_word+0xfc>)
    2746:	4798      	blx	r3
			return false;
    2748:	2000      	movs	r0, #0
    274a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    274e:	2001      	movs	r0, #1
}
    2750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2754:	0000533c 	.word	0x0000533c
    2758:	00001671 	.word	0x00001671
    275c:	00002231 	.word	0x00002231
    2760:	00004d81 	.word	0x00004d81

00002764 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2766:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2768:	4605      	mov	r5, r0
    276a:	2800      	cmp	r0, #0
    276c:	d03f      	beq.n	27ee <_mci_sync_write_word+0x8a>
    276e:	6803      	ldr	r3, [r0, #0]
    2770:	2b00      	cmp	r3, #0
    2772:	d03a      	beq.n	27ea <_mci_sync_write_word+0x86>
    2774:	2001      	movs	r0, #1
    2776:	f240 220f 	movw	r2, #527	; 0x20f
    277a:	4924      	ldr	r1, [pc, #144]	; (280c <_mci_sync_write_word+0xa8>)
    277c:	4b24      	ldr	r3, [pc, #144]	; (2810 <_mci_sync_write_word+0xac>)
    277e:	4798      	blx	r3
	hw = mci_dev->hw;
    2780:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2782:	8a2a      	ldrh	r2, [r5, #16]
    2784:	2300      	movs	r3, #0
    2786:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    278a:	4e22      	ldr	r6, [pc, #136]	; (2814 <_mci_sync_write_word+0xb0>)
    278c:	47b0      	blx	r6
    278e:	4313      	orrs	r3, r2
    2790:	d10c      	bne.n	27ac <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2792:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2794:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2798:	bb5b      	cbnz	r3, 27f2 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    279a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    279c:	f013 0f10 	tst.w	r3, #16
    27a0:	d0f7      	beq.n	2792 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    27a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    27a4:	b29b      	uxth	r3, r3
    27a6:	f043 0310 	orr.w	r3, r3, #16
    27aa:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    27ac:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    27ae:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    27b2:	3204      	adds	r2, #4
    27b4:	f143 0300 	adc.w	r3, r3, #0
    27b8:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    27bc:	8a28      	ldrh	r0, [r5, #16]
    27be:	8a6e      	ldrh	r6, [r5, #18]
    27c0:	fba0 0106 	umull	r0, r1, r0, r6
    27c4:	428b      	cmp	r3, r1
    27c6:	bf08      	it	eq
    27c8:	4282      	cmpeq	r2, r0
    27ca:	d31c      	bcc.n	2806 <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    27cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    27ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
    27d2:	b99b      	cbnz	r3, 27fc <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    27d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    27d6:	f013 0f02 	tst.w	r3, #2
    27da:	d0f7      	beq.n	27cc <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    27dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    27de:	b29b      	uxth	r3, r3
    27e0:	f043 0302 	orr.w	r3, r3, #2
    27e4:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    27e6:	2001      	movs	r0, #1
    27e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    27ea:	2000      	movs	r0, #0
    27ec:	e7c3      	b.n	2776 <_mci_sync_write_word+0x12>
    27ee:	2000      	movs	r0, #0
    27f0:	e7c1      	b.n	2776 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    27f2:	4620      	mov	r0, r4
    27f4:	4b08      	ldr	r3, [pc, #32]	; (2818 <_mci_sync_write_word+0xb4>)
    27f6:	4798      	blx	r3
				return false;
    27f8:	2000      	movs	r0, #0
    27fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    27fc:	4620      	mov	r0, r4
    27fe:	4b06      	ldr	r3, [pc, #24]	; (2818 <_mci_sync_write_word+0xb4>)
    2800:	4798      	blx	r3
			return false;
    2802:	2000      	movs	r0, #0
    2804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    2806:	2001      	movs	r0, #1
}
    2808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280a:	bf00      	nop
    280c:	0000533c 	.word	0x0000533c
    2810:	00001671 	.word	0x00001671
    2814:	00004d81 	.word	0x00004d81
    2818:	00002231 	.word	0x00002231

0000281c <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2820:	460e      	mov	r6, r1
    2822:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2824:	4607      	mov	r7, r0
    2826:	b1f0      	cbz	r0, 2866 <_mci_sync_start_read_blocks+0x4a>
    2828:	6803      	ldr	r3, [r0, #0]
    282a:	b1d3      	cbz	r3, 2862 <_mci_sync_start_read_blocks+0x46>
    282c:	2001      	movs	r0, #1
    282e:	4d18      	ldr	r5, [pc, #96]	; (2890 <_mci_sync_start_read_blocks+0x74>)
    2830:	f240 223e 	movw	r2, #574	; 0x23e
    2834:	4629      	mov	r1, r5
    2836:	4c17      	ldr	r4, [pc, #92]	; (2894 <_mci_sync_start_read_blocks+0x78>)
    2838:	47a0      	blx	r4
	ASSERT(nb_block);
    283a:	f240 223f 	movw	r2, #575	; 0x23f
    283e:	4629      	mov	r1, r5
    2840:	f118 0000 	adds.w	r0, r8, #0
    2844:	bf18      	it	ne
    2846:	2001      	movne	r0, #1
    2848:	47a0      	blx	r4
	ASSERT(dst);
    284a:	f44f 7210 	mov.w	r2, #576	; 0x240
    284e:	4629      	mov	r1, r5
    2850:	1c30      	adds	r0, r6, #0
    2852:	bf18      	it	ne
    2854:	2001      	movne	r0, #1
    2856:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    2858:	8a3d      	ldrh	r5, [r7, #16]
    285a:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    285e:	2404      	movs	r4, #4

	while (nb_data) {
    2860:	e005      	b.n	286e <_mci_sync_start_read_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2862:	2000      	movs	r0, #0
    2864:	e7e3      	b.n	282e <_mci_sync_start_read_blocks+0x12>
    2866:	2000      	movs	r0, #0
    2868:	e7e1      	b.n	282e <_mci_sync_start_read_blocks+0x12>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    286a:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    286c:	4426      	add	r6, r4
	while (nb_data) {
    286e:	b165      	cbz	r5, 288a <_mci_sync_start_read_blocks+0x6e>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    2870:	4631      	mov	r1, r6
    2872:	4638      	mov	r0, r7
    2874:	4b08      	ldr	r3, [pc, #32]	; (2898 <_mci_sync_start_read_blocks+0x7c>)
    2876:	4798      	blx	r3
		if (nb_data < nbytes) {
    2878:	42a5      	cmp	r5, r4
    287a:	d2f6      	bcs.n	286a <_mci_sync_start_read_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    287c:	8a3b      	ldrh	r3, [r7, #16]
    287e:	fb93 f2f4 	sdiv	r2, r3, r4
    2882:	fb04 3412 	mls	r4, r4, r2, r3
    2886:	b2e4      	uxtb	r4, r4
    2888:	e7ef      	b.n	286a <_mci_sync_start_read_blocks+0x4e>
	}

	return true;
}
    288a:	2001      	movs	r0, #1
    288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2890:	0000533c 	.word	0x0000533c
    2894:	00001671 	.word	0x00001671
    2898:	00002661 	.word	0x00002661

0000289c <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a0:	460e      	mov	r6, r1
    28a2:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    28a4:	4607      	mov	r7, r0
    28a6:	b1f0      	cbz	r0, 28e6 <_mci_sync_start_write_blocks+0x4a>
    28a8:	6803      	ldr	r3, [r0, #0]
    28aa:	b1d3      	cbz	r3, 28e2 <_mci_sync_start_write_blocks+0x46>
    28ac:	2001      	movs	r0, #1
    28ae:	4d18      	ldr	r5, [pc, #96]	; (2910 <_mci_sync_start_write_blocks+0x74>)
    28b0:	f240 225a 	movw	r2, #602	; 0x25a
    28b4:	4629      	mov	r1, r5
    28b6:	4c17      	ldr	r4, [pc, #92]	; (2914 <_mci_sync_start_write_blocks+0x78>)
    28b8:	47a0      	blx	r4
	ASSERT(nb_block);
    28ba:	f240 225b 	movw	r2, #603	; 0x25b
    28be:	4629      	mov	r1, r5
    28c0:	f118 0000 	adds.w	r0, r8, #0
    28c4:	bf18      	it	ne
    28c6:	2001      	movne	r0, #1
    28c8:	47a0      	blx	r4
	ASSERT(src);
    28ca:	f44f 7217 	mov.w	r2, #604	; 0x25c
    28ce:	4629      	mov	r1, r5
    28d0:	1c30      	adds	r0, r6, #0
    28d2:	bf18      	it	ne
    28d4:	2001      	movne	r0, #1
    28d6:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    28d8:	8a3d      	ldrh	r5, [r7, #16]
    28da:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    28de:	2404      	movs	r4, #4

	while (nb_data) {
    28e0:	e005      	b.n	28ee <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    28e2:	2000      	movs	r0, #0
    28e4:	e7e3      	b.n	28ae <_mci_sync_start_write_blocks+0x12>
    28e6:	2000      	movs	r0, #0
    28e8:	e7e1      	b.n	28ae <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    28ea:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    28ec:	4426      	add	r6, r4
	while (nb_data) {
    28ee:	b165      	cbz	r5, 290a <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    28f0:	6831      	ldr	r1, [r6, #0]
    28f2:	4638      	mov	r0, r7
    28f4:	4b08      	ldr	r3, [pc, #32]	; (2918 <_mci_sync_start_write_blocks+0x7c>)
    28f6:	4798      	blx	r3
		if (nb_data < nbytes) {
    28f8:	42a5      	cmp	r5, r4
    28fa:	d2f6      	bcs.n	28ea <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    28fc:	8a3b      	ldrh	r3, [r7, #16]
    28fe:	fb93 f2f4 	sdiv	r2, r3, r4
    2902:	fb04 3412 	mls	r4, r4, r2, r3
    2906:	b2e4      	uxtb	r4, r4
    2908:	e7ef      	b.n	28ea <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    290a:	2001      	movs	r0, #1
    290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2910:	0000533c 	.word	0x0000533c
    2914:	00001671 	.word	0x00001671
    2918:	00002765 	.word	0x00002765

0000291c <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    291c:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    291e:	b158      	cbz	r0, 2938 <_mci_sync_wait_end_of_read_blocks+0x1c>
    2920:	6803      	ldr	r3, [r0, #0]
    2922:	b13b      	cbz	r3, 2934 <_mci_sync_wait_end_of_read_blocks+0x18>
    2924:	2001      	movs	r0, #1
    2926:	f240 2271 	movw	r2, #625	; 0x271
    292a:	4904      	ldr	r1, [pc, #16]	; (293c <_mci_sync_wait_end_of_read_blocks+0x20>)
    292c:	4b04      	ldr	r3, [pc, #16]	; (2940 <_mci_sync_wait_end_of_read_blocks+0x24>)
    292e:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    2930:	2001      	movs	r0, #1
    2932:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2934:	2000      	movs	r0, #0
    2936:	e7f6      	b.n	2926 <_mci_sync_wait_end_of_read_blocks+0xa>
    2938:	2000      	movs	r0, #0
    293a:	e7f4      	b.n	2926 <_mci_sync_wait_end_of_read_blocks+0xa>
    293c:	0000533c 	.word	0x0000533c
    2940:	00001671 	.word	0x00001671

00002944 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    2944:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    2946:	b158      	cbz	r0, 2960 <_mci_sync_wait_end_of_write_blocks+0x1c>
    2948:	6803      	ldr	r3, [r0, #0]
    294a:	b13b      	cbz	r3, 295c <_mci_sync_wait_end_of_write_blocks+0x18>
    294c:	2001      	movs	r0, #1
    294e:	f44f 721f 	mov.w	r2, #636	; 0x27c
    2952:	4904      	ldr	r1, [pc, #16]	; (2964 <_mci_sync_wait_end_of_write_blocks+0x20>)
    2954:	4b04      	ldr	r3, [pc, #16]	; (2968 <_mci_sync_wait_end_of_write_blocks+0x24>)
    2956:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    2958:	2001      	movs	r0, #1
    295a:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    295c:	2000      	movs	r0, #0
    295e:	e7f6      	b.n	294e <_mci_sync_wait_end_of_write_blocks+0xa>
    2960:	2000      	movs	r0, #0
    2962:	e7f4      	b.n	294e <_mci_sync_wait_end_of_write_blocks+0xa>
    2964:	0000533c 	.word	0x0000533c
    2968:	00001671 	.word	0x00001671

0000296c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    296c:	b470      	push	{r4, r5, r6}
    296e:	b087      	sub	sp, #28
    2970:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2972:	466c      	mov	r4, sp
    2974:	4d0c      	ldr	r5, [pc, #48]	; (29a8 <_sercom_get_hardware_index+0x3c>)
    2976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    297a:	e895 0003 	ldmia.w	r5, {r0, r1}
    297e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2982:	2000      	movs	r0, #0
    2984:	2805      	cmp	r0, #5
    2986:	d80a      	bhi.n	299e <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2988:	ab06      	add	r3, sp, #24
    298a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    298e:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2992:	42b3      	cmp	r3, r6
    2994:	d001      	beq.n	299a <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2996:	3001      	adds	r0, #1
    2998:	e7f4      	b.n	2984 <_sercom_get_hardware_index+0x18>
			return i;
    299a:	b2c0      	uxtb	r0, r0
    299c:	e000      	b.n	29a0 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    299e:	2000      	movs	r0, #0
}
    29a0:	b007      	add	sp, #28
    29a2:	bc70      	pop	{r4, r5, r6}
    29a4:	4770      	bx	lr
    29a6:	bf00      	nop
    29a8:	00005354 	.word	0x00005354

000029ac <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    29ac:	b510      	push	{r4, lr}
	void *hw = device->hw;
    29ae:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    29b0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    29b2:	f013 0f01 	tst.w	r3, #1
    29b6:	d003      	beq.n	29c0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    29b8:	7da3      	ldrb	r3, [r4, #22]
    29ba:	f013 0f01 	tst.w	r3, #1
    29be:	d112      	bne.n	29e6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    29c0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    29c2:	f013 0f02 	tst.w	r3, #2
    29c6:	d003      	beq.n	29d0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    29c8:	7da3      	ldrb	r3, [r4, #22]
    29ca:	f013 0f02 	tst.w	r3, #2
    29ce:	d10f      	bne.n	29f0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    29d0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    29d2:	f013 0f04 	tst.w	r3, #4
    29d6:	d015      	beq.n	2a04 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    29d8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    29da:	f003 0337 	and.w	r3, r3, #55	; 0x37
    29de:	b163      	cbz	r3, 29fa <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    29e0:	23ff      	movs	r3, #255	; 0xff
    29e2:	8363      	strh	r3, [r4, #26]
    29e4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    29e6:	2301      	movs	r3, #1
    29e8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    29ea:	6803      	ldr	r3, [r0, #0]
    29ec:	4798      	blx	r3
    29ee:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    29f0:	2302      	movs	r3, #2
    29f2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    29f4:	6883      	ldr	r3, [r0, #8]
    29f6:	4798      	blx	r3
    29f8:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    29fa:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    29fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    29fe:	b2c9      	uxtb	r1, r1
    2a00:	4798      	blx	r3
    2a02:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2a04:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2a06:	09db      	lsrs	r3, r3, #7
    2a08:	d100      	bne.n	2a0c <_sercom_usart_interrupt_handler+0x60>
    2a0a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2a0c:	2380      	movs	r3, #128	; 0x80
    2a0e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    2a10:	68c3      	ldr	r3, [r0, #12]
    2a12:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2a14:	8b63      	ldrh	r3, [r4, #26]
    2a16:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2a18:	8363      	strh	r3, [r4, #26]
    2a1a:	e7f6      	b.n	2a0a <_sercom_usart_interrupt_handler+0x5e>

00002a1c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2a1c:	4b03      	ldr	r3, [pc, #12]	; (2a2c <_sercom_init_irq_param+0x10>)
    2a1e:	4298      	cmp	r0, r3
    2a20:	d000      	beq.n	2a24 <_sercom_init_irq_param+0x8>
    2a22:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <_sercom_init_irq_param+0x14>)
    2a26:	6019      	str	r1, [r3, #0]
	}
}
    2a28:	e7fb      	b.n	2a22 <_sercom_init_irq_param+0x6>
    2a2a:	bf00      	nop
    2a2c:	43000400 	.word	0x43000400
    2a30:	20000218 	.word	0x20000218

00002a34 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2a34:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2a36:	4b04      	ldr	r3, [pc, #16]	; (2a48 <_sercom_get_irq_num+0x14>)
    2a38:	4798      	blx	r3
    2a3a:	0080      	lsls	r0, r0, #2
    2a3c:	b2c0      	uxtb	r0, r0
    2a3e:	302e      	adds	r0, #46	; 0x2e
}
    2a40:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2a44:	bd08      	pop	{r3, pc}
    2a46:	bf00      	nop
    2a48:	0000296d 	.word	0x0000296d

00002a4c <_get_sercom_index>:
{
    2a4c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2a4e:	4b0c      	ldr	r3, [pc, #48]	; (2a80 <_get_sercom_index+0x34>)
    2a50:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2a52:	2300      	movs	r3, #0
    2a54:	b143      	cbz	r3, 2a68 <_get_sercom_index+0x1c>
	ASSERT(false);
    2a56:	f240 226b 	movw	r2, #619	; 0x26b
    2a5a:	490a      	ldr	r1, [pc, #40]	; (2a84 <_get_sercom_index+0x38>)
    2a5c:	2000      	movs	r0, #0
    2a5e:	4b0a      	ldr	r3, [pc, #40]	; (2a88 <_get_sercom_index+0x3c>)
    2a60:	4798      	blx	r3
	return 0;
    2a62:	2300      	movs	r3, #0
}
    2a64:	4618      	mov	r0, r3
    2a66:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    2a68:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2a6c:	00d1      	lsls	r1, r2, #3
    2a6e:	4a07      	ldr	r2, [pc, #28]	; (2a8c <_get_sercom_index+0x40>)
    2a70:	440a      	add	r2, r1
    2a72:	7e12      	ldrb	r2, [r2, #24]
    2a74:	4290      	cmp	r0, r2
    2a76:	d0f5      	beq.n	2a64 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2a78:	3301      	adds	r3, #1
    2a7a:	b2db      	uxtb	r3, r3
    2a7c:	e7ea      	b.n	2a54 <_get_sercom_index+0x8>
    2a7e:	bf00      	nop
    2a80:	0000296d 	.word	0x0000296d
    2a84:	000053c0 	.word	0x000053c0
    2a88:	00001671 	.word	0x00001671
    2a8c:	00005354 	.word	0x00005354

00002a90 <_usart_init>:
{
    2a90:	b538      	push	{r3, r4, r5, lr}
    2a92:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2a94:	4b3c      	ldr	r3, [pc, #240]	; (2b88 <_usart_init+0xf8>)
    2a96:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2a98:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2a9a:	f013 0f01 	tst.w	r3, #1
    2a9e:	d122      	bne.n	2ae6 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2aa0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2aa4:	00da      	lsls	r2, r3, #3
    2aa6:	4b39      	ldr	r3, [pc, #228]	; (2b8c <_usart_init+0xfc>)
    2aa8:	4413      	add	r3, r2
    2aaa:	69da      	ldr	r2, [r3, #28]
    2aac:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ab0:	69e3      	ldr	r3, [r4, #28]
    2ab2:	f013 0f03 	tst.w	r3, #3
    2ab6:	d1fb      	bne.n	2ab0 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2ab8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2aba:	f013 0f02 	tst.w	r3, #2
    2abe:	d00b      	beq.n	2ad8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2ac0:	6823      	ldr	r3, [r4, #0]
    2ac2:	f023 0302 	bic.w	r3, r3, #2
    2ac6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ac8:	69e3      	ldr	r3, [r4, #28]
    2aca:	f013 0f03 	tst.w	r3, #3
    2ace:	d1fb      	bne.n	2ac8 <_usart_init+0x38>
    2ad0:	69e3      	ldr	r3, [r4, #28]
    2ad2:	f013 0f02 	tst.w	r3, #2
    2ad6:	d1fb      	bne.n	2ad0 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2ad8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2adc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ade:	69e3      	ldr	r3, [r4, #28]
    2ae0:	f013 0f03 	tst.w	r3, #3
    2ae4:	d1fb      	bne.n	2ade <_usart_init+0x4e>
    2ae6:	69e3      	ldr	r3, [r4, #28]
    2ae8:	f013 0f01 	tst.w	r3, #1
    2aec:	d1fb      	bne.n	2ae6 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2aee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2af2:	00da      	lsls	r2, r3, #3
    2af4:	4b25      	ldr	r3, [pc, #148]	; (2b8c <_usart_init+0xfc>)
    2af6:	4413      	add	r3, r2
    2af8:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2afa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2afc:	69e3      	ldr	r3, [r4, #28]
    2afe:	f013 0f03 	tst.w	r3, #3
    2b02:	d1fb      	bne.n	2afc <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2b04:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2b08:	00da      	lsls	r2, r3, #3
    2b0a:	4b20      	ldr	r3, [pc, #128]	; (2b8c <_usart_init+0xfc>)
    2b0c:	4413      	add	r3, r2
    2b0e:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2b10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b12:	69e3      	ldr	r3, [r4, #28]
    2b14:	f013 0f1f 	tst.w	r3, #31
    2b18:	d1fb      	bne.n	2b12 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2b1a:	0042      	lsls	r2, r0, #1
    2b1c:	4402      	add	r2, r0
    2b1e:	00d1      	lsls	r1, r2, #3
    2b20:	4b1a      	ldr	r3, [pc, #104]	; (2b8c <_usart_init+0xfc>)
    2b22:	440b      	add	r3, r1
    2b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2b26:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2b28:	69db      	ldr	r3, [r3, #28]
    2b2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2b2e:	d10a      	bne.n	2b46 <_usart_init+0xb6>
    2b30:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2b34:	d107      	bne.n	2b46 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2b36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2b3a:	00da      	lsls	r2, r3, #3
    2b3c:	4b13      	ldr	r3, [pc, #76]	; (2b8c <_usart_init+0xfc>)
    2b3e:	4413      	add	r3, r2
    2b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2b42:	81a3      	strh	r3, [r4, #12]
    2b44:	e00f      	b.n	2b66 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2b46:	0042      	lsls	r2, r0, #1
    2b48:	4402      	add	r2, r0
    2b4a:	00d1      	lsls	r1, r2, #3
    2b4c:	4b0f      	ldr	r3, [pc, #60]	; (2b8c <_usart_init+0xfc>)
    2b4e:	440b      	add	r3, r1
    2b50:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2b52:	89a2      	ldrh	r2, [r4, #12]
    2b54:	f361 020c 	bfi	r2, r1, #0, #13
    2b58:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2b5a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    2b5e:	89a3      	ldrh	r3, [r4, #12]
    2b60:	f362 334f 	bfi	r3, r2, #13, #3
    2b64:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2b66:	4a09      	ldr	r2, [pc, #36]	; (2b8c <_usart_init+0xfc>)
    2b68:	0043      	lsls	r3, r0, #1
    2b6a:	181d      	adds	r5, r3, r0
    2b6c:	00e9      	lsls	r1, r5, #3
    2b6e:	460d      	mov	r5, r1
    2b70:	4411      	add	r1, r2
    2b72:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    2b76:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2b78:	442a      	add	r2, r5
    2b7a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2b7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2b82:	2000      	movs	r0, #0
    2b84:	bd38      	pop	{r3, r4, r5, pc}
    2b86:	bf00      	nop
    2b88:	00002a4d 	.word	0x00002a4d
    2b8c:	00005354 	.word	0x00005354

00002b90 <_usart_async_init>:
{
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	460c      	mov	r4, r1
	ASSERT(device);
    2b94:	4606      	mov	r6, r0
    2b96:	22cb      	movs	r2, #203	; 0xcb
    2b98:	4918      	ldr	r1, [pc, #96]	; (2bfc <_usart_async_init+0x6c>)
    2b9a:	3000      	adds	r0, #0
    2b9c:	bf18      	it	ne
    2b9e:	2001      	movne	r0, #1
    2ba0:	4b17      	ldr	r3, [pc, #92]	; (2c00 <_usart_async_init+0x70>)
    2ba2:	4798      	blx	r3
	init_status = _usart_init(hw);
    2ba4:	4620      	mov	r0, r4
    2ba6:	4b17      	ldr	r3, [pc, #92]	; (2c04 <_usart_async_init+0x74>)
    2ba8:	4798      	blx	r3
	if (init_status) {
    2baa:	4605      	mov	r5, r0
    2bac:	b108      	cbz	r0, 2bb2 <_usart_async_init+0x22>
}
    2bae:	4628      	mov	r0, r5
    2bb0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2bb2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2bb4:	4631      	mov	r1, r6
    2bb6:	4620      	mov	r0, r4
    2bb8:	4b13      	ldr	r3, [pc, #76]	; (2c08 <_usart_async_init+0x78>)
    2bba:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2bbc:	4620      	mov	r0, r4
    2bbe:	4b13      	ldr	r3, [pc, #76]	; (2c0c <_usart_async_init+0x7c>)
    2bc0:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    2bc2:	2400      	movs	r4, #0
    2bc4:	e016      	b.n	2bf4 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bc6:	0941      	lsrs	r1, r0, #5
    2bc8:	f000 021f 	and.w	r2, r0, #31
    2bcc:	2301      	movs	r3, #1
    2bce:	4093      	lsls	r3, r2
    2bd0:	4a0f      	ldr	r2, [pc, #60]	; (2c10 <_usart_async_init+0x80>)
    2bd2:	f101 0620 	add.w	r6, r1, #32
    2bd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bde:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2be2:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2be6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    2bee:	3001      	adds	r0, #1
    2bf0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2bf2:	3401      	adds	r4, #1
    2bf4:	2c03      	cmp	r4, #3
    2bf6:	d9e6      	bls.n	2bc6 <_usart_async_init+0x36>
    2bf8:	e7d9      	b.n	2bae <_usart_async_init+0x1e>
    2bfa:	bf00      	nop
    2bfc:	000053c0 	.word	0x000053c0
    2c00:	00001671 	.word	0x00001671
    2c04:	00002a91 	.word	0x00002a91
    2c08:	00002a1d 	.word	0x00002a1d
    2c0c:	00002a35 	.word	0x00002a35
    2c10:	e000e100 	.word	0xe000e100

00002c14 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2c14:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2c16:	6299      	str	r1, [r3, #40]	; 0x28
    2c18:	4770      	bx	lr

00002c1a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2c1a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2c1c:	2201      	movs	r2, #1
    2c1e:	759a      	strb	r2, [r3, #22]
    2c20:	4770      	bx	lr

00002c22 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2c22:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2c24:	2202      	movs	r2, #2
    2c26:	759a      	strb	r2, [r3, #22]
    2c28:	4770      	bx	lr
	...

00002c2c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2c2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2c2e:	4b02      	ldr	r3, [pc, #8]	; (2c38 <SERCOM5_0_Handler+0xc>)
    2c30:	6818      	ldr	r0, [r3, #0]
    2c32:	4b02      	ldr	r3, [pc, #8]	; (2c3c <SERCOM5_0_Handler+0x10>)
    2c34:	4798      	blx	r3
    2c36:	bd08      	pop	{r3, pc}
    2c38:	20000218 	.word	0x20000218
    2c3c:	000029ad 	.word	0x000029ad

00002c40 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2c40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2c42:	4b02      	ldr	r3, [pc, #8]	; (2c4c <SERCOM5_1_Handler+0xc>)
    2c44:	6818      	ldr	r0, [r3, #0]
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <SERCOM5_1_Handler+0x10>)
    2c48:	4798      	blx	r3
    2c4a:	bd08      	pop	{r3, pc}
    2c4c:	20000218 	.word	0x20000218
    2c50:	000029ad 	.word	0x000029ad

00002c54 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2c54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2c56:	4b02      	ldr	r3, [pc, #8]	; (2c60 <SERCOM5_2_Handler+0xc>)
    2c58:	6818      	ldr	r0, [r3, #0]
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <SERCOM5_2_Handler+0x10>)
    2c5c:	4798      	blx	r3
    2c5e:	bd08      	pop	{r3, pc}
    2c60:	20000218 	.word	0x20000218
    2c64:	000029ad 	.word	0x000029ad

00002c68 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2c68:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2c6a:	4b02      	ldr	r3, [pc, #8]	; (2c74 <SERCOM5_3_Handler+0xc>)
    2c6c:	6818      	ldr	r0, [r3, #0]
    2c6e:	4b02      	ldr	r3, [pc, #8]	; (2c78 <SERCOM5_3_Handler+0x10>)
    2c70:	4798      	blx	r3
    2c72:	bd08      	pop	{r3, pc}
    2c74:	20000218 	.word	0x20000218
    2c78:	000029ad 	.word	0x000029ad

00002c7c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2c7c:	4b03      	ldr	r3, [pc, #12]	; (2c8c <_system_time_init+0x10>)
    2c7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2c82:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2c84:	2205      	movs	r2, #5
    2c86:	601a      	str	r2, [r3, #0]
    2c88:	4770      	bx	lr
    2c8a:	bf00      	nop
    2c8c:	e000e010 	.word	0xe000e010

00002c90 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2c90:	b508      	push	{r3, lr}
	_system_time_init(hw);
    2c92:	4b01      	ldr	r3, [pc, #4]	; (2c98 <_delay_init+0x8>)
    2c94:	4798      	blx	r3
    2c96:	bd08      	pop	{r3, pc}
    2c98:	00002c7d 	.word	0x00002c7d

00002c9c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2c9c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2c9e:	e00d      	b.n	2cbc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    2ca0:	4b0d      	ldr	r3, [pc, #52]	; (2cd8 <_delay_cycles+0x3c>)
    2ca2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2ca6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2ca8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <_delay_cycles+0x3c>)
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cb2:	d0fa      	beq.n	2caa <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    2cb4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2cb8:	3101      	adds	r1, #1
	while (n--) {
    2cba:	4610      	mov	r0, r2
    2cbc:	1e43      	subs	r3, r0, #1
    2cbe:	b2da      	uxtb	r2, r3
    2cc0:	2800      	cmp	r0, #0
    2cc2:	d1ed      	bne.n	2ca0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2cc4:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <_delay_cycles+0x3c>)
    2cc6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2cc8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2cca:	4b03      	ldr	r3, [pc, #12]	; (2cd8 <_delay_cycles+0x3c>)
    2ccc:	681b      	ldr	r3, [r3, #0]
    2cce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cd2:	d0fa      	beq.n	2cca <_delay_cycles+0x2e>
		;
}
    2cd4:	4770      	bx	lr
    2cd6:	bf00      	nop
    2cd8:	e000e010 	.word	0xe000e010

00002cdc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2cdc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2cde:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2ce0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2ce2:	f012 0f01 	tst.w	r2, #1
    2ce6:	d100      	bne.n	2cea <tc_interrupt_handler+0xe>
    2ce8:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2cea:	2201      	movs	r2, #1
    2cec:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2cee:	6803      	ldr	r3, [r0, #0]
    2cf0:	4798      	blx	r3
	}
}
    2cf2:	e7f9      	b.n	2ce8 <tc_interrupt_handler+0xc>

00002cf4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2cf4:	b538      	push	{r3, r4, r5, lr}
    2cf6:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2cf8:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2cfa:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2cfc:	f013 0f01 	tst.w	r3, #1
    2d00:	d004      	beq.n	2d0c <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2d02:	2301      	movs	r3, #1
    2d04:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2d06:	6803      	ldr	r3, [r0, #0]
    2d08:	b103      	cbz	r3, 2d0c <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2d0a:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2d0c:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2d0e:	f013 0f02 	tst.w	r3, #2
    2d12:	d005      	beq.n	2d20 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2d14:	2302      	movs	r3, #2
    2d16:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2d18:	686b      	ldr	r3, [r5, #4]
    2d1a:	b10b      	cbz	r3, 2d20 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2d1c:	4628      	mov	r0, r5
    2d1e:	4798      	blx	r3
    2d20:	bd38      	pop	{r3, r4, r5, pc}
	...

00002d24 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <_tc_init_irq_param+0x1c>)
    2d26:	4298      	cmp	r0, r3
    2d28:	d003      	beq.n	2d32 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2d2a:	4b06      	ldr	r3, [pc, #24]	; (2d44 <_tc_init_irq_param+0x20>)
    2d2c:	4298      	cmp	r0, r3
    2d2e:	d003      	beq.n	2d38 <_tc_init_irq_param+0x14>
    2d30:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2d32:	4b05      	ldr	r3, [pc, #20]	; (2d48 <_tc_init_irq_param+0x24>)
    2d34:	6019      	str	r1, [r3, #0]
    2d36:	e7f8      	b.n	2d2a <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2d38:	4b03      	ldr	r3, [pc, #12]	; (2d48 <_tc_init_irq_param+0x24>)
    2d3a:	6059      	str	r1, [r3, #4]
	}
}
    2d3c:	e7f8      	b.n	2d30 <_tc_init_irq_param+0xc>
    2d3e:	bf00      	nop
    2d40:	40003800 	.word	0x40003800
    2d44:	40003c00 	.word	0x40003c00
    2d48:	2000021c 	.word	0x2000021c

00002d4c <get_tc_index>:
{
    2d4c:	b570      	push	{r4, r5, r6, lr}
    2d4e:	b086      	sub	sp, #24
    2d50:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2d52:	466c      	mov	r4, sp
    2d54:	4d17      	ldr	r5, [pc, #92]	; (2db4 <get_tc_index+0x68>)
    2d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d5a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2d5e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2d62:	2300      	movs	r3, #0
    2d64:	2b05      	cmp	r3, #5
    2d66:	d80a      	bhi.n	2d7e <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2d68:	aa06      	add	r2, sp, #24
    2d6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2d6e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2d72:	42b2      	cmp	r2, r6
    2d74:	d001      	beq.n	2d7a <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2d76:	3301      	adds	r3, #1
    2d78:	e7f4      	b.n	2d64 <get_tc_index+0x18>
			return i;
    2d7a:	b2db      	uxtb	r3, r3
    2d7c:	e000      	b.n	2d80 <get_tc_index+0x34>
		}
	}
	return 0;
    2d7e:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2d80:	2200      	movs	r2, #0
    2d82:	2a01      	cmp	r2, #1
    2d84:	d80b      	bhi.n	2d9e <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2d86:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2d8a:	0081      	lsls	r1, r0, #2
    2d8c:	480a      	ldr	r0, [pc, #40]	; (2db8 <get_tc_index+0x6c>)
    2d8e:	5c41      	ldrb	r1, [r0, r1]
    2d90:	4299      	cmp	r1, r3
    2d92:	d002      	beq.n	2d9a <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2d94:	3201      	adds	r2, #1
    2d96:	b2d2      	uxtb	r2, r2
    2d98:	e7f3      	b.n	2d82 <get_tc_index+0x36>
			return i;
    2d9a:	b250      	sxtb	r0, r2
    2d9c:	e007      	b.n	2dae <get_tc_index+0x62>
	ASSERT(false);
    2d9e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2da2:	4906      	ldr	r1, [pc, #24]	; (2dbc <get_tc_index+0x70>)
    2da4:	2000      	movs	r0, #0
    2da6:	4b06      	ldr	r3, [pc, #24]	; (2dc0 <get_tc_index+0x74>)
    2da8:	4798      	blx	r3
	return -1;
    2daa:	f04f 30ff 	mov.w	r0, #4294967295
}
    2dae:	b006      	add	sp, #24
    2db0:	bd70      	pop	{r4, r5, r6, pc}
    2db2:	bf00      	nop
    2db4:	000053dc 	.word	0x000053dc
    2db8:	20000000 	.word	0x20000000
    2dbc:	000053f4 	.word	0x000053f4
    2dc0:	00001671 	.word	0x00001671

00002dc4 <_timer_init>:
{
    2dc4:	b570      	push	{r4, r5, r6, lr}
    2dc6:	4606      	mov	r6, r0
    2dc8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2dca:	4608      	mov	r0, r1
    2dcc:	4b6c      	ldr	r3, [pc, #432]	; (2f80 <_timer_init+0x1bc>)
    2dce:	4798      	blx	r3
    2dd0:	4605      	mov	r5, r0
	device->hw = hw;
    2dd2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2dd4:	228f      	movs	r2, #143	; 0x8f
    2dd6:	496b      	ldr	r1, [pc, #428]	; (2f84 <_timer_init+0x1c0>)
    2dd8:	2001      	movs	r0, #1
    2dda:	4b6b      	ldr	r3, [pc, #428]	; (2f88 <_timer_init+0x1c4>)
    2ddc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2dde:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2de0:	f013 0f01 	tst.w	r3, #1
    2de4:	d119      	bne.n	2e1a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2de6:	6923      	ldr	r3, [r4, #16]
    2de8:	f013 0f03 	tst.w	r3, #3
    2dec:	d1fb      	bne.n	2de6 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2dee:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2df0:	f013 0f02 	tst.w	r3, #2
    2df4:	d00b      	beq.n	2e0e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2df6:	6823      	ldr	r3, [r4, #0]
    2df8:	f023 0302 	bic.w	r3, r3, #2
    2dfc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2dfe:	6923      	ldr	r3, [r4, #16]
    2e00:	f013 0f03 	tst.w	r3, #3
    2e04:	d1fb      	bne.n	2dfe <_timer_init+0x3a>
    2e06:	6923      	ldr	r3, [r4, #16]
    2e08:	f013 0f02 	tst.w	r3, #2
    2e0c:	d1fb      	bne.n	2e06 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e0e:	2301      	movs	r3, #1
    2e10:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e12:	6923      	ldr	r3, [r4, #16]
    2e14:	f013 0f03 	tst.w	r3, #3
    2e18:	d1fb      	bne.n	2e12 <_timer_init+0x4e>
    2e1a:	6923      	ldr	r3, [r4, #16]
    2e1c:	f013 0f01 	tst.w	r3, #1
    2e20:	d1fb      	bne.n	2e1a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2e22:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e26:	009a      	lsls	r2, r3, #2
    2e28:	4b58      	ldr	r3, [pc, #352]	; (2f8c <_timer_init+0x1c8>)
    2e2a:	4413      	add	r3, r2
    2e2c:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e2e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e30:	6923      	ldr	r3, [r4, #16]
    2e32:	f013 0f03 	tst.w	r3, #3
    2e36:	d1fb      	bne.n	2e30 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2e38:	00aa      	lsls	r2, r5, #2
    2e3a:	442a      	add	r2, r5
    2e3c:	0091      	lsls	r1, r2, #2
    2e3e:	4b53      	ldr	r3, [pc, #332]	; (2f8c <_timer_init+0x1c8>)
    2e40:	440b      	add	r3, r1
    2e42:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2e44:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2e46:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2e48:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2e4a:	2201      	movs	r2, #1
    2e4c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2e4e:	685b      	ldr	r3, [r3, #4]
    2e50:	f003 030c 	and.w	r3, r3, #12
    2e54:	2b08      	cmp	r3, #8
    2e56:	d05b      	beq.n	2f10 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d16d      	bne.n	2f38 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2e5c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e60:	009a      	lsls	r2, r3, #2
    2e62:	4b4a      	ldr	r3, [pc, #296]	; (2f8c <_timer_init+0x1c8>)
    2e64:	4413      	add	r3, r2
    2e66:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2e68:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e6a:	6923      	ldr	r3, [r4, #16]
    2e6c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e70:	d1fb      	bne.n	2e6a <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2e72:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e76:	009a      	lsls	r2, r3, #2
    2e78:	4b44      	ldr	r3, [pc, #272]	; (2f8c <_timer_init+0x1c8>)
    2e7a:	4413      	add	r3, r2
    2e7c:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2e7e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e80:	6923      	ldr	r3, [r4, #16]
    2e82:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2e86:	d1fb      	bne.n	2e80 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2e88:	2301      	movs	r3, #1
    2e8a:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2e8c:	4631      	mov	r1, r6
    2e8e:	4620      	mov	r0, r4
    2e90:	4b3f      	ldr	r3, [pc, #252]	; (2f90 <_timer_init+0x1cc>)
    2e92:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2e94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e98:	009a      	lsls	r2, r3, #2
    2e9a:	4b3c      	ldr	r3, [pc, #240]	; (2f8c <_timer_init+0x1c8>)
    2e9c:	4413      	add	r3, r2
    2e9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	db0d      	blt.n	2ec2 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ea6:	095a      	lsrs	r2, r3, #5
    2ea8:	f003 031f 	and.w	r3, r3, #31
    2eac:	2101      	movs	r1, #1
    2eae:	fa01 f303 	lsl.w	r3, r1, r3
    2eb2:	3220      	adds	r2, #32
    2eb4:	4937      	ldr	r1, [pc, #220]	; (2f94 <_timer_init+0x1d0>)
    2eb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ebe:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2ec2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ec6:	009a      	lsls	r2, r3, #2
    2ec8:	4b30      	ldr	r3, [pc, #192]	; (2f8c <_timer_init+0x1c8>)
    2eca:	4413      	add	r3, r2
    2ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	db09      	blt.n	2ee8 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ed4:	095a      	lsrs	r2, r3, #5
    2ed6:	f003 031f 	and.w	r3, r3, #31
    2eda:	2101      	movs	r1, #1
    2edc:	fa01 f303 	lsl.w	r3, r1, r3
    2ee0:	3260      	adds	r2, #96	; 0x60
    2ee2:	492c      	ldr	r1, [pc, #176]	; (2f94 <_timer_init+0x1d0>)
    2ee4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2ee8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2eec:	00aa      	lsls	r2, r5, #2
    2eee:	4b27      	ldr	r3, [pc, #156]	; (2f8c <_timer_init+0x1c8>)
    2ef0:	4413      	add	r3, r2
    2ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	db08      	blt.n	2f0c <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2efa:	0959      	lsrs	r1, r3, #5
    2efc:	f003 031f 	and.w	r3, r3, #31
    2f00:	2201      	movs	r2, #1
    2f02:	fa02 f303 	lsl.w	r3, r2, r3
    2f06:	4a23      	ldr	r2, [pc, #140]	; (2f94 <_timer_init+0x1d0>)
    2f08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2f0c:	2000      	movs	r0, #0
    2f0e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2f10:	4b1e      	ldr	r3, [pc, #120]	; (2f8c <_timer_init+0x1c8>)
    2f12:	440b      	add	r3, r1
    2f14:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2f16:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f18:	6923      	ldr	r3, [r4, #16]
    2f1a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f1e:	d1fb      	bne.n	2f18 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2f20:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f24:	009a      	lsls	r2, r3, #2
    2f26:	4b19      	ldr	r3, [pc, #100]	; (2f8c <_timer_init+0x1c8>)
    2f28:	4413      	add	r3, r2
    2f2a:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2f2c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f2e:	6923      	ldr	r3, [r4, #16]
    2f30:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f34:	d1fb      	bne.n	2f2e <_timer_init+0x16a>
    2f36:	e7a7      	b.n	2e88 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2f38:	2b04      	cmp	r3, #4
    2f3a:	d1a5      	bne.n	2e88 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2f3c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f40:	009a      	lsls	r2, r3, #2
    2f42:	4b12      	ldr	r3, [pc, #72]	; (2f8c <_timer_init+0x1c8>)
    2f44:	4413      	add	r3, r2
    2f46:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f48:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f4a:	6923      	ldr	r3, [r4, #16]
    2f4c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f50:	d1fb      	bne.n	2f4a <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2f52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f56:	009a      	lsls	r2, r3, #2
    2f58:	4b0c      	ldr	r3, [pc, #48]	; (2f8c <_timer_init+0x1c8>)
    2f5a:	4413      	add	r3, r2
    2f5c:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f5e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f60:	6923      	ldr	r3, [r4, #16]
    2f62:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f66:	d1fb      	bne.n	2f60 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2f68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f6c:	009a      	lsls	r2, r3, #2
    2f6e:	4b07      	ldr	r3, [pc, #28]	; (2f8c <_timer_init+0x1c8>)
    2f70:	4413      	add	r3, r2
    2f72:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f74:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f76:	6923      	ldr	r3, [r4, #16]
    2f78:	f013 0f20 	tst.w	r3, #32
    2f7c:	d1fb      	bne.n	2f76 <_timer_init+0x1b2>
    2f7e:	e783      	b.n	2e88 <_timer_init+0xc4>
    2f80:	00002d4d 	.word	0x00002d4d
    2f84:	000053f4 	.word	0x000053f4
    2f88:	00001671 	.word	0x00001671
    2f8c:	20000000 	.word	0x20000000
    2f90:	00002d25 	.word	0x00002d25
    2f94:	e000e100 	.word	0xe000e100

00002f98 <_pwm_init>:
{
    2f98:	b570      	push	{r4, r5, r6, lr}
    2f9a:	4606      	mov	r6, r0
    2f9c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2f9e:	4608      	mov	r0, r1
    2fa0:	4b59      	ldr	r3, [pc, #356]	; (3108 <_pwm_init+0x170>)
    2fa2:	4798      	blx	r3
    2fa4:	4605      	mov	r5, r0
	device->hw = hw;
    2fa6:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2fa8:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2faa:	f013 0f01 	tst.w	r3, #1
    2fae:	d119      	bne.n	2fe4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fb0:	6923      	ldr	r3, [r4, #16]
    2fb2:	f013 0f03 	tst.w	r3, #3
    2fb6:	d1fb      	bne.n	2fb0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2fb8:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2fba:	f013 0f02 	tst.w	r3, #2
    2fbe:	d00b      	beq.n	2fd8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2fc0:	6823      	ldr	r3, [r4, #0]
    2fc2:	f023 0302 	bic.w	r3, r3, #2
    2fc6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fc8:	6923      	ldr	r3, [r4, #16]
    2fca:	f013 0f03 	tst.w	r3, #3
    2fce:	d1fb      	bne.n	2fc8 <_pwm_init+0x30>
    2fd0:	6923      	ldr	r3, [r4, #16]
    2fd2:	f013 0f02 	tst.w	r3, #2
    2fd6:	d1fb      	bne.n	2fd0 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2fd8:	2301      	movs	r3, #1
    2fda:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fdc:	6923      	ldr	r3, [r4, #16]
    2fde:	f013 0f03 	tst.w	r3, #3
    2fe2:	d1fb      	bne.n	2fdc <_pwm_init+0x44>
    2fe4:	6923      	ldr	r3, [r4, #16]
    2fe6:	f013 0f01 	tst.w	r3, #1
    2fea:	d1fb      	bne.n	2fe4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2fec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ff0:	009a      	lsls	r2, r3, #2
    2ff2:	4b46      	ldr	r3, [pc, #280]	; (310c <_pwm_init+0x174>)
    2ff4:	4413      	add	r3, r2
    2ff6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2ff8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ffa:	6923      	ldr	r3, [r4, #16]
    2ffc:	f013 0f03 	tst.w	r3, #3
    3000:	d1fb      	bne.n	2ffa <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3002:	00aa      	lsls	r2, r5, #2
    3004:	442a      	add	r2, r5
    3006:	0091      	lsls	r1, r2, #2
    3008:	4b40      	ldr	r3, [pc, #256]	; (310c <_pwm_init+0x174>)
    300a:	440b      	add	r3, r1
    300c:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    300e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3010:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3012:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3014:	2203      	movs	r2, #3
    3016:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3018:	685b      	ldr	r3, [r3, #4]
    301a:	f003 030c 	and.w	r3, r3, #12
    301e:	2b08      	cmp	r3, #8
    3020:	d059      	beq.n	30d6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3022:	2b00      	cmp	r3, #0
    3024:	d16b      	bne.n	30fe <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3026:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    302a:	009a      	lsls	r2, r3, #2
    302c:	4b37      	ldr	r3, [pc, #220]	; (310c <_pwm_init+0x174>)
    302e:	4413      	add	r3, r2
    3030:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3032:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3034:	6923      	ldr	r3, [r4, #16]
    3036:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    303a:	d1fb      	bne.n	3034 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    303c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3040:	009a      	lsls	r2, r3, #2
    3042:	4b32      	ldr	r3, [pc, #200]	; (310c <_pwm_init+0x174>)
    3044:	4413      	add	r3, r2
    3046:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3048:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    304a:	6923      	ldr	r3, [r4, #16]
    304c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3050:	d1fb      	bne.n	304a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    3052:	4631      	mov	r1, r6
    3054:	4620      	mov	r0, r4
    3056:	4b2e      	ldr	r3, [pc, #184]	; (3110 <_pwm_init+0x178>)
    3058:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    305a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    305e:	009a      	lsls	r2, r3, #2
    3060:	4b2a      	ldr	r3, [pc, #168]	; (310c <_pwm_init+0x174>)
    3062:	4413      	add	r3, r2
    3064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3068:	2b00      	cmp	r3, #0
    306a:	db0d      	blt.n	3088 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    306c:	095a      	lsrs	r2, r3, #5
    306e:	f003 031f 	and.w	r3, r3, #31
    3072:	2101      	movs	r1, #1
    3074:	fa01 f303 	lsl.w	r3, r1, r3
    3078:	3220      	adds	r2, #32
    307a:	4926      	ldr	r1, [pc, #152]	; (3114 <_pwm_init+0x17c>)
    307c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3080:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3084:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3088:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    308c:	009a      	lsls	r2, r3, #2
    308e:	4b1f      	ldr	r3, [pc, #124]	; (310c <_pwm_init+0x174>)
    3090:	4413      	add	r3, r2
    3092:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3096:	2b00      	cmp	r3, #0
    3098:	db09      	blt.n	30ae <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    309a:	095a      	lsrs	r2, r3, #5
    309c:	f003 031f 	and.w	r3, r3, #31
    30a0:	2101      	movs	r1, #1
    30a2:	fa01 f303 	lsl.w	r3, r1, r3
    30a6:	3260      	adds	r2, #96	; 0x60
    30a8:	491a      	ldr	r1, [pc, #104]	; (3114 <_pwm_init+0x17c>)
    30aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    30ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    30b2:	00aa      	lsls	r2, r5, #2
    30b4:	4b15      	ldr	r3, [pc, #84]	; (310c <_pwm_init+0x174>)
    30b6:	4413      	add	r3, r2
    30b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    30bc:	2b00      	cmp	r3, #0
    30be:	db21      	blt.n	3104 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30c0:	0959      	lsrs	r1, r3, #5
    30c2:	f003 031f 	and.w	r3, r3, #31
    30c6:	2201      	movs	r2, #1
    30c8:	fa02 f303 	lsl.w	r3, r2, r3
    30cc:	4a11      	ldr	r2, [pc, #68]	; (3114 <_pwm_init+0x17c>)
    30ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    30d2:	2000      	movs	r0, #0
    30d4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    30d6:	4b0d      	ldr	r3, [pc, #52]	; (310c <_pwm_init+0x174>)
    30d8:	440b      	add	r3, r1
    30da:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    30dc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30de:	6923      	ldr	r3, [r4, #16]
    30e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    30e4:	d1fb      	bne.n	30de <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    30e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30ea:	009a      	lsls	r2, r3, #2
    30ec:	4b07      	ldr	r3, [pc, #28]	; (310c <_pwm_init+0x174>)
    30ee:	4413      	add	r3, r2
    30f0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    30f2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30f4:	6923      	ldr	r3, [r4, #16]
    30f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    30fa:	d1fb      	bne.n	30f4 <_pwm_init+0x15c>
    30fc:	e7a9      	b.n	3052 <_pwm_init+0xba>
		return -1;
    30fe:	f04f 30ff 	mov.w	r0, #4294967295
    3102:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3104:	2000      	movs	r0, #0
}
    3106:	bd70      	pop	{r4, r5, r6, pc}
    3108:	00002d4d 	.word	0x00002d4d
    310c:	20000000 	.word	0x20000000
    3110:	00002d25 	.word	0x00002d25
    3114:	e000e100 	.word	0xe000e100

00003118 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3118:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    311a:	6813      	ldr	r3, [r2, #0]
    311c:	f043 0302 	orr.w	r3, r3, #2
    3120:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3122:	6913      	ldr	r3, [r2, #16]
    3124:	f013 0f03 	tst.w	r3, #3
    3128:	d1fb      	bne.n	3122 <_timer_start+0xa>
}
    312a:	4770      	bx	lr

0000312c <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    312c:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    312e:	6813      	ldr	r3, [r2, #0]
    3130:	f043 0302 	orr.w	r3, r3, #2
    3134:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3136:	6913      	ldr	r3, [r2, #16]
    3138:	f013 0f03 	tst.w	r3, #3
    313c:	d1fb      	bne.n	3136 <_pwm_enable+0xa>
}
    313e:	4770      	bx	lr

00003140 <_pwm_set_param>:
{
    3140:	b570      	push	{r4, r5, r6, lr}
    3142:	460e      	mov	r6, r1
    3144:	4615      	mov	r5, r2
	void *const hw = device->hw;
    3146:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    3148:	4620      	mov	r0, r4
    314a:	4b1b      	ldr	r3, [pc, #108]	; (31b8 <_pwm_set_param+0x78>)
    314c:	4798      	blx	r3
	_tcs[i].cc0 = period;
    314e:	0082      	lsls	r2, r0, #2
    3150:	4402      	add	r2, r0
    3152:	0091      	lsls	r1, r2, #2
    3154:	4b19      	ldr	r3, [pc, #100]	; (31bc <_pwm_set_param+0x7c>)
    3156:	440b      	add	r3, r1
    3158:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    315a:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    315c:	685b      	ldr	r3, [r3, #4]
    315e:	f003 030c 	and.w	r3, r3, #12
    3162:	2b08      	cmp	r3, #8
    3164:	d016      	beq.n	3194 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    3166:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    316a:	009a      	lsls	r2, r3, #2
    316c:	4b13      	ldr	r3, [pc, #76]	; (31bc <_pwm_set_param+0x7c>)
    316e:	4413      	add	r3, r2
    3170:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3172:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3174:	6923      	ldr	r3, [r4, #16]
    3176:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    317a:	d1fb      	bne.n	3174 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    317c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3180:	0082      	lsls	r2, r0, #2
    3182:	4b0e      	ldr	r3, [pc, #56]	; (31bc <_pwm_set_param+0x7c>)
    3184:	4413      	add	r3, r2
    3186:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3188:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    318a:	6923      	ldr	r3, [r4, #16]
    318c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3190:	d1fb      	bne.n	318a <_pwm_set_param+0x4a>
    3192:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3194:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3196:	6923      	ldr	r3, [r4, #16]
    3198:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    319c:	d1fb      	bne.n	3196 <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    319e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    31a2:	0082      	lsls	r2, r0, #2
    31a4:	4b05      	ldr	r3, [pc, #20]	; (31bc <_pwm_set_param+0x7c>)
    31a6:	4413      	add	r3, r2
    31a8:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31aa:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31ac:	6923      	ldr	r3, [r4, #16]
    31ae:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    31b2:	d1fb      	bne.n	31ac <_pwm_set_param+0x6c>
    31b4:	bd70      	pop	{r4, r5, r6, pc}
    31b6:	bf00      	nop
    31b8:	00002d4d 	.word	0x00002d4d
    31bc:	20000000 	.word	0x20000000

000031c0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    31c0:	68c2      	ldr	r2, [r0, #12]
    31c2:	6913      	ldr	r3, [r2, #16]
    31c4:	f013 0f03 	tst.w	r3, #3
    31c8:	d1fb      	bne.n	31c2 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    31ca:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    31cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    31d0:	4770      	bx	lr

000031d2 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    31d2:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31d4:	6913      	ldr	r3, [r2, #16]
    31d6:	f013 0f03 	tst.w	r3, #3
    31da:	d1fb      	bne.n	31d4 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    31dc:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    31de:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    31e2:	4770      	bx	lr

000031e4 <_tc_get_timer>:
}
    31e4:	2000      	movs	r0, #0
    31e6:	4770      	bx	lr

000031e8 <_tc_get_pwm>:
}
    31e8:	2000      	movs	r0, #0
    31ea:	4770      	bx	lr

000031ec <_timer_set_irq>:
{
    31ec:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    31ee:	68c0      	ldr	r0, [r0, #12]
    31f0:	4b08      	ldr	r3, [pc, #32]	; (3214 <_timer_set_irq+0x28>)
    31f2:	4798      	blx	r3
    31f4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    31f6:	f240 129d 	movw	r2, #413	; 0x19d
    31fa:	4907      	ldr	r1, [pc, #28]	; (3218 <_timer_set_irq+0x2c>)
    31fc:	2001      	movs	r0, #1
    31fe:	4b07      	ldr	r3, [pc, #28]	; (321c <_timer_set_irq+0x30>)
    3200:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3202:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3206:	00a2      	lsls	r2, r4, #2
    3208:	4b05      	ldr	r3, [pc, #20]	; (3220 <_timer_set_irq+0x34>)
    320a:	4413      	add	r3, r2
    320c:	7898      	ldrb	r0, [r3, #2]
    320e:	4b05      	ldr	r3, [pc, #20]	; (3224 <_timer_set_irq+0x38>)
    3210:	4798      	blx	r3
    3212:	bd10      	pop	{r4, pc}
    3214:	00002d4d 	.word	0x00002d4d
    3218:	000053f4 	.word	0x000053f4
    321c:	00001671 	.word	0x00001671
    3220:	20000000 	.word	0x20000000
    3224:	00001a31 	.word	0x00001a31

00003228 <TC0_Handler>:
{
    3228:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    322a:	4b02      	ldr	r3, [pc, #8]	; (3234 <TC0_Handler+0xc>)
    322c:	6818      	ldr	r0, [r3, #0]
    322e:	4b02      	ldr	r3, [pc, #8]	; (3238 <TC0_Handler+0x10>)
    3230:	4798      	blx	r3
    3232:	bd08      	pop	{r3, pc}
    3234:	2000021c 	.word	0x2000021c
    3238:	00002cf5 	.word	0x00002cf5

0000323c <TC1_Handler>:
{
    323c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    323e:	4b02      	ldr	r3, [pc, #8]	; (3248 <TC1_Handler+0xc>)
    3240:	6858      	ldr	r0, [r3, #4]
    3242:	4b02      	ldr	r3, [pc, #8]	; (324c <TC1_Handler+0x10>)
    3244:	4798      	blx	r3
    3246:	bd08      	pop	{r3, pc}
    3248:	2000021c 	.word	0x2000021c
    324c:	00002cdd 	.word	0x00002cdd

00003250 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    3250:	4a02      	ldr	r2, [pc, #8]	; (325c <millisecondTimer_cb+0xc>)
    3252:	6813      	ldr	r3, [r2, #0]
    3254:	3301      	adds	r3, #1
    3256:	6013      	str	r3, [r2, #0]
    3258:	4770      	bx	lr
    325a:	bf00      	nop
    325c:	20000224 	.word	0x20000224

00003260 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    3260:	b510      	push	{r4, lr}
    3262:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3264:	2301      	movs	r3, #1
    3266:	f10d 0207 	add.w	r2, sp, #7
    326a:	2100      	movs	r1, #0
    326c:	4807      	ldr	r0, [pc, #28]	; (328c <checkBattVoltage_cb+0x2c>)
    326e:	4c08      	ldr	r4, [pc, #32]	; (3290 <checkBattVoltage_cb+0x30>)
    3270:	47a0      	blx	r4
	battVolt = adcValue;
    3272:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3276:	4a07      	ldr	r2, [pc, #28]	; (3294 <checkBattVoltage_cb+0x34>)
    3278:	7013      	strb	r3, [r2, #0]
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 158) {
    327a:	2b9d      	cmp	r3, #157	; 0x9d
    327c:	d804      	bhi.n	3288 <checkBattVoltage_cb+0x28>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    327e:	4a06      	ldr	r2, [pc, #24]	; (3298 <checkBattVoltage_cb+0x38>)
    3280:	6813      	ldr	r3, [r2, #0]
    3282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3286:	6013      	str	r3, [r2, #0]
	}
}
    3288:	b002      	add	sp, #8
    328a:	bd10      	pop	{r4, pc}
    328c:	200006c8 	.word	0x200006c8
    3290:	00000ca1 	.word	0x00000ca1
    3294:	20000b7a 	.word	0x20000b7a
    3298:	20000028 	.word	0x20000028

0000329c <irReceive_cb>:
		deviceState |= DEVICE_STATE_CHARGING;
	}
}

static void irReceive_cb(void)
{
    329c:	b500      	push	{lr}
    329e:	b083      	sub	sp, #12
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    32a0:	a801      	add	r0, sp, #4
    32a2:	4b07      	ldr	r3, [pc, #28]	; (32c0 <irReceive_cb+0x24>)
    32a4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    32a6:	4b07      	ldr	r3, [pc, #28]	; (32c4 <irReceive_cb+0x28>)
    32a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    32ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    32b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    32b4:	a801      	add	r0, sp, #4
    32b6:	4b04      	ldr	r3, [pc, #16]	; (32c8 <irReceive_cb+0x2c>)
    32b8:	4798      	blx	r3
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		
	}
	else {
		
	}	
}
<<<<<<< HEAD
    31f8:	b003      	add	sp, #12
    31fa:	f85d fb04 	ldr.w	pc, [sp], #4
    31fe:	bf00      	nop
    3200:	00000d41 	.word	0x00000d41
    3204:	41008000 	.word	0x41008000
    3208:	00000d4f 	.word	0x00000d4f

0000320c <frameValid_cb>:
=======
    32ba:	b003      	add	sp, #12
    32bc:	f85d fb04 	ldr.w	pc, [sp], #4
    32c0:	00000d41 	.word	0x00000d41
    32c4:	41008000 	.word	0x41008000
    32c8:	00000d4f 	.word	0x00000d4f

000032cc <pushButton_cb>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

static void pushButton_cb(void)
{
<<<<<<< HEAD
    320c:	b500      	push	{lr}
    320e:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    3210:	a801      	add	r0, sp, #4
    3212:	4b07      	ldr	r3, [pc, #28]	; (3230 <frameValid_cb+0x24>)
    3214:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3216:	4b07      	ldr	r3, [pc, #28]	; (3234 <frameValid_cb+0x28>)
    3218:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    321c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3224:	a801      	add	r0, sp, #4
    3226:	4b04      	ldr	r3, [pc, #16]	; (3238 <frameValid_cb+0x2c>)
    3228:	4798      	blx	r3
			deviceState &= !(DEVICE_STATE_START_RECORDING_WAITING);
			deviceState |= DEVICE_STATE_RECORDING;
		}
=======
    32cc:	b500      	push	{lr}
    32ce:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    32d0:	a801      	add	r0, sp, #4
    32d2:	4b06      	ldr	r3, [pc, #24]	; (32ec <pushButton_cb+0x20>)
    32d4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    32d6:	4b06      	ldr	r3, [pc, #24]	; (32f0 <pushButton_cb+0x24>)
    32d8:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    32da:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    32dc:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    32de:	a801      	add	r0, sp, #4
    32e0:	4b04      	ldr	r3, [pc, #16]	; (32f4 <pushButton_cb+0x28>)
    32e2:	4798      	blx	r3
		
	}
	else {
		
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	}
}
<<<<<<< HEAD
    322a:	b003      	add	sp, #12
    322c:	f85d fb04 	ldr.w	pc, [sp], #4
    3230:	00000d41 	.word	0x00000d41
    3234:	41008000 	.word	0x41008000
    3238:	00000d4f 	.word	0x00000d4f

0000323c <spi_BB_Write>:
=======
    32e4:	b003      	add	sp, #12
    32e6:	f85d fb04 	ldr.w	pc, [sp], #4
    32ea:	bf00      	nop
    32ec:	00000d41 	.word	0x00000d41
    32f0:	41008000 	.word	0x41008000
    32f4:	00000d4f 	.word	0x00000d4f

000032f8 <battCharging_cb>:
{
    32f8:	b510      	push	{r4, lr}
    32fa:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    32fc:	a801      	add	r0, sp, #4
    32fe:	4b0f      	ldr	r3, [pc, #60]	; (333c <battCharging_cb+0x44>)
    3300:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3302:	4b0f      	ldr	r3, [pc, #60]	; (3340 <battCharging_cb+0x48>)
    3304:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3308:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    330c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3310:	4054      	eors	r4, r2
    3312:	400c      	ands	r4, r1
    3314:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3316:	a801      	add	r0, sp, #4
    3318:	4b0a      	ldr	r3, [pc, #40]	; (3344 <battCharging_cb+0x4c>)
    331a:	4798      	blx	r3
	if (pinState == true) {
    331c:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    3320:	d106      	bne.n	3330 <battCharging_cb+0x38>
		deviceState |= DEVICE_STATE_CHARGING;
    3322:	4a09      	ldr	r2, [pc, #36]	; (3348 <battCharging_cb+0x50>)
    3324:	6813      	ldr	r3, [r2, #0]
    3326:	f043 0320 	orr.w	r3, r3, #32
    332a:	6013      	str	r3, [r2, #0]
}
    332c:	b002      	add	sp, #8
    332e:	bd10      	pop	{r4, pc}
		deviceState &= !(DEVICE_STATE_CHARGING);
    3330:	4b05      	ldr	r3, [pc, #20]	; (3348 <battCharging_cb+0x50>)
    3332:	681a      	ldr	r2, [r3, #0]
    3334:	2200      	movs	r2, #0
    3336:	601a      	str	r2, [r3, #0]
    3338:	e7f8      	b.n	332c <battCharging_cb+0x34>
    333a:	bf00      	nop
    333c:	00000d41 	.word	0x00000d41
    3340:	41008000 	.word	0x41008000
    3344:	00000d4f 	.word	0x00000d4f
    3348:	20000028 	.word	0x20000028

0000334c <spi_BB_Write>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
<<<<<<< HEAD
    323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3240:	4607      	mov	r7, r0
    3242:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3244:	4d2f      	ldr	r5, [pc, #188]	; (3304 <spi_BB_Write+0xc8>)
    3246:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    324a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
=======
    334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3350:	4607      	mov	r7, r0
    3352:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3354:	4d2f      	ldr	r5, [pc, #188]	; (3414 <spi_BB_Write+0xc8>)
    3356:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    335a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
<<<<<<< HEAD
    324e:	200a      	movs	r0, #10
    3250:	4c2d      	ldr	r4, [pc, #180]	; (3308 <spi_BB_Write+0xcc>)
    3252:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3254:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3258:	200a      	movs	r0, #10
    325a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    325c:	2408      	movs	r4, #8
    325e:	e00c      	b.n	327a <spi_BB_Write+0x3e>
    3260:	2210      	movs	r2, #16
    3262:	4b28      	ldr	r3, [pc, #160]	; (3304 <spi_BB_Write+0xc8>)
    3264:	615a      	str	r2, [r3, #20]
=======
    335e:	200a      	movs	r0, #10
    3360:	4c2d      	ldr	r4, [pc, #180]	; (3418 <spi_BB_Write+0xcc>)
    3362:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3364:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3368:	200a      	movs	r0, #10
    336a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    336c:	2408      	movs	r4, #8
    336e:	e00c      	b.n	338a <spi_BB_Write+0x3e>
    3370:	2210      	movs	r2, #16
    3372:	4b28      	ldr	r3, [pc, #160]	; (3414 <spi_BB_Write+0xc8>)
    3374:	615a      	str	r2, [r3, #20]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
<<<<<<< HEAD
    3266:	200a      	movs	r0, #10
    3268:	4d27      	ldr	r5, [pc, #156]	; (3308 <spi_BB_Write+0xcc>)
    326a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    326c:	2220      	movs	r2, #32
    326e:	4b25      	ldr	r3, [pc, #148]	; (3304 <spi_BB_Write+0xc8>)
    3270:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3272:	200a      	movs	r0, #10
    3274:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3276:	3c01      	subs	r4, #1
    3278:	b264      	sxtb	r4, r4
    327a:	2c00      	cmp	r4, #0
    327c:	db0b      	blt.n	3296 <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    327e:	2220      	movs	r2, #32
    3280:	4b20      	ldr	r3, [pc, #128]	; (3304 <spi_BB_Write+0xc8>)
    3282:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3284:	fa47 f304 	asr.w	r3, r7, r4
    3288:	f013 0f01 	tst.w	r3, #1
    328c:	d0e8      	beq.n	3260 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    328e:	2210      	movs	r2, #16
    3290:	4b1c      	ldr	r3, [pc, #112]	; (3304 <spi_BB_Write+0xc8>)
    3292:	619a      	str	r2, [r3, #24]
    3294:	e7e7      	b.n	3266 <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3296:	4c1b      	ldr	r4, [pc, #108]	; (3304 <spi_BB_Write+0xc8>)
    3298:	2720      	movs	r7, #32
    329a:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    329c:	2310      	movs	r3, #16
    329e:	61a3      	str	r3, [r4, #24]
=======
    3376:	200a      	movs	r0, #10
    3378:	4d27      	ldr	r5, [pc, #156]	; (3418 <spi_BB_Write+0xcc>)
    337a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    337c:	2220      	movs	r2, #32
    337e:	4b25      	ldr	r3, [pc, #148]	; (3414 <spi_BB_Write+0xc8>)
    3380:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3382:	200a      	movs	r0, #10
    3384:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3386:	3c01      	subs	r4, #1
    3388:	b264      	sxtb	r4, r4
    338a:	2c00      	cmp	r4, #0
    338c:	db0b      	blt.n	33a6 <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    338e:	2220      	movs	r2, #32
    3390:	4b20      	ldr	r3, [pc, #128]	; (3414 <spi_BB_Write+0xc8>)
    3392:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3394:	fa47 f304 	asr.w	r3, r7, r4
    3398:	f013 0f01 	tst.w	r3, #1
    339c:	d0e8      	beq.n	3370 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    339e:	2210      	movs	r2, #16
    33a0:	4b1c      	ldr	r3, [pc, #112]	; (3414 <spi_BB_Write+0xc8>)
    33a2:	619a      	str	r2, [r3, #24]
    33a4:	e7e7      	b.n	3376 <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33a6:	4c1b      	ldr	r4, [pc, #108]	; (3414 <spi_BB_Write+0xc8>)
    33a8:	2720      	movs	r7, #32
    33aa:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ac:	2310      	movs	r3, #16
    33ae:	61a3      	str	r3, [r4, #24]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
<<<<<<< HEAD
    32a0:	200a      	movs	r0, #10
    32a2:	4d19      	ldr	r5, [pc, #100]	; (3308 <spi_BB_Write+0xcc>)
    32a4:	47a8      	blx	r5
    32a6:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    32a8:	200a      	movs	r0, #10
    32aa:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    32ac:	240f      	movs	r4, #15
    32ae:	e00c      	b.n	32ca <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32b0:	2210      	movs	r2, #16
    32b2:	4b14      	ldr	r3, [pc, #80]	; (3304 <spi_BB_Write+0xc8>)
    32b4:	615a      	str	r2, [r3, #20]
=======
    33b0:	200a      	movs	r0, #10
    33b2:	4d19      	ldr	r5, [pc, #100]	; (3418 <spi_BB_Write+0xcc>)
    33b4:	47a8      	blx	r5
    33b6:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    33b8:	200a      	movs	r0, #10
    33ba:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    33bc:	240f      	movs	r4, #15
    33be:	e00c      	b.n	33da <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33c0:	2210      	movs	r2, #16
    33c2:	4b14      	ldr	r3, [pc, #80]	; (3414 <spi_BB_Write+0xc8>)
    33c4:	615a      	str	r2, [r3, #20]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
<<<<<<< HEAD
    32b6:	200a      	movs	r0, #10
    32b8:	4d13      	ldr	r5, [pc, #76]	; (3308 <spi_BB_Write+0xcc>)
    32ba:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32bc:	2220      	movs	r2, #32
    32be:	4b11      	ldr	r3, [pc, #68]	; (3304 <spi_BB_Write+0xc8>)
    32c0:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    32c2:	200a      	movs	r0, #10
    32c4:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    32c6:	3c01      	subs	r4, #1
    32c8:	b264      	sxtb	r4, r4
    32ca:	2c00      	cmp	r4, #0
    32cc:	db0b      	blt.n	32e6 <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32ce:	2220      	movs	r2, #32
    32d0:	4b0c      	ldr	r3, [pc, #48]	; (3304 <spi_BB_Write+0xc8>)
    32d2:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    32d4:	fa46 f304 	asr.w	r3, r6, r4
    32d8:	f013 0f01 	tst.w	r3, #1
    32dc:	d0e8      	beq.n	32b0 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32de:	2210      	movs	r2, #16
    32e0:	4b08      	ldr	r3, [pc, #32]	; (3304 <spi_BB_Write+0xc8>)
    32e2:	619a      	str	r2, [r3, #24]
    32e4:	e7e7      	b.n	32b6 <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    32e6:	4c07      	ldr	r4, [pc, #28]	; (3304 <spi_BB_Write+0xc8>)
    32e8:	2320      	movs	r3, #32
    32ea:	6163      	str	r3, [r4, #20]
=======
    33c6:	200a      	movs	r0, #10
    33c8:	4d13      	ldr	r5, [pc, #76]	; (3418 <spi_BB_Write+0xcc>)
    33ca:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33cc:	2220      	movs	r2, #32
    33ce:	4b11      	ldr	r3, [pc, #68]	; (3414 <spi_BB_Write+0xc8>)
    33d0:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    33d2:	200a      	movs	r0, #10
    33d4:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    33d6:	3c01      	subs	r4, #1
    33d8:	b264      	sxtb	r4, r4
    33da:	2c00      	cmp	r4, #0
    33dc:	db0b      	blt.n	33f6 <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33de:	2220      	movs	r2, #32
    33e0:	4b0c      	ldr	r3, [pc, #48]	; (3414 <spi_BB_Write+0xc8>)
    33e2:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    33e4:	fa46 f304 	asr.w	r3, r6, r4
    33e8:	f013 0f01 	tst.w	r3, #1
    33ec:	d0e8      	beq.n	33c0 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ee:	2210      	movs	r2, #16
    33f0:	4b08      	ldr	r3, [pc, #32]	; (3414 <spi_BB_Write+0xc8>)
    33f2:	619a      	str	r2, [r3, #24]
    33f4:	e7e7      	b.n	33c6 <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33f6:	4c07      	ldr	r4, [pc, #28]	; (3414 <spi_BB_Write+0xc8>)
    33f8:	2320      	movs	r3, #32
    33fa:	6163      	str	r3, [r4, #20]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
<<<<<<< HEAD
    32ec:	200a      	movs	r0, #10
    32ee:	4d06      	ldr	r5, [pc, #24]	; (3308 <spi_BB_Write+0xcc>)
    32f0:	47a8      	blx	r5
	delay_us(10);
    32f2:	200a      	movs	r0, #10
    32f4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    32f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    32fa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    32fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3302:	bf00      	nop
    3304:	41008000 	.word	0x41008000
    3308:	00000db5 	.word	0x00000db5

0000330c <python480SetGain>:
{
    330c:	b508      	push	{r3, lr}
	switch (value)
    330e:	2802      	cmp	r0, #2
    3310:	d00d      	beq.n	332e <python480SetGain+0x22>
    3312:	2804      	cmp	r0, #4
    3314:	d010      	beq.n	3338 <python480SetGain+0x2c>
    3316:	2801      	cmp	r0, #1
    3318:	d004      	beq.n	3324 <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    331a:	21e1      	movs	r1, #225	; 0xe1
    331c:	20cc      	movs	r0, #204	; 0xcc
    331e:	4b09      	ldr	r3, [pc, #36]	; (3344 <python480SetGain+0x38>)
    3320:	4798      	blx	r3
    3322:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    3324:	21e1      	movs	r1, #225	; 0xe1
    3326:	20cc      	movs	r0, #204	; 0xcc
    3328:	4b06      	ldr	r3, [pc, #24]	; (3344 <python480SetGain+0x38>)
    332a:	4798      	blx	r3
		break;
    332c:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    332e:	21e4      	movs	r1, #228	; 0xe4
    3330:	20cc      	movs	r0, #204	; 0xcc
    3332:	4b04      	ldr	r3, [pc, #16]	; (3344 <python480SetGain+0x38>)
    3334:	4798      	blx	r3
		break;
    3336:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    3338:	2124      	movs	r1, #36	; 0x24
    333a:	20cc      	movs	r0, #204	; 0xcc
    333c:	4b01      	ldr	r3, [pc, #4]	; (3344 <python480SetGain+0x38>)
    333e:	4798      	blx	r3
		break;
    3340:	bd08      	pop	{r3, pc}
    3342:	bf00      	nop
    3344:	0000323d 	.word	0x0000323d

00003348 <python480SetFPS>:
{
    3348:	b508      	push	{r3, lr}
	switch (value)
    334a:	280a      	cmp	r0, #10
    334c:	d00a      	beq.n	3364 <python480SetFPS+0x1c>
    334e:	280f      	cmp	r0, #15
    3350:	d00e      	beq.n	3370 <python480SetFPS+0x28>
    3352:	2805      	cmp	r0, #5
    3354:	d000      	beq.n	3358 <python480SetFPS+0x10>
    3356:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 20000);
    3358:	f644 6120 	movw	r1, #20000	; 0x4e20
    335c:	20c9      	movs	r0, #201	; 0xc9
    335e:	4b07      	ldr	r3, [pc, #28]	; (337c <python480SetFPS+0x34>)
    3360:	4798      	blx	r3
		break;
    3362:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    3364:	f242 7110 	movw	r1, #10000	; 0x2710
    3368:	20c9      	movs	r0, #201	; 0xc9
    336a:	4b04      	ldr	r3, [pc, #16]	; (337c <python480SetFPS+0x34>)
    336c:	4798      	blx	r3
		break;
    336e:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    3370:	f641 210b 	movw	r1, #6667	; 0x1a0b
    3374:	20c9      	movs	r0, #201	; 0xc9
    3376:	4b01      	ldr	r3, [pc, #4]	; (337c <python480SetFPS+0x34>)
    3378:	4798      	blx	r3
}
    337a:	e7ec      	b.n	3356 <python480SetFPS+0xe>
    337c:	0000323d 	.word	0x0000323d

00003380 <spi_BB_Read>:
=======
    33fc:	200a      	movs	r0, #10
    33fe:	4d06      	ldr	r5, [pc, #24]	; (3418 <spi_BB_Write+0xcc>)
    3400:	47a8      	blx	r5
	delay_us(10);
    3402:	200a      	movs	r0, #10
    3404:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    340a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    340e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3412:	bf00      	nop
    3414:	41008000 	.word	0x41008000
    3418:	00000db5 	.word	0x00000db5

0000341c <spi_BB_Read>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
<<<<<<< HEAD
    3380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3384:	b082      	sub	sp, #8
    3386:	4606      	mov	r6, r0
    3388:	4d33      	ldr	r5, [pc, #204]	; (3458 <spi_BB_Read+0xd8>)
    338a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    338e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
=======
    341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3420:	b082      	sub	sp, #8
    3422:	4606      	mov	r6, r0
    3424:	4d33      	ldr	r5, [pc, #204]	; (34f4 <spi_BB_Read+0xd8>)
    3426:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    342a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
<<<<<<< HEAD
    3392:	200a      	movs	r0, #10
    3394:	4c31      	ldr	r4, [pc, #196]	; (345c <spi_BB_Read+0xdc>)
    3396:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3398:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    339c:	200a      	movs	r0, #10
    339e:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    33a0:	2408      	movs	r4, #8
    33a2:	e00c      	b.n	33be <spi_BB_Read+0x3e>
    33a4:	2210      	movs	r2, #16
    33a6:	4b2c      	ldr	r3, [pc, #176]	; (3458 <spi_BB_Read+0xd8>)
    33a8:	615a      	str	r2, [r3, #20]
=======
    342e:	200a      	movs	r0, #10
    3430:	4c31      	ldr	r4, [pc, #196]	; (34f8 <spi_BB_Read+0xdc>)
    3432:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3434:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3438:	200a      	movs	r0, #10
    343a:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    343c:	2408      	movs	r4, #8
    343e:	e00c      	b.n	345a <spi_BB_Read+0x3e>
    3440:	2210      	movs	r2, #16
    3442:	4b2c      	ldr	r3, [pc, #176]	; (34f4 <spi_BB_Read+0xd8>)
    3444:	615a      	str	r2, [r3, #20]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
<<<<<<< HEAD
    33aa:	200a      	movs	r0, #10
    33ac:	4d2b      	ldr	r5, [pc, #172]	; (345c <spi_BB_Read+0xdc>)
    33ae:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33b0:	2220      	movs	r2, #32
    33b2:	4b29      	ldr	r3, [pc, #164]	; (3458 <spi_BB_Read+0xd8>)
    33b4:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    33b6:	200a      	movs	r0, #10
    33b8:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    33ba:	3c01      	subs	r4, #1
    33bc:	b264      	sxtb	r4, r4
    33be:	2c00      	cmp	r4, #0
    33c0:	db0b      	blt.n	33da <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33c2:	2220      	movs	r2, #32
    33c4:	4b24      	ldr	r3, [pc, #144]	; (3458 <spi_BB_Read+0xd8>)
    33c6:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    33c8:	fa46 f304 	asr.w	r3, r6, r4
    33cc:	f013 0f01 	tst.w	r3, #1
    33d0:	d0e8      	beq.n	33a4 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33d2:	2210      	movs	r2, #16
    33d4:	4b20      	ldr	r3, [pc, #128]	; (3458 <spi_BB_Read+0xd8>)
    33d6:	619a      	str	r2, [r3, #24]
    33d8:	e7e7      	b.n	33aa <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33da:	4c1f      	ldr	r4, [pc, #124]	; (3458 <spi_BB_Read+0xd8>)
    33dc:	2620      	movs	r6, #32
    33de:	6166      	str	r6, [r4, #20]
    33e0:	2310      	movs	r3, #16
    33e2:	6163      	str	r3, [r4, #20]
=======
    3446:	200a      	movs	r0, #10
    3448:	4d2b      	ldr	r5, [pc, #172]	; (34f8 <spi_BB_Read+0xdc>)
    344a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    344c:	2220      	movs	r2, #32
    344e:	4b29      	ldr	r3, [pc, #164]	; (34f4 <spi_BB_Read+0xd8>)
    3450:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3452:	200a      	movs	r0, #10
    3454:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3456:	3c01      	subs	r4, #1
    3458:	b264      	sxtb	r4, r4
    345a:	2c00      	cmp	r4, #0
    345c:	db0b      	blt.n	3476 <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    345e:	2220      	movs	r2, #32
    3460:	4b24      	ldr	r3, [pc, #144]	; (34f4 <spi_BB_Read+0xd8>)
    3462:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3464:	fa46 f304 	asr.w	r3, r6, r4
    3468:	f013 0f01 	tst.w	r3, #1
    346c:	d0e8      	beq.n	3440 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    346e:	2210      	movs	r2, #16
    3470:	4b20      	ldr	r3, [pc, #128]	; (34f4 <spi_BB_Read+0xd8>)
    3472:	619a      	str	r2, [r3, #24]
    3474:	e7e7      	b.n	3446 <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3476:	4c1f      	ldr	r4, [pc, #124]	; (34f4 <spi_BB_Read+0xd8>)
    3478:	2620      	movs	r6, #32
    347a:	6166      	str	r6, [r4, #20]
    347c:	2310      	movs	r3, #16
    347e:	6163      	str	r3, [r4, #20]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
<<<<<<< HEAD
    33e4:	200a      	movs	r0, #10
    33e6:	4d1d      	ldr	r5, [pc, #116]	; (345c <spi_BB_Read+0xdc>)
    33e8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33ea:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    33ec:	200a      	movs	r0, #10
    33ee:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33f0:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    33f2:	200a      	movs	r0, #10
    33f4:	47a8      	blx	r5
	uint16_t value = 0;
    33f6:	2700      	movs	r7, #0
=======
    3480:	200a      	movs	r0, #10
    3482:	4d1d      	ldr	r5, [pc, #116]	; (34f8 <spi_BB_Read+0xdc>)
    3484:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3486:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    3488:	200a      	movs	r0, #10
    348a:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    348c:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    348e:	200a      	movs	r0, #10
    3490:	47a8      	blx	r5
	uint16_t value = 0;
    3492:	2700      	movs	r7, #0
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
	
	// Value
	for (i=15; i >=0 ;i--) {
<<<<<<< HEAD
    33f8:	250f      	movs	r5, #15
    33fa:	e01e      	b.n	343a <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    33fc:	4c16      	ldr	r4, [pc, #88]	; (3458 <spi_BB_Read+0xd8>)
    33fe:	f04f 0820 	mov.w	r8, #32
    3402:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3406:	200a      	movs	r0, #10
    3408:	4e14      	ldr	r6, [pc, #80]	; (345c <spi_BB_Read+0xdc>)
    340a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    340c:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    3410:	a801      	add	r0, sp, #4
    3412:	4b13      	ldr	r3, [pc, #76]	; (3460 <spi_BB_Read+0xe0>)
    3414:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3416:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3418:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    341a:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    341c:	405c      	eors	r4, r3
    341e:	4014      	ands	r4, r2
    3420:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3422:	a801      	add	r0, sp, #4
    3424:	4b0f      	ldr	r3, [pc, #60]	; (3464 <spi_BB_Read+0xe4>)
    3426:	4798      	blx	r3
    3428:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    342c:	40ac      	lsls	r4, r5
    342e:	433c      	orrs	r4, r7
    3430:	b2a7      	uxth	r7, r4
		delay_us(10);	
    3432:	200a      	movs	r0, #10
    3434:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    3436:	3d01      	subs	r5, #1
    3438:	b26d      	sxtb	r5, r5
    343a:	2d00      	cmp	r5, #0
    343c:	dade      	bge.n	33fc <spi_BB_Read+0x7c>
	}
	delay_us(10);
    343e:	200a      	movs	r0, #10
    3440:	4b06      	ldr	r3, [pc, #24]	; (345c <spi_BB_Read+0xdc>)
    3442:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3448:	4b03      	ldr	r3, [pc, #12]	; (3458 <spi_BB_Read+0xd8>)
    344a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    344e:	4638      	mov	r0, r7
    3450:	b002      	add	sp, #8
    3452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3456:	bf00      	nop
    3458:	41008000 	.word	0x41008000
    345c:	00000db5 	.word	0x00000db5
    3460:	00000d41 	.word	0x00000d41
    3464:	00000d4f 	.word	0x00000d4f

00003468 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    3468:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    346a:	2100      	movs	r1, #0
    346c:	2002      	movs	r0, #2
    346e:	4c0e      	ldr	r4, [pc, #56]	; (34a8 <EnableClockMngmnt1+0x40>)
    3470:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    3472:	f242 1113 	movw	r1, #8467	; 0x2113
    3476:	2011      	movs	r0, #17
    3478:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    347a:	2100      	movs	r1, #0
    347c:	2014      	movs	r0, #20
    347e:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    3480:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    3484:	201a      	movs	r0, #26
    3486:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    3488:	f643 512d 	movw	r1, #15661	; 0x3d2d
    348c:	201b      	movs	r0, #27
    348e:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    3490:	f247 011c 	movw	r1, #28700	; 0x701c
    3494:	2020      	movs	r0, #32
    3496:	47a0      	blx	r4
=======
    3494:	250f      	movs	r5, #15
    3496:	e01e      	b.n	34d6 <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3498:	4c16      	ldr	r4, [pc, #88]	; (34f4 <spi_BB_Read+0xd8>)
    349a:	f04f 0820 	mov.w	r8, #32
    349e:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    34a2:	200a      	movs	r0, #10
    34a4:	4e14      	ldr	r6, [pc, #80]	; (34f8 <spi_BB_Read+0xdc>)
    34a6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34a8:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    34ac:	a801      	add	r0, sp, #4
    34ae:	4b13      	ldr	r3, [pc, #76]	; (34fc <spi_BB_Read+0xe0>)
    34b0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    34b2:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    34b4:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    34b6:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    34b8:	405c      	eors	r4, r3
    34ba:	4014      	ands	r4, r2
    34bc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    34be:	a801      	add	r0, sp, #4
    34c0:	4b0f      	ldr	r3, [pc, #60]	; (3500 <spi_BB_Read+0xe4>)
    34c2:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    34c4:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    34c8:	40ac      	lsls	r4, r5
    34ca:	433c      	orrs	r4, r7
    34cc:	b2a7      	uxth	r7, r4
		delay_us(10);	
    34ce:	200a      	movs	r0, #10
    34d0:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    34d2:	3d01      	subs	r5, #1
    34d4:	b26d      	sxtb	r5, r5
    34d6:	2d00      	cmp	r5, #0
    34d8:	dade      	bge.n	3498 <spi_BB_Read+0x7c>
	}
	delay_us(10);
    34da:	200a      	movs	r0, #10
    34dc:	4b06      	ldr	r3, [pc, #24]	; (34f8 <spi_BB_Read+0xdc>)
    34de:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    34e4:	4b03      	ldr	r3, [pc, #12]	; (34f4 <spi_BB_Read+0xd8>)
    34e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    34ea:	4638      	mov	r0, r7
    34ec:	b002      	add	sp, #8
    34ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34f2:	bf00      	nop
    34f4:	41008000 	.word	0x41008000
    34f8:	00000db5 	.word	0x00000db5
    34fc:	00000d41 	.word	0x00000d41
    3500:	00000d4f 	.word	0x00000d4f

00003504 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    3504:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    3506:	2100      	movs	r1, #0
    3508:	2002      	movs	r0, #2
    350a:	4c0e      	ldr	r4, [pc, #56]	; (3544 <EnableClockMngmnt1+0x40>)
    350c:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    350e:	f242 1113 	movw	r1, #8467	; 0x2113
    3512:	2011      	movs	r0, #17
    3514:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    3516:	2100      	movs	r1, #0
    3518:	2014      	movs	r0, #20
    351a:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    351c:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    3520:	201a      	movs	r0, #26
    3522:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    3524:	f643 512d 	movw	r1, #15661	; 0x3d2d
    3528:	201b      	movs	r0, #27
    352a:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    352c:	f247 011c 	movw	r1, #28700	; 0x701c
    3530:	2020      	movs	r0, #32
    3532:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
<<<<<<< HEAD
    3498:	2100      	movs	r1, #0
    349a:	2008      	movs	r0, #8
    349c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    349e:	2107      	movs	r1, #7
    34a0:	2010      	movs	r0, #16
    34a2:	47a0      	blx	r4
    34a4:	bd10      	pop	{r4, pc}
    34a6:	bf00      	nop
    34a8:	0000323d 	.word	0x0000323d

000034ac <EnableClockMngmnt2>:
=======
    3534:	2100      	movs	r1, #0
    3536:	2008      	movs	r0, #8
    3538:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    353a:	2107      	movs	r1, #7
    353c:	2010      	movs	r0, #16
    353e:	47a0      	blx	r4
    3540:	bd10      	pop	{r4, pc}
    3542:	bf00      	nop
    3544:	0000334d 	.word	0x0000334d

00003548 <EnableClockMngmnt2>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
<<<<<<< HEAD
    34ac:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    34ae:	2100      	movs	r1, #0
    34b0:	2009      	movs	r0, #9
    34b2:	4c05      	ldr	r4, [pc, #20]	; (34c8 <EnableClockMngmnt2+0x1c>)
    34b4:	47a0      	blx	r4
=======
    3548:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    354a:	2100      	movs	r1, #0
    354c:	2009      	movs	r0, #9
    354e:	4c05      	ldr	r4, [pc, #20]	; (3564 <EnableClockMngmnt2+0x1c>)
    3550:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
<<<<<<< HEAD
    34b6:	f247 010e 	movw	r1, #28686	; 0x700e
    34ba:	2020      	movs	r0, #32
    34bc:	47a0      	blx	r4
=======
    3552:	f247 010e 	movw	r1, #28686	; 0x700e
    3556:	2020      	movs	r0, #32
    3558:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
<<<<<<< HEAD
    34be:	2101      	movs	r1, #1
    34c0:	2022      	movs	r0, #34	; 0x22
    34c2:	47a0      	blx	r4
    34c4:	bd10      	pop	{r4, pc}
    34c6:	bf00      	nop
    34c8:	0000323d 	.word	0x0000323d

000034cc <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    34cc:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    34ce:	2100      	movs	r1, #0
    34d0:	2002      	movs	r0, #2
    34d2:	4ccd      	ldr	r4, [pc, #820]	; (3808 <RequiredUploads+0x33c>)
    34d4:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    34d6:	2100      	movs	r1, #0
    34d8:	2008      	movs	r0, #8
    34da:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    34dc:	2100      	movs	r1, #0
    34de:	2009      	movs	r0, #9
    34e0:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    34e2:	2100      	movs	r1, #0
    34e4:	200a      	movs	r0, #10
    34e6:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    34e8:	2100      	movs	r1, #0
    34ea:	2014      	movs	r0, #20
    34ec:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    34ee:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    34f2:	201a      	movs	r0, #26
    34f4:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    34f6:	f643 512d 	movw	r1, #15661	; 0x3d2d
    34fa:	201b      	movs	r0, #27
    34fc:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    34fe:	f247 010f 	movw	r1, #28687	; 0x700f
    3502:	2020      	movs	r0, #32
    3504:	47a0      	blx	r4
=======
    355a:	2101      	movs	r1, #1
    355c:	2022      	movs	r0, #34	; 0x22
    355e:	47a0      	blx	r4
    3560:	bd10      	pop	{r4, pc}
    3562:	bf00      	nop
    3564:	0000334d 	.word	0x0000334d

00003568 <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    3568:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    356a:	2100      	movs	r1, #0
    356c:	2002      	movs	r0, #2
    356e:	4ccd      	ldr	r4, [pc, #820]	; (38a4 <RequiredUploads+0x33c>)
    3570:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    3572:	2100      	movs	r1, #0
    3574:	2008      	movs	r0, #8
    3576:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    3578:	2100      	movs	r1, #0
    357a:	2009      	movs	r0, #9
    357c:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    357e:	2100      	movs	r1, #0
    3580:	200a      	movs	r0, #10
    3582:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    3584:	2100      	movs	r1, #0
    3586:	2014      	movs	r0, #20
    3588:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    358a:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    358e:	201a      	movs	r0, #26
    3590:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    3592:	f643 512d 	movw	r1, #15661	; 0x3d2d
    3596:	201b      	movs	r0, #27
    3598:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    359a:	f247 010f 	movw	r1, #28687	; 0x700f
    359e:	2020      	movs	r0, #32
    35a0:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
<<<<<<< HEAD
    3506:	2101      	movs	r1, #1
    3508:	2022      	movs	r0, #34	; 0x22
    350a:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    350c:	2107      	movs	r1, #7
    350e:	2028      	movs	r0, #40	; 0x28
    3510:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    3512:	f640 015f 	movw	r1, #2143	; 0x85f
    3516:	2029      	movs	r0, #41	; 0x29
    3518:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    351a:	f244 1103 	movw	r1, #16643	; 0x4103
    351e:	202a      	movs	r0, #42	; 0x2a
    3520:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    3522:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    3526:	202b      	movs	r0, #43	; 0x2b
    3528:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    352a:	2101      	movs	r1, #1
    352c:	2030      	movs	r0, #48	; 0x30
    352e:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3530:	2101      	movs	r1, #1
    3532:	2040      	movs	r0, #64	; 0x40
    3534:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3536:	f643 012a 	movw	r1, #14378	; 0x382a
    353a:	2041      	movs	r0, #65	; 0x41
    353c:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    353e:	f245 31c8 	movw	r1, #21448	; 0x53c8
    3542:	2042      	movs	r0, #66	; 0x42
    3544:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    3546:	f240 6165 	movw	r1, #1637	; 0x665
    354a:	2043      	movs	r0, #67	; 0x43
    354c:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    354e:	2185      	movs	r1, #133	; 0x85
    3550:	2044      	movs	r0, #68	; 0x44
    3552:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    3554:	f640 0188 	movw	r1, #2184	; 0x888
    3558:	2045      	movs	r0, #69	; 0x45
    355a:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    355c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    3560:	2046      	movs	r0, #70	; 0x46
    3562:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    3564:	f648 0188 	movw	r1, #34952	; 0x8888
    3568:	2047      	movs	r0, #71	; 0x47
    356a:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    356c:	f240 1117 	movw	r1, #279	; 0x117
    3570:	2048      	movs	r0, #72	; 0x48
    3572:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    3574:	2100      	movs	r1, #0
    3576:	2070      	movs	r0, #112	; 0x70
    3578:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    357a:	f244 710a 	movw	r1, #18186	; 0x470a
    357e:	2080      	movs	r0, #128	; 0x80
    3580:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    3582:	f248 0101 	movw	r1, #32769	; 0x8001
    3586:	2081      	movs	r0, #129	; 0x81
    3588:	47a0      	blx	r4
=======
    35a2:	2101      	movs	r1, #1
    35a4:	2022      	movs	r0, #34	; 0x22
    35a6:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    35a8:	2107      	movs	r1, #7
    35aa:	2028      	movs	r0, #40	; 0x28
    35ac:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    35ae:	f640 015f 	movw	r1, #2143	; 0x85f
    35b2:	2029      	movs	r0, #41	; 0x29
    35b4:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    35b6:	f244 1103 	movw	r1, #16643	; 0x4103
    35ba:	202a      	movs	r0, #42	; 0x2a
    35bc:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    35be:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    35c2:	202b      	movs	r0, #43	; 0x2b
    35c4:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    35c6:	2101      	movs	r1, #1
    35c8:	2030      	movs	r0, #48	; 0x30
    35ca:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    35cc:	2101      	movs	r1, #1
    35ce:	2040      	movs	r0, #64	; 0x40
    35d0:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    35d2:	f643 012a 	movw	r1, #14378	; 0x382a
    35d6:	2041      	movs	r0, #65	; 0x41
    35d8:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    35da:	f245 31c8 	movw	r1, #21448	; 0x53c8
    35de:	2042      	movs	r0, #66	; 0x42
    35e0:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    35e2:	f240 6165 	movw	r1, #1637	; 0x665
    35e6:	2043      	movs	r0, #67	; 0x43
    35e8:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    35ea:	2185      	movs	r1, #133	; 0x85
    35ec:	2044      	movs	r0, #68	; 0x44
    35ee:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    35f0:	f640 0188 	movw	r1, #2184	; 0x888
    35f4:	2045      	movs	r0, #69	; 0x45
    35f6:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    35f8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    35fc:	2046      	movs	r0, #70	; 0x46
    35fe:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    3600:	f648 0188 	movw	r1, #34952	; 0x8888
    3604:	2047      	movs	r0, #71	; 0x47
    3606:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    3608:	f240 1117 	movw	r1, #279	; 0x117
    360c:	2048      	movs	r0, #72	; 0x48
    360e:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    3610:	2100      	movs	r1, #0
    3612:	2070      	movs	r0, #112	; 0x70
    3614:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    3616:	f244 710a 	movw	r1, #18186	; 0x470a
    361a:	2080      	movs	r0, #128	; 0x80
    361c:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    361e:	f248 0101 	movw	r1, #32769	; 0x8001
    3622:	2081      	movs	r0, #129	; 0x81
    3624:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
<<<<<<< HEAD
    358a:	2115      	movs	r1, #21
    358c:	2082      	movs	r0, #130	; 0x82
    358e:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function
    3590:	f640 0101 	movw	r1, #2049	; 0x801
    3594:	20c0      	movs	r0, #192	; 0xc0
    3596:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    3598:	21e4      	movs	r1, #228	; 0xe4
    359a:	20c2      	movs	r0, #194	; 0xc2
    359c:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    359e:	f44f 7182 	mov.w	r1, #260	; 0x104
    35a2:	20c5      	movs	r0, #197	; 0xc5
    35a4:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    35a6:	21a7      	movs	r1, #167	; 0xa7
    35a8:	20c7      	movs	r0, #199	; 0xc7
    35aa:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    35ac:	f640 41e4 	movw	r1, #3300	; 0xce4
    35b0:	20c8      	movs	r0, #200	; 0xc8
    35b2:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    35b4:	f640 41e4 	movw	r1, #3300	; 0xce4
    35b8:	20c9      	movs	r0, #201	; 0xc9
    35ba:	47a0      	blx	r4
=======
    3626:	2115      	movs	r1, #21
    3628:	2082      	movs	r0, #130	; 0x82
    362a:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function
    362c:	f640 0101 	movw	r1, #2049	; 0x801
    3630:	20c0      	movs	r0, #192	; 0xc0
    3632:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    3634:	21e4      	movs	r1, #228	; 0xe4
    3636:	20c2      	movs	r0, #194	; 0xc2
    3638:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    363a:	f44f 7182 	mov.w	r1, #260	; 0x104
    363e:	20c5      	movs	r0, #197	; 0xc5
    3640:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    3642:	21a7      	movs	r1, #167	; 0xa7
    3644:	20c7      	movs	r0, #199	; 0xc7
    3646:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    3648:	f640 41e4 	movw	r1, #3300	; 0xce4
    364c:	20c8      	movs	r0, #200	; 0xc8
    364e:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    3650:	f640 41e4 	movw	r1, #3300	; 0xce4
    3654:	20c9      	movs	r0, #201	; 0xc9
    3656:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
<<<<<<< HEAD
    35bc:	21e4      	movs	r1, #228	; 0xe4
    35be:	20cc      	movs	r0, #204	; 0xcc
    35c0:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    35c2:	2114      	movs	r1, #20
    35c4:	20cf      	movs	r0, #207	; 0xcf
    35c6:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    35c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    35cc:	20d6      	movs	r0, #214	; 0xd6
    35ce:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    35d0:	f241 011f 	movw	r1, #4127	; 0x101f
    35d4:	20d7      	movs	r0, #215	; 0xd7
    35d6:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    35d8:	2100      	movs	r1, #0
    35da:	20d8      	movs	r0, #216	; 0xd8
    35dc:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    35de:	2123      	movs	r1, #35	; 0x23
    35e0:	20db      	movs	r0, #219	; 0xdb
    35e2:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    35e4:	f643 412b 	movw	r1, #15403	; 0x3c2b
    35e8:	20dc      	movs	r0, #220	; 0xdc
    35ea:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    35ec:	f642 314d 	movw	r1, #11085	; 0x2b4d
    35f0:	20dd      	movs	r0, #221	; 0xdd
    35f2:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    35f4:	f643 615e 	movw	r1, #15966	; 0x3e5e
    35f8:	20e0      	movs	r0, #224	; 0xe0
    35fa:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    35fc:	2149      	movs	r1, #73	; 0x49
    35fe:	20d3      	movs	r0, #211	; 0xd3
    3600:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3602:	2100      	movs	r1, #0
    3604:	20d8      	movs	r0, #216	; 0xd8
    3606:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3608:	2123      	movs	r1, #35	; 0x23
    360a:	20db      	movs	r0, #219	; 0xdb
    360c:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    360e:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3612:	20dc      	movs	r0, #220	; 0xdc
    3614:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3616:	f642 314d 	movw	r1, #11085	; 0x2b4d
    361a:	20dd      	movs	r0, #221	; 0xdd
    361c:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    361e:	f240 2199 	movw	r1, #665	; 0x299
    3622:	20e6      	movs	r0, #230	; 0xe6
    3624:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    3626:	f44f 7154 	mov.w	r1, #848	; 0x350
    362a:	20e7      	movs	r0, #231	; 0xe7
    362c:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    362e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3632:	20e8      	movs	r0, #232	; 0xe8
    3634:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3636:	21e1      	movs	r1, #225	; 0xe1
    3638:	20eb      	movs	r0, #235	; 0xeb
    363a:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    363c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3640:	f44f 7080 	mov.w	r0, #256	; 0x100
    3644:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    3646:	f24b 0119 	movw	r1, #45081	; 0xb019
    364a:	f44f 7081 	mov.w	r0, #258	; 0x102
    364e:	47a0      	blx	r4
=======
    3658:	21e4      	movs	r1, #228	; 0xe4
    365a:	20cc      	movs	r0, #204	; 0xcc
    365c:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    365e:	2114      	movs	r1, #20
    3660:	20cf      	movs	r0, #207	; 0xcf
    3662:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3664:	f44f 7180 	mov.w	r1, #256	; 0x100
    3668:	20d6      	movs	r0, #214	; 0xd6
    366a:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    366c:	f241 011f 	movw	r1, #4127	; 0x101f
    3670:	20d7      	movs	r0, #215	; 0xd7
    3672:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3674:	2100      	movs	r1, #0
    3676:	20d8      	movs	r0, #216	; 0xd8
    3678:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    367a:	2123      	movs	r1, #35	; 0x23
    367c:	20db      	movs	r0, #219	; 0xdb
    367e:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3680:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3684:	20dc      	movs	r0, #220	; 0xdc
    3686:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3688:	f642 314d 	movw	r1, #11085	; 0x2b4d
    368c:	20dd      	movs	r0, #221	; 0xdd
    368e:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    3690:	f643 615e 	movw	r1, #15966	; 0x3e5e
    3694:	20e0      	movs	r0, #224	; 0xe0
    3696:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    3698:	2149      	movs	r1, #73	; 0x49
    369a:	20d3      	movs	r0, #211	; 0xd3
    369c:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    369e:	2100      	movs	r1, #0
    36a0:	20d8      	movs	r0, #216	; 0xd8
    36a2:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    36a4:	2123      	movs	r1, #35	; 0x23
    36a6:	20db      	movs	r0, #219	; 0xdb
    36a8:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    36aa:	f643 412b 	movw	r1, #15403	; 0x3c2b
    36ae:	20dc      	movs	r0, #220	; 0xdc
    36b0:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    36b2:	f642 314d 	movw	r1, #11085	; 0x2b4d
    36b6:	20dd      	movs	r0, #221	; 0xdd
    36b8:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    36ba:	f240 2199 	movw	r1, #665	; 0x299
    36be:	20e6      	movs	r0, #230	; 0xe6
    36c0:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    36c2:	f44f 7154 	mov.w	r1, #848	; 0x350
    36c6:	20e7      	movs	r0, #231	; 0xe7
    36c8:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    36ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    36ce:	20e8      	movs	r0, #232	; 0xe8
    36d0:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    36d2:	21e1      	movs	r1, #225	; 0xe1
    36d4:	20eb      	movs	r0, #235	; 0xeb
    36d6:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    36d8:	f24b 0119 	movw	r1, #45081	; 0xb019
    36dc:	f44f 7080 	mov.w	r0, #256	; 0x100
    36e0:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    36e2:	f24b 0119 	movw	r1, #45081	; 0xb019
    36e6:	f44f 7081 	mov.w	r0, #258	; 0x102
    36ea:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
<<<<<<< HEAD
    3650:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3654:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3658:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    365a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    365e:	f240 1081 	movw	r0, #385	; 0x181
    3662:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3664:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3668:	f44f 70c1 	mov.w	r0, #386	; 0x182
    366c:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    366e:	f64f 3112 	movw	r1, #64274	; 0xfb12
    3672:	f240 1083 	movw	r0, #387	; 0x183
    3676:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3678:	f64f 1112 	movw	r1, #63762	; 0xf912
    367c:	f44f 70c2 	mov.w	r0, #388	; 0x184
    3680:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    3682:	f64f 1103 	movw	r1, #63747	; 0xf903
    3686:	f240 1085 	movw	r0, #389	; 0x185
    368a:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    368c:	f64f 0102 	movw	r1, #63490	; 0xf802
    3690:	f44f 70c3 	mov.w	r0, #390	; 0x186
    3694:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    3696:	f24f 310f 	movw	r1, #62223	; 0xf30f
    369a:	f240 1087 	movw	r0, #391	; 0x187
    369e:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    36a0:	f24f 310f 	movw	r1, #62223	; 0xf30f
    36a4:	f44f 70c4 	mov.w	r0, #392	; 0x188
    36a8:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    36aa:	f24f 310f 	movw	r1, #62223	; 0xf30f
    36ae:	f240 1089 	movw	r0, #393	; 0x189
    36b2:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    36b4:	f24f 310a 	movw	r1, #62218	; 0xf30a
    36b8:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    36bc:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    36be:	f24f 1101 	movw	r1, #61697	; 0xf101
    36c2:	f240 108b 	movw	r0, #395	; 0x18b
    36c6:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    36c8:	f24f 010a 	movw	r1, #61450	; 0xf00a
    36cc:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    36d0:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    36d2:	f24f 214b 	movw	r1, #62027	; 0xf24b
    36d6:	f240 108d 	movw	r0, #397	; 0x18d
    36da:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    36dc:	f24f 2101 	movw	r1, #61953	; 0xf201
    36e0:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    36e4:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    36e6:	f24f 2126 	movw	r1, #61990	; 0xf226
    36ea:	f240 108f 	movw	r0, #399	; 0x18f
    36ee:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    36f0:	f24f 0121 	movw	r1, #61473	; 0xf021
    36f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    36f8:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    36fa:	f24f 0101 	movw	r1, #61441	; 0xf001
    36fe:	f240 1091 	movw	r0, #401	; 0x191
    3702:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    3704:	f24f 4102 	movw	r1, #62466	; 0xf402
    3708:	f44f 70c9 	mov.w	r0, #402	; 0x192
    370c:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    370e:	f24f 0107 	movw	r1, #61447	; 0xf007
    3712:	f240 1093 	movw	r0, #403	; 0x193
    3716:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    3718:	f24f 210f 	movw	r1, #61967	; 0xf20f
    371c:	f44f 70ca 	mov.w	r0, #404	; 0x194
    3720:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    3722:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3726:	f240 1095 	movw	r0, #405	; 0x195
    372a:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    372c:	f24f 2102 	movw	r1, #61954	; 0xf202
    3730:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3734:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3736:	f24f 0106 	movw	r1, #61446	; 0xf006
    373a:	f240 1097 	movw	r0, #407	; 0x197
    373e:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3740:	f64e 4108 	movw	r1, #60424	; 0xec08
    3744:	f44f 70cc 	mov.w	r0, #408	; 0x198
    3748:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    374a:	f64c 0101 	movw	r1, #51201	; 0xc801
    374e:	f240 1099 	movw	r0, #409	; 0x199
    3752:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3754:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3758:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    375c:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    375e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3762:	f240 10a3 	movw	r0, #419	; 0x1a3
    3766:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3768:	f64c 4102 	movw	r1, #52226	; 0xcc02
    376c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    3770:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    3772:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3776:	f240 10a5 	movw	r0, #421	; 0x1a5
    377a:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    377c:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3780:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    3784:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    3786:	f64c 4101 	movw	r1, #52225	; 0xcc01
    378a:	f240 10a7 	movw	r0, #423	; 0x1a7
    378e:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    3790:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3794:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    3798:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    379a:	f64c 0105 	movw	r1, #51205	; 0xc805
    379e:	f240 10a9 	movw	r0, #425	; 0x1a9
    37a2:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    37a4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    37a8:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    37ac:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    37ae:	2130      	movs	r1, #48	; 0x30
    37b0:	f240 10ab 	movw	r0, #427	; 0x1ab
    37b4:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    37b6:	f242 017b 	movw	r1, #8315	; 0x207b
    37ba:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    37be:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    37c0:	f242 0171 	movw	r1, #8305	; 0x2071
    37c4:	f240 10ad 	movw	r0, #429	; 0x1ad
    37c8:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    37ca:	2171      	movs	r1, #113	; 0x71
    37cc:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    37d0:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    37d2:	f241 017f 	movw	r1, #4223	; 0x107f
    37d6:	f240 10af 	movw	r0, #431	; 0x1af
    37da:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    37dc:	f241 0172 	movw	r1, #4210	; 0x1072
    37e0:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    37e4:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    37e6:	f241 0174 	movw	r1, #4212	; 0x1074
    37ea:	f240 10b1 	movw	r0, #433	; 0x1b1
    37ee:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    37f0:	2171      	movs	r1, #113	; 0x71
    37f2:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    37f6:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    37f8:	2131      	movs	r1, #49	; 0x31
    37fa:	f240 10b3 	movw	r0, #435	; 0x1b3
    37fe:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    3800:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3804:	e002      	b.n	380c <RequiredUploads+0x340>
    3806:	bf00      	nop
    3808:	0000323d 	.word	0x0000323d
    380c:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    3810:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    3812:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3816:	f240 10b5 	movw	r0, #437	; 0x1b5
    381a:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    381c:	21b1      	movs	r1, #177	; 0xb1
    381e:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    3822:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    3824:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3828:	f240 10b7 	movw	r0, #439	; 0x1b7
    382c:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    382e:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3832:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3836:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3838:	f241 01b4 	movw	r1, #4276	; 0x10b4
    383c:	f240 10b9 	movw	r0, #441	; 0x1b9
    3840:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    3842:	21b1      	movs	r1, #177	; 0xb1
    3844:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    3848:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    384a:	2130      	movs	r1, #48	; 0x30
    384c:	f240 10bb 	movw	r0, #443	; 0x1bb
    3850:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    3852:	2130      	movs	r1, #48	; 0x30
    3854:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    3858:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    385a:	f242 117b 	movw	r1, #8571	; 0x217b
    385e:	f240 10bd 	movw	r0, #445	; 0x1bd
    3862:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3864:	f242 0171 	movw	r1, #8305	; 0x2071
    3868:	f44f 70df 	mov.w	r0, #446	; 0x1be
    386c:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    386e:	2171      	movs	r1, #113	; 0x71
    3870:	f240 10bf 	movw	r0, #447	; 0x1bf
    3874:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3876:	f241 017f 	movw	r1, #4223	; 0x107f
    387a:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    387e:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3880:	f241 0172 	movw	r1, #4210	; 0x1072
    3884:	f240 10c1 	movw	r0, #449	; 0x1c1
    3888:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    388a:	f241 0174 	movw	r1, #4212	; 0x1074
    388e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    3892:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3894:	2171      	movs	r1, #113	; 0x71
    3896:	f240 10c3 	movw	r0, #451	; 0x1c3
    389a:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    389c:	2131      	movs	r1, #49	; 0x31
    389e:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    38a2:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    38a4:	f242 11bb 	movw	r1, #8635	; 0x21bb
    38a8:	f240 10c5 	movw	r0, #453	; 0x1c5
    38ac:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    38ae:	f242 01b1 	movw	r1, #8369	; 0x20b1
    38b2:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    38b6:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    38b8:	21b1      	movs	r1, #177	; 0xb1
    38ba:	f240 10c7 	movw	r0, #455	; 0x1c7
    38be:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    38c0:	f241 01bf 	movw	r1, #4287	; 0x10bf
    38c4:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    38c8:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    38ca:	f241 01b2 	movw	r1, #4274	; 0x10b2
    38ce:	f240 10c9 	movw	r0, #457	; 0x1c9
    38d2:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    38d4:	f241 01b4 	movw	r1, #4276	; 0x10b4
    38d8:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    38dc:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    38de:	21b1      	movs	r1, #177	; 0xb1
    38e0:	f240 10cb 	movw	r0, #459	; 0x1cb
    38e4:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    38e6:	2130      	movs	r1, #48	; 0x30
    38e8:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    38ec:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    38ee:	2130      	movs	r1, #48	; 0x30
    38f0:	f240 10cd 	movw	r0, #461	; 0x1cd
    38f4:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    38f6:	f242 117b 	movw	r1, #8571	; 0x217b
    38fa:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    38fe:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    3900:	f242 0171 	movw	r1, #8305	; 0x2071
    3904:	f240 10cf 	movw	r0, #463	; 0x1cf
    3908:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    390a:	2171      	movs	r1, #113	; 0x71
    390c:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    3910:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    3912:	f241 0171 	movw	r1, #4209	; 0x1071
    3916:	f240 10d1 	movw	r0, #465	; 0x1d1
    391a:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    391c:	2171      	movs	r1, #113	; 0x71
    391e:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    3922:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    3924:	2131      	movs	r1, #49	; 0x31
    3926:	f240 10d3 	movw	r0, #467	; 0x1d3
    392a:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    392c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3930:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3934:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3936:	f242 01b1 	movw	r1, #8369	; 0x20b1
    393a:	f240 10d5 	movw	r0, #469	; 0x1d5
    393e:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3940:	21b1      	movs	r1, #177	; 0xb1
    3942:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    3946:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    3948:	f241 01b3 	movw	r1, #4275	; 0x10b3
    394c:	f240 10d7 	movw	r0, #471	; 0x1d7
    3950:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    3952:	f241 01b1 	movw	r1, #4273	; 0x10b1
    3956:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    395a:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    395c:	21b1      	movs	r1, #177	; 0xb1
    395e:	f240 10d9 	movw	r0, #473	; 0x1d9
    3962:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3964:	213f      	movs	r1, #63	; 0x3f
    3966:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    396a:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    396c:	2132      	movs	r1, #50	; 0x32
    396e:	f240 10db 	movw	r0, #475	; 0x1db
    3972:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3974:	2130      	movs	r1, #48	; 0x30
    3976:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    397a:	47a0      	blx	r4
    397c:	bd10      	pop	{r4, pc}
    397e:	bf00      	nop

00003980 <SoftPowerUp>:
}

void SoftPowerUp() {
    3980:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3982:	2100      	movs	r1, #0
    3984:	200a      	movs	r0, #10
    3986:	4c0d      	ldr	r4, [pc, #52]	; (39bc <SoftPowerUp+0x3c>)
    3988:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    398a:	f247 010f 	movw	r1, #28687	; 0x700f
    398e:	2020      	movs	r0, #32
    3990:	47a0      	blx	r4
=======
    36ec:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    36f0:	f44f 70c0 	mov.w	r0, #384	; 0x180
    36f4:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    36f6:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    36fa:	f240 1081 	movw	r0, #385	; 0x181
    36fe:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3700:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3704:	f44f 70c1 	mov.w	r0, #386	; 0x182
    3708:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    370a:	f64f 3112 	movw	r1, #64274	; 0xfb12
    370e:	f240 1083 	movw	r0, #387	; 0x183
    3712:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3714:	f64f 1112 	movw	r1, #63762	; 0xf912
    3718:	f44f 70c2 	mov.w	r0, #388	; 0x184
    371c:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    371e:	f64f 1103 	movw	r1, #63747	; 0xf903
    3722:	f240 1085 	movw	r0, #389	; 0x185
    3726:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    3728:	f64f 0102 	movw	r1, #63490	; 0xf802
    372c:	f44f 70c3 	mov.w	r0, #390	; 0x186
    3730:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    3732:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3736:	f240 1087 	movw	r0, #391	; 0x187
    373a:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    373c:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3740:	f44f 70c4 	mov.w	r0, #392	; 0x188
    3744:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    3746:	f24f 310f 	movw	r1, #62223	; 0xf30f
    374a:	f240 1089 	movw	r0, #393	; 0x189
    374e:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3750:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3754:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    3758:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    375a:	f24f 1101 	movw	r1, #61697	; 0xf101
    375e:	f240 108b 	movw	r0, #395	; 0x18b
    3762:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3764:	f24f 010a 	movw	r1, #61450	; 0xf00a
    3768:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    376c:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    376e:	f24f 214b 	movw	r1, #62027	; 0xf24b
    3772:	f240 108d 	movw	r0, #397	; 0x18d
    3776:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    3778:	f24f 2101 	movw	r1, #61953	; 0xf201
    377c:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    3780:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    3782:	f24f 2126 	movw	r1, #61990	; 0xf226
    3786:	f240 108f 	movw	r0, #399	; 0x18f
    378a:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    378c:	f24f 0121 	movw	r1, #61473	; 0xf021
    3790:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3794:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    3796:	f24f 0101 	movw	r1, #61441	; 0xf001
    379a:	f240 1091 	movw	r0, #401	; 0x191
    379e:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    37a0:	f24f 4102 	movw	r1, #62466	; 0xf402
    37a4:	f44f 70c9 	mov.w	r0, #402	; 0x192
    37a8:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    37aa:	f24f 0107 	movw	r1, #61447	; 0xf007
    37ae:	f240 1093 	movw	r0, #403	; 0x193
    37b2:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    37b4:	f24f 210f 	movw	r1, #61967	; 0xf20f
    37b8:	f44f 70ca 	mov.w	r0, #404	; 0x194
    37bc:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    37be:	f24f 210f 	movw	r1, #61967	; 0xf20f
    37c2:	f240 1095 	movw	r0, #405	; 0x195
    37c6:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    37c8:	f24f 2102 	movw	r1, #61954	; 0xf202
    37cc:	f44f 70cb 	mov.w	r0, #406	; 0x196
    37d0:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    37d2:	f24f 0106 	movw	r1, #61446	; 0xf006
    37d6:	f240 1097 	movw	r0, #407	; 0x197
    37da:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    37dc:	f64e 4108 	movw	r1, #60424	; 0xec08
    37e0:	f44f 70cc 	mov.w	r0, #408	; 0x198
    37e4:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    37e6:	f64c 0101 	movw	r1, #51201	; 0xc801
    37ea:	f240 1099 	movw	r0, #409	; 0x199
    37ee:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    37f0:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    37f4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    37f8:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    37fa:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    37fe:	f240 10a3 	movw	r0, #419	; 0x1a3
    3802:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3804:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3808:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    380c:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    380e:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3812:	f240 10a5 	movw	r0, #421	; 0x1a5
    3816:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    3818:	f64c 4102 	movw	r1, #52226	; 0xcc02
    381c:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    3820:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    3822:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3826:	f240 10a7 	movw	r0, #423	; 0x1a7
    382a:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    382c:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3830:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    3834:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    3836:	f64c 0105 	movw	r1, #51205	; 0xc805
    383a:	f240 10a9 	movw	r0, #425	; 0x1a9
    383e:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3840:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3844:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    3848:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    384a:	2130      	movs	r1, #48	; 0x30
    384c:	f240 10ab 	movw	r0, #427	; 0x1ab
    3850:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3852:	f242 017b 	movw	r1, #8315	; 0x207b
    3856:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    385a:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    385c:	f242 0171 	movw	r1, #8305	; 0x2071
    3860:	f240 10ad 	movw	r0, #429	; 0x1ad
    3864:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    3866:	2171      	movs	r1, #113	; 0x71
    3868:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    386c:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    386e:	f241 017f 	movw	r1, #4223	; 0x107f
    3872:	f240 10af 	movw	r0, #431	; 0x1af
    3876:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    3878:	f241 0172 	movw	r1, #4210	; 0x1072
    387c:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    3880:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    3882:	f241 0174 	movw	r1, #4212	; 0x1074
    3886:	f240 10b1 	movw	r0, #433	; 0x1b1
    388a:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    388c:	2171      	movs	r1, #113	; 0x71
    388e:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    3892:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    3894:	2131      	movs	r1, #49	; 0x31
    3896:	f240 10b3 	movw	r0, #435	; 0x1b3
    389a:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    389c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    38a0:	e002      	b.n	38a8 <RequiredUploads+0x340>
    38a2:	bf00      	nop
    38a4:	0000334d 	.word	0x0000334d
    38a8:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    38ac:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    38ae:	f242 01b1 	movw	r1, #8369	; 0x20b1
    38b2:	f240 10b5 	movw	r0, #437	; 0x1b5
    38b6:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    38b8:	21b1      	movs	r1, #177	; 0xb1
    38ba:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    38be:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    38c0:	f241 01bf 	movw	r1, #4287	; 0x10bf
    38c4:	f240 10b7 	movw	r0, #439	; 0x1b7
    38c8:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    38ca:	f241 01b2 	movw	r1, #4274	; 0x10b2
    38ce:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    38d2:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    38d4:	f241 01b4 	movw	r1, #4276	; 0x10b4
    38d8:	f240 10b9 	movw	r0, #441	; 0x1b9
    38dc:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    38de:	21b1      	movs	r1, #177	; 0xb1
    38e0:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    38e4:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    38e6:	2130      	movs	r1, #48	; 0x30
    38e8:	f240 10bb 	movw	r0, #443	; 0x1bb
    38ec:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    38ee:	2130      	movs	r1, #48	; 0x30
    38f0:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    38f4:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    38f6:	f242 117b 	movw	r1, #8571	; 0x217b
    38fa:	f240 10bd 	movw	r0, #445	; 0x1bd
    38fe:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3900:	f242 0171 	movw	r1, #8305	; 0x2071
    3904:	f44f 70df 	mov.w	r0, #446	; 0x1be
    3908:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    390a:	2171      	movs	r1, #113	; 0x71
    390c:	f240 10bf 	movw	r0, #447	; 0x1bf
    3910:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3912:	f241 017f 	movw	r1, #4223	; 0x107f
    3916:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    391a:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    391c:	f241 0172 	movw	r1, #4210	; 0x1072
    3920:	f240 10c1 	movw	r0, #449	; 0x1c1
    3924:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    3926:	f241 0174 	movw	r1, #4212	; 0x1074
    392a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    392e:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3930:	2171      	movs	r1, #113	; 0x71
    3932:	f240 10c3 	movw	r0, #451	; 0x1c3
    3936:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    3938:	2131      	movs	r1, #49	; 0x31
    393a:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    393e:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3940:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3944:	f240 10c5 	movw	r0, #453	; 0x1c5
    3948:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    394a:	f242 01b1 	movw	r1, #8369	; 0x20b1
    394e:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3952:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3954:	21b1      	movs	r1, #177	; 0xb1
    3956:	f240 10c7 	movw	r0, #455	; 0x1c7
    395a:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    395c:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3960:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3964:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    3966:	f241 01b2 	movw	r1, #4274	; 0x10b2
    396a:	f240 10c9 	movw	r0, #457	; 0x1c9
    396e:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    3970:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3974:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    3978:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    397a:	21b1      	movs	r1, #177	; 0xb1
    397c:	f240 10cb 	movw	r0, #459	; 0x1cb
    3980:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    3982:	2130      	movs	r1, #48	; 0x30
    3984:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    3988:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    398a:	2130      	movs	r1, #48	; 0x30
    398c:	f240 10cd 	movw	r0, #461	; 0x1cd
    3990:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    3992:	f242 117b 	movw	r1, #8571	; 0x217b
    3996:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    399a:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    399c:	f242 0171 	movw	r1, #8305	; 0x2071
    39a0:	f240 10cf 	movw	r0, #463	; 0x1cf
    39a4:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    39a6:	2171      	movs	r1, #113	; 0x71
    39a8:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    39ac:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    39ae:	f241 0171 	movw	r1, #4209	; 0x1071
    39b2:	f240 10d1 	movw	r0, #465	; 0x1d1
    39b6:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    39b8:	2171      	movs	r1, #113	; 0x71
    39ba:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    39be:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    39c0:	2131      	movs	r1, #49	; 0x31
    39c2:	f240 10d3 	movw	r0, #467	; 0x1d3
    39c6:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    39c8:	f242 11bb 	movw	r1, #8635	; 0x21bb
    39cc:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    39d0:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    39d2:	f242 01b1 	movw	r1, #8369	; 0x20b1
    39d6:	f240 10d5 	movw	r0, #469	; 0x1d5
    39da:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    39dc:	21b1      	movs	r1, #177	; 0xb1
    39de:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    39e2:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    39e4:	f241 01b3 	movw	r1, #4275	; 0x10b3
    39e8:	f240 10d7 	movw	r0, #471	; 0x1d7
    39ec:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    39ee:	f241 01b1 	movw	r1, #4273	; 0x10b1
    39f2:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    39f6:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    39f8:	21b1      	movs	r1, #177	; 0xb1
    39fa:	f240 10d9 	movw	r0, #473	; 0x1d9
    39fe:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3a00:	213f      	movs	r1, #63	; 0x3f
    3a02:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    3a06:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    3a08:	2132      	movs	r1, #50	; 0x32
    3a0a:	f240 10db 	movw	r0, #475	; 0x1db
    3a0e:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3a10:	2130      	movs	r1, #48	; 0x30
    3a12:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    3a16:	47a0      	blx	r4
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	bf00      	nop

00003a1c <SoftPowerUp>:
}

void SoftPowerUp() {
    3a1c:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3a1e:	2100      	movs	r1, #0
    3a20:	200a      	movs	r0, #10
    3a22:	4c0d      	ldr	r4, [pc, #52]	; (3a58 <SoftPowerUp+0x3c>)
    3a24:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    3a26:	f247 010f 	movw	r1, #28687	; 0x700f
    3a2a:	2020      	movs	r0, #32
    3a2c:	47a0      	blx	r4
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
<<<<<<< HEAD
    3992:	2107      	movs	r1, #7
    3994:	2028      	movs	r0, #40	; 0x28
    3996:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3998:	f244 1113 	movw	r1, #16659	; 0x4113
    399c:	202a      	movs	r0, #42	; 0x2a
    399e:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    39a0:	2101      	movs	r1, #1
    39a2:	2030      	movs	r0, #48	; 0x30
    39a4:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    39a6:	2101      	movs	r1, #1
    39a8:	2040      	movs	r0, #64	; 0x40
    39aa:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    39ac:	f240 1127 	movw	r1, #295	; 0x127
    39b0:	2048      	movs	r0, #72	; 0x48
    39b2:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    39b4:	2100      	movs	r1, #0
    39b6:	2070      	movs	r0, #112	; 0x70
    39b8:	47a0      	blx	r4
    39ba:	bd10      	pop	{r4, pc}
    39bc:	0000323d 	.word	0x0000323d

000039c0 <python480Init>:
{
    39c0:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    39c2:	4b06      	ldr	r3, [pc, #24]	; (39dc <python480Init+0x1c>)
    39c4:	4798      	blx	r3
	delay_ms(10);
    39c6:	200a      	movs	r0, #10
    39c8:	4b05      	ldr	r3, [pc, #20]	; (39e0 <python480Init+0x20>)
    39ca:	4798      	blx	r3
	EnableClockMngmnt2();
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <python480Init+0x24>)
    39ce:	4798      	blx	r3
	RequiredUploads();
    39d0:	4b05      	ldr	r3, [pc, #20]	; (39e8 <python480Init+0x28>)
    39d2:	4798      	blx	r3
	SoftPowerUp();
    39d4:	4b05      	ldr	r3, [pc, #20]	; (39ec <python480Init+0x2c>)
    39d6:	4798      	blx	r3
    39d8:	bd08      	pop	{r3, pc}
    39da:	bf00      	nop
    39dc:	00003469 	.word	0x00003469
    39e0:	00000dd5 	.word	0x00000dd5
    39e4:	000034ad 	.word	0x000034ad
    39e8:	000034cd 	.word	0x000034cd
    39ec:	00003981 	.word	0x00003981

000039f0 <getCurrentTimeMS>:
	return timeMS;
    39f0:	4b01      	ldr	r3, [pc, #4]	; (39f8 <getCurrentTimeMS+0x8>)
    39f2:	6818      	ldr	r0, [r3, #0]
}
    39f4:	4770      	bx	lr
    39f6:	bf00      	nop
    39f8:	20000224 	.word	0x20000224

000039fc <getPropFromHeader>:
	return header32bit[headerPos];
    39fc:	4b02      	ldr	r3, [pc, #8]	; (3a08 <getPropFromHeader+0xc>)
    39fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3a02:	6840      	ldr	r0, [r0, #4]
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop
    3a08:	20000224 	.word	0x20000224

00003a0c <setExcitationLED>:

void setExcitationLED(uint32_t value, bool enable)
{
    3a0c:	b538      	push	{r3, r4, r5, lr}
    3a0e:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    3a10:	2864      	cmp	r0, #100	; 0x64
    3a12:	d900      	bls.n	3a16 <setExcitationLED+0xa>
		value = 100;
    3a14:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    3a16:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    3a1a:	490b      	ldr	r1, [pc, #44]	; (3a48 <setExcitationLED+0x3c>)
    3a1c:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // period and duty cycle
    3a20:	4c0a      	ldr	r4, [pc, #40]	; (3a4c <setExcitationLED+0x40>)
    3a22:	2200      	movs	r2, #0
    3a24:	0949      	lsrs	r1, r1, #5
    3a26:	4620      	mov	r0, r4
    3a28:	4b09      	ldr	r3, [pc, #36]	; (3a50 <setExcitationLED+0x44>)
    3a2a:	4798      	blx	r3
	pwm_enable(&PWM_0);
    3a2c:	4620      	mov	r0, r4
    3a2e:	4b09      	ldr	r3, [pc, #36]	; (3a54 <setExcitationLED+0x48>)
    3a30:	4798      	blx	r3
	if (level) {
    3a32:	b925      	cbnz	r5, 3a3e <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a34:	2202      	movs	r2, #2
    3a36:	4b08      	ldr	r3, [pc, #32]	; (3a58 <setExcitationLED+0x4c>)
    3a38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3a3c:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a3e:	2202      	movs	r2, #2
    3a40:	4b05      	ldr	r3, [pc, #20]	; (3a58 <setExcitationLED+0x4c>)
    3a42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3a46:	bd38      	pop	{r3, r4, r5, pc}
    3a48:	51eb851f 	.word	0x51eb851f
    3a4c:	20000698 	.word	0x20000698
    3a50:	00001169 	.word	0x00001169
    3a54:	0000112d 	.word	0x0000112d
    3a58:	41008000 	.word	0x41008000

00003a5c <setStatusLED>:
    3a5c:	b928      	cbnz	r0, 3a6a <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3a62:	4b05      	ldr	r3, [pc, #20]	; (3a78 <setStatusLED+0x1c>)
    3a64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3a68:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    3a6e:	4b02      	ldr	r3, [pc, #8]	; (3a78 <setStatusLED+0x1c>)
    3a70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	41008000 	.word	0x41008000

00003a7c <startRecording>:
=======
    3a2e:	2107      	movs	r1, #7
    3a30:	2028      	movs	r0, #40	; 0x28
    3a32:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3a34:	f244 1113 	movw	r1, #16659	; 0x4113
    3a38:	202a      	movs	r0, #42	; 0x2a
    3a3a:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    3a3c:	2101      	movs	r1, #1
    3a3e:	2030      	movs	r0, #48	; 0x30
    3a40:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3a42:	2101      	movs	r1, #1
    3a44:	2040      	movs	r0, #64	; 0x40
    3a46:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    3a48:	f240 1127 	movw	r1, #295	; 0x127
    3a4c:	2048      	movs	r0, #72	; 0x48
    3a4e:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3a50:	2100      	movs	r1, #0
    3a52:	2070      	movs	r0, #112	; 0x70
    3a54:	47a0      	blx	r4
    3a56:	bd10      	pop	{r4, pc}
    3a58:	0000334d 	.word	0x0000334d

00003a5c <python480Init>:
{
    3a5c:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    3a5e:	4b06      	ldr	r3, [pc, #24]	; (3a78 <python480Init+0x1c>)
    3a60:	4798      	blx	r3
	delay_ms(10);
    3a62:	200a      	movs	r0, #10
    3a64:	4b05      	ldr	r3, [pc, #20]	; (3a7c <python480Init+0x20>)
    3a66:	4798      	blx	r3
	EnableClockMngmnt2();
    3a68:	4b05      	ldr	r3, [pc, #20]	; (3a80 <python480Init+0x24>)
    3a6a:	4798      	blx	r3
	RequiredUploads();
    3a6c:	4b05      	ldr	r3, [pc, #20]	; (3a84 <python480Init+0x28>)
    3a6e:	4798      	blx	r3
	SoftPowerUp();
    3a70:	4b05      	ldr	r3, [pc, #20]	; (3a88 <python480Init+0x2c>)
    3a72:	4798      	blx	r3
    3a74:	bd08      	pop	{r3, pc}
    3a76:	bf00      	nop
    3a78:	00003505 	.word	0x00003505
    3a7c:	00000dd5 	.word	0x00000dd5
    3a80:	00003549 	.word	0x00003549
    3a84:	00003569 	.word	0x00003569
    3a88:	00003a1d 	.word	0x00003a1d

00003a8c <getCurrentTimeMS>:
	return timeMS;
    3a8c:	4b01      	ldr	r3, [pc, #4]	; (3a94 <getCurrentTimeMS+0x8>)
    3a8e:	6818      	ldr	r0, [r3, #0]
}
    3a90:	4770      	bx	lr
    3a92:	bf00      	nop
    3a94:	20000224 	.word	0x20000224

00003a98 <loadSDCardHeader>:
uint8_t loadSDCardHeader(void){
    3a98:	b508      	push	{r3, lr}
	sd_mmc_init_read_blocks(0,HEADER_BLOCK,1);
    3a9a:	2201      	movs	r2, #1
    3a9c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    3aa0:	2000      	movs	r0, #0
    3aa2:	4b07      	ldr	r3, [pc, #28]	; (3ac0 <loadSDCardHeader+0x28>)
    3aa4:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerBlock,1);
    3aa6:	2101      	movs	r1, #1
    3aa8:	4806      	ldr	r0, [pc, #24]	; (3ac4 <loadSDCardHeader+0x2c>)
    3aaa:	4b07      	ldr	r3, [pc, #28]	; (3ac8 <loadSDCardHeader+0x30>)
    3aac:	4798      	blx	r3
	if (sd_mmc_wait_end_of_read_blocks(false) == SD_MMC_OK)
    3aae:	2000      	movs	r0, #0
    3ab0:	4b06      	ldr	r3, [pc, #24]	; (3acc <loadSDCardHeader+0x34>)
    3ab2:	4798      	blx	r3
    3ab4:	b108      	cbz	r0, 3aba <loadSDCardHeader+0x22>
		return MS_ERROR;
    3ab6:	2000      	movs	r0, #0
}
    3ab8:	bd08      	pop	{r3, pc}
		return MS_SUCCESS;
    3aba:	2001      	movs	r0, #1
    3abc:	bd08      	pop	{r3, pc}
    3abe:	bf00      	nop
    3ac0:	00004ab9 	.word	0x00004ab9
    3ac4:	20000228 	.word	0x20000228
    3ac8:	00004b55 	.word	0x00004b55
    3acc:	00004ba1 	.word	0x00004ba1

00003ad0 <getPropFromHeader>:
	return header32bit[headerPos];
    3ad0:	4b02      	ldr	r3, [pc, #8]	; (3adc <getPropFromHeader+0xc>)
    3ad2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3ad6:	6840      	ldr	r0, [r0, #4]
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	20000224 	.word	0x20000224

00003ae0 <setConfigBlockProp>:
	configBlock32bit[position] = value;
    3ae0:	4b01      	ldr	r3, [pc, #4]	; (3ae8 <setConfigBlockProp+0x8>)
    3ae2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    3ae6:	4770      	bx	lr
    3ae8:	20000428 	.word	0x20000428

00003aec <setExcitationLED>:
	}
	*/
}

void setExcitationLED(uint32_t value, bool enable)
{
    3aec:	b538      	push	{r3, r4, r5, lr}
    3aee:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    3af0:	2864      	cmp	r0, #100	; 0x64
    3af2:	d900      	bls.n	3af6 <setExcitationLED+0xa>
		value = 100;
    3af4:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    3af6:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    3afa:	490b      	ldr	r1, [pc, #44]	; (3b28 <setExcitationLED+0x3c>)
    3afc:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // period and duty cycle
    3b00:	4c0a      	ldr	r4, [pc, #40]	; (3b2c <setExcitationLED+0x40>)
    3b02:	2200      	movs	r2, #0
    3b04:	0949      	lsrs	r1, r1, #5
    3b06:	4620      	mov	r0, r4
    3b08:	4b09      	ldr	r3, [pc, #36]	; (3b30 <setExcitationLED+0x44>)
    3b0a:	4798      	blx	r3
	pwm_enable(&PWM_0);
    3b0c:	4620      	mov	r0, r4
    3b0e:	4b09      	ldr	r3, [pc, #36]	; (3b34 <setExcitationLED+0x48>)
    3b10:	4798      	blx	r3
	if (level) {
    3b12:	b925      	cbnz	r5, 3b1e <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b14:	2202      	movs	r2, #2
    3b16:	4b08      	ldr	r3, [pc, #32]	; (3b38 <setExcitationLED+0x4c>)
    3b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3b1c:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b1e:	2202      	movs	r2, #2
    3b20:	4b05      	ldr	r3, [pc, #20]	; (3b38 <setExcitationLED+0x4c>)
    3b22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3b26:	bd38      	pop	{r3, r4, r5, pc}
    3b28:	51eb851f 	.word	0x51eb851f
    3b2c:	20000698 	.word	0x20000698
    3b30:	00001279 	.word	0x00001279
    3b34:	0000123d 	.word	0x0000123d
    3b38:	41008000 	.word	0x41008000

00003b3c <setStatusLED>:
    3b3c:	b928      	cbnz	r0, 3b4a <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b42:	4b05      	ldr	r3, [pc, #20]	; (3b58 <setStatusLED+0x1c>)
    3b44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3b48:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b4e:	4b02      	ldr	r3, [pc, #8]	; (3b58 <setStatusLED+0x1c>)
    3b50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	41008000 	.word	0x41008000

00003b5c <frameValid_cb>:
{
    3b5c:	b570      	push	{r4, r5, r6, lr}
    3b5e:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    3b60:	a801      	add	r0, sp, #4
    3b62:	4c12      	ldr	r4, [pc, #72]	; (3bac <frameValid_cb+0x50>)
    3b64:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3b66:	4d12      	ldr	r5, [pc, #72]	; (3bb0 <frameValid_cb+0x54>)
    3b68:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b6c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3b70:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3b74:	a801      	add	r0, sp, #4
    3b76:	4e0f      	ldr	r6, [pc, #60]	; (3bb4 <frameValid_cb+0x58>)
    3b78:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    3b7a:	4668      	mov	r0, sp
    3b7c:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3b7e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3b82:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3b86:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3b8a:	405c      	eors	r4, r3
    3b8c:	4014      	ands	r4, r2
    3b8e:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3b90:	4668      	mov	r0, sp
    3b92:	47b0      	blx	r6
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    3b94:	f414 7f00 	tst.w	r4, #512	; 0x200
    3b98:	d104      	bne.n	3ba4 <frameValid_cb+0x48>
		setStatusLED(1);
    3b9a:	2001      	movs	r0, #1
    3b9c:	4b06      	ldr	r3, [pc, #24]	; (3bb8 <frameValid_cb+0x5c>)
    3b9e:	4798      	blx	r3
}
    3ba0:	b002      	add	sp, #8
    3ba2:	bd70      	pop	{r4, r5, r6, pc}
		setStatusLED(0);
    3ba4:	2000      	movs	r0, #0
    3ba6:	4b04      	ldr	r3, [pc, #16]	; (3bb8 <frameValid_cb+0x5c>)
    3ba8:	4798      	blx	r3
    3baa:	e7f9      	b.n	3ba0 <frameValid_cb+0x44>
    3bac:	00000d41 	.word	0x00000d41
    3bb0:	41008000 	.word	0x41008000
    3bb4:	00000d4f 	.word	0x00000d4f
    3bb8:	00003b3d 	.word	0x00003b3d

00003bbc <startRecording>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void startRecording()
{
<<<<<<< HEAD
    3a7c:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    3a7e:	2400      	movs	r4, #0
    3a80:	4b0a      	ldr	r3, [pc, #40]	; (3aac <startRecording+0x30>)
    3a82:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    3a84:	4b0a      	ldr	r3, [pc, #40]	; (3ab0 <startRecording+0x34>)
    3a86:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    3a88:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <startRecording+0x38>)
    3a8a:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    3a8c:	4b0a      	ldr	r3, [pc, #40]	; (3ab8 <startRecording+0x3c>)
    3a8e:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    3a90:	4b0a      	ldr	r3, [pc, #40]	; (3abc <startRecording+0x40>)
    3a92:	601c      	str	r4, [r3, #0]
=======
    3bbc:	b538      	push	{r3, r4, r5, lr}
	writeFrameNum = 0;
    3bbe:	2400      	movs	r4, #0
    3bc0:	4b10      	ldr	r3, [pc, #64]	; (3c04 <startRecording+0x48>)
    3bc2:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    3bc4:	4b10      	ldr	r3, [pc, #64]	; (3c08 <startRecording+0x4c>)
    3bc6:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    3bc8:	4b10      	ldr	r3, [pc, #64]	; (3c0c <startRecording+0x50>)
    3bca:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    3bcc:	4b10      	ldr	r3, [pc, #64]	; (3c10 <startRecording+0x54>)
    3bce:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    3bd0:	4b10      	ldr	r3, [pc, #64]	; (3c14 <startRecording+0x58>)
    3bd2:	601c      	str	r4, [r3, #0]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
	// This gets the next set of blocks ready to be written into
	sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK); 
    3bd4:	4d10      	ldr	r5, [pc, #64]	; (3c18 <startRecording+0x5c>)
    3bd6:	6869      	ldr	r1, [r5, #4]
    3bd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3bdc:	4620      	mov	r0, r4
    3bde:	4b0f      	ldr	r3, [pc, #60]	; (3c1c <startRecording+0x60>)
    3be0:	4798      	blx	r3
	initBlocksRemaining = BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK;
    3be2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3be6:	4b0e      	ldr	r3, [pc, #56]	; (3c20 <startRecording+0x64>)
    3be8:	601a      	str	r2, [r3, #0]
		
	startTimeMS = getCurrentTimeMS();
<<<<<<< HEAD
    3a94:	4b0a      	ldr	r3, [pc, #40]	; (3ac0 <startRecording+0x44>)
    3a96:	4798      	blx	r3
    3a98:	4b0a      	ldr	r3, [pc, #40]	; (3ac4 <startRecording+0x48>)
    3a9a:	6018      	str	r0, [r3, #0]
=======
    3bea:	4b0e      	ldr	r3, [pc, #56]	; (3c24 <startRecording+0x68>)
    3bec:	4798      	blx	r3
    3bee:	4b0e      	ldr	r3, [pc, #56]	; (3c28 <startRecording+0x6c>)
    3bf0:	6018      	str	r0, [r3, #0]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
	deviceState &= !(DEVICE_STATE_IDLE);
    3bf2:	682b      	ldr	r3, [r5, #0]
    3bf4:	602c      	str	r4, [r5, #0]
	deviceState &= !(DEVICE_STATE_START_RECORDING);
<<<<<<< HEAD
    3a9c:	4b0a      	ldr	r3, [pc, #40]	; (3ac8 <startRecording+0x4c>)
    3a9e:	681a      	ldr	r2, [r3, #0]
    3aa0:	601c      	str	r4, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3aa2:	681a      	ldr	r2, [r3, #0]
    3aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    3aa8:	601a      	str	r2, [r3, #0]
    3aaa:	bd10      	pop	{r4, pc}
    3aac:	20000bd8 	.word	0x20000bd8
    3ab0:	20000bd4 	.word	0x20000bd4
    3ab4:	20000b84 	.word	0x20000b84
    3ab8:	20000bd0 	.word	0x20000bd0
    3abc:	20000b80 	.word	0x20000b80
    3ac0:	000039f1 	.word	0x000039f1
    3ac4:	20000bcc 	.word	0x20000bcc
    3ac8:	20000028 	.word	0x20000028

00003acc <stopRecording>:
=======
    3bf6:	682b      	ldr	r3, [r5, #0]
    3bf8:	602c      	str	r4, [r5, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    3bfa:	682b      	ldr	r3, [r5, #0]
    3bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3c00:	602b      	str	r3, [r5, #0]
    3c02:	bd38      	pop	{r3, r4, r5, pc}
    3c04:	20000bd8 	.word	0x20000bd8
    3c08:	20000bd4 	.word	0x20000bd4
    3c0c:	20000b84 	.word	0x20000b84
    3c10:	20000bd0 	.word	0x20000bd0
    3c14:	20000b80 	.word	0x20000b80
    3c18:	20000028 	.word	0x20000028
    3c1c:	00004c11 	.word	0x00004c11
    3c20:	20028be0 	.word	0x20028be0
    3c24:	00003a8d 	.word	0x00003a8d
    3c28:	20000bcc 	.word	0x20000bcc

00003c2c <stopRecording>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
}

void stopRecording()
{
<<<<<<< HEAD
    3acc:	b510      	push	{r4, lr}
	// TODO: Change status LEDs
=======
    3c2c:	b510      	push	{r4, lr}
	
	// TODO: Update currentBlock maybe to get ready for next recording??
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
<<<<<<< HEAD
    3ace:	4b0f      	ldr	r3, [pc, #60]	; (3b0c <stopRecording+0x40>)
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	b2db      	uxtb	r3, r3
    3ad4:	4c0e      	ldr	r4, [pc, #56]	; (3b10 <stopRecording+0x44>)
    3ad6:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    3ada:	4b0e      	ldr	r3, [pc, #56]	; (3b14 <stopRecording+0x48>)
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	b2db      	uxtb	r3, r3
    3ae0:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    3ae4:	2201      	movs	r2, #1
    3ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3aea:	2000      	movs	r0, #0
    3aec:	4b0a      	ldr	r3, [pc, #40]	; (3b18 <stopRecording+0x4c>)
    3aee:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3af0:	2101      	movs	r1, #1
    3af2:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3af6:	4b09      	ldr	r3, [pc, #36]	; (3b1c <stopRecording+0x50>)
    3af8:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    3afa:	2000      	movs	r0, #0
    3afc:	4b08      	ldr	r3, [pc, #32]	; (3b20 <stopRecording+0x54>)
    3afe:	4798      	blx	r3
	
	deviceState |= DEVICE_STATE_STOP_RECORDING;
    3b00:	4a08      	ldr	r2, [pc, #32]	; (3b24 <stopRecording+0x58>)
    3b02:	6813      	ldr	r3, [r2, #0]
    3b04:	f043 0310 	orr.w	r3, r3, #16
    3b08:	6013      	str	r3, [r2, #0]
    3b0a:	bd10      	pop	{r4, pc}
    3b0c:	20000bd4 	.word	0x20000bd4
    3b10:	20000224 	.word	0x20000224
    3b14:	20000b84 	.word	0x20000b84
    3b18:	000040b9 	.word	0x000040b9
    3b1c:	00004159 	.word	0x00004159
    3b20:	000041a5 	.word	0x000041a5
    3b24:	20000028 	.word	0x20000028

00003b28 <recording>:
//	deviceState &= !(DEVICE_STATE_RECORDING);	
=======
    3c2e:	4b12      	ldr	r3, [pc, #72]	; (3c78 <stopRecording+0x4c>)
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	b2db      	uxtb	r3, r3
    3c34:	4c11      	ldr	r4, [pc, #68]	; (3c7c <stopRecording+0x50>)
    3c36:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    3c3a:	4b11      	ldr	r3, [pc, #68]	; (3c80 <stopRecording+0x54>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	b2db      	uxtb	r3, r3
    3c40:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    3c44:	2201      	movs	r2, #1
    3c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3c4a:	2000      	movs	r0, #0
    3c4c:	4b0d      	ldr	r3, [pc, #52]	; (3c84 <stopRecording+0x58>)
    3c4e:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    3c50:	2101      	movs	r1, #1
    3c52:	f504 7001 	add.w	r0, r4, #516	; 0x204
    3c56:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <stopRecording+0x5c>)
    3c58:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    3c5a:	2000      	movs	r0, #0
    3c5c:	4b0b      	ldr	r3, [pc, #44]	; (3c8c <stopRecording+0x60>)
    3c5e:	4798      	blx	r3
	
	deviceState &= !(DEVICE_STATE_STOP_RECORDING);
    3c60:	4b0b      	ldr	r3, [pc, #44]	; (3c90 <stopRecording+0x64>)
    3c62:	681a      	ldr	r2, [r3, #0]
    3c64:	2200      	movs	r2, #0
    3c66:	601a      	str	r2, [r3, #0]
	deviceState &= !(DEVICE_STATE_RECORDING);
    3c68:	6819      	ldr	r1, [r3, #0]
    3c6a:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_IDLE;
    3c6c:	681a      	ldr	r2, [r3, #0]
    3c6e:	f042 0202 	orr.w	r2, r2, #2
    3c72:	601a      	str	r2, [r3, #0]
    3c74:	bd10      	pop	{r4, pc}
    3c76:	bf00      	nop
    3c78:	20000bd4 	.word	0x20000bd4
    3c7c:	20000224 	.word	0x20000224
    3c80:	20000b84 	.word	0x20000b84
    3c84:	00004c11 	.word	0x00004c11
    3c88:	00004cb1 	.word	0x00004cb1
    3c8c:	00004cfd 	.word	0x00004cfd
    3c90:	20000028 	.word	0x20000028

00003c94 <recording>:
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
<<<<<<< HEAD
    3b28:	4b56      	ldr	r3, [pc, #344]	; (3c84 <recording+0x15c>)
    3b2a:	681b      	ldr	r3, [r3, #0]
    3b2c:	4a56      	ldr	r2, [pc, #344]	; (3c88 <recording+0x160>)
    3b2e:	6812      	ldr	r2, [r2, #0]
    3b30:	4413      	add	r3, r2
    3b32:	4a56      	ldr	r2, [pc, #344]	; (3c8c <recording+0x164>)
    3b34:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3b38:	4293      	cmp	r3, r2
    3b3a:	f080 80a2 	bcs.w	3c82 <recording+0x15a>
{
    3b3e:	b510      	push	{r4, lr}
=======
    3c94:	4b57      	ldr	r3, [pc, #348]	; (3df4 <recording+0x160>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	4a57      	ldr	r2, [pc, #348]	; (3df8 <recording+0x164>)
    3c9a:	6812      	ldr	r2, [r2, #0]
    3c9c:	4413      	add	r3, r2
    3c9e:	4a57      	ldr	r2, [pc, #348]	; (3dfc <recording+0x168>)
    3ca0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3ca4:	4293      	cmp	r3, r2
    3ca6:	f080 80a3 	bcs.w	3df0 <recording+0x15c>
{
    3caa:	b510      	push	{r4, lr}
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
<<<<<<< HEAD
    3b40:	4b50      	ldr	r3, [pc, #320]	; (3c84 <recording+0x15c>)
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	4a50      	ldr	r2, [pc, #320]	; (3c88 <recording+0x160>)
    3b46:	6812      	ldr	r2, [r2, #0]
    3b48:	4413      	add	r3, r2
    3b4a:	3304      	adds	r3, #4
    3b4c:	4a4f      	ldr	r2, [pc, #316]	; (3c8c <recording+0x164>)
    3b4e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3b52:	4293      	cmp	r3, r2
    3b54:	d221      	bcs.n	3b9a <recording+0x72>
=======
    3cac:	4b51      	ldr	r3, [pc, #324]	; (3df4 <recording+0x160>)
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	4a51      	ldr	r2, [pc, #324]	; (3df8 <recording+0x164>)
    3cb2:	6812      	ldr	r2, [r2, #0]
    3cb4:	4413      	add	r3, r2
    3cb6:	3304      	adds	r3, #4
    3cb8:	4a50      	ldr	r2, [pc, #320]	; (3dfc <recording+0x168>)
    3cba:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    3cbe:	4293      	cmp	r3, r2
    3cc0:	d225      	bcs.n	3d0e <recording+0x7a>
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
<<<<<<< HEAD
    3b56:	4b4b      	ldr	r3, [pc, #300]	; (3c84 <recording+0x15c>)
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	4a4b      	ldr	r2, [pc, #300]	; (3c88 <recording+0x160>)
    3b5c:	6811      	ldr	r1, [r2, #0]
    3b5e:	440b      	add	r3, r1
    3b60:	f003 0303 	and.w	r3, r3, #3
    3b64:	f1c3 0304 	rsb	r3, r3, #4
    3b68:	6811      	ldr	r1, [r2, #0]
    3b6a:	440b      	add	r3, r1
    3b6c:	6013      	str	r3, [r2, #0]
=======
    3cc2:	4b4c      	ldr	r3, [pc, #304]	; (3df4 <recording+0x160>)
    3cc4:	681b      	ldr	r3, [r3, #0]
    3cc6:	4a4c      	ldr	r2, [pc, #304]	; (3df8 <recording+0x164>)
    3cc8:	6811      	ldr	r1, [r2, #0]
    3cca:	440b      	add	r3, r1
    3ccc:	f003 0303 	and.w	r3, r3, #3
    3cd0:	f1c3 0304 	rsb	r3, r3, #4
    3cd4:	6811      	ldr	r1, [r2, #0]
    3cd6:	440b      	add	r3, r1
    3cd8:	6013      	str	r3, [r2, #0]
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
			//writeFrameNum = bufferToWrite[BUFFER_HEADER_FRAME_NUM_POS];
			writeBufferCount++;
			
		}
		
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
<<<<<<< HEAD
    3b6e:	4b48      	ldr	r3, [pc, #288]	; (3c90 <recording+0x168>)
    3b70:	4798      	blx	r3
    3b72:	4b48      	ldr	r3, [pc, #288]	; (3c94 <recording+0x16c>)
    3b74:	681c      	ldr	r4, [r3, #0]
    3b76:	1b04      	subs	r4, r0, r4
    3b78:	2007      	movs	r0, #7
    3b7a:	4b47      	ldr	r3, [pc, #284]	; (3c98 <recording+0x170>)
    3b7c:	4798      	blx	r3
    3b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3b82:	fb03 f300 	mul.w	r3, r3, r0
    3b86:	429c      	cmp	r4, r3
    3b88:	bf34      	ite	cc
    3b8a:	2400      	movcc	r4, #0
    3b8c:	2401      	movcs	r4, #1
    3b8e:	2800      	cmp	r0, #0
    3b90:	bf08      	it	eq
    3b92:	2400      	moveq	r4, #0
    3b94:	2c00      	cmp	r4, #0
    3b96:	d171      	bne.n	3c7c <recording+0x154>
    3b98:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    3b9a:	4c3a      	ldr	r4, [pc, #232]	; (3c84 <recording+0x15c>)
    3b9c:	6823      	ldr	r3, [r4, #0]
    3b9e:	493a      	ldr	r1, [pc, #232]	; (3c88 <recording+0x160>)
    3ba0:	680a      	ldr	r2, [r1, #0]
    3ba2:	4413      	add	r3, r2
    3ba4:	f003 0303 	and.w	r3, r3, #3
    3ba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3bac:	0358      	lsls	r0, r3, #13
    3bae:	4b3b      	ldr	r3, [pc, #236]	; (3c9c <recording+0x174>)
    3bb0:	4418      	add	r0, r3
    3bb2:	4b3b      	ldr	r3, [pc, #236]	; (3ca0 <recording+0x178>)
    3bb4:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3bb6:	6a03      	ldr	r3, [r0, #32]
    3bb8:	f203 2323 	addw	r3, r3, #547	; 0x223
    3bbc:	0a5b      	lsrs	r3, r3, #9
    3bbe:	4a39      	ldr	r2, [pc, #228]	; (3ca4 <recording+0x17c>)
    3bc0:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3bc2:	6823      	ldr	r3, [r4, #0]
    3bc4:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3bc6:	680b      	ldr	r3, [r1, #0]
    3bc8:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    3bca:	6812      	ldr	r2, [r2, #0]
    3bcc:	4b36      	ldr	r3, [pc, #216]	; (3ca8 <recording+0x180>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	429a      	cmp	r2, r3
    3bd2:	d219      	bcs.n	3c08 <recording+0xe0>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    3bd4:	4b33      	ldr	r3, [pc, #204]	; (3ca4 <recording+0x17c>)
    3bd6:	6819      	ldr	r1, [r3, #0]
    3bd8:	b289      	uxth	r1, r1
    3bda:	4b34      	ldr	r3, [pc, #208]	; (3cac <recording+0x184>)
    3bdc:	4798      	blx	r3
    3bde:	b978      	cbnz	r0, 3c00 <recording+0xd8>
				initBlocksRemaining -= numBlocks;
    3be0:	4a30      	ldr	r2, [pc, #192]	; (3ca4 <recording+0x17c>)
    3be2:	6810      	ldr	r0, [r2, #0]
    3be4:	4930      	ldr	r1, [pc, #192]	; (3ca8 <recording+0x180>)
    3be6:	680b      	ldr	r3, [r1, #0]
    3be8:	1a1b      	subs	r3, r3, r0
    3bea:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    3bec:	6813      	ldr	r3, [r2, #0]
    3bee:	4a30      	ldr	r2, [pc, #192]	; (3cb0 <recording+0x188>)
    3bf0:	6851      	ldr	r1, [r2, #4]
    3bf2:	440b      	add	r3, r1
    3bf4:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    3bf6:	4a23      	ldr	r2, [pc, #140]	; (3c84 <recording+0x15c>)
    3bf8:	6813      	ldr	r3, [r2, #0]
    3bfa:	3301      	adds	r3, #1
    3bfc:	6013      	str	r3, [r2, #0]
    3bfe:	e7b6      	b.n	3b6e <recording+0x46>
				sd_mmc_wait_end_of_write_blocks(false);
    3c00:	2000      	movs	r0, #0
    3c02:	4b2c      	ldr	r3, [pc, #176]	; (3cb4 <recording+0x18c>)
    3c04:	4798      	blx	r3
    3c06:	e7eb      	b.n	3be0 <recording+0xb8>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    3c08:	4b27      	ldr	r3, [pc, #156]	; (3ca8 <recording+0x180>)
    3c0a:	6819      	ldr	r1, [r3, #0]
    3c0c:	b289      	uxth	r1, r1
    3c0e:	4b27      	ldr	r3, [pc, #156]	; (3cac <recording+0x184>)
    3c10:	4798      	blx	r3
    3c12:	b9e0      	cbnz	r0, 3c4e <recording+0x126>
				currentBlock += initBlocksRemaining;
    3c14:	4b24      	ldr	r3, [pc, #144]	; (3ca8 <recording+0x180>)
    3c16:	681a      	ldr	r2, [r3, #0]
    3c18:	4b25      	ldr	r3, [pc, #148]	; (3cb0 <recording+0x188>)
    3c1a:	6859      	ldr	r1, [r3, #4]
    3c1c:	440a      	add	r2, r1
    3c1e:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    3c20:	6859      	ldr	r1, [r3, #4]
    3c22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3c26:	2000      	movs	r0, #0
    3c28:	4b23      	ldr	r3, [pc, #140]	; (3cb8 <recording+0x190>)
    3c2a:	4798      	blx	r3
    3c2c:	b998      	cbnz	r0, 3c56 <recording+0x12e>
				currentBlock += numBlocks - initBlocksRemaining;
    3c2e:	491d      	ldr	r1, [pc, #116]	; (3ca4 <recording+0x17c>)
    3c30:	680b      	ldr	r3, [r1, #0]
    3c32:	4a1d      	ldr	r2, [pc, #116]	; (3ca8 <recording+0x180>)
    3c34:	6810      	ldr	r0, [r2, #0]
    3c36:	1a1b      	subs	r3, r3, r0
    3c38:	481d      	ldr	r0, [pc, #116]	; (3cb0 <recording+0x188>)
    3c3a:	6844      	ldr	r4, [r0, #4]
    3c3c:	4423      	add	r3, r4
    3c3e:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    3c40:	6813      	ldr	r3, [r2, #0]
    3c42:	6809      	ldr	r1, [r1, #0]
    3c44:	1a5b      	subs	r3, r3, r1
    3c46:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    3c4a:	6013      	str	r3, [r2, #0]
    3c4c:	e7d3      	b.n	3bf6 <recording+0xce>
				sd_mmc_wait_end_of_write_blocks(false);
    3c4e:	2000      	movs	r0, #0
    3c50:	4b18      	ldr	r3, [pc, #96]	; (3cb4 <recording+0x18c>)
    3c52:	4798      	blx	r3
    3c54:	e7de      	b.n	3c14 <recording+0xec>
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    3c56:	4b12      	ldr	r3, [pc, #72]	; (3ca0 <recording+0x178>)
    3c58:	681a      	ldr	r2, [r3, #0]
    3c5a:	4b13      	ldr	r3, [pc, #76]	; (3ca8 <recording+0x180>)
    3c5c:	6818      	ldr	r0, [r3, #0]
    3c5e:	4911      	ldr	r1, [pc, #68]	; (3ca4 <recording+0x17c>)
    3c60:	6809      	ldr	r1, [r1, #0]
    3c62:	681b      	ldr	r3, [r3, #0]
    3c64:	1ac9      	subs	r1, r1, r3
    3c66:	b289      	uxth	r1, r1
    3c68:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    3c6c:	4b0f      	ldr	r3, [pc, #60]	; (3cac <recording+0x184>)
    3c6e:	4798      	blx	r3
    3c70:	2800      	cmp	r0, #0
    3c72:	d0dc      	beq.n	3c2e <recording+0x106>
				sd_mmc_wait_end_of_write_blocks(false);
    3c74:	2000      	movs	r0, #0
    3c76:	4b0f      	ldr	r3, [pc, #60]	; (3cb4 <recording+0x18c>)
    3c78:	4798      	blx	r3
    3c7a:	e7d8      	b.n	3c2e <recording+0x106>
			// Recording time has elapsed
			stopRecording();			
    3c7c:	4b0f      	ldr	r3, [pc, #60]	; (3cbc <recording+0x194>)
    3c7e:	4798      	blx	r3
			
		}
		
	}
	
}
    3c80:	e78a      	b.n	3b98 <recording+0x70>
    3c82:	4770      	bx	lr
    3c84:	20000bd4 	.word	0x20000bd4
    3c88:	20000b84 	.word	0x20000b84
    3c8c:	20000224 	.word	0x20000224
    3c90:	000039f1 	.word	0x000039f1
    3c94:	20000bcc 	.word	0x20000bcc
    3c98:	000039fd 	.word	0x000039fd
    3c9c:	20000bdc 	.word	0x20000bdc
    3ca0:	20000bc8 	.word	0x20000bc8
    3ca4:	20028bdc 	.word	0x20028bdc
    3ca8:	20028be0 	.word	0x20028be0
    3cac:	00004159 	.word	0x00004159
    3cb0:	20000028 	.word	0x20000028
    3cb4:	000041a5 	.word	0x000041a5
    3cb8:	000040b9 	.word	0x000040b9
    3cbc:	00003acd 	.word	0x00003acd

00003cc0 <main>:

int main(void)
{
    3cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cc4:	b083      	sub	sp, #12
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	bool add_read = 0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3cc6:	4b4f      	ldr	r3, [pc, #316]	; (3e04 <main+0x144>)
    3cc8:	4798      	blx	r3
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3cca:	2202      	movs	r2, #2
    3ccc:	4b4e      	ldr	r3, [pc, #312]	; (3e08 <main+0x148>)
    3cce:	731a      	strb	r2, [r3, #12]
    3cd0:	4e4e      	ldr	r6, [pc, #312]	; (3e0c <main+0x14c>)
    3cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3cd6:	61b3      	str	r3, [r6, #24]
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	//setStatusLED(1);
	
	setExcitationLED(5,1);
    3cd8:	2101      	movs	r1, #1
    3cda:	2005      	movs	r0, #5
    3cdc:	4b4c      	ldr	r3, [pc, #304]	; (3e10 <main+0x150>)
    3cde:	4798      	blx	r3
	
	setStatusLED(0);
    3ce0:	2000      	movs	r0, #0
    3ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 3e80 <main+0x1c0>
    3ce6:	47c0      	blx	r8
	
	I2C_BB_init();
    3ce8:	4b4a      	ldr	r3, [pc, #296]	; (3e14 <main+0x154>)
    3cea:	4798      	blx	r3
	
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3cec:	2100      	movs	r1, #0
    3cee:	484a      	ldr	r0, [pc, #296]	; (3e18 <main+0x158>)
    3cf0:	4b4a      	ldr	r3, [pc, #296]	; (3e1c <main+0x15c>)
    3cf2:	4798      	blx	r3
=======
    3cda:	4b49      	ldr	r3, [pc, #292]	; (3e00 <recording+0x16c>)
    3cdc:	4798      	blx	r3
    3cde:	4b49      	ldr	r3, [pc, #292]	; (3e04 <recording+0x170>)
    3ce0:	681c      	ldr	r4, [r3, #0]
    3ce2:	1b04      	subs	r4, r0, r4
    3ce4:	2007      	movs	r0, #7
    3ce6:	4b48      	ldr	r3, [pc, #288]	; (3e08 <recording+0x174>)
    3ce8:	4798      	blx	r3
    3cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3cee:	fb03 f300 	mul.w	r3, r3, r0
    3cf2:	429c      	cmp	r4, r3
    3cf4:	bf34      	ite	cc
    3cf6:	2400      	movcc	r4, #0
    3cf8:	2401      	movcs	r4, #1
    3cfa:	2800      	cmp	r0, #0
    3cfc:	bf08      	it	eq
    3cfe:	2400      	moveq	r4, #0
    3d00:	b124      	cbz	r4, 3d0c <recording+0x78>
			// Recording time has elapsed
			deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording			
    3d02:	4a42      	ldr	r2, [pc, #264]	; (3e0c <recording+0x178>)
    3d04:	6813      	ldr	r3, [r2, #0]
    3d06:	f043 0310 	orr.w	r3, r3, #16
    3d0a:	6013      	str	r3, [r2, #0]
    3d0c:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    3d0e:	4c39      	ldr	r4, [pc, #228]	; (3df4 <recording+0x160>)
    3d10:	6823      	ldr	r3, [r4, #0]
    3d12:	4939      	ldr	r1, [pc, #228]	; (3df8 <recording+0x164>)
    3d14:	680a      	ldr	r2, [r1, #0]
    3d16:	4413      	add	r3, r2
    3d18:	f003 0303 	and.w	r3, r3, #3
    3d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d20:	0358      	lsls	r0, r3, #13
    3d22:	4b3b      	ldr	r3, [pc, #236]	; (3e10 <recording+0x17c>)
    3d24:	4418      	add	r0, r3
    3d26:	4b3b      	ldr	r3, [pc, #236]	; (3e14 <recording+0x180>)
    3d28:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    3d2a:	6a03      	ldr	r3, [r0, #32]
    3d2c:	f203 2323 	addw	r3, r3, #547	; 0x223
    3d30:	0a5b      	lsrs	r3, r3, #9
    3d32:	4a39      	ldr	r2, [pc, #228]	; (3e18 <recording+0x184>)
    3d34:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    3d36:	6823      	ldr	r3, [r4, #0]
    3d38:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    3d3a:	680b      	ldr	r3, [r1, #0]
    3d3c:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    3d3e:	6812      	ldr	r2, [r2, #0]
    3d40:	4b36      	ldr	r3, [pc, #216]	; (3e1c <recording+0x188>)
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	429a      	cmp	r2, r3
    3d46:	d219      	bcs.n	3d7c <recording+0xe8>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    3d48:	4b33      	ldr	r3, [pc, #204]	; (3e18 <recording+0x184>)
    3d4a:	6819      	ldr	r1, [r3, #0]
    3d4c:	b289      	uxth	r1, r1
    3d4e:	4b34      	ldr	r3, [pc, #208]	; (3e20 <recording+0x18c>)
    3d50:	4798      	blx	r3
    3d52:	b978      	cbnz	r0, 3d74 <recording+0xe0>
				initBlocksRemaining -= numBlocks;
    3d54:	4a30      	ldr	r2, [pc, #192]	; (3e18 <recording+0x184>)
    3d56:	6810      	ldr	r0, [r2, #0]
    3d58:	4930      	ldr	r1, [pc, #192]	; (3e1c <recording+0x188>)
    3d5a:	680b      	ldr	r3, [r1, #0]
    3d5c:	1a1b      	subs	r3, r3, r0
    3d5e:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    3d60:	6813      	ldr	r3, [r2, #0]
    3d62:	4a2a      	ldr	r2, [pc, #168]	; (3e0c <recording+0x178>)
    3d64:	6851      	ldr	r1, [r2, #4]
    3d66:	440b      	add	r3, r1
    3d68:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    3d6a:	4a22      	ldr	r2, [pc, #136]	; (3df4 <recording+0x160>)
    3d6c:	6813      	ldr	r3, [r2, #0]
    3d6e:	3301      	adds	r3, #1
    3d70:	6013      	str	r3, [r2, #0]
    3d72:	e7b2      	b.n	3cda <recording+0x46>
				sd_mmc_wait_end_of_write_blocks(false);
    3d74:	2000      	movs	r0, #0
    3d76:	4b2b      	ldr	r3, [pc, #172]	; (3e24 <recording+0x190>)
    3d78:	4798      	blx	r3
    3d7a:	e7eb      	b.n	3d54 <recording+0xc0>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    3d7c:	4b27      	ldr	r3, [pc, #156]	; (3e1c <recording+0x188>)
    3d7e:	6819      	ldr	r1, [r3, #0]
    3d80:	b289      	uxth	r1, r1
    3d82:	4b27      	ldr	r3, [pc, #156]	; (3e20 <recording+0x18c>)
    3d84:	4798      	blx	r3
    3d86:	b9e0      	cbnz	r0, 3dc2 <recording+0x12e>
				currentBlock += initBlocksRemaining;
    3d88:	4b24      	ldr	r3, [pc, #144]	; (3e1c <recording+0x188>)
    3d8a:	681a      	ldr	r2, [r3, #0]
    3d8c:	4b1f      	ldr	r3, [pc, #124]	; (3e0c <recording+0x178>)
    3d8e:	6859      	ldr	r1, [r3, #4]
    3d90:	440a      	add	r2, r1
    3d92:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    3d94:	6859      	ldr	r1, [r3, #4]
    3d96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    3d9a:	2000      	movs	r0, #0
    3d9c:	4b22      	ldr	r3, [pc, #136]	; (3e28 <recording+0x194>)
    3d9e:	4798      	blx	r3
    3da0:	b998      	cbnz	r0, 3dca <recording+0x136>
				currentBlock += numBlocks - initBlocksRemaining;
    3da2:	491d      	ldr	r1, [pc, #116]	; (3e18 <recording+0x184>)
    3da4:	680b      	ldr	r3, [r1, #0]
    3da6:	4a1d      	ldr	r2, [pc, #116]	; (3e1c <recording+0x188>)
    3da8:	6810      	ldr	r0, [r2, #0]
    3daa:	1a1b      	subs	r3, r3, r0
    3dac:	4817      	ldr	r0, [pc, #92]	; (3e0c <recording+0x178>)
    3dae:	6844      	ldr	r4, [r0, #4]
    3db0:	4423      	add	r3, r4
    3db2:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    3db4:	6813      	ldr	r3, [r2, #0]
    3db6:	6809      	ldr	r1, [r1, #0]
    3db8:	1a5b      	subs	r3, r3, r1
    3dba:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    3dbe:	6013      	str	r3, [r2, #0]
    3dc0:	e7d3      	b.n	3d6a <recording+0xd6>
				sd_mmc_wait_end_of_write_blocks(false);
    3dc2:	2000      	movs	r0, #0
    3dc4:	4b17      	ldr	r3, [pc, #92]	; (3e24 <recording+0x190>)
    3dc6:	4798      	blx	r3
    3dc8:	e7de      	b.n	3d88 <recording+0xf4>
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    3dca:	4b12      	ldr	r3, [pc, #72]	; (3e14 <recording+0x180>)
    3dcc:	681a      	ldr	r2, [r3, #0]
    3dce:	4b13      	ldr	r3, [pc, #76]	; (3e1c <recording+0x188>)
    3dd0:	6818      	ldr	r0, [r3, #0]
    3dd2:	4911      	ldr	r1, [pc, #68]	; (3e18 <recording+0x184>)
    3dd4:	6809      	ldr	r1, [r1, #0]
    3dd6:	681b      	ldr	r3, [r3, #0]
    3dd8:	1ac9      	subs	r1, r1, r3
    3dda:	b289      	uxth	r1, r1
    3ddc:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    3de0:	4b0f      	ldr	r3, [pc, #60]	; (3e20 <recording+0x18c>)
    3de2:	4798      	blx	r3
    3de4:	2800      	cmp	r0, #0
    3de6:	d0dc      	beq.n	3da2 <recording+0x10e>
				sd_mmc_wait_end_of_write_blocks(false);
    3de8:	2000      	movs	r0, #0
    3dea:	4b0e      	ldr	r3, [pc, #56]	; (3e24 <recording+0x190>)
    3dec:	4798      	blx	r3
    3dee:	e7d8      	b.n	3da2 <recording+0x10e>
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	20000bd4 	.word	0x20000bd4
    3df8:	20000b84 	.word	0x20000b84
    3dfc:	20000224 	.word	0x20000224
    3e00:	00003a8d 	.word	0x00003a8d
    3e04:	20000bcc 	.word	0x20000bcc
    3e08:	00003ad1 	.word	0x00003ad1
    3e0c:	20000028 	.word	0x20000028
    3e10:	20000bdc 	.word	0x20000bdc
    3e14:	20000bc8 	.word	0x20000bc8
    3e18:	20028bdc 	.word	0x20028bdc
    3e1c:	20028be0 	.word	0x20028be0
    3e20:	00004cb1 	.word	0x00004cb1
    3e24:	00004cfd 	.word	0x00004cfd
    3e28:	00004c11 	.word	0x00004c11

00003e2c <main>:
// Make sure lipo charge callback works: TODO
// Consider putting ADC value in frame footer: TODO

// ================================================================
int main(void)
{
    3e2c:	b570      	push	{r4, r5, r6, lr}
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    3e2e:	4b54      	ldr	r3, [pc, #336]	; (3f80 <main+0x154>)
    3e30:	4798      	blx	r3
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3e32:	2202      	movs	r2, #2
    3e34:	4b53      	ldr	r3, [pc, #332]	; (3f84 <main+0x158>)
    3e36:	731a      	strb	r2, [r3, #12]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3e3c:	4b52      	ldr	r3, [pc, #328]	; (3f88 <main+0x15c>)
    3e3e:	619a      	str	r2, [r3, #24]
	// We need to change the PWM mode from MPWM to NPWM because we are using WO[0] as waveform output
	hri_tc_write_WAVE_reg(TC0, TC_WAVE_WAVEGEN_NPWM_Val);	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    3e40:	2100      	movs	r1, #0
    3e42:	4852      	ldr	r0, [pc, #328]	; (3f8c <main+0x160>)
    3e44:	4b52      	ldr	r3, [pc, #328]	; (3f90 <main+0x164>)
    3e46:	4798      	blx	r3
	
	
	setStatusLED(1);	
    3e48:	2001      	movs	r0, #1
    3e4a:	4b52      	ldr	r3, [pc, #328]	; (3f94 <main+0x168>)
    3e4c:	4798      	blx	r3
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
	*/
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
<<<<<<< HEAD
    3cf4:	4c4a      	ldr	r4, [pc, #296]	; (3e20 <main+0x160>)
    3cf6:	2501      	movs	r5, #1
    3cf8:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3cfc:	4b49      	ldr	r3, [pc, #292]	; (3e24 <main+0x164>)
    3cfe:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    3d02:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    3d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3d0a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3d0e:	4b46      	ldr	r3, [pc, #280]	; (3e28 <main+0x168>)
    3d10:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3d14:	f884 5434 	strb.w	r5, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3d18:	4f44      	ldr	r7, [pc, #272]	; (3e2c <main+0x16c>)
    3d1a:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    3d1e:	4638      	mov	r0, r7
    3d20:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3e84 <main+0x1c4>
    3d24:	47c8      	blx	r9
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3d26:	f204 4124 	addw	r1, r4, #1060	; 0x424
    3d2a:	4638      	mov	r0, r7
    3d2c:	47c8      	blx	r9
	timer_start(&TIMER_0);
    3d2e:	4638      	mov	r0, r7
    3d30:	4b3f      	ldr	r3, [pc, #252]	; (3e30 <main+0x170>)
    3d32:	4798      	blx	r3
=======
    3e4e:	4c52      	ldr	r4, [pc, #328]	; (3f98 <main+0x16c>)
    3e50:	2301      	movs	r3, #1
    3e52:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    3e56:	4a51      	ldr	r2, [pc, #324]	; (3f9c <main+0x170>)
    3e58:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    3e5c:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    3e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e64:	f8c4 242c 	str.w	r2, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    3e68:	4a4d      	ldr	r2, [pc, #308]	; (3fa0 <main+0x174>)
    3e6a:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    3e6e:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    3e72:	4d4c      	ldr	r5, [pc, #304]	; (3fa4 <main+0x178>)
    3e74:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    3e78:	4628      	mov	r0, r5
    3e7a:	4e4b      	ldr	r6, [pc, #300]	; (3fa8 <main+0x17c>)
    3e7c:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    3e7e:	f204 4124 	addw	r1, r4, #1060	; 0x424
    3e82:	4628      	mov	r0, r5
    3e84:	47b0      	blx	r6
	timer_start(&TIMER_0);
    3e86:	4628      	mov	r0, r5
    3e88:	4b48      	ldr	r3, [pc, #288]	; (3fac <main+0x180>)
    3e8a:	4798      	blx	r3
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
<<<<<<< HEAD
    3d34:	493f      	ldr	r1, [pc, #252]	; (3e34 <main+0x174>)
    3d36:	2036      	movs	r0, #54	; 0x36
    3d38:	4c3f      	ldr	r4, [pc, #252]	; (3e38 <main+0x178>)
    3d3a:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    3d3c:	493f      	ldr	r1, [pc, #252]	; (3e3c <main+0x17c>)
    3d3e:	2037      	movs	r0, #55	; 0x37
    3d40:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    3d42:	493f      	ldr	r1, [pc, #252]	; (3e40 <main+0x180>)
    3d44:	202e      	movs	r0, #46	; 0x2e
    3d46:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    3d48:	493e      	ldr	r1, [pc, #248]	; (3e44 <main+0x184>)
    3d4a:	2019      	movs	r0, #25
    3d4c:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d4e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    3d52:	f8c6 4094 	str.w	r4, [r6, #148]	; 0x94
=======
    3e8c:	4948      	ldr	r1, [pc, #288]	; (3fb0 <main+0x184>)
    3e8e:	2036      	movs	r0, #54	; 0x36
    3e90:	4c48      	ldr	r4, [pc, #288]	; (3fb4 <main+0x188>)
    3e92:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    3e94:	4948      	ldr	r1, [pc, #288]	; (3fb8 <main+0x18c>)
    3e96:	2037      	movs	r0, #55	; 0x37
    3e98:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    3e9a:	4948      	ldr	r1, [pc, #288]	; (3fbc <main+0x190>)
    3e9c:	202e      	movs	r0, #46	; 0x2e
    3e9e:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    3ea0:	4947      	ldr	r1, [pc, #284]	; (3fc0 <main+0x194>)
    3ea2:	2019      	movs	r0, #25
    3ea4:	47a0      	blx	r4
	
	
	// Wait for SD Card and then load config from it
	while (SD_MMC_OK != sd_mmc_check(0)) {}
    3ea6:	2000      	movs	r0, #0
    3ea8:	4b46      	ldr	r3, [pc, #280]	; (3fc4 <main+0x198>)
    3eaa:	4798      	blx	r3
    3eac:	2800      	cmp	r0, #0
    3eae:	d1fa      	bne.n	3ea6 <main+0x7a>
	if (loadSDCardHeader() == MS_SUCCESS)
    3eb0:	4b45      	ldr	r3, [pc, #276]	; (3fc8 <main+0x19c>)
    3eb2:	4798      	blx	r3
    3eb4:	2801      	cmp	r0, #1
    3eb6:	d144      	bne.n	3f42 <main+0x116>
		deviceState |= DEVICE_STATE_CONFIG_LOADED;
    3eb8:	4a44      	ldr	r2, [pc, #272]	; (3fcc <main+0x1a0>)
    3eba:	6813      	ldr	r3, [r2, #0]
    3ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3ec0:	6013      	str	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ec2:	4c31      	ldr	r4, [pc, #196]	; (3f88 <main+0x15c>)
    3ec4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    3ec8:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
<<<<<<< HEAD
    3d56:	2064      	movs	r0, #100	; 0x64
    3d58:	4b3b      	ldr	r3, [pc, #236]	; (3e48 <main+0x188>)
    3d5a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d5c:	f8c6 4098 	str.w	r4, [r6, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    3d60:	2064      	movs	r0, #100	; 0x64
    3d62:	4b3a      	ldr	r3, [pc, #232]	; (3e4c <main+0x18c>)
    3d64:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    3d66:	2000      	movs	r0, #0
    3d68:	4c39      	ldr	r4, [pc, #228]	; (3e50 <main+0x190>)
    3d6a:	47a0      	blx	r4
    3d6c:	4b39      	ldr	r3, [pc, #228]	; (3e54 <main+0x194>)
    3d6e:	8018      	strh	r0, [r3, #0]
	regValue[0] = spi_BB_Read(32);
    3d70:	2020      	movs	r0, #32
    3d72:	47a0      	blx	r4
    3d74:	4e38      	ldr	r6, [pc, #224]	; (3e58 <main+0x198>)
    3d76:	8030      	strh	r0, [r6, #0]
	python480Init();
    3d78:	4b38      	ldr	r3, [pc, #224]	; (3e5c <main+0x19c>)
    3d7a:	4798      	blx	r3
	regValue[1] = spi_BB_Read(32);
    3d7c:	2020      	movs	r0, #32
    3d7e:	47a0      	blx	r4
    3d80:	8070      	strh	r0, [r6, #2]
	python480SetGain(1); //getPropFromHeader(HEADER_GAIN_POS));
    3d82:	4628      	mov	r0, r5
    3d84:	4b36      	ldr	r3, [pc, #216]	; (3e60 <main+0x1a0>)
    3d86:	4798      	blx	r3
	python480SetFPS(10); //getPropFromHeader(HEADER_FRAME_RATE_POS));
    3d88:	200a      	movs	r0, #10
    3d8a:	4b36      	ldr	r3, [pc, #216]	; (3e64 <main+0x1a4>)
    3d8c:	4798      	blx	r3
	
	sd_mmc_init_write_blocks(0, CONFIG_BLOCK, 1);
=======
    3ecc:	2064      	movs	r0, #100	; 0x64
    3ece:	4b40      	ldr	r3, [pc, #256]	; (3fd0 <main+0x1a4>)
    3ed0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ed2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    3ed6:	2064      	movs	r0, #100	; 0x64
    3ed8:	4b3e      	ldr	r3, [pc, #248]	; (3fd4 <main+0x1a8>)
    3eda:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    3edc:	2000      	movs	r0, #0
    3ede:	4c3e      	ldr	r4, [pc, #248]	; (3fd8 <main+0x1ac>)
    3ee0:	47a0      	blx	r4
    3ee2:	4b3e      	ldr	r3, [pc, #248]	; (3fdc <main+0x1b0>)
    3ee4:	8018      	strh	r0, [r3, #0]
	regValue[0] = spi_BB_Read(32);
    3ee6:	2020      	movs	r0, #32
    3ee8:	47a0      	blx	r4
    3eea:	4d3d      	ldr	r5, [pc, #244]	; (3fe0 <main+0x1b4>)
    3eec:	8028      	strh	r0, [r5, #0]
	python480Init();
    3eee:	4b3d      	ldr	r3, [pc, #244]	; (3fe4 <main+0x1b8>)
    3ef0:	4798      	blx	r3
	regValue[1] = spi_BB_Read(32);
    3ef2:	2020      	movs	r0, #32
    3ef4:	47a0      	blx	r4
    3ef6:	8068      	strh	r0, [r5, #2]
	python480SetGain(getPropFromHeader(HEADER_GAIN_POS));
	python480SetFPS(getPropFromHeader(HEADER_FRAME_RATE_POS));
	*/
	
	// Set some parameters in config buffer to be written to SD card at end of recording
	setConfigBlockProp(CONFIG_BLOCK_WIDTH_POS, WIDTH);
    3ef8:	f44f 7116 	mov.w	r1, #600	; 0x258
    3efc:	2000      	movs	r0, #0
    3efe:	4c3a      	ldr	r4, [pc, #232]	; (3fe8 <main+0x1bc>)
    3f00:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_HEIGHT_POS, HEIGHT);
    3f02:	f44f 7116 	mov.w	r1, #600	; 0x258
    3f06:	2001      	movs	r0, #1
    3f08:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_FRAME_RATE_POS, getPropFromHeader(HEADER_FRAME_RATE_POS));
    3f0a:	2008      	movs	r0, #8
    3f0c:	4b37      	ldr	r3, [pc, #220]	; (3fec <main+0x1c0>)
    3f0e:	4798      	blx	r3
    3f10:	4601      	mov	r1, r0
    3f12:	2002      	movs	r0, #2
    3f14:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_BUFFER_SIZE_POS, BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE);
    3f16:	f44f 4120 	mov.w	r1, #40960	; 0xa000
    3f1a:	2003      	movs	r0, #3
    3f1c:	47a0      	blx	r4
	
	sd_mmc_init_write_blocks(0, CONFIG_BLOCK, 1);
    3f1e:	2201      	movs	r2, #1
    3f20:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3f24:	2000      	movs	r0, #0
    3f26:	4b32      	ldr	r3, [pc, #200]	; (3ff0 <main+0x1c4>)
    3f28:	4798      	blx	r3
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
	sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
    3f2a:	2101      	movs	r1, #1
    3f2c:	4831      	ldr	r0, [pc, #196]	; (3ff4 <main+0x1c8>)
    3f2e:	4b32      	ldr	r3, [pc, #200]	; (3ff8 <main+0x1cc>)
    3f30:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
<<<<<<< HEAD
	*/
	setStatusLED(0);
    3d8e:	2000      	movs	r0, #0
    3d90:	47c0      	blx	r8
	bool lastMonitor0 = 0;
    3d92:	2500      	movs	r5, #0
    3d94:	e00a      	b.n	3dac <main+0xec>
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING)
			startRecording();
    3d96:	4b34      	ldr	r3, [pc, #208]	; (3e68 <main+0x1a8>)
    3d98:	4798      	blx	r3
    3d9a:	e00c      	b.n	3db6 <main+0xf6>
		if (deviceState & DEVICE_STATE_RECORDING) {
			recording();
    3d9c:	4b33      	ldr	r3, [pc, #204]	; (3e6c <main+0x1ac>)
    3d9e:	4798      	blx	r3
    3da0:	e00e      	b.n	3dc0 <main+0x100>
		lastMonitor0 = thisMonitor0;
		
			//add_read=I2C_BB_begin(EWL_I2C_ADDR,0);
			//setStatusLED(add_read);
			
			I2C_BB_write(EWL_I2C_ADDR,0x20);
    3da2:	2120      	movs	r1, #32
    3da4:	2023      	movs	r0, #35	; 0x23
    3da6:	4b32      	ldr	r3, [pc, #200]	; (3e70 <main+0x1b0>)
    3da8:	4798      	blx	r3
		lastMonitor0 = thisMonitor0;
    3daa:	4625      	mov	r5, r4
		if (deviceState & DEVICE_STATE_START_RECORDING)
    3dac:	4b31      	ldr	r3, [pc, #196]	; (3e74 <main+0x1b4>)
    3dae:	681b      	ldr	r3, [r3, #0]
    3db0:	f013 0f04 	tst.w	r3, #4
    3db4:	d1ef      	bne.n	3d96 <main+0xd6>
		if (deviceState & DEVICE_STATE_RECORDING) {
    3db6:	4b2f      	ldr	r3, [pc, #188]	; (3e74 <main+0x1b4>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	f013 0f08 	tst.w	r3, #8
    3dbe:	d1ed      	bne.n	3d9c <main+0xdc>
	CRITICAL_SECTION_ENTER();
    3dc0:	4668      	mov	r0, sp
    3dc2:	4b2d      	ldr	r3, [pc, #180]	; (3e78 <main+0x1b8>)
    3dc4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3dc6:	4b11      	ldr	r3, [pc, #68]	; (3e0c <main+0x14c>)
    3dc8:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3dca:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3dcc:	691c      	ldr	r4, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3dce:	4054      	eors	r4, r2
    3dd0:	400c      	ands	r4, r1
    3dd2:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3dd4:	4668      	mov	r0, sp
    3dd6:	4b29      	ldr	r3, [pc, #164]	; (3e7c <main+0x1bc>)
    3dd8:	4798      	blx	r3
    3dda:	f3c4 14c0 	ubfx	r4, r4, #7, #1
		if ((lastMonitor0 != thisMonitor0) && lastMonitor0 == 0) {
    3dde:	42a5      	cmp	r5, r4
    3de0:	d0df      	beq.n	3da2 <main+0xe2>
    3de2:	2d00      	cmp	r5, #0
    3de4:	d1dd      	bne.n	3da2 <main+0xe2>
	CRITICAL_SECTION_ENTER();
    3de6:	a801      	add	r0, sp, #4
    3de8:	4b23      	ldr	r3, [pc, #140]	; (3e78 <main+0x1b8>)
    3dea:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3dec:	4b07      	ldr	r3, [pc, #28]	; (3e0c <main+0x14c>)
    3dee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3df2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    3dfa:	a801      	add	r0, sp, #4
    3dfc:	4b1f      	ldr	r3, [pc, #124]	; (3e7c <main+0x1bc>)
    3dfe:	4798      	blx	r3
    3e00:	e7cf      	b.n	3da2 <main+0xe2>
    3e02:	bf00      	nop
    3e04:	000002d1 	.word	0x000002d1
    3e08:	40003800 	.word	0x40003800
    3e0c:	41008000 	.word	0x41008000
    3e10:	00003a0d 	.word	0x00003a0d
    3e14:	0000308d 	.word	0x0000308d
    3e18:	200006c8 	.word	0x200006c8
    3e1c:	00000c75 	.word	0x00000c75
    3e20:	20000224 	.word	0x20000224
    3e24:	00003111 	.word	0x00003111
    3e28:	00003175 	.word	0x00003175
    3e2c:	20000738 	.word	0x20000738
    3e30:	00001291 	.word	0x00001291
    3e34:	000031b1 	.word	0x000031b1
    3e38:	00000e6d 	.word	0x00000e6d
    3e3c:	00003121 	.word	0x00003121
    3e40:	0000320d 	.word	0x0000320d
    3e44:	000031e1 	.word	0x000031e1
    3e48:	00000dd5 	.word	0x00000dd5
    3e4c:	00000db5 	.word	0x00000db5
    3e50:	00003381 	.word	0x00003381
    3e54:	20000b78 	.word	0x20000b78
    3e58:	20000b7c 	.word	0x20000b7c
    3e5c:	000039c1 	.word	0x000039c1
    3e60:	0000330d 	.word	0x0000330d
    3e64:	00003349 	.word	0x00003349
    3e68:	00003a7d 	.word	0x00003a7d
    3e6c:	00003b29 	.word	0x00003b29
    3e70:	000030e9 	.word	0x000030e9
    3e74:	20000028 	.word	0x20000028
    3e78:	00000d41 	.word	0x00000d41
    3e7c:	00000d4f 	.word	0x00000d4f
    3e80:	00003a5d 	.word	0x00003a5d
    3e84:	000012cd 	.word	0x000012cd

00003e88 <sd_mmc_configure_slot>:
    3e88:	b510      	push	{r4, lr}
    3e8a:	b082      	sub	sp, #8
    3e8c:	4807      	ldr	r0, [pc, #28]	; (3eac <sd_mmc_configure_slot+0x24>)
    3e8e:	6802      	ldr	r2, [r0, #0]
    3e90:	7f94      	ldrb	r4, [r2, #30]
    3e92:	7b53      	ldrb	r3, [r2, #13]
    3e94:	6812      	ldr	r2, [r2, #0]
    3e96:	7901      	ldrb	r1, [r0, #4]
    3e98:	6880      	ldr	r0, [r0, #8]
    3e9a:	3400      	adds	r4, #0
    3e9c:	bf18      	it	ne
    3e9e:	2401      	movne	r4, #1
    3ea0:	9400      	str	r4, [sp, #0]
    3ea2:	4c03      	ldr	r4, [pc, #12]	; (3eb0 <sd_mmc_configure_slot+0x28>)
    3ea4:	47a0      	blx	r4
    3ea6:	b002      	add	sp, #8
    3ea8:	bd10      	pop	{r4, pc}
    3eaa:	bf00      	nop
    3eac:	2000065c 	.word	0x2000065c
    3eb0:	00000f71 	.word	0x00000f71

00003eb4 <sd_mmc_select_slot>:
    3eb4:	b108      	cbz	r0, 3eba <sd_mmc_select_slot+0x6>
    3eb6:	2004      	movs	r0, #4
    3eb8:	4770      	bx	lr
    3eba:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ebc:	b083      	sub	sp, #12
    3ebe:	4604      	mov	r4, r0
    3ec0:	4b45      	ldr	r3, [pc, #276]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3ec2:	68db      	ldr	r3, [r3, #12]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d050      	beq.n	3f6a <sd_mmc_select_slot+0xb6>
    3ec8:	0087      	lsls	r7, r0, #2
    3eca:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    3ece:	f1b5 3fff 	cmp.w	r5, #4294967295
    3ed2:	d04a      	beq.n	3f6a <sd_mmc_select_slot+0xb6>
    3ed4:	b2ed      	uxtb	r5, r5
    3ed6:	096e      	lsrs	r6, r5, #5
    3ed8:	a801      	add	r0, sp, #4
    3eda:	4b40      	ldr	r3, [pc, #256]	; (3fdc <sd_mmc_select_slot+0x128>)
    3edc:	4798      	blx	r3
    3ede:	4940      	ldr	r1, [pc, #256]	; (3fe0 <sd_mmc_select_slot+0x12c>)
    3ee0:	01f3      	lsls	r3, r6, #7
    3ee2:	18ca      	adds	r2, r1, r3
    3ee4:	58c9      	ldr	r1, [r1, r3]
    3ee6:	6a13      	ldr	r3, [r2, #32]
    3ee8:	6916      	ldr	r6, [r2, #16]
    3eea:	405e      	eors	r6, r3
    3eec:	400e      	ands	r6, r1
    3eee:	405e      	eors	r6, r3
    3ef0:	a801      	add	r0, sp, #4
    3ef2:	4b3c      	ldr	r3, [pc, #240]	; (3fe4 <sd_mmc_select_slot+0x130>)
    3ef4:	4798      	blx	r3
    3ef6:	f005 051f 	and.w	r5, r5, #31
    3efa:	2301      	movs	r3, #1
    3efc:	fa03 f505 	lsl.w	r5, r3, r5
    3f00:	4235      	tst	r5, r6
    3f02:	bf14      	ite	ne
    3f04:	461a      	movne	r2, r3
    3f06:	2200      	moveq	r2, #0
    3f08:	4b33      	ldr	r3, [pc, #204]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f0a:	68db      	ldr	r3, [r3, #12]
    3f0c:	441f      	add	r7, r3
    3f0e:	887b      	ldrh	r3, [r7, #2]
    3f10:	429a      	cmp	r2, r3
    3f12:	d006      	beq.n	3f22 <sd_mmc_select_slot+0x6e>
    3f14:	4b30      	ldr	r3, [pc, #192]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f16:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3f1a:	2304      	movs	r3, #4
    3f1c:	76a3      	strb	r3, [r4, #26]
    3f1e:	2002      	movs	r0, #2
    3f20:	e047      	b.n	3fb2 <sd_mmc_select_slot+0xfe>
    3f22:	4b2d      	ldr	r3, [pc, #180]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f24:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f28:	7e9b      	ldrb	r3, [r3, #26]
    3f2a:	2b04      	cmp	r3, #4
    3f2c:	d009      	beq.n	3f42 <sd_mmc_select_slot+0x8e>
    3f2e:	2b01      	cmp	r3, #1
    3f30:	d00e      	beq.n	3f50 <sd_mmc_select_slot+0x9c>
    3f32:	4b29      	ldr	r3, [pc, #164]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f34:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f38:	7e9b      	ldrb	r3, [r3, #26]
    3f3a:	2b03      	cmp	r3, #3
    3f3c:	d11d      	bne.n	3f7a <sd_mmc_select_slot+0xc6>
    3f3e:	2003      	movs	r0, #3
    3f40:	e037      	b.n	3fb2 <sd_mmc_select_slot+0xfe>
    3f42:	4b25      	ldr	r3, [pc, #148]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f44:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    3f48:	2301      	movs	r3, #1
    3f4a:	76a3      	strb	r3, [r4, #26]
    3f4c:	2002      	movs	r0, #2
    3f4e:	e030      	b.n	3fb2 <sd_mmc_select_slot+0xfe>
    3f50:	4b21      	ldr	r3, [pc, #132]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f52:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f56:	2202      	movs	r2, #2
    3f58:	769a      	strb	r2, [r3, #26]
    3f5a:	4a23      	ldr	r2, [pc, #140]	; (3fe8 <sd_mmc_select_slot+0x134>)
    3f5c:	611a      	str	r2, [r3, #16]
    3f5e:	2201      	movs	r2, #1
    3f60:	775a      	strb	r2, [r3, #29]
    3f62:	2200      	movs	r2, #0
    3f64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3f68:	e7e3      	b.n	3f32 <sd_mmc_select_slot+0x7e>
    3f6a:	4b1b      	ldr	r3, [pc, #108]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f6c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3f70:	7e9b      	ldrb	r3, [r3, #26]
    3f72:	3b03      	subs	r3, #3
    3f74:	b2db      	uxtb	r3, r3
    3f76:	2b01      	cmp	r3, #1
    3f78:	d91d      	bls.n	3fb6 <sd_mmc_select_slot+0x102>
    3f7a:	4b17      	ldr	r3, [pc, #92]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f7c:	791b      	ldrb	r3, [r3, #4]
    3f7e:	429c      	cmp	r4, r3
    3f80:	d026      	beq.n	3fd0 <sd_mmc_select_slot+0x11c>
    3f82:	4b15      	ldr	r3, [pc, #84]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f84:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3f86:	bb2b      	cbnz	r3, 3fd4 <sd_mmc_select_slot+0x120>
    3f88:	2001      	movs	r0, #1
    3f8a:	f240 422c 	movw	r2, #1068	; 0x42c
    3f8e:	4917      	ldr	r1, [pc, #92]	; (3fec <sd_mmc_select_slot+0x138>)
    3f90:	4b17      	ldr	r3, [pc, #92]	; (3ff0 <sd_mmc_select_slot+0x13c>)
    3f92:	4798      	blx	r3
    3f94:	4d10      	ldr	r5, [pc, #64]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3f96:	712c      	strb	r4, [r5, #4]
    3f98:	f105 0310 	add.w	r3, r5, #16
    3f9c:	0164      	lsls	r4, r4, #5
    3f9e:	4423      	add	r3, r4
    3fa0:	602b      	str	r3, [r5, #0]
    3fa2:	4b14      	ldr	r3, [pc, #80]	; (3ff4 <sd_mmc_select_slot+0x140>)
    3fa4:	4798      	blx	r3
    3fa6:	442c      	add	r4, r5
    3fa8:	7ea0      	ldrb	r0, [r4, #26]
    3faa:	2802      	cmp	r0, #2
    3fac:	bf14      	ite	ne
    3fae:	2000      	movne	r0, #0
    3fb0:	2001      	moveq	r0, #1
    3fb2:	b003      	add	sp, #12
    3fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fb6:	4b08      	ldr	r3, [pc, #32]	; (3fd8 <sd_mmc_select_slot+0x124>)
    3fb8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3fbc:	2202      	movs	r2, #2
    3fbe:	769a      	strb	r2, [r3, #26]
    3fc0:	4a09      	ldr	r2, [pc, #36]	; (3fe8 <sd_mmc_select_slot+0x134>)
    3fc2:	611a      	str	r2, [r3, #16]
    3fc4:	2201      	movs	r2, #1
    3fc6:	775a      	strb	r2, [r3, #29]
    3fc8:	2200      	movs	r2, #0
    3fca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3fce:	e7d4      	b.n	3f7a <sd_mmc_select_slot+0xc6>
    3fd0:	2001      	movs	r0, #1
    3fd2:	e7da      	b.n	3f8a <sd_mmc_select_slot+0xd6>
    3fd4:	2000      	movs	r0, #0
    3fd6:	e7d8      	b.n	3f8a <sd_mmc_select_slot+0xd6>
    3fd8:	2000065c 	.word	0x2000065c
    3fdc:	00000d41 	.word	0x00000d41
    3fe0:	41008000 	.word	0x41008000
    3fe4:	00000d4f 	.word	0x00000d4f
    3fe8:	00061a80 	.word	0x00061a80
    3fec:	000048a0 	.word	0x000048a0
    3ff0:	00001561 	.word	0x00001561
    3ff4:	00003e89 	.word	0x00003e89

00003ff8 <sd_mmc_deselect_slot>:
    3ff8:	b508      	push	{r3, lr}
    3ffa:	4b04      	ldr	r3, [pc, #16]	; (400c <sd_mmc_deselect_slot+0x14>)
    3ffc:	7919      	ldrb	r1, [r3, #4]
    3ffe:	b101      	cbz	r1, 4002 <sd_mmc_deselect_slot+0xa>
    4000:	bd08      	pop	{r3, pc}
    4002:	6898      	ldr	r0, [r3, #8]
    4004:	4b02      	ldr	r3, [pc, #8]	; (4010 <sd_mmc_deselect_slot+0x18>)
    4006:	4798      	blx	r3
    4008:	e7fa      	b.n	4000 <sd_mmc_deselect_slot+0x8>
    400a:	bf00      	nop
    400c:	2000065c 	.word	0x2000065c
    4010:	00000fad 	.word	0x00000fad

00004014 <sd_mmc_init>:
    4014:	b430      	push	{r4, r5}
    4016:	2300      	movs	r3, #0
    4018:	b13b      	cbz	r3, 402a <sd_mmc_init+0x16>
    401a:	4b08      	ldr	r3, [pc, #32]	; (403c <sd_mmc_init+0x28>)
    401c:	24ff      	movs	r4, #255	; 0xff
    401e:	711c      	strb	r4, [r3, #4]
    4020:	6098      	str	r0, [r3, #8]
    4022:	60d9      	str	r1, [r3, #12]
    4024:	635a      	str	r2, [r3, #52]	; 0x34
    4026:	bc30      	pop	{r4, r5}
    4028:	4770      	bx	lr
    402a:	4c04      	ldr	r4, [pc, #16]	; (403c <sd_mmc_init+0x28>)
    402c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    4030:	2504      	movs	r5, #4
    4032:	76a5      	strb	r5, [r4, #26]
    4034:	3301      	adds	r3, #1
    4036:	b2db      	uxtb	r3, r3
    4038:	e7ee      	b.n	4018 <sd_mmc_init+0x4>
    403a:	bf00      	nop
    403c:	2000065c 	.word	0x2000065c

00004040 <sd_mmc_is_write_protected>:
    4040:	4b19      	ldr	r3, [pc, #100]	; (40a8 <sd_mmc_is_write_protected+0x68>)
    4042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4044:	b35b      	cbz	r3, 409e <sd_mmc_is_write_protected+0x5e>
    4046:	b570      	push	{r4, r5, r6, lr}
    4048:	b082      	sub	sp, #8
    404a:	0085      	lsls	r5, r0, #2
    404c:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4050:	f1b3 3fff 	cmp.w	r3, #4294967295
    4054:	d025      	beq.n	40a2 <sd_mmc_is_write_protected+0x62>
    4056:	b2de      	uxtb	r6, r3
    4058:	0974      	lsrs	r4, r6, #5
    405a:	a801      	add	r0, sp, #4
    405c:	4b13      	ldr	r3, [pc, #76]	; (40ac <sd_mmc_is_write_protected+0x6c>)
    405e:	4798      	blx	r3
    4060:	4913      	ldr	r1, [pc, #76]	; (40b0 <sd_mmc_is_write_protected+0x70>)
    4062:	01e3      	lsls	r3, r4, #7
    4064:	18ca      	adds	r2, r1, r3
    4066:	58c9      	ldr	r1, [r1, r3]
    4068:	6a13      	ldr	r3, [r2, #32]
    406a:	6914      	ldr	r4, [r2, #16]
    406c:	405c      	eors	r4, r3
    406e:	400c      	ands	r4, r1
    4070:	405c      	eors	r4, r3
    4072:	a801      	add	r0, sp, #4
    4074:	4b0f      	ldr	r3, [pc, #60]	; (40b4 <sd_mmc_is_write_protected+0x74>)
    4076:	4798      	blx	r3
    4078:	f006 031f 	and.w	r3, r6, #31
    407c:	2201      	movs	r2, #1
    407e:	fa02 f303 	lsl.w	r3, r2, r3
    4082:	4223      	tst	r3, r4
    4084:	bf08      	it	eq
    4086:	2200      	moveq	r2, #0
    4088:	4b07      	ldr	r3, [pc, #28]	; (40a8 <sd_mmc_is_write_protected+0x68>)
    408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    408c:	441d      	add	r5, r3
    408e:	886b      	ldrh	r3, [r5, #2]
    4090:	429a      	cmp	r2, r3
    4092:	d002      	beq.n	409a <sd_mmc_is_write_protected+0x5a>
    4094:	2000      	movs	r0, #0
    4096:	b002      	add	sp, #8
    4098:	bd70      	pop	{r4, r5, r6, pc}
    409a:	2001      	movs	r0, #1
    409c:	e7fb      	b.n	4096 <sd_mmc_is_write_protected+0x56>
    409e:	2000      	movs	r0, #0
    40a0:	4770      	bx	lr
    40a2:	2000      	movs	r0, #0
    40a4:	e7f7      	b.n	4096 <sd_mmc_is_write_protected+0x56>
    40a6:	bf00      	nop
    40a8:	2000065c 	.word	0x2000065c
    40ac:	00000d41 	.word	0x00000d41
    40b0:	41008000 	.word	0x41008000
    40b4:	00000d4f 	.word	0x00000d4f

000040b8 <sd_mmc_init_write_blocks>:
    40b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ba:	b083      	sub	sp, #12
    40bc:	4607      	mov	r7, r0
    40be:	460e      	mov	r6, r1
    40c0:	4615      	mov	r5, r2
    40c2:	4b1c      	ldr	r3, [pc, #112]	; (4134 <sd_mmc_init_write_blocks+0x7c>)
    40c4:	4798      	blx	r3
    40c6:	4604      	mov	r4, r0
    40c8:	b110      	cbz	r0, 40d0 <sd_mmc_init_write_blocks+0x18>
    40ca:	4620      	mov	r0, r4
    40cc:	b003      	add	sp, #12
    40ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40d0:	4638      	mov	r0, r7
    40d2:	4b19      	ldr	r3, [pc, #100]	; (4138 <sd_mmc_init_write_blocks+0x80>)
    40d4:	4798      	blx	r3
    40d6:	b9c0      	cbnz	r0, 410a <sd_mmc_init_write_blocks+0x52>
    40d8:	2d01      	cmp	r5, #1
    40da:	d91a      	bls.n	4112 <sd_mmc_init_write_blocks+0x5a>
    40dc:	4917      	ldr	r1, [pc, #92]	; (413c <sd_mmc_init_write_blocks+0x84>)
    40de:	4b18      	ldr	r3, [pc, #96]	; (4140 <sd_mmc_init_write_blocks+0x88>)
    40e0:	681b      	ldr	r3, [r3, #0]
    40e2:	7adb      	ldrb	r3, [r3, #11]
    40e4:	f013 0f08 	tst.w	r3, #8
    40e8:	d100      	bne.n	40ec <sd_mmc_init_write_blocks+0x34>
    40ea:	0276      	lsls	r6, r6, #9
    40ec:	4b14      	ldr	r3, [pc, #80]	; (4140 <sd_mmc_init_write_blocks+0x88>)
    40ee:	6898      	ldr	r0, [r3, #8]
    40f0:	2301      	movs	r3, #1
    40f2:	9301      	str	r3, [sp, #4]
    40f4:	9500      	str	r5, [sp, #0]
    40f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    40fa:	4632      	mov	r2, r6
    40fc:	4e11      	ldr	r6, [pc, #68]	; (4144 <sd_mmc_init_write_blocks+0x8c>)
    40fe:	47b0      	blx	r6
    4100:	b948      	cbnz	r0, 4116 <sd_mmc_init_write_blocks+0x5e>
    4102:	4b11      	ldr	r3, [pc, #68]	; (4148 <sd_mmc_init_write_blocks+0x90>)
    4104:	4798      	blx	r3
    4106:	2405      	movs	r4, #5
    4108:	e7df      	b.n	40ca <sd_mmc_init_write_blocks+0x12>
    410a:	4b0f      	ldr	r3, [pc, #60]	; (4148 <sd_mmc_init_write_blocks+0x90>)
    410c:	4798      	blx	r3
    410e:	2407      	movs	r4, #7
    4110:	e7db      	b.n	40ca <sd_mmc_init_write_blocks+0x12>
    4112:	490e      	ldr	r1, [pc, #56]	; (414c <sd_mmc_init_write_blocks+0x94>)
    4114:	e7e3      	b.n	40de <sd_mmc_init_write_blocks+0x26>
    4116:	4b0a      	ldr	r3, [pc, #40]	; (4140 <sd_mmc_init_write_blocks+0x88>)
    4118:	6898      	ldr	r0, [r3, #8]
    411a:	4b0d      	ldr	r3, [pc, #52]	; (4150 <sd_mmc_init_write_blocks+0x98>)
    411c:	4798      	blx	r3
    411e:	4b0d      	ldr	r3, [pc, #52]	; (4154 <sd_mmc_init_write_blocks+0x9c>)
    4120:	4003      	ands	r3, r0
    4122:	b91b      	cbnz	r3, 412c <sd_mmc_init_write_blocks+0x74>
    4124:	4b06      	ldr	r3, [pc, #24]	; (4140 <sd_mmc_init_write_blocks+0x88>)
    4126:	861d      	strh	r5, [r3, #48]	; 0x30
    4128:	871d      	strh	r5, [r3, #56]	; 0x38
    412a:	e7ce      	b.n	40ca <sd_mmc_init_write_blocks+0x12>
    412c:	4b06      	ldr	r3, [pc, #24]	; (4148 <sd_mmc_init_write_blocks+0x90>)
    412e:	4798      	blx	r3
    4130:	2405      	movs	r4, #5
    4132:	e7ca      	b.n	40ca <sd_mmc_init_write_blocks+0x12>
    4134:	00003eb5 	.word	0x00003eb5
    4138:	00004041 	.word	0x00004041
    413c:	00109119 	.word	0x00109119
    4140:	2000065c 	.word	0x2000065c
    4144:	00001031 	.word	0x00001031
    4148:	00003ff9 	.word	0x00003ff9
    414c:	00089118 	.word	0x00089118
    4150:	00001009 	.word	0x00001009
    4154:	e4580000 	.word	0xe4580000

00004158 <sd_mmc_start_write_blocks>:
    4158:	b570      	push	{r4, r5, r6, lr}
    415a:	4606      	mov	r6, r0
    415c:	460c      	mov	r4, r1
    415e:	4d0d      	ldr	r5, [pc, #52]	; (4194 <sd_mmc_start_write_blocks+0x3c>)
    4160:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4162:	f240 52fa 	movw	r2, #1530	; 0x5fa
    4166:	490c      	ldr	r1, [pc, #48]	; (4198 <sd_mmc_start_write_blocks+0x40>)
    4168:	42a0      	cmp	r0, r4
    416a:	bf34      	ite	cc
    416c:	2000      	movcc	r0, #0
    416e:	2001      	movcs	r0, #1
    4170:	4b0a      	ldr	r3, [pc, #40]	; (419c <sd_mmc_start_write_blocks+0x44>)
    4172:	4798      	blx	r3
    4174:	4622      	mov	r2, r4
    4176:	4631      	mov	r1, r6
    4178:	68a8      	ldr	r0, [r5, #8]
    417a:	4b09      	ldr	r3, [pc, #36]	; (41a0 <sd_mmc_start_write_blocks+0x48>)
    417c:	4798      	blx	r3
    417e:	b918      	cbnz	r0, 4188 <sd_mmc_start_write_blocks+0x30>
    4180:	2200      	movs	r2, #0
    4182:	862a      	strh	r2, [r5, #48]	; 0x30
    4184:	2005      	movs	r0, #5
    4186:	bd70      	pop	{r4, r5, r6, pc}
    4188:	4a02      	ldr	r2, [pc, #8]	; (4194 <sd_mmc_start_write_blocks+0x3c>)
    418a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    418c:	1b1c      	subs	r4, r3, r4
    418e:	8614      	strh	r4, [r2, #48]	; 0x30
    4190:	2000      	movs	r0, #0
    4192:	bd70      	pop	{r4, r5, r6, pc}
    4194:	2000065c 	.word	0x2000065c
    4198:	000048a0 	.word	0x000048a0
    419c:	00001561 	.word	0x00001561
    41a0:	00001075 	.word	0x00001075

000041a4 <sd_mmc_wait_end_of_write_blocks>:
    41a4:	b510      	push	{r4, lr}
    41a6:	4604      	mov	r4, r0
    41a8:	4b14      	ldr	r3, [pc, #80]	; (41fc <sd_mmc_wait_end_of_write_blocks+0x58>)
    41aa:	6898      	ldr	r0, [r3, #8]
    41ac:	4b14      	ldr	r3, [pc, #80]	; (4200 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    41ae:	4798      	blx	r3
    41b0:	b908      	cbnz	r0, 41b6 <sd_mmc_wait_end_of_write_blocks+0x12>
    41b2:	2005      	movs	r0, #5
    41b4:	bd10      	pop	{r4, pc}
    41b6:	b194      	cbz	r4, 41de <sd_mmc_wait_end_of_write_blocks+0x3a>
    41b8:	2200      	movs	r2, #0
    41ba:	4b10      	ldr	r3, [pc, #64]	; (41fc <sd_mmc_wait_end_of_write_blocks+0x58>)
    41bc:	861a      	strh	r2, [r3, #48]	; 0x30
    41be:	4b0f      	ldr	r3, [pc, #60]	; (41fc <sd_mmc_wait_end_of_write_blocks+0x58>)
    41c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    41c2:	2b01      	cmp	r3, #1
    41c4:	d011      	beq.n	41ea <sd_mmc_wait_end_of_write_blocks+0x46>
    41c6:	2200      	movs	r2, #0
    41c8:	f243 110c 	movw	r1, #12556	; 0x310c
    41cc:	4b0b      	ldr	r3, [pc, #44]	; (41fc <sd_mmc_wait_end_of_write_blocks+0x58>)
    41ce:	6898      	ldr	r0, [r3, #8]
    41d0:	4b0c      	ldr	r3, [pc, #48]	; (4204 <sd_mmc_wait_end_of_write_blocks+0x60>)
    41d2:	4798      	blx	r3
    41d4:	b968      	cbnz	r0, 41f2 <sd_mmc_wait_end_of_write_blocks+0x4e>
    41d6:	4b0c      	ldr	r3, [pc, #48]	; (4208 <sd_mmc_wait_end_of_write_blocks+0x64>)
    41d8:	4798      	blx	r3
    41da:	2005      	movs	r0, #5
    41dc:	bd10      	pop	{r4, pc}
    41de:	4b07      	ldr	r3, [pc, #28]	; (41fc <sd_mmc_wait_end_of_write_blocks+0x58>)
    41e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    41e2:	2b00      	cmp	r3, #0
    41e4:	d0eb      	beq.n	41be <sd_mmc_wait_end_of_write_blocks+0x1a>
    41e6:	2000      	movs	r0, #0
    41e8:	bd10      	pop	{r4, pc}
    41ea:	4b07      	ldr	r3, [pc, #28]	; (4208 <sd_mmc_wait_end_of_write_blocks+0x64>)
    41ec:	4798      	blx	r3
    41ee:	2000      	movs	r0, #0
    41f0:	bd10      	pop	{r4, pc}
    41f2:	4b05      	ldr	r3, [pc, #20]	; (4208 <sd_mmc_wait_end_of_write_blocks+0x64>)
    41f4:	4798      	blx	r3
    41f6:	2000      	movs	r0, #0
    41f8:	bd10      	pop	{r4, pc}
    41fa:	bf00      	nop
    41fc:	2000065c 	.word	0x2000065c
    4200:	000010ad 	.word	0x000010ad
    4204:	00000fd9 	.word	0x00000fd9
    4208:	00003ff9 	.word	0x00003ff9

0000420c <sd_mmc_stack_init>:
    420c:	b508      	push	{r3, lr}
    420e:	4903      	ldr	r1, [pc, #12]	; (421c <sd_mmc_stack_init+0x10>)
    4210:	460a      	mov	r2, r1
    4212:	3104      	adds	r1, #4
    4214:	4802      	ldr	r0, [pc, #8]	; (4220 <sd_mmc_stack_init+0x14>)
    4216:	4b03      	ldr	r3, [pc, #12]	; (4224 <sd_mmc_stack_init+0x18>)
    4218:	4798      	blx	r3
    421a:	bd08      	pop	{r3, pc}
    421c:	20000030 	.word	0x20000030
    4220:	20000720 	.word	0x20000720
    4224:	00004015 	.word	0x00004015

00004228 <__aeabi_uldivmod>:
    4228:	b953      	cbnz	r3, 4240 <__aeabi_uldivmod+0x18>
    422a:	b94a      	cbnz	r2, 4240 <__aeabi_uldivmod+0x18>
    422c:	2900      	cmp	r1, #0
    422e:	bf08      	it	eq
    4230:	2800      	cmpeq	r0, #0
    4232:	bf1c      	itt	ne
    4234:	f04f 31ff 	movne.w	r1, #4294967295
    4238:	f04f 30ff 	movne.w	r0, #4294967295
    423c:	f000 b97a 	b.w	4534 <__aeabi_idiv0>
    4240:	f1ad 0c08 	sub.w	ip, sp, #8
    4244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4248:	f000 f806 	bl	4258 <__udivmoddi4>
    424c:	f8dd e004 	ldr.w	lr, [sp, #4]
    4250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4254:	b004      	add	sp, #16
    4256:	4770      	bx	lr

00004258 <__udivmoddi4>:
    4258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    425c:	468c      	mov	ip, r1
    425e:	460d      	mov	r5, r1
    4260:	4604      	mov	r4, r0
    4262:	9e08      	ldr	r6, [sp, #32]
    4264:	2b00      	cmp	r3, #0
    4266:	d151      	bne.n	430c <__udivmoddi4+0xb4>
    4268:	428a      	cmp	r2, r1
    426a:	4617      	mov	r7, r2
    426c:	d96d      	bls.n	434a <__udivmoddi4+0xf2>
    426e:	fab2 fe82 	clz	lr, r2
    4272:	f1be 0f00 	cmp.w	lr, #0
    4276:	d00b      	beq.n	4290 <__udivmoddi4+0x38>
    4278:	f1ce 0c20 	rsb	ip, lr, #32
    427c:	fa01 f50e 	lsl.w	r5, r1, lr
    4280:	fa20 fc0c 	lsr.w	ip, r0, ip
    4284:	fa02 f70e 	lsl.w	r7, r2, lr
    4288:	ea4c 0c05 	orr.w	ip, ip, r5
    428c:	fa00 f40e 	lsl.w	r4, r0, lr
    4290:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4294:	0c25      	lsrs	r5, r4, #16
    4296:	fbbc f8fa 	udiv	r8, ip, sl
    429a:	fa1f f987 	uxth.w	r9, r7
    429e:	fb0a cc18 	mls	ip, sl, r8, ip
    42a2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    42a6:	fb08 f309 	mul.w	r3, r8, r9
    42aa:	42ab      	cmp	r3, r5
    42ac:	d90a      	bls.n	42c4 <__udivmoddi4+0x6c>
    42ae:	19ed      	adds	r5, r5, r7
    42b0:	f108 32ff 	add.w	r2, r8, #4294967295
    42b4:	f080 8123 	bcs.w	44fe <__udivmoddi4+0x2a6>
    42b8:	42ab      	cmp	r3, r5
    42ba:	f240 8120 	bls.w	44fe <__udivmoddi4+0x2a6>
    42be:	f1a8 0802 	sub.w	r8, r8, #2
    42c2:	443d      	add	r5, r7
    42c4:	1aed      	subs	r5, r5, r3
    42c6:	b2a4      	uxth	r4, r4
    42c8:	fbb5 f0fa 	udiv	r0, r5, sl
    42cc:	fb0a 5510 	mls	r5, sl, r0, r5
    42d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    42d4:	fb00 f909 	mul.w	r9, r0, r9
    42d8:	45a1      	cmp	r9, r4
    42da:	d909      	bls.n	42f0 <__udivmoddi4+0x98>
    42dc:	19e4      	adds	r4, r4, r7
    42de:	f100 33ff 	add.w	r3, r0, #4294967295
    42e2:	f080 810a 	bcs.w	44fa <__udivmoddi4+0x2a2>
    42e6:	45a1      	cmp	r9, r4
    42e8:	f240 8107 	bls.w	44fa <__udivmoddi4+0x2a2>
    42ec:	3802      	subs	r0, #2
    42ee:	443c      	add	r4, r7
    42f0:	eba4 0409 	sub.w	r4, r4, r9
    42f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    42f8:	2100      	movs	r1, #0
    42fa:	2e00      	cmp	r6, #0
    42fc:	d061      	beq.n	43c2 <__udivmoddi4+0x16a>
    42fe:	fa24 f40e 	lsr.w	r4, r4, lr
    4302:	2300      	movs	r3, #0
    4304:	6034      	str	r4, [r6, #0]
    4306:	6073      	str	r3, [r6, #4]
    4308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    430c:	428b      	cmp	r3, r1
    430e:	d907      	bls.n	4320 <__udivmoddi4+0xc8>
    4310:	2e00      	cmp	r6, #0
    4312:	d054      	beq.n	43be <__udivmoddi4+0x166>
    4314:	2100      	movs	r1, #0
    4316:	e886 0021 	stmia.w	r6, {r0, r5}
    431a:	4608      	mov	r0, r1
    431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4320:	fab3 f183 	clz	r1, r3
    4324:	2900      	cmp	r1, #0
    4326:	f040 808e 	bne.w	4446 <__udivmoddi4+0x1ee>
    432a:	42ab      	cmp	r3, r5
    432c:	d302      	bcc.n	4334 <__udivmoddi4+0xdc>
    432e:	4282      	cmp	r2, r0
    4330:	f200 80fa 	bhi.w	4528 <__udivmoddi4+0x2d0>
    4334:	1a84      	subs	r4, r0, r2
    4336:	eb65 0503 	sbc.w	r5, r5, r3
    433a:	2001      	movs	r0, #1
    433c:	46ac      	mov	ip, r5
    433e:	2e00      	cmp	r6, #0
    4340:	d03f      	beq.n	43c2 <__udivmoddi4+0x16a>
    4342:	e886 1010 	stmia.w	r6, {r4, ip}
    4346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    434a:	b912      	cbnz	r2, 4352 <__udivmoddi4+0xfa>
    434c:	2701      	movs	r7, #1
    434e:	fbb7 f7f2 	udiv	r7, r7, r2
    4352:	fab7 fe87 	clz	lr, r7
    4356:	f1be 0f00 	cmp.w	lr, #0
    435a:	d134      	bne.n	43c6 <__udivmoddi4+0x16e>
    435c:	1beb      	subs	r3, r5, r7
    435e:	0c3a      	lsrs	r2, r7, #16
    4360:	fa1f fc87 	uxth.w	ip, r7
    4364:	2101      	movs	r1, #1
    4366:	fbb3 f8f2 	udiv	r8, r3, r2
    436a:	0c25      	lsrs	r5, r4, #16
    436c:	fb02 3318 	mls	r3, r2, r8, r3
    4370:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4374:	fb0c f308 	mul.w	r3, ip, r8
    4378:	42ab      	cmp	r3, r5
    437a:	d907      	bls.n	438c <__udivmoddi4+0x134>
    437c:	19ed      	adds	r5, r5, r7
    437e:	f108 30ff 	add.w	r0, r8, #4294967295
    4382:	d202      	bcs.n	438a <__udivmoddi4+0x132>
    4384:	42ab      	cmp	r3, r5
    4386:	f200 80d1 	bhi.w	452c <__udivmoddi4+0x2d4>
    438a:	4680      	mov	r8, r0
    438c:	1aed      	subs	r5, r5, r3
    438e:	b2a3      	uxth	r3, r4
    4390:	fbb5 f0f2 	udiv	r0, r5, r2
    4394:	fb02 5510 	mls	r5, r2, r0, r5
    4398:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    439c:	fb0c fc00 	mul.w	ip, ip, r0
    43a0:	45a4      	cmp	ip, r4
    43a2:	d907      	bls.n	43b4 <__udivmoddi4+0x15c>
    43a4:	19e4      	adds	r4, r4, r7
    43a6:	f100 33ff 	add.w	r3, r0, #4294967295
    43aa:	d202      	bcs.n	43b2 <__udivmoddi4+0x15a>
    43ac:	45a4      	cmp	ip, r4
    43ae:	f200 80b8 	bhi.w	4522 <__udivmoddi4+0x2ca>
    43b2:	4618      	mov	r0, r3
    43b4:	eba4 040c 	sub.w	r4, r4, ip
    43b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    43bc:	e79d      	b.n	42fa <__udivmoddi4+0xa2>
    43be:	4631      	mov	r1, r6
    43c0:	4630      	mov	r0, r6
    43c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43c6:	f1ce 0420 	rsb	r4, lr, #32
    43ca:	fa05 f30e 	lsl.w	r3, r5, lr
    43ce:	fa07 f70e 	lsl.w	r7, r7, lr
    43d2:	fa20 f804 	lsr.w	r8, r0, r4
    43d6:	0c3a      	lsrs	r2, r7, #16
    43d8:	fa25 f404 	lsr.w	r4, r5, r4
    43dc:	ea48 0803 	orr.w	r8, r8, r3
    43e0:	fbb4 f1f2 	udiv	r1, r4, r2
    43e4:	ea4f 4518 	mov.w	r5, r8, lsr #16
    43e8:	fb02 4411 	mls	r4, r2, r1, r4
    43ec:	fa1f fc87 	uxth.w	ip, r7
    43f0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    43f4:	fb01 f30c 	mul.w	r3, r1, ip
    43f8:	42ab      	cmp	r3, r5
    43fa:	fa00 f40e 	lsl.w	r4, r0, lr
    43fe:	d909      	bls.n	4414 <__udivmoddi4+0x1bc>
    4400:	19ed      	adds	r5, r5, r7
    4402:	f101 30ff 	add.w	r0, r1, #4294967295
    4406:	f080 808a 	bcs.w	451e <__udivmoddi4+0x2c6>
    440a:	42ab      	cmp	r3, r5
    440c:	f240 8087 	bls.w	451e <__udivmoddi4+0x2c6>
    4410:	3902      	subs	r1, #2
    4412:	443d      	add	r5, r7
    4414:	1aeb      	subs	r3, r5, r3
    4416:	fa1f f588 	uxth.w	r5, r8
    441a:	fbb3 f0f2 	udiv	r0, r3, r2
    441e:	fb02 3310 	mls	r3, r2, r0, r3
    4422:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4426:	fb00 f30c 	mul.w	r3, r0, ip
    442a:	42ab      	cmp	r3, r5
    442c:	d907      	bls.n	443e <__udivmoddi4+0x1e6>
    442e:	19ed      	adds	r5, r5, r7
    4430:	f100 38ff 	add.w	r8, r0, #4294967295
    4434:	d26f      	bcs.n	4516 <__udivmoddi4+0x2be>
    4436:	42ab      	cmp	r3, r5
    4438:	d96d      	bls.n	4516 <__udivmoddi4+0x2be>
    443a:	3802      	subs	r0, #2
    443c:	443d      	add	r5, r7
    443e:	1aeb      	subs	r3, r5, r3
    4440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4444:	e78f      	b.n	4366 <__udivmoddi4+0x10e>
    4446:	f1c1 0720 	rsb	r7, r1, #32
    444a:	fa22 f807 	lsr.w	r8, r2, r7
    444e:	408b      	lsls	r3, r1
    4450:	fa05 f401 	lsl.w	r4, r5, r1
    4454:	ea48 0303 	orr.w	r3, r8, r3
    4458:	fa20 fe07 	lsr.w	lr, r0, r7
    445c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4460:	40fd      	lsrs	r5, r7
    4462:	ea4e 0e04 	orr.w	lr, lr, r4
    4466:	fbb5 f9fc 	udiv	r9, r5, ip
    446a:	ea4f 441e 	mov.w	r4, lr, lsr #16
    446e:	fb0c 5519 	mls	r5, ip, r9, r5
    4472:	fa1f f883 	uxth.w	r8, r3
    4476:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    447a:	fb09 f408 	mul.w	r4, r9, r8
    447e:	42ac      	cmp	r4, r5
    4480:	fa02 f201 	lsl.w	r2, r2, r1
    4484:	fa00 fa01 	lsl.w	sl, r0, r1
    4488:	d908      	bls.n	449c <__udivmoddi4+0x244>
    448a:	18ed      	adds	r5, r5, r3
    448c:	f109 30ff 	add.w	r0, r9, #4294967295
    4490:	d243      	bcs.n	451a <__udivmoddi4+0x2c2>
    4492:	42ac      	cmp	r4, r5
    4494:	d941      	bls.n	451a <__udivmoddi4+0x2c2>
    4496:	f1a9 0902 	sub.w	r9, r9, #2
    449a:	441d      	add	r5, r3
    449c:	1b2d      	subs	r5, r5, r4
    449e:	fa1f fe8e 	uxth.w	lr, lr
    44a2:	fbb5 f0fc 	udiv	r0, r5, ip
    44a6:	fb0c 5510 	mls	r5, ip, r0, r5
    44aa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    44ae:	fb00 f808 	mul.w	r8, r0, r8
    44b2:	45a0      	cmp	r8, r4
    44b4:	d907      	bls.n	44c6 <__udivmoddi4+0x26e>
    44b6:	18e4      	adds	r4, r4, r3
    44b8:	f100 35ff 	add.w	r5, r0, #4294967295
    44bc:	d229      	bcs.n	4512 <__udivmoddi4+0x2ba>
    44be:	45a0      	cmp	r8, r4
    44c0:	d927      	bls.n	4512 <__udivmoddi4+0x2ba>
    44c2:	3802      	subs	r0, #2
    44c4:	441c      	add	r4, r3
    44c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    44ca:	eba4 0408 	sub.w	r4, r4, r8
    44ce:	fba0 8902 	umull	r8, r9, r0, r2
    44d2:	454c      	cmp	r4, r9
    44d4:	46c6      	mov	lr, r8
    44d6:	464d      	mov	r5, r9
    44d8:	d315      	bcc.n	4506 <__udivmoddi4+0x2ae>
    44da:	d012      	beq.n	4502 <__udivmoddi4+0x2aa>
    44dc:	b156      	cbz	r6, 44f4 <__udivmoddi4+0x29c>
    44de:	ebba 030e 	subs.w	r3, sl, lr
    44e2:	eb64 0405 	sbc.w	r4, r4, r5
    44e6:	fa04 f707 	lsl.w	r7, r4, r7
    44ea:	40cb      	lsrs	r3, r1
    44ec:	431f      	orrs	r7, r3
    44ee:	40cc      	lsrs	r4, r1
    44f0:	6037      	str	r7, [r6, #0]
    44f2:	6074      	str	r4, [r6, #4]
    44f4:	2100      	movs	r1, #0
    44f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44fa:	4618      	mov	r0, r3
    44fc:	e6f8      	b.n	42f0 <__udivmoddi4+0x98>
    44fe:	4690      	mov	r8, r2
    4500:	e6e0      	b.n	42c4 <__udivmoddi4+0x6c>
    4502:	45c2      	cmp	sl, r8
    4504:	d2ea      	bcs.n	44dc <__udivmoddi4+0x284>
    4506:	ebb8 0e02 	subs.w	lr, r8, r2
    450a:	eb69 0503 	sbc.w	r5, r9, r3
    450e:	3801      	subs	r0, #1
    4510:	e7e4      	b.n	44dc <__udivmoddi4+0x284>
    4512:	4628      	mov	r0, r5
    4514:	e7d7      	b.n	44c6 <__udivmoddi4+0x26e>
    4516:	4640      	mov	r0, r8
    4518:	e791      	b.n	443e <__udivmoddi4+0x1e6>
    451a:	4681      	mov	r9, r0
    451c:	e7be      	b.n	449c <__udivmoddi4+0x244>
    451e:	4601      	mov	r1, r0
    4520:	e778      	b.n	4414 <__udivmoddi4+0x1bc>
    4522:	3802      	subs	r0, #2
    4524:	443c      	add	r4, r7
    4526:	e745      	b.n	43b4 <__udivmoddi4+0x15c>
    4528:	4608      	mov	r0, r1
    452a:	e708      	b.n	433e <__udivmoddi4+0xe6>
    452c:	f1a8 0802 	sub.w	r8, r8, #2
    4530:	443d      	add	r5, r7
    4532:	e72b      	b.n	438c <__udivmoddi4+0x134>

00004534 <__aeabi_idiv0>:
    4534:	4770      	bx	lr
    4536:	bf00      	nop

00004538 <__libc_init_array>:
    4538:	b570      	push	{r4, r5, r6, lr}
    453a:	4e0d      	ldr	r6, [pc, #52]	; (4570 <__libc_init_array+0x38>)
    453c:	4c0d      	ldr	r4, [pc, #52]	; (4574 <__libc_init_array+0x3c>)
    453e:	1ba4      	subs	r4, r4, r6
    4540:	10a4      	asrs	r4, r4, #2
    4542:	2500      	movs	r5, #0
    4544:	42a5      	cmp	r5, r4
    4546:	d109      	bne.n	455c <__libc_init_array+0x24>
    4548:	4e0b      	ldr	r6, [pc, #44]	; (4578 <__libc_init_array+0x40>)
    454a:	4c0c      	ldr	r4, [pc, #48]	; (457c <__libc_init_array+0x44>)
    454c:	f000 f9b2 	bl	48b4 <_init>
    4550:	1ba4      	subs	r4, r4, r6
    4552:	10a4      	asrs	r4, r4, #2
    4554:	2500      	movs	r5, #0
    4556:	42a5      	cmp	r5, r4
    4558:	d105      	bne.n	4566 <__libc_init_array+0x2e>
    455a:	bd70      	pop	{r4, r5, r6, pc}
    455c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4560:	4798      	blx	r3
    4562:	3501      	adds	r5, #1
    4564:	e7ee      	b.n	4544 <__libc_init_array+0xc>
    4566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    456a:	4798      	blx	r3
    456c:	3501      	adds	r5, #1
    456e:	e7f2      	b.n	4556 <__libc_init_array+0x1e>
    4570:	000048c0 	.word	0x000048c0
    4574:	000048c0 	.word	0x000048c0
    4578:	000048c0 	.word	0x000048c0
    457c:	000048c4 	.word	0x000048c4
    4580:	682f2e2e 	.word	0x682f2e2e
    4584:	732f6c61 	.word	0x732f6c61
    4588:	682f6372 	.word	0x682f6372
    458c:	615f6c61 	.word	0x615f6c61
    4590:	735f6364 	.word	0x735f6364
    4594:	2e636e79 	.word	0x2e636e79
    4598:	00000063 	.word	0x00000063
    459c:	682f2e2e 	.word	0x682f2e2e
    45a0:	732f6c61 	.word	0x732f6c61
    45a4:	682f6372 	.word	0x682f6372
    45a8:	635f6c61 	.word	0x635f6c61
    45ac:	72656d61 	.word	0x72656d61
    45b0:	73615f61 	.word	0x73615f61
    45b4:	2e636e79 	.word	0x2e636e79
    45b8:	00000063 	.word	0x00000063
    45bc:	682f2e2e 	.word	0x682f2e2e
    45c0:	732f6c61 	.word	0x732f6c61
    45c4:	682f6372 	.word	0x682f6372
    45c8:	6d5f6c61 	.word	0x6d5f6c61
    45cc:	735f6963 	.word	0x735f6963
    45d0:	2e636e79 	.word	0x2e636e79
    45d4:	00000063 	.word	0x00000063
    45d8:	682f2e2e 	.word	0x682f2e2e
    45dc:	732f6c61 	.word	0x732f6c61
    45e0:	682f6372 	.word	0x682f6372
    45e4:	705f6c61 	.word	0x705f6c61
    45e8:	632e6d77 	.word	0x632e6d77
    45ec:	00000000 	.word	0x00000000
    45f0:	682f2e2e 	.word	0x682f2e2e
    45f4:	732f6c61 	.word	0x732f6c61
    45f8:	682f6372 	.word	0x682f6372
    45fc:	745f6c61 	.word	0x745f6c61
    4600:	72656d69 	.word	0x72656d69
    4604:	0000632e 	.word	0x0000632e
    4608:	682f2e2e 	.word	0x682f2e2e
    460c:	732f6c61 	.word	0x732f6c61
    4610:	682f6372 	.word	0x682f6372
    4614:	755f6c61 	.word	0x755f6c61
    4618:	74726173 	.word	0x74726173
    461c:	7973615f 	.word	0x7973615f
    4620:	632e636e 	.word	0x632e636e
    4624:	00000000 	.word	0x00000000
    4628:	682f2e2e 	.word	0x682f2e2e
    462c:	752f6c61 	.word	0x752f6c61
    4630:	736c6974 	.word	0x736c6974
    4634:	6372732f 	.word	0x6372732f
    4638:	6974752f 	.word	0x6974752f
    463c:	6c5f736c 	.word	0x6c5f736c
    4640:	2e747369 	.word	0x2e747369
    4644:	00000063 	.word	0x00000063
    4648:	682f2e2e 	.word	0x682f2e2e
    464c:	752f6c61 	.word	0x752f6c61
    4650:	736c6974 	.word	0x736c6974
    4654:	6372732f 	.word	0x6372732f
    4658:	6974752f 	.word	0x6974752f
    465c:	725f736c 	.word	0x725f736c
    4660:	62676e69 	.word	0x62676e69
    4664:	65666675 	.word	0x65666675
    4668:	00632e72 	.word	0x00632e72

0000466c <_adcs>:
    466c:	00000000 00000018 00001800 00000000     ................
	...
    4684:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    4694:	632e6364 00000000                       dc.c....

0000469c <_cfgs>:
    469c:	00205000 0a000000 00000000 00000000     .P .............
	...

0000479c <_map>:
    479c:	00000006 00000036 00000007 00000037     ....6.......7...
    47ac:	00000009 00000019 0000000e 0000002e     ................
    47bc:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    47cc:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    47dc:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    47ec:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    47fc:	43000000 43000400                       ...C...C

00004804 <_usarts>:
    4804:	00000005 40100004 00030000 00700002     .......@......p.
    4814:	0000ff58 00000000                       X.......

0000481c <_i2cms>:
	...

00004834 <_i2css>:
	...

00004844 <sercomspi_regs>:
	...
    4858:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4868:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    4878:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    4888:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    4898:	63745f6c 0000632e 732f2e2e 6d6d5f64     l_tc.c..../sd_mm
    48a8:	64732f63 636d6d5f 0000632e              c/sd_mmc.c..

000048b4 <_init>:
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	bf00      	nop
    48b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ba:	bc08      	pop	{r3}
    48bc:	469e      	mov	lr, r3
    48be:	4770      	bx	lr

000048c0 <__init_array_start>:
    48c0:	00000289 	.word	0x00000289

000048c4 <_fini>:
    48c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c6:	bf00      	nop
    48c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ca:	bc08      	pop	{r3}
    48cc:	469e      	mov	lr, r3
    48ce:	4770      	bx	lr

000048d0 <__fini_array_start>:
    48d0:	00000265 	.word	0x00000265
=======
    3f32:	2000      	movs	r0, #0
    3f34:	4b31      	ldr	r3, [pc, #196]	; (3ffc <main+0x1d0>)
    3f36:	4798      	blx	r3
	
	
	// Just a debugging point for turning on excitation LED
	setExcitationLED(5,1);
    3f38:	2101      	movs	r1, #1
    3f3a:	2005      	movs	r0, #5
    3f3c:	4b30      	ldr	r3, [pc, #192]	; (4000 <main+0x1d4>)
    3f3e:	4798      	blx	r3
    3f40:	e00d      	b.n	3f5e <main+0x132>
		deviceState |= DEVICE_STATE_ERROR;
    3f42:	4a22      	ldr	r2, [pc, #136]	; (3fcc <main+0x1a0>)
    3f44:	6813      	ldr	r3, [r2, #0]
    3f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3f4a:	6013      	str	r3, [r2, #0]
    3f4c:	e7b9      	b.n	3ec2 <main+0x96>
	
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING)
			startRecording();
    3f4e:	4b2d      	ldr	r3, [pc, #180]	; (4004 <main+0x1d8>)
    3f50:	4798      	blx	r3
    3f52:	e009      	b.n	3f68 <main+0x13c>
		if (deviceState & DEVICE_STATE_RECORDING) {
			recording();
		}
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    3f54:	4b1d      	ldr	r3, [pc, #116]	; (3fcc <main+0x1a0>)
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	f013 0f10 	tst.w	r3, #16
    3f5c:	d10c      	bne.n	3f78 <main+0x14c>
		if (deviceState & DEVICE_STATE_START_RECORDING)
    3f5e:	4b1b      	ldr	r3, [pc, #108]	; (3fcc <main+0x1a0>)
    3f60:	681b      	ldr	r3, [r3, #0]
    3f62:	f013 0f04 	tst.w	r3, #4
    3f66:	d1f2      	bne.n	3f4e <main+0x122>
		if (deviceState & DEVICE_STATE_RECORDING) {
    3f68:	4b18      	ldr	r3, [pc, #96]	; (3fcc <main+0x1a0>)
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	f013 0f08 	tst.w	r3, #8
    3f70:	d0f0      	beq.n	3f54 <main+0x128>
			recording();
    3f72:	4b25      	ldr	r3, [pc, #148]	; (4008 <main+0x1dc>)
    3f74:	4798      	blx	r3
    3f76:	e7ed      	b.n	3f54 <main+0x128>
			stopRecording();
    3f78:	4b24      	ldr	r3, [pc, #144]	; (400c <main+0x1e0>)
    3f7a:	4798      	blx	r3
    3f7c:	e7ef      	b.n	3f5e <main+0x132>
    3f7e:	bf00      	nop
    3f80:	000002d1 	.word	0x000002d1
    3f84:	40003800 	.word	0x40003800
    3f88:	41008000 	.word	0x41008000
    3f8c:	200006c8 	.word	0x200006c8
    3f90:	00000c75 	.word	0x00000c75
    3f94:	00003b3d 	.word	0x00003b3d
    3f98:	20000224 	.word	0x20000224
    3f9c:	00003251 	.word	0x00003251
    3fa0:	00003261 	.word	0x00003261
    3fa4:	20000738 	.word	0x20000738
    3fa8:	000013dd 	.word	0x000013dd
    3fac:	000013a1 	.word	0x000013a1
    3fb0:	0000329d 	.word	0x0000329d
    3fb4:	00000e6d 	.word	0x00000e6d
    3fb8:	000032f9 	.word	0x000032f9
    3fbc:	00003b5d 	.word	0x00003b5d
    3fc0:	000032cd 	.word	0x000032cd
    3fc4:	000049f9 	.word	0x000049f9
    3fc8:	00003a99 	.word	0x00003a99
    3fcc:	20000028 	.word	0x20000028
    3fd0:	00000dd5 	.word	0x00000dd5
    3fd4:	00000db5 	.word	0x00000db5
    3fd8:	0000341d 	.word	0x0000341d
    3fdc:	20000b78 	.word	0x20000b78
    3fe0:	20000b7c 	.word	0x20000b7c
    3fe4:	00003a5d 	.word	0x00003a5d
    3fe8:	00003ae1 	.word	0x00003ae1
    3fec:	00003ad1 	.word	0x00003ad1
    3ff0:	00004c11 	.word	0x00004c11
    3ff4:	20000428 	.word	0x20000428
    3ff8:	00004cb1 	.word	0x00004cb1
    3ffc:	00004cfd 	.word	0x00004cfd
    4000:	00003aed 	.word	0x00003aed
    4004:	00003bbd 	.word	0x00003bbd
    4008:	00003c95 	.word	0x00003c95
    400c:	00003c2d 	.word	0x00003c2d

00004010 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    4010:	4b1f      	ldr	r3, [pc, #124]	; (4090 <sd_decode_csd+0x80>)
    4012:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4014:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    4016:	f001 0007 	and.w	r0, r1, #7
    401a:	4b1e      	ldr	r3, [pc, #120]	; (4094 <sd_decode_csd+0x84>)
    401c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    4020:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    4024:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4028:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    402a:	fb01 f100 	mul.w	r1, r1, r0
    402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4032:	fb03 f301 	mul.w	r3, r3, r1
    4036:	6013      	str	r3, [r2, #0]
    4038:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    403a:	099b      	lsrs	r3, r3, #6
    403c:	d11a      	bne.n	4074 <sd_decode_csd+0x64>
    403e:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4040:	7d53      	ldrb	r3, [r2, #21]
    4042:	009b      	lsls	r3, r3, #2
    4044:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    4048:	7d11      	ldrb	r1, [r2, #20]
    404a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    404e:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    4052:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4054:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4056:	7dd1      	ldrb	r1, [r2, #23]
    4058:	0049      	lsls	r1, r1, #1
    405a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    405e:	f001 0107 	and.w	r1, r1, #7
    4062:	3102      	adds	r1, #2
		uint32_t blocknr
    4064:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4066:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    4068:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    406c:	408b      	lsls	r3, r1
    406e:	0a9b      	lsrs	r3, r3, #10
    4070:	6053      	str	r3, [r2, #4]
    4072:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4074:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4076:	7d91      	ldrb	r1, [r2, #22]
    4078:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    407c:	7d51      	ldrb	r1, [r2, #21]
    407e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    4082:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    4086:	3301      	adds	r3, #1
    4088:	025b      	lsls	r3, r3, #9
    408a:	6053      	str	r3, [r2, #4]
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	2000065c 	.word	0x2000065c
    4094:	00005408 	.word	0x00005408

00004098 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    4098:	b510      	push	{r4, lr}
    409a:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    409c:	4807      	ldr	r0, [pc, #28]	; (40bc <sd_mmc_configure_slot+0x24>)
    409e:	6802      	ldr	r2, [r0, #0]
    40a0:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    40a2:	7b53      	ldrb	r3, [r2, #13]
    40a4:	6812      	ldr	r2, [r2, #0]
    40a6:	7901      	ldrb	r1, [r0, #4]
    40a8:	6880      	ldr	r0, [r0, #8]
    40aa:	3400      	adds	r4, #0
    40ac:	bf18      	it	ne
    40ae:	2401      	movne	r4, #1
    40b0:	9400      	str	r4, [sp, #0]
    40b2:	4c03      	ldr	r4, [pc, #12]	; (40c0 <sd_mmc_configure_slot+0x28>)
    40b4:	47a0      	blx	r4
}
    40b6:	b002      	add	sp, #8
    40b8:	bd10      	pop	{r4, pc}
    40ba:	bf00      	nop
    40bc:	2000065c 	.word	0x2000065c
    40c0:	00000f71 	.word	0x00000f71

000040c4 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    40c4:	b108      	cbz	r0, 40ca <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    40c6:	2004      	movs	r0, #4
    40c8:	4770      	bx	lr
{
    40ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    40cc:	b083      	sub	sp, #12
    40ce:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    40d0:	4b45      	ldr	r3, [pc, #276]	; (41e8 <sd_mmc_select_slot+0x124>)
    40d2:	68db      	ldr	r3, [r3, #12]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d050      	beq.n	417a <sd_mmc_select_slot+0xb6>
    40d8:	0087      	lsls	r7, r0, #2
    40da:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    40de:	f1b5 3fff 	cmp.w	r5, #4294967295
    40e2:	d04a      	beq.n	417a <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    40e4:	b2ed      	uxtb	r5, r5
    40e6:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    40e8:	a801      	add	r0, sp, #4
    40ea:	4b40      	ldr	r3, [pc, #256]	; (41ec <sd_mmc_select_slot+0x128>)
    40ec:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    40ee:	4940      	ldr	r1, [pc, #256]	; (41f0 <sd_mmc_select_slot+0x12c>)
    40f0:	01f3      	lsls	r3, r6, #7
    40f2:	18ca      	adds	r2, r1, r3
    40f4:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    40f6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    40f8:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    40fa:	405e      	eors	r6, r3
    40fc:	400e      	ands	r6, r1
    40fe:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    4100:	a801      	add	r0, sp, #4
    4102:	4b3c      	ldr	r3, [pc, #240]	; (41f4 <sd_mmc_select_slot+0x130>)
    4104:	4798      	blx	r3
    4106:	f005 051f 	and.w	r5, r5, #31
    410a:	2301      	movs	r3, #1
    410c:	fa03 f505 	lsl.w	r5, r3, r5
    4110:	4235      	tst	r5, r6
    4112:	bf14      	ite	ne
    4114:	461a      	movne	r2, r3
    4116:	2200      	moveq	r2, #0
    4118:	4b33      	ldr	r3, [pc, #204]	; (41e8 <sd_mmc_select_slot+0x124>)
    411a:	68db      	ldr	r3, [r3, #12]
    411c:	441f      	add	r7, r3
    411e:	887b      	ldrh	r3, [r7, #2]
    4120:	429a      	cmp	r2, r3
    4122:	d006      	beq.n	4132 <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4124:	4b30      	ldr	r3, [pc, #192]	; (41e8 <sd_mmc_select_slot+0x124>)
    4126:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    412a:	2304      	movs	r3, #4
    412c:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    412e:	2002      	movs	r0, #2
    4130:	e047      	b.n	41c2 <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    4132:	4b2d      	ldr	r3, [pc, #180]	; (41e8 <sd_mmc_select_slot+0x124>)
    4134:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4138:	7e9b      	ldrb	r3, [r3, #26]
    413a:	2b04      	cmp	r3, #4
    413c:	d009      	beq.n	4152 <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    413e:	2b01      	cmp	r3, #1
    4140:	d00e      	beq.n	4160 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    4142:	4b29      	ldr	r3, [pc, #164]	; (41e8 <sd_mmc_select_slot+0x124>)
    4144:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4148:	7e9b      	ldrb	r3, [r3, #26]
    414a:	2b03      	cmp	r3, #3
    414c:	d11d      	bne.n	418a <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    414e:	2003      	movs	r0, #3
    4150:	e037      	b.n	41c2 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    4152:	4b25      	ldr	r3, [pc, #148]	; (41e8 <sd_mmc_select_slot+0x124>)
    4154:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    4158:	2301      	movs	r3, #1
    415a:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    415c:	2002      	movs	r0, #2
    415e:	e030      	b.n	41c2 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    4160:	4b21      	ldr	r3, [pc, #132]	; (41e8 <sd_mmc_select_slot+0x124>)
    4162:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4166:	2202      	movs	r2, #2
    4168:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    416a:	4a23      	ldr	r2, [pc, #140]	; (41f8 <sd_mmc_select_slot+0x134>)
    416c:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    416e:	2201      	movs	r2, #1
    4170:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4172:	2200      	movs	r2, #0
    4174:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4178:	e7e3      	b.n	4142 <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    417a:	4b1b      	ldr	r3, [pc, #108]	; (41e8 <sd_mmc_select_slot+0x124>)
    417c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4180:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    4182:	3b03      	subs	r3, #3
    4184:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    4186:	2b01      	cmp	r3, #1
    4188:	d91d      	bls.n	41c6 <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    418a:	4b17      	ldr	r3, [pc, #92]	; (41e8 <sd_mmc_select_slot+0x124>)
    418c:	791b      	ldrb	r3, [r3, #4]
    418e:	429c      	cmp	r4, r3
    4190:	d026      	beq.n	41e0 <sd_mmc_select_slot+0x11c>
    4192:	4b15      	ldr	r3, [pc, #84]	; (41e8 <sd_mmc_select_slot+0x124>)
    4194:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4196:	bb2b      	cbnz	r3, 41e4 <sd_mmc_select_slot+0x120>
    4198:	2001      	movs	r0, #1
    419a:	f240 422c 	movw	r2, #1068	; 0x42c
    419e:	4917      	ldr	r1, [pc, #92]	; (41fc <sd_mmc_select_slot+0x138>)
    41a0:	4b17      	ldr	r3, [pc, #92]	; (4200 <sd_mmc_select_slot+0x13c>)
    41a2:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    41a4:	4d10      	ldr	r5, [pc, #64]	; (41e8 <sd_mmc_select_slot+0x124>)
    41a6:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    41a8:	f105 0310 	add.w	r3, r5, #16
    41ac:	0164      	lsls	r4, r4, #5
    41ae:	4423      	add	r3, r4
    41b0:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    41b2:	4b14      	ldr	r3, [pc, #80]	; (4204 <sd_mmc_select_slot+0x140>)
    41b4:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    41b6:	442c      	add	r4, r5
    41b8:	7ea0      	ldrb	r0, [r4, #26]
    41ba:	2802      	cmp	r0, #2
    41bc:	bf14      	ite	ne
    41be:	2000      	movne	r0, #0
    41c0:	2001      	moveq	r0, #1
}
    41c2:	b003      	add	sp, #12
    41c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    41c6:	4b08      	ldr	r3, [pc, #32]	; (41e8 <sd_mmc_select_slot+0x124>)
    41c8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    41cc:	2202      	movs	r2, #2
    41ce:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    41d0:	4a09      	ldr	r2, [pc, #36]	; (41f8 <sd_mmc_select_slot+0x134>)
    41d2:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    41d4:	2201      	movs	r2, #1
    41d6:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    41d8:	2200      	movs	r2, #0
    41da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    41de:	e7d4      	b.n	418a <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    41e0:	2001      	movs	r0, #1
    41e2:	e7da      	b.n	419a <sd_mmc_select_slot+0xd6>
    41e4:	2000      	movs	r0, #0
    41e6:	e7d8      	b.n	419a <sd_mmc_select_slot+0xd6>
    41e8:	2000065c 	.word	0x2000065c
    41ec:	00000d41 	.word	0x00000d41
    41f0:	41008000 	.word	0x41008000
    41f4:	00000d4f 	.word	0x00000d4f
    41f8:	00061a80 	.word	0x00061a80
    41fc:	000054a4 	.word	0x000054a4
    4200:	00001671 	.word	0x00001671
    4204:	00004099 	.word	0x00004099

00004208 <sd_acmd6>:
{
    4208:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    420a:	4b0e      	ldr	r3, [pc, #56]	; (4244 <sd_acmd6+0x3c>)
    420c:	681a      	ldr	r2, [r3, #0]
    420e:	8912      	ldrh	r2, [r2, #8]
    4210:	0412      	lsls	r2, r2, #16
    4212:	f241 1137 	movw	r1, #4407	; 0x1137
    4216:	6898      	ldr	r0, [r3, #8]
    4218:	4b0b      	ldr	r3, [pc, #44]	; (4248 <sd_acmd6+0x40>)
    421a:	4798      	blx	r3
    421c:	4603      	mov	r3, r0
    421e:	b908      	cbnz	r0, 4224 <sd_acmd6+0x1c>
}
    4220:	4618      	mov	r0, r3
    4222:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    4224:	2202      	movs	r2, #2
    4226:	f241 1106 	movw	r1, #4358	; 0x1106
    422a:	4b06      	ldr	r3, [pc, #24]	; (4244 <sd_acmd6+0x3c>)
    422c:	6898      	ldr	r0, [r3, #8]
    422e:	4b06      	ldr	r3, [pc, #24]	; (4248 <sd_acmd6+0x40>)
    4230:	4798      	blx	r3
    4232:	4603      	mov	r3, r0
    4234:	2800      	cmp	r0, #0
    4236:	d0f3      	beq.n	4220 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    4238:	4a02      	ldr	r2, [pc, #8]	; (4244 <sd_acmd6+0x3c>)
    423a:	6812      	ldr	r2, [r2, #0]
    423c:	2104      	movs	r1, #4
    423e:	7351      	strb	r1, [r2, #13]
	return true;
    4240:	e7ee      	b.n	4220 <sd_acmd6+0x18>
    4242:	bf00      	nop
    4244:	2000065c 	.word	0x2000065c
    4248:	00001055 	.word	0x00001055

0000424c <sdio_cmd52>:
{
    424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4250:	4680      	mov	r8, r0
    4252:	460f      	mov	r7, r1
    4254:	4615      	mov	r5, r2
    4256:	461e      	mov	r6, r3
    4258:	9c06      	ldr	r4, [sp, #24]
	ASSERT(io_data != NULL);
    425a:	f240 3276 	movw	r2, #886	; 0x376
    425e:	4910      	ldr	r1, [pc, #64]	; (42a0 <sdio_cmd52+0x54>)
    4260:	1c20      	adds	r0, r4, #0
    4262:	bf18      	it	ne
    4264:	2001      	movne	r0, #1
    4266:	4b0f      	ldr	r3, [pc, #60]	; (42a4 <sdio_cmd52+0x58>)
    4268:	4798      	blx	r3
	                     ((uint32_t)*io_data << SDIO_CMD52_WR_DATA) | ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
    426a:	7822      	ldrb	r2, [r4, #0]
    426c:	ea42 72c8 	orr.w	r2, r2, r8, lsl #31
	                         | ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
    4270:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
	                         | ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
    4274:	ea42 62c6 	orr.w	r2, r2, r6, lsl #27
	if (!driver_send_cmd(sd_mmc_hal,
    4278:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
    427c:	f241 3134 	movw	r1, #4916	; 0x1334
    4280:	4b09      	ldr	r3, [pc, #36]	; (42a8 <sdio_cmd52+0x5c>)
    4282:	6898      	ldr	r0, [r3, #8]
    4284:	4b09      	ldr	r3, [pc, #36]	; (42ac <sdio_cmd52+0x60>)
    4286:	4798      	blx	r3
    4288:	4605      	mov	r5, r0
    428a:	b910      	cbnz	r0, 4292 <sdio_cmd52+0x46>
}
    428c:	4628      	mov	r0, r5
    428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*io_data = driver_get_response(sd_mmc_hal) & 0xFF;
    4292:	4b05      	ldr	r3, [pc, #20]	; (42a8 <sdio_cmd52+0x5c>)
    4294:	6898      	ldr	r0, [r3, #8]
    4296:	4b06      	ldr	r3, [pc, #24]	; (42b0 <sdio_cmd52+0x64>)
    4298:	4798      	blx	r3
    429a:	7020      	strb	r0, [r4, #0]
	return true;
    429c:	e7f6      	b.n	428c <sdio_cmd52+0x40>
    429e:	bf00      	nop
    42a0:	000054a4 	.word	0x000054a4
    42a4:	00001671 	.word	0x00001671
    42a8:	2000065c 	.word	0x2000065c
    42ac:	00001055 	.word	0x00001055
    42b0:	00001085 	.word	0x00001085

000042b4 <sdio_get_max_speed>:
{
    42b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42b6:	b087      	sub	sp, #28
	for (i = 0; i < 4; i++) {
    42b8:	2400      	movs	r4, #0
	addr_old = SDIO_CCCR_CIS_PTR;
    42ba:	2509      	movs	r5, #9
	for (i = 0; i < 4; i++) {
    42bc:	e00b      	b.n	42d6 <sdio_get_max_speed+0x22>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
    42be:	ab03      	add	r3, sp, #12
    42c0:	4423      	add	r3, r4
    42c2:	9300      	str	r3, [sp, #0]
    42c4:	2300      	movs	r3, #0
    42c6:	462a      	mov	r2, r5
    42c8:	4619      	mov	r1, r3
    42ca:	4618      	mov	r0, r3
    42cc:	4e35      	ldr	r6, [pc, #212]	; (43a4 <sdio_get_max_speed+0xf0>)
    42ce:	47b0      	blx	r6
		addr_old++;
    42d0:	3501      	adds	r5, #1
	for (i = 0; i < 4; i++) {
    42d2:	3401      	adds	r4, #1
    42d4:	b2e4      	uxtb	r4, r4
    42d6:	2c03      	cmp	r4, #3
    42d8:	d9f1      	bls.n	42be <sdio_get_max_speed+0xa>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + (addr_cis[2] << 16) + (addr_cis[3] << 24);
    42da:	f89d 700c 	ldrb.w	r7, [sp, #12]
    42de:	f89d 300d 	ldrb.w	r3, [sp, #13]
    42e2:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    42e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    42ea:	eb07 4703 	add.w	r7, r7, r3, lsl #16
    42ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    42f2:	eb07 6703 	add.w	r7, r7, r3, lsl #24
	addr_new = addr_old;
    42f6:	463d      	mov	r5, r7
    42f8:	e01d      	b.n	4336 <sdio_get_max_speed+0x82>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    42fa:	ab04      	add	r3, sp, #16
    42fc:	4423      	add	r3, r4
    42fe:	9300      	str	r3, [sp, #0]
    4300:	2300      	movs	r3, #0
    4302:	462a      	mov	r2, r5
    4304:	4619      	mov	r1, r3
    4306:	4618      	mov	r0, r3
    4308:	4e26      	ldr	r6, [pc, #152]	; (43a4 <sdio_get_max_speed+0xf0>)
    430a:	47b0      	blx	r6
			addr_new++;
    430c:	3501      	adds	r5, #1
		for (i = 0; i < 3; i++) {
    430e:	3401      	adds	r4, #1
    4310:	b2e4      	uxtb	r4, r4
    4312:	2c02      	cmp	r4, #2
    4314:	d9f1      	bls.n	42fa <sdio_get_max_speed+0x46>
		if (buf[0] == SDIO_CISTPL_END) {
    4316:	f89d 3010 	ldrb.w	r3, [sp, #16]
    431a:	2bff      	cmp	r3, #255	; 0xff
    431c:	d03b      	beq.n	4396 <sdio_get_max_speed+0xe2>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    431e:	2b22      	cmp	r3, #34	; 0x22
    4320:	d00b      	beq.n	433a <sdio_get_max_speed+0x86>
		if (buf[1] == 0) {
    4322:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4326:	2b00      	cmp	r3, #0
    4328:	d038      	beq.n	439c <sdio_get_max_speed+0xe8>
		addr_new += buf[1] - 1;
    432a:	441d      	add	r5, r3
    432c:	3d01      	subs	r5, #1
		if (addr_new > (addr_old + 256)) {
    432e:	f507 7380 	add.w	r3, r7, #256	; 0x100
    4332:	429d      	cmp	r5, r3
    4334:	d834      	bhi.n	43a0 <sdio_get_max_speed+0xec>
		for (i = 0; i < 3; i++) {
    4336:	2400      	movs	r4, #0
    4338:	e7eb      	b.n	4312 <sdio_get_max_speed+0x5e>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
    433a:	f89d 4012 	ldrb.w	r4, [sp, #18]
    433e:	2c00      	cmp	r4, #0
    4340:	d1ef      	bne.n	4322 <sdio_get_max_speed+0x6e>
	addr_new -= 3;
    4342:	3d03      	subs	r5, #3
	for (i = 0; i < 6; i++) {
    4344:	2c05      	cmp	r4, #5
    4346:	d80c      	bhi.n	4362 <sdio_get_max_speed+0xae>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
    4348:	ab04      	add	r3, sp, #16
    434a:	4423      	add	r3, r4
    434c:	9300      	str	r3, [sp, #0]
    434e:	2300      	movs	r3, #0
    4350:	462a      	mov	r2, r5
    4352:	4619      	mov	r1, r3
    4354:	4618      	mov	r0, r3
    4356:	4e13      	ldr	r6, [pc, #76]	; (43a4 <sdio_get_max_speed+0xf0>)
    4358:	47b0      	blx	r6
		addr_new++;
    435a:	3501      	adds	r5, #1
	for (i = 0; i < 6; i++) {
    435c:	3401      	adds	r4, #1
    435e:	b2e4      	uxtb	r4, r4
    4360:	e7f0      	b.n	4344 <sdio_get_max_speed+0x90>
	tplfe_max_tran_speed = buf[5];
    4362:	f89d 3015 	ldrb.w	r3, [sp, #21]
	if (tplfe_max_tran_speed > 0x32) {
    4366:	2b32      	cmp	r3, #50	; 0x32
    4368:	d900      	bls.n	436c <sdio_get_max_speed+0xb8>
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
    436a:	2332      	movs	r3, #50	; 0x32
	unit               = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
    436c:	f003 0107 	and.w	r1, r3, #7
    4370:	4a0d      	ldr	r2, [pc, #52]	; (43a8 <sdio_get_max_speed+0xf4>)
    4372:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	mul                = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
    4376:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    437a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    437e:	69db      	ldr	r3, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    4380:	4a0a      	ldr	r2, [pc, #40]	; (43ac <sdio_get_max_speed+0xf8>)
    4382:	6811      	ldr	r1, [r2, #0]
    4384:	fb03 f200 	mul.w	r2, r3, r0
    4388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    438c:	fb03 f302 	mul.w	r3, r3, r2
    4390:	600b      	str	r3, [r1, #0]
	return true;
    4392:	2001      	movs	r0, #1
    4394:	e000      	b.n	4398 <sdio_get_max_speed+0xe4>
			return false; /* Tuple error */
    4396:	2000      	movs	r0, #0
}
    4398:	b007      	add	sp, #28
    439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false; /* Tuple error */
    439c:	2000      	movs	r0, #0
    439e:	e7fb      	b.n	4398 <sdio_get_max_speed+0xe4>
			return false; /* Outoff CIS area */
    43a0:	2000      	movs	r0, #0
    43a2:	e7f9      	b.n	4398 <sdio_get_max_speed+0xe4>
    43a4:	0000424d 	.word	0x0000424d
    43a8:	00005408 	.word	0x00005408
    43ac:	2000065c 	.word	0x2000065c

000043b0 <sdio_cmd52_set_bus_width>:
{
    43b0:	b510      	push	{r4, lr}
    43b2:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP, 0, &u8_value)) {
    43b4:	f10d 030f 	add.w	r3, sp, #15
    43b8:	9300      	str	r3, [sp, #0]
    43ba:	2300      	movs	r3, #0
    43bc:	2208      	movs	r2, #8
    43be:	4619      	mov	r1, r3
    43c0:	4618      	mov	r0, r3
    43c2:	4c0e      	ldr	r4, [pc, #56]	; (43fc <sdio_cmd52_set_bus_width+0x4c>)
    43c4:	47a0      	blx	r4
    43c6:	4603      	mov	r3, r0
    43c8:	b118      	cbz	r0, 43d2 <sdio_cmd52_set_bus_width+0x22>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
    43ca:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    43ce:	2a00      	cmp	r2, #0
    43d0:	db02      	blt.n	43d8 <sdio_cmd52_set_bus_width+0x28>
}
    43d2:	4618      	mov	r0, r3
    43d4:	b004      	add	sp, #16
    43d6:	bd10      	pop	{r4, pc}
	u8_value = SDIO_BUSWIDTH_4B;
    43d8:	ab04      	add	r3, sp, #16
    43da:	2202      	movs	r2, #2
    43dc:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL, 1, &u8_value)) {
    43e0:	9300      	str	r3, [sp, #0]
    43e2:	2301      	movs	r3, #1
    43e4:	2207      	movs	r2, #7
    43e6:	2100      	movs	r1, #0
    43e8:	4618      	mov	r0, r3
    43ea:	47a0      	blx	r4
    43ec:	4603      	mov	r3, r0
    43ee:	2800      	cmp	r0, #0
    43f0:	d0ef      	beq.n	43d2 <sdio_cmd52_set_bus_width+0x22>
	sd_mmc_card->bus_width = 4;
    43f2:	4a03      	ldr	r2, [pc, #12]	; (4400 <sdio_cmd52_set_bus_width+0x50>)
    43f4:	6812      	ldr	r2, [r2, #0]
    43f6:	2104      	movs	r1, #4
    43f8:	7351      	strb	r1, [r2, #13]
	return true;
    43fa:	e7ea      	b.n	43d2 <sdio_cmd52_set_bus_width+0x22>
    43fc:	0000424d 	.word	0x0000424d
    4400:	2000065c 	.word	0x2000065c

00004404 <sdio_cmd52_set_high_speed>:
{
    4404:	b510      	push	{r4, lr}
    4406:	b084      	sub	sp, #16
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
    4408:	f10d 030f 	add.w	r3, sp, #15
    440c:	9300      	str	r3, [sp, #0]
    440e:	2300      	movs	r3, #0
    4410:	2213      	movs	r2, #19
    4412:	4619      	mov	r1, r3
    4414:	4618      	mov	r0, r3
    4416:	4c0f      	ldr	r4, [pc, #60]	; (4454 <sdio_cmd52_set_high_speed+0x50>)
    4418:	47a0      	blx	r4
    441a:	4601      	mov	r1, r0
    441c:	b1b8      	cbz	r0, 444e <sdio_cmd52_set_high_speed+0x4a>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
    441e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4422:	f013 0f01 	tst.w	r3, #1
    4426:	d012      	beq.n	444e <sdio_cmd52_set_high_speed+0x4a>
	u8_value = SDIO_EHS;
    4428:	ab04      	add	r3, sp, #16
    442a:	2202      	movs	r2, #2
    442c:	f803 2d01 	strb.w	r2, [r3, #-1]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS, 1, &u8_value)) {
    4430:	9300      	str	r3, [sp, #0]
    4432:	2301      	movs	r3, #1
    4434:	2213      	movs	r2, #19
    4436:	2100      	movs	r1, #0
    4438:	4618      	mov	r0, r3
    443a:	47a0      	blx	r4
    443c:	4601      	mov	r1, r0
    443e:	b130      	cbz	r0, 444e <sdio_cmd52_set_high_speed+0x4a>
	sd_mmc_card->high_speed = 1;
    4440:	4b05      	ldr	r3, [pc, #20]	; (4458 <sdio_cmd52_set_high_speed+0x54>)
    4442:	681b      	ldr	r3, [r3, #0]
    4444:	2201      	movs	r2, #1
    4446:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    4448:	681a      	ldr	r2, [r3, #0]
    444a:	0052      	lsls	r2, r2, #1
    444c:	601a      	str	r2, [r3, #0]
}
    444e:	4608      	mov	r0, r1
    4450:	b004      	add	sp, #16
    4452:	bd10      	pop	{r4, pc}
    4454:	0000424d 	.word	0x0000424d
    4458:	2000065c 	.word	0x2000065c

0000445c <sd_cmd8>:
{
    445c:	b538      	push	{r3, r4, r5, lr}
    445e:	4605      	mov	r5, r0
	*v2 = 0;
    4460:	2300      	movs	r3, #0
    4462:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4464:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    4468:	f245 5108 	movw	r1, #21768	; 0x5508
    446c:	4b0c      	ldr	r3, [pc, #48]	; (44a0 <sd_cmd8+0x44>)
    446e:	6898      	ldr	r0, [r3, #8]
    4470:	4b0c      	ldr	r3, [pc, #48]	; (44a4 <sd_cmd8+0x48>)
    4472:	4798      	blx	r3
    4474:	b910      	cbnz	r0, 447c <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    4476:	2401      	movs	r4, #1
}
    4478:	4620      	mov	r0, r4
    447a:	bd38      	pop	{r3, r4, r5, pc}
    447c:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    447e:	4b08      	ldr	r3, [pc, #32]	; (44a0 <sd_cmd8+0x44>)
    4480:	6898      	ldr	r0, [r3, #8]
    4482:	4b09      	ldr	r3, [pc, #36]	; (44a8 <sd_cmd8+0x4c>)
    4484:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    4486:	f1b0 3fff 	cmp.w	r0, #4294967295
    448a:	d0f5      	beq.n	4478 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    448c:	f3c0 000b 	ubfx	r0, r0, #0, #12
    4490:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    4494:	d001      	beq.n	449a <sd_cmd8+0x3e>
		return false;
    4496:	2400      	movs	r4, #0
    4498:	e7ee      	b.n	4478 <sd_cmd8+0x1c>
	*v2 = 1;
    449a:	2301      	movs	r3, #1
    449c:	702b      	strb	r3, [r5, #0]
	return true;
    449e:	e7eb      	b.n	4478 <sd_cmd8+0x1c>
    44a0:	2000065c 	.word	0x2000065c
    44a4:	00001055 	.word	0x00001055
    44a8:	00001085 	.word	0x00001085

000044ac <sdio_op_cond>:
{
    44ac:	b538      	push	{r3, r4, r5, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, 0)) {
    44ae:	2200      	movs	r2, #0
    44b0:	f244 5105 	movw	r1, #17669	; 0x4505
    44b4:	4b1a      	ldr	r3, [pc, #104]	; (4520 <sdio_op_cond+0x74>)
    44b6:	6898      	ldr	r0, [r3, #8]
    44b8:	4b1a      	ldr	r3, [pc, #104]	; (4524 <sdio_op_cond+0x78>)
    44ba:	4798      	blx	r3
    44bc:	b910      	cbnz	r0, 44c4 <sdio_op_cond+0x18>
		return true; /* No error but card type not updated */
    44be:	2501      	movs	r5, #1
}
    44c0:	4628      	mov	r0, r5
    44c2:	bd38      	pop	{r3, r4, r5, pc}
    44c4:	4605      	mov	r5, r0
	resp = driver_get_response(sd_mmc_hal);
    44c6:	4b16      	ldr	r3, [pc, #88]	; (4520 <sdio_op_cond+0x74>)
    44c8:	6898      	ldr	r0, [r3, #8]
    44ca:	4b17      	ldr	r3, [pc, #92]	; (4528 <sdio_op_cond+0x7c>)
    44cc:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
    44ce:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    44d2:	d0f5      	beq.n	44c0 <sdio_op_cond+0x14>
    44d4:	f241 3488 	movw	r4, #5000	; 0x1388
		if (!driver_send_cmd(sd_mmc_hal, SDIO_CMD5_SEND_OP_COND, resp & SD_MMC_VOLTAGE_SUPPORT)) {
    44d8:	f400 12fc 	and.w	r2, r0, #2064384	; 0x1f8000
    44dc:	f244 5105 	movw	r1, #17669	; 0x4505
    44e0:	4b0f      	ldr	r3, [pc, #60]	; (4520 <sdio_op_cond+0x74>)
    44e2:	6898      	ldr	r0, [r3, #8]
    44e4:	4b0f      	ldr	r3, [pc, #60]	; (4524 <sdio_op_cond+0x78>)
    44e6:	4798      	blx	r3
    44e8:	4605      	mov	r5, r0
    44ea:	2800      	cmp	r0, #0
    44ec:	d0e8      	beq.n	44c0 <sdio_op_cond+0x14>
		resp = driver_get_response(sd_mmc_hal);
    44ee:	4b0c      	ldr	r3, [pc, #48]	; (4520 <sdio_op_cond+0x74>)
    44f0:	6898      	ldr	r0, [r3, #8]
    44f2:	4b0d      	ldr	r3, [pc, #52]	; (4528 <sdio_op_cond+0x7c>)
    44f4:	4798      	blx	r3
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
    44f6:	2800      	cmp	r0, #0
    44f8:	db03      	blt.n	4502 <sdio_op_cond+0x56>
		if (cmd5_retry-- == 0) {
    44fa:	1e63      	subs	r3, r4, #1
    44fc:	b174      	cbz	r4, 451c <sdio_op_cond+0x70>
    44fe:	461c      	mov	r4, r3
    4500:	e7ea      	b.n	44d8 <sdio_op_cond+0x2c>
	if ((resp & OCR_SDIO_MP) > 0) {
    4502:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    4506:	d104      	bne.n	4512 <sdio_op_cond+0x66>
		sd_mmc_card->type = CARD_TYPE_SDIO;
    4508:	4b05      	ldr	r3, [pc, #20]	; (4520 <sdio_op_cond+0x74>)
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	2204      	movs	r2, #4
    450e:	72da      	strb	r2, [r3, #11]
    4510:	e7d6      	b.n	44c0 <sdio_op_cond+0x14>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
    4512:	4b03      	ldr	r3, [pc, #12]	; (4520 <sdio_op_cond+0x74>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	2205      	movs	r2, #5
    4518:	72da      	strb	r2, [r3, #11]
    451a:	e7d1      	b.n	44c0 <sdio_op_cond+0x14>
			return false;
    451c:	2500      	movs	r5, #0
    451e:	e7cf      	b.n	44c0 <sdio_op_cond+0x14>
    4520:	2000065c 	.word	0x2000065c
    4524:	00001055 	.word	0x00001055
    4528:	00001085 	.word	0x00001085

0000452c <sd_mci_op_cond>:
{
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	4606      	mov	r6, r0
	retry = 2100;
    4530:	f640 0434 	movw	r4, #2100	; 0x834
    4534:	e011      	b.n	455a <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    4536:	4a16      	ldr	r2, [pc, #88]	; (4590 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    4538:	f244 5129 	movw	r1, #17705	; 0x4529
    453c:	4b15      	ldr	r3, [pc, #84]	; (4594 <sd_mci_op_cond+0x68>)
    453e:	6898      	ldr	r0, [r3, #8]
    4540:	4b15      	ldr	r3, [pc, #84]	; (4598 <sd_mci_op_cond+0x6c>)
    4542:	4798      	blx	r3
    4544:	4605      	mov	r5, r0
    4546:	b1f8      	cbz	r0, 4588 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    4548:	4b12      	ldr	r3, [pc, #72]	; (4594 <sd_mci_op_cond+0x68>)
    454a:	6898      	ldr	r0, [r3, #8]
    454c:	4b13      	ldr	r3, [pc, #76]	; (459c <sd_mci_op_cond+0x70>)
    454e:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    4550:	2800      	cmp	r0, #0
    4552:	db10      	blt.n	4576 <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    4554:	1e63      	subs	r3, r4, #1
    4556:	b1cc      	cbz	r4, 458c <sd_mci_op_cond+0x60>
    4558:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    455a:	2200      	movs	r2, #0
    455c:	f241 1137 	movw	r1, #4407	; 0x1137
    4560:	4b0c      	ldr	r3, [pc, #48]	; (4594 <sd_mci_op_cond+0x68>)
    4562:	6898      	ldr	r0, [r3, #8]
    4564:	4b0c      	ldr	r3, [pc, #48]	; (4598 <sd_mci_op_cond+0x6c>)
    4566:	4798      	blx	r3
    4568:	4605      	mov	r5, r0
    456a:	b168      	cbz	r0, 4588 <sd_mci_op_cond+0x5c>
		if (v2) {
    456c:	2e00      	cmp	r6, #0
    456e:	d1e2      	bne.n	4536 <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    4570:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    4574:	e7e0      	b.n	4538 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    4576:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    457a:	d005      	beq.n	4588 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    457c:	4b05      	ldr	r3, [pc, #20]	; (4594 <sd_mci_op_cond+0x68>)
    457e:	681a      	ldr	r2, [r3, #0]
    4580:	7ad3      	ldrb	r3, [r2, #11]
    4582:	f043 0308 	orr.w	r3, r3, #8
    4586:	72d3      	strb	r3, [r2, #11]
}
    4588:	4628      	mov	r0, r5
    458a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    458c:	2500      	movs	r5, #0
    458e:	e7fb      	b.n	4588 <sd_mci_op_cond+0x5c>
    4590:	401f8000 	.word	0x401f8000
    4594:	2000065c 	.word	0x2000065c
    4598:	00001055 	.word	0x00001055
    459c:	00001085 	.word	0x00001085

000045a0 <sd_mmc_cmd13>:
{
    45a0:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    45a2:	4c0d      	ldr	r4, [pc, #52]	; (45d8 <sd_mmc_cmd13+0x38>)
    45a4:	e000      	b.n	45a8 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    45a6:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <sd_mmc_cmd13+0x3c>)
    45aa:	681a      	ldr	r2, [r3, #0]
    45ac:	8912      	ldrh	r2, [r2, #8]
    45ae:	0412      	lsls	r2, r2, #16
    45b0:	f241 110d 	movw	r1, #4365	; 0x110d
    45b4:	6898      	ldr	r0, [r3, #8]
    45b6:	4b0a      	ldr	r3, [pc, #40]	; (45e0 <sd_mmc_cmd13+0x40>)
    45b8:	4798      	blx	r3
    45ba:	4605      	mov	r5, r0
    45bc:	b150      	cbz	r0, 45d4 <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    45be:	4b07      	ldr	r3, [pc, #28]	; (45dc <sd_mmc_cmd13+0x3c>)
    45c0:	6898      	ldr	r0, [r3, #8]
    45c2:	4b08      	ldr	r3, [pc, #32]	; (45e4 <sd_mmc_cmd13+0x44>)
    45c4:	4798      	blx	r3
    45c6:	f410 7f80 	tst.w	r0, #256	; 0x100
    45ca:	d103      	bne.n	45d4 <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    45cc:	1e63      	subs	r3, r4, #1
    45ce:	2c00      	cmp	r4, #0
    45d0:	d1e9      	bne.n	45a6 <sd_mmc_cmd13+0x6>
			return false;
    45d2:	2500      	movs	r5, #0
}
    45d4:	4628      	mov	r0, r5
    45d6:	bd38      	pop	{r3, r4, r5, pc}
    45d8:	00030d40 	.word	0x00030d40
    45dc:	2000065c 	.word	0x2000065c
    45e0:	00001055 	.word	0x00001055
    45e4:	00001085 	.word	0x00001085

000045e8 <sd_mmc_cmd9_mci>:
{
    45e8:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    45ea:	4b0a      	ldr	r3, [pc, #40]	; (4614 <sd_mmc_cmd9_mci+0x2c>)
    45ec:	681a      	ldr	r2, [r3, #0]
    45ee:	8912      	ldrh	r2, [r2, #8]
    45f0:	0412      	lsls	r2, r2, #16
    45f2:	f641 3109 	movw	r1, #6921	; 0x1b09
    45f6:	6898      	ldr	r0, [r3, #8]
    45f8:	4b07      	ldr	r3, [pc, #28]	; (4618 <sd_mmc_cmd9_mci+0x30>)
    45fa:	4798      	blx	r3
    45fc:	4604      	mov	r4, r0
    45fe:	b908      	cbnz	r0, 4604 <sd_mmc_cmd9_mci+0x1c>
}
    4600:	4620      	mov	r0, r4
    4602:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    4604:	4b03      	ldr	r3, [pc, #12]	; (4614 <sd_mmc_cmd9_mci+0x2c>)
    4606:	6819      	ldr	r1, [r3, #0]
    4608:	310e      	adds	r1, #14
    460a:	6898      	ldr	r0, [r3, #8]
    460c:	4b03      	ldr	r3, [pc, #12]	; (461c <sd_mmc_cmd9_mci+0x34>)
    460e:	4798      	blx	r3
	return true;
    4610:	e7f6      	b.n	4600 <sd_mmc_cmd9_mci+0x18>
    4612:	bf00      	nop
    4614:	2000065c 	.word	0x2000065c
    4618:	00001055 	.word	0x00001055
    461c:	000010ad 	.word	0x000010ad

00004620 <sd_acmd51>:
{
    4620:	b510      	push	{r4, lr}
    4622:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4624:	4b28      	ldr	r3, [pc, #160]	; (46c8 <sd_acmd51+0xa8>)
    4626:	681a      	ldr	r2, [r3, #0]
    4628:	8912      	ldrh	r2, [r2, #8]
    462a:	0412      	lsls	r2, r2, #16
    462c:	f241 1137 	movw	r1, #4407	; 0x1137
    4630:	6898      	ldr	r0, [r3, #8]
    4632:	4b26      	ldr	r3, [pc, #152]	; (46cc <sd_acmd51+0xac>)
    4634:	4798      	blx	r3
    4636:	4603      	mov	r3, r0
    4638:	b910      	cbnz	r0, 4640 <sd_acmd51+0x20>
}
    463a:	4618      	mov	r0, r3
    463c:	b004      	add	sp, #16
    463e:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    4640:	4b21      	ldr	r3, [pc, #132]	; (46c8 <sd_acmd51+0xa8>)
    4642:	6898      	ldr	r0, [r3, #8]
    4644:	2301      	movs	r3, #1
    4646:	9301      	str	r3, [sp, #4]
    4648:	9300      	str	r3, [sp, #0]
    464a:	2308      	movs	r3, #8
    464c:	2200      	movs	r2, #0
    464e:	4920      	ldr	r1, [pc, #128]	; (46d0 <sd_acmd51+0xb0>)
    4650:	4c20      	ldr	r4, [pc, #128]	; (46d4 <sd_acmd51+0xb4>)
    4652:	47a0      	blx	r4
    4654:	4603      	mov	r3, r0
    4656:	2800      	cmp	r0, #0
    4658:	d0ef      	beq.n	463a <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    465a:	2201      	movs	r2, #1
    465c:	a902      	add	r1, sp, #8
    465e:	4b1a      	ldr	r3, [pc, #104]	; (46c8 <sd_acmd51+0xa8>)
    4660:	6898      	ldr	r0, [r3, #8]
    4662:	4b1d      	ldr	r3, [pc, #116]	; (46d8 <sd_acmd51+0xb8>)
    4664:	4798      	blx	r3
    4666:	4603      	mov	r3, r0
    4668:	2800      	cmp	r0, #0
    466a:	d0e6      	beq.n	463a <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    466c:	4b16      	ldr	r3, [pc, #88]	; (46c8 <sd_acmd51+0xa8>)
    466e:	6898      	ldr	r0, [r3, #8]
    4670:	4b1a      	ldr	r3, [pc, #104]	; (46dc <sd_acmd51+0xbc>)
    4672:	4798      	blx	r3
    4674:	4603      	mov	r3, r0
    4676:	2800      	cmp	r0, #0
    4678:	d0df      	beq.n	463a <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    467a:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    467e:	f002 020f 	and.w	r2, r2, #15
    4682:	2a01      	cmp	r2, #1
    4684:	d00c      	beq.n	46a0 <sd_acmd51+0x80>
    4686:	b132      	cbz	r2, 4696 <sd_acmd51+0x76>
    4688:	2a02      	cmp	r2, #2
    468a:	d00e      	beq.n	46aa <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    468c:	4a0e      	ldr	r2, [pc, #56]	; (46c8 <sd_acmd51+0xa8>)
    468e:	6812      	ldr	r2, [r2, #0]
    4690:	2110      	movs	r1, #16
    4692:	7311      	strb	r1, [r2, #12]
		break;
    4694:	e7d1      	b.n	463a <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4696:	4a0c      	ldr	r2, [pc, #48]	; (46c8 <sd_acmd51+0xa8>)
    4698:	6812      	ldr	r2, [r2, #0]
    469a:	2110      	movs	r1, #16
    469c:	7311      	strb	r1, [r2, #12]
		break;
    469e:	e7cc      	b.n	463a <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    46a0:	4a09      	ldr	r2, [pc, #36]	; (46c8 <sd_acmd51+0xa8>)
    46a2:	6812      	ldr	r2, [r2, #0]
    46a4:	211a      	movs	r1, #26
    46a6:	7311      	strb	r1, [r2, #12]
		break;
    46a8:	e7c7      	b.n	463a <sd_acmd51+0x1a>
    46aa:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    46ae:	09d2      	lsrs	r2, r2, #7
    46b0:	d104      	bne.n	46bc <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    46b2:	4a05      	ldr	r2, [pc, #20]	; (46c8 <sd_acmd51+0xa8>)
    46b4:	6812      	ldr	r2, [r2, #0]
    46b6:	2120      	movs	r1, #32
    46b8:	7311      	strb	r1, [r2, #12]
    46ba:	e7be      	b.n	463a <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    46bc:	4a02      	ldr	r2, [pc, #8]	; (46c8 <sd_acmd51+0xa8>)
    46be:	6812      	ldr	r2, [r2, #0]
    46c0:	2130      	movs	r1, #48	; 0x30
    46c2:	7311      	strb	r1, [r2, #12]
    46c4:	e7b9      	b.n	463a <sd_acmd51+0x1a>
    46c6:	bf00      	nop
    46c8:	2000065c 	.word	0x2000065c
    46cc:	00001055 	.word	0x00001055
    46d0:	00081133 	.word	0x00081133
    46d4:	000010e1 	.word	0x000010e1
    46d8:	00001125 	.word	0x00001125
    46dc:	00001195 	.word	0x00001195

000046e0 <sd_cm6_set_high_speed>:
{
    46e0:	b530      	push	{r4, r5, lr}
    46e2:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    46e4:	2440      	movs	r4, #64	; 0x40
    46e6:	4622      	mov	r2, r4
    46e8:	2100      	movs	r1, #0
    46ea:	a802      	add	r0, sp, #8
    46ec:	4b20      	ldr	r3, [pc, #128]	; (4770 <sd_cm6_set_high_speed+0x90>)
    46ee:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    46f0:	2301      	movs	r3, #1
    46f2:	9301      	str	r3, [sp, #4]
    46f4:	9300      	str	r3, [sp, #0]
    46f6:	4623      	mov	r3, r4
    46f8:	4a1e      	ldr	r2, [pc, #120]	; (4774 <sd_cm6_set_high_speed+0x94>)
    46fa:	491f      	ldr	r1, [pc, #124]	; (4778 <sd_cm6_set_high_speed+0x98>)
    46fc:	481f      	ldr	r0, [pc, #124]	; (477c <sd_cm6_set_high_speed+0x9c>)
    46fe:	6880      	ldr	r0, [r0, #8]
    4700:	4c1f      	ldr	r4, [pc, #124]	; (4780 <sd_cm6_set_high_speed+0xa0>)
    4702:	47a0      	blx	r4
    4704:	4604      	mov	r4, r0
    4706:	b358      	cbz	r0, 4760 <sd_cm6_set_high_speed+0x80>
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    4708:	2201      	movs	r2, #1
    470a:	a902      	add	r1, sp, #8
    470c:	4b1b      	ldr	r3, [pc, #108]	; (477c <sd_cm6_set_high_speed+0x9c>)
    470e:	6898      	ldr	r0, [r3, #8]
    4710:	4b1c      	ldr	r3, [pc, #112]	; (4784 <sd_cm6_set_high_speed+0xa4>)
    4712:	4798      	blx	r3
    4714:	4604      	mov	r4, r0
    4716:	b318      	cbz	r0, 4760 <sd_cm6_set_high_speed+0x80>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4718:	4b18      	ldr	r3, [pc, #96]	; (477c <sd_cm6_set_high_speed+0x9c>)
    471a:	6898      	ldr	r0, [r3, #8]
    471c:	4b1a      	ldr	r3, [pc, #104]	; (4788 <sd_cm6_set_high_speed+0xa8>)
    471e:	4798      	blx	r3
    4720:	4604      	mov	r4, r0
    4722:	b1e8      	cbz	r0, 4760 <sd_cm6_set_high_speed+0x80>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    4724:	4b15      	ldr	r3, [pc, #84]	; (477c <sd_cm6_set_high_speed+0x9c>)
    4726:	6898      	ldr	r0, [r3, #8]
    4728:	4b18      	ldr	r3, [pc, #96]	; (478c <sd_cm6_set_high_speed+0xac>)
    472a:	4798      	blx	r3
    472c:	f010 0f80 	tst.w	r0, #128	; 0x80
    4730:	d119      	bne.n	4766 <sd_cm6_set_high_speed+0x86>
    4732:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    4736:	f003 030f 	and.w	r3, r3, #15
    473a:	2b0f      	cmp	r3, #15
    473c:	d010      	beq.n	4760 <sd_cm6_set_high_speed+0x80>
    473e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4742:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    4746:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    474a:	d10e      	bne.n	476a <sd_cm6_set_high_speed+0x8a>
	driver_send_clock(sd_mmc_hal);
    474c:	4d0b      	ldr	r5, [pc, #44]	; (477c <sd_cm6_set_high_speed+0x9c>)
    474e:	68a8      	ldr	r0, [r5, #8]
    4750:	4b0f      	ldr	r3, [pc, #60]	; (4790 <sd_cm6_set_high_speed+0xb0>)
    4752:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    4754:	682b      	ldr	r3, [r5, #0]
    4756:	2201      	movs	r2, #1
    4758:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    475a:	681a      	ldr	r2, [r3, #0]
    475c:	0052      	lsls	r2, r2, #1
    475e:	601a      	str	r2, [r3, #0]
}
    4760:	4620      	mov	r0, r4
    4762:	b013      	add	sp, #76	; 0x4c
    4764:	bd30      	pop	{r4, r5, pc}
		return false;
    4766:	2400      	movs	r4, #0
    4768:	e7fa      	b.n	4760 <sd_cm6_set_high_speed+0x80>
		return false;
    476a:	2400      	movs	r4, #0
    476c:	e7f8      	b.n	4760 <sd_cm6_set_high_speed+0x80>
    476e:	bf00      	nop
    4770:	000050d9 	.word	0x000050d9
    4774:	80ffff01 	.word	0x80ffff01
    4778:	00081106 	.word	0x00081106
    477c:	2000065c 	.word	0x2000065c
    4780:	000010e1 	.word	0x000010e1
    4784:	00001125 	.word	0x00001125
    4788:	00001195 	.word	0x00001195
    478c:	00001085 	.word	0x00001085
    4790:	0000102d 	.word	0x0000102d

00004794 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    4794:	b5f0      	push	{r4, r5, r6, r7, lr}
    4796:	b085      	sub	sp, #20
	uint8_t v2 = 0;
    4798:	2400      	movs	r4, #0
    479a:	f88d 400f 	strb.w	r4, [sp, #15]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
    479e:	ae04      	add	r6, sp, #16
    47a0:	2308      	movs	r3, #8
    47a2:	f806 3d02 	strb.w	r3, [r6, #-2]!
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    47a6:	4d6f      	ldr	r5, [pc, #444]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    47a8:	682b      	ldr	r3, [r5, #0]
    47aa:	2701      	movs	r7, #1
    47ac:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    47ae:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    47b0:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    47b2:	68a8      	ldr	r0, [r5, #8]
    47b4:	4b6c      	ldr	r3, [pc, #432]	; (4968 <sd_mmc_mci_card_init+0x1d4>)
    47b6:	4798      	blx	r3

#if (CONF_SDIO_SUPPORT == 1)
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
    47b8:	9600      	str	r6, [sp, #0]
    47ba:	4623      	mov	r3, r4
    47bc:	2206      	movs	r2, #6
    47be:	4621      	mov	r1, r4
    47c0:	4638      	mov	r0, r7
    47c2:	4e6a      	ldr	r6, [pc, #424]	; (496c <sd_mmc_mci_card_init+0x1d8>)
    47c4:	47b0      	blx	r6
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    47c6:	4622      	mov	r2, r4
    47c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    47cc:	68a8      	ldr	r0, [r5, #8]
    47ce:	4b68      	ldr	r3, [pc, #416]	; (4970 <sd_mmc_mci_card_init+0x1dc>)
    47d0:	4798      	blx	r3
    47d2:	4604      	mov	r4, r0
    47d4:	b910      	cbnz	r0, 47dc <sd_mmc_mci_card_init+0x48>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    47d6:	4620      	mov	r0, r4
    47d8:	b005      	add	sp, #20
    47da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_cmd8(&v2)) {
    47dc:	f10d 000f 	add.w	r0, sp, #15
    47e0:	4b64      	ldr	r3, [pc, #400]	; (4974 <sd_mmc_mci_card_init+0x1e0>)
    47e2:	4798      	blx	r3
    47e4:	4604      	mov	r4, r0
    47e6:	2800      	cmp	r0, #0
    47e8:	d0f5      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
	if (!sdio_op_cond()) {
    47ea:	4b63      	ldr	r3, [pc, #396]	; (4978 <sd_mmc_mci_card_init+0x1e4>)
    47ec:	4798      	blx	r3
    47ee:	4604      	mov	r4, r0
    47f0:	2800      	cmp	r0, #0
    47f2:	d0f0      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    47f4:	682b      	ldr	r3, [r5, #0]
    47f6:	7adb      	ldrb	r3, [r3, #11]
    47f8:	f013 0f01 	tst.w	r3, #1
    47fc:	f040 8089 	bne.w	4912 <sd_mmc_mci_card_init+0x17e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4800:	4b58      	ldr	r3, [pc, #352]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4802:	681b      	ldr	r3, [r3, #0]
    4804:	7adb      	ldrb	r3, [r3, #11]
    4806:	f013 0f01 	tst.w	r3, #1
    480a:	d009      	beq.n	4820 <sd_mmc_mci_card_init+0x8c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    480c:	2200      	movs	r2, #0
    480e:	f645 3102 	movw	r1, #23298	; 0x5b02
    4812:	4b54      	ldr	r3, [pc, #336]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4814:	6898      	ldr	r0, [r3, #8]
    4816:	4b56      	ldr	r3, [pc, #344]	; (4970 <sd_mmc_mci_card_init+0x1dc>)
    4818:	4798      	blx	r3
    481a:	4604      	mov	r4, r0
    481c:	2800      	cmp	r0, #0
    481e:	d0da      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    4820:	2200      	movs	r2, #0
    4822:	f245 1103 	movw	r1, #20739	; 0x5103
    4826:	4b4f      	ldr	r3, [pc, #316]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4828:	6898      	ldr	r0, [r3, #8]
    482a:	4b51      	ldr	r3, [pc, #324]	; (4970 <sd_mmc_mci_card_init+0x1dc>)
    482c:	4798      	blx	r3
    482e:	4604      	mov	r4, r0
    4830:	2800      	cmp	r0, #0
    4832:	d0d0      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    4834:	4c4b      	ldr	r4, [pc, #300]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4836:	6825      	ldr	r5, [r4, #0]
    4838:	68a0      	ldr	r0, [r4, #8]
    483a:	4b50      	ldr	r3, [pc, #320]	; (497c <sd_mmc_mci_card_init+0x1e8>)
    483c:	4798      	blx	r3
    483e:	0c00      	lsrs	r0, r0, #16
    4840:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4842:	6823      	ldr	r3, [r4, #0]
    4844:	7adb      	ldrb	r3, [r3, #11]
    4846:	f013 0f01 	tst.w	r3, #1
    484a:	d006      	beq.n	485a <sd_mmc_mci_card_init+0xc6>
		if (!sd_mmc_cmd9_mci()) {
    484c:	4b4c      	ldr	r3, [pc, #304]	; (4980 <sd_mmc_mci_card_init+0x1ec>)
    484e:	4798      	blx	r3
    4850:	4604      	mov	r4, r0
    4852:	2800      	cmp	r0, #0
    4854:	d0bf      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
		sd_decode_csd();
    4856:	4b4b      	ldr	r3, [pc, #300]	; (4984 <sd_mmc_mci_card_init+0x1f0>)
    4858:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    485a:	4b42      	ldr	r3, [pc, #264]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    485c:	681a      	ldr	r2, [r3, #0]
    485e:	8912      	ldrh	r2, [r2, #8]
    4860:	0412      	lsls	r2, r2, #16
    4862:	f243 1107 	movw	r1, #12551	; 0x3107
    4866:	6898      	ldr	r0, [r3, #8]
    4868:	4b41      	ldr	r3, [pc, #260]	; (4970 <sd_mmc_mci_card_init+0x1dc>)
    486a:	4798      	blx	r3
    486c:	4604      	mov	r4, r0
    486e:	2800      	cmp	r0, #0
    4870:	d0b1      	beq.n	47d6 <sd_mmc_mci_card_init+0x42>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4872:	4b3c      	ldr	r3, [pc, #240]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4874:	681b      	ldr	r3, [r3, #0]
    4876:	7adb      	ldrb	r3, [r3, #11]
    4878:	f013 0f01 	tst.w	r3, #1
    487c:	d155      	bne.n	492a <sd_mmc_mci_card_init+0x196>
	if (IS_SDIO()) {
    487e:	4b39      	ldr	r3, [pc, #228]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	7adb      	ldrb	r3, [r3, #11]
    4884:	f013 0f04 	tst.w	r3, #4
    4888:	d003      	beq.n	4892 <sd_mmc_mci_card_init+0xfe>
		if (!sdio_get_max_speed()) {
    488a:	4b3f      	ldr	r3, [pc, #252]	; (4988 <sd_mmc_mci_card_init+0x1f4>)
    488c:	4798      	blx	r3
    488e:	2800      	cmp	r0, #0
    4890:	d063      	beq.n	495a <sd_mmc_mci_card_init+0x1c6>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4892:	4b34      	ldr	r3, [pc, #208]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4894:	7919      	ldrb	r1, [r3, #4]
    4896:	6898      	ldr	r0, [r3, #8]
    4898:	4b3c      	ldr	r3, [pc, #240]	; (498c <sd_mmc_mci_card_init+0x1f8>)
    489a:	4798      	blx	r3
    489c:	2803      	cmp	r0, #3
    489e:	d911      	bls.n	48c4 <sd_mmc_mci_card_init+0x130>
		if (IS_SDIO()) {
    48a0:	4b30      	ldr	r3, [pc, #192]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	7adb      	ldrb	r3, [r3, #11]
    48a6:	f013 0f04 	tst.w	r3, #4
    48aa:	d144      	bne.n	4936 <sd_mmc_mci_card_init+0x1a2>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    48ac:	4b2d      	ldr	r3, [pc, #180]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	7adb      	ldrb	r3, [r3, #11]
    48b2:	f013 0f01 	tst.w	r3, #1
    48b6:	d003      	beq.n	48c0 <sd_mmc_mci_card_init+0x12c>
			if (!sd_acmd6()) {
    48b8:	4b35      	ldr	r3, [pc, #212]	; (4990 <sd_mmc_mci_card_init+0x1fc>)
    48ba:	4798      	blx	r3
    48bc:	2800      	cmp	r0, #0
    48be:	d04e      	beq.n	495e <sd_mmc_mci_card_init+0x1ca>
		sd_mmc_configure_slot();
    48c0:	4b34      	ldr	r3, [pc, #208]	; (4994 <sd_mmc_mci_card_init+0x200>)
    48c2:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    48c4:	4b27      	ldr	r3, [pc, #156]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48c6:	6898      	ldr	r0, [r3, #8]
    48c8:	4b33      	ldr	r3, [pc, #204]	; (4998 <sd_mmc_mci_card_init+0x204>)
    48ca:	4798      	blx	r3
    48cc:	b180      	cbz	r0, 48f0 <sd_mmc_mci_card_init+0x15c>
		if (IS_SDIO()) {
    48ce:	4b25      	ldr	r3, [pc, #148]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	7adb      	ldrb	r3, [r3, #11]
    48d4:	f013 0f04 	tst.w	r3, #4
    48d8:	d133      	bne.n	4942 <sd_mmc_mci_card_init+0x1ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    48da:	4b22      	ldr	r3, [pc, #136]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48dc:	681b      	ldr	r3, [r3, #0]
    48de:	7ada      	ldrb	r2, [r3, #11]
    48e0:	f012 0f01 	tst.w	r2, #1
    48e4:	d002      	beq.n	48ec <sd_mmc_mci_card_init+0x158>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    48e6:	7b1b      	ldrb	r3, [r3, #12]
    48e8:	2b10      	cmp	r3, #16
    48ea:	d830      	bhi.n	494e <sd_mmc_mci_card_init+0x1ba>
		sd_mmc_configure_slot();
    48ec:	4b29      	ldr	r3, [pc, #164]	; (4994 <sd_mmc_mci_card_init+0x200>)
    48ee:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    48f0:	4b1c      	ldr	r3, [pc, #112]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	7adb      	ldrb	r3, [r3, #11]
    48f6:	f013 0f01 	tst.w	r3, #1
    48fa:	f43f af6c 	beq.w	47d6 <sd_mmc_mci_card_init+0x42>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    48fe:	f44f 7200 	mov.w	r2, #512	; 0x200
    4902:	f241 1110 	movw	r1, #4368	; 0x1110
    4906:	4b17      	ldr	r3, [pc, #92]	; (4964 <sd_mmc_mci_card_init+0x1d0>)
    4908:	6898      	ldr	r0, [r3, #8]
    490a:	4b19      	ldr	r3, [pc, #100]	; (4970 <sd_mmc_mci_card_init+0x1dc>)
    490c:	4798      	blx	r3
    490e:	4604      	mov	r4, r0
    4910:	e761      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
		if (!sd_mci_op_cond(v2)) {
    4912:	f89d 000f 	ldrb.w	r0, [sp, #15]
    4916:	4b21      	ldr	r3, [pc, #132]	; (499c <sd_mmc_mci_card_init+0x208>)
    4918:	4798      	blx	r3
    491a:	4604      	mov	r4, r0
    491c:	2800      	cmp	r0, #0
    491e:	f47f af6f 	bne.w	4800 <sd_mmc_mci_card_init+0x6c>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    4922:	682b      	ldr	r3, [r5, #0]
    4924:	2200      	movs	r2, #0
    4926:	72da      	strb	r2, [r3, #11]
			return false;
    4928:	e755      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
		if (!sd_acmd51()) {
    492a:	4b1d      	ldr	r3, [pc, #116]	; (49a0 <sd_mmc_mci_card_init+0x20c>)
    492c:	4798      	blx	r3
    492e:	2800      	cmp	r0, #0
    4930:	d1a5      	bne.n	487e <sd_mmc_mci_card_init+0xea>
			return false;
    4932:	4604      	mov	r4, r0
    4934:	e74f      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_bus_width()) {
    4936:	4b1b      	ldr	r3, [pc, #108]	; (49a4 <sd_mmc_mci_card_init+0x210>)
    4938:	4798      	blx	r3
    493a:	2800      	cmp	r0, #0
    493c:	d1b6      	bne.n	48ac <sd_mmc_mci_card_init+0x118>
				return false;
    493e:	4604      	mov	r4, r0
    4940:	e749      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
			if (!sdio_cmd52_set_high_speed()) {
    4942:	4b19      	ldr	r3, [pc, #100]	; (49a8 <sd_mmc_mci_card_init+0x214>)
    4944:	4798      	blx	r3
    4946:	2800      	cmp	r0, #0
    4948:	d1c7      	bne.n	48da <sd_mmc_mci_card_init+0x146>
				return false;
    494a:	4604      	mov	r4, r0
    494c:	e743      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
				if (!sd_cm6_set_high_speed()) {
    494e:	4b17      	ldr	r3, [pc, #92]	; (49ac <sd_mmc_mci_card_init+0x218>)
    4950:	4798      	blx	r3
    4952:	2800      	cmp	r0, #0
    4954:	d1ca      	bne.n	48ec <sd_mmc_mci_card_init+0x158>
					return false;
    4956:	4604      	mov	r4, r0
    4958:	e73d      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
			return false;
    495a:	4604      	mov	r4, r0
    495c:	e73b      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
				return false;
    495e:	4604      	mov	r4, r0
    4960:	e739      	b.n	47d6 <sd_mmc_mci_card_init+0x42>
    4962:	bf00      	nop
    4964:	2000065c 	.word	0x2000065c
    4968:	0000102d 	.word	0x0000102d
    496c:	0000424d 	.word	0x0000424d
    4970:	00001055 	.word	0x00001055
    4974:	0000445d 	.word	0x0000445d
    4978:	000044ad 	.word	0x000044ad
    497c:	00001085 	.word	0x00001085
    4980:	000045e9 	.word	0x000045e9
    4984:	00004011 	.word	0x00004011
    4988:	000042b5 	.word	0x000042b5
    498c:	00000fd9 	.word	0x00000fd9
    4990:	00004209 	.word	0x00004209
    4994:	00004099 	.word	0x00004099
    4998:	00001005 	.word	0x00001005
    499c:	0000452d 	.word	0x0000452d
    49a0:	00004621 	.word	0x00004621
    49a4:	000043b1 	.word	0x000043b1
    49a8:	00004405 	.word	0x00004405
    49ac:	000046e1 	.word	0x000046e1

000049b0 <sd_mmc_deselect_slot>:
{
    49b0:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    49b2:	4b04      	ldr	r3, [pc, #16]	; (49c4 <sd_mmc_deselect_slot+0x14>)
    49b4:	7919      	ldrb	r1, [r3, #4]
    49b6:	b101      	cbz	r1, 49ba <sd_mmc_deselect_slot+0xa>
    49b8:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    49ba:	6898      	ldr	r0, [r3, #8]
    49bc:	4b02      	ldr	r3, [pc, #8]	; (49c8 <sd_mmc_deselect_slot+0x18>)
    49be:	4798      	blx	r3
}
    49c0:	e7fa      	b.n	49b8 <sd_mmc_deselect_slot+0x8>
    49c2:	bf00      	nop
    49c4:	2000065c 	.word	0x2000065c
    49c8:	00000fad 	.word	0x00000fad

000049cc <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    49cc:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    49ce:	2300      	movs	r3, #0
    49d0:	b13b      	cbz	r3, 49e2 <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    49d2:	4b08      	ldr	r3, [pc, #32]	; (49f4 <sd_mmc_init+0x28>)
    49d4:	24ff      	movs	r4, #255	; 0xff
    49d6:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    49d8:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    49da:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    49dc:	635a      	str	r2, [r3, #52]	; 0x34
}
    49de:	bc30      	pop	{r4, r5}
    49e0:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    49e2:	4c04      	ldr	r4, [pc, #16]	; (49f4 <sd_mmc_init+0x28>)
    49e4:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    49e8:	2504      	movs	r5, #4
    49ea:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    49ec:	3301      	adds	r3, #1
    49ee:	b2db      	uxtb	r3, r3
    49f0:	e7ee      	b.n	49d0 <sd_mmc_init+0x4>
    49f2:	bf00      	nop
    49f4:	2000065c 	.word	0x2000065c

000049f8 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    49f8:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    49fa:	4b0d      	ldr	r3, [pc, #52]	; (4a30 <sd_mmc_check+0x38>)
    49fc:	4798      	blx	r3
    49fe:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    4a00:	2801      	cmp	r0, #1
    4a02:	d003      	beq.n	4a0c <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    4a04:	4b0b      	ldr	r3, [pc, #44]	; (4a34 <sd_mmc_check+0x3c>)
    4a06:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    4a08:	4620      	mov	r0, r4
    4a0a:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    4a0c:	4b0a      	ldr	r3, [pc, #40]	; (4a38 <sd_mmc_check+0x40>)
    4a0e:	4798      	blx	r3
    4a10:	b930      	cbnz	r0, 4a20 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    4a12:	4b0a      	ldr	r3, [pc, #40]	; (4a3c <sd_mmc_check+0x44>)
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	2403      	movs	r4, #3
    4a18:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    4a1a:	4b06      	ldr	r3, [pc, #24]	; (4a34 <sd_mmc_check+0x3c>)
    4a1c:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    4a1e:	e7f3      	b.n	4a08 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    4a20:	4b06      	ldr	r3, [pc, #24]	; (4a3c <sd_mmc_check+0x44>)
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	2200      	movs	r2, #0
    4a26:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    4a28:	4b02      	ldr	r3, [pc, #8]	; (4a34 <sd_mmc_check+0x3c>)
    4a2a:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    4a2c:	e7ec      	b.n	4a08 <sd_mmc_check+0x10>
    4a2e:	bf00      	nop
    4a30:	000040c5 	.word	0x000040c5
    4a34:	000049b1 	.word	0x000049b1
    4a38:	00004795 	.word	0x00004795
    4a3c:	2000065c 	.word	0x2000065c

00004a40 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    4a40:	4b19      	ldr	r3, [pc, #100]	; (4aa8 <sd_mmc_is_write_protected+0x68>)
    4a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4a44:	b35b      	cbz	r3, 4a9e <sd_mmc_is_write_protected+0x5e>
{
    4a46:	b570      	push	{r4, r5, r6, lr}
    4a48:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    4a4a:	0085      	lsls	r5, r0, #2
    4a4c:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4a50:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a54:	d025      	beq.n	4aa2 <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    4a56:	b2de      	uxtb	r6, r3
    4a58:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    4a5a:	a801      	add	r0, sp, #4
    4a5c:	4b13      	ldr	r3, [pc, #76]	; (4aac <sd_mmc_is_write_protected+0x6c>)
    4a5e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4a60:	4913      	ldr	r1, [pc, #76]	; (4ab0 <sd_mmc_is_write_protected+0x70>)
    4a62:	01e3      	lsls	r3, r4, #7
    4a64:	18ca      	adds	r2, r1, r3
    4a66:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4a68:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4a6a:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4a6c:	405c      	eors	r4, r3
    4a6e:	400c      	ands	r4, r1
    4a70:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4a72:	a801      	add	r0, sp, #4
    4a74:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <sd_mmc_is_write_protected+0x74>)
    4a76:	4798      	blx	r3
    4a78:	f006 031f 	and.w	r3, r6, #31
    4a7c:	2201      	movs	r2, #1
    4a7e:	fa02 f303 	lsl.w	r3, r2, r3
    4a82:	4223      	tst	r3, r4
    4a84:	bf08      	it	eq
    4a86:	2200      	moveq	r2, #0
    4a88:	4b07      	ldr	r3, [pc, #28]	; (4aa8 <sd_mmc_is_write_protected+0x68>)
    4a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4a8c:	441d      	add	r5, r3
    4a8e:	886b      	ldrh	r3, [r5, #2]
    4a90:	429a      	cmp	r2, r3
    4a92:	d002      	beq.n	4a9a <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    4a94:	2000      	movs	r0, #0
}
    4a96:	b002      	add	sp, #8
    4a98:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    4a9a:	2001      	movs	r0, #1
    4a9c:	e7fb      	b.n	4a96 <sd_mmc_is_write_protected+0x56>
		return false;
    4a9e:	2000      	movs	r0, #0
    4aa0:	4770      	bx	lr
    4aa2:	2000      	movs	r0, #0
    4aa4:	e7f7      	b.n	4a96 <sd_mmc_is_write_protected+0x56>
    4aa6:	bf00      	nop
    4aa8:	2000065c 	.word	0x2000065c
    4aac:	00000d41 	.word	0x00000d41
    4ab0:	41008000 	.word	0x41008000
    4ab4:	00000d4f 	.word	0x00000d4f

00004ab8 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4ab8:	b570      	push	{r4, r5, r6, lr}
    4aba:	b082      	sub	sp, #8
    4abc:	460e      	mov	r6, r1
    4abe:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4ac0:	4b1b      	ldr	r3, [pc, #108]	; (4b30 <sd_mmc_init_read_blocks+0x78>)
    4ac2:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4ac4:	4604      	mov	r4, r0
    4ac6:	b110      	cbz	r0, 4ace <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    4ac8:	4620      	mov	r0, r4
    4aca:	b002      	add	sp, #8
    4acc:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    4ace:	4b19      	ldr	r3, [pc, #100]	; (4b34 <sd_mmc_init_read_blocks+0x7c>)
    4ad0:	4798      	blx	r3
    4ad2:	b1c0      	cbz	r0, 4b06 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    4ad4:	2d01      	cmp	r5, #1
    4ad6:	d91a      	bls.n	4b0e <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    4ad8:	4917      	ldr	r1, [pc, #92]	; (4b38 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    4ada:	4b18      	ldr	r3, [pc, #96]	; (4b3c <sd_mmc_init_read_blocks+0x84>)
    4adc:	681b      	ldr	r3, [r3, #0]
    4ade:	7adb      	ldrb	r3, [r3, #11]
    4ae0:	f013 0f08 	tst.w	r3, #8
    4ae4:	d100      	bne.n	4ae8 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4ae6:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4ae8:	4b14      	ldr	r3, [pc, #80]	; (4b3c <sd_mmc_init_read_blocks+0x84>)
    4aea:	6898      	ldr	r0, [r3, #8]
    4aec:	2301      	movs	r3, #1
    4aee:	9301      	str	r3, [sp, #4]
    4af0:	9500      	str	r5, [sp, #0]
    4af2:	f44f 7300 	mov.w	r3, #512	; 0x200
    4af6:	4632      	mov	r2, r6
    4af8:	4e11      	ldr	r6, [pc, #68]	; (4b40 <sd_mmc_init_read_blocks+0x88>)
    4afa:	47b0      	blx	r6
    4afc:	b948      	cbnz	r0, 4b12 <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    4afe:	4b11      	ldr	r3, [pc, #68]	; (4b44 <sd_mmc_init_read_blocks+0x8c>)
    4b00:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4b02:	2405      	movs	r4, #5
    4b04:	e7e0      	b.n	4ac8 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4b06:	4b0f      	ldr	r3, [pc, #60]	; (4b44 <sd_mmc_init_read_blocks+0x8c>)
    4b08:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4b0a:	2405      	movs	r4, #5
    4b0c:	e7dc      	b.n	4ac8 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    4b0e:	490e      	ldr	r1, [pc, #56]	; (4b48 <sd_mmc_init_read_blocks+0x90>)
    4b10:	e7e3      	b.n	4ada <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    4b12:	4b0a      	ldr	r3, [pc, #40]	; (4b3c <sd_mmc_init_read_blocks+0x84>)
    4b14:	6898      	ldr	r0, [r3, #8]
    4b16:	4b0d      	ldr	r3, [pc, #52]	; (4b4c <sd_mmc_init_read_blocks+0x94>)
    4b18:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4b1a:	4b0d      	ldr	r3, [pc, #52]	; (4b50 <sd_mmc_init_read_blocks+0x98>)
    4b1c:	4003      	ands	r3, r0
    4b1e:	b91b      	cbnz	r3, 4b28 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    4b20:	4b06      	ldr	r3, [pc, #24]	; (4b3c <sd_mmc_init_read_blocks+0x84>)
    4b22:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4b24:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4b26:	e7cf      	b.n	4ac8 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4b28:	4b06      	ldr	r3, [pc, #24]	; (4b44 <sd_mmc_init_read_blocks+0x8c>)
    4b2a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4b2c:	2405      	movs	r4, #5
    4b2e:	e7cb      	b.n	4ac8 <sd_mmc_init_read_blocks+0x10>
    4b30:	000040c5 	.word	0x000040c5
    4b34:	000045a1 	.word	0x000045a1
    4b38:	00101112 	.word	0x00101112
    4b3c:	2000065c 	.word	0x2000065c
    4b40:	000010e1 	.word	0x000010e1
    4b44:	000049b1 	.word	0x000049b1
    4b48:	00081111 	.word	0x00081111
    4b4c:	00001085 	.word	0x00001085
    4b50:	e4580000 	.word	0xe4580000

00004b54 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    4b54:	b570      	push	{r4, r5, r6, lr}
    4b56:	4606      	mov	r6, r0
    4b58:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4b5a:	4d0d      	ldr	r5, [pc, #52]	; (4b90 <sd_mmc_start_read_blocks+0x3c>)
    4b5c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4b5e:	f240 52a7 	movw	r2, #1447	; 0x5a7
    4b62:	490c      	ldr	r1, [pc, #48]	; (4b94 <sd_mmc_start_read_blocks+0x40>)
    4b64:	42a0      	cmp	r0, r4
    4b66:	bf34      	ite	cc
    4b68:	2000      	movcc	r0, #0
    4b6a:	2001      	movcs	r0, #1
    4b6c:	4b0a      	ldr	r3, [pc, #40]	; (4b98 <sd_mmc_start_read_blocks+0x44>)
    4b6e:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    4b70:	4622      	mov	r2, r4
    4b72:	4631      	mov	r1, r6
    4b74:	68a8      	ldr	r0, [r5, #8]
    4b76:	4b09      	ldr	r3, [pc, #36]	; (4b9c <sd_mmc_start_read_blocks+0x48>)
    4b78:	4798      	blx	r3
    4b7a:	b918      	cbnz	r0, 4b84 <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4b7c:	2200      	movs	r2, #0
    4b7e:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4b80:	2005      	movs	r0, #5
    4b82:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4b84:	4a02      	ldr	r2, [pc, #8]	; (4b90 <sd_mmc_start_read_blocks+0x3c>)
    4b86:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4b88:	1b1c      	subs	r4, r3, r4
    4b8a:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4b8c:	2000      	movs	r0, #0
}
    4b8e:	bd70      	pop	{r4, r5, r6, pc}
    4b90:	2000065c 	.word	0x2000065c
    4b94:	000054a4 	.word	0x000054a4
    4b98:	00001671 	.word	0x00001671
    4b9c:	00001125 	.word	0x00001125

00004ba0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    4ba0:	b510      	push	{r4, lr}
    4ba2:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4ba4:	4b16      	ldr	r3, [pc, #88]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4ba6:	6898      	ldr	r0, [r3, #8]
    4ba8:	4b16      	ldr	r3, [pc, #88]	; (4c04 <sd_mmc_wait_end_of_read_blocks+0x64>)
    4baa:	4798      	blx	r3
    4bac:	b908      	cbnz	r0, 4bb2 <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    4bae:	2005      	movs	r0, #5
    4bb0:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4bb2:	b194      	cbz	r4, 4bda <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4bb4:	2200      	movs	r2, #0
    4bb6:	4b12      	ldr	r3, [pc, #72]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4bb8:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    4bba:	4b11      	ldr	r3, [pc, #68]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4bbc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4bbe:	2b01      	cmp	r3, #1
    4bc0:	d011      	beq.n	4be6 <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4bc2:	2200      	movs	r2, #0
    4bc4:	f243 110c 	movw	r1, #12556	; 0x310c
    4bc8:	4b0d      	ldr	r3, [pc, #52]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4bca:	6898      	ldr	r0, [r3, #8]
    4bcc:	4b0e      	ldr	r3, [pc, #56]	; (4c08 <sd_mmc_wait_end_of_read_blocks+0x68>)
    4bce:	4798      	blx	r3
    4bd0:	b168      	cbz	r0, 4bee <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    4bd2:	4b0e      	ldr	r3, [pc, #56]	; (4c0c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4bd4:	4798      	blx	r3
	return SD_MMC_OK;
    4bd6:	2000      	movs	r0, #0
    4bd8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    4bda:	4b09      	ldr	r3, [pc, #36]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4bdc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4bde:	2b00      	cmp	r3, #0
    4be0:	d0eb      	beq.n	4bba <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    4be2:	2000      	movs	r0, #0
}
    4be4:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4be6:	4b09      	ldr	r3, [pc, #36]	; (4c0c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4be8:	4798      	blx	r3
		return SD_MMC_OK;
    4bea:	2000      	movs	r0, #0
    4bec:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    4bee:	2200      	movs	r2, #0
    4bf0:	f243 110c 	movw	r1, #12556	; 0x310c
    4bf4:	4b02      	ldr	r3, [pc, #8]	; (4c00 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4bf6:	6898      	ldr	r0, [r3, #8]
    4bf8:	4b03      	ldr	r3, [pc, #12]	; (4c08 <sd_mmc_wait_end_of_read_blocks+0x68>)
    4bfa:	4798      	blx	r3
    4bfc:	e7e9      	b.n	4bd2 <sd_mmc_wait_end_of_read_blocks+0x32>
    4bfe:	bf00      	nop
    4c00:	2000065c 	.word	0x2000065c
    4c04:	00001195 	.word	0x00001195
    4c08:	00001055 	.word	0x00001055
    4c0c:	000049b1 	.word	0x000049b1

00004c10 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c12:	b083      	sub	sp, #12
    4c14:	4607      	mov	r7, r0
    4c16:	460e      	mov	r6, r1
    4c18:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4c1a:	4b1c      	ldr	r3, [pc, #112]	; (4c8c <sd_mmc_init_write_blocks+0x7c>)
    4c1c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4c1e:	4604      	mov	r4, r0
    4c20:	b110      	cbz	r0, 4c28 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    4c22:	4620      	mov	r0, r4
    4c24:	b003      	add	sp, #12
    4c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    4c28:	4638      	mov	r0, r7
    4c2a:	4b19      	ldr	r3, [pc, #100]	; (4c90 <sd_mmc_init_write_blocks+0x80>)
    4c2c:	4798      	blx	r3
    4c2e:	b9c0      	cbnz	r0, 4c62 <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    4c30:	2d01      	cmp	r5, #1
    4c32:	d91a      	bls.n	4c6a <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    4c34:	4917      	ldr	r1, [pc, #92]	; (4c94 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    4c36:	4b18      	ldr	r3, [pc, #96]	; (4c98 <sd_mmc_init_write_blocks+0x88>)
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	7adb      	ldrb	r3, [r3, #11]
    4c3c:	f013 0f08 	tst.w	r3, #8
    4c40:	d100      	bne.n	4c44 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4c42:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4c44:	4b14      	ldr	r3, [pc, #80]	; (4c98 <sd_mmc_init_write_blocks+0x88>)
    4c46:	6898      	ldr	r0, [r3, #8]
    4c48:	2301      	movs	r3, #1
    4c4a:	9301      	str	r3, [sp, #4]
    4c4c:	9500      	str	r5, [sp, #0]
    4c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4c52:	4632      	mov	r2, r6
    4c54:	4e11      	ldr	r6, [pc, #68]	; (4c9c <sd_mmc_init_write_blocks+0x8c>)
    4c56:	47b0      	blx	r6
    4c58:	b948      	cbnz	r0, 4c6e <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    4c5a:	4b11      	ldr	r3, [pc, #68]	; (4ca0 <sd_mmc_init_write_blocks+0x90>)
    4c5c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4c5e:	2405      	movs	r4, #5
    4c60:	e7df      	b.n	4c22 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4c62:	4b0f      	ldr	r3, [pc, #60]	; (4ca0 <sd_mmc_init_write_blocks+0x90>)
    4c64:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    4c66:	2407      	movs	r4, #7
    4c68:	e7db      	b.n	4c22 <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    4c6a:	490e      	ldr	r1, [pc, #56]	; (4ca4 <sd_mmc_init_write_blocks+0x94>)
    4c6c:	e7e3      	b.n	4c36 <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    4c6e:	4b0a      	ldr	r3, [pc, #40]	; (4c98 <sd_mmc_init_write_blocks+0x88>)
    4c70:	6898      	ldr	r0, [r3, #8]
    4c72:	4b0d      	ldr	r3, [pc, #52]	; (4ca8 <sd_mmc_init_write_blocks+0x98>)
    4c74:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4c76:	4b0d      	ldr	r3, [pc, #52]	; (4cac <sd_mmc_init_write_blocks+0x9c>)
    4c78:	4003      	ands	r3, r0
    4c7a:	b91b      	cbnz	r3, 4c84 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    4c7c:	4b06      	ldr	r3, [pc, #24]	; (4c98 <sd_mmc_init_write_blocks+0x88>)
    4c7e:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4c80:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4c82:	e7ce      	b.n	4c22 <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    4c84:	4b06      	ldr	r3, [pc, #24]	; (4ca0 <sd_mmc_init_write_blocks+0x90>)
    4c86:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4c88:	2405      	movs	r4, #5
    4c8a:	e7ca      	b.n	4c22 <sd_mmc_init_write_blocks+0x12>
    4c8c:	000040c5 	.word	0x000040c5
    4c90:	00004a41 	.word	0x00004a41
    4c94:	00109119 	.word	0x00109119
    4c98:	2000065c 	.word	0x2000065c
    4c9c:	000010e1 	.word	0x000010e1
    4ca0:	000049b1 	.word	0x000049b1
    4ca4:	00089118 	.word	0x00089118
    4ca8:	00001085 	.word	0x00001085
    4cac:	e4580000 	.word	0xe4580000

00004cb0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    4cb0:	b570      	push	{r4, r5, r6, lr}
    4cb2:	4606      	mov	r6, r0
    4cb4:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4cb6:	4d0d      	ldr	r5, [pc, #52]	; (4cec <sd_mmc_start_write_blocks+0x3c>)
    4cb8:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4cba:	f240 52fa 	movw	r2, #1530	; 0x5fa
    4cbe:	490c      	ldr	r1, [pc, #48]	; (4cf0 <sd_mmc_start_write_blocks+0x40>)
    4cc0:	42a0      	cmp	r0, r4
    4cc2:	bf34      	ite	cc
    4cc4:	2000      	movcc	r0, #0
    4cc6:	2001      	movcs	r0, #1
    4cc8:	4b0a      	ldr	r3, [pc, #40]	; (4cf4 <sd_mmc_start_write_blocks+0x44>)
    4cca:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    4ccc:	4622      	mov	r2, r4
    4cce:	4631      	mov	r1, r6
    4cd0:	68a8      	ldr	r0, [r5, #8]
    4cd2:	4b09      	ldr	r3, [pc, #36]	; (4cf8 <sd_mmc_start_write_blocks+0x48>)
    4cd4:	4798      	blx	r3
    4cd6:	b918      	cbnz	r0, 4ce0 <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4cd8:	2200      	movs	r2, #0
    4cda:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4cdc:	2005      	movs	r0, #5
    4cde:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4ce0:	4a02      	ldr	r2, [pc, #8]	; (4cec <sd_mmc_start_write_blocks+0x3c>)
    4ce2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4ce4:	1b1c      	subs	r4, r3, r4
    4ce6:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4ce8:	2000      	movs	r0, #0
}
    4cea:	bd70      	pop	{r4, r5, r6, pc}
    4cec:	2000065c 	.word	0x2000065c
    4cf0:	000054a4 	.word	0x000054a4
    4cf4:	00001671 	.word	0x00001671
    4cf8:	0000115d 	.word	0x0000115d

00004cfc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    4cfc:	b510      	push	{r4, lr}
    4cfe:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    4d00:	4b14      	ldr	r3, [pc, #80]	; (4d54 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4d02:	6898      	ldr	r0, [r3, #8]
    4d04:	4b14      	ldr	r3, [pc, #80]	; (4d58 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    4d06:	4798      	blx	r3
    4d08:	b908      	cbnz	r0, 4d0e <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    4d0a:	2005      	movs	r0, #5
    4d0c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4d0e:	b194      	cbz	r4, 4d36 <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4d10:	2200      	movs	r2, #0
    4d12:	4b10      	ldr	r3, [pc, #64]	; (4d54 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4d14:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    4d16:	4b0f      	ldr	r3, [pc, #60]	; (4d54 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4d18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	d011      	beq.n	4d42 <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4d1e:	2200      	movs	r2, #0
    4d20:	f243 110c 	movw	r1, #12556	; 0x310c
    4d24:	4b0b      	ldr	r3, [pc, #44]	; (4d54 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4d26:	6898      	ldr	r0, [r3, #8]
    4d28:	4b0c      	ldr	r3, [pc, #48]	; (4d5c <sd_mmc_wait_end_of_write_blocks+0x60>)
    4d2a:	4798      	blx	r3
    4d2c:	b968      	cbnz	r0, 4d4a <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    4d2e:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4d30:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4d32:	2005      	movs	r0, #5
    4d34:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    4d36:	4b07      	ldr	r3, [pc, #28]	; (4d54 <sd_mmc_wait_end_of_write_blocks+0x58>)
    4d38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d0eb      	beq.n	4d16 <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    4d3e:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    4d40:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4d42:	4b07      	ldr	r3, [pc, #28]	; (4d60 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4d44:	4798      	blx	r3
		return SD_MMC_OK;
    4d46:	2000      	movs	r0, #0
    4d48:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    4d4a:	4b05      	ldr	r3, [pc, #20]	; (4d60 <sd_mmc_wait_end_of_write_blocks+0x64>)
    4d4c:	4798      	blx	r3
	return SD_MMC_OK;
    4d4e:	2000      	movs	r0, #0
    4d50:	bd10      	pop	{r4, pc}
    4d52:	bf00      	nop
    4d54:	2000065c 	.word	0x2000065c
    4d58:	000011bd 	.word	0x000011bd
    4d5c:	00001055 	.word	0x00001055
    4d60:	000049b1 	.word	0x000049b1

00004d64 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    4d64:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    4d66:	4903      	ldr	r1, [pc, #12]	; (4d74 <sd_mmc_stack_init+0x10>)
    4d68:	460a      	mov	r2, r1
    4d6a:	3104      	adds	r1, #4
    4d6c:	4802      	ldr	r0, [pc, #8]	; (4d78 <sd_mmc_stack_init+0x14>)
    4d6e:	4b03      	ldr	r3, [pc, #12]	; (4d7c <sd_mmc_stack_init+0x18>)
    4d70:	4798      	blx	r3
    4d72:	bd08      	pop	{r3, pc}
    4d74:	20000030 	.word	0x20000030
    4d78:	20000720 	.word	0x20000720
    4d7c:	000049cd 	.word	0x000049cd

00004d80 <__aeabi_uldivmod>:
    4d80:	b953      	cbnz	r3, 4d98 <__aeabi_uldivmod+0x18>
    4d82:	b94a      	cbnz	r2, 4d98 <__aeabi_uldivmod+0x18>
    4d84:	2900      	cmp	r1, #0
    4d86:	bf08      	it	eq
    4d88:	2800      	cmpeq	r0, #0
    4d8a:	bf1c      	itt	ne
    4d8c:	f04f 31ff 	movne.w	r1, #4294967295
    4d90:	f04f 30ff 	movne.w	r0, #4294967295
    4d94:	f000 b97a 	b.w	508c <__aeabi_idiv0>
    4d98:	f1ad 0c08 	sub.w	ip, sp, #8
    4d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4da0:	f000 f806 	bl	4db0 <__udivmoddi4>
    4da4:	f8dd e004 	ldr.w	lr, [sp, #4]
    4da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4dac:	b004      	add	sp, #16
    4dae:	4770      	bx	lr

00004db0 <__udivmoddi4>:
    4db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4db4:	468c      	mov	ip, r1
    4db6:	460d      	mov	r5, r1
    4db8:	4604      	mov	r4, r0
    4dba:	9e08      	ldr	r6, [sp, #32]
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d151      	bne.n	4e64 <__udivmoddi4+0xb4>
    4dc0:	428a      	cmp	r2, r1
    4dc2:	4617      	mov	r7, r2
    4dc4:	d96d      	bls.n	4ea2 <__udivmoddi4+0xf2>
    4dc6:	fab2 fe82 	clz	lr, r2
    4dca:	f1be 0f00 	cmp.w	lr, #0
    4dce:	d00b      	beq.n	4de8 <__udivmoddi4+0x38>
    4dd0:	f1ce 0c20 	rsb	ip, lr, #32
    4dd4:	fa01 f50e 	lsl.w	r5, r1, lr
    4dd8:	fa20 fc0c 	lsr.w	ip, r0, ip
    4ddc:	fa02 f70e 	lsl.w	r7, r2, lr
    4de0:	ea4c 0c05 	orr.w	ip, ip, r5
    4de4:	fa00 f40e 	lsl.w	r4, r0, lr
    4de8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    4dec:	0c25      	lsrs	r5, r4, #16
    4dee:	fbbc f8fa 	udiv	r8, ip, sl
    4df2:	fa1f f987 	uxth.w	r9, r7
    4df6:	fb0a cc18 	mls	ip, sl, r8, ip
    4dfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    4dfe:	fb08 f309 	mul.w	r3, r8, r9
    4e02:	42ab      	cmp	r3, r5
    4e04:	d90a      	bls.n	4e1c <__udivmoddi4+0x6c>
    4e06:	19ed      	adds	r5, r5, r7
    4e08:	f108 32ff 	add.w	r2, r8, #4294967295
    4e0c:	f080 8123 	bcs.w	5056 <__udivmoddi4+0x2a6>
    4e10:	42ab      	cmp	r3, r5
    4e12:	f240 8120 	bls.w	5056 <__udivmoddi4+0x2a6>
    4e16:	f1a8 0802 	sub.w	r8, r8, #2
    4e1a:	443d      	add	r5, r7
    4e1c:	1aed      	subs	r5, r5, r3
    4e1e:	b2a4      	uxth	r4, r4
    4e20:	fbb5 f0fa 	udiv	r0, r5, sl
    4e24:	fb0a 5510 	mls	r5, sl, r0, r5
    4e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    4e2c:	fb00 f909 	mul.w	r9, r0, r9
    4e30:	45a1      	cmp	r9, r4
    4e32:	d909      	bls.n	4e48 <__udivmoddi4+0x98>
    4e34:	19e4      	adds	r4, r4, r7
    4e36:	f100 33ff 	add.w	r3, r0, #4294967295
    4e3a:	f080 810a 	bcs.w	5052 <__udivmoddi4+0x2a2>
    4e3e:	45a1      	cmp	r9, r4
    4e40:	f240 8107 	bls.w	5052 <__udivmoddi4+0x2a2>
    4e44:	3802      	subs	r0, #2
    4e46:	443c      	add	r4, r7
    4e48:	eba4 0409 	sub.w	r4, r4, r9
    4e4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4e50:	2100      	movs	r1, #0
    4e52:	2e00      	cmp	r6, #0
    4e54:	d061      	beq.n	4f1a <__udivmoddi4+0x16a>
    4e56:	fa24 f40e 	lsr.w	r4, r4, lr
    4e5a:	2300      	movs	r3, #0
    4e5c:	6034      	str	r4, [r6, #0]
    4e5e:	6073      	str	r3, [r6, #4]
    4e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e64:	428b      	cmp	r3, r1
    4e66:	d907      	bls.n	4e78 <__udivmoddi4+0xc8>
    4e68:	2e00      	cmp	r6, #0
    4e6a:	d054      	beq.n	4f16 <__udivmoddi4+0x166>
    4e6c:	2100      	movs	r1, #0
    4e6e:	e886 0021 	stmia.w	r6, {r0, r5}
    4e72:	4608      	mov	r0, r1
    4e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e78:	fab3 f183 	clz	r1, r3
    4e7c:	2900      	cmp	r1, #0
    4e7e:	f040 808e 	bne.w	4f9e <__udivmoddi4+0x1ee>
    4e82:	42ab      	cmp	r3, r5
    4e84:	d302      	bcc.n	4e8c <__udivmoddi4+0xdc>
    4e86:	4282      	cmp	r2, r0
    4e88:	f200 80fa 	bhi.w	5080 <__udivmoddi4+0x2d0>
    4e8c:	1a84      	subs	r4, r0, r2
    4e8e:	eb65 0503 	sbc.w	r5, r5, r3
    4e92:	2001      	movs	r0, #1
    4e94:	46ac      	mov	ip, r5
    4e96:	2e00      	cmp	r6, #0
    4e98:	d03f      	beq.n	4f1a <__udivmoddi4+0x16a>
    4e9a:	e886 1010 	stmia.w	r6, {r4, ip}
    4e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ea2:	b912      	cbnz	r2, 4eaa <__udivmoddi4+0xfa>
    4ea4:	2701      	movs	r7, #1
    4ea6:	fbb7 f7f2 	udiv	r7, r7, r2
    4eaa:	fab7 fe87 	clz	lr, r7
    4eae:	f1be 0f00 	cmp.w	lr, #0
    4eb2:	d134      	bne.n	4f1e <__udivmoddi4+0x16e>
    4eb4:	1beb      	subs	r3, r5, r7
    4eb6:	0c3a      	lsrs	r2, r7, #16
    4eb8:	fa1f fc87 	uxth.w	ip, r7
    4ebc:	2101      	movs	r1, #1
    4ebe:	fbb3 f8f2 	udiv	r8, r3, r2
    4ec2:	0c25      	lsrs	r5, r4, #16
    4ec4:	fb02 3318 	mls	r3, r2, r8, r3
    4ec8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4ecc:	fb0c f308 	mul.w	r3, ip, r8
    4ed0:	42ab      	cmp	r3, r5
    4ed2:	d907      	bls.n	4ee4 <__udivmoddi4+0x134>
    4ed4:	19ed      	adds	r5, r5, r7
    4ed6:	f108 30ff 	add.w	r0, r8, #4294967295
    4eda:	d202      	bcs.n	4ee2 <__udivmoddi4+0x132>
    4edc:	42ab      	cmp	r3, r5
    4ede:	f200 80d1 	bhi.w	5084 <__udivmoddi4+0x2d4>
    4ee2:	4680      	mov	r8, r0
    4ee4:	1aed      	subs	r5, r5, r3
    4ee6:	b2a3      	uxth	r3, r4
    4ee8:	fbb5 f0f2 	udiv	r0, r5, r2
    4eec:	fb02 5510 	mls	r5, r2, r0, r5
    4ef0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    4ef4:	fb0c fc00 	mul.w	ip, ip, r0
    4ef8:	45a4      	cmp	ip, r4
    4efa:	d907      	bls.n	4f0c <__udivmoddi4+0x15c>
    4efc:	19e4      	adds	r4, r4, r7
    4efe:	f100 33ff 	add.w	r3, r0, #4294967295
    4f02:	d202      	bcs.n	4f0a <__udivmoddi4+0x15a>
    4f04:	45a4      	cmp	ip, r4
    4f06:	f200 80b8 	bhi.w	507a <__udivmoddi4+0x2ca>
    4f0a:	4618      	mov	r0, r3
    4f0c:	eba4 040c 	sub.w	r4, r4, ip
    4f10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    4f14:	e79d      	b.n	4e52 <__udivmoddi4+0xa2>
    4f16:	4631      	mov	r1, r6
    4f18:	4630      	mov	r0, r6
    4f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f1e:	f1ce 0420 	rsb	r4, lr, #32
    4f22:	fa05 f30e 	lsl.w	r3, r5, lr
    4f26:	fa07 f70e 	lsl.w	r7, r7, lr
    4f2a:	fa20 f804 	lsr.w	r8, r0, r4
    4f2e:	0c3a      	lsrs	r2, r7, #16
    4f30:	fa25 f404 	lsr.w	r4, r5, r4
    4f34:	ea48 0803 	orr.w	r8, r8, r3
    4f38:	fbb4 f1f2 	udiv	r1, r4, r2
    4f3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
    4f40:	fb02 4411 	mls	r4, r2, r1, r4
    4f44:	fa1f fc87 	uxth.w	ip, r7
    4f48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    4f4c:	fb01 f30c 	mul.w	r3, r1, ip
    4f50:	42ab      	cmp	r3, r5
    4f52:	fa00 f40e 	lsl.w	r4, r0, lr
    4f56:	d909      	bls.n	4f6c <__udivmoddi4+0x1bc>
    4f58:	19ed      	adds	r5, r5, r7
    4f5a:	f101 30ff 	add.w	r0, r1, #4294967295
    4f5e:	f080 808a 	bcs.w	5076 <__udivmoddi4+0x2c6>
    4f62:	42ab      	cmp	r3, r5
    4f64:	f240 8087 	bls.w	5076 <__udivmoddi4+0x2c6>
    4f68:	3902      	subs	r1, #2
    4f6a:	443d      	add	r5, r7
    4f6c:	1aeb      	subs	r3, r5, r3
    4f6e:	fa1f f588 	uxth.w	r5, r8
    4f72:	fbb3 f0f2 	udiv	r0, r3, r2
    4f76:	fb02 3310 	mls	r3, r2, r0, r3
    4f7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    4f7e:	fb00 f30c 	mul.w	r3, r0, ip
    4f82:	42ab      	cmp	r3, r5
    4f84:	d907      	bls.n	4f96 <__udivmoddi4+0x1e6>
    4f86:	19ed      	adds	r5, r5, r7
    4f88:	f100 38ff 	add.w	r8, r0, #4294967295
    4f8c:	d26f      	bcs.n	506e <__udivmoddi4+0x2be>
    4f8e:	42ab      	cmp	r3, r5
    4f90:	d96d      	bls.n	506e <__udivmoddi4+0x2be>
    4f92:	3802      	subs	r0, #2
    4f94:	443d      	add	r5, r7
    4f96:	1aeb      	subs	r3, r5, r3
    4f98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    4f9c:	e78f      	b.n	4ebe <__udivmoddi4+0x10e>
    4f9e:	f1c1 0720 	rsb	r7, r1, #32
    4fa2:	fa22 f807 	lsr.w	r8, r2, r7
    4fa6:	408b      	lsls	r3, r1
    4fa8:	fa05 f401 	lsl.w	r4, r5, r1
    4fac:	ea48 0303 	orr.w	r3, r8, r3
    4fb0:	fa20 fe07 	lsr.w	lr, r0, r7
    4fb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4fb8:	40fd      	lsrs	r5, r7
    4fba:	ea4e 0e04 	orr.w	lr, lr, r4
    4fbe:	fbb5 f9fc 	udiv	r9, r5, ip
    4fc2:	ea4f 441e 	mov.w	r4, lr, lsr #16
    4fc6:	fb0c 5519 	mls	r5, ip, r9, r5
    4fca:	fa1f f883 	uxth.w	r8, r3
    4fce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    4fd2:	fb09 f408 	mul.w	r4, r9, r8
    4fd6:	42ac      	cmp	r4, r5
    4fd8:	fa02 f201 	lsl.w	r2, r2, r1
    4fdc:	fa00 fa01 	lsl.w	sl, r0, r1
    4fe0:	d908      	bls.n	4ff4 <__udivmoddi4+0x244>
    4fe2:	18ed      	adds	r5, r5, r3
    4fe4:	f109 30ff 	add.w	r0, r9, #4294967295
    4fe8:	d243      	bcs.n	5072 <__udivmoddi4+0x2c2>
    4fea:	42ac      	cmp	r4, r5
    4fec:	d941      	bls.n	5072 <__udivmoddi4+0x2c2>
    4fee:	f1a9 0902 	sub.w	r9, r9, #2
    4ff2:	441d      	add	r5, r3
    4ff4:	1b2d      	subs	r5, r5, r4
    4ff6:	fa1f fe8e 	uxth.w	lr, lr
    4ffa:	fbb5 f0fc 	udiv	r0, r5, ip
    4ffe:	fb0c 5510 	mls	r5, ip, r0, r5
    5002:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    5006:	fb00 f808 	mul.w	r8, r0, r8
    500a:	45a0      	cmp	r8, r4
    500c:	d907      	bls.n	501e <__udivmoddi4+0x26e>
    500e:	18e4      	adds	r4, r4, r3
    5010:	f100 35ff 	add.w	r5, r0, #4294967295
    5014:	d229      	bcs.n	506a <__udivmoddi4+0x2ba>
    5016:	45a0      	cmp	r8, r4
    5018:	d927      	bls.n	506a <__udivmoddi4+0x2ba>
    501a:	3802      	subs	r0, #2
    501c:	441c      	add	r4, r3
    501e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    5022:	eba4 0408 	sub.w	r4, r4, r8
    5026:	fba0 8902 	umull	r8, r9, r0, r2
    502a:	454c      	cmp	r4, r9
    502c:	46c6      	mov	lr, r8
    502e:	464d      	mov	r5, r9
    5030:	d315      	bcc.n	505e <__udivmoddi4+0x2ae>
    5032:	d012      	beq.n	505a <__udivmoddi4+0x2aa>
    5034:	b156      	cbz	r6, 504c <__udivmoddi4+0x29c>
    5036:	ebba 030e 	subs.w	r3, sl, lr
    503a:	eb64 0405 	sbc.w	r4, r4, r5
    503e:	fa04 f707 	lsl.w	r7, r4, r7
    5042:	40cb      	lsrs	r3, r1
    5044:	431f      	orrs	r7, r3
    5046:	40cc      	lsrs	r4, r1
    5048:	6037      	str	r7, [r6, #0]
    504a:	6074      	str	r4, [r6, #4]
    504c:	2100      	movs	r1, #0
    504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5052:	4618      	mov	r0, r3
    5054:	e6f8      	b.n	4e48 <__udivmoddi4+0x98>
    5056:	4690      	mov	r8, r2
    5058:	e6e0      	b.n	4e1c <__udivmoddi4+0x6c>
    505a:	45c2      	cmp	sl, r8
    505c:	d2ea      	bcs.n	5034 <__udivmoddi4+0x284>
    505e:	ebb8 0e02 	subs.w	lr, r8, r2
    5062:	eb69 0503 	sbc.w	r5, r9, r3
    5066:	3801      	subs	r0, #1
    5068:	e7e4      	b.n	5034 <__udivmoddi4+0x284>
    506a:	4628      	mov	r0, r5
    506c:	e7d7      	b.n	501e <__udivmoddi4+0x26e>
    506e:	4640      	mov	r0, r8
    5070:	e791      	b.n	4f96 <__udivmoddi4+0x1e6>
    5072:	4681      	mov	r9, r0
    5074:	e7be      	b.n	4ff4 <__udivmoddi4+0x244>
    5076:	4601      	mov	r1, r0
    5078:	e778      	b.n	4f6c <__udivmoddi4+0x1bc>
    507a:	3802      	subs	r0, #2
    507c:	443c      	add	r4, r7
    507e:	e745      	b.n	4f0c <__udivmoddi4+0x15c>
    5080:	4608      	mov	r0, r1
    5082:	e708      	b.n	4e96 <__udivmoddi4+0xe6>
    5084:	f1a8 0802 	sub.w	r8, r8, #2
    5088:	443d      	add	r5, r7
    508a:	e72b      	b.n	4ee4 <__udivmoddi4+0x134>

0000508c <__aeabi_idiv0>:
    508c:	4770      	bx	lr
    508e:	bf00      	nop

00005090 <__libc_init_array>:
    5090:	b570      	push	{r4, r5, r6, lr}
    5092:	4e0d      	ldr	r6, [pc, #52]	; (50c8 <__libc_init_array+0x38>)
    5094:	4c0d      	ldr	r4, [pc, #52]	; (50cc <__libc_init_array+0x3c>)
    5096:	1ba4      	subs	r4, r4, r6
    5098:	10a4      	asrs	r4, r4, #2
    509a:	2500      	movs	r5, #0
    509c:	42a5      	cmp	r5, r4
    509e:	d109      	bne.n	50b4 <__libc_init_array+0x24>
    50a0:	4e0b      	ldr	r6, [pc, #44]	; (50d0 <__libc_init_array+0x40>)
    50a2:	4c0c      	ldr	r4, [pc, #48]	; (50d4 <__libc_init_array+0x44>)
    50a4:	f000 fa08 	bl	54b8 <_init>
    50a8:	1ba4      	subs	r4, r4, r6
    50aa:	10a4      	asrs	r4, r4, #2
    50ac:	2500      	movs	r5, #0
    50ae:	42a5      	cmp	r5, r4
    50b0:	d105      	bne.n	50be <__libc_init_array+0x2e>
    50b2:	bd70      	pop	{r4, r5, r6, pc}
    50b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    50b8:	4798      	blx	r3
    50ba:	3501      	adds	r5, #1
    50bc:	e7ee      	b.n	509c <__libc_init_array+0xc>
    50be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    50c2:	4798      	blx	r3
    50c4:	3501      	adds	r5, #1
    50c6:	e7f2      	b.n	50ae <__libc_init_array+0x1e>
    50c8:	000054c4 	.word	0x000054c4
    50cc:	000054c4 	.word	0x000054c4
    50d0:	000054c4 	.word	0x000054c4
    50d4:	000054c8 	.word	0x000054c8

000050d8 <memset>:
    50d8:	4402      	add	r2, r0
    50da:	4603      	mov	r3, r0
    50dc:	4293      	cmp	r3, r2
    50de:	d100      	bne.n	50e2 <memset+0xa>
    50e0:	4770      	bx	lr
    50e2:	f803 1b01 	strb.w	r1, [r3], #1
    50e6:	e7f9      	b.n	50dc <memset+0x4>
    50e8:	682f2e2e 	.word	0x682f2e2e
    50ec:	732f6c61 	.word	0x732f6c61
    50f0:	682f6372 	.word	0x682f6372
    50f4:	615f6c61 	.word	0x615f6c61
    50f8:	735f6364 	.word	0x735f6364
    50fc:	2e636e79 	.word	0x2e636e79
    5100:	00000063 	.word	0x00000063
    5104:	682f2e2e 	.word	0x682f2e2e
    5108:	732f6c61 	.word	0x732f6c61
    510c:	682f6372 	.word	0x682f6372
    5110:	635f6c61 	.word	0x635f6c61
    5114:	72656d61 	.word	0x72656d61
    5118:	73615f61 	.word	0x73615f61
    511c:	2e636e79 	.word	0x2e636e79
    5120:	00000063 	.word	0x00000063
    5124:	682f2e2e 	.word	0x682f2e2e
    5128:	732f6c61 	.word	0x732f6c61
    512c:	682f6372 	.word	0x682f6372
    5130:	6d5f6c61 	.word	0x6d5f6c61
    5134:	735f6963 	.word	0x735f6963
    5138:	2e636e79 	.word	0x2e636e79
    513c:	00000063 	.word	0x00000063
    5140:	682f2e2e 	.word	0x682f2e2e
    5144:	732f6c61 	.word	0x732f6c61
    5148:	682f6372 	.word	0x682f6372
    514c:	705f6c61 	.word	0x705f6c61
    5150:	632e6d77 	.word	0x632e6d77
    5154:	00000000 	.word	0x00000000
    5158:	682f2e2e 	.word	0x682f2e2e
    515c:	732f6c61 	.word	0x732f6c61
    5160:	682f6372 	.word	0x682f6372
    5164:	745f6c61 	.word	0x745f6c61
    5168:	72656d69 	.word	0x72656d69
    516c:	0000632e 	.word	0x0000632e
    5170:	682f2e2e 	.word	0x682f2e2e
    5174:	732f6c61 	.word	0x732f6c61
    5178:	682f6372 	.word	0x682f6372
    517c:	755f6c61 	.word	0x755f6c61
    5180:	74726173 	.word	0x74726173
    5184:	7973615f 	.word	0x7973615f
    5188:	632e636e 	.word	0x632e636e
    518c:	00000000 	.word	0x00000000
    5190:	682f2e2e 	.word	0x682f2e2e
    5194:	752f6c61 	.word	0x752f6c61
    5198:	736c6974 	.word	0x736c6974
    519c:	6372732f 	.word	0x6372732f
    51a0:	6974752f 	.word	0x6974752f
    51a4:	6c5f736c 	.word	0x6c5f736c
    51a8:	2e747369 	.word	0x2e747369
    51ac:	00000063 	.word	0x00000063
    51b0:	682f2e2e 	.word	0x682f2e2e
    51b4:	752f6c61 	.word	0x752f6c61
    51b8:	736c6974 	.word	0x736c6974
    51bc:	6372732f 	.word	0x6372732f
    51c0:	6974752f 	.word	0x6974752f
    51c4:	725f736c 	.word	0x725f736c
    51c8:	62676e69 	.word	0x62676e69
    51cc:	65666675 	.word	0x65666675
    51d0:	00632e72 	.word	0x00632e72

000051d4 <_adcs>:
    51d4:	00000000 00000018 00001800 00000000     ................
	...
    51ec:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    51fc:	632e6364 00000000                       dc.c....

00005204 <_cfgs>:
    5204:	00205000 0a000000 00000000 00000000     .P .............
	...

00005304 <_map>:
    5304:	00000006 00000036 00000007 00000037     ....6.......7...
    5314:	00000009 00000019 0000000e 0000002e     ................
    5324:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5334:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    5344:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    5354:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    5364:	43000000 43000400                       ...C...C

0000536c <_usarts>:
    536c:	00000005 40100004 00030000 00700002     .......@......p.
    537c:	0000ff58 00000000                       X.......

00005384 <_i2cms>:
	...

0000539c <_i2css>:
	...

000053ac <sercomspi_regs>:
	...
    53c0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    53d0:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    53e0:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    53f0:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    5400:	63745f6c 0000632e                       l_tc.c..

00005408 <sd_mmc_trans_units>:
    5408:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00005424 <sd_trans_multipliers>:
    5424:	00000000 0000000a 0000000c 0000000d     ................
    5434:	0000000f 00000014 00000019 0000001e     ................
    5444:	00000023 00000028 0000002d 00000032     #...(...-...2...
    5454:	00000037 0000003c 00000046 00000050     7...<...F...P...

00005464 <mmc_trans_multipliers>:
    5464:	00000000 0000000a 0000000c 0000000d     ................
    5474:	0000000f 00000014 0000001a 0000001e     ................
    5484:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5494:	00000037 0000003c 00000046 00000050     7...<...F...P...
    54a4:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    54b4:	0000632e                                .c..

000054b8 <_init>:
    54b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ba:	bf00      	nop
    54bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    54be:	bc08      	pop	{r3}
    54c0:	469e      	mov	lr, r3
    54c2:	4770      	bx	lr

000054c4 <__init_array_start>:
    54c4:	00000289 	.word	0x00000289

000054c8 <_fini>:
    54c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ca:	bf00      	nop
    54cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    54ce:	bc08      	pop	{r3}
    54d0:	469e      	mov	lr, r3
    54d2:	4770      	bx	lr

000054d4 <__fini_array_start>:
    54d4:	00000265 	.word	0x00000265
>>>>>>> 202ae7f6df145eeeeba0f5b592df1aa3f4cb9453
