
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000059c8  000059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000003c  20000000  000059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002003c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002003c  2**0
                  CONTENTS
  5 .bss          000293e0  20000040  00005a10  0002003c  2**4
                  ALLOC
  6 .stack        00010000  20029420  0002edf0  0002003c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004ae39  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005a65  00000000  00000000  0006aefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000191a7  00000000  00000000  00070961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001430  00000000  00000000  00089b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001500  00000000  00000000  0008af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00032f52  00000000  00000000  0008c438  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f0f3  00000000  00000000  000bf38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00100bd3  00000000  00000000  000de47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003500  00000000  00000000  001df050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 94 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00      .. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 a5 1f 00 00     ................
      8c:	b1 1f 00 00 e5 02 00 00 bd 1f 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c9 1f 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	45 1d 00 00 51 1d 00 00 5d 1d 00 00 69 1d 00 00     E...Q...]...i...
      cc:	75 1d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     u...............
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	21 22 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     !"..............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 1d 2d 00 00 31 2d 00 00 45 2d 00 00     .....-..1-..E-..
     154:	59 2d 00 00 00 00 00 00 00 00 00 00 00 00 00 00     Y-..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 19 33 00 00     .............3..
     1f0:	2d 33 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     -3..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 f5 21 00 00 e5 02 00 00 e5 02 00 00     .....!..........
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	000059d0 	.word	0x000059d0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000059d0 	.word	0x000059d0
     2c4:	20000044 	.word	0x20000044
     2c8:	000059d0 	.word	0x000059d0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	00005231 	.word	0x00005231

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	000059d0 	.word	0x000059d0
     348:	2000003c 	.word	0x2000003c
     34c:	20000040 	.word	0x20000040
     350:	20029420 	.word	0x20029420
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	0000555d 	.word	0x0000555d
     360:	0000442d 	.word	0x0000442d

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	000032d5 	.word	0x000032d5
     394:	40003c00 	.word	0x40003c00
     398:	20000748 	.word	0x20000748
     39c:	0000136d 	.word	0x0000136d

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006d8 	.word	0x200006d8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000e39 	.word	0x00000e39

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006c4 	.word	0x200006c4
     6e4:	00000d65 	.word	0x00000d65
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006dc 	.word	0x200006dc
     788:	000015e9 	.word	0x000015e9
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000730 	.word	0x20000730
     950:	00000f3d 	.word	0x00000f3d
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000da1 	.word	0x00000da1

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	000032d9 	.word	0x000032d9
     9d8:	40003800 	.word	0x40003800
     9dc:	200006a8 	.word	0x200006a8
     9e0:	00001205 	.word	0x00001205

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00001a85 	.word	0x00001a85
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	000055b4 	.word	0x000055b4
     c6c:	0000167d 	.word	0x0000167d
     c70:	000019ad 	.word	0x000019ad

00000c74 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	460d      	mov	r5, r1
	ASSERT(descr);
     c78:	4604      	mov	r4, r0
     c7a:	224e      	movs	r2, #78	; 0x4e
     c7c:	4905      	ldr	r1, [pc, #20]	; (c94 <adc_sync_enable_channel+0x20>)
     c7e:	3000      	adds	r0, #0
     c80:	bf18      	it	ne
     c82:	2001      	movne	r0, #1
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <adc_sync_enable_channel+0x24>)
     c86:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     c88:	4629      	mov	r1, r5
     c8a:	4620      	mov	r0, r4
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <adc_sync_enable_channel+0x28>)
     c8e:	4798      	blx	r3

	return ERR_NONE;
}
     c90:	2000      	movs	r0, #0
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	000055b4 	.word	0x000055b4
     c98:	0000167d 	.word	0x0000167d
     c9c:	000019e5 	.word	0x000019e5

00000ca0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca4:	460d      	mov	r5, r1
     ca6:	4690      	mov	r8, r2
     ca8:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     caa:	4607      	mov	r7, r0
     cac:	b1c8      	cbz	r0, ce2 <adc_sync_read_channel+0x42>
     cae:	b1d2      	cbz	r2, ce6 <adc_sync_read_channel+0x46>
     cb0:	b9db      	cbnz	r3, cea <adc_sync_read_channel+0x4a>
     cb2:	2000      	movs	r0, #0
     cb4:	f8df a084 	ldr.w	sl, [pc, #132]	; d3c <adc_sync_read_channel+0x9c>
     cb8:	2267      	movs	r2, #103	; 0x67
     cba:	4651      	mov	r1, sl
     cbc:	4e1a      	ldr	r6, [pc, #104]	; (d28 <adc_sync_read_channel+0x88>)
     cbe:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     cc0:	463c      	mov	r4, r7
     cc2:	4638      	mov	r0, r7
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <adc_sync_read_channel+0x8c>)
     cc6:	4798      	blx	r3
     cc8:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     cca:	fb99 f0f0 	sdiv	r0, r9, r0
     cce:	fb07 9010 	mls	r0, r7, r0, r9
     cd2:	2269      	movs	r2, #105	; 0x69
     cd4:	4651      	mov	r1, sl
     cd6:	fab0 f080 	clz	r0, r0
     cda:	0940      	lsrs	r0, r0, #5
     cdc:	47b0      	blx	r6
	uint16_t offset = 0;
     cde:	2600      	movs	r6, #0
     ce0:	e009      	b.n	cf6 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     ce2:	2000      	movs	r0, #0
     ce4:	e7e6      	b.n	cb4 <adc_sync_read_channel+0x14>
     ce6:	2000      	movs	r0, #0
     ce8:	e7e4      	b.n	cb4 <adc_sync_read_channel+0x14>
     cea:	2001      	movs	r0, #1
     cec:	e7e2      	b.n	cb4 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cee:	443e      	add	r6, r7
     cf0:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cf2:	45b1      	cmp	r9, r6
     cf4:	d915      	bls.n	d22 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cf6:	4620      	mov	r0, r4
     cf8:	4b0d      	ldr	r3, [pc, #52]	; (d30 <adc_sync_read_channel+0x90>)
     cfa:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cfc:	4629      	mov	r1, r5
     cfe:	4620      	mov	r0, r4
     d00:	4b0c      	ldr	r3, [pc, #48]	; (d34 <adc_sync_read_channel+0x94>)
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	d0f9      	beq.n	cfc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     d08:	4629      	mov	r1, r5
     d0a:	4620      	mov	r0, r4
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <adc_sync_read_channel+0x98>)
     d0e:	4798      	blx	r3
		buffer[offset] = result;
     d10:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     d14:	2f01      	cmp	r7, #1
     d16:	d9ea      	bls.n	cee <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     d18:	1c73      	adds	r3, r6, #1
     d1a:	0a00      	lsrs	r0, r0, #8
     d1c:	f808 0003 	strb.w	r0, [r8, r3]
     d20:	e7e5      	b.n	cee <adc_sync_read_channel+0x4e>

	return offset;
}
     d22:	4630      	mov	r0, r6
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d28:	0000167d 	.word	0x0000167d
     d2c:	000019fb 	.word	0x000019fb
     d30:	00001a1b 	.word	0x00001a1b
     d34:	00001a0f 	.word	0x00001a0f
     d38:	00001a31 	.word	0x00001a31
     d3c:	000055b4 	.word	0x000055b4

00000d40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d48:	f3bf 8f5f 	dmb	sy
     d4c:	4770      	bx	lr

00000d4e <atomic_leave_critical>:
     d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d54:	f383 8810 	msr	PRIMASK, r3
     d58:	4770      	bx	lr

00000d5a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d5a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d5c:	6903      	ldr	r3, [r0, #16]
     d5e:	b103      	cbz	r3, d62 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d60:	4798      	blx	r3
     d62:	bd08      	pop	{r3, pc}

00000d64 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d64:	b538      	push	{r3, r4, r5, lr}
     d66:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d68:	4604      	mov	r4, r0
     d6a:	b178      	cbz	r0, d8c <camera_async_init+0x28>
     d6c:	b161      	cbz	r1, d88 <camera_async_init+0x24>
     d6e:	2001      	movs	r0, #1
     d70:	2232      	movs	r2, #50	; 0x32
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <camera_async_init+0x2c>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <camera_async_init+0x30>)
     d76:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d78:	4629      	mov	r1, r5
     d7a:	4620      	mov	r0, r4
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <camera_async_init+0x34>)
     d7e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d80:	4b06      	ldr	r3, [pc, #24]	; (d9c <camera_async_init+0x38>)
     d82:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d84:	2000      	movs	r0, #0
     d86:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d88:	2000      	movs	r0, #0
     d8a:	e7f1      	b.n	d70 <camera_async_init+0xc>
     d8c:	2000      	movs	r0, #0
     d8e:	e7ef      	b.n	d70 <camera_async_init+0xc>
     d90:	000055d0 	.word	0x000055d0
     d94:	0000167d 	.word	0x0000167d
     d98:	000021bd 	.word	0x000021bd
     d9c:	00000d5b 	.word	0x00000d5b

00000da0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     da0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <delay_init+0xc>)
     da4:	6018      	str	r0, [r3, #0]
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <delay_init+0x10>)
     da8:	4798      	blx	r3
     daa:	bd08      	pop	{r3, pc}
     dac:	2000006c 	.word	0x2000006c
     db0:	00002d81 	.word	0x00002d81

00000db4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     db4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_us+0x14>)
     db8:	681c      	ldr	r4, [r3, #0]
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <delay_us+0x18>)
     dbc:	4798      	blx	r3
     dbe:	4601      	mov	r1, r0
     dc0:	4620      	mov	r0, r4
     dc2:	4b03      	ldr	r3, [pc, #12]	; (dd0 <delay_us+0x1c>)
     dc4:	4798      	blx	r3
     dc6:	bd10      	pop	{r4, pc}
     dc8:	2000006c 	.word	0x2000006c
     dcc:	00001a59 	.word	0x00001a59
     dd0:	00002d8d 	.word	0x00002d8d

00000dd4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     dd4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     dd6:	4b04      	ldr	r3, [pc, #16]	; (de8 <delay_ms+0x14>)
     dd8:	681c      	ldr	r4, [r3, #0]
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <delay_ms+0x18>)
     ddc:	4798      	blx	r3
     dde:	4601      	mov	r1, r0
     de0:	4620      	mov	r0, r4
     de2:	4b03      	ldr	r3, [pc, #12]	; (df0 <delay_ms+0x1c>)
     de4:	4798      	blx	r3
     de6:	bd10      	pop	{r4, pc}
     de8:	2000006c 	.word	0x2000006c
     dec:	00001a75 	.word	0x00001a75
     df0:	00002d8d 	.word	0x00002d8d

00000df4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     df4:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     df6:	2504      	movs	r5, #4
     df8:	2400      	movs	r4, #0

	while (upper >= lower) {
     dfa:	e007      	b.n	e0c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     dfc:	4a0d      	ldr	r2, [pc, #52]	; (e34 <process_ext_irq+0x40>)
     dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     e02:	b1b3      	cbz	r3, e32 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     e04:	4798      	blx	r3
     e06:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     e08:	3a01      	subs	r2, #1
     e0a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     e0c:	42ac      	cmp	r4, r5
     e0e:	d810      	bhi.n	e32 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     e10:	192b      	adds	r3, r5, r4
     e12:	105b      	asrs	r3, r3, #1
     e14:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     e16:	2a03      	cmp	r2, #3
     e18:	d80b      	bhi.n	e32 <process_ext_irq+0x3e>
     e1a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <process_ext_irq+0x40>)
     e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     e22:	6849      	ldr	r1, [r1, #4]
     e24:	4281      	cmp	r1, r0
     e26:	d0e9      	beq.n	dfc <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     e28:	4281      	cmp	r1, r0
     e2a:	d2ed      	bcs.n	e08 <process_ext_irq+0x14>
			lower = middle + 1;
     e2c:	3201      	adds	r2, #1
     e2e:	b2d4      	uxtb	r4, r2
     e30:	e7ec      	b.n	e0c <process_ext_irq+0x18>
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	20000070 	.word	0x20000070

00000e38 <ext_irq_init>:
{
     e38:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e3a:	2300      	movs	r3, #0
     e3c:	e00a      	b.n	e54 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     e3e:	4a08      	ldr	r2, [pc, #32]	; (e60 <ext_irq_init+0x28>)
     e40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     e44:	f04f 30ff 	mov.w	r0, #4294967295
     e48:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     e4a:	2100      	movs	r1, #0
     e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	2b03      	cmp	r3, #3
     e56:	d9f2      	bls.n	e3e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     e58:	4802      	ldr	r0, [pc, #8]	; (e64 <ext_irq_init+0x2c>)
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <ext_irq_init+0x30>)
     e5c:	4798      	blx	r3
}
     e5e:	bd08      	pop	{r3, pc}
     e60:	20000070 	.word	0x20000070
     e64:	00000df5 	.word	0x00000df5
     e68:	00001e45 	.word	0x00001e45

00000e6c <ext_irq_register>:
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	b083      	sub	sp, #12
     e70:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     e72:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e74:	2b03      	cmp	r3, #3
     e76:	d80e      	bhi.n	e96 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     e78:	4618      	mov	r0, r3
     e7a:	4a2e      	ldr	r2, [pc, #184]	; (f34 <ext_irq_register+0xc8>)
     e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     e80:	6852      	ldr	r2, [r2, #4]
     e82:	42a2      	cmp	r2, r4
     e84:	d002      	beq.n	e8c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     e86:	3301      	adds	r3, #1
     e88:	b2db      	uxtb	r3, r3
     e8a:	e7f3      	b.n	e74 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <ext_irq_register+0xc8>)
     e8e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     e92:	2701      	movs	r7, #1
			break;
     e94:	e000      	b.n	e98 <ext_irq_register+0x2c>
	bool    found = false;
     e96:	2700      	movs	r7, #0
	if (NULL == cb) {
     e98:	b159      	cbz	r1, eb2 <ext_irq_register+0x46>
	if (!found) {
     e9a:	2f00      	cmp	r7, #0
     e9c:	d13d      	bne.n	f1a <ext_irq_register+0xae>
     e9e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ea0:	2b03      	cmp	r3, #3
     ea2:	d813      	bhi.n	ecc <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     ea4:	4a23      	ldr	r2, [pc, #140]	; (f34 <ext_irq_register+0xc8>)
     ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     eaa:	b142      	cbz	r2, ebe <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     eac:	3301      	adds	r3, #1
     eae:	b2db      	uxtb	r3, r3
     eb0:	e7f6      	b.n	ea0 <ext_irq_register+0x34>
		if (!found) {
     eb2:	2f00      	cmp	r7, #0
     eb4:	d038      	beq.n	f28 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     eb6:	4620      	mov	r0, r4
     eb8:	4b1f      	ldr	r3, [pc, #124]	; (f38 <ext_irq_register+0xcc>)
     eba:	4798      	blx	r3
     ebc:	e032      	b.n	f24 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     ebe:	4a1d      	ldr	r2, [pc, #116]	; (f34 <ext_irq_register+0xc8>)
     ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     ec4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ec8:	6054      	str	r4, [r2, #4]
				found           = true;
     eca:	2701      	movs	r7, #1
     ecc:	2200      	movs	r2, #0
     ece:	e001      	b.n	ed4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     ed0:	3201      	adds	r2, #1
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	2a03      	cmp	r2, #3
     ed6:	d820      	bhi.n	f1a <ext_irq_register+0xae>
     ed8:	2b03      	cmp	r3, #3
     eda:	d81e      	bhi.n	f1a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     edc:	469e      	mov	lr, r3
     ede:	4915      	ldr	r1, [pc, #84]	; (f34 <ext_irq_register+0xc8>)
     ee0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     ee4:	6840      	ldr	r0, [r0, #4]
     ee6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     eea:	6849      	ldr	r1, [r1, #4]
     eec:	4288      	cmp	r0, r1
     eee:	d2ef      	bcs.n	ed0 <ext_irq_register+0x64>
     ef0:	f1b1 3fff 	cmp.w	r1, #4294967295
     ef4:	d0ec      	beq.n	ed0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     ef6:	4e0f      	ldr	r6, [pc, #60]	; (f34 <ext_irq_register+0xc8>)
     ef8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
     efc:	e895 0003 	ldmia.w	r5, {r0, r1}
     f00:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     f04:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
     f08:	e896 0003 	ldmia.w	r6, {r0, r1}
     f0c:	e885 0003 	stmia.w	r5, {r0, r1}
				ext_irqs[i] = tmp;
     f10:	e89d 0003 	ldmia.w	sp, {r0, r1}
     f14:	e886 0003 	stmia.w	r6, {r0, r1}
     f18:	e7da      	b.n	ed0 <ext_irq_register+0x64>
	if (!found) {
     f1a:	b147      	cbz	r7, f2e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     f1c:	2101      	movs	r1, #1
     f1e:	4620      	mov	r0, r4
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <ext_irq_register+0xcc>)
     f22:	4798      	blx	r3
}
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     f28:	f06f 000c 	mvn.w	r0, #12
     f2c:	e7fa      	b.n	f24 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     f2e:	f06f 000c 	mvn.w	r0, #12
     f32:	e7f7      	b.n	f24 <ext_irq_register+0xb8>
     f34:	20000070 	.word	0x20000070
     f38:	00001f4d 	.word	0x00001f4d

00000f3c <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     f3c:	b538      	push	{r3, r4, r5, lr}
     f3e:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     f40:	4605      	mov	r5, r0
     f42:	b160      	cbz	r0, f5e <mci_sync_init+0x22>
     f44:	b149      	cbz	r1, f5a <mci_sync_init+0x1e>
     f46:	2001      	movs	r0, #1
     f48:	2231      	movs	r2, #49	; 0x31
     f4a:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_init+0x28>)
     f4c:	4b06      	ldr	r3, [pc, #24]	; (f68 <mci_sync_init+0x2c>)
     f4e:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_init+0x30>)
     f56:	4798      	blx	r3
}
     f58:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     f5a:	2000      	movs	r0, #0
     f5c:	e7f4      	b.n	f48 <mci_sync_init+0xc>
     f5e:	2000      	movs	r0, #0
     f60:	e7f2      	b.n	f48 <mci_sync_init+0xc>
     f62:	bf00      	nop
     f64:	000055f0 	.word	0x000055f0
     f68:	0000167d 	.word	0x0000167d
     f6c:	00002479 	.word	0x00002479

00000f70 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
     f74:	460d      	mov	r5, r1
     f76:	4616      	mov	r6, r2
     f78:	461f      	mov	r7, r3
	ASSERT(mci);
     f7a:	4604      	mov	r4, r0
     f7c:	2244      	movs	r2, #68	; 0x44
     f7e:	4908      	ldr	r1, [pc, #32]	; (fa0 <mci_sync_select_device+0x30>)
     f80:	3000      	adds	r0, #0
     f82:	bf18      	it	ne
     f84:	2001      	movne	r0, #1
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <mci_sync_select_device+0x34>)
     f88:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     f8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f8e:	9300      	str	r3, [sp, #0]
     f90:	463b      	mov	r3, r7
     f92:	4632      	mov	r2, r6
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	4c03      	ldr	r4, [pc, #12]	; (fa8 <mci_sync_select_device+0x38>)
     f9a:	47a0      	blx	r4
}
     f9c:	b003      	add	sp, #12
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	000055f0 	.word	0x000055f0
     fa4:	0000167d 	.word	0x0000167d
     fa8:	000024e1 	.word	0x000024e1

00000fac <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(mci);
     fb0:	4604      	mov	r4, r0
     fb2:	224d      	movs	r2, #77	; 0x4d
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <mci_sync_deselect_device+0x20>)
     fb6:	3000      	adds	r0, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <mci_sync_deselect_device+0x24>)
     fbe:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <mci_sync_deselect_device+0x28>)
     fc6:	4798      	blx	r3
}
     fc8:	bd38      	pop	{r3, r4, r5, pc}
     fca:	bf00      	nop
     fcc:	000055f0 	.word	0x000055f0
     fd0:	0000167d 	.word	0x0000167d
     fd4:	00002575 	.word	0x00002575

00000fd8 <mci_sync_get_bus_width>:

/**
 *  \brief Get the maximum bus width of a device by a selected slot
 */
uint8_t mci_sync_get_bus_width(struct mci_sync_desc *mci, uint8_t slot)
{
     fd8:	b538      	push	{r3, r4, r5, lr}
     fda:	460d      	mov	r5, r1
	ASSERT(mci);
     fdc:	4604      	mov	r4, r0
     fde:	2256      	movs	r2, #86	; 0x56
     fe0:	4905      	ldr	r1, [pc, #20]	; (ff8 <mci_sync_get_bus_width+0x20>)
     fe2:	3000      	adds	r0, #0
     fe4:	bf18      	it	ne
     fe6:	2001      	movne	r0, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <mci_sync_get_bus_width+0x24>)
     fea:	4798      	blx	r3
	return _mci_sync_get_bus_width(&mci->device, slot);
     fec:	4629      	mov	r1, r5
     fee:	4620      	mov	r0, r4
     ff0:	4b03      	ldr	r3, [pc, #12]	; (1000 <mci_sync_get_bus_width+0x28>)
     ff2:	4798      	blx	r3
}
     ff4:	bd38      	pop	{r3, r4, r5, pc}
     ff6:	bf00      	nop
     ff8:	000055f0 	.word	0x000055f0
     ffc:	0000167d 	.word	0x0000167d
    1000:	00002579 	.word	0x00002579

00001004 <mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 *
 */
bool mci_sync_is_high_speed_capable(struct mci_sync_desc *mci)
{
    1004:	b510      	push	{r4, lr}
	ASSERT(mci);
    1006:	4604      	mov	r4, r0
    1008:	2260      	movs	r2, #96	; 0x60
    100a:	4905      	ldr	r1, [pc, #20]	; (1020 <mci_sync_is_high_speed_capable+0x1c>)
    100c:	3000      	adds	r0, #0
    100e:	bf18      	it	ne
    1010:	2001      	movne	r0, #1
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <mci_sync_is_high_speed_capable+0x20>)
    1014:	4798      	blx	r3
	return _mci_sync_is_high_speed_capable(&mci->device);
    1016:	4620      	mov	r0, r4
    1018:	4b03      	ldr	r3, [pc, #12]	; (1028 <mci_sync_is_high_speed_capable+0x24>)
    101a:	4798      	blx	r3
}
    101c:	bd10      	pop	{r4, pc}
    101e:	bf00      	nop
    1020:	000055f0 	.word	0x000055f0
    1024:	0000167d 	.word	0x0000167d
    1028:	00002583 	.word	0x00002583

0000102c <mci_sync_send_clock>:

/**
 *  \brief Send 74 clock cycles on the line.
 */
void mci_sync_send_clock(struct mci_sync_desc *mci)
{
    102c:	b510      	push	{r4, lr}
	ASSERT(mci);
    102e:	4604      	mov	r4, r0
    1030:	2269      	movs	r2, #105	; 0x69
    1032:	4905      	ldr	r1, [pc, #20]	; (1048 <mci_sync_send_clock+0x1c>)
    1034:	3000      	adds	r0, #0
    1036:	bf18      	it	ne
    1038:	2001      	movne	r0, #1
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <mci_sync_send_clock+0x20>)
    103c:	4798      	blx	r3
	_mci_sync_send_clock(&mci->device);
    103e:	4620      	mov	r0, r4
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <mci_sync_send_clock+0x24>)
    1042:	4798      	blx	r3
    1044:	bd10      	pop	{r4, pc}
    1046:	bf00      	nop
    1048:	000055f0 	.word	0x000055f0
    104c:	0000167d 	.word	0x0000167d
    1050:	0000258d 	.word	0x0000258d

00001054 <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
    1054:	b570      	push	{r4, r5, r6, lr}
    1056:	460d      	mov	r5, r1
    1058:	4616      	mov	r6, r2
	ASSERT(mci);
    105a:	4604      	mov	r4, r0
    105c:	2272      	movs	r2, #114	; 0x72
    105e:	4906      	ldr	r1, [pc, #24]	; (1078 <mci_sync_send_cmd+0x24>)
    1060:	3000      	adds	r0, #0
    1062:	bf18      	it	ne
    1064:	2001      	movne	r0, #1
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <mci_sync_send_cmd+0x28>)
    1068:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
    106a:	4632      	mov	r2, r6
    106c:	4629      	mov	r1, r5
    106e:	4620      	mov	r0, r4
    1070:	4b03      	ldr	r3, [pc, #12]	; (1080 <mci_sync_send_cmd+0x2c>)
    1072:	4798      	blx	r3
}
    1074:	bd70      	pop	{r4, r5, r6, pc}
    1076:	bf00      	nop
    1078:	000055f0 	.word	0x000055f0
    107c:	0000167d 	.word	0x0000167d
    1080:	000025c5 	.word	0x000025c5

00001084 <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
    1084:	b510      	push	{r4, lr}
	ASSERT(mci);
    1086:	4604      	mov	r4, r0
    1088:	227b      	movs	r2, #123	; 0x7b
    108a:	4905      	ldr	r1, [pc, #20]	; (10a0 <mci_sync_get_response+0x1c>)
    108c:	3000      	adds	r0, #0
    108e:	bf18      	it	ne
    1090:	2001      	movne	r0, #1
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <mci_sync_get_response+0x20>)
    1094:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
    1096:	4620      	mov	r0, r4
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <mci_sync_get_response+0x24>)
    109a:	4798      	blx	r3
}
    109c:	bd10      	pop	{r4, pc}
    109e:	bf00      	nop
    10a0:	000055f0 	.word	0x000055f0
    10a4:	0000167d 	.word	0x0000167d
    10a8:	0000261d 	.word	0x0000261d

000010ac <mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void mci_sync_get_response_128(struct mci_sync_desc *mci, uint8_t *response)
{
    10ac:	b538      	push	{r3, r4, r5, lr}
    10ae:	460c      	mov	r4, r1
	ASSERT(mci && response);
    10b0:	4605      	mov	r5, r0
    10b2:	b160      	cbz	r0, 10ce <mci_sync_get_response_128+0x22>
    10b4:	b149      	cbz	r1, 10ca <mci_sync_get_response_128+0x1e>
    10b6:	2001      	movs	r0, #1
    10b8:	2284      	movs	r2, #132	; 0x84
    10ba:	4906      	ldr	r1, [pc, #24]	; (10d4 <mci_sync_get_response_128+0x28>)
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <mci_sync_get_response_128+0x2c>)
    10be:	4798      	blx	r3
	_mci_sync_get_response_128(&mci->device, response);
    10c0:	4621      	mov	r1, r4
    10c2:	4628      	mov	r0, r5
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <mci_sync_get_response_128+0x30>)
    10c6:	4798      	blx	r3
    10c8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && response);
    10ca:	2000      	movs	r0, #0
    10cc:	e7f4      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10ce:	2000      	movs	r0, #0
    10d0:	e7f2      	b.n	10b8 <mci_sync_get_response_128+0xc>
    10d2:	bf00      	nop
    10d4:	000055f0 	.word	0x000055f0
    10d8:	0000167d 	.word	0x0000167d
    10dc:	00002649 	.word	0x00002649

000010e0 <mci_send_cmd_execute>:
}

//Added by DAharoni
bool mci_send_cmd_execute(Sdhc *mci, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    10e0:	b510      	push	{r4, lr}
	return _mci_send_cmd_execute(mci, cmdr, cmd, arg);
    10e2:	4c01      	ldr	r4, [pc, #4]	; (10e8 <mci_send_cmd_execute+0x8>)
    10e4:	47a0      	blx	r4
}
    10e6:	bd10      	pop	{r4, pc}
    10e8:	00002389 	.word	0x00002389

000010ec <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
    10ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ee:	b083      	sub	sp, #12
    10f0:	460d      	mov	r5, r1
    10f2:	4616      	mov	r6, r2
    10f4:	461f      	mov	r7, r3
	ASSERT(mci);
    10f6:	4604      	mov	r4, r0
    10f8:	2296      	movs	r2, #150	; 0x96
    10fa:	490a      	ldr	r1, [pc, #40]	; (1124 <mci_sync_adtc_start+0x38>)
    10fc:	3000      	adds	r0, #0
    10fe:	bf18      	it	ne
    1100:	2001      	movne	r0, #1
    1102:	4b09      	ldr	r3, [pc, #36]	; (1128 <mci_sync_adtc_start+0x3c>)
    1104:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
    1106:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    110a:	9301      	str	r3, [sp, #4]
    110c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    1110:	9300      	str	r3, [sp, #0]
    1112:	463b      	mov	r3, r7
    1114:	4632      	mov	r2, r6
    1116:	4629      	mov	r1, r5
    1118:	4620      	mov	r0, r4
    111a:	4c04      	ldr	r4, [pc, #16]	; (112c <mci_sync_adtc_start+0x40>)
    111c:	47a0      	blx	r4
}
    111e:	b003      	add	sp, #12
    1120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1122:	bf00      	nop
    1124:	000055f0 	.word	0x000055f0
    1128:	0000167d 	.word	0x0000167d
    112c:	000026a1 	.word	0x000026a1

00001130 <mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool mci_sync_start_read_blocks(struct mci_sync_desc *mci, void *dst, uint16_t nb_block)
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	460c      	mov	r4, r1
    1134:	4616      	mov	r6, r2
	ASSERT(mci && dst);
    1136:	4605      	mov	r5, r0
    1138:	b168      	cbz	r0, 1156 <mci_sync_start_read_blocks+0x26>
    113a:	b151      	cbz	r1, 1152 <mci_sync_start_read_blocks+0x22>
    113c:	2001      	movs	r0, #1
    113e:	22bb      	movs	r2, #187	; 0xbb
    1140:	4906      	ldr	r1, [pc, #24]	; (115c <mci_sync_start_read_blocks+0x2c>)
    1142:	4b07      	ldr	r3, [pc, #28]	; (1160 <mci_sync_start_read_blocks+0x30>)
    1144:	4798      	blx	r3
	return _mci_sync_start_read_blocks(&mci->device, dst, nb_block);
    1146:	4632      	mov	r2, r6
    1148:	4621      	mov	r1, r4
    114a:	4628      	mov	r0, r5
    114c:	4b05      	ldr	r3, [pc, #20]	; (1164 <mci_sync_start_read_blocks+0x34>)
    114e:	4798      	blx	r3
}
    1150:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && dst);
    1152:	2000      	movs	r0, #0
    1154:	e7f3      	b.n	113e <mci_sync_start_read_blocks+0xe>
    1156:	2000      	movs	r0, #0
    1158:	e7f1      	b.n	113e <mci_sync_start_read_blocks+0xe>
    115a:	bf00      	nop
    115c:	000055f0 	.word	0x000055f0
    1160:	0000167d 	.word	0x0000167d
    1164:	0000290d 	.word	0x0000290d

00001168 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	460c      	mov	r4, r1
    116c:	4616      	mov	r6, r2
	ASSERT(mci && src);
    116e:	4605      	mov	r5, r0
    1170:	b168      	cbz	r0, 118e <mci_sync_start_write_blocks+0x26>
    1172:	b151      	cbz	r1, 118a <mci_sync_start_write_blocks+0x22>
    1174:	2001      	movs	r0, #1
    1176:	22c4      	movs	r2, #196	; 0xc4
    1178:	4906      	ldr	r1, [pc, #24]	; (1194 <mci_sync_start_write_blocks+0x2c>)
    117a:	4b07      	ldr	r3, [pc, #28]	; (1198 <mci_sync_start_write_blocks+0x30>)
    117c:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
    117e:	4632      	mov	r2, r6
    1180:	4621      	mov	r1, r4
    1182:	4628      	mov	r0, r5
    1184:	4b05      	ldr	r3, [pc, #20]	; (119c <mci_sync_start_write_blocks+0x34>)
    1186:	4798      	blx	r3
}
    1188:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
    118a:	2000      	movs	r0, #0
    118c:	e7f3      	b.n	1176 <mci_sync_start_write_blocks+0xe>
    118e:	2000      	movs	r0, #0
    1190:	e7f1      	b.n	1176 <mci_sync_start_write_blocks+0xe>
    1192:	bf00      	nop
    1194:	000055f0 	.word	0x000055f0
    1198:	0000167d 	.word	0x0000167d
    119c:	0000298d 	.word	0x0000298d

000011a0 <mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool mci_sync_wait_end_of_read_blocks(struct mci_sync_desc *mci)
{
    11a0:	b510      	push	{r4, lr}
	ASSERT(mci);
    11a2:	4604      	mov	r4, r0
    11a4:	22cd      	movs	r2, #205	; 0xcd
    11a6:	4905      	ldr	r1, [pc, #20]	; (11bc <mci_sync_wait_end_of_read_blocks+0x1c>)
    11a8:	3000      	adds	r0, #0
    11aa:	bf18      	it	ne
    11ac:	2001      	movne	r0, #1
    11ae:	4b04      	ldr	r3, [pc, #16]	; (11c0 <mci_sync_wait_end_of_read_blocks+0x20>)
    11b0:	4798      	blx	r3
	return _mci_sync_wait_end_of_read_blocks(&mci->device);
    11b2:	4620      	mov	r0, r4
    11b4:	4b03      	ldr	r3, [pc, #12]	; (11c4 <mci_sync_wait_end_of_read_blocks+0x24>)
    11b6:	4798      	blx	r3
}
    11b8:	bd10      	pop	{r4, pc}
    11ba:	bf00      	nop
    11bc:	000055f0 	.word	0x000055f0
    11c0:	0000167d 	.word	0x0000167d
    11c4:	00002a0d 	.word	0x00002a0d

000011c8 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
    11c8:	b510      	push	{r4, lr}
	ASSERT(mci);
    11ca:	4604      	mov	r4, r0
    11cc:	22d6      	movs	r2, #214	; 0xd6
    11ce:	4905      	ldr	r1, [pc, #20]	; (11e4 <mci_sync_wait_end_of_write_blocks+0x1c>)
    11d0:	3000      	adds	r0, #0
    11d2:	bf18      	it	ne
    11d4:	2001      	movne	r0, #1
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <mci_sync_wait_end_of_write_blocks+0x20>)
    11d8:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
    11da:	4620      	mov	r0, r4
    11dc:	4b03      	ldr	r3, [pc, #12]	; (11ec <mci_sync_wait_end_of_write_blocks+0x24>)
    11de:	4798      	blx	r3
}
    11e0:	bd10      	pop	{r4, pc}
    11e2:	bf00      	nop
    11e4:	000055f0 	.word	0x000055f0
    11e8:	0000167d 	.word	0x0000167d
    11ec:	00002a35 	.word	0x00002a35

000011f0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    11f0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    11f2:	6943      	ldr	r3, [r0, #20]
    11f4:	b103      	cbz	r3, 11f8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    11f6:	4798      	blx	r3
    11f8:	bd08      	pop	{r3, pc}

000011fa <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    11fa:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    11fc:	6983      	ldr	r3, [r0, #24]
    11fe:	b103      	cbz	r3, 1202 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1200:	4798      	blx	r3
    1202:	bd08      	pop	{r3, pc}

00001204 <pwm_init>:
{
    1204:	b538      	push	{r3, r4, r5, lr}
    1206:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1208:	4604      	mov	r4, r0
    120a:	b188      	cbz	r0, 1230 <pwm_init+0x2c>
    120c:	b171      	cbz	r1, 122c <pwm_init+0x28>
    120e:	2001      	movs	r0, #1
    1210:	2233      	movs	r2, #51	; 0x33
    1212:	4908      	ldr	r1, [pc, #32]	; (1234 <pwm_init+0x30>)
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <pwm_init+0x34>)
    1216:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1218:	4629      	mov	r1, r5
    121a:	4620      	mov	r0, r4
    121c:	4b07      	ldr	r3, [pc, #28]	; (123c <pwm_init+0x38>)
    121e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1220:	4b07      	ldr	r3, [pc, #28]	; (1240 <pwm_init+0x3c>)
    1222:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1224:	4b07      	ldr	r3, [pc, #28]	; (1244 <pwm_init+0x40>)
    1226:	6063      	str	r3, [r4, #4]
}
    1228:	2000      	movs	r0, #0
    122a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    122c:	2000      	movs	r0, #0
    122e:	e7ef      	b.n	1210 <pwm_init+0xc>
    1230:	2000      	movs	r0, #0
    1232:	e7ed      	b.n	1210 <pwm_init+0xc>
    1234:	0000560c 	.word	0x0000560c
    1238:	0000167d 	.word	0x0000167d
    123c:	00003089 	.word	0x00003089
    1240:	000011f1 	.word	0x000011f1
    1244:	000011fb 	.word	0x000011fb

00001248 <pwm_enable>:
{
    1248:	b510      	push	{r4, lr}
	ASSERT(descr);
    124a:	4604      	mov	r4, r0
    124c:	224a      	movs	r2, #74	; 0x4a
    124e:	4909      	ldr	r1, [pc, #36]	; (1274 <pwm_enable+0x2c>)
    1250:	3000      	adds	r0, #0
    1252:	bf18      	it	ne
    1254:	2001      	movne	r0, #1
    1256:	4b08      	ldr	r3, [pc, #32]	; (1278 <pwm_enable+0x30>)
    1258:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    125a:	4620      	mov	r0, r4
    125c:	4b07      	ldr	r3, [pc, #28]	; (127c <pwm_enable+0x34>)
    125e:	4798      	blx	r3
    1260:	b920      	cbnz	r0, 126c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    1262:	4620      	mov	r0, r4
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <pwm_enable+0x38>)
    1266:	4798      	blx	r3
	return ERR_NONE;
    1268:	2000      	movs	r0, #0
    126a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    126c:	f06f 0010 	mvn.w	r0, #16
}
    1270:	bd10      	pop	{r4, pc}
    1272:	bf00      	nop
    1274:	0000560c 	.word	0x0000560c
    1278:	0000167d 	.word	0x0000167d
    127c:	000032c3 	.word	0x000032c3
    1280:	0000321d 	.word	0x0000321d

00001284 <pwm_set_parameters>:
{
    1284:	b570      	push	{r4, r5, r6, lr}
    1286:	460d      	mov	r5, r1
    1288:	4616      	mov	r6, r2
	ASSERT(descr);
    128a:	4604      	mov	r4, r0
    128c:	227c      	movs	r2, #124	; 0x7c
    128e:	4906      	ldr	r1, [pc, #24]	; (12a8 <pwm_set_parameters+0x24>)
    1290:	3000      	adds	r0, #0
    1292:	bf18      	it	ne
    1294:	2001      	movne	r0, #1
    1296:	4b05      	ldr	r3, [pc, #20]	; (12ac <pwm_set_parameters+0x28>)
    1298:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    129a:	4632      	mov	r2, r6
    129c:	4629      	mov	r1, r5
    129e:	4620      	mov	r0, r4
    12a0:	4b03      	ldr	r3, [pc, #12]	; (12b0 <pwm_set_parameters+0x2c>)
    12a2:	4798      	blx	r3
}
    12a4:	2000      	movs	r0, #0
    12a6:	bd70      	pop	{r4, r5, r6, pc}
    12a8:	0000560c 	.word	0x0000560c
    12ac:	0000167d 	.word	0x0000167d
    12b0:	00003231 	.word	0x00003231

000012b4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    12b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    12b6:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    12b8:	b117      	cbz	r7, 12c0 <timer_add_timer_task+0xc>
    12ba:	463c      	mov	r4, r7
    12bc:	2600      	movs	r6, #0
    12be:	e00b      	b.n	12d8 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    12c0:	4b0e      	ldr	r3, [pc, #56]	; (12fc <timer_add_timer_task+0x48>)
    12c2:	4798      	blx	r3
		return;
    12c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12c6:	68a5      	ldr	r5, [r4, #8]
    12c8:	442b      	add	r3, r5
    12ca:	1a9b      	subs	r3, r3, r2
    12cc:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    12ce:	688d      	ldr	r5, [r1, #8]
    12d0:	42ab      	cmp	r3, r5
    12d2:	d209      	bcs.n	12e8 <timer_add_timer_task+0x34>
			break;
		prev = it;
    12d4:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    12d6:	6824      	ldr	r4, [r4, #0]
    12d8:	b134      	cbz	r4, 12e8 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    12da:	6863      	ldr	r3, [r4, #4]
    12dc:	4293      	cmp	r3, r2
    12de:	d8f2      	bhi.n	12c6 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    12e0:	68a5      	ldr	r5, [r4, #8]
    12e2:	1a9b      	subs	r3, r3, r2
    12e4:	442b      	add	r3, r5
    12e6:	e7f2      	b.n	12ce <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    12e8:	42bc      	cmp	r4, r7
    12ea:	d003      	beq.n	12f4 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    12ec:	4630      	mov	r0, r6
    12ee:	4b04      	ldr	r3, [pc, #16]	; (1300 <timer_add_timer_task+0x4c>)
    12f0:	4798      	blx	r3
    12f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    12f4:	4b01      	ldr	r3, [pc, #4]	; (12fc <timer_add_timer_task+0x48>)
    12f6:	4798      	blx	r3
    12f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12fa:	bf00      	nop
    12fc:	00001699 	.word	0x00001699
    1300:	000016c5 	.word	0x000016c5

00001304 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1306:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1308:	6906      	ldr	r6, [r0, #16]
    130a:	3601      	adds	r6, #1
    130c:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    130e:	7e03      	ldrb	r3, [r0, #24]
    1310:	f013 0f01 	tst.w	r3, #1
    1314:	d105      	bne.n	1322 <timer_process_counted+0x1e>
    1316:	7e03      	ldrb	r3, [r0, #24]
    1318:	f013 0f02 	tst.w	r3, #2
    131c:	d101      	bne.n	1322 <timer_process_counted+0x1e>
    131e:	4605      	mov	r5, r0
    1320:	e009      	b.n	1336 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1322:	7e03      	ldrb	r3, [r0, #24]
    1324:	f043 0302 	orr.w	r3, r3, #2
    1328:	7603      	strb	r3, [r0, #24]
		return;
    132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    132c:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    132e:	68e3      	ldr	r3, [r4, #12]
    1330:	4620      	mov	r0, r4
    1332:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1334:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    1336:	b19c      	cbz	r4, 1360 <timer_process_counted+0x5c>
    1338:	6863      	ldr	r3, [r4, #4]
    133a:	1af3      	subs	r3, r6, r3
    133c:	68a2      	ldr	r2, [r4, #8]
    133e:	4293      	cmp	r3, r2
    1340:	d30e      	bcc.n	1360 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    1342:	f105 0714 	add.w	r7, r5, #20
    1346:	4638      	mov	r0, r7
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <timer_process_counted+0x60>)
    134a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    134c:	7c23      	ldrb	r3, [r4, #16]
    134e:	2b01      	cmp	r3, #1
    1350:	d1ec      	bne.n	132c <timer_process_counted+0x28>
			tmp->time_label = time;
    1352:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1354:	4632      	mov	r2, r6
    1356:	4621      	mov	r1, r4
    1358:	4638      	mov	r0, r7
    135a:	4b03      	ldr	r3, [pc, #12]	; (1368 <timer_process_counted+0x64>)
    135c:	4798      	blx	r3
    135e:	e7e5      	b.n	132c <timer_process_counted+0x28>
    1360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1362:	bf00      	nop
    1364:	000016cd 	.word	0x000016cd
    1368:	000012b5 	.word	0x000012b5

0000136c <timer_init>:
{
    136c:	b538      	push	{r3, r4, r5, lr}
    136e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1370:	4604      	mov	r4, r0
    1372:	b180      	cbz	r0, 1396 <timer_init+0x2a>
    1374:	b169      	cbz	r1, 1392 <timer_init+0x26>
    1376:	2001      	movs	r0, #1
    1378:	223b      	movs	r2, #59	; 0x3b
    137a:	4908      	ldr	r1, [pc, #32]	; (139c <timer_init+0x30>)
    137c:	4b08      	ldr	r3, [pc, #32]	; (13a0 <timer_init+0x34>)
    137e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1380:	4629      	mov	r1, r5
    1382:	4620      	mov	r0, r4
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <timer_init+0x38>)
    1386:	4798      	blx	r3
	descr->time                           = 0;
    1388:	2000      	movs	r0, #0
    138a:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    138c:	4b06      	ldr	r3, [pc, #24]	; (13a8 <timer_init+0x3c>)
    138e:	6023      	str	r3, [r4, #0]
}
    1390:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1392:	2000      	movs	r0, #0
    1394:	e7f0      	b.n	1378 <timer_init+0xc>
    1396:	2000      	movs	r0, #0
    1398:	e7ee      	b.n	1378 <timer_init+0xc>
    139a:	bf00      	nop
    139c:	00005624 	.word	0x00005624
    13a0:	0000167d 	.word	0x0000167d
    13a4:	00002eb5 	.word	0x00002eb5
    13a8:	00001305 	.word	0x00001305

000013ac <timer_start>:
{
    13ac:	b510      	push	{r4, lr}
	ASSERT(descr);
    13ae:	4604      	mov	r4, r0
    13b0:	2253      	movs	r2, #83	; 0x53
    13b2:	4909      	ldr	r1, [pc, #36]	; (13d8 <timer_start+0x2c>)
    13b4:	3000      	adds	r0, #0
    13b6:	bf18      	it	ne
    13b8:	2001      	movne	r0, #1
    13ba:	4b08      	ldr	r3, [pc, #32]	; (13dc <timer_start+0x30>)
    13bc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    13be:	4620      	mov	r0, r4
    13c0:	4b07      	ldr	r3, [pc, #28]	; (13e0 <timer_start+0x34>)
    13c2:	4798      	blx	r3
    13c4:	b920      	cbnz	r0, 13d0 <timer_start+0x24>
	_timer_start(&descr->device);
    13c6:	4620      	mov	r0, r4
    13c8:	4b06      	ldr	r3, [pc, #24]	; (13e4 <timer_start+0x38>)
    13ca:	4798      	blx	r3
	return ERR_NONE;
    13cc:	2000      	movs	r0, #0
    13ce:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    13d0:	f06f 0010 	mvn.w	r0, #16
}
    13d4:	bd10      	pop	{r4, pc}
    13d6:	bf00      	nop
    13d8:	00005624 	.word	0x00005624
    13dc:	0000167d 	.word	0x0000167d
    13e0:	000032b1 	.word	0x000032b1
    13e4:	00003209 	.word	0x00003209

000013e8 <timer_add_task>:
{
    13e8:	b570      	push	{r4, r5, r6, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	460d      	mov	r5, r1
	ASSERT(descr && task);
    13ee:	4604      	mov	r4, r0
    13f0:	b320      	cbz	r0, 143c <timer_add_task+0x54>
    13f2:	b309      	cbz	r1, 1438 <timer_add_task+0x50>
    13f4:	2001      	movs	r0, #1
    13f6:	227a      	movs	r2, #122	; 0x7a
    13f8:	491f      	ldr	r1, [pc, #124]	; (1478 <timer_add_task+0x90>)
    13fa:	4b20      	ldr	r3, [pc, #128]	; (147c <timer_add_task+0x94>)
    13fc:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    13fe:	7e23      	ldrb	r3, [r4, #24]
    1400:	f043 0301 	orr.w	r3, r3, #1
    1404:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1406:	f104 0614 	add.w	r6, r4, #20
    140a:	4629      	mov	r1, r5
    140c:	4630      	mov	r0, r6
    140e:	4b1c      	ldr	r3, [pc, #112]	; (1480 <timer_add_task+0x98>)
    1410:	4798      	blx	r3
    1412:	b9a8      	cbnz	r0, 1440 <timer_add_task+0x58>
	task->time_label = descr->time;
    1414:	6923      	ldr	r3, [r4, #16]
    1416:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1418:	6922      	ldr	r2, [r4, #16]
    141a:	4629      	mov	r1, r5
    141c:	4630      	mov	r0, r6
    141e:	4b19      	ldr	r3, [pc, #100]	; (1484 <timer_add_task+0x9c>)
    1420:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1422:	7e23      	ldrb	r3, [r4, #24]
    1424:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1428:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    142a:	7e23      	ldrb	r3, [r4, #24]
    142c:	f013 0f02 	tst.w	r3, #2
    1430:	d112      	bne.n	1458 <timer_add_task+0x70>
	return ERR_NONE;
    1432:	2000      	movs	r0, #0
}
    1434:	b002      	add	sp, #8
    1436:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1438:	2000      	movs	r0, #0
    143a:	e7dc      	b.n	13f6 <timer_add_task+0xe>
    143c:	2000      	movs	r0, #0
    143e:	e7da      	b.n	13f6 <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1440:	7e23      	ldrb	r3, [r4, #24]
    1442:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1446:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1448:	227f      	movs	r2, #127	; 0x7f
    144a:	490b      	ldr	r1, [pc, #44]	; (1478 <timer_add_task+0x90>)
    144c:	2000      	movs	r0, #0
    144e:	4b0b      	ldr	r3, [pc, #44]	; (147c <timer_add_task+0x94>)
    1450:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1452:	f06f 0011 	mvn.w	r0, #17
    1456:	e7ed      	b.n	1434 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1458:	a801      	add	r0, sp, #4
    145a:	4b0b      	ldr	r3, [pc, #44]	; (1488 <timer_add_task+0xa0>)
    145c:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    145e:	7e23      	ldrb	r3, [r4, #24]
    1460:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1464:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1466:	4620      	mov	r0, r4
    1468:	4b08      	ldr	r3, [pc, #32]	; (148c <timer_add_task+0xa4>)
    146a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    146c:	a801      	add	r0, sp, #4
    146e:	4b08      	ldr	r3, [pc, #32]	; (1490 <timer_add_task+0xa8>)
    1470:	4798      	blx	r3
	return ERR_NONE;
    1472:	2000      	movs	r0, #0
    1474:	e7de      	b.n	1434 <timer_add_task+0x4c>
    1476:	bf00      	nop
    1478:	00005624 	.word	0x00005624
    147c:	0000167d 	.word	0x0000167d
    1480:	00001683 	.word	0x00001683
    1484:	000012b5 	.word	0x000012b5
    1488:	00000d41 	.word	0x00000d41
    148c:	000032dd 	.word	0x000032dd
    1490:	00000d4f 	.word	0x00000d4f

00001494 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1494:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1496:	2300      	movs	r3, #0
    1498:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    149a:	69c3      	ldr	r3, [r0, #28]
    149c:	b11b      	cbz	r3, 14a6 <usart_transmission_complete+0x12>
    149e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    14a2:	4610      	mov	r0, r2
    14a4:	4798      	blx	r3
    14a6:	bd08      	pop	{r3, pc}

000014a8 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    14a8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    14aa:	2300      	movs	r3, #0
    14ac:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    14ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    14b0:	b11b      	cbz	r3, 14ba <usart_error+0x12>
    14b2:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    14b6:	4610      	mov	r0, r2
    14b8:	4798      	blx	r3
    14ba:	bd08      	pop	{r3, pc}

000014bc <usart_fill_rx_buffer>:
{
    14bc:	b538      	push	{r3, r4, r5, lr}
    14be:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    14c0:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    14c4:	302c      	adds	r0, #44	; 0x2c
    14c6:	4b03      	ldr	r3, [pc, #12]	; (14d4 <usart_fill_rx_buffer+0x18>)
    14c8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    14ca:	6a23      	ldr	r3, [r4, #32]
    14cc:	b10b      	cbz	r3, 14d2 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    14ce:	4628      	mov	r0, r5
    14d0:	4798      	blx	r3
    14d2:	bd38      	pop	{r3, r4, r5, pc}
    14d4:	00001769 	.word	0x00001769

000014d8 <usart_async_write>:
{
    14d8:	b570      	push	{r4, r5, r6, lr}
    14da:	460e      	mov	r6, r1
    14dc:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    14de:	4604      	mov	r4, r0
    14e0:	b1d8      	cbz	r0, 151a <usart_async_write+0x42>
    14e2:	b1e1      	cbz	r1, 151e <usart_async_write+0x46>
    14e4:	b9ea      	cbnz	r2, 1522 <usart_async_write+0x4a>
    14e6:	2000      	movs	r0, #0
    14e8:	f240 123b 	movw	r2, #315	; 0x13b
    14ec:	490f      	ldr	r1, [pc, #60]	; (152c <usart_async_write+0x54>)
    14ee:	4b10      	ldr	r3, [pc, #64]	; (1530 <usart_async_write+0x58>)
    14f0:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    14f2:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    14f6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    14fa:	429a      	cmp	r2, r3
    14fc:	d113      	bne.n	1526 <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    14fe:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1500:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1504:	2300      	movs	r3, #0
    1506:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    150a:	2301      	movs	r3, #1
    150c:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    150e:	f104 0008 	add.w	r0, r4, #8
    1512:	4b08      	ldr	r3, [pc, #32]	; (1534 <usart_async_write+0x5c>)
    1514:	4798      	blx	r3
	return (int32_t)length;
    1516:	4628      	mov	r0, r5
    1518:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    151a:	2000      	movs	r0, #0
    151c:	e7e4      	b.n	14e8 <usart_async_write+0x10>
    151e:	2000      	movs	r0, #0
    1520:	e7e2      	b.n	14e8 <usart_async_write+0x10>
    1522:	2001      	movs	r0, #1
    1524:	e7e0      	b.n	14e8 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    1526:	f06f 001b 	mvn.w	r0, #27
}
    152a:	bd70      	pop	{r4, r5, r6, pc}
    152c:	0000563c 	.word	0x0000563c
    1530:	0000167d 	.word	0x0000167d
    1534:	00002d0b 	.word	0x00002d0b

00001538 <usart_process_byte_sent>:
{
    1538:	b510      	push	{r4, lr}
    153a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    153c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    153e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1542:	4293      	cmp	r3, r2
    1544:	d009      	beq.n	155a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1546:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1548:	1c59      	adds	r1, r3, #1
    154a:	8781      	strh	r1, [r0, #60]	; 0x3c
    154c:	5cd1      	ldrb	r1, [r2, r3]
    154e:	4b04      	ldr	r3, [pc, #16]	; (1560 <usart_process_byte_sent+0x28>)
    1550:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1552:	4620      	mov	r0, r4
    1554:	4b03      	ldr	r3, [pc, #12]	; (1564 <usart_process_byte_sent+0x2c>)
    1556:	4798      	blx	r3
    1558:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    155a:	4b03      	ldr	r3, [pc, #12]	; (1568 <usart_process_byte_sent+0x30>)
    155c:	4798      	blx	r3
    155e:	bd10      	pop	{r4, pc}
    1560:	00002d05 	.word	0x00002d05
    1564:	00002d0b 	.word	0x00002d0b
    1568:	00002d13 	.word	0x00002d13

0000156c <usart_async_read>:
{
    156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1570:	b082      	sub	sp, #8
    1572:	4688      	mov	r8, r1
    1574:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    1576:	4605      	mov	r5, r0
    1578:	b1a0      	cbz	r0, 15a4 <usart_async_read+0x38>
    157a:	b1a9      	cbz	r1, 15a8 <usart_async_read+0x3c>
    157c:	b9b2      	cbnz	r2, 15ac <usart_async_read+0x40>
    157e:	2000      	movs	r0, #0
    1580:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1584:	4912      	ldr	r1, [pc, #72]	; (15d0 <usart_async_read+0x64>)
    1586:	4b13      	ldr	r3, [pc, #76]	; (15d4 <usart_async_read+0x68>)
    1588:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    158a:	a801      	add	r0, sp, #4
    158c:	4b12      	ldr	r3, [pc, #72]	; (15d8 <usart_async_read+0x6c>)
    158e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1590:	3534      	adds	r5, #52	; 0x34
    1592:	4628      	mov	r0, r5
    1594:	4b11      	ldr	r3, [pc, #68]	; (15dc <usart_async_read+0x70>)
    1596:	4798      	blx	r3
    1598:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    159a:	a801      	add	r0, sp, #4
    159c:	4b10      	ldr	r3, [pc, #64]	; (15e0 <usart_async_read+0x74>)
    159e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    15a0:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    15a2:	e00b      	b.n	15bc <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    15a4:	2000      	movs	r0, #0
    15a6:	e7eb      	b.n	1580 <usart_async_read+0x14>
    15a8:	2000      	movs	r0, #0
    15aa:	e7e9      	b.n	1580 <usart_async_read+0x14>
    15ac:	2001      	movs	r0, #1
    15ae:	e7e7      	b.n	1580 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    15b0:	3401      	adds	r4, #1
    15b2:	b2a4      	uxth	r4, r4
    15b4:	4441      	add	r1, r8
    15b6:	4628      	mov	r0, r5
    15b8:	4b0a      	ldr	r3, [pc, #40]	; (15e4 <usart_async_read+0x78>)
    15ba:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    15bc:	4621      	mov	r1, r4
    15be:	42a7      	cmp	r7, r4
    15c0:	d901      	bls.n	15c6 <usart_async_read+0x5a>
    15c2:	42b4      	cmp	r4, r6
    15c4:	d3f4      	bcc.n	15b0 <usart_async_read+0x44>
}
    15c6:	4620      	mov	r0, r4
    15c8:	b002      	add	sp, #8
    15ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15ce:	bf00      	nop
    15d0:	0000563c 	.word	0x0000563c
    15d4:	0000167d 	.word	0x0000167d
    15d8:	00000d41 	.word	0x00000d41
    15dc:	000017a9 	.word	0x000017a9
    15e0:	00000d4f 	.word	0x00000d4f
    15e4:	00001721 	.word	0x00001721

000015e8 <usart_async_init>:
{
    15e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ea:	460d      	mov	r5, r1
    15ec:	4616      	mov	r6, r2
    15ee:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    15f0:	4604      	mov	r4, r0
    15f2:	b318      	cbz	r0, 163c <usart_async_init+0x54>
    15f4:	b321      	cbz	r1, 1640 <usart_async_init+0x58>
    15f6:	b32a      	cbz	r2, 1644 <usart_async_init+0x5c>
    15f8:	bb33      	cbnz	r3, 1648 <usart_async_init+0x60>
    15fa:	2000      	movs	r0, #0
    15fc:	223a      	movs	r2, #58	; 0x3a
    15fe:	4915      	ldr	r1, [pc, #84]	; (1654 <usart_async_init+0x6c>)
    1600:	4b15      	ldr	r3, [pc, #84]	; (1658 <usart_async_init+0x70>)
    1602:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1604:	463a      	mov	r2, r7
    1606:	4631      	mov	r1, r6
    1608:	f104 0034 	add.w	r0, r4, #52	; 0x34
    160c:	4b13      	ldr	r3, [pc, #76]	; (165c <usart_async_init+0x74>)
    160e:	4798      	blx	r3
    1610:	b9e0      	cbnz	r0, 164c <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    1612:	4629      	mov	r1, r5
    1614:	f104 0008 	add.w	r0, r4, #8
    1618:	4b11      	ldr	r3, [pc, #68]	; (1660 <usart_async_init+0x78>)
    161a:	4798      	blx	r3
	if (init_status) {
    161c:	4603      	mov	r3, r0
    161e:	b958      	cbnz	r0, 1638 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <usart_async_init+0x7c>)
    1622:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1624:	4a10      	ldr	r2, [pc, #64]	; (1668 <usart_async_init+0x80>)
    1626:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1628:	4a10      	ldr	r2, [pc, #64]	; (166c <usart_async_init+0x84>)
    162a:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    162c:	4a10      	ldr	r2, [pc, #64]	; (1670 <usart_async_init+0x88>)
    162e:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <usart_async_init+0x8c>)
    1632:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1634:	4a10      	ldr	r2, [pc, #64]	; (1678 <usart_async_init+0x90>)
    1636:	6162      	str	r2, [r4, #20]
}
    1638:	4618      	mov	r0, r3
    163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    163c:	2000      	movs	r0, #0
    163e:	e7dd      	b.n	15fc <usart_async_init+0x14>
    1640:	2000      	movs	r0, #0
    1642:	e7db      	b.n	15fc <usart_async_init+0x14>
    1644:	2000      	movs	r0, #0
    1646:	e7d9      	b.n	15fc <usart_async_init+0x14>
    1648:	2001      	movs	r0, #1
    164a:	e7d7      	b.n	15fc <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    164c:	f06f 030c 	mvn.w	r3, #12
    1650:	e7f2      	b.n	1638 <usart_async_init+0x50>
    1652:	bf00      	nop
    1654:	0000563c 	.word	0x0000563c
    1658:	0000167d 	.word	0x0000167d
    165c:	000016dd 	.word	0x000016dd
    1660:	00002c81 	.word	0x00002c81
    1664:	0000156d 	.word	0x0000156d
    1668:	000014d9 	.word	0x000014d9
    166c:	00001539 	.word	0x00001539
    1670:	000014bd 	.word	0x000014bd
    1674:	00001495 	.word	0x00001495
    1678:	000014a9 	.word	0x000014a9

0000167c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    167c:	b900      	cbnz	r0, 1680 <assert+0x4>
		__asm("BKPT #0");
    167e:	be00      	bkpt	0x0000
    1680:	4770      	bx	lr

00001682 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1682:	6803      	ldr	r3, [r0, #0]
    1684:	b11b      	cbz	r3, 168e <is_list_element+0xc>
		if (it == element) {
    1686:	428b      	cmp	r3, r1
    1688:	d003      	beq.n	1692 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	e7fa      	b.n	1684 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    168e:	2000      	movs	r0, #0
    1690:	4770      	bx	lr
			return true;
    1692:	2001      	movs	r0, #1
}
    1694:	4770      	bx	lr
	...

00001698 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1698:	b538      	push	{r3, r4, r5, lr}
    169a:	4604      	mov	r4, r0
    169c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    169e:	4b06      	ldr	r3, [pc, #24]	; (16b8 <list_insert_as_head+0x20>)
    16a0:	4798      	blx	r3
    16a2:	f080 0001 	eor.w	r0, r0, #1
    16a6:	2239      	movs	r2, #57	; 0x39
    16a8:	4904      	ldr	r1, [pc, #16]	; (16bc <list_insert_as_head+0x24>)
    16aa:	b2c0      	uxtb	r0, r0
    16ac:	4b04      	ldr	r3, [pc, #16]	; (16c0 <list_insert_as_head+0x28>)
    16ae:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    16b0:	6823      	ldr	r3, [r4, #0]
    16b2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    16b4:	6025      	str	r5, [r4, #0]
    16b6:	bd38      	pop	{r3, r4, r5, pc}
    16b8:	00001683 	.word	0x00001683
    16bc:	0000565c 	.word	0x0000565c
    16c0:	0000167d 	.word	0x0000167d

000016c4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    16c4:	6803      	ldr	r3, [r0, #0]
    16c6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    16c8:	6001      	str	r1, [r0, #0]
    16ca:	4770      	bx	lr

000016cc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    16cc:	6803      	ldr	r3, [r0, #0]
    16ce:	b11b      	cbz	r3, 16d8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    16d0:	681a      	ldr	r2, [r3, #0]
    16d2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    16d4:	4618      	mov	r0, r3
    16d6:	4770      	bx	lr
	}

	return NULL;
    16d8:	2000      	movs	r0, #0
}
    16da:	4770      	bx	lr

000016dc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    16dc:	b570      	push	{r4, r5, r6, lr}
    16de:	460e      	mov	r6, r1
    16e0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    16e2:	4604      	mov	r4, r0
    16e4:	b178      	cbz	r0, 1706 <ringbuffer_init+0x2a>
    16e6:	b181      	cbz	r1, 170a <ringbuffer_init+0x2e>
    16e8:	b98a      	cbnz	r2, 170e <ringbuffer_init+0x32>
    16ea:	2000      	movs	r0, #0
    16ec:	2228      	movs	r2, #40	; 0x28
    16ee:	490a      	ldr	r1, [pc, #40]	; (1718 <ringbuffer_init+0x3c>)
    16f0:	4b0a      	ldr	r3, [pc, #40]	; (171c <ringbuffer_init+0x40>)
    16f2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    16f4:	1e6b      	subs	r3, r5, #1
    16f6:	421d      	tst	r5, r3
    16f8:	d10b      	bne.n	1712 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    16fa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    16fc:	2000      	movs	r0, #0
    16fe:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1700:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1702:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1704:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1706:	2000      	movs	r0, #0
    1708:	e7f0      	b.n	16ec <ringbuffer_init+0x10>
    170a:	2000      	movs	r0, #0
    170c:	e7ee      	b.n	16ec <ringbuffer_init+0x10>
    170e:	2001      	movs	r0, #1
    1710:	e7ec      	b.n	16ec <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1712:	f06f 000c 	mvn.w	r0, #12
}
    1716:	bd70      	pop	{r4, r5, r6, pc}
    1718:	0000567c 	.word	0x0000567c
    171c:	0000167d 	.word	0x0000167d

00001720 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1720:	b538      	push	{r3, r4, r5, lr}
    1722:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1724:	4604      	mov	r4, r0
    1726:	b1a8      	cbz	r0, 1754 <ringbuffer_get+0x34>
    1728:	b191      	cbz	r1, 1750 <ringbuffer_get+0x30>
    172a:	2001      	movs	r0, #1
    172c:	2240      	movs	r2, #64	; 0x40
    172e:	490c      	ldr	r1, [pc, #48]	; (1760 <ringbuffer_get+0x40>)
    1730:	4b0c      	ldr	r3, [pc, #48]	; (1764 <ringbuffer_get+0x44>)
    1732:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1734:	68e2      	ldr	r2, [r4, #12]
    1736:	68a3      	ldr	r3, [r4, #8]
    1738:	429a      	cmp	r2, r3
    173a:	d00d      	beq.n	1758 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    173c:	6822      	ldr	r2, [r4, #0]
    173e:	6861      	ldr	r1, [r4, #4]
    1740:	400b      	ands	r3, r1
    1742:	5cd3      	ldrb	r3, [r2, r3]
    1744:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1746:	68a3      	ldr	r3, [r4, #8]
    1748:	3301      	adds	r3, #1
    174a:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    174c:	2000      	movs	r0, #0
    174e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    1750:	2000      	movs	r0, #0
    1752:	e7eb      	b.n	172c <ringbuffer_get+0xc>
    1754:	2000      	movs	r0, #0
    1756:	e7e9      	b.n	172c <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    1758:	f06f 0009 	mvn.w	r0, #9
}
    175c:	bd38      	pop	{r3, r4, r5, pc}
    175e:	bf00      	nop
    1760:	0000567c 	.word	0x0000567c
    1764:	0000167d 	.word	0x0000167d

00001768 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1768:	b538      	push	{r3, r4, r5, lr}
    176a:	460d      	mov	r5, r1
	ASSERT(rb);
    176c:	4604      	mov	r4, r0
    176e:	2251      	movs	r2, #81	; 0x51
    1770:	490b      	ldr	r1, [pc, #44]	; (17a0 <ringbuffer_put+0x38>)
    1772:	3000      	adds	r0, #0
    1774:	bf18      	it	ne
    1776:	2001      	movne	r0, #1
    1778:	4b0a      	ldr	r3, [pc, #40]	; (17a4 <ringbuffer_put+0x3c>)
    177a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    177c:	6822      	ldr	r2, [r4, #0]
    177e:	68e3      	ldr	r3, [r4, #12]
    1780:	6861      	ldr	r1, [r4, #4]
    1782:	400b      	ands	r3, r1
    1784:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1786:	68e3      	ldr	r3, [r4, #12]
    1788:	68a2      	ldr	r2, [r4, #8]
    178a:	1a9a      	subs	r2, r3, r2
    178c:	6861      	ldr	r1, [r4, #4]
    178e:	428a      	cmp	r2, r1
    1790:	d901      	bls.n	1796 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1792:	1a59      	subs	r1, r3, r1
    1794:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    1796:	3301      	adds	r3, #1
    1798:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    179a:	2000      	movs	r0, #0
    179c:	bd38      	pop	{r3, r4, r5, pc}
    179e:	bf00      	nop
    17a0:	0000567c 	.word	0x0000567c
    17a4:	0000167d 	.word	0x0000167d

000017a8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    17a8:	b510      	push	{r4, lr}
	ASSERT(rb);
    17aa:	4604      	mov	r4, r0
    17ac:	2267      	movs	r2, #103	; 0x67
    17ae:	4905      	ldr	r1, [pc, #20]	; (17c4 <ringbuffer_num+0x1c>)
    17b0:	3000      	adds	r0, #0
    17b2:	bf18      	it	ne
    17b4:	2001      	movne	r0, #1
    17b6:	4b04      	ldr	r3, [pc, #16]	; (17c8 <ringbuffer_num+0x20>)
    17b8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    17ba:	68e0      	ldr	r0, [r4, #12]
    17bc:	68a3      	ldr	r3, [r4, #8]
}
    17be:	1ac0      	subs	r0, r0, r3
    17c0:	bd10      	pop	{r4, pc}
    17c2:	bf00      	nop
    17c4:	0000567c 	.word	0x0000567c
    17c8:	0000167d 	.word	0x0000167d

000017cc <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    17cc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    17d0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    17d4:	f3c0 2087 	ubfx	r0, r0, #10, #8
    17d8:	4770      	bx	lr
	...

000017dc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    17dc:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    17de:	4b60      	ldr	r3, [pc, #384]	; (1960 <_adc_init+0x184>)
    17e0:	4298      	cmp	r0, r3
    17e2:	f000 809c 	beq.w	191e <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    17e6:	4b5f      	ldr	r3, [pc, #380]	; (1964 <_adc_init+0x188>)
    17e8:	4298      	cmp	r0, r3
    17ea:	f000 80a8 	beq.w	193e <_adc_init+0x162>
	uint16_t calib_reg = 0;
    17ee:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    17f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    17f2:	f013 0f01 	tst.w	r3, #1
    17f6:	d11b      	bne.n	1830 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    17f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17fa:	f013 0f03 	tst.w	r3, #3
    17fe:	d1fb      	bne.n	17f8 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1800:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1802:	f013 0f02 	tst.w	r3, #2
    1806:	d00d      	beq.n	1824 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1808:	8803      	ldrh	r3, [r0, #0]
    180a:	b29b      	uxth	r3, r3
    180c:	f023 0302 	bic.w	r3, r3, #2
    1810:	b29b      	uxth	r3, r3
    1812:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1814:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1816:	f013 0f03 	tst.w	r3, #3
    181a:	d1fb      	bne.n	1814 <_adc_init+0x38>
    181c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    181e:	f013 0f02 	tst.w	r3, #2
    1822:	d1fb      	bne.n	181c <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1824:	2301      	movs	r3, #1
    1826:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1828:	6b03      	ldr	r3, [r0, #48]	; 0x30
    182a:	f013 0f03 	tst.w	r3, #3
    182e:	d1fb      	bne.n	1828 <_adc_init+0x4c>
    1830:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1832:	f013 0f01 	tst.w	r3, #1
    1836:	d1fb      	bne.n	1830 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1838:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    183c:	2316      	movs	r3, #22
    183e:	4a4a      	ldr	r2, [pc, #296]	; (1968 <_adc_init+0x18c>)
    1840:	fb03 2301 	mla	r3, r3, r1, r2
    1844:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    1846:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1848:	6b03      	ldr	r3, [r0, #48]	; 0x30
    184a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    184e:	2b00      	cmp	r3, #0
    1850:	d1fa      	bne.n	1848 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1852:	2316      	movs	r3, #22
    1854:	4a44      	ldr	r2, [pc, #272]	; (1968 <_adc_init+0x18c>)
    1856:	fb03 2301 	mla	r3, r3, r1, r2
    185a:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    185c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    185e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1860:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1864:	2b00      	cmp	r3, #0
    1866:	d1fa      	bne.n	185e <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1868:	2316      	movs	r3, #22
    186a:	4a3f      	ldr	r2, [pc, #252]	; (1968 <_adc_init+0x18c>)
    186c:	fb03 2301 	mla	r3, r3, r1, r2
    1870:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1872:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1874:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1876:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1878:	6b03      	ldr	r3, [r0, #48]	; 0x30
    187a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    187e:	2b00      	cmp	r3, #0
    1880:	d1fa      	bne.n	1878 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1882:	2316      	movs	r3, #22
    1884:	4a38      	ldr	r2, [pc, #224]	; (1968 <_adc_init+0x18c>)
    1886:	fb03 2301 	mla	r3, r3, r1, r2
    188a:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    188c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    188e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1890:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1894:	2b00      	cmp	r3, #0
    1896:	d1fa      	bne.n	188e <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1898:	2316      	movs	r3, #22
    189a:	4a33      	ldr	r2, [pc, #204]	; (1968 <_adc_init+0x18c>)
    189c:	fb03 2301 	mla	r3, r3, r1, r2
    18a0:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    18a2:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    18aa:	2b00      	cmp	r3, #0
    18ac:	d1fa      	bne.n	18a4 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    18ae:	2316      	movs	r3, #22
    18b0:	4a2d      	ldr	r2, [pc, #180]	; (1968 <_adc_init+0x18c>)
    18b2:	fb03 2301 	mla	r3, r3, r1, r2
    18b6:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    18b8:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    18c0:	d1fb      	bne.n	18ba <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    18c2:	2316      	movs	r3, #22
    18c4:	4a28      	ldr	r2, [pc, #160]	; (1968 <_adc_init+0x18c>)
    18c6:	fb03 2301 	mla	r3, r3, r1, r2
    18ca:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    18cc:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    18d4:	d1fb      	bne.n	18ce <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    18d6:	2316      	movs	r3, #22
    18d8:	4a23      	ldr	r2, [pc, #140]	; (1968 <_adc_init+0x18c>)
    18da:	fb03 2301 	mla	r3, r3, r1, r2
    18de:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    18e0:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18e4:	f413 7f00 	tst.w	r3, #512	; 0x200
    18e8:	d1fb      	bne.n	18e2 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    18ea:	2316      	movs	r3, #22
    18ec:	4a1e      	ldr	r2, [pc, #120]	; (1968 <_adc_init+0x18c>)
    18ee:	fb03 2301 	mla	r3, r3, r1, r2
    18f2:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    18f4:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    18f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    18f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    18fc:	d1fb      	bne.n	18f6 <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    18fe:	2216      	movs	r2, #22
    1900:	4b19      	ldr	r3, [pc, #100]	; (1968 <_adc_init+0x18c>)
    1902:	fb02 3101 	mla	r1, r2, r1, r3
    1906:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1908:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    190a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    190c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    190e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1910:	f013 0f03 	tst.w	r3, #3
    1914:	d1fb      	bne.n	190e <_adc_init+0x132>

	return ERR_NONE;
}
    1916:	2000      	movs	r0, #0
    1918:	f85d 4b04 	ldr.w	r4, [sp], #4
    191c:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    191e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	095a      	lsrs	r2, r3, #5
    1926:	0212      	lsls	r2, r2, #8
    1928:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    192c:	0a1c      	lsrs	r4, r3, #8
    192e:	0124      	lsls	r4, r4, #4
    1930:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1934:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    1936:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    193a:	431a      	orrs	r2, r3
    193c:	e758      	b.n	17f0 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    193e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	0cda      	lsrs	r2, r3, #19
    1946:	0212      	lsls	r2, r2, #8
    1948:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    194c:	0d9c      	lsrs	r4, r3, #22
    194e:	0124      	lsls	r4, r4, #4
    1950:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1954:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    1956:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    195a:	431a      	orrs	r2, r3
    195c:	e748      	b.n	17f0 <_adc_init+0x14>
    195e:	bf00      	nop
    1960:	43001c00 	.word	0x43001c00
    1964:	43002000 	.word	0x43002000
    1968:	000056a0 	.word	0x000056a0

0000196c <_adc_get_regs>:
{
    196c:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    196e:	4b0b      	ldr	r3, [pc, #44]	; (199c <_adc_get_regs+0x30>)
    1970:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1972:	2300      	movs	r3, #0
    1974:	b13b      	cbz	r3, 1986 <_adc_get_regs+0x1a>
	ASSERT(false);
    1976:	2288      	movs	r2, #136	; 0x88
    1978:	4909      	ldr	r1, [pc, #36]	; (19a0 <_adc_get_regs+0x34>)
    197a:	2000      	movs	r0, #0
    197c:	4b09      	ldr	r3, [pc, #36]	; (19a4 <_adc_get_regs+0x38>)
    197e:	4798      	blx	r3
	return 0;
    1980:	2300      	movs	r3, #0
}
    1982:	4618      	mov	r0, r3
    1984:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    1986:	2216      	movs	r2, #22
    1988:	fb02 f203 	mul.w	r2, r2, r3
    198c:	4906      	ldr	r1, [pc, #24]	; (19a8 <_adc_get_regs+0x3c>)
    198e:	5c8a      	ldrb	r2, [r1, r2]
    1990:	4290      	cmp	r0, r2
    1992:	d0f6      	beq.n	1982 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1994:	3301      	adds	r3, #1
    1996:	b2db      	uxtb	r3, r3
    1998:	e7ec      	b.n	1974 <_adc_get_regs+0x8>
    199a:	bf00      	nop
    199c:	000017cd 	.word	0x000017cd
    19a0:	000056b8 	.word	0x000056b8
    19a4:	0000167d 	.word	0x0000167d
    19a8:	000056a0 	.word	0x000056a0

000019ac <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    19ac:	b538      	push	{r3, r4, r5, lr}
    19ae:	460c      	mov	r4, r1
	ASSERT(device);
    19b0:	4605      	mov	r5, r0
    19b2:	22d9      	movs	r2, #217	; 0xd9
    19b4:	4907      	ldr	r1, [pc, #28]	; (19d4 <_adc_sync_init+0x28>)
    19b6:	3000      	adds	r0, #0
    19b8:	bf18      	it	ne
    19ba:	2001      	movne	r0, #1
    19bc:	4b06      	ldr	r3, [pc, #24]	; (19d8 <_adc_sync_init+0x2c>)
    19be:	4798      	blx	r3

	device->hw = hw;
    19c0:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    19c2:	4620      	mov	r0, r4
    19c4:	4b05      	ldr	r3, [pc, #20]	; (19dc <_adc_sync_init+0x30>)
    19c6:	4798      	blx	r3
    19c8:	4601      	mov	r1, r0
    19ca:	4620      	mov	r0, r4
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_adc_sync_init+0x34>)
    19ce:	4798      	blx	r3
}
    19d0:	bd38      	pop	{r3, r4, r5, pc}
    19d2:	bf00      	nop
    19d4:	000056b8 	.word	0x000056b8
    19d8:	0000167d 	.word	0x0000167d
    19dc:	0000196d 	.word	0x0000196d
    19e0:	000017dd 	.word	0x000017dd

000019e4 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    19e4:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    19e6:	8813      	ldrh	r3, [r2, #0]
    19e8:	b29b      	uxth	r3, r3
    19ea:	f043 0302 	orr.w	r3, r3, #2
    19ee:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    19f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    19f2:	f013 0f03 	tst.w	r3, #3
    19f6:	d1fb      	bne.n	19f0 <_adc_sync_enable_channel+0xc>
}
    19f8:	4770      	bx	lr

000019fa <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    19fa:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    19fc:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    19fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1a02:	2b03      	cmp	r3, #3
    1a04:	d001      	beq.n	1a0a <_adc_sync_get_data_size+0x10>
    1a06:	2002      	movs	r0, #2
}
    1a08:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1a0a:	2001      	movs	r0, #1
    1a0c:	4770      	bx	lr

00001a0e <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1a0e:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1a10:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    1a14:	f000 0001 	and.w	r0, r0, #1
    1a18:	4770      	bx	lr

00001a1a <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1a1a:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1a1c:	7d13      	ldrb	r3, [r2, #20]
    1a1e:	f043 0302 	orr.w	r3, r3, #2
    1a22:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1a24:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d1fa      	bne.n	1a24 <_adc_sync_convert+0xa>
}
    1a2e:	4770      	bx	lr

00001a30 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1a30:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    1a32:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    1a36:	b280      	uxth	r0, r0
    1a38:	4770      	bx	lr
	...

00001a3c <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a3c:	0943      	lsrs	r3, r0, #5
    1a3e:	f000 001f 	and.w	r0, r0, #31
    1a42:	2201      	movs	r2, #1
    1a44:	fa02 f000 	lsl.w	r0, r2, r0
    1a48:	3340      	adds	r3, #64	; 0x40
    1a4a:	4a02      	ldr	r2, [pc, #8]	; (1a54 <_irq_set+0x18>)
    1a4c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1a50:	4770      	bx	lr
    1a52:	bf00      	nop
    1a54:	e000e100 	.word	0xe000e100

00001a58 <_get_cycles_for_us>:
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1a58:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a5c:	fb03 f000 	mul.w	r0, r3, r0
    1a60:	3801      	subs	r0, #1
    1a62:	4b03      	ldr	r3, [pc, #12]	; (1a70 <_get_cycles_for_us+0x18>)
    1a64:	fba3 3000 	umull	r3, r0, r3, r0
    1a68:	08c0      	lsrs	r0, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a6a:	3001      	adds	r0, #1
    1a6c:	4770      	bx	lr
    1a6e:	bf00      	nop
    1a70:	cccccccd 	.word	0xcccccccd

00001a74 <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
	case 8:
		return (ms * (freq / 100000)) * 100;
    1a74:	f44f 7316 	mov.w	r3, #600	; 0x258
    1a78:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1a7c:	2364      	movs	r3, #100	; 0x64
    1a7e:	fb03 f000 	mul.w	r0, r3, r0
    1a82:	4770      	bx	lr

00001a84 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1a84:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1a86:	4a0d      	ldr	r2, [pc, #52]	; (1abc <_init_chip+0x38>)
    1a88:	8813      	ldrh	r3, [r2, #0]
    1a8a:	b29b      	uxth	r3, r3
    1a8c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1a8e:	4b0c      	ldr	r3, [pc, #48]	; (1ac0 <_init_chip+0x3c>)
    1a90:	4798      	blx	r3
	_oscctrl_init_sources();
    1a92:	4b0c      	ldr	r3, [pc, #48]	; (1ac4 <_init_chip+0x40>)
    1a94:	4798      	blx	r3
	_mclk_init();
    1a96:	4b0c      	ldr	r3, [pc, #48]	; (1ac8 <_init_chip+0x44>)
    1a98:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1a9a:	200c      	movs	r0, #12
    1a9c:	4c0b      	ldr	r4, [pc, #44]	; (1acc <_init_chip+0x48>)
    1a9e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1aa0:	4b0b      	ldr	r3, [pc, #44]	; (1ad0 <_init_chip+0x4c>)
    1aa2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1aa4:	f640 70f3 	movw	r0, #4083	; 0xff3
    1aa8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1aaa:	4a0a      	ldr	r2, [pc, #40]	; (1ad4 <_init_chip+0x50>)
    1aac:	6913      	ldr	r3, [r2, #16]
    1aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1ab2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1ab4:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <_init_chip+0x54>)
    1ab6:	4798      	blx	r3
    1ab8:	bd10      	pop	{r4, pc}
    1aba:	bf00      	nop
    1abc:	41004000 	.word	0x41004000
    1ac0:	00002059 	.word	0x00002059
    1ac4:	00002079 	.word	0x00002079
    1ac8:	0000204d 	.word	0x0000204d
    1acc:	00001fd5 	.word	0x00001fd5
    1ad0:	0000207d 	.word	0x0000207d
    1ad4:	40000800 	.word	0x40000800
    1ad8:	00001b45 	.word	0x00001b45

00001adc <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1adc:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1ade:	4a17      	ldr	r2, [pc, #92]	; (1b3c <_dmac_handler+0x60>)
    1ae0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1ae2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1ae6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1aea:	0088      	lsls	r0, r1, #2
    1aec:	4914      	ldr	r1, [pc, #80]	; (1b40 <_dmac_handler+0x64>)
    1aee:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1af0:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    1af2:	f412 7f80 	tst.w	r2, #256	; 0x100
    1af6:	d105      	bne.n	1b04 <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1af8:	4a10      	ldr	r2, [pc, #64]	; (1b3c <_dmac_handler+0x60>)
    1afa:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    1afc:	f412 7f00 	tst.w	r2, #512	; 0x200
    1b00:	d10b      	bne.n	1b1a <_dmac_handler+0x3e>
    1b02:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1b04:	011a      	lsls	r2, r3, #4
    1b06:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b0a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b0e:	2101      	movs	r1, #1
    1b10:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1b14:	6843      	ldr	r3, [r0, #4]
    1b16:	4798      	blx	r3
    1b18:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1b1a:	011a      	lsls	r2, r3, #4
    1b1c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b20:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1b24:	2102      	movs	r1, #2
    1b26:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b2e:	fa03 f201 	lsl.w	r2, r3, r1
    1b32:	4b03      	ldr	r3, [pc, #12]	; (1b40 <_dmac_handler+0x64>)
    1b34:	589b      	ldr	r3, [r3, r2]
    1b36:	4798      	blx	r3
	}
}
    1b38:	e7e3      	b.n	1b02 <_dmac_handler+0x26>
    1b3a:	bf00      	nop
    1b3c:	4100a000 	.word	0x4100a000
    1b40:	20000090 	.word	0x20000090

00001b44 <_dma_init>:
{
    1b44:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1b46:	4a3c      	ldr	r2, [pc, #240]	; (1c38 <_dma_init+0xf4>)
    1b48:	8813      	ldrh	r3, [r2, #0]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	f023 0302 	bic.w	r3, r3, #2
    1b50:	b29b      	uxth	r3, r3
    1b52:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1b54:	8853      	ldrh	r3, [r2, #2]
    1b56:	b29b      	uxth	r3, r3
    1b58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1b5c:	b29b      	uxth	r3, r3
    1b5e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1b60:	8813      	ldrh	r3, [r2, #0]
    1b62:	b29b      	uxth	r3, r3
    1b64:	f043 0301 	orr.w	r3, r3, #1
    1b68:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1b6a:	4b33      	ldr	r3, [pc, #204]	; (1c38 <_dma_init+0xf4>)
    1b6c:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1b6e:	f013 0f01 	tst.w	r3, #1
    1b72:	d1fa      	bne.n	1b6a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1b74:	4a30      	ldr	r2, [pc, #192]	; (1c38 <_dma_init+0xf4>)
    1b76:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1b7a:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1b7c:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1b7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1b82:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1b84:	2300      	movs	r3, #0
    1b86:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1b88:	492c      	ldr	r1, [pc, #176]	; (1c3c <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1b8a:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1b8c:	492c      	ldr	r1, [pc, #176]	; (1c40 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1b8e:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1b90:	e016      	b.n	1bc0 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1b92:	4a2c      	ldr	r2, [pc, #176]	; (1c44 <_dma_init+0x100>)
    1b94:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1b98:	4c27      	ldr	r4, [pc, #156]	; (1c38 <_dma_init+0xf4>)
    1b9a:	1d19      	adds	r1, r3, #4
    1b9c:	0109      	lsls	r1, r1, #4
    1b9e:	1860      	adds	r0, r4, r1
    1ba0:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1ba2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1ba6:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1ba8:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1baa:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1bac:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1bae:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1bb0:	4922      	ldr	r1, [pc, #136]	; (1c3c <_dma_init+0xf8>)
    1bb2:	011a      	lsls	r2, r3, #4
    1bb4:	1888      	adds	r0, r1, r2
    1bb6:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1bb8:	2200      	movs	r2, #0
    1bba:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1bbc:	3301      	adds	r3, #1
    1bbe:	b2db      	uxtb	r3, r3
    1bc0:	2b1f      	cmp	r3, #31
    1bc2:	d9e6      	bls.n	1b92 <_dma_init+0x4e>
    1bc4:	2300      	movs	r3, #0
    1bc6:	e00a      	b.n	1bde <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1bc8:	f103 011f 	add.w	r1, r3, #31
    1bcc:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    1bce:	2a00      	cmp	r2, #0
    1bd0:	da10      	bge.n	1bf4 <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bd2:	2a00      	cmp	r2, #0
    1bd4:	da1c      	bge.n	1c10 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    1bd6:	2a00      	cmp	r2, #0
    1bd8:	da24      	bge.n	1c24 <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    1bda:	3301      	adds	r3, #1
    1bdc:	b2db      	uxtb	r3, r3
    1bde:	2b04      	cmp	r3, #4
    1be0:	d9f2      	bls.n	1bc8 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1be2:	4a15      	ldr	r2, [pc, #84]	; (1c38 <_dma_init+0xf4>)
    1be4:	8813      	ldrh	r3, [r2, #0]
    1be6:	b29b      	uxth	r3, r3
    1be8:	f043 0302 	orr.w	r3, r3, #2
    1bec:	8013      	strh	r3, [r2, #0]
}
    1bee:	2000      	movs	r0, #0
    1bf0:	bc30      	pop	{r4, r5}
    1bf2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf4:	0950      	lsrs	r0, r2, #5
    1bf6:	f001 051f 	and.w	r5, r1, #31
    1bfa:	2401      	movs	r4, #1
    1bfc:	40ac      	lsls	r4, r5
    1bfe:	3020      	adds	r0, #32
    1c00:	4d11      	ldr	r5, [pc, #68]	; (1c48 <_dma_init+0x104>)
    1c02:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c0a:	f3bf 8f6f 	isb	sy
    1c0e:	e7e0      	b.n	1bd2 <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c10:	0950      	lsrs	r0, r2, #5
    1c12:	f001 051f 	and.w	r5, r1, #31
    1c16:	2401      	movs	r4, #1
    1c18:	40ac      	lsls	r4, r5
    1c1a:	3060      	adds	r0, #96	; 0x60
    1c1c:	4d0a      	ldr	r5, [pc, #40]	; (1c48 <_dma_init+0x104>)
    1c1e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1c22:	e7d8      	b.n	1bd6 <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c24:	0952      	lsrs	r2, r2, #5
    1c26:	f001 011f 	and.w	r1, r1, #31
    1c2a:	2001      	movs	r0, #1
    1c2c:	fa00 f101 	lsl.w	r1, r0, r1
    1c30:	4805      	ldr	r0, [pc, #20]	; (1c48 <_dma_init+0x104>)
    1c32:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1c36:	e7d0      	b.n	1bda <_dma_init+0x96>
    1c38:	4100a000 	.word	0x4100a000
    1c3c:	20000770 	.word	0x20000770
    1c40:	20000970 	.word	0x20000970
    1c44:	000056d0 	.word	0x000056d0
    1c48:	e000e100 	.word	0xe000e100

00001c4c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1c4c:	4b02      	ldr	r3, [pc, #8]	; (1c58 <_dma_set_destination_address+0xc>)
    1c4e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c52:	6081      	str	r1, [r0, #8]
}
    1c54:	2000      	movs	r0, #0
    1c56:	4770      	bx	lr
    1c58:	20000770 	.word	0x20000770

00001c5c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1c5c:	4b02      	ldr	r3, [pc, #8]	; (1c68 <_dma_set_source_address+0xc>)
    1c5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c62:	6041      	str	r1, [r0, #4]
}
    1c64:	2000      	movs	r0, #0
    1c66:	4770      	bx	lr
    1c68:	20000770 	.word	0x20000770

00001c6c <_dma_set_BTCTRL>:
	_descriptor_section[channel].BTCTRL.reg = src;
    1c6c:	b289      	uxth	r1, r1
    1c6e:	0100      	lsls	r0, r0, #4
    1c70:	4b01      	ldr	r3, [pc, #4]	; (1c78 <_dma_set_BTCTRL+0xc>)
    1c72:	5219      	strh	r1, [r3, r0]
}
    1c74:	2000      	movs	r0, #0
    1c76:	4770      	bx	lr
    1c78:	20000770 	.word	0x20000770

00001c7c <_dma_set_DESCADDR>:
	_descriptor_section[channel].DESCADDR.reg = src;
    1c7c:	4b02      	ldr	r3, [pc, #8]	; (1c88 <_dma_set_DESCADDR+0xc>)
    1c7e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c82:	60c1      	str	r1, [r0, #12]
}
    1c84:	2000      	movs	r0, #0
    1c86:	4770      	bx	lr
    1c88:	20000770 	.word	0x20000770

00001c8c <_dma_get_WRB_data>:
	return _write_back_section[channel].BTCNT.reg;
    1c8c:	4b02      	ldr	r3, [pc, #8]	; (1c98 <_dma_get_WRB_data+0xc>)
    1c8e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1c92:	8840      	ldrh	r0, [r0, #2]
}
    1c94:	b280      	uxth	r0, r0
    1c96:	4770      	bx	lr
    1c98:	20000970 	.word	0x20000970

00001c9c <_dma_set_data_amount>:
{
    1c9c:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    1c9e:	4c14      	ldr	r4, [pc, #80]	; (1cf0 <_dma_set_data_amount+0x54>)
    1ca0:	0102      	lsls	r2, r0, #4
    1ca2:	18a3      	adds	r3, r4, r2
    1ca4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1ca6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    1ca8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1cac:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    1cae:	f412 6f00 	tst.w	r2, #2048	; 0x800
    1cb2:	d006      	beq.n	1cc2 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1cb4:	fa01 f403 	lsl.w	r4, r1, r3
    1cb8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    1cba:	4a0d      	ldr	r2, [pc, #52]	; (1cf0 <_dma_set_data_amount+0x54>)
    1cbc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1cc0:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1cc2:	4c0b      	ldr	r4, [pc, #44]	; (1cf0 <_dma_set_data_amount+0x54>)
    1cc4:	0102      	lsls	r2, r0, #4
    1cc6:	18a5      	adds	r5, r4, r2
    1cc8:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1cca:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1ccc:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1cd0:	d005      	beq.n	1cde <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1cd2:	fa01 f303 	lsl.w	r3, r1, r3
    1cd6:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1cd8:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1cdc:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1cde:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1ce0:	4b03      	ldr	r3, [pc, #12]	; (1cf0 <_dma_set_data_amount+0x54>)
    1ce2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1ce6:	8041      	strh	r1, [r0, #2]
}
    1ce8:	2000      	movs	r0, #0
    1cea:	bc30      	pop	{r4, r5}
    1cec:	4770      	bx	lr
    1cee:	bf00      	nop
    1cf0:	20000770 	.word	0x20000770

00001cf4 <_dma_enable_transaction>:
{
    1cf4:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1cf6:	4c0c      	ldr	r4, [pc, #48]	; (1d28 <_dma_enable_transaction+0x34>)
    1cf8:	0102      	lsls	r2, r0, #4
    1cfa:	5aa3      	ldrh	r3, [r4, r2]
    1cfc:	b29b      	uxth	r3, r3
    1cfe:	f043 0301 	orr.w	r3, r3, #1
    1d02:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1d04:	4c09      	ldr	r4, [pc, #36]	; (1d2c <_dma_enable_transaction+0x38>)
    1d06:	1d03      	adds	r3, r0, #4
    1d08:	011b      	lsls	r3, r3, #4
    1d0a:	58e2      	ldr	r2, [r4, r3]
    1d0c:	f042 0202 	orr.w	r2, r2, #2
    1d10:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1d12:	b129      	cbz	r1, 1d20 <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1d14:	2301      	movs	r3, #1
    1d16:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1d1a:	6922      	ldr	r2, [r4, #16]
    1d1c:	4310      	orrs	r0, r2
    1d1e:	6120      	str	r0, [r4, #16]
}
    1d20:	2000      	movs	r0, #0
    1d22:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d26:	4770      	bx	lr
    1d28:	20000770 	.word	0x20000770
    1d2c:	4100a000 	.word	0x4100a000

00001d30 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1d30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1d34:	008a      	lsls	r2, r1, #2
    1d36:	4b02      	ldr	r3, [pc, #8]	; (1d40 <_dma_get_channel_resource+0x10>)
    1d38:	4413      	add	r3, r2
    1d3a:	6003      	str	r3, [r0, #0]
}
    1d3c:	2000      	movs	r0, #0
    1d3e:	4770      	bx	lr
    1d40:	20000090 	.word	0x20000090

00001d44 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1d44:	b508      	push	{r3, lr}
	_dmac_handler();
    1d46:	4b01      	ldr	r3, [pc, #4]	; (1d4c <DMAC_0_Handler+0x8>)
    1d48:	4798      	blx	r3
    1d4a:	bd08      	pop	{r3, pc}
    1d4c:	00001add 	.word	0x00001add

00001d50 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1d50:	b508      	push	{r3, lr}
	_dmac_handler();
    1d52:	4b01      	ldr	r3, [pc, #4]	; (1d58 <DMAC_1_Handler+0x8>)
    1d54:	4798      	blx	r3
    1d56:	bd08      	pop	{r3, pc}
    1d58:	00001add 	.word	0x00001add

00001d5c <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1d5c:	b508      	push	{r3, lr}
	_dmac_handler();
    1d5e:	4b01      	ldr	r3, [pc, #4]	; (1d64 <DMAC_2_Handler+0x8>)
    1d60:	4798      	blx	r3
    1d62:	bd08      	pop	{r3, pc}
    1d64:	00001add 	.word	0x00001add

00001d68 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    1d68:	b508      	push	{r3, lr}
	_dmac_handler();
    1d6a:	4b01      	ldr	r3, [pc, #4]	; (1d70 <DMAC_3_Handler+0x8>)
    1d6c:	4798      	blx	r3
    1d6e:	bd08      	pop	{r3, pc}
    1d70:	00001add 	.word	0x00001add

00001d74 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1d74:	b508      	push	{r3, lr}
	_dmac_handler();
    1d76:	4b01      	ldr	r3, [pc, #4]	; (1d7c <DMAC_4_Handler+0x8>)
    1d78:	4798      	blx	r3
    1d7a:	bd08      	pop	{r3, pc}
    1d7c:	00001add 	.word	0x00001add

00001d80 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1d80:	b570      	push	{r4, r5, r6, lr}
    1d82:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1d84:	4b2a      	ldr	r3, [pc, #168]	; (1e30 <_ext_irq_handler+0xb0>)
    1d86:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    1d88:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    1d8a:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    1d8c:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    1d8e:	4b29      	ldr	r3, [pc, #164]	; (1e34 <_ext_irq_handler+0xb4>)
    1d90:	6818      	ldr	r0, [r3, #0]
    1d92:	22f4      	movs	r2, #244	; 0xf4
    1d94:	4928      	ldr	r1, [pc, #160]	; (1e38 <_ext_irq_handler+0xb8>)
    1d96:	3000      	adds	r0, #0
    1d98:	bf18      	it	ne
    1d9a:	2001      	movne	r0, #1
    1d9c:	4b27      	ldr	r3, [pc, #156]	; (1e3c <_ext_irq_handler+0xbc>)
    1d9e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    1da0:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    1da4:	e035      	b.n	1e12 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    1da6:	4b26      	ldr	r3, [pc, #152]	; (1e40 <_ext_irq_handler+0xc0>)
    1da8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    1dac:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    1dae:	f1b5 3fff 	cmp.w	r5, #4294967295
    1db2:	d003      	beq.n	1dbc <_ext_irq_handler+0x3c>
				callback(pin);
    1db4:	4b1f      	ldr	r3, [pc, #124]	; (1e34 <_ext_irq_handler+0xb4>)
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	4628      	mov	r0, r5
    1dba:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1dbc:	2301      	movs	r3, #1
    1dbe:	40a3      	lsls	r3, r4
    1dc0:	9c01      	ldr	r4, [sp, #4]
    1dc2:	ea24 0403 	bic.w	r4, r4, r3
    1dc6:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1dc8:	9b01      	ldr	r3, [sp, #4]
    1dca:	fa93 f4a3 	rbit	r4, r3
    1dce:	fab4 f484 	clz	r4, r4
    1dd2:	b90b      	cbnz	r3, 1dd8 <_ext_irq_handler+0x58>
    1dd4:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1dd8:	f1b4 3fff 	cmp.w	r4, #4294967295
    1ddc:	d014      	beq.n	1e08 <_ext_irq_handler+0x88>
    1dde:	2004      	movs	r0, #4
    1de0:	2100      	movs	r1, #0
    1de2:	e001      	b.n	1de8 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1de4:	3b01      	subs	r3, #1
    1de6:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1de8:	4281      	cmp	r1, r0
    1dea:	d8e0      	bhi.n	1dae <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1dec:	1843      	adds	r3, r0, r1
    1dee:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1df2:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1df4:	4a12      	ldr	r2, [pc, #72]	; (1e40 <_ext_irq_handler+0xc0>)
    1df6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1dfa:	42a2      	cmp	r2, r4
    1dfc:	d0d3      	beq.n	1da6 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1dfe:	42a2      	cmp	r2, r4
    1e00:	daf0      	bge.n	1de4 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1e02:	3301      	adds	r3, #1
    1e04:	b2d9      	uxtb	r1, r3
    1e06:	e7ef      	b.n	1de8 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1e08:	4b09      	ldr	r3, [pc, #36]	; (1e30 <_ext_irq_handler+0xb0>)
    1e0a:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1e0c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1e0e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1e10:	615a      	str	r2, [r3, #20]
	while (flags) {
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	b14b      	cbz	r3, 1e2a <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1e16:	9b01      	ldr	r3, [sp, #4]
    1e18:	fa93 f4a3 	rbit	r4, r3
    1e1c:	fab4 f484 	clz	r4, r4
    1e20:	2b00      	cmp	r3, #0
    1e22:	d1d9      	bne.n	1dd8 <_ext_irq_handler+0x58>
    1e24:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1e28:	e7d6      	b.n	1dd8 <_ext_irq_handler+0x58>
	}
}
    1e2a:	b002      	add	sp, #8
    1e2c:	bd70      	pop	{r4, r5, r6, pc}
    1e2e:	bf00      	nop
    1e30:	40002800 	.word	0x40002800
    1e34:	20000210 	.word	0x20000210
    1e38:	000057f0 	.word	0x000057f0
    1e3c:	0000167d 	.word	0x0000167d
    1e40:	000057d0 	.word	0x000057d0

00001e44 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1e44:	4b3d      	ldr	r3, [pc, #244]	; (1f3c <_ext_irq_init+0xf8>)
    1e46:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1e48:	f013 0f01 	tst.w	r3, #1
    1e4c:	d120      	bne.n	1e90 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e4e:	4b3b      	ldr	r3, [pc, #236]	; (1f3c <_ext_irq_init+0xf8>)
    1e50:	685b      	ldr	r3, [r3, #4]
    1e52:	f013 0f03 	tst.w	r3, #3
    1e56:	d1fa      	bne.n	1e4e <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1e58:	4b38      	ldr	r3, [pc, #224]	; (1f3c <_ext_irq_init+0xf8>)
    1e5a:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1e5c:	f013 0f02 	tst.w	r3, #2
    1e60:	d00e      	beq.n	1e80 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1e62:	4a36      	ldr	r2, [pc, #216]	; (1f3c <_ext_irq_init+0xf8>)
    1e64:	7813      	ldrb	r3, [r2, #0]
    1e66:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1e6a:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e6c:	4b33      	ldr	r3, [pc, #204]	; (1f3c <_ext_irq_init+0xf8>)
    1e6e:	685b      	ldr	r3, [r3, #4]
    1e70:	f013 0f03 	tst.w	r3, #3
    1e74:	d1fa      	bne.n	1e6c <_ext_irq_init+0x28>
    1e76:	4b31      	ldr	r3, [pc, #196]	; (1f3c <_ext_irq_init+0xf8>)
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	f013 0f02 	tst.w	r3, #2
    1e7e:	d1fa      	bne.n	1e76 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1e80:	2201      	movs	r2, #1
    1e82:	4b2e      	ldr	r3, [pc, #184]	; (1f3c <_ext_irq_init+0xf8>)
    1e84:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1e86:	4b2d      	ldr	r3, [pc, #180]	; (1f3c <_ext_irq_init+0xf8>)
    1e88:	685b      	ldr	r3, [r3, #4]
    1e8a:	f013 0f03 	tst.w	r3, #3
    1e8e:	d1fa      	bne.n	1e86 <_ext_irq_init+0x42>
    1e90:	4b2a      	ldr	r3, [pc, #168]	; (1f3c <_ext_irq_init+0xf8>)
    1e92:	685b      	ldr	r3, [r3, #4]
    1e94:	f013 0f01 	tst.w	r3, #1
    1e98:	d1fa      	bne.n	1e90 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1e9a:	4a28      	ldr	r2, [pc, #160]	; (1f3c <_ext_irq_init+0xf8>)
    1e9c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1e9e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1ea2:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ea4:	4b25      	ldr	r3, [pc, #148]	; (1f3c <_ext_irq_init+0xf8>)
    1ea6:	685b      	ldr	r3, [r3, #4]
    1ea8:	f013 0f03 	tst.w	r3, #3
    1eac:	d1fa      	bne.n	1ea4 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1eae:	4b23      	ldr	r3, [pc, #140]	; (1f3c <_ext_irq_init+0xf8>)
    1eb0:	2200      	movs	r2, #0
    1eb2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1eb4:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1eb6:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1eb8:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1eba:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1ebc:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1ec0:	61da      	str	r2, [r3, #28]
    1ec2:	4a1f      	ldr	r2, [pc, #124]	; (1f40 <_ext_irq_init+0xfc>)
    1ec4:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1ec6:	781a      	ldrb	r2, [r3, #0]
    1ec8:	f042 0202 	orr.w	r2, r2, #2
    1ecc:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ece:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <_ext_irq_init+0xf8>)
    1ed0:	685b      	ldr	r3, [r3, #4]
    1ed2:	f013 0f03 	tst.w	r3, #3
    1ed6:	d1fa      	bne.n	1ece <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ed8:	4b1a      	ldr	r3, [pc, #104]	; (1f44 <_ext_irq_init+0x100>)
    1eda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ee6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eee:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1efc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f04:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f12:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f1a:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f28:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f30:	601a      	str	r2, [r3, #0]
	callback = cb;
    1f32:	4b05      	ldr	r3, [pc, #20]	; (1f48 <_ext_irq_init+0x104>)
    1f34:	6018      	str	r0, [r3, #0]
}
    1f36:	2000      	movs	r0, #0
    1f38:	4770      	bx	lr
    1f3a:	bf00      	nop
    1f3c:	40002800 	.word	0x40002800
    1f40:	0a0000b0 	.word	0x0a0000b0
    1f44:	e000e100 	.word	0xe000e100
    1f48:	20000210 	.word	0x20000210

00001f4c <_ext_irq_enable>:
{
    1f4c:	b410      	push	{r4}
	uint8_t i      = 0;
    1f4e:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1f50:	2b03      	cmp	r3, #3
    1f52:	d80d      	bhi.n	1f70 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1f54:	461c      	mov	r4, r3
    1f56:	4a11      	ldr	r2, [pc, #68]	; (1f9c <_ext_irq_enable+0x50>)
    1f58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1f5c:	6852      	ldr	r2, [r2, #4]
    1f5e:	4282      	cmp	r2, r0
    1f60:	d002      	beq.n	1f68 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1f62:	3301      	adds	r3, #1
    1f64:	b2db      	uxtb	r3, r3
    1f66:	e7f3      	b.n	1f50 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1f68:	4b0c      	ldr	r3, [pc, #48]	; (1f9c <_ext_irq_enable+0x50>)
    1f6a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1f6e:	e000      	b.n	1f72 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1f70:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1f72:	2aff      	cmp	r2, #255	; 0xff
    1f74:	d00f      	beq.n	1f96 <_ext_irq_enable+0x4a>
	if (enable) {
    1f76:	b941      	cbnz	r1, 1f8a <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1f78:	2301      	movs	r3, #1
    1f7a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1f7c:	4a08      	ldr	r2, [pc, #32]	; (1fa0 <_ext_irq_enable+0x54>)
    1f7e:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1f80:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1f82:	2000      	movs	r0, #0
}
    1f84:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f88:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1f8a:	2301      	movs	r3, #1
    1f8c:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    1f8e:	4a04      	ldr	r2, [pc, #16]	; (1fa0 <_ext_irq_enable+0x54>)
    1f90:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    1f92:	2000      	movs	r0, #0
    1f94:	e7f6      	b.n	1f84 <_ext_irq_enable+0x38>
		return -1;
    1f96:	f04f 30ff 	mov.w	r0, #4294967295
    1f9a:	e7f3      	b.n	1f84 <_ext_irq_enable+0x38>
    1f9c:	000057d0 	.word	0x000057d0
    1fa0:	40002800 	.word	0x40002800

00001fa4 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1fa4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fa6:	4b01      	ldr	r3, [pc, #4]	; (1fac <EIC_6_Handler+0x8>)
    1fa8:	4798      	blx	r3
    1faa:	bd08      	pop	{r3, pc}
    1fac:	00001d81 	.word	0x00001d81

00001fb0 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1fb0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fb2:	4b01      	ldr	r3, [pc, #4]	; (1fb8 <EIC_7_Handler+0x8>)
    1fb4:	4798      	blx	r3
    1fb6:	bd08      	pop	{r3, pc}
    1fb8:	00001d81 	.word	0x00001d81

00001fbc <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1fbc:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fbe:	4b01      	ldr	r3, [pc, #4]	; (1fc4 <EIC_9_Handler+0x8>)
    1fc0:	4798      	blx	r3
    1fc2:	bd08      	pop	{r3, pc}
    1fc4:	00001d81 	.word	0x00001d81

00001fc8 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1fc8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1fca:	4b01      	ldr	r3, [pc, #4]	; (1fd0 <EIC_14_Handler+0x8>)
    1fcc:	4798      	blx	r3
    1fce:	bd08      	pop	{r3, pc}
    1fd0:	00001d81 	.word	0x00001d81

00001fd4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1fd4:	f010 0f01 	tst.w	r0, #1
    1fd8:	d008      	beq.n	1fec <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1fda:	4a17      	ldr	r2, [pc, #92]	; (2038 <_gclk_init_generators_by_fref+0x64>)
    1fdc:	4b17      	ldr	r3, [pc, #92]	; (203c <_gclk_init_generators_by_fref+0x68>)
    1fde:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1fe0:	4b16      	ldr	r3, [pc, #88]	; (203c <_gclk_init_generators_by_fref+0x68>)
    1fe2:	685a      	ldr	r2, [r3, #4]
    1fe4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1fe8:	421a      	tst	r2, r3
    1fea:	d1f9      	bne.n	1fe0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1fec:	f010 0f02 	tst.w	r0, #2
    1ff0:	d008      	beq.n	2004 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ff2:	4a13      	ldr	r2, [pc, #76]	; (2040 <_gclk_init_generators_by_fref+0x6c>)
    1ff4:	4b11      	ldr	r3, [pc, #68]	; (203c <_gclk_init_generators_by_fref+0x68>)
    1ff6:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ff8:	4b10      	ldr	r3, [pc, #64]	; (203c <_gclk_init_generators_by_fref+0x68>)
    1ffa:	685a      	ldr	r2, [r3, #4]
    1ffc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2000:	421a      	tst	r2, r3
    2002:	d1f9      	bne.n	1ff8 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2004:	f010 0f04 	tst.w	r0, #4
    2008:	d008      	beq.n	201c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    200a:	4a0e      	ldr	r2, [pc, #56]	; (2044 <_gclk_init_generators_by_fref+0x70>)
    200c:	4b0b      	ldr	r3, [pc, #44]	; (203c <_gclk_init_generators_by_fref+0x68>)
    200e:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2010:	4b0a      	ldr	r3, [pc, #40]	; (203c <_gclk_init_generators_by_fref+0x68>)
    2012:	685a      	ldr	r2, [r3, #4]
    2014:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2018:	421a      	tst	r2, r3
    201a:	d1f9      	bne.n	2010 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    201c:	f010 0f08 	tst.w	r0, #8
    2020:	d008      	beq.n	2034 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2022:	4a09      	ldr	r2, [pc, #36]	; (2048 <_gclk_init_generators_by_fref+0x74>)
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <_gclk_init_generators_by_fref+0x68>)
    2026:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2028:	4b04      	ldr	r3, [pc, #16]	; (203c <_gclk_init_generators_by_fref+0x68>)
    202a:	685a      	ldr	r2, [r3, #4]
    202c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2030:	421a      	tst	r2, r3
    2032:	d1f9      	bne.n	2028 <_gclk_init_generators_by_fref+0x54>
    2034:	4770      	bx	lr
    2036:	bf00      	nop
    2038:	00020107 	.word	0x00020107
    203c:	40001c00 	.word	0x40001c00
    2040:	00060b07 	.word	0x00060b07
    2044:	00010105 	.word	0x00010105
    2048:	00100106 	.word	0x00100106

0000204c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    204c:	2201      	movs	r2, #1
    204e:	4b01      	ldr	r3, [pc, #4]	; (2054 <_mclk_init+0x8>)
    2050:	715a      	strb	r2, [r3, #5]
    2052:	4770      	bx	lr
    2054:	40000800 	.word	0x40000800

00002058 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <_osc32kctrl_init_sources+0x1c>)
    205a:	f242 228e 	movw	r2, #8846	; 0x228e
    205e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2060:	2200      	movs	r2, #0
    2062:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2064:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2066:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2068:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    206c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    206e:	2201      	movs	r2, #1
    2070:	741a      	strb	r2, [r3, #16]
    2072:	4770      	bx	lr
    2074:	40001400 	.word	0x40001400

00002078 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2078:	4770      	bx	lr
	...

0000207c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    207c:	4a49      	ldr	r2, [pc, #292]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    207e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2080:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2084:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2088:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    208a:	4b46      	ldr	r3, [pc, #280]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    208c:	685a      	ldr	r2, [r3, #4]
    208e:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2092:	421a      	tst	r2, r3
    2094:	d1f9      	bne.n	208a <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2096:	4b43      	ldr	r3, [pc, #268]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    2098:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    209a:	f013 0f04 	tst.w	r3, #4
    209e:	d1fa      	bne.n	2096 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    20a0:	4b41      	ldr	r3, [pc, #260]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20a2:	2200      	movs	r2, #0
    20a4:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    20a6:	2142      	movs	r1, #66	; 0x42
    20a8:	4a3e      	ldr	r2, [pc, #248]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    20aa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    20ae:	4a3f      	ldr	r2, [pc, #252]	; (21ac <_oscctrl_init_referenced_generators+0x130>)
    20b0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20b2:	4b3d      	ldr	r3, [pc, #244]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    20b8:	f013 0f10 	tst.w	r3, #16
    20bc:	d1f9      	bne.n	20b2 <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    20be:	2200      	movs	r2, #0
    20c0:	4b39      	ldr	r3, [pc, #228]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20c2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20c6:	4b38      	ldr	r3, [pc, #224]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    20cc:	f013 0f04 	tst.w	r3, #4
    20d0:	d1f9      	bne.n	20c6 <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    20d2:	2202      	movs	r2, #2
    20d4:	4b34      	ldr	r3, [pc, #208]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20d6:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20d8:	4b33      	ldr	r3, [pc, #204]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    20de:	f013 0f02 	tst.w	r3, #2
    20e2:	d1f9      	bne.n	20d8 <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    20e4:	4b30      	ldr	r3, [pc, #192]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    20e8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20ea:	4b2f      	ldr	r3, [pc, #188]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    20f0:	f013 0f08 	tst.w	r3, #8
    20f4:	d1f9      	bne.n	20ea <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    20f6:	2281      	movs	r2, #129	; 0x81
    20f8:	4b2b      	ldr	r3, [pc, #172]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    20fa:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    20fe:	4b2a      	ldr	r3, [pc, #168]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2100:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2104:	f013 0f04 	tst.w	r3, #4
    2108:	d1f9      	bne.n	20fe <_oscctrl_init_referenced_generators+0x82>
    210a:	2243      	movs	r2, #67	; 0x43
    210c:	4b25      	ldr	r3, [pc, #148]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    210e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2112:	2227      	movs	r2, #39	; 0x27
    2114:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    2118:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    211a:	4b23      	ldr	r3, [pc, #140]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    211e:	f013 0f06 	tst.w	r3, #6
    2122:	d1fa      	bne.n	211a <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2124:	4b20      	ldr	r3, [pc, #128]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2126:	2200      	movs	r2, #0
    2128:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    212a:	2202      	movs	r2, #2
    212c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2130:	4b1d      	ldr	r3, [pc, #116]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2134:	f013 0f02 	tst.w	r3, #2
    2138:	d1fa      	bne.n	2130 <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    213a:	4b1b      	ldr	r3, [pc, #108]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    213c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2140:	f013 0f01 	tst.w	r3, #1
    2144:	d027      	beq.n	2196 <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2146:	4b18      	ldr	r3, [pc, #96]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2148:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    214a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    214e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2152:	d1f8      	bne.n	2146 <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2154:	4b14      	ldr	r3, [pc, #80]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    2158:	f013 0f01 	tst.w	r3, #1
    215c:	d104      	bne.n	2168 <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    215e:	4b12      	ldr	r3, [pc, #72]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2162:	f013 0f02 	tst.w	r3, #2
    2166:	d0f5      	beq.n	2154 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2168:	4b0e      	ldr	r3, [pc, #56]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    216a:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    216c:	2b00      	cmp	r3, #0
    216e:	d1fb      	bne.n	2168 <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2170:	4a0c      	ldr	r2, [pc, #48]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    2172:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2174:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2178:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    217c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    2180:	685a      	ldr	r2, [r3, #4]
    2182:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2186:	421a      	tst	r2, r3
    2188:	d1f9      	bne.n	217e <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    218a:	4b06      	ldr	r3, [pc, #24]	; (21a4 <_oscctrl_init_referenced_generators+0x128>)
    218c:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    218e:	f013 0f04 	tst.w	r3, #4
    2192:	d1fa      	bne.n	218a <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    2194:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <_oscctrl_init_referenced_generators+0x12c>)
    2198:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    219a:	f413 7f80 	tst.w	r3, #256	; 0x100
    219e:	d0fa      	beq.n	2196 <_oscctrl_init_referenced_generators+0x11a>
    21a0:	e7d8      	b.n	2154 <_oscctrl_init_referenced_generators+0xd8>
    21a2:	bf00      	nop
    21a4:	40001c00 	.word	0x40001c00
    21a8:	40001000 	.word	0x40001000
    21ac:	7c7f05b9 	.word	0x7c7f05b9

000021b0 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    21b0:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    21b2:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    21b4:	6803      	ldr	r3, [r0, #0]
    21b6:	2100      	movs	r1, #0
    21b8:	4798      	blx	r3
    21ba:	bd08      	pop	{r3, pc}

000021bc <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    21bc:	b538      	push	{r3, r4, r5, lr}
    21be:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    21c0:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    21c2:	4b07      	ldr	r3, [pc, #28]	; (21e0 <_camera_async_init+0x24>)
    21c4:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    21c6:	4b07      	ldr	r3, [pc, #28]	; (21e4 <_camera_async_init+0x28>)
    21c8:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    21ca:	4d07      	ldr	r5, [pc, #28]	; (21e8 <_camera_async_init+0x2c>)
    21cc:	2100      	movs	r1, #0
    21ce:	4628      	mov	r0, r5
    21d0:	4b06      	ldr	r3, [pc, #24]	; (21ec <_camera_async_init+0x30>)
    21d2:	4798      	blx	r3
	resource->back                 = device;
    21d4:	682b      	ldr	r3, [r5, #0]
    21d6:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    21d8:	4a05      	ldr	r2, [pc, #20]	; (21f0 <_camera_async_init+0x34>)
    21da:	601a      	str	r2, [r3, #0]
    21dc:	bd38      	pop	{r3, r4, r5, pc}
    21de:	bf00      	nop
    21e0:	c0000020 	.word	0xc0000020
    21e4:	20000214 	.word	0x20000214
    21e8:	20000b70 	.word	0x20000b70
    21ec:	00001d31 	.word	0x00001d31
    21f0:	000021b1 	.word	0x000021b1

000021f4 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    21f4:	b500      	push	{lr}
    21f6:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    21f8:	4b08      	ldr	r3, [pc, #32]	; (221c <PCC_Handler+0x28>)
    21fa:	6818      	ldr	r0, [r3, #0]
    21fc:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    21fe:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    2200:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    2202:	2201      	movs	r2, #1
    2204:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    2206:	9b01      	ldr	r3, [sp, #4]
    2208:	f013 0f01 	tst.w	r3, #1
    220c:	d003      	beq.n	2216 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    220e:	6803      	ldr	r3, [r0, #0]
    2210:	b10b      	cbz	r3, 2216 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    2212:	2100      	movs	r1, #0
    2214:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    2216:	b003      	add	sp, #12
    2218:	f85d fb04 	ldr.w	pc, [sp], #4
    221c:	20000214 	.word	0x20000214

00002220 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2220:	b500      	push	{lr}
    2222:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2224:	4b0d      	ldr	r3, [pc, #52]	; (225c <RAMECC_Handler+0x3c>)
    2226:	789b      	ldrb	r3, [r3, #2]
    2228:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    222a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    222c:	9b01      	ldr	r3, [sp, #4]
    222e:	f013 0f02 	tst.w	r3, #2
    2232:	d006      	beq.n	2242 <RAMECC_Handler+0x22>
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <RAMECC_Handler+0x40>)
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	b11b      	cbz	r3, 2242 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    223a:	4a08      	ldr	r2, [pc, #32]	; (225c <RAMECC_Handler+0x3c>)
    223c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    223e:	4798      	blx	r3
    2240:	e009      	b.n	2256 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2242:	9b01      	ldr	r3, [sp, #4]
    2244:	f013 0f01 	tst.w	r3, #1
    2248:	d005      	beq.n	2256 <RAMECC_Handler+0x36>
    224a:	4b05      	ldr	r3, [pc, #20]	; (2260 <RAMECC_Handler+0x40>)
    224c:	685b      	ldr	r3, [r3, #4]
    224e:	b113      	cbz	r3, 2256 <RAMECC_Handler+0x36>
    2250:	4a02      	ldr	r2, [pc, #8]	; (225c <RAMECC_Handler+0x3c>)
    2252:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2254:	4798      	blx	r3
	} else {
		return;
	}
}
    2256:	b003      	add	sp, #12
    2258:	f85d fb04 	ldr.w	pc, [sp], #4
    225c:	41020000 	.word	0x41020000
    2260:	20000b74 	.word	0x20000b74

00002264 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    2264:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    2266:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    2268:	f013 0f04 	tst.w	r3, #4
    226c:	d009      	beq.n	2282 <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    226e:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    2270:	f014 0f03 	tst.w	r4, #3
    2274:	d1fb      	bne.n	226e <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    2276:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2278:	b2a4      	uxth	r4, r4
    227a:	f024 0404 	bic.w	r4, r4, #4
    227e:	b2a4      	uxth	r4, r4
    2280:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    2282:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2284:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    2288:	2c00      	cmp	r4, #0
    228a:	d135      	bne.n	22f8 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    228c:	4b22      	ldr	r3, [pc, #136]	; (2318 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    228e:	2a00      	cmp	r2, #0
    2290:	d134      	bne.n	22fc <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    2292:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2294:	b292      	uxth	r2, r2
    2296:	f022 0220 	bic.w	r2, r2, #32
    229a:	b292      	uxth	r2, r2
    229c:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    229e:	fbb3 f1f1 	udiv	r1, r3, r1
    22a2:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    22a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    22a8:	f013 0f04 	tst.w	r3, #4
    22ac:	d001      	beq.n	22b2 <_mci_set_speed+0x4e>
    22ae:	b901      	cbnz	r1, 22b2 <_mci_set_speed+0x4e>
		div = 1;
    22b0:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    22b2:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    22b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    22b6:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    22b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    22bc:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    22be:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    22c0:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    22c4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22c6:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    22c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    22cc:	0189      	lsls	r1, r1, #6
    22ce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    22d2:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    22d4:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    22d6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22d8:	b29b      	uxth	r3, r3
    22da:	f043 0301 	orr.w	r3, r3, #1
    22de:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    22e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    22e2:	f013 0f02 	tst.w	r3, #2
    22e6:	d0fb      	beq.n	22e0 <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    22e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    22ea:	b29b      	uxth	r3, r3
    22ec:	f043 0304 	orr.w	r3, r3, #4
    22f0:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    22f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    22f6:	4770      	bx	lr
		clkbase = clkbase / 2;
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <_mci_set_speed+0xb8>)
    22fa:	e7c8      	b.n	228e <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    22fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    22fe:	b292      	uxth	r2, r2
    2300:	f042 0220 	orr.w	r2, r2, #32
    2304:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    2306:	fb04 3303 	mla	r3, r4, r3, r3
    230a:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    230e:	2900      	cmp	r1, #0
    2310:	d0c8      	beq.n	22a4 <_mci_set_speed+0x40>
			div = div - 1;
    2312:	3901      	subs	r1, #1
    2314:	e7c6      	b.n	22a4 <_mci_set_speed+0x40>
    2316:	bf00      	nop
    2318:	0393a000 	.word	0x0393a000
    231c:	01c9d000 	.word	0x01c9d000

00002320 <_mci_reset>:
{
    2320:	b510      	push	{r4, lr}
	ASSERT(hw);
    2322:	4604      	mov	r4, r0
    2324:	2234      	movs	r2, #52	; 0x34
    2326:	4906      	ldr	r1, [pc, #24]	; (2340 <_mci_reset+0x20>)
    2328:	3000      	adds	r0, #0
    232a:	bf18      	it	ne
    232c:	2001      	movne	r0, #1
    232e:	4b05      	ldr	r3, [pc, #20]	; (2344 <_mci_reset+0x24>)
    2330:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    2332:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2336:	f043 0302 	orr.w	r3, r3, #2
    233a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    233e:	bd10      	pop	{r4, pc}
    2340:	00005808 	.word	0x00005808
    2344:	0000167d 	.word	0x0000167d

00002348 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    2348:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    234a:	4604      	mov	r4, r0
    234c:	227f      	movs	r2, #127	; 0x7f
    234e:	490b      	ldr	r1, [pc, #44]	; (237c <_mci_wait_busy+0x34>)
    2350:	3000      	adds	r0, #0
    2352:	bf18      	it	ne
    2354:	2001      	movne	r0, #1
    2356:	4b0a      	ldr	r3, [pc, #40]	; (2380 <_mci_wait_busy+0x38>)
    2358:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    235a:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    235e:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    2360:	1e59      	subs	r1, r3, #1
    2362:	b12b      	cbz	r3, 2370 <_mci_wait_busy+0x28>
    2364:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    2366:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    236a:	d0f8      	beq.n	235e <_mci_wait_busy+0x16>
	return true;
    236c:	2001      	movs	r0, #1
}
    236e:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    2370:	4620      	mov	r0, r4
    2372:	4b04      	ldr	r3, [pc, #16]	; (2384 <_mci_wait_busy+0x3c>)
    2374:	4798      	blx	r3
			return false;
    2376:	2000      	movs	r0, #0
    2378:	bd10      	pop	{r4, pc}
    237a:	bf00      	nop
    237c:	00005808 	.word	0x00005808
    2380:	0000167d 	.word	0x0000167d
    2384:	00002321 	.word	0x00002321

00002388 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    2388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    238a:	460f      	mov	r7, r1
    238c:	4615      	mov	r5, r2
    238e:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    2390:	4604      	mov	r4, r0
    2392:	2299      	movs	r2, #153	; 0x99
    2394:	4934      	ldr	r1, [pc, #208]	; (2468 <_mci_send_cmd_execute+0xe0>)
    2396:	3000      	adds	r0, #0
    2398:	bf18      	it	ne
    239a:	2001      	movne	r0, #1
    239c:	4b33      	ldr	r3, [pc, #204]	; (246c <_mci_send_cmd_execute+0xe4>)
    239e:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    23a0:	0229      	lsls	r1, r5, #8
    23a2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    23a6:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    23a8:	f415 7f80 	tst.w	r5, #256	; 0x100
    23ac:	d004      	beq.n	23b8 <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    23ae:	f415 6f00 	tst.w	r5, #2048	; 0x800
    23b2:	d00e      	beq.n	23d2 <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    23b4:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    23b8:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    23bc:	d012      	beq.n	23e4 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    23be:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    23c2:	f043 0310 	orr.w	r3, r3, #16
    23c6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    23ca:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    23cc:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    23ce:	81e3      	strh	r3, [r4, #14]
    23d0:	e017      	b.n	2402 <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    23d2:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    23d6:	d002      	beq.n	23de <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    23d8:	f041 0103 	orr.w	r1, r1, #3
    23dc:	e7ec      	b.n	23b8 <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    23de:	f041 0102 	orr.w	r1, r1, #2
    23e2:	e7e9      	b.n	23b8 <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    23e4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    23e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    23ec:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    23f0:	e7eb      	b.n	23ca <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    23f2:	f240 227f 	movw	r2, #639	; 0x27f
    23f6:	4213      	tst	r3, r2
    23f8:	d118      	bne.n	242c <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    23fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    23fc:	f013 0f01 	tst.w	r3, #1
    2400:	d120      	bne.n	2444 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    2402:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2404:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    2406:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    240a:	d0f2      	beq.n	23f2 <_mci_send_cmd_execute+0x6a>
			if (sr
    240c:	f240 225d 	movw	r2, #605	; 0x25d
    2410:	4213      	tst	r3, r2
    2412:	d0f2      	beq.n	23fa <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    2414:	4620      	mov	r0, r4
    2416:	4b16      	ldr	r3, [pc, #88]	; (2470 <_mci_send_cmd_execute+0xe8>)
    2418:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    241a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    241c:	b29b      	uxth	r3, r3
    241e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2422:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2426:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2428:	2000      	movs	r0, #0
    242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    242c:	4620      	mov	r0, r4
    242e:	4b10      	ldr	r3, [pc, #64]	; (2470 <_mci_send_cmd_execute+0xe8>)
    2430:	4798      	blx	r3
    2432:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2434:	b29b      	uxth	r3, r3
    2436:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    243a:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    243e:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    2440:	2000      	movs	r0, #0
    2442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2444:	f011 0f20 	tst.w	r1, #32
    2448:	d104      	bne.n	2454 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    244a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    244c:	b29b      	uxth	r3, r3
    244e:	f043 0301 	orr.w	r3, r3, #1
    2452:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2454:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2458:	d101      	bne.n	245e <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    245a:	2001      	movs	r0, #1
}
    245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    245e:	4620      	mov	r0, r4
    2460:	4b04      	ldr	r3, [pc, #16]	; (2474 <_mci_send_cmd_execute+0xec>)
    2462:	4798      	blx	r3
    2464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2466:	bf00      	nop
    2468:	00005808 	.word	0x00005808
    246c:	0000167d 	.word	0x0000167d
    2470:	00002321 	.word	0x00002321
    2474:	00002349 	.word	0x00002349

00002478 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2478:	b538      	push	{r3, r4, r5, lr}
    247a:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    247c:	4605      	mov	r5, r0
    247e:	b348      	cbz	r0, 24d4 <_mci_sync_init+0x5c>
    2480:	b331      	cbz	r1, 24d0 <_mci_sync_init+0x58>
    2482:	2001      	movs	r0, #1
    2484:	22d8      	movs	r2, #216	; 0xd8
    2486:	4914      	ldr	r1, [pc, #80]	; (24d8 <_mci_sync_init+0x60>)
    2488:	4b14      	ldr	r3, [pc, #80]	; (24dc <_mci_sync_init+0x64>)
    248a:	4798      	blx	r3

	mci_dev->hw = hw;
    248c:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    248e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    2492:	f043 0301 	orr.w	r3, r3, #1
    2496:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    249a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    249e:	f013 0f01 	tst.w	r3, #1
    24a2:	d1fa      	bne.n	249a <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    24a4:	230e      	movs	r3, #14
    24a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    24aa:	230f      	movs	r3, #15
    24ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    24b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    24b2:	b29b      	uxth	r3, r3
    24b4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    24b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    24bc:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    24be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    24c0:	b29b      	uxth	r3, r3
    24c2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    24c6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    24ca:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    24cc:	2000      	movs	r0, #0
    24ce:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    24d0:	2000      	movs	r0, #0
    24d2:	e7d7      	b.n	2484 <_mci_sync_init+0xc>
    24d4:	2000      	movs	r0, #0
    24d6:	e7d5      	b.n	2484 <_mci_sync_init+0xc>
    24d8:	00005808 	.word	0x00005808
    24dc:	0000167d 	.word	0x0000167d

000024e0 <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    24e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24e2:	4616      	mov	r6, r2
    24e4:	461d      	mov	r5, r3
    24e6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    24ea:	4604      	mov	r4, r0
    24ec:	b1e0      	cbz	r0, 2528 <_mci_sync_select_device+0x48>
    24ee:	6803      	ldr	r3, [r0, #0]
    24f0:	b1c3      	cbz	r3, 2524 <_mci_sync_select_device+0x44>
    24f2:	2001      	movs	r0, #1
    24f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    24f8:	491b      	ldr	r1, [pc, #108]	; (2568 <_mci_sync_select_device+0x88>)
    24fa:	4b1c      	ldr	r3, [pc, #112]	; (256c <_mci_sync_select_device+0x8c>)
    24fc:	4798      	blx	r3
	hw = mci_dev->hw;
    24fe:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    2500:	b1a7      	cbz	r7, 252c <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    2502:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2506:	f043 0304 	orr.w	r3, r3, #4
    250a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    250e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    2510:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2514:	d011      	beq.n	253a <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    2516:	2d01      	cmp	r5, #1
    2518:	d015      	beq.n	2546 <_mci_sync_select_device+0x66>
    251a:	2d04      	cmp	r5, #4
    251c:	d01b      	beq.n	2556 <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    251e:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    2522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2524:	2000      	movs	r0, #0
    2526:	e7e5      	b.n	24f4 <_mci_sync_select_device+0x14>
    2528:	2000      	movs	r0, #0
    252a:	e7e3      	b.n	24f4 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    252c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2530:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    2534:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2538:	e7e9      	b.n	250e <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    253a:	2200      	movs	r2, #0
    253c:	4631      	mov	r1, r6
    253e:	4620      	mov	r0, r4
    2540:	4b0b      	ldr	r3, [pc, #44]	; (2570 <_mci_sync_select_device+0x90>)
    2542:	4798      	blx	r3
    2544:	e7e7      	b.n	2516 <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2546:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    254a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    254e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    2552:	2000      	movs	r0, #0
    2554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2556:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    255a:	f043 0302 	orr.w	r3, r3, #2
    255e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    2562:	2000      	movs	r0, #0
    2564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2566:	bf00      	nop
    2568:	00005808 	.word	0x00005808
    256c:	0000167d 	.word	0x0000167d
    2570:	00002265 	.word	0x00002265

00002574 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2574:	2000      	movs	r0, #0
    2576:	4770      	bx	lr

00002578 <_mci_sync_get_bus_width>:
 */
uint8_t _mci_sync_get_bus_width(struct _mci_sync_device *const mci_dev, uint8_t slot)
{
	(void)(mci_dev);

	switch (slot) {
    2578:	b909      	cbnz	r1, 257e <_mci_sync_get_bus_width+0x6>
	case 0:
		return HSMCI_SLOT_0_SIZE;
    257a:	2004      	movs	r0, #4
    257c:	4770      	bx	lr

	default:
		/* Slot number wrong */
		return 0;
    257e:	2000      	movs	r0, #0
	}
}
    2580:	4770      	bx	lr

00002582 <_mci_sync_is_high_speed_capable>:
/**
 *  \brief Get the high speed capability of the device.
 */
bool _mci_sync_is_high_speed_capable(struct _mci_sync_device *const mci_dev)
{
	return hri_sdhc_get_CA0R_HSSUP_bit(mci_dev->hw);
    2582:	6803      	ldr	r3, [r0, #0]
	return (((Sdhc *)hw)->CA0R.reg & SDHC_CA0R_HSSUP) >> SDHC_CA0R_HSSUP_Pos;
    2584:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2586:	f3c0 5040 	ubfx	r0, r0, #21, #1
    258a:	4770      	bx	lr

0000258c <_mci_sync_send_clock>:
/**
 *  \brief Send 74 clock cycles on the line.
 *   Note: It is required after card plug and before card install.
 */
void _mci_sync_send_clock(struct _mci_sync_device *const mci_dev)
{
    258c:	b500      	push	{lr}
    258e:	b083      	sub	sp, #12
	ASSERT(mci_dev);
    2590:	f240 1249 	movw	r2, #329	; 0x149
    2594:	4909      	ldr	r1, [pc, #36]	; (25bc <_mci_sync_send_clock+0x30>)
    2596:	3000      	adds	r0, #0
    2598:	bf18      	it	ne
    259a:	2001      	movne	r0, #1
    259c:	4b08      	ldr	r3, [pc, #32]	; (25c0 <_mci_sync_send_clock+0x34>)
    259e:	4798      	blx	r3

	volatile uint32_t i;
	for (i = 0; i < 5000; i++)
    25a0:	2300      	movs	r3, #0
    25a2:	9301      	str	r3, [sp, #4]
    25a4:	e002      	b.n	25ac <_mci_sync_send_clock+0x20>
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	3301      	adds	r3, #1
    25aa:	9301      	str	r3, [sp, #4]
    25ac:	9a01      	ldr	r2, [sp, #4]
    25ae:	f241 3387 	movw	r3, #4999	; 0x1387
    25b2:	429a      	cmp	r2, r3
    25b4:	d9f7      	bls.n	25a6 <_mci_sync_send_clock+0x1a>
		;
}
    25b6:	b003      	add	sp, #12
    25b8:	f85d fb04 	ldr.w	pc, [sp], #4
    25bc:	00005808 	.word	0x00005808
    25c0:	0000167d 	.word	0x0000167d

000025c4 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    25c4:	b570      	push	{r4, r5, r6, lr}
    25c6:	460d      	mov	r5, r1
    25c8:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    25ca:	4604      	mov	r4, r0
    25cc:	b180      	cbz	r0, 25f0 <_mci_sync_send_cmd+0x2c>
    25ce:	6803      	ldr	r3, [r0, #0]
    25d0:	b163      	cbz	r3, 25ec <_mci_sync_send_cmd+0x28>
    25d2:	2001      	movs	r0, #1
    25d4:	f44f 72ab 	mov.w	r2, #342	; 0x156
    25d8:	490d      	ldr	r1, [pc, #52]	; (2610 <_mci_sync_send_cmd+0x4c>)
    25da:	4b0e      	ldr	r3, [pc, #56]	; (2614 <_mci_sync_send_cmd+0x50>)
    25dc:	4798      	blx	r3
	hw = mci_dev->hw;
    25de:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    25e0:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    25e2:	f013 0f01 	tst.w	r3, #1
    25e6:	d005      	beq.n	25f4 <_mci_sync_send_cmd+0x30>
		return false;
    25e8:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    25ea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    25ec:	2000      	movs	r0, #0
    25ee:	e7f1      	b.n	25d4 <_mci_sync_send_cmd+0x10>
    25f0:	2000      	movs	r0, #0
    25f2:	e7ef      	b.n	25d4 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    25f4:	8983      	ldrh	r3, [r0, #12]
    25f6:	b29b      	uxth	r3, r3
    25f8:	f023 0301 	bic.w	r3, r3, #1
    25fc:	b29b      	uxth	r3, r3
    25fe:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2600:	2100      	movs	r1, #0
    2602:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2604:	4633      	mov	r3, r6
    2606:	462a      	mov	r2, r5
    2608:	4c03      	ldr	r4, [pc, #12]	; (2618 <_mci_sync_send_cmd+0x54>)
    260a:	47a0      	blx	r4
    260c:	bd70      	pop	{r4, r5, r6, pc}
    260e:	bf00      	nop
    2610:	00005808 	.word	0x00005808
    2614:	0000167d 	.word	0x0000167d
    2618:	00002389 	.word	0x00002389

0000261c <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    261c:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    261e:	4604      	mov	r4, r0
    2620:	b160      	cbz	r0, 263c <_mci_sync_get_response+0x20>
    2622:	6803      	ldr	r3, [r0, #0]
    2624:	b143      	cbz	r3, 2638 <_mci_sync_get_response+0x1c>
    2626:	2001      	movs	r0, #1
    2628:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    262c:	4904      	ldr	r1, [pc, #16]	; (2640 <_mci_sync_get_response+0x24>)
    262e:	4b05      	ldr	r3, [pc, #20]	; (2644 <_mci_sync_get_response+0x28>)
    2630:	4798      	blx	r3
	hw = mci_dev->hw;
    2632:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    2634:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    2636:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2638:	2000      	movs	r0, #0
    263a:	e7f5      	b.n	2628 <_mci_sync_get_response+0xc>
    263c:	2000      	movs	r0, #0
    263e:	e7f3      	b.n	2628 <_mci_sync_get_response+0xc>
    2640:	00005808 	.word	0x00005808
    2644:	0000167d 	.word	0x0000167d

00002648 <_mci_sync_get_response_128>:

/**
 *  \brief Get 128 bits response of the last command.
 */
void _mci_sync_get_response_128(struct _mci_sync_device *const mci_dev, uint8_t *response)
{
    2648:	b538      	push	{r3, r4, r5, lr}
    264a:	460c      	mov	r4, r1
	uint32_t response_32;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    264c:	4605      	mov	r5, r0
    264e:	b160      	cbz	r0, 266a <_mci_sync_get_response_128+0x22>
    2650:	6803      	ldr	r3, [r0, #0]
    2652:	b143      	cbz	r3, 2666 <_mci_sync_get_response_128+0x1e>
    2654:	2001      	movs	r0, #1
    2656:	f240 1277 	movw	r2, #375	; 0x177
    265a:	490f      	ldr	r1, [pc, #60]	; (2698 <_mci_sync_get_response_128+0x50>)
    265c:	4b0f      	ldr	r3, [pc, #60]	; (269c <_mci_sync_get_response_128+0x54>)
    265e:	4798      	blx	r3
	hw = mci_dev->hw;
    2660:	6828      	ldr	r0, [r5, #0]

	for (int8_t i = 3; i >= 0; i--) {
    2662:	2103      	movs	r1, #3
    2664:	e00b      	b.n	267e <_mci_sync_get_response_128+0x36>
	ASSERT(mci_dev && mci_dev->hw);
    2666:	2000      	movs	r0, #0
    2668:	e7f5      	b.n	2656 <_mci_sync_get_response_128+0xe>
    266a:	2000      	movs	r0, #0
    266c:	e7f3      	b.n	2656 <_mci_sync_get_response_128+0xe>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
		if (i != 3) {
			*response = (response_32 >> 24) & 0xFF;
			response++;
		}
		*response = (response_32 >> 16) & 0xFF;
    266e:	0c11      	lsrs	r1, r2, #16
    2670:	7021      	strb	r1, [r4, #0]
		response++;
		*response = (response_32 >> 8) & 0xFF;
    2672:	0a11      	lsrs	r1, r2, #8
    2674:	7061      	strb	r1, [r4, #1]
		response++;
		*response = (response_32 >> 0) & 0xFF;
    2676:	70a2      	strb	r2, [r4, #2]
		response++;
    2678:	3403      	adds	r4, #3
	for (int8_t i = 3; i >= 0; i--) {
    267a:	3b01      	subs	r3, #1
    267c:	b259      	sxtb	r1, r3
    267e:	2900      	cmp	r1, #0
    2680:	db09      	blt.n	2696 <_mci_sync_get_response_128+0x4e>
		response_32 = hri_sdhc_read_RR_reg(hw, i);
    2682:	b2cb      	uxtb	r3, r1
    2684:	1d1a      	adds	r2, r3, #4
    2686:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if (i != 3) {
    268a:	2903      	cmp	r1, #3
    268c:	d0ef      	beq.n	266e <_mci_sync_get_response_128+0x26>
			*response = (response_32 >> 24) & 0xFF;
    268e:	0e11      	lsrs	r1, r2, #24
    2690:	f804 1b01 	strb.w	r1, [r4], #1
    2694:	e7eb      	b.n	266e <_mci_sync_get_response_128+0x26>
	}
}
    2696:	bd38      	pop	{r3, r4, r5, pc}
    2698:	00005808 	.word	0x00005808
    269c:	0000167d 	.word	0x0000167d

000026a0 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    26a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26a4:	460d      	mov	r5, r1
    26a6:	4690      	mov	r8, r2
    26a8:	461f      	mov	r7, r3
    26aa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    26ae:	4604      	mov	r4, r0
    26b0:	2800      	cmp	r0, #0
    26b2:	d031      	beq.n	2718 <_mci_sync_adtc_start+0x78>
    26b4:	6803      	ldr	r3, [r0, #0]
    26b6:	b36b      	cbz	r3, 2714 <_mci_sync_adtc_start+0x74>
    26b8:	2001      	movs	r0, #1
    26ba:	f240 1293 	movw	r2, #403	; 0x193
    26be:	4921      	ldr	r1, [pc, #132]	; (2744 <_mci_sync_adtc_start+0xa4>)
    26c0:	4b21      	ldr	r3, [pc, #132]	; (2748 <_mci_sync_adtc_start+0xa8>)
    26c2:	4798      	blx	r3
	hw = mci_dev->hw;
    26c4:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    26c6:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    26c8:	f013 0f01 	tst.w	r3, #1
    26cc:	d131      	bne.n	2732 <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    26ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
    26d0:	f013 0f02 	tst.w	r3, #2
    26d4:	d130      	bne.n	2738 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    26d6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    26da:	d01f      	beq.n	271c <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    26dc:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    26de:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    26e2:	d104      	bne.n	26ee <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    26e4:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    26e8:	d01a      	beq.n	2720 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    26ea:	f043 0322 	orr.w	r3, r3, #34	; 0x22
		return false;
	}
	
	// NOTE: maybe auto CMD12 needs to be set to 1 in the TMR reg. It looks like the MCU is already generating an auto 12 command
	// but not sure how as this bit doesn't seem to be set in TMR. DAharoni
	hri_sdhc_write_TMR_reg(hw, tmr);
    26ee:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    26f0:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    26f2:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    26f6:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    26f8:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    26fa:	2200      	movs	r2, #0
    26fc:	2300      	movs	r3, #0
    26fe:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    2702:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    2704:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    2706:	4643      	mov	r3, r8
    2708:	462a      	mov	r2, r5
    270a:	2120      	movs	r1, #32
    270c:	4c0f      	ldr	r4, [pc, #60]	; (274c <_mci_sync_adtc_start+0xac>)
    270e:	47a0      	blx	r4
    2710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2714:	2000      	movs	r0, #0
    2716:	e7d0      	b.n	26ba <_mci_sync_adtc_start+0x1a>
    2718:	2000      	movs	r0, #0
    271a:	e7ce      	b.n	26ba <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    271c:	2310      	movs	r3, #16
    271e:	e7de      	b.n	26de <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2720:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    2724:	d1e3      	bne.n	26ee <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    2726:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    272a:	d008      	beq.n	273e <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    272c:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2730:	e7dd      	b.n	26ee <_mci_sync_adtc_start+0x4e>
		return false;
    2732:	2000      	movs	r0, #0
    2734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2738:	2000      	movs	r0, #0
    273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    273e:	2000      	movs	r0, #0
}
    2740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2744:	00005808 	.word	0x00005808
    2748:	0000167d 	.word	0x0000167d
    274c:	00002389 	.word	0x00002389

00002750 <_mci_sync_read_word>:

/**
 *  \brief Read a word on the line.
 */
bool _mci_sync_read_word(struct _mci_sync_device *const mci_dev, uint32_t *value)
{
    2750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2754:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2756:	4605      	mov	r5, r0
    2758:	2800      	cmp	r0, #0
    275a:	d05d      	beq.n	2818 <_mci_sync_read_word+0xc8>
    275c:	6803      	ldr	r3, [r0, #0]
    275e:	2b00      	cmp	r3, #0
    2760:	d058      	beq.n	2814 <_mci_sync_read_word+0xc4>
    2762:	2001      	movs	r0, #1
    2764:	f240 12d3 	movw	r2, #467	; 0x1d3
    2768:	4936      	ldr	r1, [pc, #216]	; (2844 <_mci_sync_read_word+0xf4>)
    276a:	4b37      	ldr	r3, [pc, #220]	; (2848 <_mci_sync_read_word+0xf8>)
    276c:	4798      	blx	r3
	hw = mci_dev->hw;
    276e:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    2770:	8a2a      	ldrh	r2, [r5, #16]
    2772:	f8b5 8012 	ldrh.w	r8, [r5, #18]
    2776:	fb08 f802 	mul.w	r8, r8, r2
    277a:	ea4f 79e8 	mov.w	r9, r8, asr #31
    277e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2782:	ebb8 0800 	subs.w	r8, r8, r0
    2786:	eb69 0901 	sbc.w	r9, r9, r1
    278a:	f1b9 0f00 	cmp.w	r9, #0
    278e:	bf08      	it	eq
    2790:	f1b8 0f04 	cmpeq.w	r8, #4
    2794:	d242      	bcs.n	281c <_mci_sync_read_word+0xcc>
    2796:	f002 0603 	and.w	r6, r2, #3
	             ? (mci_dev->mci_sync_block_size % 4)
	             : 4;

	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    279a:	b292      	uxth	r2, r2
    279c:	2300      	movs	r3, #0
    279e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2850 <_mci_sync_read_word+0x100>
    27a2:	47c0      	blx	r8
    27a4:	4313      	orrs	r3, r2
    27a6:	d10d      	bne.n	27c4 <_mci_sync_read_word+0x74>
	return ((Sdhc *)hw)->EISTR.reg;
    27a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    27aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
    27ae:	2b00      	cmp	r3, #0
    27b0:	d136      	bne.n	2820 <_mci_sync_read_word+0xd0>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    27b2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BRDRDY_bit(hw));
    27b4:	f013 0f20 	tst.w	r3, #32
    27b8:	d0f6      	beq.n	27a8 <_mci_sync_read_word+0x58>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BRDRDY;
    27ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    27bc:	b29b      	uxth	r3, r3
    27be:	f043 0320 	orr.w	r3, r3, #32
    27c2:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_BRDRDY_bit(hw);
	}

	/* Read data */
	if (nbytes == 4) {
    27c4:	2e04      	cmp	r6, #4
    27c6:	d031      	beq.n	282c <_mci_sync_read_word+0xdc>
	return ((Sdhc *)hw)->BDPR.reg;
    27c8:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
	} else {
		sr = hri_sdhc_read_BDPR_reg(hw);
		switch (nbytes) {
    27ca:	1e72      	subs	r2, r6, #1
    27cc:	2a02      	cmp	r2, #2
    27ce:	d801      	bhi.n	27d4 <_mci_sync_read_word+0x84>
		case 3:
			value[0] = sr & 0xFFFFFF;
		case 2:
			value[0] = sr & 0xFFFF;
		case 1:
			value[0] = sr & 0xFF;
    27d0:	b2db      	uxtb	r3, r3
    27d2:	603b      	str	r3, [r7, #0]
			break;
		}
	}
	mci_dev->mci_sync_trans_pos += nbytes;
    27d4:	b2f6      	uxtb	r6, r6
    27d6:	2700      	movs	r7, #0
    27d8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    27dc:	18b6      	adds	r6, r6, r2
    27de:	415f      	adcs	r7, r3
    27e0:	e9c5 6702 	strd	r6, r7, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    27e4:	8a2a      	ldrh	r2, [r5, #16]
    27e6:	8a68      	ldrh	r0, [r5, #18]
    27e8:	fba2 2300 	umull	r2, r3, r2, r0
    27ec:	429f      	cmp	r7, r3
    27ee:	bf08      	it	eq
    27f0:	4296      	cmpeq	r6, r2
    27f2:	d324      	bcc.n	283e <_mci_sync_read_word+0xee>
	return ((Sdhc *)hw)->EISTR.reg;
    27f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    27f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    27fa:	b9d3      	cbnz	r3, 2832 <_mci_sync_read_word+0xe2>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    27fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    27fe:	f013 0f02 	tst.w	r3, #2
    2802:	d0f7      	beq.n	27f4 <_mci_sync_read_word+0xa4>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    2804:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2806:	b29b      	uxth	r3, r3
    2808:	f043 0302 	orr.w	r3, r3, #2
    280c:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    280e:	2001      	movs	r0, #1
    2810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2814:	2000      	movs	r0, #0
    2816:	e7a5      	b.n	2764 <_mci_sync_read_word+0x14>
    2818:	2000      	movs	r0, #0
    281a:	e7a3      	b.n	2764 <_mci_sync_read_word+0x14>
	nbytes = (mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block - mci_dev->mci_sync_trans_pos < 4)
    281c:	2604      	movs	r6, #4
    281e:	e7bc      	b.n	279a <_mci_sync_read_word+0x4a>
				_mci_reset(hw);
    2820:	4620      	mov	r0, r4
    2822:	4b0a      	ldr	r3, [pc, #40]	; (284c <_mci_sync_read_word+0xfc>)
    2824:	4798      	blx	r3
				return false;
    2826:	2000      	movs	r0, #0
    2828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return ((Sdhc *)hw)->BDPR.reg;
    282c:	6a23      	ldr	r3, [r4, #32]
		*value = hri_sdhc_read_BDPR_reg(hw);
    282e:	603b      	str	r3, [r7, #0]
    2830:	e7d0      	b.n	27d4 <_mci_sync_read_word+0x84>
			_mci_reset(hw);
    2832:	4620      	mov	r0, r4
    2834:	4b05      	ldr	r3, [pc, #20]	; (284c <_mci_sync_read_word+0xfc>)
    2836:	4798      	blx	r3
			return false;
    2838:	2000      	movs	r0, #0
    283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    283e:	2001      	movs	r0, #1
}
    2840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2844:	00005808 	.word	0x00005808
    2848:	0000167d 	.word	0x0000167d
    284c:	00002321 	.word	0x00002321
    2850:	0000524d 	.word	0x0000524d

00002854 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2856:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    2858:	4605      	mov	r5, r0
    285a:	2800      	cmp	r0, #0
    285c:	d03f      	beq.n	28de <_mci_sync_write_word+0x8a>
    285e:	6803      	ldr	r3, [r0, #0]
    2860:	2b00      	cmp	r3, #0
    2862:	d03a      	beq.n	28da <_mci_sync_write_word+0x86>
    2864:	2001      	movs	r0, #1
    2866:	f240 2212 	movw	r2, #530	; 0x212
    286a:	4924      	ldr	r1, [pc, #144]	; (28fc <_mci_sync_write_word+0xa8>)
    286c:	4b24      	ldr	r3, [pc, #144]	; (2900 <_mci_sync_write_word+0xac>)
    286e:	4798      	blx	r3
	hw = mci_dev->hw;
    2870:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2872:	8a2a      	ldrh	r2, [r5, #16]
    2874:	2300      	movs	r3, #0
    2876:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    287a:	4e22      	ldr	r6, [pc, #136]	; (2904 <_mci_sync_write_word+0xb0>)
    287c:	47b0      	blx	r6
    287e:	4313      	orrs	r3, r2
    2880:	d10c      	bne.n	289c <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2882:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2884:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2888:	bb5b      	cbnz	r3, 28e2 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    288a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    288c:	f013 0f10 	tst.w	r3, #16
    2890:	d0f7      	beq.n	2882 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    2892:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2894:	b29b      	uxth	r3, r3
    2896:	f043 0310 	orr.w	r3, r3, #16
    289a:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    289c:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    289e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    28a2:	3204      	adds	r2, #4
    28a4:	f143 0300 	adc.w	r3, r3, #0
    28a8:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    28ac:	8a28      	ldrh	r0, [r5, #16]
    28ae:	8a6e      	ldrh	r6, [r5, #18]
    28b0:	fba0 0106 	umull	r0, r1, r0, r6
    28b4:	428b      	cmp	r3, r1
    28b6:	bf08      	it	eq
    28b8:	4282      	cmpeq	r2, r0
    28ba:	d31c      	bcc.n	28f6 <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    28bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    28be:	f003 0370 	and.w	r3, r3, #112	; 0x70
    28c2:	b99b      	cbnz	r3, 28ec <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    28c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    28c6:	f013 0f02 	tst.w	r3, #2
    28ca:	d0f7      	beq.n	28bc <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    28cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    28ce:	b29b      	uxth	r3, r3
    28d0:	f043 0302 	orr.w	r3, r3, #2
    28d4:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    28d6:	2001      	movs	r0, #1
    28d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    28da:	2000      	movs	r0, #0
    28dc:	e7c3      	b.n	2866 <_mci_sync_write_word+0x12>
    28de:	2000      	movs	r0, #0
    28e0:	e7c1      	b.n	2866 <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    28e2:	4620      	mov	r0, r4
    28e4:	4b08      	ldr	r3, [pc, #32]	; (2908 <_mci_sync_write_word+0xb4>)
    28e6:	4798      	blx	r3
				return false;
    28e8:	2000      	movs	r0, #0
    28ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    28ec:	4620      	mov	r0, r4
    28ee:	4b06      	ldr	r3, [pc, #24]	; (2908 <_mci_sync_write_word+0xb4>)
    28f0:	4798      	blx	r3
			return false;
    28f2:	2000      	movs	r0, #0
    28f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    28f6:	2001      	movs	r0, #1
}
    28f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28fa:	bf00      	nop
    28fc:	00005808 	.word	0x00005808
    2900:	0000167d 	.word	0x0000167d
    2904:	0000524d 	.word	0x0000524d
    2908:	00002321 	.word	0x00002321

0000290c <_mci_sync_start_read_blocks>:
/**
 *  \brief Start a read blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_read_blocks(struct _mci_sync_device *const mci_dev, void *dst, uint16_t nb_block)
{
    290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2910:	460e      	mov	r6, r1
    2912:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)dst;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2914:	4607      	mov	r7, r0
    2916:	b1f0      	cbz	r0, 2956 <_mci_sync_start_read_blocks+0x4a>
    2918:	6803      	ldr	r3, [r0, #0]
    291a:	b1d3      	cbz	r3, 2952 <_mci_sync_start_read_blocks+0x46>
    291c:	2001      	movs	r0, #1
    291e:	4d18      	ldr	r5, [pc, #96]	; (2980 <_mci_sync_start_read_blocks+0x74>)
    2920:	f240 2241 	movw	r2, #577	; 0x241
    2924:	4629      	mov	r1, r5
    2926:	4c17      	ldr	r4, [pc, #92]	; (2984 <_mci_sync_start_read_blocks+0x78>)
    2928:	47a0      	blx	r4
	ASSERT(nb_block);
    292a:	f240 2242 	movw	r2, #578	; 0x242
    292e:	4629      	mov	r1, r5
    2930:	f118 0000 	adds.w	r0, r8, #0
    2934:	bf18      	it	ne
    2936:	2001      	movne	r0, #1
    2938:	47a0      	blx	r4
	ASSERT(dst);
    293a:	f240 2243 	movw	r2, #579	; 0x243
    293e:	4629      	mov	r1, r5
    2940:	1c30      	adds	r0, r6, #0
    2942:	bf18      	it	ne
    2944:	2001      	movne	r0, #1
    2946:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    2948:	8a3d      	ldrh	r5, [r7, #16]
    294a:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    294e:	2404      	movs	r4, #4

	while (nb_data) {
    2950:	e005      	b.n	295e <_mci_sync_start_read_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2952:	2000      	movs	r0, #0
    2954:	e7e3      	b.n	291e <_mci_sync_start_read_blocks+0x12>
    2956:	2000      	movs	r0, #0
    2958:	e7e1      	b.n	291e <_mci_sync_start_read_blocks+0x12>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    295a:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    295c:	4426      	add	r6, r4
	while (nb_data) {
    295e:	b165      	cbz	r5, 297a <_mci_sync_start_read_blocks+0x6e>
		_mci_sync_read_word(mci_dev, (uint32_t *)ptr);
    2960:	4631      	mov	r1, r6
    2962:	4638      	mov	r0, r7
    2964:	4b08      	ldr	r3, [pc, #32]	; (2988 <_mci_sync_start_read_blocks+0x7c>)
    2966:	4798      	blx	r3
		if (nb_data < nbytes) {
    2968:	42a5      	cmp	r5, r4
    296a:	d2f6      	bcs.n	295a <_mci_sync_start_read_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    296c:	8a3b      	ldrh	r3, [r7, #16]
    296e:	fb93 f2f4 	sdiv	r2, r3, r4
    2972:	fb04 3412 	mls	r4, r4, r2, r3
    2976:	b2e4      	uxtb	r4, r4
    2978:	e7ef      	b.n	295a <_mci_sync_start_read_blocks+0x4e>
	}

	return true;
}
    297a:	2001      	movs	r0, #1
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	00005808 	.word	0x00005808
    2984:	0000167d 	.word	0x0000167d
    2988:	00002751 	.word	0x00002751

0000298c <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2990:	460e      	mov	r6, r1
    2992:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2994:	4607      	mov	r7, r0
    2996:	b1f0      	cbz	r0, 29d6 <_mci_sync_start_write_blocks+0x4a>
    2998:	6803      	ldr	r3, [r0, #0]
    299a:	b1d3      	cbz	r3, 29d2 <_mci_sync_start_write_blocks+0x46>
    299c:	2001      	movs	r0, #1
    299e:	4d18      	ldr	r5, [pc, #96]	; (2a00 <_mci_sync_start_write_blocks+0x74>)
    29a0:	f240 225d 	movw	r2, #605	; 0x25d
    29a4:	4629      	mov	r1, r5
    29a6:	4c17      	ldr	r4, [pc, #92]	; (2a04 <_mci_sync_start_write_blocks+0x78>)
    29a8:	47a0      	blx	r4
	ASSERT(nb_block);
    29aa:	f240 225e 	movw	r2, #606	; 0x25e
    29ae:	4629      	mov	r1, r5
    29b0:	f118 0000 	adds.w	r0, r8, #0
    29b4:	bf18      	it	ne
    29b6:	2001      	movne	r0, #1
    29b8:	47a0      	blx	r4
	ASSERT(src);
    29ba:	f240 225f 	movw	r2, #607	; 0x25f
    29be:	4629      	mov	r1, r5
    29c0:	1c30      	adds	r0, r6, #0
    29c2:	bf18      	it	ne
    29c4:	2001      	movne	r0, #1
    29c6:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    29c8:	8a3d      	ldrh	r5, [r7, #16]
    29ca:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    29ce:	2404      	movs	r4, #4

	while (nb_data) {
    29d0:	e005      	b.n	29de <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    29d2:	2000      	movs	r0, #0
    29d4:	e7e3      	b.n	299e <_mci_sync_start_write_blocks+0x12>
    29d6:	2000      	movs	r0, #0
    29d8:	e7e1      	b.n	299e <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    29da:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    29dc:	4426      	add	r6, r4
	while (nb_data) {
    29de:	b165      	cbz	r5, 29fa <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    29e0:	6831      	ldr	r1, [r6, #0]
    29e2:	4638      	mov	r0, r7
    29e4:	4b08      	ldr	r3, [pc, #32]	; (2a08 <_mci_sync_start_write_blocks+0x7c>)
    29e6:	4798      	blx	r3
		if (nb_data < nbytes) {
    29e8:	42a5      	cmp	r5, r4
    29ea:	d2f6      	bcs.n	29da <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    29ec:	8a3b      	ldrh	r3, [r7, #16]
    29ee:	fb93 f2f4 	sdiv	r2, r3, r4
    29f2:	fb04 3412 	mls	r4, r4, r2, r3
    29f6:	b2e4      	uxtb	r4, r4
    29f8:	e7ef      	b.n	29da <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    29fa:	2001      	movs	r0, #1
    29fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a00:	00005808 	.word	0x00005808
    2a04:	0000167d 	.word	0x0000167d
    2a08:	00002855 	.word	0x00002855

00002a0c <_mci_sync_wait_end_of_read_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_read_blocks()
 */
bool _mci_sync_wait_end_of_read_blocks(struct _mci_sync_device *const mci_dev)
{
    2a0c:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    2a0e:	b158      	cbz	r0, 2a28 <_mci_sync_wait_end_of_read_blocks+0x1c>
    2a10:	6803      	ldr	r3, [r0, #0]
    2a12:	b13b      	cbz	r3, 2a24 <_mci_sync_wait_end_of_read_blocks+0x18>
    2a14:	2001      	movs	r0, #1
    2a16:	f44f 721d 	mov.w	r2, #628	; 0x274
    2a1a:	4904      	ldr	r1, [pc, #16]	; (2a2c <_mci_sync_wait_end_of_read_blocks+0x20>)
    2a1c:	4b04      	ldr	r3, [pc, #16]	; (2a30 <_mci_sync_wait_end_of_read_blocks+0x24>)
    2a1e:	4798      	blx	r3

	/* Always return true for sync read blocks */
	return true;
}
    2a20:	2001      	movs	r0, #1
    2a22:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2a24:	2000      	movs	r0, #0
    2a26:	e7f6      	b.n	2a16 <_mci_sync_wait_end_of_read_blocks+0xa>
    2a28:	2000      	movs	r0, #0
    2a2a:	e7f4      	b.n	2a16 <_mci_sync_wait_end_of_read_blocks+0xa>
    2a2c:	00005808 	.word	0x00005808
    2a30:	0000167d 	.word	0x0000167d

00002a34 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    2a34:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    2a36:	b158      	cbz	r0, 2a50 <_mci_sync_wait_end_of_write_blocks+0x1c>
    2a38:	6803      	ldr	r3, [r0, #0]
    2a3a:	b13b      	cbz	r3, 2a4c <_mci_sync_wait_end_of_write_blocks+0x18>
    2a3c:	2001      	movs	r0, #1
    2a3e:	f240 227f 	movw	r2, #639	; 0x27f
    2a42:	4904      	ldr	r1, [pc, #16]	; (2a54 <_mci_sync_wait_end_of_write_blocks+0x20>)
    2a44:	4b04      	ldr	r3, [pc, #16]	; (2a58 <_mci_sync_wait_end_of_write_blocks+0x24>)
    2a46:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    2a48:	2001      	movs	r0, #1
    2a4a:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    2a4c:	2000      	movs	r0, #0
    2a4e:	e7f6      	b.n	2a3e <_mci_sync_wait_end_of_write_blocks+0xa>
    2a50:	2000      	movs	r0, #0
    2a52:	e7f4      	b.n	2a3e <_mci_sync_wait_end_of_write_blocks+0xa>
    2a54:	00005808 	.word	0x00005808
    2a58:	0000167d 	.word	0x0000167d

00002a5c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2a5c:	b470      	push	{r4, r5, r6}
    2a5e:	b087      	sub	sp, #28
    2a60:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2a62:	466c      	mov	r4, sp
    2a64:	4d0c      	ldr	r5, [pc, #48]	; (2a98 <_sercom_get_hardware_index+0x3c>)
    2a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a6a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2a6e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a72:	2000      	movs	r0, #0
    2a74:	2805      	cmp	r0, #5
    2a76:	d80a      	bhi.n	2a8e <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2a78:	ab06      	add	r3, sp, #24
    2a7a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2a7e:	f853 3c18 	ldr.w	r3, [r3, #-24]
    2a82:	42b3      	cmp	r3, r6
    2a84:	d001      	beq.n	2a8a <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2a86:	3001      	adds	r0, #1
    2a88:	e7f4      	b.n	2a74 <_sercom_get_hardware_index+0x18>
			return i;
    2a8a:	b2c0      	uxtb	r0, r0
    2a8c:	e000      	b.n	2a90 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    2a8e:	2000      	movs	r0, #0
}
    2a90:	b007      	add	sp, #28
    2a92:	bc70      	pop	{r4, r5, r6}
    2a94:	4770      	bx	lr
    2a96:	bf00      	nop
    2a98:	00005820 	.word	0x00005820

00002a9c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2a9c:	b510      	push	{r4, lr}
	void *hw = device->hw;
    2a9e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2aa0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2aa2:	f013 0f01 	tst.w	r3, #1
    2aa6:	d003      	beq.n	2ab0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2aa8:	7da3      	ldrb	r3, [r4, #22]
    2aaa:	f013 0f01 	tst.w	r3, #1
    2aae:	d112      	bne.n	2ad6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2ab0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    2ab2:	f013 0f02 	tst.w	r3, #2
    2ab6:	d003      	beq.n	2ac0 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2ab8:	7da3      	ldrb	r3, [r4, #22]
    2aba:	f013 0f02 	tst.w	r3, #2
    2abe:	d10f      	bne.n	2ae0 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2ac0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2ac2:	f013 0f04 	tst.w	r3, #4
    2ac6:	d015      	beq.n	2af4 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2ac8:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2aca:	f003 0337 	and.w	r3, r3, #55	; 0x37
    2ace:	b163      	cbz	r3, 2aea <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2ad0:	23ff      	movs	r3, #255	; 0xff
    2ad2:	8363      	strh	r3, [r4, #26]
    2ad4:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2ad6:	2301      	movs	r3, #1
    2ad8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2ada:	6803      	ldr	r3, [r0, #0]
    2adc:	4798      	blx	r3
    2ade:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2ae0:	2302      	movs	r3, #2
    2ae2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2ae4:	6883      	ldr	r3, [r0, #8]
    2ae6:	4798      	blx	r3
    2ae8:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2aea:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2aec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2aee:	b2c9      	uxtb	r1, r1
    2af0:	4798      	blx	r3
    2af2:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2af4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2af6:	09db      	lsrs	r3, r3, #7
    2af8:	d100      	bne.n	2afc <_sercom_usart_interrupt_handler+0x60>
    2afa:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2afc:	2380      	movs	r3, #128	; 0x80
    2afe:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    2b00:	68c3      	ldr	r3, [r0, #12]
    2b02:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2b04:	8b63      	ldrh	r3, [r4, #26]
    2b06:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2b08:	8363      	strh	r3, [r4, #26]
    2b0a:	e7f6      	b.n	2afa <_sercom_usart_interrupt_handler+0x5e>

00002b0c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2b0c:	4b03      	ldr	r3, [pc, #12]	; (2b1c <_sercom_init_irq_param+0x10>)
    2b0e:	4298      	cmp	r0, r3
    2b10:	d000      	beq.n	2b14 <_sercom_init_irq_param+0x8>
    2b12:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2b14:	4b02      	ldr	r3, [pc, #8]	; (2b20 <_sercom_init_irq_param+0x14>)
    2b16:	6019      	str	r1, [r3, #0]
	}
}
    2b18:	e7fb      	b.n	2b12 <_sercom_init_irq_param+0x6>
    2b1a:	bf00      	nop
    2b1c:	43000400 	.word	0x43000400
    2b20:	20000218 	.word	0x20000218

00002b24 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2b24:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2b26:	4b04      	ldr	r3, [pc, #16]	; (2b38 <_sercom_get_irq_num+0x14>)
    2b28:	4798      	blx	r3
    2b2a:	0080      	lsls	r0, r0, #2
    2b2c:	b2c0      	uxtb	r0, r0
    2b2e:	302e      	adds	r0, #46	; 0x2e
}
    2b30:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2b34:	bd08      	pop	{r3, pc}
    2b36:	bf00      	nop
    2b38:	00002a5d 	.word	0x00002a5d

00002b3c <_get_sercom_index>:
{
    2b3c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2b3e:	4b0c      	ldr	r3, [pc, #48]	; (2b70 <_get_sercom_index+0x34>)
    2b40:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b42:	2300      	movs	r3, #0
    2b44:	b143      	cbz	r3, 2b58 <_get_sercom_index+0x1c>
	ASSERT(false);
    2b46:	f240 226b 	movw	r2, #619	; 0x26b
    2b4a:	490a      	ldr	r1, [pc, #40]	; (2b74 <_get_sercom_index+0x38>)
    2b4c:	2000      	movs	r0, #0
    2b4e:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <_get_sercom_index+0x3c>)
    2b50:	4798      	blx	r3
	return 0;
    2b52:	2300      	movs	r3, #0
}
    2b54:	4618      	mov	r0, r3
    2b56:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    2b58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2b5c:	00d1      	lsls	r1, r2, #3
    2b5e:	4a07      	ldr	r2, [pc, #28]	; (2b7c <_get_sercom_index+0x40>)
    2b60:	440a      	add	r2, r1
    2b62:	7e12      	ldrb	r2, [r2, #24]
    2b64:	4290      	cmp	r0, r2
    2b66:	d0f5      	beq.n	2b54 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2b68:	3301      	adds	r3, #1
    2b6a:	b2db      	uxtb	r3, r3
    2b6c:	e7ea      	b.n	2b44 <_get_sercom_index+0x8>
    2b6e:	bf00      	nop
    2b70:	00002a5d 	.word	0x00002a5d
    2b74:	0000588c 	.word	0x0000588c
    2b78:	0000167d 	.word	0x0000167d
    2b7c:	00005820 	.word	0x00005820

00002b80 <_usart_init>:
{
    2b80:	b538      	push	{r3, r4, r5, lr}
    2b82:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2b84:	4b3c      	ldr	r3, [pc, #240]	; (2c78 <_usart_init+0xf8>)
    2b86:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2b88:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2b8a:	f013 0f01 	tst.w	r3, #1
    2b8e:	d122      	bne.n	2bd6 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2b90:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2b94:	00da      	lsls	r2, r3, #3
    2b96:	4b39      	ldr	r3, [pc, #228]	; (2c7c <_usart_init+0xfc>)
    2b98:	4413      	add	r3, r2
    2b9a:	69da      	ldr	r2, [r3, #28]
    2b9c:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ba0:	69e3      	ldr	r3, [r4, #28]
    2ba2:	f013 0f03 	tst.w	r3, #3
    2ba6:	d1fb      	bne.n	2ba0 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2ba8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2baa:	f013 0f02 	tst.w	r3, #2
    2bae:	d00b      	beq.n	2bc8 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2bb0:	6823      	ldr	r3, [r4, #0]
    2bb2:	f023 0302 	bic.w	r3, r3, #2
    2bb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2bb8:	69e3      	ldr	r3, [r4, #28]
    2bba:	f013 0f03 	tst.w	r3, #3
    2bbe:	d1fb      	bne.n	2bb8 <_usart_init+0x38>
    2bc0:	69e3      	ldr	r3, [r4, #28]
    2bc2:	f013 0f02 	tst.w	r3, #2
    2bc6:	d1fb      	bne.n	2bc0 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2bc8:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2bcc:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2bce:	69e3      	ldr	r3, [r4, #28]
    2bd0:	f013 0f03 	tst.w	r3, #3
    2bd4:	d1fb      	bne.n	2bce <_usart_init+0x4e>
    2bd6:	69e3      	ldr	r3, [r4, #28]
    2bd8:	f013 0f01 	tst.w	r3, #1
    2bdc:	d1fb      	bne.n	2bd6 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2bde:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2be2:	00da      	lsls	r2, r3, #3
    2be4:	4b25      	ldr	r3, [pc, #148]	; (2c7c <_usart_init+0xfc>)
    2be6:	4413      	add	r3, r2
    2be8:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2bea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2bec:	69e3      	ldr	r3, [r4, #28]
    2bee:	f013 0f03 	tst.w	r3, #3
    2bf2:	d1fb      	bne.n	2bec <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2bf4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2bf8:	00da      	lsls	r2, r3, #3
    2bfa:	4b20      	ldr	r3, [pc, #128]	; (2c7c <_usart_init+0xfc>)
    2bfc:	4413      	add	r3, r2
    2bfe:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2c00:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2c02:	69e3      	ldr	r3, [r4, #28]
    2c04:	f013 0f1f 	tst.w	r3, #31
    2c08:	d1fb      	bne.n	2c02 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2c0a:	0042      	lsls	r2, r0, #1
    2c0c:	4402      	add	r2, r0
    2c0e:	00d1      	lsls	r1, r2, #3
    2c10:	4b1a      	ldr	r3, [pc, #104]	; (2c7c <_usart_init+0xfc>)
    2c12:	440b      	add	r3, r1
    2c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2c16:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2c18:	69db      	ldr	r3, [r3, #28]
    2c1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2c1e:	d10a      	bne.n	2c36 <_usart_init+0xb6>
    2c20:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2c24:	d107      	bne.n	2c36 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2c26:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2c2a:	00da      	lsls	r2, r3, #3
    2c2c:	4b13      	ldr	r3, [pc, #76]	; (2c7c <_usart_init+0xfc>)
    2c2e:	4413      	add	r3, r2
    2c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    2c32:	81a3      	strh	r3, [r4, #12]
    2c34:	e00f      	b.n	2c56 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2c36:	0042      	lsls	r2, r0, #1
    2c38:	4402      	add	r2, r0
    2c3a:	00d1      	lsls	r1, r2, #3
    2c3c:	4b0f      	ldr	r3, [pc, #60]	; (2c7c <_usart_init+0xfc>)
    2c3e:	440b      	add	r3, r1
    2c40:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2c42:	89a2      	ldrh	r2, [r4, #12]
    2c44:	f361 020c 	bfi	r2, r1, #0, #13
    2c48:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2c4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    2c4e:	89a3      	ldrh	r3, [r4, #12]
    2c50:	f362 334f 	bfi	r3, r2, #13, #3
    2c54:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2c56:	4a09      	ldr	r2, [pc, #36]	; (2c7c <_usart_init+0xfc>)
    2c58:	0043      	lsls	r3, r0, #1
    2c5a:	181d      	adds	r5, r3, r0
    2c5c:	00e9      	lsls	r1, r5, #3
    2c5e:	460d      	mov	r5, r1
    2c60:	4411      	add	r1, r2
    2c62:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    2c66:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2c68:	442a      	add	r2, r5
    2c6a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2c6e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    2c72:	2000      	movs	r0, #0
    2c74:	bd38      	pop	{r3, r4, r5, pc}
    2c76:	bf00      	nop
    2c78:	00002b3d 	.word	0x00002b3d
    2c7c:	00005820 	.word	0x00005820

00002c80 <_usart_async_init>:
{
    2c80:	b570      	push	{r4, r5, r6, lr}
    2c82:	460c      	mov	r4, r1
	ASSERT(device);
    2c84:	4606      	mov	r6, r0
    2c86:	22cb      	movs	r2, #203	; 0xcb
    2c88:	4918      	ldr	r1, [pc, #96]	; (2cec <_usart_async_init+0x6c>)
    2c8a:	3000      	adds	r0, #0
    2c8c:	bf18      	it	ne
    2c8e:	2001      	movne	r0, #1
    2c90:	4b17      	ldr	r3, [pc, #92]	; (2cf0 <_usart_async_init+0x70>)
    2c92:	4798      	blx	r3
	init_status = _usart_init(hw);
    2c94:	4620      	mov	r0, r4
    2c96:	4b17      	ldr	r3, [pc, #92]	; (2cf4 <_usart_async_init+0x74>)
    2c98:	4798      	blx	r3
	if (init_status) {
    2c9a:	4605      	mov	r5, r0
    2c9c:	b108      	cbz	r0, 2ca2 <_usart_async_init+0x22>
}
    2c9e:	4628      	mov	r0, r5
    2ca0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    2ca2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2ca4:	4631      	mov	r1, r6
    2ca6:	4620      	mov	r0, r4
    2ca8:	4b13      	ldr	r3, [pc, #76]	; (2cf8 <_usart_async_init+0x78>)
    2caa:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2cac:	4620      	mov	r0, r4
    2cae:	4b13      	ldr	r3, [pc, #76]	; (2cfc <_usart_async_init+0x7c>)
    2cb0:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    2cb2:	2400      	movs	r4, #0
    2cb4:	e016      	b.n	2ce4 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cb6:	0941      	lsrs	r1, r0, #5
    2cb8:	f000 021f 	and.w	r2, r0, #31
    2cbc:	2301      	movs	r3, #1
    2cbe:	4093      	lsls	r3, r2
    2cc0:	4a0f      	ldr	r2, [pc, #60]	; (2d00 <_usart_async_init+0x80>)
    2cc2:	f101 0620 	add.w	r6, r1, #32
    2cc6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2cca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cce:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cd2:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2cd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    2cde:	3001      	adds	r0, #1
    2ce0:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2ce2:	3401      	adds	r4, #1
    2ce4:	2c03      	cmp	r4, #3
    2ce6:	d9e6      	bls.n	2cb6 <_usart_async_init+0x36>
    2ce8:	e7d9      	b.n	2c9e <_usart_async_init+0x1e>
    2cea:	bf00      	nop
    2cec:	0000588c 	.word	0x0000588c
    2cf0:	0000167d 	.word	0x0000167d
    2cf4:	00002b81 	.word	0x00002b81
    2cf8:	00002b0d 	.word	0x00002b0d
    2cfc:	00002b25 	.word	0x00002b25
    2d00:	e000e100 	.word	0xe000e100

00002d04 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2d04:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2d06:	6299      	str	r1, [r3, #40]	; 0x28
    2d08:	4770      	bx	lr

00002d0a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2d0a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2d0c:	2201      	movs	r2, #1
    2d0e:	759a      	strb	r2, [r3, #22]
    2d10:	4770      	bx	lr

00002d12 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2d12:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2d14:	2202      	movs	r2, #2
    2d16:	759a      	strb	r2, [r3, #22]
    2d18:	4770      	bx	lr
	...

00002d1c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2d1c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <SERCOM5_0_Handler+0xc>)
    2d20:	6818      	ldr	r0, [r3, #0]
    2d22:	4b02      	ldr	r3, [pc, #8]	; (2d2c <SERCOM5_0_Handler+0x10>)
    2d24:	4798      	blx	r3
    2d26:	bd08      	pop	{r3, pc}
    2d28:	20000218 	.word	0x20000218
    2d2c:	00002a9d 	.word	0x00002a9d

00002d30 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2d30:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d32:	4b02      	ldr	r3, [pc, #8]	; (2d3c <SERCOM5_1_Handler+0xc>)
    2d34:	6818      	ldr	r0, [r3, #0]
    2d36:	4b02      	ldr	r3, [pc, #8]	; (2d40 <SERCOM5_1_Handler+0x10>)
    2d38:	4798      	blx	r3
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	20000218 	.word	0x20000218
    2d40:	00002a9d 	.word	0x00002a9d

00002d44 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2d44:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d46:	4b02      	ldr	r3, [pc, #8]	; (2d50 <SERCOM5_2_Handler+0xc>)
    2d48:	6818      	ldr	r0, [r3, #0]
    2d4a:	4b02      	ldr	r3, [pc, #8]	; (2d54 <SERCOM5_2_Handler+0x10>)
    2d4c:	4798      	blx	r3
    2d4e:	bd08      	pop	{r3, pc}
    2d50:	20000218 	.word	0x20000218
    2d54:	00002a9d 	.word	0x00002a9d

00002d58 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2d58:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    2d5a:	4b02      	ldr	r3, [pc, #8]	; (2d64 <SERCOM5_3_Handler+0xc>)
    2d5c:	6818      	ldr	r0, [r3, #0]
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <SERCOM5_3_Handler+0x10>)
    2d60:	4798      	blx	r3
    2d62:	bd08      	pop	{r3, pc}
    2d64:	20000218 	.word	0x20000218
    2d68:	00002a9d 	.word	0x00002a9d

00002d6c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <_system_time_init+0x10>)
    2d6e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2d72:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2d74:	2205      	movs	r2, #5
    2d76:	601a      	str	r2, [r3, #0]
    2d78:	4770      	bx	lr
    2d7a:	bf00      	nop
    2d7c:	e000e010 	.word	0xe000e010

00002d80 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2d80:	b508      	push	{r3, lr}
	_system_time_init(hw);
    2d82:	4b01      	ldr	r3, [pc, #4]	; (2d88 <_delay_init+0x8>)
    2d84:	4798      	blx	r3
    2d86:	bd08      	pop	{r3, pc}
    2d88:	00002d6d 	.word	0x00002d6d

00002d8c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2d8c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2d8e:	e00d      	b.n	2dac <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    2d90:	4b0d      	ldr	r3, [pc, #52]	; (2dc8 <_delay_cycles+0x3c>)
    2d92:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    2d96:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2d98:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d9a:	4b0b      	ldr	r3, [pc, #44]	; (2dc8 <_delay_cycles+0x3c>)
    2d9c:	681b      	ldr	r3, [r3, #0]
    2d9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2da2:	d0fa      	beq.n	2d9a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    2da4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2da8:	3101      	adds	r1, #1
	while (n--) {
    2daa:	4610      	mov	r0, r2
    2dac:	1e43      	subs	r3, r0, #1
    2dae:	b2da      	uxtb	r2, r3
    2db0:	2800      	cmp	r0, #0
    2db2:	d1ed      	bne.n	2d90 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2db4:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <_delay_cycles+0x3c>)
    2db6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2db8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2dba:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <_delay_cycles+0x3c>)
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2dc2:	d0fa      	beq.n	2dba <_delay_cycles+0x2e>
		;
}
    2dc4:	4770      	bx	lr
    2dc6:	bf00      	nop
    2dc8:	e000e010 	.word	0xe000e010

00002dcc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2dcc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2dce:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2dd0:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2dd2:	f012 0f01 	tst.w	r2, #1
    2dd6:	d100      	bne.n	2dda <tc_interrupt_handler+0xe>
    2dd8:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2dda:	2201      	movs	r2, #1
    2ddc:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2dde:	6803      	ldr	r3, [r0, #0]
    2de0:	4798      	blx	r3
	}
}
    2de2:	e7f9      	b.n	2dd8 <tc_interrupt_handler+0xc>

00002de4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2de4:	b538      	push	{r3, r4, r5, lr}
    2de6:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2de8:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2dea:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2dec:	f013 0f01 	tst.w	r3, #1
    2df0:	d004      	beq.n	2dfc <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2df2:	2301      	movs	r3, #1
    2df4:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2df6:	6803      	ldr	r3, [r0, #0]
    2df8:	b103      	cbz	r3, 2dfc <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2dfa:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2dfc:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2dfe:	f013 0f02 	tst.w	r3, #2
    2e02:	d005      	beq.n	2e10 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2e04:	2302      	movs	r3, #2
    2e06:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2e08:	686b      	ldr	r3, [r5, #4]
    2e0a:	b10b      	cbz	r3, 2e10 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2e0c:	4628      	mov	r0, r5
    2e0e:	4798      	blx	r3
    2e10:	bd38      	pop	{r3, r4, r5, pc}
	...

00002e14 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2e14:	4b06      	ldr	r3, [pc, #24]	; (2e30 <_tc_init_irq_param+0x1c>)
    2e16:	4298      	cmp	r0, r3
    2e18:	d003      	beq.n	2e22 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2e1a:	4b06      	ldr	r3, [pc, #24]	; (2e34 <_tc_init_irq_param+0x20>)
    2e1c:	4298      	cmp	r0, r3
    2e1e:	d003      	beq.n	2e28 <_tc_init_irq_param+0x14>
    2e20:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2e22:	4b05      	ldr	r3, [pc, #20]	; (2e38 <_tc_init_irq_param+0x24>)
    2e24:	6019      	str	r1, [r3, #0]
    2e26:	e7f8      	b.n	2e1a <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2e28:	4b03      	ldr	r3, [pc, #12]	; (2e38 <_tc_init_irq_param+0x24>)
    2e2a:	6059      	str	r1, [r3, #4]
	}
}
    2e2c:	e7f8      	b.n	2e20 <_tc_init_irq_param+0xc>
    2e2e:	bf00      	nop
    2e30:	40003800 	.word	0x40003800
    2e34:	40003c00 	.word	0x40003c00
    2e38:	2000021c 	.word	0x2000021c

00002e3c <get_tc_index>:
{
    2e3c:	b570      	push	{r4, r5, r6, lr}
    2e3e:	b086      	sub	sp, #24
    2e40:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2e42:	466c      	mov	r4, sp
    2e44:	4d17      	ldr	r5, [pc, #92]	; (2ea4 <get_tc_index+0x68>)
    2e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e4a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2e4e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e52:	2300      	movs	r3, #0
    2e54:	2b05      	cmp	r3, #5
    2e56:	d80a      	bhi.n	2e6e <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2e58:	aa06      	add	r2, sp, #24
    2e5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2e5e:	f852 2c18 	ldr.w	r2, [r2, #-24]
    2e62:	42b2      	cmp	r2, r6
    2e64:	d001      	beq.n	2e6a <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e66:	3301      	adds	r3, #1
    2e68:	e7f4      	b.n	2e54 <get_tc_index+0x18>
			return i;
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	e000      	b.n	2e70 <get_tc_index+0x34>
		}
	}
	return 0;
    2e6e:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e70:	2200      	movs	r2, #0
    2e72:	2a01      	cmp	r2, #1
    2e74:	d80b      	bhi.n	2e8e <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    2e76:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    2e7a:	0081      	lsls	r1, r0, #2
    2e7c:	480a      	ldr	r0, [pc, #40]	; (2ea8 <get_tc_index+0x6c>)
    2e7e:	5c41      	ldrb	r1, [r0, r1]
    2e80:	4299      	cmp	r1, r3
    2e82:	d002      	beq.n	2e8a <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e84:	3201      	adds	r2, #1
    2e86:	b2d2      	uxtb	r2, r2
    2e88:	e7f3      	b.n	2e72 <get_tc_index+0x36>
			return i;
    2e8a:	b250      	sxtb	r0, r2
    2e8c:	e007      	b.n	2e9e <get_tc_index+0x62>
	ASSERT(false);
    2e8e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    2e92:	4906      	ldr	r1, [pc, #24]	; (2eac <get_tc_index+0x70>)
    2e94:	2000      	movs	r0, #0
    2e96:	4b06      	ldr	r3, [pc, #24]	; (2eb0 <get_tc_index+0x74>)
    2e98:	4798      	blx	r3
	return -1;
    2e9a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e9e:	b006      	add	sp, #24
    2ea0:	bd70      	pop	{r4, r5, r6, pc}
    2ea2:	bf00      	nop
    2ea4:	000058a8 	.word	0x000058a8
    2ea8:	20000000 	.word	0x20000000
    2eac:	000058c0 	.word	0x000058c0
    2eb0:	0000167d 	.word	0x0000167d

00002eb4 <_timer_init>:
{
    2eb4:	b570      	push	{r4, r5, r6, lr}
    2eb6:	4606      	mov	r6, r0
    2eb8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2eba:	4608      	mov	r0, r1
    2ebc:	4b6c      	ldr	r3, [pc, #432]	; (3070 <_timer_init+0x1bc>)
    2ebe:	4798      	blx	r3
    2ec0:	4605      	mov	r5, r0
	device->hw = hw;
    2ec2:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2ec4:	228f      	movs	r2, #143	; 0x8f
    2ec6:	496b      	ldr	r1, [pc, #428]	; (3074 <_timer_init+0x1c0>)
    2ec8:	2001      	movs	r0, #1
    2eca:	4b6b      	ldr	r3, [pc, #428]	; (3078 <_timer_init+0x1c4>)
    2ecc:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2ece:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2ed0:	f013 0f01 	tst.w	r3, #1
    2ed4:	d119      	bne.n	2f0a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ed6:	6923      	ldr	r3, [r4, #16]
    2ed8:	f013 0f03 	tst.w	r3, #3
    2edc:	d1fb      	bne.n	2ed6 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2ede:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2ee0:	f013 0f02 	tst.w	r3, #2
    2ee4:	d00b      	beq.n	2efe <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2ee6:	6823      	ldr	r3, [r4, #0]
    2ee8:	f023 0302 	bic.w	r3, r3, #2
    2eec:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2eee:	6923      	ldr	r3, [r4, #16]
    2ef0:	f013 0f03 	tst.w	r3, #3
    2ef4:	d1fb      	bne.n	2eee <_timer_init+0x3a>
    2ef6:	6923      	ldr	r3, [r4, #16]
    2ef8:	f013 0f02 	tst.w	r3, #2
    2efc:	d1fb      	bne.n	2ef6 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2efe:	2301      	movs	r3, #1
    2f00:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f02:	6923      	ldr	r3, [r4, #16]
    2f04:	f013 0f03 	tst.w	r3, #3
    2f08:	d1fb      	bne.n	2f02 <_timer_init+0x4e>
    2f0a:	6923      	ldr	r3, [r4, #16]
    2f0c:	f013 0f01 	tst.w	r3, #1
    2f10:	d1fb      	bne.n	2f0a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2f12:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f16:	009a      	lsls	r2, r3, #2
    2f18:	4b58      	ldr	r3, [pc, #352]	; (307c <_timer_init+0x1c8>)
    2f1a:	4413      	add	r3, r2
    2f1c:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2f1e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f20:	6923      	ldr	r3, [r4, #16]
    2f22:	f013 0f03 	tst.w	r3, #3
    2f26:	d1fb      	bne.n	2f20 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f28:	00aa      	lsls	r2, r5, #2
    2f2a:	442a      	add	r2, r5
    2f2c:	0091      	lsls	r1, r2, #2
    2f2e:	4b53      	ldr	r3, [pc, #332]	; (307c <_timer_init+0x1c8>)
    2f30:	440b      	add	r3, r1
    2f32:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2f34:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2f36:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2f38:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2f3a:	2201      	movs	r2, #1
    2f3c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2f3e:	685b      	ldr	r3, [r3, #4]
    2f40:	f003 030c 	and.w	r3, r3, #12
    2f44:	2b08      	cmp	r3, #8
    2f46:	d05b      	beq.n	3000 <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d16d      	bne.n	3028 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2f4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f50:	009a      	lsls	r2, r3, #2
    2f52:	4b4a      	ldr	r3, [pc, #296]	; (307c <_timer_init+0x1c8>)
    2f54:	4413      	add	r3, r2
    2f56:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f58:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f5a:	6923      	ldr	r3, [r4, #16]
    2f5c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f60:	d1fb      	bne.n	2f5a <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2f62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f66:	009a      	lsls	r2, r3, #2
    2f68:	4b44      	ldr	r3, [pc, #272]	; (307c <_timer_init+0x1c8>)
    2f6a:	4413      	add	r3, r2
    2f6c:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f6e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f70:	6923      	ldr	r3, [r4, #16]
    2f72:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2f76:	d1fb      	bne.n	2f70 <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2f78:	2301      	movs	r3, #1
    2f7a:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2f7c:	4631      	mov	r1, r6
    2f7e:	4620      	mov	r0, r4
    2f80:	4b3f      	ldr	r3, [pc, #252]	; (3080 <_timer_init+0x1cc>)
    2f82:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f84:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f88:	009a      	lsls	r2, r3, #2
    2f8a:	4b3c      	ldr	r3, [pc, #240]	; (307c <_timer_init+0x1c8>)
    2f8c:	4413      	add	r3, r2
    2f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2f92:	2b00      	cmp	r3, #0
    2f94:	db0d      	blt.n	2fb2 <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f96:	095a      	lsrs	r2, r3, #5
    2f98:	f003 031f 	and.w	r3, r3, #31
    2f9c:	2101      	movs	r1, #1
    2f9e:	fa01 f303 	lsl.w	r3, r1, r3
    2fa2:	3220      	adds	r2, #32
    2fa4:	4937      	ldr	r1, [pc, #220]	; (3084 <_timer_init+0x1d0>)
    2fa6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fae:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2fb2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fb6:	009a      	lsls	r2, r3, #2
    2fb8:	4b30      	ldr	r3, [pc, #192]	; (307c <_timer_init+0x1c8>)
    2fba:	4413      	add	r3, r2
    2fbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	db09      	blt.n	2fd8 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fc4:	095a      	lsrs	r2, r3, #5
    2fc6:	f003 031f 	and.w	r3, r3, #31
    2fca:	2101      	movs	r1, #1
    2fcc:	fa01 f303 	lsl.w	r3, r1, r3
    2fd0:	3260      	adds	r2, #96	; 0x60
    2fd2:	492c      	ldr	r1, [pc, #176]	; (3084 <_timer_init+0x1d0>)
    2fd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2fd8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2fdc:	00aa      	lsls	r2, r5, #2
    2fde:	4b27      	ldr	r3, [pc, #156]	; (307c <_timer_init+0x1c8>)
    2fe0:	4413      	add	r3, r2
    2fe2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	db08      	blt.n	2ffc <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fea:	0959      	lsrs	r1, r3, #5
    2fec:	f003 031f 	and.w	r3, r3, #31
    2ff0:	2201      	movs	r2, #1
    2ff2:	fa02 f303 	lsl.w	r3, r2, r3
    2ff6:	4a23      	ldr	r2, [pc, #140]	; (3084 <_timer_init+0x1d0>)
    2ff8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2ffc:	2000      	movs	r0, #0
    2ffe:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3000:	4b1e      	ldr	r3, [pc, #120]	; (307c <_timer_init+0x1c8>)
    3002:	440b      	add	r3, r1
    3004:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3006:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3008:	6923      	ldr	r3, [r4, #16]
    300a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    300e:	d1fb      	bne.n	3008 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3010:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3014:	009a      	lsls	r2, r3, #2
    3016:	4b19      	ldr	r3, [pc, #100]	; (307c <_timer_init+0x1c8>)
    3018:	4413      	add	r3, r2
    301a:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    301c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    301e:	6923      	ldr	r3, [r4, #16]
    3020:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3024:	d1fb      	bne.n	301e <_timer_init+0x16a>
    3026:	e7a7      	b.n	2f78 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3028:	2b04      	cmp	r3, #4
    302a:	d1a5      	bne.n	2f78 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    302c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3030:	009a      	lsls	r2, r3, #2
    3032:	4b12      	ldr	r3, [pc, #72]	; (307c <_timer_init+0x1c8>)
    3034:	4413      	add	r3, r2
    3036:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3038:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    303a:	6923      	ldr	r3, [r4, #16]
    303c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3040:	d1fb      	bne.n	303a <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3042:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3046:	009a      	lsls	r2, r3, #2
    3048:	4b0c      	ldr	r3, [pc, #48]	; (307c <_timer_init+0x1c8>)
    304a:	4413      	add	r3, r2
    304c:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    304e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3050:	6923      	ldr	r3, [r4, #16]
    3052:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3056:	d1fb      	bne.n	3050 <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3058:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    305c:	009a      	lsls	r2, r3, #2
    305e:	4b07      	ldr	r3, [pc, #28]	; (307c <_timer_init+0x1c8>)
    3060:	4413      	add	r3, r2
    3062:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3064:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3066:	6923      	ldr	r3, [r4, #16]
    3068:	f013 0f20 	tst.w	r3, #32
    306c:	d1fb      	bne.n	3066 <_timer_init+0x1b2>
    306e:	e783      	b.n	2f78 <_timer_init+0xc4>
    3070:	00002e3d 	.word	0x00002e3d
    3074:	000058c0 	.word	0x000058c0
    3078:	0000167d 	.word	0x0000167d
    307c:	20000000 	.word	0x20000000
    3080:	00002e15 	.word	0x00002e15
    3084:	e000e100 	.word	0xe000e100

00003088 <_pwm_init>:
{
    3088:	b570      	push	{r4, r5, r6, lr}
    308a:	4606      	mov	r6, r0
    308c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    308e:	4608      	mov	r0, r1
    3090:	4b59      	ldr	r3, [pc, #356]	; (31f8 <_pwm_init+0x170>)
    3092:	4798      	blx	r3
    3094:	4605      	mov	r5, r0
	device->hw = hw;
    3096:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3098:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    309a:	f013 0f01 	tst.w	r3, #1
    309e:	d119      	bne.n	30d4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30a0:	6923      	ldr	r3, [r4, #16]
    30a2:	f013 0f03 	tst.w	r3, #3
    30a6:	d1fb      	bne.n	30a0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    30a8:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    30aa:	f013 0f02 	tst.w	r3, #2
    30ae:	d00b      	beq.n	30c8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    30b0:	6823      	ldr	r3, [r4, #0]
    30b2:	f023 0302 	bic.w	r3, r3, #2
    30b6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30b8:	6923      	ldr	r3, [r4, #16]
    30ba:	f013 0f03 	tst.w	r3, #3
    30be:	d1fb      	bne.n	30b8 <_pwm_init+0x30>
    30c0:	6923      	ldr	r3, [r4, #16]
    30c2:	f013 0f02 	tst.w	r3, #2
    30c6:	d1fb      	bne.n	30c0 <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    30c8:	2301      	movs	r3, #1
    30ca:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30cc:	6923      	ldr	r3, [r4, #16]
    30ce:	f013 0f03 	tst.w	r3, #3
    30d2:	d1fb      	bne.n	30cc <_pwm_init+0x44>
    30d4:	6923      	ldr	r3, [r4, #16]
    30d6:	f013 0f01 	tst.w	r3, #1
    30da:	d1fb      	bne.n	30d4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    30dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30e0:	009a      	lsls	r2, r3, #2
    30e2:	4b46      	ldr	r3, [pc, #280]	; (31fc <_pwm_init+0x174>)
    30e4:	4413      	add	r3, r2
    30e6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    30e8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30ea:	6923      	ldr	r3, [r4, #16]
    30ec:	f013 0f03 	tst.w	r3, #3
    30f0:	d1fb      	bne.n	30ea <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    30f2:	00aa      	lsls	r2, r5, #2
    30f4:	442a      	add	r2, r5
    30f6:	0091      	lsls	r1, r2, #2
    30f8:	4b40      	ldr	r3, [pc, #256]	; (31fc <_pwm_init+0x174>)
    30fa:	440b      	add	r3, r1
    30fc:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    30fe:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3100:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3102:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3104:	2203      	movs	r2, #3
    3106:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3108:	685b      	ldr	r3, [r3, #4]
    310a:	f003 030c 	and.w	r3, r3, #12
    310e:	2b08      	cmp	r3, #8
    3110:	d059      	beq.n	31c6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3112:	2b00      	cmp	r3, #0
    3114:	d16b      	bne.n	31ee <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3116:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    311a:	009a      	lsls	r2, r3, #2
    311c:	4b37      	ldr	r3, [pc, #220]	; (31fc <_pwm_init+0x174>)
    311e:	4413      	add	r3, r2
    3120:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3122:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3124:	6923      	ldr	r3, [r4, #16]
    3126:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    312a:	d1fb      	bne.n	3124 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    312c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3130:	009a      	lsls	r2, r3, #2
    3132:	4b32      	ldr	r3, [pc, #200]	; (31fc <_pwm_init+0x174>)
    3134:	4413      	add	r3, r2
    3136:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3138:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    313a:	6923      	ldr	r3, [r4, #16]
    313c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3140:	d1fb      	bne.n	313a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    3142:	4631      	mov	r1, r6
    3144:	4620      	mov	r0, r4
    3146:	4b2e      	ldr	r3, [pc, #184]	; (3200 <_pwm_init+0x178>)
    3148:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    314a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    314e:	009a      	lsls	r2, r3, #2
    3150:	4b2a      	ldr	r3, [pc, #168]	; (31fc <_pwm_init+0x174>)
    3152:	4413      	add	r3, r2
    3154:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3158:	2b00      	cmp	r3, #0
    315a:	db0d      	blt.n	3178 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    315c:	095a      	lsrs	r2, r3, #5
    315e:	f003 031f 	and.w	r3, r3, #31
    3162:	2101      	movs	r1, #1
    3164:	fa01 f303 	lsl.w	r3, r1, r3
    3168:	3220      	adds	r2, #32
    316a:	4926      	ldr	r1, [pc, #152]	; (3204 <_pwm_init+0x17c>)
    316c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3174:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3178:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    317c:	009a      	lsls	r2, r3, #2
    317e:	4b1f      	ldr	r3, [pc, #124]	; (31fc <_pwm_init+0x174>)
    3180:	4413      	add	r3, r2
    3182:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3186:	2b00      	cmp	r3, #0
    3188:	db09      	blt.n	319e <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    318a:	095a      	lsrs	r2, r3, #5
    318c:	f003 031f 	and.w	r3, r3, #31
    3190:	2101      	movs	r1, #1
    3192:	fa01 f303 	lsl.w	r3, r1, r3
    3196:	3260      	adds	r2, #96	; 0x60
    3198:	491a      	ldr	r1, [pc, #104]	; (3204 <_pwm_init+0x17c>)
    319a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    319e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    31a2:	00aa      	lsls	r2, r5, #2
    31a4:	4b15      	ldr	r3, [pc, #84]	; (31fc <_pwm_init+0x174>)
    31a6:	4413      	add	r3, r2
    31a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    31ac:	2b00      	cmp	r3, #0
    31ae:	db21      	blt.n	31f4 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31b0:	0959      	lsrs	r1, r3, #5
    31b2:	f003 031f 	and.w	r3, r3, #31
    31b6:	2201      	movs	r2, #1
    31b8:	fa02 f303 	lsl.w	r3, r2, r3
    31bc:	4a11      	ldr	r2, [pc, #68]	; (3204 <_pwm_init+0x17c>)
    31be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    31c2:	2000      	movs	r0, #0
    31c4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    31c6:	4b0d      	ldr	r3, [pc, #52]	; (31fc <_pwm_init+0x174>)
    31c8:	440b      	add	r3, r1
    31ca:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31cc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31ce:	6923      	ldr	r3, [r4, #16]
    31d0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    31d4:	d1fb      	bne.n	31ce <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    31d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    31da:	009a      	lsls	r2, r3, #2
    31dc:	4b07      	ldr	r3, [pc, #28]	; (31fc <_pwm_init+0x174>)
    31de:	4413      	add	r3, r2
    31e0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31e2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31e4:	6923      	ldr	r3, [r4, #16]
    31e6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    31ea:	d1fb      	bne.n	31e4 <_pwm_init+0x15c>
    31ec:	e7a9      	b.n	3142 <_pwm_init+0xba>
		return -1;
    31ee:	f04f 30ff 	mov.w	r0, #4294967295
    31f2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    31f4:	2000      	movs	r0, #0
}
    31f6:	bd70      	pop	{r4, r5, r6, pc}
    31f8:	00002e3d 	.word	0x00002e3d
    31fc:	20000000 	.word	0x20000000
    3200:	00002e15 	.word	0x00002e15
    3204:	e000e100 	.word	0xe000e100

00003208 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3208:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    320a:	6813      	ldr	r3, [r2, #0]
    320c:	f043 0302 	orr.w	r3, r3, #2
    3210:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3212:	6913      	ldr	r3, [r2, #16]
    3214:	f013 0f03 	tst.w	r3, #3
    3218:	d1fb      	bne.n	3212 <_timer_start+0xa>
}
    321a:	4770      	bx	lr

0000321c <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    321c:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    321e:	6813      	ldr	r3, [r2, #0]
    3220:	f043 0302 	orr.w	r3, r3, #2
    3224:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3226:	6913      	ldr	r3, [r2, #16]
    3228:	f013 0f03 	tst.w	r3, #3
    322c:	d1fb      	bne.n	3226 <_pwm_enable+0xa>
}
    322e:	4770      	bx	lr

00003230 <_pwm_set_param>:
{
    3230:	b570      	push	{r4, r5, r6, lr}
    3232:	460e      	mov	r6, r1
    3234:	4615      	mov	r5, r2
	void *const hw = device->hw;
    3236:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    3238:	4620      	mov	r0, r4
    323a:	4b1b      	ldr	r3, [pc, #108]	; (32a8 <_pwm_set_param+0x78>)
    323c:	4798      	blx	r3
	_tcs[i].cc0 = period;
    323e:	0082      	lsls	r2, r0, #2
    3240:	4402      	add	r2, r0
    3242:	0091      	lsls	r1, r2, #2
    3244:	4b19      	ldr	r3, [pc, #100]	; (32ac <_pwm_set_param+0x7c>)
    3246:	440b      	add	r3, r1
    3248:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    324a:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    324c:	685b      	ldr	r3, [r3, #4]
    324e:	f003 030c 	and.w	r3, r3, #12
    3252:	2b08      	cmp	r3, #8
    3254:	d016      	beq.n	3284 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    3256:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    325a:	009a      	lsls	r2, r3, #2
    325c:	4b13      	ldr	r3, [pc, #76]	; (32ac <_pwm_set_param+0x7c>)
    325e:	4413      	add	r3, r2
    3260:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3262:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3264:	6923      	ldr	r3, [r4, #16]
    3266:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    326a:	d1fb      	bne.n	3264 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    326c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3270:	0082      	lsls	r2, r0, #2
    3272:	4b0e      	ldr	r3, [pc, #56]	; (32ac <_pwm_set_param+0x7c>)
    3274:	4413      	add	r3, r2
    3276:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3278:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    327a:	6923      	ldr	r3, [r4, #16]
    327c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3280:	d1fb      	bne.n	327a <_pwm_set_param+0x4a>
    3282:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3284:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3286:	6923      	ldr	r3, [r4, #16]
    3288:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    328c:	d1fb      	bne.n	3286 <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    328e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3292:	0082      	lsls	r2, r0, #2
    3294:	4b05      	ldr	r3, [pc, #20]	; (32ac <_pwm_set_param+0x7c>)
    3296:	4413      	add	r3, r2
    3298:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    329a:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    329c:	6923      	ldr	r3, [r4, #16]
    329e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    32a2:	d1fb      	bne.n	329c <_pwm_set_param+0x6c>
    32a4:	bd70      	pop	{r4, r5, r6, pc}
    32a6:	bf00      	nop
    32a8:	00002e3d 	.word	0x00002e3d
    32ac:	20000000 	.word	0x20000000

000032b0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    32b0:	68c2      	ldr	r2, [r0, #12]
    32b2:	6913      	ldr	r3, [r2, #16]
    32b4:	f013 0f03 	tst.w	r3, #3
    32b8:	d1fb      	bne.n	32b2 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32ba:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    32c0:	4770      	bx	lr

000032c2 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    32c2:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    32c4:	6913      	ldr	r3, [r2, #16]
    32c6:	f013 0f03 	tst.w	r3, #3
    32ca:	d1fb      	bne.n	32c4 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32cc:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    32d2:	4770      	bx	lr

000032d4 <_tc_get_timer>:
}
    32d4:	2000      	movs	r0, #0
    32d6:	4770      	bx	lr

000032d8 <_tc_get_pwm>:
}
    32d8:	2000      	movs	r0, #0
    32da:	4770      	bx	lr

000032dc <_timer_set_irq>:
{
    32dc:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    32de:	68c0      	ldr	r0, [r0, #12]
    32e0:	4b08      	ldr	r3, [pc, #32]	; (3304 <_timer_set_irq+0x28>)
    32e2:	4798      	blx	r3
    32e4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    32e6:	f240 129d 	movw	r2, #413	; 0x19d
    32ea:	4907      	ldr	r1, [pc, #28]	; (3308 <_timer_set_irq+0x2c>)
    32ec:	2001      	movs	r0, #1
    32ee:	4b07      	ldr	r3, [pc, #28]	; (330c <_timer_set_irq+0x30>)
    32f0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    32f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    32f6:	00a2      	lsls	r2, r4, #2
    32f8:	4b05      	ldr	r3, [pc, #20]	; (3310 <_timer_set_irq+0x34>)
    32fa:	4413      	add	r3, r2
    32fc:	7898      	ldrb	r0, [r3, #2]
    32fe:	4b05      	ldr	r3, [pc, #20]	; (3314 <_timer_set_irq+0x38>)
    3300:	4798      	blx	r3
    3302:	bd10      	pop	{r4, pc}
    3304:	00002e3d 	.word	0x00002e3d
    3308:	000058c0 	.word	0x000058c0
    330c:	0000167d 	.word	0x0000167d
    3310:	20000000 	.word	0x20000000
    3314:	00001a3d 	.word	0x00001a3d

00003318 <TC0_Handler>:
{
    3318:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    331a:	4b02      	ldr	r3, [pc, #8]	; (3324 <TC0_Handler+0xc>)
    331c:	6818      	ldr	r0, [r3, #0]
    331e:	4b02      	ldr	r3, [pc, #8]	; (3328 <TC0_Handler+0x10>)
    3320:	4798      	blx	r3
    3322:	bd08      	pop	{r3, pc}
    3324:	2000021c 	.word	0x2000021c
    3328:	00002de5 	.word	0x00002de5

0000332c <TC1_Handler>:
{
    332c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    332e:	4b02      	ldr	r3, [pc, #8]	; (3338 <TC1_Handler+0xc>)
    3330:	6858      	ldr	r0, [r3, #4]
    3332:	4b02      	ldr	r3, [pc, #8]	; (333c <TC1_Handler+0x10>)
    3334:	4798      	blx	r3
    3336:	bd08      	pop	{r3, pc}
    3338:	2000021c 	.word	0x2000021c
    333c:	00002dcd 	.word	0x00002dcd

00003340 <SDA_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    3340:	4b06      	ldr	r3, [pc, #24]	; (335c <SDA_low+0x1c>)
    3342:	2201      	movs	r2, #1
    3344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3348:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    334c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    3350:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    3354:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	41008000 	.word	0x41008000

00003360 <SDA_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3360:	4b06      	ldr	r3, [pc, #24]	; (337c <SDA_high+0x1c>)
    3362:	2201      	movs	r2, #1
    3364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3368:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    336c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    3370:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    3374:	4a02      	ldr	r2, [pc, #8]	; (3380 <SDA_high+0x20>)
    3376:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    337a:	4770      	bx	lr
    337c:	41008000 	.word	0x41008000
    3380:	c0020000 	.word	0xc0020000

00003384 <SDA_read>:
void SDA_high()
{
	gpio_set_pin_direction(I2C_BB_SDA, GPIO_DIRECTION_IN);
}
uint8_t SDA_read()
{
    3384:	b510      	push	{r4, lr}
    3386:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    3388:	a801      	add	r0, sp, #4
    338a:	4b09      	ldr	r3, [pc, #36]	; (33b0 <SDA_read+0x2c>)
    338c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    338e:	4b09      	ldr	r3, [pc, #36]	; (33b4 <SDA_read+0x30>)
    3390:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3394:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3398:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    339c:	4060      	eors	r0, r4
    339e:	4010      	ands	r0, r2
    33a0:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    33a2:	a801      	add	r0, sp, #4
    33a4:	4b04      	ldr	r3, [pc, #16]	; (33b8 <SDA_read+0x34>)
    33a6:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    33a8:	f004 0001 	and.w	r0, r4, #1
	return gpio_get_pin_level(I2C_BB_SDA);
}
    33ac:	b002      	add	sp, #8
    33ae:	bd10      	pop	{r4, pc}
    33b0:	00000d41 	.word	0x00000d41
    33b4:	41008000 	.word	0x41008000
    33b8:	00000d4f 	.word	0x00000d4f

000033bc <SCL_low>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    33bc:	4b06      	ldr	r3, [pc, #24]	; (33d8 <SCL_low+0x1c>)
    33be:	2204      	movs	r2, #4
    33c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    33c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    33c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    33cc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    33d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    33d4:	4770      	bx	lr
    33d6:	bf00      	nop
    33d8:	41008000 	.word	0x41008000

000033dc <SCL_high>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    33dc:	4b06      	ldr	r3, [pc, #24]	; (33f8 <SCL_high+0x1c>)
    33de:	2204      	movs	r2, #4
    33e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    33e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    33e8:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    33ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    33f0:	4a02      	ldr	r2, [pc, #8]	; (33fc <SCL_high+0x20>)
    33f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    33f6:	4770      	bx	lr
    33f8:	41008000 	.word	0x41008000
    33fc:	c0020000 	.word	0xc0020000

00003400 <I2C_BB_sleep>:
{
	gpio_set_pin_direction(I2C_BB_SCL, GPIO_DIRECTION_IN);
}

void I2C_BB_sleep(void)
{
    3400:	b508      	push	{r3, lr}
	delay_us(SLEEP_LENGTH);
    3402:	2064      	movs	r0, #100	; 0x64
    3404:	4b01      	ldr	r3, [pc, #4]	; (340c <I2C_BB_sleep+0xc>)
    3406:	4798      	blx	r3
    3408:	bd08      	pop	{r3, pc}
    340a:	bf00      	nop
    340c:	00000db5 	.word	0x00000db5

00003410 <I2C_BB_end>:
}


void I2C_BB_end()
{
    3410:	b510      	push	{r4, lr}
	SDA_low();
    3412:	4b05      	ldr	r3, [pc, #20]	; (3428 <I2C_BB_end+0x18>)
    3414:	4798      	blx	r3
	I2C_BB_sleep();
    3416:	4c05      	ldr	r4, [pc, #20]	; (342c <I2C_BB_end+0x1c>)
    3418:	47a0      	blx	r4
	SCL_high();
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <I2C_BB_end+0x20>)
    341c:	4798      	blx	r3
	I2C_BB_sleep();
    341e:	47a0      	blx	r4
	SDA_high();
    3420:	4b04      	ldr	r3, [pc, #16]	; (3434 <I2C_BB_end+0x24>)
    3422:	4798      	blx	r3
	I2C_BB_sleep();
    3424:	47a0      	blx	r4
    3426:	bd10      	pop	{r4, pc}
    3428:	00003341 	.word	0x00003341
    342c:	00003401 	.word	0x00003401
    3430:	000033dd 	.word	0x000033dd
    3434:	00003361 	.word	0x00003361

00003438 <I2C_BB_byte_out>:
		
	return I2C_BB_byte_out(addr);	//should receive a bool?
}

bool I2C_BB_byte_out(uint8_t byte)
{
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	4605      	mov	r5, r0
	uint8_t i, ack;

	// send byte	
	for (i = 0; i < 8; i++) {
    343c:	2400      	movs	r4, #0
    343e:	e00c      	b.n	345a <I2C_BB_byte_out+0x22>
		if (byte & 0x80)
			SDA_high();
    3440:	4b13      	ldr	r3, [pc, #76]	; (3490 <I2C_BB_byte_out+0x58>)
    3442:	4798      	blx	r3
		else
			SDA_low();
		SCL_high();
    3444:	4b13      	ldr	r3, [pc, #76]	; (3494 <I2C_BB_byte_out+0x5c>)
    3446:	4798      	blx	r3
		I2C_BB_sleep();
    3448:	4e13      	ldr	r6, [pc, #76]	; (3498 <I2C_BB_byte_out+0x60>)
    344a:	47b0      	blx	r6
		SCL_low();
    344c:	4b13      	ldr	r3, [pc, #76]	; (349c <I2C_BB_byte_out+0x64>)
    344e:	4798      	blx	r3
		byte <<= 1;
    3450:	006d      	lsls	r5, r5, #1
    3452:	b2ed      	uxtb	r5, r5
		I2C_BB_sleep();
    3454:	47b0      	blx	r6
	for (i = 0; i < 8; i++) {
    3456:	3401      	adds	r4, #1
    3458:	b2e4      	uxtb	r4, r4
    345a:	2c07      	cmp	r4, #7
    345c:	d805      	bhi.n	346a <I2C_BB_byte_out+0x32>
		if (byte & 0x80)
    345e:	f015 0f80 	tst.w	r5, #128	; 0x80
    3462:	d1ed      	bne.n	3440 <I2C_BB_byte_out+0x8>
			SDA_low();
    3464:	4b0e      	ldr	r3, [pc, #56]	; (34a0 <I2C_BB_byte_out+0x68>)
    3466:	4798      	blx	r3
    3468:	e7ec      	b.n	3444 <I2C_BB_byte_out+0xc>
	}
	// read ack bit
	SDA_high();
    346a:	4b09      	ldr	r3, [pc, #36]	; (3490 <I2C_BB_byte_out+0x58>)
    346c:	4798      	blx	r3
	SCL_high();
    346e:	4b09      	ldr	r3, [pc, #36]	; (3494 <I2C_BB_byte_out+0x5c>)
    3470:	4798      	blx	r3
	I2C_BB_sleep();
    3472:	4c09      	ldr	r4, [pc, #36]	; (3498 <I2C_BB_byte_out+0x60>)
    3474:	47a0      	blx	r4
	ack = SDA_read();
    3476:	4b0b      	ldr	r3, [pc, #44]	; (34a4 <I2C_BB_byte_out+0x6c>)
    3478:	4798      	blx	r3
    347a:	4605      	mov	r5, r0
	SCL_low();
    347c:	4b07      	ldr	r3, [pc, #28]	; (349c <I2C_BB_byte_out+0x64>)
    347e:	4798      	blx	r3
	I2C_BB_sleep();
    3480:	47a0      	blx	r4
	SDA_low();
    3482:	4b07      	ldr	r3, [pc, #28]	; (34a0 <I2C_BB_byte_out+0x68>)
    3484:	4798      	blx	r3
	return (ack == 0) ? 1:0;   //
}
    3486:	fab5 f085 	clz	r0, r5
    348a:	0940      	lsrs	r0, r0, #5
    348c:	bd70      	pop	{r4, r5, r6, pc}
    348e:	bf00      	nop
    3490:	00003361 	.word	0x00003361
    3494:	000033dd 	.word	0x000033dd
    3498:	00003401 	.word	0x00003401
    349c:	000033bd 	.word	0x000033bd
    34a0:	00003341 	.word	0x00003341
    34a4:	00003385 	.word	0x00003385

000034a8 <I2C_BB_begin>:
{
    34a8:	b538      	push	{r3, r4, r5, lr}
    34aa:	4604      	mov	r4, r0
    34ac:	460d      	mov	r5, r1
	SDA_low();
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <I2C_BB_begin+0x24>)
    34b0:	4798      	blx	r3
	I2C_BB_sleep();
    34b2:	4b07      	ldr	r3, [pc, #28]	; (34d0 <I2C_BB_begin+0x28>)
    34b4:	4798      	blx	r3
	SCL_low();
    34b6:	4b07      	ldr	r3, [pc, #28]	; (34d4 <I2C_BB_begin+0x2c>)
    34b8:	4798      	blx	r3
	addr=addr<<1;		//7 bit address shifted one bit to make room for the RW bit
    34ba:	0060      	lsls	r0, r4, #1
    34bc:	b2c0      	uxtb	r0, r0
	if (read)
    34be:	b10d      	cbz	r5, 34c4 <I2C_BB_begin+0x1c>
		addr++;		
    34c0:	3001      	adds	r0, #1
    34c2:	b2c0      	uxtb	r0, r0
	return I2C_BB_byte_out(addr);	//should receive a bool?
    34c4:	4b04      	ldr	r3, [pc, #16]	; (34d8 <I2C_BB_begin+0x30>)
    34c6:	4798      	blx	r3
}
    34c8:	bd38      	pop	{r3, r4, r5, pc}
    34ca:	bf00      	nop
    34cc:	00003341 	.word	0x00003341
    34d0:	00003401 	.word	0x00003401
    34d4:	000033bd 	.word	0x000033bd
    34d8:	00003439 	.word	0x00003439

000034dc <I2C_BB_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34dc:	4b14      	ldr	r3, [pc, #80]	; (3530 <I2C_BB_init+0x54>)
    34de:	2201      	movs	r2, #1
    34e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    34e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    34e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    34ec:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    34f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    34f4:	490f      	ldr	r1, [pc, #60]	; (3534 <I2C_BB_init+0x58>)
    34f6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    34fa:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    34fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3502:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3506:	2204      	movs	r2, #4
    3508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    350c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3510:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3514:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    3518:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    351c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3520:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
    3524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3528:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	41008000 	.word	0x41008000
    3534:	c0020000 	.word	0xc0020000

00003538 <I2C_BB_write>:
	// The HV892 is write only. 
	return 0;
}

uint8_t I2C_BB_write(uint8_t addr, uint8_t value)
{
    3538:	b510      	push	{r4, lr}
    353a:	460c      	mov	r4, r1
	uint8_t rc = 0;

	rc = I2C_BB_begin(addr, 0);    //read ack
    353c:	2100      	movs	r1, #0
    353e:	4b05      	ldr	r3, [pc, #20]	; (3554 <I2C_BB_write+0x1c>)
    3540:	4798      	blx	r3
	if (rc == 1) { // ack was received
    3542:	b918      	cbnz	r0, 354c <I2C_BB_write+0x14>
		I2C_BB_byte_out(value);
	}

	I2C_BB_end();
    3544:	4b04      	ldr	r3, [pc, #16]	; (3558 <I2C_BB_write+0x20>)
    3546:	4798      	blx	r3
	return 0;
}
    3548:	2000      	movs	r0, #0
    354a:	bd10      	pop	{r4, pc}
		I2C_BB_byte_out(value);
    354c:	4620      	mov	r0, r4
    354e:	4b03      	ldr	r3, [pc, #12]	; (355c <I2C_BB_write+0x24>)
    3550:	4798      	blx	r3
    3552:	e7f7      	b.n	3544 <I2C_BB_write+0xc>
    3554:	000034a9 	.word	0x000034a9
    3558:	00003411 	.word	0x00003411
    355c:	00003439 	.word	0x00003439

00003560 <millisecondTimer_cb>:
	SDTransferDescriptor = (temp)|attribute|SD_DESCRIPTOR_LENGTH(length);
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    3560:	4a02      	ldr	r2, [pc, #8]	; (356c <millisecondTimer_cb+0xc>)
    3562:	6813      	ldr	r3, [r2, #0]
    3564:	3301      	adds	r3, #1
    3566:	6013      	str	r3, [r2, #0]
    3568:	4770      	bx	lr
    356a:	bf00      	nop
    356c:	20000224 	.word	0x20000224

00003570 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    3570:	b510      	push	{r4, lr}
    3572:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    3574:	2301      	movs	r3, #1
    3576:	f10d 0207 	add.w	r2, sp, #7
    357a:	2100      	movs	r1, #0
    357c:	4809      	ldr	r0, [pc, #36]	; (35a4 <checkBattVoltage_cb+0x34>)
    357e:	4c0a      	ldr	r4, [pc, #40]	; (35a8 <checkBattVoltage_cb+0x38>)
    3580:	47a0      	blx	r4
	battVolt = adcValue;
    3582:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3586:	4a09      	ldr	r2, [pc, #36]	; (35ac <checkBattVoltage_cb+0x3c>)
    3588:	7013      	strb	r3, [r2, #0]
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 148) {
    358a:	2b93      	cmp	r3, #147	; 0x93
    358c:	d808      	bhi.n	35a0 <checkBattVoltage_cb+0x30>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    358e:	4b08      	ldr	r3, [pc, #32]	; (35b0 <checkBattVoltage_cb+0x40>)
    3590:	681a      	ldr	r2, [r3, #0]
    3592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3596:	601a      	str	r2, [r3, #0]
		deviceState |= DEVICE_STATE_STOP_RECORDING;
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	f042 0210 	orr.w	r2, r2, #16
    359e:	601a      	str	r2, [r3, #0]
	}
}
    35a0:	b002      	add	sp, #8
    35a2:	bd10      	pop	{r4, pc}
    35a4:	200006d8 	.word	0x200006d8
    35a8:	00000ca1 	.word	0x00000ca1
    35ac:	20000b92 	.word	0x20000b92
    35b0:	20000028 	.word	0x20000028

000035b4 <irReceive_cb>:
		deviceState |= DEVICE_STATE_CHARGING;
	}
}

static void irReceive_cb(void)
{
    35b4:	b500      	push	{lr}
    35b6:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    35b8:	a801      	add	r0, sp, #4
    35ba:	4b07      	ldr	r3, [pc, #28]	; (35d8 <irReceive_cb+0x24>)
    35bc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    35be:	4b07      	ldr	r3, [pc, #28]	; (35dc <irReceive_cb+0x28>)
    35c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    35c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    35c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
	CRITICAL_SECTION_LEAVE();
    35cc:	a801      	add	r0, sp, #4
    35ce:	4b04      	ldr	r3, [pc, #16]	; (35e0 <irReceive_cb+0x2c>)
    35d0:	4798      	blx	r3
		
	}
	else {
		
	}	
}
    35d2:	b003      	add	sp, #12
    35d4:	f85d fb04 	ldr.w	pc, [sp], #4
    35d8:	00000d41 	.word	0x00000d41
    35dc:	41008000 	.word	0x41008000
    35e0:	00000d4f 	.word	0x00000d4f

000035e4 <pushButton_cb>:

static void pushButton_cb(void)
{
    35e4:	b500      	push	{lr}
    35e6:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    35e8:	a801      	add	r0, sp, #4
    35ea:	4b06      	ldr	r3, [pc, #24]	; (3604 <pushButton_cb+0x20>)
    35ec:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    35ee:	4b06      	ldr	r3, [pc, #24]	; (3608 <pushButton_cb+0x24>)
    35f0:	681a      	ldr	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    35f2:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    35f4:	691b      	ldr	r3, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    35f6:	a801      	add	r0, sp, #4
    35f8:	4b04      	ldr	r3, [pc, #16]	; (360c <pushButton_cb+0x28>)
    35fa:	4798      	blx	r3
		
	}
	else {
		
	}
}
    35fc:	b003      	add	sp, #12
    35fe:	f85d fb04 	ldr.w	pc, [sp], #4
    3602:	bf00      	nop
    3604:	00000d41 	.word	0x00000d41
    3608:	41008000 	.word	0x41008000
    360c:	00000d4f 	.word	0x00000d4f

00003610 <battCharging_cb>:
{
    3610:	b510      	push	{r4, lr}
    3612:	b082      	sub	sp, #8
	CRITICAL_SECTION_ENTER();
    3614:	a801      	add	r0, sp, #4
    3616:	4b0f      	ldr	r3, [pc, #60]	; (3654 <battCharging_cb+0x44>)
    3618:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    361a:	4b0f      	ldr	r3, [pc, #60]	; (3658 <battCharging_cb+0x48>)
    361c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3620:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3624:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3628:	4054      	eors	r4, r2
    362a:	400c      	ands	r4, r1
    362c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    362e:	a801      	add	r0, sp, #4
    3630:	4b0a      	ldr	r3, [pc, #40]	; (365c <battCharging_cb+0x4c>)
    3632:	4798      	blx	r3
	if (pinState == true) {
    3634:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    3638:	d106      	bne.n	3648 <battCharging_cb+0x38>
		deviceState |= DEVICE_STATE_CHARGING;
    363a:	4a09      	ldr	r2, [pc, #36]	; (3660 <battCharging_cb+0x50>)
    363c:	6813      	ldr	r3, [r2, #0]
    363e:	f043 0320 	orr.w	r3, r3, #32
    3642:	6013      	str	r3, [r2, #0]
}
    3644:	b002      	add	sp, #8
    3646:	bd10      	pop	{r4, pc}
		deviceState &= ~(DEVICE_STATE_CHARGING);
    3648:	4a05      	ldr	r2, [pc, #20]	; (3660 <battCharging_cb+0x50>)
    364a:	6813      	ldr	r3, [r2, #0]
    364c:	f023 0320 	bic.w	r3, r3, #32
    3650:	6013      	str	r3, [r2, #0]
    3652:	e7f7      	b.n	3644 <battCharging_cb+0x34>
    3654:	00000d41 	.word	0x00000d41
    3658:	41008000 	.word	0x41008000
    365c:	00000d4f 	.word	0x00000d4f
    3660:	20000028 	.word	0x20000028

00003664 <spi_BB_Write>:
		break;
	}
}

void spi_BB_Write(uint16_t address, uint16_t value) 
{
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	4607      	mov	r7, r0
    366a:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    366c:	4d2f      	ldr	r5, [pc, #188]	; (372c <spi_BB_Write+0xc8>)
    366e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    3672:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	int8_t i = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    3676:	200a      	movs	r0, #10
    3678:	4c2d      	ldr	r4, [pc, #180]	; (3730 <spi_BB_Write+0xcc>)
    367a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    367c:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    3680:	200a      	movs	r0, #10
    3682:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    3684:	2408      	movs	r4, #8
    3686:	e00c      	b.n	36a2 <spi_BB_Write+0x3e>
    3688:	2210      	movs	r2, #16
    368a:	4b28      	ldr	r3, [pc, #160]	; (372c <spi_BB_Write+0xc8>)
    368c:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    368e:	200a      	movs	r0, #10
    3690:	4d27      	ldr	r5, [pc, #156]	; (3730 <spi_BB_Write+0xcc>)
    3692:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3694:	2220      	movs	r2, #32
    3696:	4b25      	ldr	r3, [pc, #148]	; (372c <spi_BB_Write+0xc8>)
    3698:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    369a:	200a      	movs	r0, #10
    369c:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    369e:	3c01      	subs	r4, #1
    36a0:	b264      	sxtb	r4, r4
    36a2:	2c00      	cmp	r4, #0
    36a4:	db0b      	blt.n	36be <spi_BB_Write+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36a6:	2220      	movs	r2, #32
    36a8:	4b20      	ldr	r3, [pc, #128]	; (372c <spi_BB_Write+0xc8>)
    36aa:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    36ac:	fa47 f304 	asr.w	r3, r7, r4
    36b0:	f013 0f01 	tst.w	r3, #1
    36b4:	d0e8      	beq.n	3688 <spi_BB_Write+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36b6:	2210      	movs	r2, #16
    36b8:	4b1c      	ldr	r3, [pc, #112]	; (372c <spi_BB_Write+0xc8>)
    36ba:	619a      	str	r2, [r3, #24]
    36bc:	e7e7      	b.n	368e <spi_BB_Write+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36be:	4c1b      	ldr	r4, [pc, #108]	; (372c <spi_BB_Write+0xc8>)
    36c0:	2720      	movs	r7, #32
    36c2:	6167      	str	r7, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36c4:	2310      	movs	r3, #16
    36c6:	61a3      	str	r3, [r4, #24]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 1);
	delay_us(10);
    36c8:	200a      	movs	r0, #10
    36ca:	4d19      	ldr	r5, [pc, #100]	; (3730 <spi_BB_Write+0xcc>)
    36cc:	47a8      	blx	r5
    36ce:	61a7      	str	r7, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    36d0:	200a      	movs	r0, #10
    36d2:	47a8      	blx	r5
		
	// Value
	for (i=15; i >=0 ;i--) {
    36d4:	240f      	movs	r4, #15
    36d6:	e00c      	b.n	36f2 <spi_BB_Write+0x8e>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36d8:	2210      	movs	r2, #16
    36da:	4b14      	ldr	r3, [pc, #80]	; (372c <spi_BB_Write+0xc8>)
    36dc:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
			
		delay_us(10);
    36de:	200a      	movs	r0, #10
    36e0:	4d13      	ldr	r5, [pc, #76]	; (3730 <spi_BB_Write+0xcc>)
    36e2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    36e4:	2220      	movs	r2, #32
    36e6:	4b11      	ldr	r3, [pc, #68]	; (372c <spi_BB_Write+0xc8>)
    36e8:	619a      	str	r2, [r3, #24]
			
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    36ea:	200a      	movs	r0, #10
    36ec:	47a8      	blx	r5
	for (i=15; i >=0 ;i--) {
    36ee:	3c01      	subs	r4, #1
    36f0:	b264      	sxtb	r4, r4
    36f2:	2c00      	cmp	r4, #0
    36f4:	db0b      	blt.n	370e <spi_BB_Write+0xaa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    36f6:	2220      	movs	r2, #32
    36f8:	4b0c      	ldr	r3, [pc, #48]	; (372c <spi_BB_Write+0xc8>)
    36fa:	615a      	str	r2, [r3, #20]
		if (0x0001&(value>>i)) //a 1
    36fc:	fa46 f304 	asr.w	r3, r6, r4
    3700:	f013 0f01 	tst.w	r3, #1
    3704:	d0e8      	beq.n	36d8 <spi_BB_Write+0x74>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3706:	2210      	movs	r2, #16
    3708:	4b08      	ldr	r3, [pc, #32]	; (372c <spi_BB_Write+0xc8>)
    370a:	619a      	str	r2, [r3, #24]
    370c:	e7e7      	b.n	36de <spi_BB_Write+0x7a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    370e:	4c07      	ldr	r4, [pc, #28]	; (372c <spi_BB_Write+0xc8>)
    3710:	2320      	movs	r3, #32
    3712:	6163      	str	r3, [r4, #20]
	}
		
	gpio_set_pin_level(SPI_SCK, 0);
	//delay_us(10);
	//gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    3714:	200a      	movs	r0, #10
    3716:	4d06      	ldr	r5, [pc, #24]	; (3730 <spi_BB_Write+0xcc>)
    3718:	47a8      	blx	r5
	delay_us(10);
    371a:	200a      	movs	r0, #10
    371c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    371e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3722:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    3726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    372a:	bf00      	nop
    372c:	41008000 	.word	0x41008000
    3730:	00000db5 	.word	0x00000db5

00003734 <python480SetGain>:
{
    3734:	b508      	push	{r3, lr}
	switch (value)
    3736:	2802      	cmp	r0, #2
    3738:	d00d      	beq.n	3756 <python480SetGain+0x22>
    373a:	2804      	cmp	r0, #4
    373c:	d010      	beq.n	3760 <python480SetGain+0x2c>
    373e:	2801      	cmp	r0, #1
    3740:	d004      	beq.n	374c <python480SetGain+0x18>
		spi_BB_Write(204, 0x00E1);
    3742:	21e1      	movs	r1, #225	; 0xe1
    3744:	20cc      	movs	r0, #204	; 0xcc
    3746:	4b09      	ldr	r3, [pc, #36]	; (376c <python480SetGain+0x38>)
    3748:	4798      	blx	r3
    374a:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E1);
    374c:	21e1      	movs	r1, #225	; 0xe1
    374e:	20cc      	movs	r0, #204	; 0xcc
    3750:	4b06      	ldr	r3, [pc, #24]	; (376c <python480SetGain+0x38>)
    3752:	4798      	blx	r3
		break;
    3754:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x00E4);
    3756:	21e4      	movs	r1, #228	; 0xe4
    3758:	20cc      	movs	r0, #204	; 0xcc
    375a:	4b04      	ldr	r3, [pc, #16]	; (376c <python480SetGain+0x38>)
    375c:	4798      	blx	r3
		break;
    375e:	bd08      	pop	{r3, pc}
		spi_BB_Write(204, 0x0024);
    3760:	2124      	movs	r1, #36	; 0x24
    3762:	20cc      	movs	r0, #204	; 0xcc
    3764:	4b01      	ldr	r3, [pc, #4]	; (376c <python480SetGain+0x38>)
    3766:	4798      	blx	r3
		break;
    3768:	bd08      	pop	{r3, pc}
    376a:	bf00      	nop
    376c:	00003665 	.word	0x00003665

00003770 <python480SetFPS>:
{
    3770:	b508      	push	{r3, lr}
	switch (value)
    3772:	3805      	subs	r0, #5
    3774:	280f      	cmp	r0, #15
    3776:	d820      	bhi.n	37ba <python480SetFPS+0x4a>
    3778:	e8df f000 	tbb	[pc, r0]
    377c:	1f1f1f08 	.word	0x1f1f1f08
    3780:	1f1f0e1f 	.word	0x1f1f0e1f
    3784:	1f141f1f 	.word	0x1f141f1f
    3788:	1a1f1f1f 	.word	0x1a1f1f1f
		spi_BB_Write(0xC9, 20000);
    378c:	f644 6120 	movw	r1, #20000	; 0x4e20
    3790:	20c9      	movs	r0, #201	; 0xc9
    3792:	4b0a      	ldr	r3, [pc, #40]	; (37bc <python480SetFPS+0x4c>)
    3794:	4798      	blx	r3
		break;
    3796:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 10000);
    3798:	f242 7110 	movw	r1, #10000	; 0x2710
    379c:	20c9      	movs	r0, #201	; 0xc9
    379e:	4b07      	ldr	r3, [pc, #28]	; (37bc <python480SetFPS+0x4c>)
    37a0:	4798      	blx	r3
		break;
    37a2:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 6667);
    37a4:	f641 210b 	movw	r1, #6667	; 0x1a0b
    37a8:	20c9      	movs	r0, #201	; 0xc9
    37aa:	4b04      	ldr	r3, [pc, #16]	; (37bc <python480SetFPS+0x4c>)
    37ac:	4798      	blx	r3
		break;
    37ae:	bd08      	pop	{r3, pc}
		spi_BB_Write(0xC9, 5000);
    37b0:	f241 3188 	movw	r1, #5000	; 0x1388
    37b4:	20c9      	movs	r0, #201	; 0xc9
    37b6:	4b01      	ldr	r3, [pc, #4]	; (37bc <python480SetFPS+0x4c>)
    37b8:	4798      	blx	r3
    37ba:	bd08      	pop	{r3, pc}
    37bc:	00003665 	.word	0x00003665

000037c0 <spi_BB_Read>:
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	
}

uint16_t spi_BB_Read(uint16_t address)
{
    37c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37c4:	b082      	sub	sp, #8
    37c6:	4606      	mov	r6, r0
    37c8:	4d33      	ldr	r5, [pc, #204]	; (3898 <spi_BB_Read+0xd8>)
    37ca:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    37ce:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	int8_t i = 0;
	uint16_t value = 0;
	//Bitbang SPI Master.
	gpio_set_pin_level(SPI_NSS, 1); // Make sure NSS is high
	delay_us(10);
    37d2:	200a      	movs	r0, #10
    37d4:	4c31      	ldr	r4, [pc, #196]	; (389c <spi_BB_Read+0xdc>)
    37d6:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37d8:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
	gpio_set_pin_level(SPI_NSS, 0); // Pull SPI chip select pin low
	delay_us(10);
    37dc:	200a      	movs	r0, #10
    37de:	47a0      	blx	r4
	
	for (i = 8; i >= 0 ;i--) { // 9bit address
    37e0:	2408      	movs	r4, #8
    37e2:	e00c      	b.n	37fe <spi_BB_Read+0x3e>
    37e4:	2210      	movs	r2, #16
    37e6:	4b2c      	ldr	r3, [pc, #176]	; (3898 <spi_BB_Read+0xd8>)
    37e8:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
			gpio_set_pin_level(SPI_MOSI, 1);
		else // a 0
			gpio_set_pin_level(SPI_MOSI, 0);
		
		delay_us(10);
    37ea:	200a      	movs	r0, #10
    37ec:	4d2b      	ldr	r5, [pc, #172]	; (389c <spi_BB_Read+0xdc>)
    37ee:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37f0:	2220      	movs	r2, #32
    37f2:	4b29      	ldr	r3, [pc, #164]	; (3898 <spi_BB_Read+0xd8>)
    37f4:	619a      	str	r2, [r3, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    37f6:	200a      	movs	r0, #10
    37f8:	47a8      	blx	r5
	for (i = 8; i >= 0 ;i--) { // 9bit address
    37fa:	3c01      	subs	r4, #1
    37fc:	b264      	sxtb	r4, r4
    37fe:	2c00      	cmp	r4, #0
    3800:	db0b      	blt.n	381a <spi_BB_Read+0x5a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3802:	2220      	movs	r2, #32
    3804:	4b24      	ldr	r3, [pc, #144]	; (3898 <spi_BB_Read+0xd8>)
    3806:	615a      	str	r2, [r3, #20]
		if (0x0001&(address>>i)) //a 1
    3808:	fa46 f304 	asr.w	r3, r6, r4
    380c:	f013 0f01 	tst.w	r3, #1
    3810:	d0e8      	beq.n	37e4 <spi_BB_Read+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3812:	2210      	movs	r2, #16
    3814:	4b20      	ldr	r3, [pc, #128]	; (3898 <spi_BB_Read+0xd8>)
    3816:	619a      	str	r2, [r3, #24]
    3818:	e7e7      	b.n	37ea <spi_BB_Read+0x2a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    381a:	4c1f      	ldr	r4, [pc, #124]	; (3898 <spi_BB_Read+0xd8>)
    381c:	2620      	movs	r6, #32
    381e:	6166      	str	r6, [r4, #20]
    3820:	2310      	movs	r3, #16
    3822:	6163      	str	r3, [r4, #20]
	}
	// Write bit
	gpio_set_pin_level(SPI_SCK, 0);
	gpio_set_pin_level(SPI_MOSI, 0); // Set read bit to 0
	delay_us(10);
    3824:	200a      	movs	r0, #10
    3826:	4d1d      	ldr	r5, [pc, #116]	; (389c <spi_BB_Read+0xdc>)
    3828:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    382a:	61a6      	str	r6, [r4, #24]
	gpio_set_pin_level(SPI_SCK, 1);
	delay_us(10);
    382c:	200a      	movs	r0, #10
    382e:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3830:	6166      	str	r6, [r4, #20]
	// extra sck transitions for read operation
	gpio_set_pin_level(SPI_SCK, 0);
	delay_us(10);
    3832:	200a      	movs	r0, #10
    3834:	47a8      	blx	r5
	uint16_t value = 0;
    3836:	2700      	movs	r7, #0
	
	
	// Value
	for (i=15; i >=0 ;i--) {
    3838:	250f      	movs	r5, #15
    383a:	e01e      	b.n	387a <spi_BB_Read+0xba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    383c:	4c16      	ldr	r4, [pc, #88]	; (3898 <spi_BB_Read+0xd8>)
    383e:	f04f 0820 	mov.w	r8, #32
    3842:	f8c4 8018 	str.w	r8, [r4, #24]
		gpio_set_pin_level(SPI_SCK, 1);
		delay_us(10);
    3846:	200a      	movs	r0, #10
    3848:	4e14      	ldr	r6, [pc, #80]	; (389c <spi_BB_Read+0xdc>)
    384a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    384c:	f8c4 8014 	str.w	r8, [r4, #20]
	CRITICAL_SECTION_ENTER();
    3850:	a801      	add	r0, sp, #4
    3852:	4b13      	ldr	r3, [pc, #76]	; (38a0 <spi_BB_Read+0xe0>)
    3854:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3856:	6822      	ldr	r2, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3858:	6a23      	ldr	r3, [r4, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    385a:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    385c:	405c      	eors	r4, r3
    385e:	4014      	ands	r4, r2
    3860:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3862:	a801      	add	r0, sp, #4
    3864:	4b0f      	ldr	r3, [pc, #60]	; (38a4 <spi_BB_Read+0xe4>)
    3866:	4798      	blx	r3
    3868:	f3c4 1480 	ubfx	r4, r4, #6, #1
		gpio_set_pin_level(SPI_SCK, 0);
		// read bit
		value |= (gpio_get_pin_level(SPI_MISO) << i);		
    386c:	40ac      	lsls	r4, r5
    386e:	433c      	orrs	r4, r7
    3870:	b2a7      	uxth	r7, r4
		delay_us(10);	
    3872:	200a      	movs	r0, #10
    3874:	47b0      	blx	r6
	for (i=15; i >=0 ;i--) {
    3876:	3d01      	subs	r5, #1
    3878:	b26d      	sxtb	r5, r5
    387a:	2d00      	cmp	r5, #0
    387c:	dade      	bge.n	383c <spi_BB_Read+0x7c>
	}
	delay_us(10);
    387e:	200a      	movs	r0, #10
    3880:	4b06      	ldr	r3, [pc, #24]	; (389c <spi_BB_Read+0xdc>)
    3882:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3888:	4b03      	ldr	r3, [pc, #12]	; (3898 <spi_BB_Read+0xd8>)
    388a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gpio_set_pin_level(SPI_NSS, 1); // Pull SPI chip select pin high
	return value;
}
    388e:	4638      	mov	r0, r7
    3890:	b002      	add	sp, #8
    3892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3896:	bf00      	nop
    3898:	41008000 	.word	0x41008000
    389c:	00000db5 	.word	0x00000db5
    38a0:	00000d41 	.word	0x00000d41
    38a4:	00000d4f 	.word	0x00000d4f

000038a8 <EnableClockMngmnt1>:

void EnableClockMngmnt1() {
    38a8:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits

	spi_BB_Write(2, 0x0000);// Monochrome sensor
    38aa:	2100      	movs	r1, #0
    38ac:	2002      	movs	r0, #2
    38ae:	4c0e      	ldr	r4, [pc, #56]	; (38e8 <EnableClockMngmnt1+0x40>)
    38b0:	47a0      	blx	r4
	spi_BB_Write(17, 0x2113);// Configure PLL
    38b2:	f242 1113 	movw	r1, #8467	; 0x2113
    38b6:	2011      	movs	r0, #17
    38b8:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);// Configure clock management
    38ba:	2100      	movs	r1, #0
    38bc:	2014      	movs	r0, #20
    38be:	47a0      	blx	r4
	spi_BB_Write(26, 0x2280);// Configure PLL lock detector
    38c0:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    38c4:	201a      	movs	r0, #26
    38c6:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);// Configure PLL lock detector
    38c8:	f643 512d 	movw	r1, #15661	; 0x3d2d
    38cc:	201b      	movs	r0, #27
    38ce:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7014|0x0008);// spi_BB_Write(32, 0x2004);PLL input clock
    38d0:	f247 011c 	movw	r1, #28700	; 0x701c
    38d4:	2020      	movs	r0, #32
    38d6:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7014);// spi_BB_Write(32, 0x2004);PLL input clock
	#endif
	spi_BB_Write(8, 0x0000);// Release PLL soft reset
    38d8:	2100      	movs	r1, #0
    38da:	2008      	movs	r0, #8
    38dc:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(16,0x0007);// Disable PLL
    38de:	2107      	movs	r1, #7
    38e0:	2010      	movs	r0, #16
    38e2:	47a0      	blx	r4
    38e4:	bd10      	pop	{r4, pc}
    38e6:	bf00      	nop
    38e8:	00003665 	.word	0x00003665

000038ec <EnableClockMngmnt2>:
	#else
	spi_BB_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() {// Enable internal clock distribution
    38ec:	b510      	push	{r4, lr}

	spi_BB_Write(9, 0x0000);// Release clock generator Soft Reset
    38ee:	2100      	movs	r1, #0
    38f0:	2009      	movs	r0, #9
    38f2:	4c05      	ldr	r4, [pc, #20]	; (3908 <EnableClockMngmnt2+0x1c>)
    38f4:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7006|0x0008);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
    38f6:	f247 010e 	movw	r1, #28686	; 0x700e
    38fa:	2020      	movs	r0, #32
    38fc:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7006);// spi_BB_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	spi_BB_Write(34, 0x0001);// Enable logic blocks
    38fe:	2101      	movs	r1, #1
    3900:	2022      	movs	r0, #34	; 0x22
    3902:	47a0      	blx	r4
    3904:	bd10      	pop	{r4, pc}
    3906:	bf00      	nop
    3908:	00003665 	.word	0x00003665

0000390c <RequiredUploads>:
}

void RequiredUploads() {// Reserved register settings uploads
    390c:	b510      	push	{r4, lr}

	spi_BB_Write(2, 0x0000);
    390e:	2100      	movs	r1, #0
    3910:	2002      	movs	r0, #2
    3912:	4ccd      	ldr	r4, [pc, #820]	; (3c48 <RequiredUploads+0x33c>)
    3914:	47a0      	blx	r4
	spi_BB_Write(8, 0x0000);
    3916:	2100      	movs	r1, #0
    3918:	2008      	movs	r0, #8
    391a:	47a0      	blx	r4
	spi_BB_Write(9, 0x0000);
    391c:	2100      	movs	r1, #0
    391e:	2009      	movs	r0, #9
    3920:	47a0      	blx	r4
	spi_BB_Write(10, 0x0000);
    3922:	2100      	movs	r1, #0
    3924:	200a      	movs	r0, #10
    3926:	47a0      	blx	r4
	spi_BB_Write(20, 0x0000);
    3928:	2100      	movs	r1, #0
    392a:	2014      	movs	r0, #20
    392c:	47a0      	blx	r4
	//spi_BB_Write(24, 0x0001);
	spi_BB_Write(26, 0x2280);
    392e:	f44f 510a 	mov.w	r1, #8832	; 0x2280
    3932:	201a      	movs	r0, #26
    3934:	47a0      	blx	r4
	spi_BB_Write(27, 0x3D2D);
    3936:	f643 512d 	movw	r1, #15661	; 0x3d2d
    393a:	201b      	movs	r0, #27
    393c:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);
    393e:	f247 010f 	movw	r1, #28687	; 0x700f
    3942:	2020      	movs	r0, #32
    3944:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);
	#endif
	spi_BB_Write(34, 0x0001);
    3946:	2101      	movs	r1, #1
    3948:	2022      	movs	r0, #34	; 0x22
    394a:	47a0      	blx	r4
	spi_BB_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
    394c:	2107      	movs	r1, #7
    394e:	2028      	movs	r0, #40	; 0x28
    3950:	47a0      	blx	r4
	spi_BB_Write(41, 0x085F);
    3952:	f640 015f 	movw	r1, #2143	; 0x85f
    3956:	2029      	movs	r0, #41	; 0x29
    3958:	47a0      	blx	r4
	spi_BB_Write(42, 0x4103);
    395a:	f244 1103 	movw	r1, #16643	; 0x4103
    395e:	202a      	movs	r0, #42	; 0x2a
    3960:	47a0      	blx	r4
	spi_BB_Write(43, 0x0518);
    3962:	f44f 61a3 	mov.w	r1, #1304	; 0x518
    3966:	202b      	movs	r0, #43	; 0x2b
    3968:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);
    396a:	2101      	movs	r1, #1
    396c:	2030      	movs	r0, #48	; 0x30
    396e:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);
    3970:	2101      	movs	r1, #1
    3972:	2040      	movs	r0, #64	; 0x40
    3974:	47a0      	blx	r4
	spi_BB_Write(65, 0x382A); //Bias block. spi_BB_Write(65, 0x382B)
    3976:	f643 012a 	movw	r1, #14378	; 0x382a
    397a:	2041      	movs	r0, #65	; 0x41
    397c:	47a0      	blx	r4
	spi_BB_Write(66, 0x53C8);
    397e:	f245 31c8 	movw	r1, #21448	; 0x53c8
    3982:	2042      	movs	r0, #66	; 0x42
    3984:	47a0      	blx	r4
	spi_BB_Write(67, 0x0665);
    3986:	f240 6165 	movw	r1, #1637	; 0x665
    398a:	2043      	movs	r0, #67	; 0x43
    398c:	47a0      	blx	r4
	spi_BB_Write(68, 0x0085);
    398e:	2185      	movs	r1, #133	; 0x85
    3990:	2044      	movs	r0, #68	; 0x44
    3992:	47a0      	blx	r4
	spi_BB_Write(69, 0x0888);
    3994:	f640 0188 	movw	r1, #2184	; 0x888
    3998:	2045      	movs	r0, #69	; 0x45
    399a:	47a0      	blx	r4
	spi_BB_Write(70, 0x4800);
    399c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
    39a0:	2046      	movs	r0, #70	; 0x46
    39a2:	47a0      	blx	r4
	spi_BB_Write(71, 0x8888);
    39a4:	f648 0188 	movw	r1, #34952	; 0x8888
    39a8:	2047      	movs	r0, #71	; 0x47
    39aa:	47a0      	blx	r4
	spi_BB_Write(72, 0x0117);
    39ac:	f240 1117 	movw	r1, #279	; 0x117
    39b0:	2048      	movs	r0, #72	; 0x48
    39b2:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);
	spi_BB_Write(112, 0x0000); // LVDS powerdown config
    39b4:	2100      	movs	r1, #0
    39b6:	2070      	movs	r0, #112	; 0x70
    39b8:	47a0      	blx	r4
	spi_BB_Write(128, 0x470A); //spi_BB_Write(128, 0x470A); spi_BB_Write(128, 0x4714); black offset
    39ba:	f244 710a 	movw	r1, #18186	; 0x470a
    39be:	2080      	movs	r0, #128	; 0x80
    39c0:	47a0      	blx	r4
	spi_BB_Write(129, 0x8001);
    39c2:	f248 0101 	movw	r1, #32769	; 0x8001
    39c6:	2081      	movs	r0, #129	; 0x81
    39c8:	47a0      	blx	r4
	//spi_BB_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//spi_BB_Write(144,0x0003);

	spi_BB_Write(130, 0x0015);
    39ca:	2115      	movs	r1, #21
    39cc:	2082      	movs	r0, #130	; 0x82
    39ce:	47a0      	blx	r4
	spi_BB_Write(192, 0x0801); // Monitor select function. Sets subsampling too
    39d0:	f640 0101 	movw	r1, #2049	; 0x801
    39d4:	20c0      	movs	r0, #192	; 0xc0
    39d6:	47a0      	blx	r4
	spi_BB_Write(194, 0x00E4);	// reverse x and y enabled for demo kit compatibility
    39d8:	21e4      	movs	r1, #228	; 0xe4
    39da:	20c2      	movs	r0, #194	; 0xc2
    39dc:	47a0      	blx	r4
	spi_BB_Write(197, 0x0104); // 0x0380) Num black lines spi_BB_Write(197, 0x030A);
    39de:	f44f 7182 	mov.w	r1, #260	; 0x104
    39e2:	20c5      	movs	r0, #197	; 0xc5
    39e4:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	//spi_BB_Write(199, 167); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(199, 50); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
    39e6:	2132      	movs	r1, #50	; 0x32
    39e8:	20c7      	movs	r0, #199	; 0xc7
    39ea:	47a0      	blx	r4
	spi_BB_Write(200, 3300); // Frame length, spi_BB_Write(200, 0x0350);
    39ec:	f640 41e4 	movw	r1, #3300	; 0xce4
    39f0:	20c8      	movs	r0, #200	; 0xc8
    39f2:	47a0      	blx	r4
	spi_BB_Write(201, 3300); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
    39f4:	f640 41e4 	movw	r1, #3300	; 0xce4
    39f8:	20c9      	movs	r0, #201	; 0xc9
    39fa:	47a0      	blx	r4
	#else
	spi_BB_Write(199, 666); // Exposure/Frame rate config, spi_BB_Write(199, 0x0299);
	spi_BB_Write(200, 3000); // Frame length, spi_BB_Write(200, 0x0350);
	spi_BB_Write(201, 2900); // spi_BB_Write(201, 2900); // Exposure time spi_BB_Write(201, 0x01F4);
	#endif
	spi_BB_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
    39fc:	21e4      	movs	r1, #228	; 0xe4
    39fe:	20cc      	movs	r0, #204	; 0xcc
    3a00:	47a0      	blx	r4
	spi_BB_Write(207, 0x0014);
    3a02:	2114      	movs	r1, #20
    3a04:	20cf      	movs	r0, #207	; 0xcf
    3a06:	47a0      	blx	r4
	spi_BB_Write(214, 0x0100);
    3a08:	f44f 7180 	mov.w	r1, #256	; 0x100
    3a0c:	20d6      	movs	r0, #214	; 0xd6
    3a0e:	47a0      	blx	r4
	spi_BB_Write(215, 0x101F);
    3a10:	f241 011f 	movw	r1, #4127	; 0x101f
    3a14:	20d7      	movs	r0, #215	; 0xd7
    3a16:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3a18:	2100      	movs	r1, #0
    3a1a:	20d8      	movs	r0, #216	; 0xd8
    3a1c:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3a1e:	2123      	movs	r1, #35	; 0x23
    3a20:	20db      	movs	r0, #219	; 0xdb
    3a22:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3a24:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3a28:	20dc      	movs	r0, #220	; 0xdc
    3a2a:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3a2c:	f642 314d 	movw	r1, #11085	; 0x2b4d
    3a30:	20dd      	movs	r0, #221	; 0xdd
    3a32:	47a0      	blx	r4
	spi_BB_Write(224, 0x3E5E);
    3a34:	f643 615e 	movw	r1, #15966	; 0x3e5e
    3a38:	20e0      	movs	r0, #224	; 0xe0
    3a3a:	47a0      	blx	r4
	spi_BB_Write(211, 0x0049);
    3a3c:	2149      	movs	r1, #73	; 0x49
    3a3e:	20d3      	movs	r0, #211	; 0xd3
    3a40:	47a0      	blx	r4
	spi_BB_Write(216, 0x0000);
    3a42:	2100      	movs	r1, #0
    3a44:	20d8      	movs	r0, #216	; 0xd8
    3a46:	47a0      	blx	r4
	spi_BB_Write(219, 0x0023);
    3a48:	2123      	movs	r1, #35	; 0x23
    3a4a:	20db      	movs	r0, #219	; 0xdb
    3a4c:	47a0      	blx	r4
	spi_BB_Write(220, 0x3C2B);
    3a4e:	f643 412b 	movw	r1, #15403	; 0x3c2b
    3a52:	20dc      	movs	r0, #220	; 0xdc
    3a54:	47a0      	blx	r4
	spi_BB_Write(221, 0x2B4D);
    3a56:	f642 314d 	movw	r1, #11085	; 0x2b4d
    3a5a:	20dd      	movs	r0, #221	; 0xdd
    3a5c:	47a0      	blx	r4
	spi_BB_Write(230, 0x0299);
    3a5e:	f240 2199 	movw	r1, #665	; 0x299
    3a62:	20e6      	movs	r0, #230	; 0xe6
    3a64:	47a0      	blx	r4
	spi_BB_Write(231, 0x0350);
    3a66:	f44f 7154 	mov.w	r1, #848	; 0x350
    3a6a:	20e7      	movs	r0, #231	; 0xe7
    3a6c:	47a0      	blx	r4
	spi_BB_Write(232, 0x01F4);
    3a6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3a72:	20e8      	movs	r0, #232	; 0xe8
    3a74:	47a0      	blx	r4
	spi_BB_Write(235, 0x00E1);
    3a76:	21e1      	movs	r1, #225	; 0xe1
    3a78:	20eb      	movs	r0, #235	; 0xeb
    3a7a:	47a0      	blx	r4

	// Set ROI Size
	spi_BB_Write(256, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI0
    3a7c:	f24b 0119 	movw	r1, #45081	; 0xb019
    3a80:	f44f 7080 	mov.w	r0, #256	; 0x100
    3a84:	47a0      	blx	r4
	spi_BB_Write(258, 0xB019); // Horizontal pixel range times 4 plus 4 for ROI1
    3a86:	f24b 0119 	movw	r1, #45081	; 0xb019
    3a8a:	f44f 7081 	mov.w	r0, #258	; 0x102
    3a8e:	47a0      	blx	r4

	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	spi_BB_Write(384, 0xC800);
    3a90:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3a94:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3a98:	47a0      	blx	r4
	spi_BB_Write(385, 0xFB1F);
    3a9a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3a9e:	f240 1081 	movw	r0, #385	; 0x181
    3aa2:	47a0      	blx	r4
	spi_BB_Write(386, 0xFB1F);
    3aa4:	f64f 311f 	movw	r1, #64287	; 0xfb1f
    3aa8:	f44f 70c1 	mov.w	r0, #386	; 0x182
    3aac:	47a0      	blx	r4
	spi_BB_Write(387, 0xFB12);
    3aae:	f64f 3112 	movw	r1, #64274	; 0xfb12
    3ab2:	f240 1083 	movw	r0, #387	; 0x183
    3ab6:	47a0      	blx	r4
	spi_BB_Write(388, 0xF912);
    3ab8:	f64f 1112 	movw	r1, #63762	; 0xf912
    3abc:	f44f 70c2 	mov.w	r0, #388	; 0x184
    3ac0:	47a0      	blx	r4
	spi_BB_Write(389, 0xF903);
    3ac2:	f64f 1103 	movw	r1, #63747	; 0xf903
    3ac6:	f240 1085 	movw	r0, #389	; 0x185
    3aca:	47a0      	blx	r4
	spi_BB_Write(390, 0xF802);
    3acc:	f64f 0102 	movw	r1, #63490	; 0xf802
    3ad0:	f44f 70c3 	mov.w	r0, #390	; 0x186
    3ad4:	47a0      	blx	r4
	spi_BB_Write(391, 0xF30F);
    3ad6:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3ada:	f240 1087 	movw	r0, #391	; 0x187
    3ade:	47a0      	blx	r4
	spi_BB_Write(392, 0xF30F);
    3ae0:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3ae4:	f44f 70c4 	mov.w	r0, #392	; 0x188
    3ae8:	47a0      	blx	r4
	spi_BB_Write(393, 0xF30F);
    3aea:	f24f 310f 	movw	r1, #62223	; 0xf30f
    3aee:	f240 1089 	movw	r0, #393	; 0x189
    3af2:	47a0      	blx	r4
	spi_BB_Write(394, 0xF30A);
    3af4:	f24f 310a 	movw	r1, #62218	; 0xf30a
    3af8:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    3afc:	47a0      	blx	r4
	spi_BB_Write(395, 0xF101);
    3afe:	f24f 1101 	movw	r1, #61697	; 0xf101
    3b02:	f240 108b 	movw	r0, #395	; 0x18b
    3b06:	47a0      	blx	r4
	spi_BB_Write(396, 0xF00A);
    3b08:	f24f 010a 	movw	r1, #61450	; 0xf00a
    3b0c:	f44f 70c6 	mov.w	r0, #396	; 0x18c
    3b10:	47a0      	blx	r4
	spi_BB_Write(397, 0xF24B);
    3b12:	f24f 214b 	movw	r1, #62027	; 0xf24b
    3b16:	f240 108d 	movw	r0, #397	; 0x18d
    3b1a:	47a0      	blx	r4
	spi_BB_Write(398, 0xF201);
    3b1c:	f24f 2101 	movw	r1, #61953	; 0xf201
    3b20:	f44f 70c7 	mov.w	r0, #398	; 0x18e
    3b24:	47a0      	blx	r4
	spi_BB_Write(399, 0xF226);
    3b26:	f24f 2126 	movw	r1, #61990	; 0xf226
    3b2a:	f240 108f 	movw	r0, #399	; 0x18f
    3b2e:	47a0      	blx	r4
	spi_BB_Write(400, 0xF021);
    3b30:	f24f 0121 	movw	r1, #61473	; 0xf021
    3b34:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3b38:	47a0      	blx	r4
	spi_BB_Write(401, 0xF001);
    3b3a:	f24f 0101 	movw	r1, #61441	; 0xf001
    3b3e:	f240 1091 	movw	r0, #401	; 0x191
    3b42:	47a0      	blx	r4
	spi_BB_Write(402, 0xF402);
    3b44:	f24f 4102 	movw	r1, #62466	; 0xf402
    3b48:	f44f 70c9 	mov.w	r0, #402	; 0x192
    3b4c:	47a0      	blx	r4
	spi_BB_Write(403, 0xF007);
    3b4e:	f24f 0107 	movw	r1, #61447	; 0xf007
    3b52:	f240 1093 	movw	r0, #403	; 0x193
    3b56:	47a0      	blx	r4
	spi_BB_Write(404, 0xF20F);
    3b58:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3b5c:	f44f 70ca 	mov.w	r0, #404	; 0x194
    3b60:	47a0      	blx	r4
	spi_BB_Write(405, 0xF20F);
    3b62:	f24f 210f 	movw	r1, #61967	; 0xf20f
    3b66:	f240 1095 	movw	r0, #405	; 0x195
    3b6a:	47a0      	blx	r4
	spi_BB_Write(406, 0xF202);
    3b6c:	f24f 2102 	movw	r1, #61954	; 0xf202
    3b70:	f44f 70cb 	mov.w	r0, #406	; 0x196
    3b74:	47a0      	blx	r4
	spi_BB_Write(407, 0xF006);
    3b76:	f24f 0106 	movw	r1, #61446	; 0xf006
    3b7a:	f240 1097 	movw	r0, #407	; 0x197
    3b7e:	47a0      	blx	r4
	spi_BB_Write(408, 0xEC08);
    3b80:	f64e 4108 	movw	r1, #60424	; 0xec08
    3b84:	f44f 70cc 	mov.w	r0, #408	; 0x198
    3b88:	47a0      	blx	r4
	spi_BB_Write(409, 0xC801);
    3b8a:	f64c 0101 	movw	r1, #51201	; 0xc801
    3b8e:	f240 1099 	movw	r0, #409	; 0x199
    3b92:	47a0      	blx	r4
	spi_BB_Write(410, 0xC800);
    3b94:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3b98:	f44f 70cd 	mov.w	r0, #410	; 0x19a
    3b9c:	47a0      	blx	r4

	spi_BB_Write(419, 0xC800);
    3b9e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3ba2:	f240 10a3 	movw	r0, #419	; 0x1a3
    3ba6:	47a0      	blx	r4
	spi_BB_Write(420, 0xCC02);
    3ba8:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3bac:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
    3bb0:	47a0      	blx	r4
	spi_BB_Write(421, 0xCC01);
    3bb2:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3bb6:	f240 10a5 	movw	r0, #421	; 0x1a5
    3bba:	47a0      	blx	r4
	spi_BB_Write(422, 0xCC02);
    3bbc:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3bc0:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
    3bc4:	47a0      	blx	r4
	spi_BB_Write(423, 0xCC01);
    3bc6:	f64c 4101 	movw	r1, #52225	; 0xcc01
    3bca:	f240 10a7 	movw	r0, #423	; 0x1a7
    3bce:	47a0      	blx	r4
	spi_BB_Write(424, 0xCC02);
    3bd0:	f64c 4102 	movw	r1, #52226	; 0xcc02
    3bd4:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
    3bd8:	47a0      	blx	r4
	spi_BB_Write(425, 0xC805);
    3bda:	f64c 0105 	movw	r1, #51205	; 0xc805
    3bde:	f240 10a9 	movw	r0, #425	; 0x1a9
    3be2:	47a0      	blx	r4
	spi_BB_Write(426, 0xC800);
    3be4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    3be8:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
    3bec:	47a0      	blx	r4

	spi_BB_Write(427, 0x0030);
    3bee:	2130      	movs	r1, #48	; 0x30
    3bf0:	f240 10ab 	movw	r0, #427	; 0x1ab
    3bf4:	47a0      	blx	r4
	spi_BB_Write(428, 0x207B);
    3bf6:	f242 017b 	movw	r1, #8315	; 0x207b
    3bfa:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
    3bfe:	47a0      	blx	r4
	spi_BB_Write(429, 0x2071);
    3c00:	f242 0171 	movw	r1, #8305	; 0x2071
    3c04:	f240 10ad 	movw	r0, #429	; 0x1ad
    3c08:	47a0      	blx	r4
	spi_BB_Write(430, 0x0071);
    3c0a:	2171      	movs	r1, #113	; 0x71
    3c0c:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
    3c10:	47a0      	blx	r4
	spi_BB_Write(431, 0x107F);
    3c12:	f241 017f 	movw	r1, #4223	; 0x107f
    3c16:	f240 10af 	movw	r0, #431	; 0x1af
    3c1a:	47a0      	blx	r4
	spi_BB_Write(432, 0x1072);
    3c1c:	f241 0172 	movw	r1, #4210	; 0x1072
    3c20:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
    3c24:	47a0      	blx	r4
	spi_BB_Write(433, 0x1074);
    3c26:	f241 0174 	movw	r1, #4212	; 0x1074
    3c2a:	f240 10b1 	movw	r0, #433	; 0x1b1
    3c2e:	47a0      	blx	r4
	spi_BB_Write(434, 0x0071);
    3c30:	2171      	movs	r1, #113	; 0x71
    3c32:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
    3c36:	47a0      	blx	r4
	spi_BB_Write(435, 0x0031);
    3c38:	2131      	movs	r1, #49	; 0x31
    3c3a:	f240 10b3 	movw	r0, #435	; 0x1b3
    3c3e:	47a0      	blx	r4
	spi_BB_Write(436, 0x21BB);
    3c40:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3c44:	e002      	b.n	3c4c <RequiredUploads+0x340>
    3c46:	bf00      	nop
    3c48:	00003665 	.word	0x00003665
    3c4c:	f44f 70da 	mov.w	r0, #436	; 0x1b4
    3c50:	47a0      	blx	r4
	spi_BB_Write(437, 0x20B1);
    3c52:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3c56:	f240 10b5 	movw	r0, #437	; 0x1b5
    3c5a:	47a0      	blx	r4
	spi_BB_Write(438, 0x00B1);
    3c5c:	21b1      	movs	r1, #177	; 0xb1
    3c5e:	f44f 70db 	mov.w	r0, #438	; 0x1b6
    3c62:	47a0      	blx	r4
	spi_BB_Write(439, 0x10BF);
    3c64:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3c68:	f240 10b7 	movw	r0, #439	; 0x1b7
    3c6c:	47a0      	blx	r4
	spi_BB_Write(440, 0x10B2);
    3c6e:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3c72:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
    3c76:	47a0      	blx	r4
	spi_BB_Write(441, 0x10B4);
    3c78:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3c7c:	f240 10b9 	movw	r0, #441	; 0x1b9
    3c80:	47a0      	blx	r4
	spi_BB_Write(442, 0x00B1);
    3c82:	21b1      	movs	r1, #177	; 0xb1
    3c84:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
    3c88:	47a0      	blx	r4
	spi_BB_Write(443, 0x0030);
    3c8a:	2130      	movs	r1, #48	; 0x30
    3c8c:	f240 10bb 	movw	r0, #443	; 0x1bb
    3c90:	47a0      	blx	r4

	spi_BB_Write(444, 0x0030);
    3c92:	2130      	movs	r1, #48	; 0x30
    3c94:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    3c98:	47a0      	blx	r4
	spi_BB_Write(445, 0x217B);
    3c9a:	f242 117b 	movw	r1, #8571	; 0x217b
    3c9e:	f240 10bd 	movw	r0, #445	; 0x1bd
    3ca2:	47a0      	blx	r4
	spi_BB_Write(446, 0x2071);
    3ca4:	f242 0171 	movw	r1, #8305	; 0x2071
    3ca8:	f44f 70df 	mov.w	r0, #446	; 0x1be
    3cac:	47a0      	blx	r4
	spi_BB_Write(447, 0x0071);
    3cae:	2171      	movs	r1, #113	; 0x71
    3cb0:	f240 10bf 	movw	r0, #447	; 0x1bf
    3cb4:	47a0      	blx	r4
	spi_BB_Write(448, 0x107F);
    3cb6:	f241 017f 	movw	r1, #4223	; 0x107f
    3cba:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    3cbe:	47a0      	blx	r4
	spi_BB_Write(449, 0x1072);
    3cc0:	f241 0172 	movw	r1, #4210	; 0x1072
    3cc4:	f240 10c1 	movw	r0, #449	; 0x1c1
    3cc8:	47a0      	blx	r4
	spi_BB_Write(450, 0x1074);
    3cca:	f241 0174 	movw	r1, #4212	; 0x1074
    3cce:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    3cd2:	47a0      	blx	r4
	spi_BB_Write(451, 0x0071);
    3cd4:	2171      	movs	r1, #113	; 0x71
    3cd6:	f240 10c3 	movw	r0, #451	; 0x1c3
    3cda:	47a0      	blx	r4
	spi_BB_Write(452, 0x0031);
    3cdc:	2131      	movs	r1, #49	; 0x31
    3cde:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    3ce2:	47a0      	blx	r4
	spi_BB_Write(453, 0x21BB);
    3ce4:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3ce8:	f240 10c5 	movw	r0, #453	; 0x1c5
    3cec:	47a0      	blx	r4
	spi_BB_Write(454, 0x20B1);
    3cee:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3cf2:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
    3cf6:	47a0      	blx	r4
	spi_BB_Write(455, 0x00B1);
    3cf8:	21b1      	movs	r1, #177	; 0xb1
    3cfa:	f240 10c7 	movw	r0, #455	; 0x1c7
    3cfe:	47a0      	blx	r4
	spi_BB_Write(456, 0x10BF);
    3d00:	f241 01bf 	movw	r1, #4287	; 0x10bf
    3d04:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
    3d08:	47a0      	blx	r4
	spi_BB_Write(457, 0x10B2);
    3d0a:	f241 01b2 	movw	r1, #4274	; 0x10b2
    3d0e:	f240 10c9 	movw	r0, #457	; 0x1c9
    3d12:	47a0      	blx	r4
	spi_BB_Write(458, 0x10B4);
    3d14:	f241 01b4 	movw	r1, #4276	; 0x10b4
    3d18:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
    3d1c:	47a0      	blx	r4
	spi_BB_Write(459, 0x00B1);
    3d1e:	21b1      	movs	r1, #177	; 0xb1
    3d20:	f240 10cb 	movw	r0, #459	; 0x1cb
    3d24:	47a0      	blx	r4
	spi_BB_Write(460, 0x0030);
    3d26:	2130      	movs	r1, #48	; 0x30
    3d28:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
    3d2c:	47a0      	blx	r4

	spi_BB_Write(461, 0x0030);
    3d2e:	2130      	movs	r1, #48	; 0x30
    3d30:	f240 10cd 	movw	r0, #461	; 0x1cd
    3d34:	47a0      	blx	r4
	spi_BB_Write(462, 0x217B);
    3d36:	f242 117b 	movw	r1, #8571	; 0x217b
    3d3a:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
    3d3e:	47a0      	blx	r4
	spi_BB_Write(463, 0x2071);
    3d40:	f242 0171 	movw	r1, #8305	; 0x2071
    3d44:	f240 10cf 	movw	r0, #463	; 0x1cf
    3d48:	47a0      	blx	r4
	spi_BB_Write(464, 0x0071);
    3d4a:	2171      	movs	r1, #113	; 0x71
    3d4c:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
    3d50:	47a0      	blx	r4
	spi_BB_Write(465, 0x1071);
    3d52:	f241 0171 	movw	r1, #4209	; 0x1071
    3d56:	f240 10d1 	movw	r0, #465	; 0x1d1
    3d5a:	47a0      	blx	r4
	spi_BB_Write(466, 0x0071);
    3d5c:	2171      	movs	r1, #113	; 0x71
    3d5e:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
    3d62:	47a0      	blx	r4
	spi_BB_Write(467, 0x0031);
    3d64:	2131      	movs	r1, #49	; 0x31
    3d66:	f240 10d3 	movw	r0, #467	; 0x1d3
    3d6a:	47a0      	blx	r4
	spi_BB_Write(468, 0x21BB);
    3d6c:	f242 11bb 	movw	r1, #8635	; 0x21bb
    3d70:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
    3d74:	47a0      	blx	r4
	spi_BB_Write(469, 0x20B1);
    3d76:	f242 01b1 	movw	r1, #8369	; 0x20b1
    3d7a:	f240 10d5 	movw	r0, #469	; 0x1d5
    3d7e:	47a0      	blx	r4
	spi_BB_Write(470, 0x00B1);
    3d80:	21b1      	movs	r1, #177	; 0xb1
    3d82:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
    3d86:	47a0      	blx	r4
	spi_BB_Write(471, 0x10B3);
    3d88:	f241 01b3 	movw	r1, #4275	; 0x10b3
    3d8c:	f240 10d7 	movw	r0, #471	; 0x1d7
    3d90:	47a0      	blx	r4
	spi_BB_Write(472, 0x10B1);
    3d92:	f241 01b1 	movw	r1, #4273	; 0x10b1
    3d96:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
    3d9a:	47a0      	blx	r4
	spi_BB_Write(473, 0x00B1);
    3d9c:	21b1      	movs	r1, #177	; 0xb1
    3d9e:	f240 10d9 	movw	r0, #473	; 0x1d9
    3da2:	47a0      	blx	r4
	spi_BB_Write(474, 0x003F);
    3da4:	213f      	movs	r1, #63	; 0x3f
    3da6:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    3daa:	47a0      	blx	r4
	spi_BB_Write(475, 0x0032);
    3dac:	2132      	movs	r1, #50	; 0x32
    3dae:	f240 10db 	movw	r0, #475	; 0x1db
    3db2:	47a0      	blx	r4
	spi_BB_Write(476, 0x0030);
    3db4:	2130      	movs	r1, #48	; 0x30
    3db6:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
    3dba:	47a0      	blx	r4
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	bf00      	nop

00003dc0 <SoftPowerUp>:
}

void SoftPowerUp() {
    3dc0:	b510      	push	{r4, lr}

	spi_BB_Write(10, 0x0000);	// Release soft reset state
    3dc2:	2100      	movs	r1, #0
    3dc4:	200a      	movs	r0, #10
    3dc6:	4c0d      	ldr	r4, [pc, #52]	; (3dfc <SoftPowerUp+0x3c>)
    3dc8:	47a0      	blx	r4
	#ifdef DISABLE_PLL
	spi_BB_Write(32, 0x7007|0x0008);	// Enable analog clock
    3dca:	f247 010f 	movw	r1, #28687	; 0x700f
    3dce:	2020      	movs	r0, #32
    3dd0:	47a0      	blx	r4
	#else
	spi_BB_Write(32, 0x7007);	// Enable analog clock
	#endif
	spi_BB_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
    3dd2:	2107      	movs	r1, #7
    3dd4:	2028      	movs	r0, #40	; 0x28
    3dd6:	47a0      	blx	r4
	spi_BB_Write(42, 0x4113);	// spi_BB_Write(42, 0x4103); Configure image core
    3dd8:	f244 1113 	movw	r1, #16659	; 0x4113
    3ddc:	202a      	movs	r0, #42	; 0x2a
    3dde:	47a0      	blx	r4
	spi_BB_Write(48, 0x0001);	// Enable AFE
    3de0:	2101      	movs	r1, #1
    3de2:	2030      	movs	r0, #48	; 0x30
    3de4:	47a0      	blx	r4
	spi_BB_Write(64, 0x0001);	// Enable biasing block
    3de6:	2101      	movs	r1, #1
    3de8:	2040      	movs	r0, #64	; 0x40
    3dea:	47a0      	blx	r4
	spi_BB_Write(72, 0x0127);	// spi_BB_Write(72, 0x0117); Enable charge pump.
    3dec:	f240 1127 	movw	r1, #295	; 0x127
    3df0:	2048      	movs	r0, #72	; 0x48
    3df2:	47a0      	blx	r4
	//spi_BB_Write(112, 0x0007);	// Enable LVDS transmitters
	spi_BB_Write(112, 0x0000);	// Enable LVDS transmitters
    3df4:	2100      	movs	r1, #0
    3df6:	2070      	movs	r0, #112	; 0x70
    3df8:	47a0      	blx	r4
    3dfa:	bd10      	pop	{r4, pc}
    3dfc:	00003665 	.word	0x00003665

00003e00 <python480Init>:
{
    3e00:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
    3e02:	4b06      	ldr	r3, [pc, #24]	; (3e1c <python480Init+0x1c>)
    3e04:	4798      	blx	r3
	delay_ms(10);
    3e06:	200a      	movs	r0, #10
    3e08:	4b05      	ldr	r3, [pc, #20]	; (3e20 <python480Init+0x20>)
    3e0a:	4798      	blx	r3
	EnableClockMngmnt2();
    3e0c:	4b05      	ldr	r3, [pc, #20]	; (3e24 <python480Init+0x24>)
    3e0e:	4798      	blx	r3
	RequiredUploads();
    3e10:	4b05      	ldr	r3, [pc, #20]	; (3e28 <python480Init+0x28>)
    3e12:	4798      	blx	r3
	SoftPowerUp();
    3e14:	4b05      	ldr	r3, [pc, #20]	; (3e2c <python480Init+0x2c>)
    3e16:	4798      	blx	r3
    3e18:	bd08      	pop	{r3, pc}
    3e1a:	bf00      	nop
    3e1c:	000038a9 	.word	0x000038a9
    3e20:	00000dd5 	.word	0x00000dd5
    3e24:	000038ed 	.word	0x000038ed
    3e28:	0000390d 	.word	0x0000390d
    3e2c:	00003dc1 	.word	0x00003dc1

00003e30 <Enable_Subsample>:
	spi_BB_Write(220, 0x3C4D);
}

void Enable_Subsample()
// Taken from Raymonds wirefree code. Need to make sure it fit correctly here
{
    3e30:	b510      	push	{r4, lr}
	spi_BB_Write(192, 0x0803 | 0x0080);	// Subsampling
    3e32:	f640 0183 	movw	r1, #2179	; 0x883
    3e36:	20c0      	movs	r0, #192	; 0xc0
    3e38:	4c03      	ldr	r4, [pc, #12]	; (3e48 <Enable_Subsample+0x18>)
    3e3a:	47a0      	blx	r4
	spi_BB_Write(194, 0x03E4 | 0x0C00);	// Subsampling mode in both x and y (Check VITA-compatibility)
    3e3c:	f640 71e4 	movw	r1, #4068	; 0xfe4
    3e40:	20c2      	movs	r0, #194	; 0xc2
    3e42:	47a0      	blx	r4
    3e44:	bd10      	pop	{r4, pc}
    3e46:	bf00      	nop
    3e48:	00003665 	.word	0x00003665

00003e4c <getCurrentTimeMS>:
	return timeMS;
    3e4c:	4b01      	ldr	r3, [pc, #4]	; (3e54 <getCurrentTimeMS+0x8>)
    3e4e:	6818      	ldr	r0, [r3, #0]
}
    3e50:	4770      	bx	lr
    3e52:	bf00      	nop
    3e54:	20000224 	.word	0x20000224

00003e58 <loadSDCardHeader>:
uint8_t loadSDCardHeader(void){
    3e58:	b508      	push	{r3, lr}
	sd_mmc_init_read_blocks(0,HEADER_BLOCK,1);
    3e5a:	2201      	movs	r2, #1
    3e5c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    3e60:	2000      	movs	r0, #0
    3e62:	4b07      	ldr	r3, [pc, #28]	; (3e80 <loadSDCardHeader+0x28>)
    3e64:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerBlock,1);
    3e66:	2101      	movs	r1, #1
    3e68:	4806      	ldr	r0, [pc, #24]	; (3e84 <loadSDCardHeader+0x2c>)
    3e6a:	4b07      	ldr	r3, [pc, #28]	; (3e88 <loadSDCardHeader+0x30>)
    3e6c:	4798      	blx	r3
	if (sd_mmc_wait_end_of_read_blocks(false) == SD_MMC_OK)
    3e6e:	2000      	movs	r0, #0
    3e70:	4b06      	ldr	r3, [pc, #24]	; (3e8c <loadSDCardHeader+0x34>)
    3e72:	4798      	blx	r3
    3e74:	b108      	cbz	r0, 3e7a <loadSDCardHeader+0x22>
		return MS_ERROR;
    3e76:	2000      	movs	r0, #0
}
    3e78:	bd08      	pop	{r3, pc}
		return MS_SUCCESS;
    3e7a:	2001      	movs	r0, #1
    3e7c:	bd08      	pop	{r3, pc}
    3e7e:	bf00      	nop
    3e80:	00004e61 	.word	0x00004e61
    3e84:	20000228 	.word	0x20000228
    3e88:	00004efd 	.word	0x00004efd
    3e8c:	00004f49 	.word	0x00004f49

00003e90 <getPropFromHeader>:
	return header32bit[headerPos];
    3e90:	4b02      	ldr	r3, [pc, #8]	; (3e9c <getPropFromHeader+0xc>)
    3e92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3e96:	6840      	ldr	r0, [r0, #4]
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	20000224 	.word	0x20000224

00003ea0 <setConfigBlockProp>:
	configBlock32bit[position] = value;
    3ea0:	4b01      	ldr	r3, [pc, #4]	; (3ea8 <setConfigBlockProp+0x8>)
    3ea2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    3ea6:	4770      	bx	lr
    3ea8:	20000428 	.word	0x20000428

00003eac <setBufferHeader>:
void setBufferHeader(uint32_t dataWordLength) {
    3eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eb0:	4680      	mov	r8, r0
	uint32_t numBuffer = bufferCount % NUM_BUFFERS;
    3eb2:	4b12      	ldr	r3, [pc, #72]	; (3efc <setBufferHeader+0x50>)
    3eb4:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
    3eb8:	f006 0607 	and.w	r6, r6, #7
	dataBuffer[numBuffer][BUFFER_HEADER_HEADER_LENGTH_POS] = BUFFER_HEADER_LENGTH;
    3ebc:	4c10      	ldr	r4, [pc, #64]	; (3f00 <setBufferHeader+0x54>)
    3ebe:	00b5      	lsls	r5, r6, #2
    3ec0:	19a9      	adds	r1, r5, r6
    3ec2:	030a      	lsls	r2, r1, #12
    3ec4:	18a7      	adds	r7, r4, r2
    3ec6:	210a      	movs	r1, #10
    3ec8:	50a1      	str	r1, [r4, r2]
	dataBuffer[numBuffer][BUFFER_HEADER_LINKED_LIST_POS] = bufferCount % NUM_BUFFERS;
    3eca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3ece:	f002 0207 	and.w	r2, r2, #7
    3ed2:	607a      	str	r2, [r7, #4]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_NUM_POS] = frameNum;
    3ed4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    3ed8:	60ba      	str	r2, [r7, #8]
	dataBuffer[numBuffer][BUFFER_HEADER_BUFFER_COUNT_POS] = bufferCount;
    3eda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3ede:	60fa      	str	r2, [r7, #12]
	dataBuffer[numBuffer][BUFFER_HEADER_FRAME_BUFFER_COUNT_POS] = frameBufferCount;
    3ee0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3ee4:	613b      	str	r3, [r7, #16]
	dataBuffer[numBuffer][BUFFER_HEADER_TIMESTAMP_POS] = getCurrentTimeMS() - startTimeMS;
    3ee6:	4b07      	ldr	r3, [pc, #28]	; (3f04 <setBufferHeader+0x58>)
    3ee8:	4798      	blx	r3
    3eea:	4b07      	ldr	r3, [pc, #28]	; (3f08 <setBufferHeader+0x5c>)
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	1ac0      	subs	r0, r0, r3
    3ef0:	61f8      	str	r0, [r7, #28]
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
    3ef2:	ea4f 0388 	mov.w	r3, r8, lsl #2
    3ef6:	623b      	str	r3, [r7, #32]
    3ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3efc:	20000224 	.word	0x20000224
    3f00:	20000c34 	.word	0x20000c34
    3f04:	00003e4d 	.word	0x00003e4d
    3f08:	20000c24 	.word	0x20000c24

00003f0c <pcc_dma_cb>:
	}
}

static void pcc_dma_cb(struct camera_async_descriptor *const descr, uint32_t ch)
{
	if (ch == CONF_PCC_DMA_CHANNEL) {
    3f0c:	b101      	cbz	r1, 3f10 <pcc_dma_cb+0x4>
    3f0e:	4770      	bx	lr
{
    3f10:	b508      	push	{r3, lr}
		//tempHeader[tempCount][2] = 4 * _dma_get_WRB_data(CONF_PCC_DMA_CHANNEL);
		//tempHeader[tempCount][3] = PCC->ISR.reg;
		//if (tempCount < 99)
			//tempCount++;
			
		setBufferHeader(BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH);
    3f12:	f241 30f6 	movw	r0, #5110	; 0x13f6
    3f16:	4b07      	ldr	r3, [pc, #28]	; (3f34 <pcc_dma_cb+0x28>)
    3f18:	4798      	blx	r3
		bufferCount++;// increment counters
    3f1a:	4b07      	ldr	r3, [pc, #28]	; (3f38 <pcc_dma_cb+0x2c>)
    3f1c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    3f20:	3201      	adds	r2, #1
    3f22:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
		frameBufferCount++;
    3f26:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
    3f2a:	3201      	adds	r2, #1
    3f2c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    3f30:	bd08      	pop	{r3, pc}
    3f32:	bf00      	nop
    3f34:	00003ead 	.word	0x00003ead
    3f38:	20000224 	.word	0x20000224

00003f3c <setSDDescriptor>:
{
    3f3c:	b430      	push	{r4, r5}
	temp = temp<<32;
    3f3e:	2400      	movs	r4, #0
	SDTransferDescriptor = (temp)|attribute|SD_DESCRIPTOR_LENGTH(length);
    3f40:	b2d2      	uxtb	r2, r2
    3f42:	2300      	movs	r3, #0
    3f44:	4322      	orrs	r2, r4
    3f46:	4303      	orrs	r3, r0
    3f48:	0409      	lsls	r1, r1, #16
    3f4a:	430a      	orrs	r2, r1
    3f4c:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
    3f50:	4902      	ldr	r1, [pc, #8]	; (3f5c <setSDDescriptor+0x20>)
    3f52:	e9c1 2300 	strd	r2, r3, [r1]
}
    3f56:	bc30      	pop	{r4, r5}
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	20029288 	.word	0x20029288

00003f60 <setExcitationLED>:
	}
}

void setExcitationLED(uint32_t value, bool enable)
{
    3f60:	b538      	push	{r3, r4, r5, lr}
    3f62:	460d      	mov	r5, r1
	// Value is a percentage of brightness from 0 to 100.
	// PWM runs at 1ms period using 16bit MAX counter and a ~60MHz clock	
	if (value > 100)
    3f64:	2864      	cmp	r0, #100	; 0x64
    3f66:	d900      	bls.n	3f6a <setExcitationLED+0xa>
		value = 100;
    3f68:	2064      	movs	r0, #100	; 0x64
	
	value = (0xFFFF * value ) /100;
    3f6a:	ebc0 4000 	rsb	r0, r0, r0, lsl #16
    3f6e:	490b      	ldr	r1, [pc, #44]	; (3f9c <setExcitationLED+0x3c>)
    3f70:	fba1 3100 	umull	r3, r1, r1, r0
	
	pwm_set_parameters(&PWM_0, value, 0); // value sets duty cycle out of 2^16. We aren't using CC1 so just send it 0
    3f74:	4c0a      	ldr	r4, [pc, #40]	; (3fa0 <setExcitationLED+0x40>)
    3f76:	2200      	movs	r2, #0
    3f78:	0949      	lsrs	r1, r1, #5
    3f7a:	4620      	mov	r0, r4
    3f7c:	4b09      	ldr	r3, [pc, #36]	; (3fa4 <setExcitationLED+0x44>)
    3f7e:	4798      	blx	r3
	pwm_enable(&PWM_0); //Only actually needs to be done once. Consider moving to init stuff at top of main()
    3f80:	4620      	mov	r0, r4
    3f82:	4b09      	ldr	r3, [pc, #36]	; (3fa8 <setExcitationLED+0x48>)
    3f84:	4798      	blx	r3
	if (level) {
    3f86:	b925      	cbnz	r5, 3f92 <setExcitationLED+0x32>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3f88:	2202      	movs	r2, #2
    3f8a:	4b08      	ldr	r3, [pc, #32]	; (3fac <setExcitationLED+0x4c>)
    3f8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3f90:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f92:	2202      	movs	r2, #2
    3f94:	4b05      	ldr	r3, [pc, #20]	; (3fac <setExcitationLED+0x4c>)
    3f96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3f9a:	bd38      	pop	{r3, r4, r5, pc}
    3f9c:	51eb851f 	.word	0x51eb851f
    3fa0:	200006a8 	.word	0x200006a8
    3fa4:	00001285 	.word	0x00001285
    3fa8:	00001249 	.word	0x00001249
    3fac:	41008000 	.word	0x41008000

00003fb0 <setEWL>:
	
	gpio_set_pin_level(ENT_LED, enable);
}

void setEWL(uint32_t value)
{
    3fb0:	b508      	push	{r3, lr}
	I2C_BB_write(EWL_I2C_ADDR,value);
    3fb2:	b2c1      	uxtb	r1, r0
    3fb4:	2023      	movs	r0, #35	; 0x23
    3fb6:	4b01      	ldr	r3, [pc, #4]	; (3fbc <setEWL+0xc>)
    3fb8:	4798      	blx	r3
    3fba:	bd08      	pop	{r3, pc}
    3fbc:	00003539 	.word	0x00003539

00003fc0 <setStatusLED>:
    3fc0:	b928      	cbnz	r0, 3fce <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
    3fc6:	4b05      	ldr	r3, [pc, #20]	; (3fdc <setStatusLED+0x1c>)
    3fc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3fcc:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3fce:	f44f 7200 	mov.w	r2, #512	; 0x200
    3fd2:	4b02      	ldr	r3, [pc, #8]	; (3fdc <setStatusLED+0x1c>)
    3fd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	41008000 	.word	0x41008000

00003fe0 <linkedListInit>:
	gpio_set_pin_level(LED_STATUS, value);
}

void linkedListInit(void)
{
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    3fe0:	2300      	movs	r3, #0
    3fe2:	2b07      	cmp	r3, #7
    3fe4:	d82b      	bhi.n	403e <linkedListInit+0x5e>
{
    3fe6:	b410      	push	{r4}
		if (i == (NUM_BUFFERS - 1))
    3fe8:	2b07      	cmp	r3, #7
    3fea:	d023      	beq.n	4034 <linkedListInit+0x54>
			// Last buffer in list. Need to loop back
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
		else
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[i + 1];
    3fec:	1c5a      	adds	r2, r3, #1
    3fee:	4914      	ldr	r1, [pc, #80]	; (4040 <linkedListInit+0x60>)
    3ff0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    3ff4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    3ff8:	60ca      	str	r2, [r1, #12]
			
		linkedList[i].BTCNT.reg = (BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH);
    3ffa:	4811      	ldr	r0, [pc, #68]	; (4040 <linkedListInit+0x60>)
    3ffc:	011a      	lsls	r2, r3, #4
    3ffe:	1881      	adds	r1, r0, r2
    4000:	f241 34f6 	movw	r4, #5110	; 0x13f6
    4004:	804c      	strh	r4, [r1, #2]
		// We aren't actually using the STEPSIZE part of incrementing the destination address. 
		linkedList[i].BTCTRL.reg = DMAC_BTCTRL_STEPSIZE(0) | (CONF_DMAC_STEPSEL_0 << DMAC_BTCTRL_STEPSEL_Pos)						\
    4006:	f640 2409 	movw	r4, #2569	; 0xa09
    400a:	5284      	strh	r4, [r0, r2]
								| (CONF_DMAC_DSTINC_0 << DMAC_BTCTRL_DSTINC_Pos) | (CONF_DMAC_SRCINC_0 << DMAC_BTCTRL_SRCINC_Pos)	\
								| DMAC_BTCTRL_BEATSIZE(CONF_DMAC_BEATSIZE_0) | DMAC_BTCTRL_BLOCKACT(CONF_DMAC_BLOCKACT_0 | 0x01)            \
								| DMAC_BTCTRL_EVOSEL(CONF_DMAC_EVOSEL_0) | DMAC_BTCTRL_VALID;
	
		linkedList[i].SRCADDR.reg = (uint32_t)(&PCC->RHR.reg); //(void *)&(((Pcc *)device->hw)->RHR.reg)
    400c:	4a0d      	ldr	r2, [pc, #52]	; (4044 <linkedListInit+0x64>)
    400e:	604a      	str	r2, [r1, #4]
		
		// Destination address when incrementing address needs to be the end address and not the start address.
		// I think the last scale multiplication needs to be either 3 or 5 but _dma_set_data_amount() uses a 4.
		linkedList[i].DSTADDR.reg = (uint32_t)(&dataBuffer[i][BUFFER_HEADER_LENGTH]) + linkedList[i].BTCNT.reg * 4;
    4010:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    4014:	0302      	lsls	r2, r0, #12
    4016:	3228      	adds	r2, #40	; 0x28
    4018:	480b      	ldr	r0, [pc, #44]	; (4048 <linkedListInit+0x68>)
    401a:	4402      	add	r2, r0
    401c:	8848      	ldrh	r0, [r1, #2]
    401e:	b280      	uxth	r0, r0
    4020:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4024:	608a      	str	r2, [r1, #8]
	for (uint8_t i = 0; i < NUM_BUFFERS; i++) {
    4026:	3301      	adds	r3, #1
    4028:	b2db      	uxtb	r3, r3
    402a:	2b07      	cmp	r3, #7
    402c:	d9dc      	bls.n	3fe8 <linkedListInit+0x8>
	}
	//setPCCCurrentLinkedListPosition(0);
}
    402e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4032:	4770      	bx	lr
			linkedList[i].DESCADDR.reg = (uint32_t)&linkedList[0];
    4034:	4a02      	ldr	r2, [pc, #8]	; (4040 <linkedListInit+0x60>)
    4036:	eb02 1103 	add.w	r1, r2, r3, lsl #4
    403a:	60ca      	str	r2, [r1, #12]
    403c:	e7dd      	b.n	3ffa <linkedListInit+0x1a>
    403e:	4770      	bx	lr
    4040:	20000ba0 	.word	0x20000ba0
    4044:	43002c14 	.word	0x43002c14
    4048:	20000c34 	.word	0x20000c34

0000404c <setPCCCurrentLinkedListPosition>:
void setPCCCurrentLinkedListPosition(uint8_t pos)
{
    404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Set up initial DMA descriptor for DMA channel handling PCC. BTCNT is already setup in DMA init step
	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].SRCADDR.reg);
    404e:	4f0e      	ldr	r7, [pc, #56]	; (4088 <setPCCCurrentLinkedListPosition+0x3c>)
    4050:	0106      	lsls	r6, r0, #4
    4052:	19bc      	adds	r4, r7, r6
    4054:	6861      	ldr	r1, [r4, #4]
    4056:	2000      	movs	r0, #0
    4058:	4b0c      	ldr	r3, [pc, #48]	; (408c <setPCCCurrentLinkedListPosition+0x40>)
    405a:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg);
    405c:	68a1      	ldr	r1, [r4, #8]
    405e:	2000      	movs	r0, #0
    4060:	4d0b      	ldr	r5, [pc, #44]	; (4090 <setPCCCurrentLinkedListPosition+0x44>)
    4062:	47a8      	blx	r5
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].BTCNT.reg);
    4064:	8861      	ldrh	r1, [r4, #2]
    4066:	b289      	uxth	r1, r1
    4068:	2000      	movs	r0, #0
    406a:	4b0a      	ldr	r3, [pc, #40]	; (4094 <setPCCCurrentLinkedListPosition+0x48>)
    406c:	4798      	blx	r3
	_dma_set_BTCTRL(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].BTCTRL.reg);
    406e:	5bb9      	ldrh	r1, [r7, r6]
    4070:	b289      	uxth	r1, r1
    4072:	2000      	movs	r0, #0
    4074:	4b08      	ldr	r3, [pc, #32]	; (4098 <setPCCCurrentLinkedListPosition+0x4c>)
    4076:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, (void *)linkedList[pos].DSTADDR.reg); // Overwrite destination address since set_data_amount function modifies this
    4078:	68a1      	ldr	r1, [r4, #8]
    407a:	2000      	movs	r0, #0
    407c:	47a8      	blx	r5

	_dma_set_DESCADDR(CONF_PCC_DMA_CHANNEL, linkedList[pos].DESCADDR.reg);
    407e:	68e1      	ldr	r1, [r4, #12]
    4080:	2000      	movs	r0, #0
    4082:	4b06      	ldr	r3, [pc, #24]	; (409c <setPCCCurrentLinkedListPosition+0x50>)
    4084:	4798      	blx	r3
    4086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4088:	20000ba0 	.word	0x20000ba0
    408c:	00001c5d 	.word	0x00001c5d
    4090:	00001c4d 	.word	0x00001c4d
    4094:	00001c9d 	.word	0x00001c9d
    4098:	00001c6d 	.word	0x00001c6d
    409c:	00001c7d 	.word	0x00001c7d

000040a0 <frameValid_cb>:
{
    40a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40a2:	b083      	sub	sp, #12
	CRITICAL_SECTION_ENTER();
    40a4:	a801      	add	r0, sp, #4
    40a6:	4d47      	ldr	r5, [pc, #284]	; (41c4 <frameValid_cb+0x124>)
    40a8:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    40aa:	4e47      	ldr	r6, [pc, #284]	; (41c8 <frameValid_cb+0x128>)
    40ac:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    40b0:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    40b4:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    40b8:	405c      	eors	r4, r3
    40ba:	4014      	ands	r4, r2
    40bc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    40be:	a801      	add	r0, sp, #4
    40c0:	4f42      	ldr	r7, [pc, #264]	; (41cc <frameValid_cb+0x12c>)
    40c2:	47b8      	blx	r7
    40c4:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
	CRITICAL_SECTION_ENTER();
    40c8:	4668      	mov	r0, sp
    40ca:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    40cc:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    40d0:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    40d4:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    40d8:	405d      	eors	r5, r3
    40da:	4015      	ands	r5, r2
    40dc:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    40de:	4668      	mov	r0, sp
    40e0:	47b8      	blx	r7
	if (gpio_get_pin_level(LED_STATUS) == 1) {
    40e2:	f415 7f00 	tst.w	r5, #512	; 0x200
    40e6:	d00f      	beq.n	4108 <frameValid_cb+0x68>
		setStatusLED(0);
    40e8:	2000      	movs	r0, #0
    40ea:	4b39      	ldr	r3, [pc, #228]	; (41d0 <frameValid_cb+0x130>)
    40ec:	4798      	blx	r3
	if (pinState == true) {
    40ee:	b94c      	cbnz	r4, 4104 <frameValid_cb+0x64>
		if (deviceState & (DEVICE_STATE_RECORDING | DEVICE_STATE_STOP_RECORDING)) {
    40f0:	4b38      	ldr	r3, [pc, #224]	; (41d4 <frameValid_cb+0x134>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	f013 0f18 	tst.w	r3, #24
    40f8:	d10a      	bne.n	4110 <frameValid_cb+0x70>
		else if (deviceState & DEVICE_STATE_START_RECORDING_WAITING) {
    40fa:	4b36      	ldr	r3, [pc, #216]	; (41d4 <frameValid_cb+0x134>)
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	f413 7f00 	tst.w	r3, #512	; 0x200
    4102:	d13e      	bne.n	4182 <frameValid_cb+0xe2>
}
    4104:	b003      	add	sp, #12
    4106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setStatusLED(1);
    4108:	2001      	movs	r0, #1
    410a:	4b31      	ldr	r3, [pc, #196]	; (41d0 <frameValid_cb+0x130>)
    410c:	4798      	blx	r3
    410e:	e7ee      	b.n	40ee <frameValid_cb+0x4e>
			PCC->MR.reg &= ~(PCC_MR_PCEN); // Disables PCC
    4110:	4a31      	ldr	r2, [pc, #196]	; (41d8 <frameValid_cb+0x138>)
    4112:	6813      	ldr	r3, [r2, #0]
    4114:	f023 0301 	bic.w	r3, r3, #1
    4118:	6013      	str	r3, [r2, #0]
			DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHCTRLA.reg &= ~(DMAC_CHCTRLA_ENABLE); // Disables PCC DMA
    411a:	4a30      	ldr	r2, [pc, #192]	; (41dc <frameValid_cb+0x13c>)
    411c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    411e:	f023 0302 	bic.w	r3, r3, #2
    4122:	6413      	str	r3, [r2, #64]	; 0x40
			setBufferHeader((BUFFER_BLOCK_LENGTH * BLOCK_SIZE_IN_WORDS - BUFFER_HEADER_LENGTH) - _dma_get_WRB_data(CONF_PCC_DMA_CHANNEL)); // This should get total beats transferred through DMA
    4124:	2000      	movs	r0, #0
    4126:	4b2e      	ldr	r3, [pc, #184]	; (41e0 <frameValid_cb+0x140>)
    4128:	4798      	blx	r3
    412a:	f5c0 509f 	rsb	r0, r0, #5088	; 0x13e0
    412e:	3016      	adds	r0, #22
    4130:	4b2c      	ldr	r3, [pc, #176]	; (41e4 <frameValid_cb+0x144>)
    4132:	4798      	blx	r3
			frameBufferCount = 0;
    4134:	4b2c      	ldr	r3, [pc, #176]	; (41e8 <frameValid_cb+0x148>)
    4136:	2200      	movs	r2, #0
    4138:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			bufferCount++; // A buffer has been filled (likely partially) and is ready for writing to SD card
    413c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    4140:	3201      	adds	r2, #1
    4142:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			frameNum++; // Zero-Indexed
    4146:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    414a:	3201      	adds	r2, #1
    414c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (deviceState & DEVICE_STATE_RECORDING) { // Keep recording
    4150:	4b20      	ldr	r3, [pc, #128]	; (41d4 <frameValid_cb+0x134>)
    4152:	681b      	ldr	r3, [r3, #0]
    4154:	f013 0f08 	tst.w	r3, #8
    4158:	d102      	bne.n	4160 <frameValid_cb+0xc0>
			if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    415a:	4b1e      	ldr	r3, [pc, #120]	; (41d4 <frameValid_cb+0x134>)
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	e7d1      	b.n	4104 <frameValid_cb+0x64>
				setPCCCurrentLinkedListPosition(bufferCount % NUM_BUFFERS); // Moves to next buffer/linked list element
    4160:	4b21      	ldr	r3, [pc, #132]	; (41e8 <frameValid_cb+0x148>)
    4162:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    4166:	f000 0007 	and.w	r0, r0, #7
    416a:	4b20      	ldr	r3, [pc, #128]	; (41ec <frameValid_cb+0x14c>)
    416c:	4798      	blx	r3
				_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    416e:	2100      	movs	r1, #0
    4170:	4608      	mov	r0, r1
    4172:	4b1f      	ldr	r3, [pc, #124]	; (41f0 <frameValid_cb+0x150>)
    4174:	4798      	blx	r3
				PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    4176:	4a18      	ldr	r2, [pc, #96]	; (41d8 <frameValid_cb+0x138>)
    4178:	6813      	ldr	r3, [r2, #0]
    417a:	f043 0301 	orr.w	r3, r3, #1
    417e:	6013      	str	r3, [r2, #0]
    4180:	e7eb      	b.n	415a <frameValid_cb+0xba>
			frameNum = 0;
    4182:	4b19      	ldr	r3, [pc, #100]	; (41e8 <frameValid_cb+0x148>)
    4184:	2400      	movs	r4, #0
    4186:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
			bufferCount = 0;
    418a:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
			frameBufferCount = 0;
    418e:	f8c3 440c 	str.w	r4, [r3, #1036]	; 0x40c
			linkedListInit();
    4192:	4b18      	ldr	r3, [pc, #96]	; (41f4 <frameValid_cb+0x154>)
    4194:	4798      	blx	r3
			setPCCCurrentLinkedListPosition(0); // Moves to next buffer/linked list element
    4196:	4620      	mov	r0, r4
    4198:	4b14      	ldr	r3, [pc, #80]	; (41ec <frameValid_cb+0x14c>)
    419a:	4798      	blx	r3
			_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false); // Should enable DMA transfer
    419c:	4621      	mov	r1, r4
    419e:	4620      	mov	r0, r4
    41a0:	4b13      	ldr	r3, [pc, #76]	; (41f0 <frameValid_cb+0x150>)
    41a2:	4798      	blx	r3
			PCC->MR.reg |= PCC_MR_PCEN; // Enables PCC
    41a4:	4a0c      	ldr	r2, [pc, #48]	; (41d8 <frameValid_cb+0x138>)
    41a6:	6813      	ldr	r3, [r2, #0]
    41a8:	f043 0301 	orr.w	r3, r3, #1
    41ac:	6013      	str	r3, [r2, #0]
			deviceState &= ~(DEVICE_STATE_START_RECORDING_WAITING);
    41ae:	4b09      	ldr	r3, [pc, #36]	; (41d4 <frameValid_cb+0x134>)
    41b0:	681a      	ldr	r2, [r3, #0]
    41b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    41b6:	601a      	str	r2, [r3, #0]
			deviceState |= DEVICE_STATE_RECORDING;
    41b8:	681a      	ldr	r2, [r3, #0]
    41ba:	f042 0208 	orr.w	r2, r2, #8
    41be:	601a      	str	r2, [r3, #0]
}
    41c0:	e7a0      	b.n	4104 <frameValid_cb+0x64>
    41c2:	bf00      	nop
    41c4:	00000d41 	.word	0x00000d41
    41c8:	41008000 	.word	0x41008000
    41cc:	00000d4f 	.word	0x00000d4f
    41d0:	00003fc1 	.word	0x00003fc1
    41d4:	20000028 	.word	0x20000028
    41d8:	43002c00 	.word	0x43002c00
    41dc:	4100a000 	.word	0x4100a000
    41e0:	00001c8d 	.word	0x00001c8d
    41e4:	00003ead 	.word	0x00003ead
    41e8:	20000224 	.word	0x20000224
    41ec:	0000404d 	.word	0x0000404d
    41f0:	00001cf5 	.word	0x00001cf5
    41f4:	00003fe1 	.word	0x00003fe1

000041f8 <startRecording>:
}

void startRecording()
{
    41f8:	b508      	push	{r3, lr}
	writeFrameNum = 0;
    41fa:	2300      	movs	r3, #0
    41fc:	4a0d      	ldr	r2, [pc, #52]	; (4234 <startRecording+0x3c>)
    41fe:	6013      	str	r3, [r2, #0]
	writeBufferCount = 0;
    4200:	4a0d      	ldr	r2, [pc, #52]	; (4238 <startRecording+0x40>)
    4202:	6013      	str	r3, [r2, #0]
	droppedBufferCount = 0;
    4204:	4a0d      	ldr	r2, [pc, #52]	; (423c <startRecording+0x44>)
    4206:	6013      	str	r3, [r2, #0]
	droppedFrameCount = 0;
    4208:	4a0d      	ldr	r2, [pc, #52]	; (4240 <startRecording+0x48>)
    420a:	6013      	str	r3, [r2, #0]
	framesToDrop = 0;
    420c:	4a0d      	ldr	r2, [pc, #52]	; (4244 <startRecording+0x4c>)
    420e:	6013      	str	r3, [r2, #0]
	#ifndef ADMA_ENABLE
	sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK); 
	initBlocksRemaining = BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK;
	#endif // not ADMA_ENABLE
		
	startTimeMS = getCurrentTimeMS();
    4210:	4b0d      	ldr	r3, [pc, #52]	; (4248 <startRecording+0x50>)
    4212:	4798      	blx	r3
    4214:	4b0d      	ldr	r3, [pc, #52]	; (424c <startRecording+0x54>)
    4216:	6018      	str	r0, [r3, #0]
	
	deviceState &= ~(DEVICE_STATE_IDLE);
    4218:	4b0d      	ldr	r3, [pc, #52]	; (4250 <startRecording+0x58>)
    421a:	681a      	ldr	r2, [r3, #0]
    421c:	f022 0202 	bic.w	r2, r2, #2
    4220:	601a      	str	r2, [r3, #0]
	deviceState &= ~(DEVICE_STATE_START_RECORDING);
    4222:	681a      	ldr	r2, [r3, #0]
    4224:	f022 0204 	bic.w	r2, r2, #4
    4228:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    422a:	681a      	ldr	r2, [r3, #0]
    422c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4230:	601a      	str	r2, [r3, #0]
    4232:	bd08      	pop	{r3, pc}
    4234:	20000c30 	.word	0x20000c30
    4238:	20000c2c 	.word	0x20000c2c
    423c:	20000b9c 	.word	0x20000b9c
    4240:	20000c28 	.word	0x20000c28
    4244:	20000b98 	.word	0x20000b98
    4248:	00003e4d 	.word	0x00003e4d
    424c:	20000c24 	.word	0x20000c24
    4250:	20000028 	.word	0x20000028

00004254 <stopRecording>:
}

void stopRecording()
{
    4254:	b510      	push	{r4, lr}
	
	deviceState &= ~(DEVICE_STATE_STOP_RECORDING);
    4256:	4b15      	ldr	r3, [pc, #84]	; (42ac <stopRecording+0x58>)
    4258:	681a      	ldr	r2, [r3, #0]
    425a:	f022 0210 	bic.w	r2, r2, #16
    425e:	601a      	str	r2, [r3, #0]
	deviceState &= ~(DEVICE_STATE_RECORDING);
    4260:	681a      	ldr	r2, [r3, #0]
    4262:	f022 0208 	bic.w	r2, r2, #8
    4266:	601a      	str	r2, [r3, #0]
	deviceState |= DEVICE_STATE_IDLE;
    4268:	681a      	ldr	r2, [r3, #0]
    426a:	f042 0202 	orr.w	r2, r2, #2
    426e:	601a      	str	r2, [r3, #0]
	
	// TODO: Update currentBlock maybe to get ready for next recording??
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS, writeBufferCount);
    4270:	4b0f      	ldr	r3, [pc, #60]	; (42b0 <stopRecording+0x5c>)
    4272:	6819      	ldr	r1, [r3, #0]
    4274:	2004      	movs	r0, #4
    4276:	4c0f      	ldr	r4, [pc, #60]	; (42b4 <stopRecording+0x60>)
    4278:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS, droppedBufferCount);
    427a:	4b0f      	ldr	r3, [pc, #60]	; (42b8 <stopRecording+0x64>)
    427c:	6819      	ldr	r1, [r3, #0]
    427e:	2005      	movs	r0, #5
    4280:	47a0      	blx	r4
	
	// Currently not using ADMA. Might consider switching everything over to ADMA to be consistent
	sd_mmc_init_write_blocks(0,CONFIG_BLOCK, 1);
    4282:	2201      	movs	r2, #1
    4284:	f240 31ff 	movw	r1, #1023	; 0x3ff
    4288:	2000      	movs	r0, #0
    428a:	4b0c      	ldr	r3, [pc, #48]	; (42bc <stopRecording+0x68>)
    428c:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    428e:	2101      	movs	r1, #1
    4290:	480b      	ldr	r0, [pc, #44]	; (42c0 <stopRecording+0x6c>)
    4292:	4b0c      	ldr	r3, [pc, #48]	; (42c4 <stopRecording+0x70>)
    4294:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    4296:	2000      	movs	r0, #0
    4298:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <stopRecording+0x74>)
    429a:	4798      	blx	r3
	
	setExcitationLED(0, false);
    429c:	2100      	movs	r1, #0
    429e:	4608      	mov	r0, r1
    42a0:	4b0a      	ldr	r3, [pc, #40]	; (42cc <stopRecording+0x78>)
    42a2:	4798      	blx	r3
	setEWL(0x00);	//Sets the EWL to standby mode
    42a4:	2000      	movs	r0, #0
    42a6:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <stopRecording+0x7c>)
    42a8:	4798      	blx	r3
    42aa:	bd10      	pop	{r4, pc}
    42ac:	20000028 	.word	0x20000028
    42b0:	20000c2c 	.word	0x20000c2c
    42b4:	00003ea1 	.word	0x00003ea1
    42b8:	20000b9c 	.word	0x20000b9c
    42bc:	000050dd 	.word	0x000050dd
    42c0:	20000428 	.word	0x20000428
    42c4:	0000517d 	.word	0x0000517d
    42c8:	000051c9 	.word	0x000051c9
    42cc:	00003f61 	.word	0x00003f61
    42d0:	00003fb1 	.word	0x00003fb1

000042d4 <recording>:
	
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    42d4:	4b47      	ldr	r3, [pc, #284]	; (43f4 <recording+0x120>)
    42d6:	681b      	ldr	r3, [r3, #0]
    42d8:	4a47      	ldr	r2, [pc, #284]	; (43f8 <recording+0x124>)
    42da:	6812      	ldr	r2, [r2, #0]
    42dc:	4413      	add	r3, r2
    42de:	4a47      	ldr	r2, [pc, #284]	; (43fc <recording+0x128>)
    42e0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    42e4:	4293      	cmp	r3, r2
    42e6:	f080 8084 	bcs.w	43f2 <recording+0x11e>
{
    42ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    42ee:	4b41      	ldr	r3, [pc, #260]	; (43f4 <recording+0x120>)
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	4a41      	ldr	r2, [pc, #260]	; (43f8 <recording+0x124>)
    42f4:	6812      	ldr	r2, [r2, #0]
    42f6:	4413      	add	r3, r2
    42f8:	3308      	adds	r3, #8
    42fa:	4a40      	ldr	r2, [pc, #256]	; (43fc <recording+0x128>)
    42fc:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    4300:	4293      	cmp	r3, r2
    4302:	d221      	bcs.n	4348 <recording+0x74>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			// TODO: I think NUM_BUFFERS here should actually be number_of_buffers_per_frame
			droppedBufferCount += (numBuffersPerFrame - (writeBufferCount + droppedBufferCount) % numBuffersPerFrame);
    4304:	483d      	ldr	r0, [pc, #244]	; (43fc <recording+0x128>)
    4306:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
    430a:	4a3a      	ldr	r2, [pc, #232]	; (43f4 <recording+0x120>)
    430c:	6812      	ldr	r2, [r2, #0]
    430e:	493a      	ldr	r1, [pc, #232]	; (43f8 <recording+0x124>)
    4310:	680c      	ldr	r4, [r1, #0]
    4312:	4422      	add	r2, r4
    4314:	f8d0 4410 	ldr.w	r4, [r0, #1040]	; 0x410
    4318:	fbb2 f0f4 	udiv	r0, r2, r4
    431c:	fb04 2210 	mls	r2, r4, r0, r2
    4320:	1a9b      	subs	r3, r3, r2
    4322:	680a      	ldr	r2, [r1, #0]
    4324:	4413      	add	r3, r2
    4326:	600b      	str	r3, [r1, #0]
			//}
		//}		
		
		//if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
			//10*2000000
		if (((getCurrentTimeMS() - startTimeMS) >= 1000*30))
    4328:	4b35      	ldr	r3, [pc, #212]	; (4400 <recording+0x12c>)
    432a:	4798      	blx	r3
    432c:	4b35      	ldr	r3, [pc, #212]	; (4404 <recording+0x130>)
    432e:	681b      	ldr	r3, [r3, #0]
    4330:	1ac0      	subs	r0, r0, r3
    4332:	f247 532f 	movw	r3, #29999	; 0x752f
    4336:	4298      	cmp	r0, r3
    4338:	d904      	bls.n	4344 <recording+0x70>
		{

			// Recording time has elapsed
			deviceState |= DEVICE_STATE_STOP_RECORDING; // Sets the flag to want to end current recording			
    433a:	4a33      	ldr	r2, [pc, #204]	; (4408 <recording+0x134>)
    433c:	6813      	ldr	r3, [r2, #0]
    433e:	f043 0310 	orr.w	r3, r3, #16
    4342:	6013      	str	r3, [r2, #0]
    4344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    4348:	4b2a      	ldr	r3, [pc, #168]	; (43f4 <recording+0x120>)
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	4a2a      	ldr	r2, [pc, #168]	; (43f8 <recording+0x124>)
    434e:	6812      	ldr	r2, [r2, #0]
    4350:	4413      	add	r3, r2
    4352:	f003 0307 	and.w	r3, r3, #7
    4356:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    435a:	031c      	lsls	r4, r3, #12
    435c:	4b2b      	ldr	r3, [pc, #172]	; (440c <recording+0x138>)
    435e:	441c      	add	r4, r3
    4360:	4b2b      	ldr	r3, [pc, #172]	; (4410 <recording+0x13c>)
    4362:	601c      	str	r4, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    4364:	6a23      	ldr	r3, [r4, #32]
    4366:	f203 2327 	addw	r3, r3, #551	; 0x227
    436a:	0a5b      	lsrs	r3, r3, #9
    436c:	4a26      	ldr	r2, [pc, #152]	; (4408 <recording+0x134>)
    436e:	6053      	str	r3, [r2, #4]
			if (numBlocks > BUFFER_BLOCK_LENGTH)
    4370:	6853      	ldr	r3, [r2, #4]
    4372:	2b28      	cmp	r3, #40	; 0x28
    4374:	d902      	bls.n	437c <recording+0xa8>
				numBlocks = BUFFER_BLOCK_LENGTH;
    4376:	2228      	movs	r2, #40	; 0x28
    4378:	4b23      	ldr	r3, [pc, #140]	; (4408 <recording+0x134>)
    437a:	605a      	str	r2, [r3, #4]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    437c:	4d1d      	ldr	r5, [pc, #116]	; (43f4 <recording+0x120>)
    437e:	682b      	ldr	r3, [r5, #0]
    4380:	6163      	str	r3, [r4, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    4382:	f8df 8074 	ldr.w	r8, [pc, #116]	; 43f8 <recording+0x124>
    4386:	f8d8 3000 	ldr.w	r3, [r8]
    438a:	61a3      	str	r3, [r4, #24]
			bufferToWrite[BUFFER_HEADER_WRITE_TIMESTAMP_POS] = getCurrentTimeMS() - startTimeMS;
    438c:	4f1c      	ldr	r7, [pc, #112]	; (4400 <recording+0x12c>)
    438e:	47b8      	blx	r7
    4390:	4e1c      	ldr	r6, [pc, #112]	; (4404 <recording+0x130>)
    4392:	6833      	ldr	r3, [r6, #0]
    4394:	1ac0      	subs	r0, r0, r3
    4396:	6260      	str	r0, [r4, #36]	; 0x24
			tempTimestamp[(writeBufferCount + droppedBufferCount) % 100] = getCurrentTimeMS() - startTimeMS;
    4398:	682b      	ldr	r3, [r5, #0]
    439a:	f8d8 2000 	ldr.w	r2, [r8]
    439e:	4413      	add	r3, r2
    43a0:	4c1c      	ldr	r4, [pc, #112]	; (4414 <recording+0x140>)
    43a2:	fba4 2403 	umull	r2, r4, r4, r3
    43a6:	0964      	lsrs	r4, r4, #5
    43a8:	2264      	movs	r2, #100	; 0x64
    43aa:	fb02 3414 	mls	r4, r2, r4, r3
    43ae:	47b8      	blx	r7
    43b0:	6833      	ldr	r3, [r6, #0]
    43b2:	1ac0      	subs	r0, r0, r3
    43b4:	4b18      	ldr	r3, [pc, #96]	; (4418 <recording+0x144>)
    43b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
			setSDDescriptor(bufferToWrite, numBlocks * SD_BLOCK_SIZE, 
    43ba:	4c13      	ldr	r4, [pc, #76]	; (4408 <recording+0x134>)
    43bc:	6861      	ldr	r1, [r4, #4]
    43be:	0249      	lsls	r1, r1, #9
    43c0:	2223      	movs	r2, #35	; 0x23
    43c2:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    43c6:	4b12      	ldr	r3, [pc, #72]	; (4410 <recording+0x13c>)
    43c8:	6818      	ldr	r0, [r3, #0]
    43ca:	4b14      	ldr	r3, [pc, #80]	; (441c <recording+0x148>)
    43cc:	4798      	blx	r3
			sd_mmc_write_with_ADMA(0, currentBlock, (uint32_t)&SDTransferDescriptor, numBlocks);
    43ce:	68a1      	ldr	r1, [r4, #8]
    43d0:	6863      	ldr	r3, [r4, #4]
    43d2:	b29b      	uxth	r3, r3
    43d4:	4a12      	ldr	r2, [pc, #72]	; (4420 <recording+0x14c>)
    43d6:	2000      	movs	r0, #0
    43d8:	4e12      	ldr	r6, [pc, #72]	; (4424 <recording+0x150>)
    43da:	47b0      	blx	r6
			sd_mmc_wait_end_of_ADMA_write(false);
    43dc:	2000      	movs	r0, #0
    43de:	4b12      	ldr	r3, [pc, #72]	; (4428 <recording+0x154>)
    43e0:	4798      	blx	r3
			currentBlock += numBlocks;
    43e2:	6863      	ldr	r3, [r4, #4]
    43e4:	68a2      	ldr	r2, [r4, #8]
    43e6:	4413      	add	r3, r2
    43e8:	60a3      	str	r3, [r4, #8]
			writeBufferCount++;	
    43ea:	682b      	ldr	r3, [r5, #0]
    43ec:	3301      	adds	r3, #1
    43ee:	602b      	str	r3, [r5, #0]
    43f0:	e79a      	b.n	4328 <recording+0x54>
    43f2:	4770      	bx	lr
    43f4:	20000c2c 	.word	0x20000c2c
    43f8:	20000b9c 	.word	0x20000b9c
    43fc:	20000224 	.word	0x20000224
    4400:	00003e4d 	.word	0x00003e4d
    4404:	20000c24 	.word	0x20000c24
    4408:	20000028 	.word	0x20000028
    440c:	20000c34 	.word	0x20000c34
    4410:	20000c20 	.word	0x20000c20
    4414:	51eb851f 	.word	0x51eb851f
    4418:	20029290 	.word	0x20029290
    441c:	00003f3d 	.word	0x00003f3d
    4420:	20029288 	.word	0x20029288
    4424:	00004fb9 	.word	0x00004fb9
    4428:	000050a9 	.word	0x000050a9

0000442c <main>:
// Consider putting ADC value and deviceState in frame header: TODO
// Check SD card write speed by directly measuring the clock pin with oscilloscope. Potentially it needs to be sped up: TODO

// ================================================================
int main(void)
{
    442c:	b570      	push	{r4, r5, r6, lr}
	uint32_t lastTime = 0;
	bool lastMonitor0 = 0;
	bool thisMonitor0 = 0;
	
	// Probably should put this somewhere else or as a define
	numBuffersPerFrame = (WIDTH * HEIGHT) / (BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE - (BUFFER_HEADER_LENGTH * 4));
    442e:	4c70      	ldr	r4, [pc, #448]	; (45f0 <main+0x1c4>)
    4430:	2312      	movs	r3, #18
    4432:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
	if ((WIDTH * HEIGHT) % (BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE - (BUFFER_HEADER_LENGTH * 4)) != 0)
	// Need to add 1 to account for partially filled buffer
		numBuffersPerFrame += 1;
    4436:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
    443a:	3301      	adds	r3, #1
    443c:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
		
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();	
    4440:	4b6c      	ldr	r3, [pc, #432]	; (45f4 <main+0x1c8>)
    4442:	4798      	blx	r3
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4444:	2502      	movs	r5, #2
    4446:	4b6c      	ldr	r3, [pc, #432]	; (45f8 <main+0x1cc>)
    4448:	731d      	strb	r5, [r3, #12]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    444a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    444e:	4b6b      	ldr	r3, [pc, #428]	; (45fc <main+0x1d0>)
    4450:	619a      	str	r2, [r3, #24]
	// We need to change the PWM mode from MPWM to NPWM because we are using WO[0] as waveform output
	hri_tc_write_WAVE_reg(TC0, TC_WAVE_WAVEGEN_NPWM_Val);	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);
	// Enable ADC for checking battery voltage
	adc_sync_enable_channel(&ADC_0, 0);
    4452:	2100      	movs	r1, #0
    4454:	486a      	ldr	r0, [pc, #424]	; (4600 <main+0x1d4>)
    4456:	4b6b      	ldr	r3, [pc, #428]	; (4604 <main+0x1d8>)
    4458:	4798      	blx	r3
	
	
	setStatusLED(1);	
    445a:	2001      	movs	r0, #1
    445c:	4b6a      	ldr	r3, [pc, #424]	; (4608 <main+0x1dc>)
    445e:	4798      	blx	r3
	
	I2C_BB_init();
    4460:	4b6a      	ldr	r3, [pc, #424]	; (460c <main+0x1e0>)
    4462:	4798      	blx	r3
	setEWL(0xFE);
    4464:	20fe      	movs	r0, #254	; 0xfe
    4466:	4b6a      	ldr	r3, [pc, #424]	; (4610 <main+0x1e4>)
    4468:	4798      	blx	r3
	setExcitationLED(2,1);
    446a:	2101      	movs	r1, #1
    446c:	4628      	mov	r0, r5
    446e:	4b69      	ldr	r3, [pc, #420]	; (4614 <main+0x1e8>)
    4470:	4798      	blx	r3
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 1; // Need to check this value
    4472:	2301      	movs	r3, #1
    4474:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.cb       = millisecondTimer_cb;
    4478:	4a67      	ldr	r2, [pc, #412]	; (4618 <main+0x1ec>)
    447a:	f8c4 2420 	str.w	r2, [r4, #1056]	; 0x420
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    447e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
	
	TIMER_0_task2.interval = 1000; // Units are in ms so 1000 should check every 1 second
    4482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4486:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    448a:	4a64      	ldr	r2, [pc, #400]	; (461c <main+0x1f0>)
    448c:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    4490:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    4494:	4d62      	ldr	r5, [pc, #392]	; (4620 <main+0x1f4>)
    4496:	f204 4114 	addw	r1, r4, #1044	; 0x414
    449a:	4628      	mov	r0, r5
    449c:	4e61      	ldr	r6, [pc, #388]	; (4624 <main+0x1f8>)
    449e:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    44a0:	f504 6185 	add.w	r1, r4, #1064	; 0x428
    44a4:	4628      	mov	r0, r5
    44a6:	47b0      	blx	r6
	timer_start(&TIMER_0);
    44a8:	4628      	mov	r0, r5
    44aa:	4b5f      	ldr	r3, [pc, #380]	; (4628 <main+0x1fc>)
    44ac:	4798      	blx	r3
	
			
	// Setup callbacks for external interrupts
	ext_irq_register(PIN_PB22, irReceive_cb);
    44ae:	495f      	ldr	r1, [pc, #380]	; (462c <main+0x200>)
    44b0:	2036      	movs	r0, #54	; 0x36
    44b2:	4c5f      	ldr	r4, [pc, #380]	; (4630 <main+0x204>)
    44b4:	47a0      	blx	r4
	ext_irq_register(PIN_PB23, battCharging_cb);
    44b6:	495f      	ldr	r1, [pc, #380]	; (4634 <main+0x208>)
    44b8:	2037      	movs	r0, #55	; 0x37
    44ba:	47a0      	blx	r4
	ext_irq_register(PIN_PB14, frameValid_cb);
    44bc:	495e      	ldr	r1, [pc, #376]	; (4638 <main+0x20c>)
    44be:	202e      	movs	r0, #46	; 0x2e
    44c0:	47a0      	blx	r4
	ext_irq_register(PIN_PA25, pushButton_cb);
    44c2:	495e      	ldr	r1, [pc, #376]	; (463c <main+0x210>)
    44c4:	2019      	movs	r0, #25
    44c6:	47a0      	blx	r4
	
	
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
    44c8:	4b5d      	ldr	r3, [pc, #372]	; (4640 <main+0x214>)
    44ca:	4798      	blx	r3
	
	
	// Wait for SD Card and then load config from it
	while (SD_MMC_OK != sd_mmc_check(0)) {}
    44cc:	2000      	movs	r0, #0
    44ce:	4b5d      	ldr	r3, [pc, #372]	; (4644 <main+0x218>)
    44d0:	4798      	blx	r3
    44d2:	2800      	cmp	r0, #0
    44d4:	d1fa      	bne.n	44cc <main+0xa0>
		if (loadSDCardHeader() == MS_SUCCESS)
    44d6:	4b5c      	ldr	r3, [pc, #368]	; (4648 <main+0x21c>)
    44d8:	4798      	blx	r3
    44da:	2801      	cmp	r0, #1
    44dc:	d16a      	bne.n	45b4 <main+0x188>
			deviceState |= DEVICE_STATE_CONFIG_LOADED;
    44de:	4a5b      	ldr	r2, [pc, #364]	; (464c <main+0x220>)
    44e0:	6813      	ldr	r3, [r2, #0]
    44e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    44e6:	6013      	str	r3, [r2, #0]
		else
			deviceState |= DEVICE_STATE_ERROR;
	
	// Give capabilities info of sd card
	tempPCC[0] = SDHC0->CA0R.reg;
    44e8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    44ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
    44ee:	4a58      	ldr	r2, [pc, #352]	; (4650 <main+0x224>)
    44f0:	6011      	str	r1, [r2, #0]
	tempPCC[1] = SDHC0->CA1R.reg;
    44f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
    44f4:	6051      	str	r1, [r2, #4]
	tempPCC[2] = SDHC0->HC1R.reg;
    44f6:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
    44fa:	b2c9      	uxtb	r1, r1
    44fc:	6091      	str	r1, [r2, #8]
	
	// Select ADMA as the DMA to use. This should be moved to where other bits of HC1R get set.
	SDHC0->HC1R.reg |= 1<<4;
    44fe:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    4502:	f042 0210 	orr.w	r2, r2, #16
    4506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    450a:	4c3c      	ldr	r4, [pc, #240]	; (45fc <main+0x1d0>)
    450c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    4510:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	
	// Setup Image Sensor
	// TODO: Work on minimizing power draw
	// Trigger pin gets init'ed as output low and shouldn't need to be adjusted
	gpio_set_pin_level(RESET_CMOS, 0); // Make sure N_RESET of the PYTHON480 is low for a bit before going high. Shouldn't be needed
	delay_ms(100);
    4514:	2064      	movs	r0, #100	; 0x64
    4516:	4b4f      	ldr	r3, [pc, #316]	; (4654 <main+0x228>)
    4518:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    451a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	gpio_set_pin_level(RESET_CMOS, 1);
	delay_us(100); // minimum delay is 10us
    451e:	2064      	movs	r0, #100	; 0x64
    4520:	4b4d      	ldr	r3, [pc, #308]	; (4658 <main+0x22c>)
    4522:	4798      	blx	r3
	chip_id = spi_BB_Read(0x00); // can use this to make sure MCU can talk to Python480
    4524:	2000      	movs	r0, #0
    4526:	4b4d      	ldr	r3, [pc, #308]	; (465c <main+0x230>)
    4528:	4798      	blx	r3
    452a:	4b4d      	ldr	r3, [pc, #308]	; (4660 <main+0x234>)
    452c:	8018      	strh	r0, [r3, #0]
	python480Init();
    452e:	4b4d      	ldr	r3, [pc, #308]	; (4664 <main+0x238>)
    4530:	4798      	blx	r3
	Enable_Subsample();
    4532:	4b4d      	ldr	r3, [pc, #308]	; (4668 <main+0x23c>)
    4534:	4798      	blx	r3
	setExcitationLED(getPropFromHeader(HEADER_LED_POS), false);	
	python480SetGain(getPropFromHeader(HEADER_GAIN_POS));
	python480SetFPS(getPropFromHeader(HEADER_FRAME_RATE_POS));
	*/
	
	python480SetGain(1);
    4536:	2001      	movs	r0, #1
    4538:	4b4c      	ldr	r3, [pc, #304]	; (466c <main+0x240>)
    453a:	4798      	blx	r3
	python480SetFPS(FRAME_RATE);
    453c:	2014      	movs	r0, #20
    453e:	4b4c      	ldr	r3, [pc, #304]	; (4670 <main+0x244>)
    4540:	4798      	blx	r3
	
	// Set some parameters in config buffer to be written to SD card at end of recording
	// TODO: Add additional info in the config block to cover everything needed for offline processing
	setConfigBlockProp(CONFIG_BLOCK_WIDTH_POS, WIDTH / BINNING);
    4542:	f44f 7198 	mov.w	r1, #304	; 0x130
    4546:	2000      	movs	r0, #0
    4548:	4c4a      	ldr	r4, [pc, #296]	; (4674 <main+0x248>)
    454a:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_HEIGHT_POS, HEIGHT / BINNING);
    454c:	f44f 7198 	mov.w	r1, #304	; 0x130
    4550:	2001      	movs	r0, #1
    4552:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_FRAME_RATE_POS, getPropFromHeader(HEADER_FRAME_RATE_POS));
    4554:	2008      	movs	r0, #8
    4556:	4b48      	ldr	r3, [pc, #288]	; (4678 <main+0x24c>)
    4558:	4798      	blx	r3
    455a:	4601      	mov	r1, r0
    455c:	2002      	movs	r0, #2
    455e:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_BUFFER_SIZE_POS, BUFFER_BLOCK_LENGTH * SD_BLOCK_SIZE);
    4560:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    4564:	2003      	movs	r0, #3
    4566:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS, 0);
    4568:	2100      	movs	r1, #0
    456a:	2004      	movs	r0, #4
    456c:	47a0      	blx	r4
	setConfigBlockProp(CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS,0);
    456e:	2100      	movs	r1, #0
    4570:	2005      	movs	r0, #5
    4572:	47a0      	blx	r4
	
	sd_mmc_init_write_blocks(0, CONFIG_BLOCK, 1);
    4574:	2201      	movs	r2, #1
    4576:	f240 31ff 	movw	r1, #1023	; 0x3ff
    457a:	2000      	movs	r0, #0
    457c:	4b3f      	ldr	r3, [pc, #252]	; (467c <main+0x250>)
    457e:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
    4580:	2101      	movs	r1, #1
    4582:	483f      	ldr	r0, [pc, #252]	; (4680 <main+0x254>)
    4584:	4b3f      	ldr	r3, [pc, #252]	; (4684 <main+0x258>)
    4586:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    4588:	2000      	movs	r0, #0
    458a:	4b3f      	ldr	r3, [pc, #252]	; (4688 <main+0x25c>)
    458c:	4798      	blx	r3
	//setExcitationLED(2,1);
	
	//setEWL(0x33);  //test value. Should we map the 0x01 to 0xFF as a 0-100 scale?
	
	// Enables DMA Transfer complete interrupt. Should be put in better place
	DMAC->Channel[CONF_PCC_DMA_CHANNEL].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    458e:	2202      	movs	r2, #2
    4590:	4b3e      	ldr	r3, [pc, #248]	; (468c <main+0x260>)
    4592:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 *  \retval ERR_NONE A callback is registered successfully
 *  \retval -1 Passed parameters were invalid
 */
static inline int32_t camera_async_register_callback(struct camera_async_descriptor *const descr, camera_async_cb_t cb)
{
	ASSERT(descr);
    4596:	22a2      	movs	r2, #162	; 0xa2
    4598:	493d      	ldr	r1, [pc, #244]	; (4690 <main+0x264>)
    459a:	2001      	movs	r0, #1
    459c:	4b3d      	ldr	r3, [pc, #244]	; (4694 <main+0x268>)
    459e:	4798      	blx	r3

	descr->capture_done = cb;
    45a0:	4a3d      	ldr	r2, [pc, #244]	; (4698 <main+0x26c>)
    45a2:	4b3e      	ldr	r3, [pc, #248]	; (469c <main+0x270>)
    45a4:	611a      	str	r2, [r3, #16]
	
	// Sets the callback for when each DMA buffer is full
	camera_async_register_callback(&CAMERA_0, pcc_dma_cb);
	
	// This should already be done in init but trying here as well
	PCC->MR.reg = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
    45a6:	4a3e      	ldr	r2, [pc, #248]	; (46a0 <main+0x274>)
    45a8:	4b3e      	ldr	r3, [pc, #248]	; (46a4 <main+0x278>)
    45aa:	601a      	str	r2, [r3, #0]
	
	// These PCC interrupts aren't needed for DMA functioning	   
	//PCC->IDR.reg = 2;
	//PCC->IER.reg = 3;
	
	deviceState = DEVICE_STATE_START_RECORDING;
    45ac:	2204      	movs	r2, #4
    45ae:	4b27      	ldr	r3, [pc, #156]	; (464c <main+0x220>)
    45b0:	601a      	str	r2, [r3, #0]
    45b2:	e00d      	b.n	45d0 <main+0x1a4>
			deviceState |= DEVICE_STATE_ERROR;
    45b4:	4a25      	ldr	r2, [pc, #148]	; (464c <main+0x220>)
    45b6:	6813      	ldr	r3, [r2, #0]
    45b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    45bc:	6013      	str	r3, [r2, #0]
    45be:	e793      	b.n	44e8 <main+0xbc>
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING) {
			startRecording();
    45c0:	4b39      	ldr	r3, [pc, #228]	; (46a8 <main+0x27c>)
    45c2:	4798      	blx	r3
    45c4:	e009      	b.n	45da <main+0x1ae>
			//setEWL(0xFF);
			//tempPCC[0] = PCC->MR.reg;
			//tempPCC[1] = PCC->ISR.reg;
			//tempPCC[2] = PCC->RHR.reg;	
		}
		if (deviceState & DEVICE_STATE_STOP_RECORDING) {
    45c6:	4b21      	ldr	r3, [pc, #132]	; (464c <main+0x220>)
    45c8:	681b      	ldr	r3, [r3, #0]
    45ca:	f013 0f10 	tst.w	r3, #16
    45ce:	d10c      	bne.n	45ea <main+0x1be>
		if (deviceState & DEVICE_STATE_START_RECORDING) {
    45d0:	4b1e      	ldr	r3, [pc, #120]	; (464c <main+0x220>)
    45d2:	681b      	ldr	r3, [r3, #0]
    45d4:	f013 0f04 	tst.w	r3, #4
    45d8:	d1f2      	bne.n	45c0 <main+0x194>
		if (deviceState & DEVICE_STATE_RECORDING) {
    45da:	4b1c      	ldr	r3, [pc, #112]	; (464c <main+0x220>)
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	f013 0f08 	tst.w	r3, #8
    45e2:	d0f0      	beq.n	45c6 <main+0x19a>
			recording();
    45e4:	4b31      	ldr	r3, [pc, #196]	; (46ac <main+0x280>)
    45e6:	4798      	blx	r3
    45e8:	e7ed      	b.n	45c6 <main+0x19a>
			stopRecording();
    45ea:	4b31      	ldr	r3, [pc, #196]	; (46b0 <main+0x284>)
    45ec:	4798      	blx	r3
    45ee:	e7ef      	b.n	45d0 <main+0x1a4>
    45f0:	20000224 	.word	0x20000224
    45f4:	000002d1 	.word	0x000002d1
    45f8:	40003800 	.word	0x40003800
    45fc:	41008000 	.word	0x41008000
    4600:	200006d8 	.word	0x200006d8
    4604:	00000c75 	.word	0x00000c75
    4608:	00003fc1 	.word	0x00003fc1
    460c:	000034dd 	.word	0x000034dd
    4610:	00003fb1 	.word	0x00003fb1
    4614:	00003f61 	.word	0x00003f61
    4618:	00003561 	.word	0x00003561
    461c:	00003571 	.word	0x00003571
    4620:	20000748 	.word	0x20000748
    4624:	000013e9 	.word	0x000013e9
    4628:	000013ad 	.word	0x000013ad
    462c:	000035b5 	.word	0x000035b5
    4630:	00000e6d 	.word	0x00000e6d
    4634:	00003611 	.word	0x00003611
    4638:	000040a1 	.word	0x000040a1
    463c:	000035e5 	.word	0x000035e5
    4640:	00003fe1 	.word	0x00003fe1
    4644:	00004da1 	.word	0x00004da1
    4648:	00003e59 	.word	0x00003e59
    464c:	20000028 	.word	0x20000028
    4650:	20028c34 	.word	0x20028c34
    4654:	00000dd5 	.word	0x00000dd5
    4658:	00000db5 	.word	0x00000db5
    465c:	000037c1 	.word	0x000037c1
    4660:	20000b90 	.word	0x20000b90
    4664:	00003e01 	.word	0x00003e01
    4668:	00003e31 	.word	0x00003e31
    466c:	00003735 	.word	0x00003735
    4670:	00003771 	.word	0x00003771
    4674:	00003ea1 	.word	0x00003ea1
    4678:	00003e91 	.word	0x00003e91
    467c:	000050dd 	.word	0x000050dd
    4680:	20000428 	.word	0x20000428
    4684:	0000517d 	.word	0x0000517d
    4688:	000051c9 	.word	0x000051c9
    468c:	4100a000 	.word	0x4100a000
    4690:	000058d4 	.word	0x000058d4
    4694:	0000167d 	.word	0x0000167d
    4698:	00003f0d 	.word	0x00003f0d
    469c:	200006c4 	.word	0x200006c4
    46a0:	c0000020 	.word	0xc0000020
    46a4:	43002c00 	.word	0x43002c00
    46a8:	000041f9 	.word	0x000041f9
    46ac:	000042d5 	.word	0x000042d5
    46b0:	00004255 	.word	0x00004255

000046b4 <sdio_op_cond>:

#else
static bool sdio_op_cond(void)
{
	return true; /* No error but card type not updated */
}
    46b4:	2001      	movs	r0, #1
    46b6:	4770      	bx	lr

000046b8 <sd_decode_csd>:
	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	/* Get SD memory maximum transfer speed in Hz. */
	tran_speed         = CSD_TRAN_SPEED(sd_mmc_card->csd);
    46b8:	4b1f      	ldr	r3, [pc, #124]	; (4738 <sd_decode_csd+0x80>)
    46ba:	681a      	ldr	r2, [r3, #0]
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size, uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    46bc:	7c51      	ldrb	r1, [r2, #17]
	unit               = sd_mmc_trans_units[tran_speed & 0x7];
    46be:	f001 0007 	and.w	r0, r1, #7
    46c2:	4b1e      	ldr	r3, [pc, #120]	; (473c <sd_decode_csd+0x84>)
    46c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	mul                = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    46c8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
    46cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    46d0:	69d9      	ldr	r1, [r3, #28]
	sd_mmc_card->clock = unit * mul * 1000;
    46d2:	fb01 f100 	mul.w	r1, r1, r0
    46d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    46da:	fb03 f301 	mul.w	r3, r3, r1
    46de:	6013      	str	r3, [r2, #0]
    46e0:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    46e2:	099b      	lsrs	r3, r3, #6
    46e4:	d11a      	bne.n	471c <sd_decode_csd+0x64>
    46e6:	7d91      	ldrb	r1, [r2, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    46e8:	7d53      	ldrb	r3, [r2, #21]
    46ea:	009b      	lsls	r3, r3, #2
    46ec:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    46f0:	7d11      	ldrb	r1, [r2, #20]
    46f2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
	}
	if (((pos % 8) + size) > 24) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (24 - (pos % 8));
	}
	value &= ((uint32_t)1 << size) - 1;
    46f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
	} else {
		uint32_t blocknr
		    = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) * (1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    46fa:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    46fc:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    46fe:	7dd1      	ldrb	r1, [r2, #23]
    4700:	0049      	lsls	r1, r1, #1
    4702:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	value &= ((uint32_t)1 << size) - 1;
    4706:	f001 0107 	and.w	r1, r1, #7
    470a:	3102      	adds	r1, #2
		uint32_t blocknr
    470c:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    470e:	7cd1      	ldrb	r1, [r2, #19]
	value &= ((uint32_t)1 << size) - 1;
    4710:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr * (1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    4714:	408b      	lsls	r3, r1
    4716:	0a9b      	lsrs	r3, r3, #10
    4718:	6053      	str	r3, [r2, #4]
    471a:	4770      	bx	lr
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    471c:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    471e:	7d91      	ldrb	r1, [r2, #22]
    4720:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    4724:	7d51      	ldrb	r1, [r2, #21]
    4726:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	value &= ((uint32_t)1 << size) - 1;
    472a:	f3c3 0315 	ubfx	r3, r3, #0, #22
		sd_mmc_card->capacity = (SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1) * 512;
    472e:	3301      	adds	r3, #1
    4730:	025b      	lsls	r3, r3, #9
    4732:	6053      	str	r3, [r2, #4]
    4734:	4770      	bx	lr
    4736:	bf00      	nop
    4738:	2000066c 	.word	0x2000066c
    473c:	000058f8 	.word	0x000058f8

00004740 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    4740:	b510      	push	{r4, lr}
    4742:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    4744:	4807      	ldr	r0, [pc, #28]	; (4764 <sd_mmc_configure_slot+0x24>)
    4746:	6802      	ldr	r2, [r0, #0]
    4748:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    474a:	7b53      	ldrb	r3, [r2, #13]
    474c:	6812      	ldr	r2, [r2, #0]
    474e:	7901      	ldrb	r1, [r0, #4]
    4750:	6880      	ldr	r0, [r0, #8]
    4752:	3400      	adds	r4, #0
    4754:	bf18      	it	ne
    4756:	2401      	movne	r4, #1
    4758:	9400      	str	r4, [sp, #0]
    475a:	4c03      	ldr	r4, [pc, #12]	; (4768 <sd_mmc_configure_slot+0x28>)
    475c:	47a0      	blx	r4
}
    475e:	b002      	add	sp, #8
    4760:	bd10      	pop	{r4, pc}
    4762:	bf00      	nop
    4764:	2000066c 	.word	0x2000066c
    4768:	00000f71 	.word	0x00000f71

0000476c <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    476c:	b108      	cbz	r0, 4772 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    476e:	2004      	movs	r0, #4
    4770:	4770      	bx	lr
{
    4772:	b5f0      	push	{r4, r5, r6, r7, lr}
    4774:	b083      	sub	sp, #12
    4776:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    4778:	4b45      	ldr	r3, [pc, #276]	; (4890 <sd_mmc_select_slot+0x124>)
    477a:	68db      	ldr	r3, [r3, #12]
    477c:	2b00      	cmp	r3, #0
    477e:	d050      	beq.n	4822 <sd_mmc_select_slot+0xb6>
    4780:	0087      	lsls	r7, r0, #2
    4782:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    4786:	f1b5 3fff 	cmp.w	r5, #4294967295
    478a:	d04a      	beq.n	4822 <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    478c:	b2ed      	uxtb	r5, r5
    478e:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    4790:	a801      	add	r0, sp, #4
    4792:	4b40      	ldr	r3, [pc, #256]	; (4894 <sd_mmc_select_slot+0x128>)
    4794:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4796:	4940      	ldr	r1, [pc, #256]	; (4898 <sd_mmc_select_slot+0x12c>)
    4798:	01f3      	lsls	r3, r6, #7
    479a:	18ca      	adds	r2, r1, r3
    479c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    479e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    47a0:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    47a2:	405e      	eors	r6, r3
    47a4:	400e      	ands	r6, r1
    47a6:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    47a8:	a801      	add	r0, sp, #4
    47aa:	4b3c      	ldr	r3, [pc, #240]	; (489c <sd_mmc_select_slot+0x130>)
    47ac:	4798      	blx	r3
    47ae:	f005 051f 	and.w	r5, r5, #31
    47b2:	2301      	movs	r3, #1
    47b4:	fa03 f505 	lsl.w	r5, r3, r5
    47b8:	4235      	tst	r5, r6
    47ba:	bf14      	ite	ne
    47bc:	461a      	movne	r2, r3
    47be:	2200      	moveq	r2, #0
    47c0:	4b33      	ldr	r3, [pc, #204]	; (4890 <sd_mmc_select_slot+0x124>)
    47c2:	68db      	ldr	r3, [r3, #12]
    47c4:	441f      	add	r7, r3
    47c6:	887b      	ldrh	r3, [r7, #2]
    47c8:	429a      	cmp	r2, r3
    47ca:	d006      	beq.n	47da <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    47cc:	4b30      	ldr	r3, [pc, #192]	; (4890 <sd_mmc_select_slot+0x124>)
    47ce:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    47d2:	2304      	movs	r3, #4
    47d4:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    47d6:	2002      	movs	r0, #2
    47d8:	e047      	b.n	486a <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    47da:	4b2d      	ldr	r3, [pc, #180]	; (4890 <sd_mmc_select_slot+0x124>)
    47dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    47e0:	7e9b      	ldrb	r3, [r3, #26]
    47e2:	2b04      	cmp	r3, #4
    47e4:	d009      	beq.n	47fa <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    47e6:	2b01      	cmp	r3, #1
    47e8:	d00e      	beq.n	4808 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    47ea:	4b29      	ldr	r3, [pc, #164]	; (4890 <sd_mmc_select_slot+0x124>)
    47ec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    47f0:	7e9b      	ldrb	r3, [r3, #26]
    47f2:	2b03      	cmp	r3, #3
    47f4:	d11d      	bne.n	4832 <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    47f6:	2003      	movs	r0, #3
    47f8:	e037      	b.n	486a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    47fa:	4b25      	ldr	r3, [pc, #148]	; (4890 <sd_mmc_select_slot+0x124>)
    47fc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    4800:	2301      	movs	r3, #1
    4802:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    4804:	2002      	movs	r0, #2
    4806:	e030      	b.n	486a <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    4808:	4b21      	ldr	r3, [pc, #132]	; (4890 <sd_mmc_select_slot+0x124>)
    480a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    480e:	2202      	movs	r2, #2
    4810:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4812:	4a23      	ldr	r2, [pc, #140]	; (48a0 <sd_mmc_select_slot+0x134>)
    4814:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    4816:	2201      	movs	r2, #1
    4818:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    481a:	2200      	movs	r2, #0
    481c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4820:	e7e3      	b.n	47ea <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    4822:	4b1b      	ldr	r3, [pc, #108]	; (4890 <sd_mmc_select_slot+0x124>)
    4824:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4828:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    482a:	3b03      	subs	r3, #3
    482c:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    482e:	2b01      	cmp	r3, #1
    4830:	d91d      	bls.n	486e <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    4832:	4b17      	ldr	r3, [pc, #92]	; (4890 <sd_mmc_select_slot+0x124>)
    4834:	791b      	ldrb	r3, [r3, #4]
    4836:	429c      	cmp	r4, r3
    4838:	d026      	beq.n	4888 <sd_mmc_select_slot+0x11c>
    483a:	4b15      	ldr	r3, [pc, #84]	; (4890 <sd_mmc_select_slot+0x124>)
    483c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    483e:	bb2b      	cbnz	r3, 488c <sd_mmc_select_slot+0x120>
    4840:	2001      	movs	r0, #1
    4842:	f240 422c 	movw	r2, #1068	; 0x42c
    4846:	4917      	ldr	r1, [pc, #92]	; (48a4 <sd_mmc_select_slot+0x138>)
    4848:	4b17      	ldr	r3, [pc, #92]	; (48a8 <sd_mmc_select_slot+0x13c>)
    484a:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    484c:	4d10      	ldr	r5, [pc, #64]	; (4890 <sd_mmc_select_slot+0x124>)
    484e:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    4850:	f105 0310 	add.w	r3, r5, #16
    4854:	0164      	lsls	r4, r4, #5
    4856:	4423      	add	r3, r4
    4858:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    485a:	4b14      	ldr	r3, [pc, #80]	; (48ac <sd_mmc_select_slot+0x140>)
    485c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    485e:	442c      	add	r4, r5
    4860:	7ea0      	ldrb	r0, [r4, #26]
    4862:	2802      	cmp	r0, #2
    4864:	bf14      	ite	ne
    4866:	2000      	movne	r0, #0
    4868:	2001      	moveq	r0, #1
}
    486a:	b003      	add	sp, #12
    486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    486e:	4b08      	ldr	r3, [pc, #32]	; (4890 <sd_mmc_select_slot+0x124>)
    4870:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4874:	2202      	movs	r2, #2
    4876:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    4878:	4a09      	ldr	r2, [pc, #36]	; (48a0 <sd_mmc_select_slot+0x134>)
    487a:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    487c:	2201      	movs	r2, #1
    487e:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    4880:	2200      	movs	r2, #0
    4882:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    4886:	e7d4      	b.n	4832 <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    4888:	2001      	movs	r0, #1
    488a:	e7da      	b.n	4842 <sd_mmc_select_slot+0xd6>
    488c:	2000      	movs	r0, #0
    488e:	e7d8      	b.n	4842 <sd_mmc_select_slot+0xd6>
    4890:	2000066c 	.word	0x2000066c
    4894:	00000d41 	.word	0x00000d41
    4898:	41008000 	.word	0x41008000
    489c:	00000d4f 	.word	0x00000d4f
    48a0:	00061a80 	.word	0x00061a80
    48a4:	00005994 	.word	0x00005994
    48a8:	0000167d 	.word	0x0000167d
    48ac:	00004741 	.word	0x00004741

000048b0 <sd_acmd6>:
{
    48b0:	b508      	push	{r3, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    48b2:	4b0e      	ldr	r3, [pc, #56]	; (48ec <sd_acmd6+0x3c>)
    48b4:	681a      	ldr	r2, [r3, #0]
    48b6:	8912      	ldrh	r2, [r2, #8]
    48b8:	0412      	lsls	r2, r2, #16
    48ba:	f241 1137 	movw	r1, #4407	; 0x1137
    48be:	6898      	ldr	r0, [r3, #8]
    48c0:	4b0b      	ldr	r3, [pc, #44]	; (48f0 <sd_acmd6+0x40>)
    48c2:	4798      	blx	r3
    48c4:	4603      	mov	r3, r0
    48c6:	b908      	cbnz	r0, 48cc <sd_acmd6+0x1c>
}
    48c8:	4618      	mov	r0, r3
    48ca:	bd08      	pop	{r3, pc}
	if (!driver_send_cmd(sd_mmc_hal, SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
    48cc:	2202      	movs	r2, #2
    48ce:	f241 1106 	movw	r1, #4358	; 0x1106
    48d2:	4b06      	ldr	r3, [pc, #24]	; (48ec <sd_acmd6+0x3c>)
    48d4:	6898      	ldr	r0, [r3, #8]
    48d6:	4b06      	ldr	r3, [pc, #24]	; (48f0 <sd_acmd6+0x40>)
    48d8:	4798      	blx	r3
    48da:	4603      	mov	r3, r0
    48dc:	2800      	cmp	r0, #0
    48de:	d0f3      	beq.n	48c8 <sd_acmd6+0x18>
	sd_mmc_card->bus_width = 4;
    48e0:	4a02      	ldr	r2, [pc, #8]	; (48ec <sd_acmd6+0x3c>)
    48e2:	6812      	ldr	r2, [r2, #0]
    48e4:	2104      	movs	r1, #4
    48e6:	7351      	strb	r1, [r2, #13]
	return true;
    48e8:	e7ee      	b.n	48c8 <sd_acmd6+0x18>
    48ea:	bf00      	nop
    48ec:	2000066c 	.word	0x2000066c
    48f0:	00001055 	.word	0x00001055

000048f4 <sd_cmd8>:
{
    48f4:	b538      	push	{r3, r4, r5, lr}
    48f6:	4605      	mov	r5, r0
	*v2 = 0;
    48f8:	2300      	movs	r3, #0
    48fa:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD8_SEND_IF_COND, SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    48fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    4900:	f245 5108 	movw	r1, #21768	; 0x5508
    4904:	4b0c      	ldr	r3, [pc, #48]	; (4938 <sd_cmd8+0x44>)
    4906:	6898      	ldr	r0, [r3, #8]
    4908:	4b0c      	ldr	r3, [pc, #48]	; (493c <sd_cmd8+0x48>)
    490a:	4798      	blx	r3
    490c:	b910      	cbnz	r0, 4914 <sd_cmd8+0x20>
		return true; /* It is not a V2 */
    490e:	2401      	movs	r4, #1
}
    4910:	4620      	mov	r0, r4
    4912:	bd38      	pop	{r3, r4, r5, pc}
    4914:	4604      	mov	r4, r0
	resp = driver_get_response(sd_mmc_hal);
    4916:	4b08      	ldr	r3, [pc, #32]	; (4938 <sd_cmd8+0x44>)
    4918:	6898      	ldr	r0, [r3, #8]
    491a:	4b09      	ldr	r3, [pc, #36]	; (4940 <sd_cmd8+0x4c>)
    491c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    491e:	f1b0 3fff 	cmp.w	r0, #4294967295
    4922:	d0f5      	beq.n	4910 <sd_cmd8+0x1c>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE)) != (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
    4924:	f3c0 000b 	ubfx	r0, r0, #0, #12
    4928:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
    492c:	d001      	beq.n	4932 <sd_cmd8+0x3e>
		return false;
    492e:	2400      	movs	r4, #0
    4930:	e7ee      	b.n	4910 <sd_cmd8+0x1c>
	*v2 = 1;
    4932:	2301      	movs	r3, #1
    4934:	702b      	strb	r3, [r5, #0]
	return true;
    4936:	e7eb      	b.n	4910 <sd_cmd8+0x1c>
    4938:	2000066c 	.word	0x2000066c
    493c:	00001055 	.word	0x00001055
    4940:	00001085 	.word	0x00001085

00004944 <sd_mci_op_cond>:
{
    4944:	b570      	push	{r4, r5, r6, lr}
    4946:	4606      	mov	r6, r0
	retry = 2100;
    4948:	f640 0434 	movw	r4, #2100	; 0x834
    494c:	e011      	b.n	4972 <sd_mci_op_cond+0x2e>
			arg |= SD_ACMD41_HCS;
    494e:	4a16      	ldr	r2, [pc, #88]	; (49a8 <sd_mci_op_cond+0x64>)
		if (!driver_send_cmd(sd_mmc_hal, SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
    4950:	f244 5129 	movw	r1, #17705	; 0x4529
    4954:	4b15      	ldr	r3, [pc, #84]	; (49ac <sd_mci_op_cond+0x68>)
    4956:	6898      	ldr	r0, [r3, #8]
    4958:	4b15      	ldr	r3, [pc, #84]	; (49b0 <sd_mci_op_cond+0x6c>)
    495a:	4798      	blx	r3
    495c:	4605      	mov	r5, r0
    495e:	b1f8      	cbz	r0, 49a0 <sd_mci_op_cond+0x5c>
		resp = driver_get_response(sd_mmc_hal);
    4960:	4b12      	ldr	r3, [pc, #72]	; (49ac <sd_mci_op_cond+0x68>)
    4962:	6898      	ldr	r0, [r3, #8]
    4964:	4b13      	ldr	r3, [pc, #76]	; (49b4 <sd_mci_op_cond+0x70>)
    4966:	4798      	blx	r3
		if (resp & OCR_POWER_UP_BUSY) {
    4968:	2800      	cmp	r0, #0
    496a:	db10      	blt.n	498e <sd_mci_op_cond+0x4a>
		if (retry-- == 0) {
    496c:	1e63      	subs	r3, r4, #1
    496e:	b1cc      	cbz	r4, 49a4 <sd_mci_op_cond+0x60>
    4970:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, 0)) {
    4972:	2200      	movs	r2, #0
    4974:	f241 1137 	movw	r1, #4407	; 0x1137
    4978:	4b0c      	ldr	r3, [pc, #48]	; (49ac <sd_mci_op_cond+0x68>)
    497a:	6898      	ldr	r0, [r3, #8]
    497c:	4b0c      	ldr	r3, [pc, #48]	; (49b0 <sd_mci_op_cond+0x6c>)
    497e:	4798      	blx	r3
    4980:	4605      	mov	r5, r0
    4982:	b168      	cbz	r0, 49a0 <sd_mci_op_cond+0x5c>
		if (v2) {
    4984:	2e00      	cmp	r6, #0
    4986:	d1e2      	bne.n	494e <sd_mci_op_cond+0xa>
		arg = SD_MMC_VOLTAGE_SUPPORT;
    4988:	f44f 12fc 	mov.w	r2, #2064384	; 0x1f8000
    498c:	e7e0      	b.n	4950 <sd_mci_op_cond+0xc>
			if ((resp & OCR_CCS) != 0) {
    498e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    4992:	d005      	beq.n	49a0 <sd_mci_op_cond+0x5c>
				sd_mmc_card->type |= CARD_TYPE_HC;
    4994:	4b05      	ldr	r3, [pc, #20]	; (49ac <sd_mci_op_cond+0x68>)
    4996:	681a      	ldr	r2, [r3, #0]
    4998:	7ad3      	ldrb	r3, [r2, #11]
    499a:	f043 0308 	orr.w	r3, r3, #8
    499e:	72d3      	strb	r3, [r2, #11]
}
    49a0:	4628      	mov	r0, r5
    49a2:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    49a4:	2500      	movs	r5, #0
    49a6:	e7fb      	b.n	49a0 <sd_mci_op_cond+0x5c>
    49a8:	401f8000 	.word	0x401f8000
    49ac:	2000066c 	.word	0x2000066c
    49b0:	00001055 	.word	0x00001055
    49b4:	00001085 	.word	0x00001085

000049b8 <sd_mmc_cmd13>:
{
    49b8:	b538      	push	{r3, r4, r5, lr}
	nec_timeout = 200000;
    49ba:	4c0d      	ldr	r4, [pc, #52]	; (49f0 <sd_mmc_cmd13+0x38>)
    49bc:	e000      	b.n	49c0 <sd_mmc_cmd13+0x8>
		if (nec_timeout-- == 0) {
    49be:	461c      	mov	r4, r3
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD13_SEND_STATUS, (uint32_t)sd_mmc_card->rca << 16)) {
    49c0:	4b0c      	ldr	r3, [pc, #48]	; (49f4 <sd_mmc_cmd13+0x3c>)
    49c2:	681a      	ldr	r2, [r3, #0]
    49c4:	8912      	ldrh	r2, [r2, #8]
    49c6:	0412      	lsls	r2, r2, #16
    49c8:	f241 110d 	movw	r1, #4365	; 0x110d
    49cc:	6898      	ldr	r0, [r3, #8]
    49ce:	4b0a      	ldr	r3, [pc, #40]	; (49f8 <sd_mmc_cmd13+0x40>)
    49d0:	4798      	blx	r3
    49d2:	4605      	mov	r5, r0
    49d4:	b150      	cbz	r0, 49ec <sd_mmc_cmd13+0x34>
		if (driver_get_response(sd_mmc_hal) & CARD_STATUS_READY_FOR_DATA) {
    49d6:	4b07      	ldr	r3, [pc, #28]	; (49f4 <sd_mmc_cmd13+0x3c>)
    49d8:	6898      	ldr	r0, [r3, #8]
    49da:	4b08      	ldr	r3, [pc, #32]	; (49fc <sd_mmc_cmd13+0x44>)
    49dc:	4798      	blx	r3
    49de:	f410 7f80 	tst.w	r0, #256	; 0x100
    49e2:	d103      	bne.n	49ec <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    49e4:	1e63      	subs	r3, r4, #1
    49e6:	2c00      	cmp	r4, #0
    49e8:	d1e9      	bne.n	49be <sd_mmc_cmd13+0x6>
			return false;
    49ea:	2500      	movs	r5, #0
}
    49ec:	4628      	mov	r0, r5
    49ee:	bd38      	pop	{r3, r4, r5, pc}
    49f0:	00030d40 	.word	0x00030d40
    49f4:	2000066c 	.word	0x2000066c
    49f8:	00001055 	.word	0x00001055
    49fc:	00001085 	.word	0x00001085

00004a00 <sd_mmc_cmd9_mci>:
{
    4a00:	b510      	push	{r4, lr}
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
    4a02:	4b0a      	ldr	r3, [pc, #40]	; (4a2c <sd_mmc_cmd9_mci+0x2c>)
    4a04:	681a      	ldr	r2, [r3, #0]
    4a06:	8912      	ldrh	r2, [r2, #8]
    4a08:	0412      	lsls	r2, r2, #16
    4a0a:	f641 3109 	movw	r1, #6921	; 0x1b09
    4a0e:	6898      	ldr	r0, [r3, #8]
    4a10:	4b07      	ldr	r3, [pc, #28]	; (4a30 <sd_mmc_cmd9_mci+0x30>)
    4a12:	4798      	blx	r3
    4a14:	4604      	mov	r4, r0
    4a16:	b908      	cbnz	r0, 4a1c <sd_mmc_cmd9_mci+0x1c>
}
    4a18:	4620      	mov	r0, r4
    4a1a:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_hal, sd_mmc_card->csd);
    4a1c:	4b03      	ldr	r3, [pc, #12]	; (4a2c <sd_mmc_cmd9_mci+0x2c>)
    4a1e:	6819      	ldr	r1, [r3, #0]
    4a20:	310e      	adds	r1, #14
    4a22:	6898      	ldr	r0, [r3, #8]
    4a24:	4b03      	ldr	r3, [pc, #12]	; (4a34 <sd_mmc_cmd9_mci+0x34>)
    4a26:	4798      	blx	r3
	return true;
    4a28:	e7f6      	b.n	4a18 <sd_mmc_cmd9_mci+0x18>
    4a2a:	bf00      	nop
    4a2c:	2000066c 	.word	0x2000066c
    4a30:	00001055 	.word	0x00001055
    4a34:	000010ad 	.word	0x000010ad

00004a38 <sd_acmd51>:
{
    4a38:	b510      	push	{r4, lr}
    4a3a:	b084      	sub	sp, #16
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4a3c:	4b28      	ldr	r3, [pc, #160]	; (4ae0 <sd_acmd51+0xa8>)
    4a3e:	681a      	ldr	r2, [r3, #0]
    4a40:	8912      	ldrh	r2, [r2, #8]
    4a42:	0412      	lsls	r2, r2, #16
    4a44:	f241 1137 	movw	r1, #4407	; 0x1137
    4a48:	6898      	ldr	r0, [r3, #8]
    4a4a:	4b26      	ldr	r3, [pc, #152]	; (4ae4 <sd_acmd51+0xac>)
    4a4c:	4798      	blx	r3
    4a4e:	4603      	mov	r3, r0
    4a50:	b910      	cbnz	r0, 4a58 <sd_acmd51+0x20>
}
    4a52:	4618      	mov	r0, r3
    4a54:	b004      	add	sp, #16
    4a56:	bd10      	pop	{r4, pc}
	if (!driver_adtc_start(sd_mmc_hal, SD_ACMD51_SEND_SCR, 0, SD_SCR_REG_BSIZE, 1, true)) {
    4a58:	4b21      	ldr	r3, [pc, #132]	; (4ae0 <sd_acmd51+0xa8>)
    4a5a:	6898      	ldr	r0, [r3, #8]
    4a5c:	2301      	movs	r3, #1
    4a5e:	9301      	str	r3, [sp, #4]
    4a60:	9300      	str	r3, [sp, #0]
    4a62:	2308      	movs	r3, #8
    4a64:	2200      	movs	r2, #0
    4a66:	4920      	ldr	r1, [pc, #128]	; (4ae8 <sd_acmd51+0xb0>)
    4a68:	4c20      	ldr	r4, [pc, #128]	; (4aec <sd_acmd51+0xb4>)
    4a6a:	47a0      	blx	r4
    4a6c:	4603      	mov	r3, r0
    4a6e:	2800      	cmp	r0, #0
    4a70:	d0ef      	beq.n	4a52 <sd_acmd51+0x1a>
	if (!driver_start_read_blocks(sd_mmc_hal, scr, 1)) {
    4a72:	2201      	movs	r2, #1
    4a74:	a902      	add	r1, sp, #8
    4a76:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <sd_acmd51+0xa8>)
    4a78:	6898      	ldr	r0, [r3, #8]
    4a7a:	4b1d      	ldr	r3, [pc, #116]	; (4af0 <sd_acmd51+0xb8>)
    4a7c:	4798      	blx	r3
    4a7e:	4603      	mov	r3, r0
    4a80:	2800      	cmp	r0, #0
    4a82:	d0e6      	beq.n	4a52 <sd_acmd51+0x1a>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4a84:	4b16      	ldr	r3, [pc, #88]	; (4ae0 <sd_acmd51+0xa8>)
    4a86:	6898      	ldr	r0, [r3, #8]
    4a88:	4b1a      	ldr	r3, [pc, #104]	; (4af4 <sd_acmd51+0xbc>)
    4a8a:	4798      	blx	r3
    4a8c:	4603      	mov	r3, r0
    4a8e:	2800      	cmp	r0, #0
    4a90:	d0df      	beq.n	4a52 <sd_acmd51+0x1a>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    4a92:	f89d 2008 	ldrb.w	r2, [sp, #8]
	switch (SD_SCR_SD_SPEC(scr)) {
    4a96:	f002 020f 	and.w	r2, r2, #15
    4a9a:	2a01      	cmp	r2, #1
    4a9c:	d00c      	beq.n	4ab8 <sd_acmd51+0x80>
    4a9e:	b132      	cbz	r2, 4aae <sd_acmd51+0x76>
    4aa0:	2a02      	cmp	r2, #2
    4aa2:	d00e      	beq.n	4ac2 <sd_acmd51+0x8a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4aa4:	4a0e      	ldr	r2, [pc, #56]	; (4ae0 <sd_acmd51+0xa8>)
    4aa6:	6812      	ldr	r2, [r2, #0]
    4aa8:	2110      	movs	r1, #16
    4aaa:	7311      	strb	r1, [r2, #12]
		break;
    4aac:	e7d1      	b.n	4a52 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    4aae:	4a0c      	ldr	r2, [pc, #48]	; (4ae0 <sd_acmd51+0xa8>)
    4ab0:	6812      	ldr	r2, [r2, #0]
    4ab2:	2110      	movs	r1, #16
    4ab4:	7311      	strb	r1, [r2, #12]
		break;
    4ab6:	e7cc      	b.n	4a52 <sd_acmd51+0x1a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    4ab8:	4a09      	ldr	r2, [pc, #36]	; (4ae0 <sd_acmd51+0xa8>)
    4aba:	6812      	ldr	r2, [r2, #0]
    4abc:	211a      	movs	r1, #26
    4abe:	7311      	strb	r1, [r2, #12]
		break;
    4ac0:	e7c7      	b.n	4a52 <sd_acmd51+0x1a>
    4ac2:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    4ac6:	09d2      	lsrs	r2, r2, #7
    4ac8:	d104      	bne.n	4ad4 <sd_acmd51+0x9c>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    4aca:	4a05      	ldr	r2, [pc, #20]	; (4ae0 <sd_acmd51+0xa8>)
    4acc:	6812      	ldr	r2, [r2, #0]
    4ace:	2120      	movs	r1, #32
    4ad0:	7311      	strb	r1, [r2, #12]
    4ad2:	e7be      	b.n	4a52 <sd_acmd51+0x1a>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    4ad4:	4a02      	ldr	r2, [pc, #8]	; (4ae0 <sd_acmd51+0xa8>)
    4ad6:	6812      	ldr	r2, [r2, #0]
    4ad8:	2130      	movs	r1, #48	; 0x30
    4ada:	7311      	strb	r1, [r2, #12]
    4adc:	e7b9      	b.n	4a52 <sd_acmd51+0x1a>
    4ade:	bf00      	nop
    4ae0:	2000066c 	.word	0x2000066c
    4ae4:	00001055 	.word	0x00001055
    4ae8:	00081133 	.word	0x00081133
    4aec:	000010ed 	.word	0x000010ed
    4af0:	00001131 	.word	0x00001131
    4af4:	000011a1 	.word	0x000011a1

00004af8 <sd_cm6_set_high_speed>:
{
    4af8:	b530      	push	{r4, r5, lr}
    4afa:	b093      	sub	sp, #76	; 0x4c
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
    4afc:	2440      	movs	r4, #64	; 0x40
    4afe:	4622      	mov	r2, r4
    4b00:	2100      	movs	r1, #0
    4b02:	a802      	add	r0, sp, #8
    4b04:	4b21      	ldr	r3, [pc, #132]	; (4b8c <sd_cm6_set_high_speed+0x94>)
    4b06:	4798      	blx	r3
	if (!driver_adtc_start(sd_mmc_hal,
    4b08:	4b21      	ldr	r3, [pc, #132]	; (4b90 <sd_cm6_set_high_speed+0x98>)
    4b0a:	6898      	ldr	r0, [r3, #8]
    4b0c:	2301      	movs	r3, #1
    4b0e:	9301      	str	r3, [sp, #4]
    4b10:	9300      	str	r3, [sp, #0]
    4b12:	4623      	mov	r3, r4
    4b14:	4a1f      	ldr	r2, [pc, #124]	; (4b94 <sd_cm6_set_high_speed+0x9c>)
    4b16:	4920      	ldr	r1, [pc, #128]	; (4b98 <sd_cm6_set_high_speed+0xa0>)
    4b18:	4c20      	ldr	r4, [pc, #128]	; (4b9c <sd_cm6_set_high_speed+0xa4>)
    4b1a:	47a0      	blx	r4
    4b1c:	4604      	mov	r4, r0
    4b1e:	b910      	cbnz	r0, 4b26 <sd_cm6_set_high_speed+0x2e>
}
    4b20:	4620      	mov	r0, r4
    4b22:	b013      	add	sp, #76	; 0x4c
    4b24:	bd30      	pop	{r4, r5, pc}
	if (!driver_start_read_blocks(sd_mmc_hal, switch_status, 1)) {
    4b26:	2201      	movs	r2, #1
    4b28:	a902      	add	r1, sp, #8
    4b2a:	4b19      	ldr	r3, [pc, #100]	; (4b90 <sd_cm6_set_high_speed+0x98>)
    4b2c:	6898      	ldr	r0, [r3, #8]
    4b2e:	4b1c      	ldr	r3, [pc, #112]	; (4ba0 <sd_cm6_set_high_speed+0xa8>)
    4b30:	4798      	blx	r3
    4b32:	4604      	mov	r4, r0
    4b34:	2800      	cmp	r0, #0
    4b36:	d0f3      	beq.n	4b20 <sd_cm6_set_high_speed+0x28>
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4b38:	4b15      	ldr	r3, [pc, #84]	; (4b90 <sd_cm6_set_high_speed+0x98>)
    4b3a:	6898      	ldr	r0, [r3, #8]
    4b3c:	4b19      	ldr	r3, [pc, #100]	; (4ba4 <sd_cm6_set_high_speed+0xac>)
    4b3e:	4798      	blx	r3
    4b40:	4604      	mov	r4, r0
    4b42:	2800      	cmp	r0, #0
    4b44:	d0ec      	beq.n	4b20 <sd_cm6_set_high_speed+0x28>
	if (driver_get_response(sd_mmc_hal) & CARD_STATUS_SWITCH_ERROR) {
    4b46:	4b12      	ldr	r3, [pc, #72]	; (4b90 <sd_cm6_set_high_speed+0x98>)
    4b48:	6898      	ldr	r0, [r3, #8]
    4b4a:	4b17      	ldr	r3, [pc, #92]	; (4ba8 <sd_cm6_set_high_speed+0xb0>)
    4b4c:	4798      	blx	r3
    4b4e:	f010 0f80 	tst.w	r0, #128	; 0x80
    4b52:	d119      	bne.n	4b88 <sd_cm6_set_high_speed+0x90>
    4b54:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status) == SD_SW_STATUS_FUN_GRP_RC_ERROR) {
    4b58:	f003 030f 	and.w	r3, r3, #15
    4b5c:	2b0f      	cmp	r3, #15
    4b5e:	d0df      	beq.n	4b20 <sd_cm6_set_high_speed+0x28>
    4b60:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    4b64:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
    4b68:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
    4b6c:	d001      	beq.n	4b72 <sd_cm6_set_high_speed+0x7a>
		return false;
    4b6e:	2400      	movs	r4, #0
    4b70:	e7d6      	b.n	4b20 <sd_cm6_set_high_speed+0x28>
	driver_send_clock(sd_mmc_hal);
    4b72:	4d07      	ldr	r5, [pc, #28]	; (4b90 <sd_cm6_set_high_speed+0x98>)
    4b74:	68a8      	ldr	r0, [r5, #8]
    4b76:	4b0d      	ldr	r3, [pc, #52]	; (4bac <sd_cm6_set_high_speed+0xb4>)
    4b78:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
    4b7a:	682b      	ldr	r3, [r5, #0]
    4b7c:	2201      	movs	r2, #1
    4b7e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
    4b80:	681a      	ldr	r2, [r3, #0]
    4b82:	0052      	lsls	r2, r2, #1
    4b84:	601a      	str	r2, [r3, #0]
	return true;
    4b86:	e7cb      	b.n	4b20 <sd_cm6_set_high_speed+0x28>
		return false;
    4b88:	2400      	movs	r4, #0
    4b8a:	e7c9      	b.n	4b20 <sd_cm6_set_high_speed+0x28>
    4b8c:	000055a5 	.word	0x000055a5
    4b90:	2000066c 	.word	0x2000066c
    4b94:	80ffff01 	.word	0x80ffff01
    4b98:	00081106 	.word	0x00081106
    4b9c:	000010ed 	.word	0x000010ed
    4ba0:	00001131 	.word	0x00001131
    4ba4:	000011a1 	.word	0x000011a1
    4ba8:	00001085 	.word	0x00001085
    4bac:	0000102d 	.word	0x0000102d

00004bb0 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
    4bb0:	b530      	push	{r4, r5, lr}
    4bb2:	b083      	sub	sp, #12
	uint8_t v2 = 0;
    4bb4:	2400      	movs	r4, #0
    4bb6:	f88d 4007 	strb.w	r4, [sp, #7]
#if (CONF_SDIO_SUPPORT == 1)
	uint8_t data = 0x08;
#endif

	/* In first, try to install SD/SDIO card */
	sd_mmc_card->type    = CARD_TYPE_SD;
    4bba:	4d58      	ldr	r5, [pc, #352]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4bbc:	682b      	ldr	r3, [r5, #0]
    4bbe:	2201      	movs	r2, #1
    4bc0:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    4bc2:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca     = 0;
    4bc4:	811c      	strh	r4, [r3, #8]

	/* Card need of 74 cycles clock minimum to start */
	driver_send_clock(sd_mmc_hal);
    4bc6:	68a8      	ldr	r0, [r5, #8]
    4bc8:	4b55      	ldr	r3, [pc, #340]	; (4d20 <sd_mmc_mci_card_init+0x170>)
    4bca:	4798      	blx	r3
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_IOA, 0, &data);
#endif

	/* CMD0 - Reset all cards to idle state.*/
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
    4bcc:	4622      	mov	r2, r4
    4bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4bd2:	68a8      	ldr	r0, [r5, #8]
    4bd4:	4b53      	ldr	r3, [pc, #332]	; (4d24 <sd_mmc_mci_card_init+0x174>)
    4bd6:	4798      	blx	r3
    4bd8:	4604      	mov	r4, r0
    4bda:	b910      	cbnz	r0, 4be2 <sd_mmc_mci_card_init+0x32>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return false;
		}
	}
	return true;
}
    4bdc:	4620      	mov	r0, r4
    4bde:	b003      	add	sp, #12
    4be0:	bd30      	pop	{r4, r5, pc}
	if (!sd_cmd8(&v2)) {
    4be2:	f10d 0007 	add.w	r0, sp, #7
    4be6:	4b50      	ldr	r3, [pc, #320]	; (4d28 <sd_mmc_mci_card_init+0x178>)
    4be8:	4798      	blx	r3
    4bea:	4604      	mov	r4, r0
    4bec:	2800      	cmp	r0, #0
    4bee:	d0f5      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
	if (!sdio_op_cond()) {
    4bf0:	4b4e      	ldr	r3, [pc, #312]	; (4d2c <sd_mmc_mci_card_init+0x17c>)
    4bf2:	4798      	blx	r3
    4bf4:	4604      	mov	r4, r0
    4bf6:	2800      	cmp	r0, #0
    4bf8:	d0f0      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4bfa:	682b      	ldr	r3, [r5, #0]
    4bfc:	7adb      	ldrb	r3, [r3, #11]
    4bfe:	f013 0f01 	tst.w	r3, #1
    4c02:	d176      	bne.n	4cf2 <sd_mmc_mci_card_init+0x142>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c04:	4b45      	ldr	r3, [pc, #276]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	7adb      	ldrb	r3, [r3, #11]
    4c0a:	f013 0f01 	tst.w	r3, #1
    4c0e:	d009      	beq.n	4c24 <sd_mmc_mci_card_init+0x74>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD2_ALL_SEND_CID, 0)) {
    4c10:	2200      	movs	r2, #0
    4c12:	f645 3102 	movw	r1, #23298	; 0x5b02
    4c16:	4b41      	ldr	r3, [pc, #260]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c18:	6898      	ldr	r0, [r3, #8]
    4c1a:	4b42      	ldr	r3, [pc, #264]	; (4d24 <sd_mmc_mci_card_init+0x174>)
    4c1c:	4798      	blx	r3
    4c1e:	4604      	mov	r4, r0
    4c20:	2800      	cmp	r0, #0
    4c22:	d0db      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
	if (!driver_send_cmd(sd_mmc_hal, SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
    4c24:	2200      	movs	r2, #0
    4c26:	f245 1103 	movw	r1, #20739	; 0x5103
    4c2a:	4b3c      	ldr	r3, [pc, #240]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c2c:	6898      	ldr	r0, [r3, #8]
    4c2e:	4b3d      	ldr	r3, [pc, #244]	; (4d24 <sd_mmc_mci_card_init+0x174>)
    4c30:	4798      	blx	r3
    4c32:	4604      	mov	r4, r0
    4c34:	2800      	cmp	r0, #0
    4c36:	d0d1      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
	sd_mmc_card->rca = (driver_get_response(sd_mmc_hal) >> 16) & 0xFFFF;
    4c38:	4c38      	ldr	r4, [pc, #224]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c3a:	6825      	ldr	r5, [r4, #0]
    4c3c:	68a0      	ldr	r0, [r4, #8]
    4c3e:	4b3c      	ldr	r3, [pc, #240]	; (4d30 <sd_mmc_mci_card_init+0x180>)
    4c40:	4798      	blx	r3
    4c42:	0c00      	lsrs	r0, r0, #16
    4c44:	8128      	strh	r0, [r5, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c46:	6823      	ldr	r3, [r4, #0]
    4c48:	7adb      	ldrb	r3, [r3, #11]
    4c4a:	f013 0f01 	tst.w	r3, #1
    4c4e:	d006      	beq.n	4c5e <sd_mmc_mci_card_init+0xae>
		if (!sd_mmc_cmd9_mci()) {
    4c50:	4b38      	ldr	r3, [pc, #224]	; (4d34 <sd_mmc_mci_card_init+0x184>)
    4c52:	4798      	blx	r3
    4c54:	4604      	mov	r4, r0
    4c56:	2800      	cmp	r0, #0
    4c58:	d0c0      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
		sd_decode_csd();
    4c5a:	4b37      	ldr	r3, [pc, #220]	; (4d38 <sd_mmc_mci_card_init+0x188>)
    4c5c:	4798      	blx	r3
	if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD7_SELECT_CARD_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    4c5e:	4b2f      	ldr	r3, [pc, #188]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	8912      	ldrh	r2, [r2, #8]
    4c64:	0412      	lsls	r2, r2, #16
    4c66:	f243 1107 	movw	r1, #12551	; 0x3107
    4c6a:	6898      	ldr	r0, [r3, #8]
    4c6c:	4b2d      	ldr	r3, [pc, #180]	; (4d24 <sd_mmc_mci_card_init+0x174>)
    4c6e:	4798      	blx	r3
    4c70:	4604      	mov	r4, r0
    4c72:	2800      	cmp	r0, #0
    4c74:	d0b2      	beq.n	4bdc <sd_mmc_mci_card_init+0x2c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c76:	4b29      	ldr	r3, [pc, #164]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	7adb      	ldrb	r3, [r3, #11]
    4c7c:	f013 0f01 	tst.w	r3, #1
    4c80:	d003      	beq.n	4c8a <sd_mmc_mci_card_init+0xda>
		if (!sd_acmd51()) {
    4c82:	4b2e      	ldr	r3, [pc, #184]	; (4d3c <sd_mmc_mci_card_init+0x18c>)
    4c84:	4798      	blx	r3
    4c86:	2800      	cmp	r0, #0
    4c88:	d044      	beq.n	4d14 <sd_mmc_mci_card_init+0x164>
	if ((4 <= driver_get_bus_width(sd_mmc_hal, sd_mmc_slot_sel))) {
    4c8a:	4b24      	ldr	r3, [pc, #144]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c8c:	7919      	ldrb	r1, [r3, #4]
    4c8e:	6898      	ldr	r0, [r3, #8]
    4c90:	4b2b      	ldr	r3, [pc, #172]	; (4d40 <sd_mmc_mci_card_init+0x190>)
    4c92:	4798      	blx	r3
    4c94:	2803      	cmp	r0, #3
    4c96:	d90b      	bls.n	4cb0 <sd_mmc_mci_card_init+0x100>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4c98:	4b20      	ldr	r3, [pc, #128]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	7adb      	ldrb	r3, [r3, #11]
    4c9e:	f013 0f01 	tst.w	r3, #1
    4ca2:	d003      	beq.n	4cac <sd_mmc_mci_card_init+0xfc>
			if (!sd_acmd6()) {
    4ca4:	4b27      	ldr	r3, [pc, #156]	; (4d44 <sd_mmc_mci_card_init+0x194>)
    4ca6:	4798      	blx	r3
    4ca8:	2800      	cmp	r0, #0
    4caa:	d035      	beq.n	4d18 <sd_mmc_mci_card_init+0x168>
		sd_mmc_configure_slot();
    4cac:	4b26      	ldr	r3, [pc, #152]	; (4d48 <sd_mmc_mci_card_init+0x198>)
    4cae:	4798      	blx	r3
	if (driver_is_high_speed_capable(sd_mmc_hal)) {
    4cb0:	4b1a      	ldr	r3, [pc, #104]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4cb2:	6898      	ldr	r0, [r3, #8]
    4cb4:	4b25      	ldr	r3, [pc, #148]	; (4d4c <sd_mmc_mci_card_init+0x19c>)
    4cb6:	4798      	blx	r3
    4cb8:	b150      	cbz	r0, 4cd0 <sd_mmc_mci_card_init+0x120>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
    4cba:	4b18      	ldr	r3, [pc, #96]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4cbc:	681b      	ldr	r3, [r3, #0]
    4cbe:	7ada      	ldrb	r2, [r3, #11]
    4cc0:	f012 0f01 	tst.w	r2, #1
    4cc4:	d002      	beq.n	4ccc <sd_mmc_mci_card_init+0x11c>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
    4cc6:	7b1b      	ldrb	r3, [r3, #12]
    4cc8:	2b10      	cmp	r3, #16
    4cca:	d81d      	bhi.n	4d08 <sd_mmc_mci_card_init+0x158>
		sd_mmc_configure_slot();
    4ccc:	4b1e      	ldr	r3, [pc, #120]	; (4d48 <sd_mmc_mci_card_init+0x198>)
    4cce:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    4cd0:	4b12      	ldr	r3, [pc, #72]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	7adb      	ldrb	r3, [r3, #11]
    4cd6:	f013 0f01 	tst.w	r3, #1
    4cda:	f43f af7f 	beq.w	4bdc <sd_mmc_mci_card_init+0x2c>
		if (!driver_send_cmd(sd_mmc_hal, SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    4cde:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ce2:	f241 1110 	movw	r1, #4368	; 0x1110
    4ce6:	4b0d      	ldr	r3, [pc, #52]	; (4d1c <sd_mmc_mci_card_init+0x16c>)
    4ce8:	6898      	ldr	r0, [r3, #8]
    4cea:	4b0e      	ldr	r3, [pc, #56]	; (4d24 <sd_mmc_mci_card_init+0x174>)
    4cec:	4798      	blx	r3
    4cee:	4604      	mov	r4, r0
    4cf0:	e774      	b.n	4bdc <sd_mmc_mci_card_init+0x2c>
		if (!sd_mci_op_cond(v2)) {
    4cf2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4cf6:	4b16      	ldr	r3, [pc, #88]	; (4d50 <sd_mmc_mci_card_init+0x1a0>)
    4cf8:	4798      	blx	r3
    4cfa:	4604      	mov	r4, r0
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d181      	bne.n	4c04 <sd_mmc_mci_card_init+0x54>
			sd_mmc_card->type = CARD_TYPE_UNKNOWN;
    4d00:	682b      	ldr	r3, [r5, #0]
    4d02:	2200      	movs	r2, #0
    4d04:	72da      	strb	r2, [r3, #11]
			return false;
    4d06:	e769      	b.n	4bdc <sd_mmc_mci_card_init+0x2c>
				if (!sd_cm6_set_high_speed()) {
    4d08:	4b12      	ldr	r3, [pc, #72]	; (4d54 <sd_mmc_mci_card_init+0x1a4>)
    4d0a:	4798      	blx	r3
    4d0c:	2800      	cmp	r0, #0
    4d0e:	d1dd      	bne.n	4ccc <sd_mmc_mci_card_init+0x11c>
					return false;
    4d10:	4604      	mov	r4, r0
    4d12:	e763      	b.n	4bdc <sd_mmc_mci_card_init+0x2c>
			return false;
    4d14:	4604      	mov	r4, r0
    4d16:	e761      	b.n	4bdc <sd_mmc_mci_card_init+0x2c>
				return false;
    4d18:	4604      	mov	r4, r0
    4d1a:	e75f      	b.n	4bdc <sd_mmc_mci_card_init+0x2c>
    4d1c:	2000066c 	.word	0x2000066c
    4d20:	0000102d 	.word	0x0000102d
    4d24:	00001055 	.word	0x00001055
    4d28:	000048f5 	.word	0x000048f5
    4d2c:	000046b5 	.word	0x000046b5
    4d30:	00001085 	.word	0x00001085
    4d34:	00004a01 	.word	0x00004a01
    4d38:	000046b9 	.word	0x000046b9
    4d3c:	00004a39 	.word	0x00004a39
    4d40:	00000fd9 	.word	0x00000fd9
    4d44:	000048b1 	.word	0x000048b1
    4d48:	00004741 	.word	0x00004741
    4d4c:	00001005 	.word	0x00001005
    4d50:	00004945 	.word	0x00004945
    4d54:	00004af9 	.word	0x00004af9

00004d58 <sd_mmc_deselect_slot>:
{
    4d58:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    4d5a:	4b04      	ldr	r3, [pc, #16]	; (4d6c <sd_mmc_deselect_slot+0x14>)
    4d5c:	7919      	ldrb	r1, [r3, #4]
    4d5e:	b101      	cbz	r1, 4d62 <sd_mmc_deselect_slot+0xa>
    4d60:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    4d62:	6898      	ldr	r0, [r3, #8]
    4d64:	4b02      	ldr	r3, [pc, #8]	; (4d70 <sd_mmc_deselect_slot+0x18>)
    4d66:	4798      	blx	r3
}
    4d68:	e7fa      	b.n	4d60 <sd_mmc_deselect_slot+0x8>
    4d6a:	bf00      	nop
    4d6c:	2000066c 	.word	0x2000066c
    4d70:	00000fad 	.word	0x00000fad

00004d74 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    4d74:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    4d76:	2300      	movs	r3, #0
    4d78:	b13b      	cbz	r3, 4d8a <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    4d7a:	4b08      	ldr	r3, [pc, #32]	; (4d9c <sd_mmc_init+0x28>)
    4d7c:	24ff      	movs	r4, #255	; 0xff
    4d7e:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    4d80:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    4d82:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    4d84:	635a      	str	r2, [r3, #52]	; 0x34
}
    4d86:	bc30      	pop	{r4, r5}
    4d88:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    4d8a:	4c04      	ldr	r4, [pc, #16]	; (4d9c <sd_mmc_init+0x28>)
    4d8c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    4d90:	2504      	movs	r5, #4
    4d92:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    4d94:	3301      	adds	r3, #1
    4d96:	b2db      	uxtb	r3, r3
    4d98:	e7ee      	b.n	4d78 <sd_mmc_init+0x4>
    4d9a:	bf00      	nop
    4d9c:	2000066c 	.word	0x2000066c

00004da0 <sd_mmc_check>:
{
	return CONF_SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    4da0:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4da2:	4b0d      	ldr	r3, [pc, #52]	; (4dd8 <sd_mmc_check+0x38>)
    4da4:	4798      	blx	r3
    4da6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    4da8:	2801      	cmp	r0, #1
    4daa:	d003      	beq.n	4db4 <sd_mmc_check+0x14>
		sd_mmc_deselect_slot();
    4dac:	4b0b      	ldr	r3, [pc, #44]	; (4ddc <sd_mmc_check+0x3c>)
    4dae:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
	}
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    4db0:	4620      	mov	r0, r4
    4db2:	bd10      	pop	{r4, pc}
	if (sd_mmc_mci_card_init()) {
    4db4:	4b0a      	ldr	r3, [pc, #40]	; (4de0 <sd_mmc_check+0x40>)
    4db6:	4798      	blx	r3
    4db8:	b930      	cbnz	r0, 4dc8 <sd_mmc_check+0x28>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    4dba:	4b0a      	ldr	r3, [pc, #40]	; (4de4 <sd_mmc_check+0x44>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	2403      	movs	r4, #3
    4dc0:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
    4dc2:	4b06      	ldr	r3, [pc, #24]	; (4ddc <sd_mmc_check+0x3c>)
    4dc4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    4dc6:	e7f3      	b.n	4db0 <sd_mmc_check+0x10>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    4dc8:	4b06      	ldr	r3, [pc, #24]	; (4de4 <sd_mmc_check+0x44>)
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	2200      	movs	r2, #0
    4dce:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    4dd0:	4b02      	ldr	r3, [pc, #8]	; (4ddc <sd_mmc_check+0x3c>)
    4dd2:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    4dd4:	e7ec      	b.n	4db0 <sd_mmc_check+0x10>
    4dd6:	bf00      	nop
    4dd8:	0000476d 	.word	0x0000476d
    4ddc:	00004d59 	.word	0x00004d59
    4de0:	00004bb1 	.word	0x00004bb1
    4de4:	2000066c 	.word	0x2000066c

00004de8 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    4de8:	4b19      	ldr	r3, [pc, #100]	; (4e50 <sd_mmc_is_write_protected+0x68>)
    4dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4dec:	b35b      	cbz	r3, 4e46 <sd_mmc_is_write_protected+0x5e>
{
    4dee:	b570      	push	{r4, r5, r6, lr}
    4df0:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    4df2:	0085      	lsls	r5, r0, #2
    4df4:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    4df8:	f1b3 3fff 	cmp.w	r3, #4294967295
    4dfc:	d025      	beq.n	4e4a <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    4dfe:	b2de      	uxtb	r6, r3
    4e00:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    4e02:	a801      	add	r0, sp, #4
    4e04:	4b13      	ldr	r3, [pc, #76]	; (4e54 <sd_mmc_is_write_protected+0x6c>)
    4e06:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4e08:	4913      	ldr	r1, [pc, #76]	; (4e58 <sd_mmc_is_write_protected+0x70>)
    4e0a:	01e3      	lsls	r3, r4, #7
    4e0c:	18ca      	adds	r2, r1, r3
    4e0e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4e10:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4e12:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    4e14:	405c      	eors	r4, r3
    4e16:	400c      	ands	r4, r1
    4e18:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    4e1a:	a801      	add	r0, sp, #4
    4e1c:	4b0f      	ldr	r3, [pc, #60]	; (4e5c <sd_mmc_is_write_protected+0x74>)
    4e1e:	4798      	blx	r3
    4e20:	f006 031f 	and.w	r3, r6, #31
    4e24:	2201      	movs	r2, #1
    4e26:	fa02 f303 	lsl.w	r3, r2, r3
    4e2a:	4223      	tst	r3, r4
    4e2c:	bf08      	it	eq
    4e2e:	2200      	moveq	r2, #0
    4e30:	4b07      	ldr	r3, [pc, #28]	; (4e50 <sd_mmc_is_write_protected+0x68>)
    4e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4e34:	441d      	add	r5, r3
    4e36:	886b      	ldrh	r3, [r5, #2]
    4e38:	429a      	cmp	r2, r3
    4e3a:	d002      	beq.n	4e42 <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    4e3c:	2000      	movs	r0, #0
}
    4e3e:	b002      	add	sp, #8
    4e40:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    4e42:	2001      	movs	r0, #1
    4e44:	e7fb      	b.n	4e3e <sd_mmc_is_write_protected+0x56>
		return false;
    4e46:	2000      	movs	r0, #0
    4e48:	4770      	bx	lr
    4e4a:	2000      	movs	r0, #0
    4e4c:	e7f7      	b.n	4e3e <sd_mmc_is_write_protected+0x56>
    4e4e:	bf00      	nop
    4e50:	2000066c 	.word	0x2000066c
    4e54:	00000d41 	.word	0x00000d41
    4e58:	41008000 	.word	0x41008000
    4e5c:	00000d4f 	.word	0x00000d4f

00004e60 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    4e60:	b570      	push	{r4, r5, r6, lr}
    4e62:	b082      	sub	sp, #8
    4e64:	460e      	mov	r6, r1
    4e66:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    4e68:	4b1b      	ldr	r3, [pc, #108]	; (4ed8 <sd_mmc_init_read_blocks+0x78>)
    4e6a:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4e6c:	4604      	mov	r4, r0
    4e6e:	b110      	cbz	r0, 4e76 <sd_mmc_init_read_blocks+0x16>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    4e70:	4620      	mov	r0, r4
    4e72:	b002      	add	sp, #8
    4e74:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    4e76:	4b19      	ldr	r3, [pc, #100]	; (4edc <sd_mmc_init_read_blocks+0x7c>)
    4e78:	4798      	blx	r3
    4e7a:	b1c0      	cbz	r0, 4eae <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    4e7c:	2d01      	cmp	r5, #1
    4e7e:	d91a      	bls.n	4eb6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    4e80:	4917      	ldr	r1, [pc, #92]	; (4ee0 <sd_mmc_init_read_blocks+0x80>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    4e82:	4b18      	ldr	r3, [pc, #96]	; (4ee4 <sd_mmc_init_read_blocks+0x84>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	7adb      	ldrb	r3, [r3, #11]
    4e88:	f013 0f08 	tst.w	r3, #8
    4e8c:	d100      	bne.n	4e90 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4e8e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    4e90:	4b14      	ldr	r3, [pc, #80]	; (4ee4 <sd_mmc_init_read_blocks+0x84>)
    4e92:	6898      	ldr	r0, [r3, #8]
    4e94:	2301      	movs	r3, #1
    4e96:	9301      	str	r3, [sp, #4]
    4e98:	9500      	str	r5, [sp, #0]
    4e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
    4e9e:	4632      	mov	r2, r6
    4ea0:	4e11      	ldr	r6, [pc, #68]	; (4ee8 <sd_mmc_init_read_blocks+0x88>)
    4ea2:	47b0      	blx	r6
    4ea4:	b948      	cbnz	r0, 4eba <sd_mmc_init_read_blocks+0x5a>
		sd_mmc_deselect_slot();
    4ea6:	4b11      	ldr	r3, [pc, #68]	; (4eec <sd_mmc_init_read_blocks+0x8c>)
    4ea8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4eaa:	2405      	movs	r4, #5
    4eac:	e7e0      	b.n	4e70 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4eae:	4b0f      	ldr	r3, [pc, #60]	; (4eec <sd_mmc_init_read_blocks+0x8c>)
    4eb0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4eb2:	2405      	movs	r4, #5
    4eb4:	e7dc      	b.n	4e70 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    4eb6:	490e      	ldr	r1, [pc, #56]	; (4ef0 <sd_mmc_init_read_blocks+0x90>)
    4eb8:	e7e3      	b.n	4e82 <sd_mmc_init_read_blocks+0x22>
	resp = driver_get_response(sd_mmc_hal);
    4eba:	4b0a      	ldr	r3, [pc, #40]	; (4ee4 <sd_mmc_init_read_blocks+0x84>)
    4ebc:	6898      	ldr	r0, [r3, #8]
    4ebe:	4b0d      	ldr	r3, [pc, #52]	; (4ef4 <sd_mmc_init_read_blocks+0x94>)
    4ec0:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    4ec2:	4b0d      	ldr	r3, [pc, #52]	; (4ef8 <sd_mmc_init_read_blocks+0x98>)
    4ec4:	4003      	ands	r3, r0
    4ec6:	b91b      	cbnz	r3, 4ed0 <sd_mmc_init_read_blocks+0x70>
	sd_mmc_nb_block_remaining  = nb_block;
    4ec8:	4b06      	ldr	r3, [pc, #24]	; (4ee4 <sd_mmc_init_read_blocks+0x84>)
    4eca:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    4ecc:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    4ece:	e7cf      	b.n	4e70 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    4ed0:	4b06      	ldr	r3, [pc, #24]	; (4eec <sd_mmc_init_read_blocks+0x8c>)
    4ed2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    4ed4:	2405      	movs	r4, #5
    4ed6:	e7cb      	b.n	4e70 <sd_mmc_init_read_blocks+0x10>
    4ed8:	0000476d 	.word	0x0000476d
    4edc:	000049b9 	.word	0x000049b9
    4ee0:	00101112 	.word	0x00101112
    4ee4:	2000066c 	.word	0x2000066c
    4ee8:	000010ed 	.word	0x000010ed
    4eec:	00004d59 	.word	0x00004d59
    4ef0:	00081111 	.word	0x00081111
    4ef4:	00001085 	.word	0x00001085
    4ef8:	e4580000 	.word	0xe4580000

00004efc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	4606      	mov	r6, r0
    4f00:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    4f02:	4d0d      	ldr	r5, [pc, #52]	; (4f38 <sd_mmc_start_read_blocks+0x3c>)
    4f04:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    4f06:	f240 52a7 	movw	r2, #1447	; 0x5a7
    4f0a:	490c      	ldr	r1, [pc, #48]	; (4f3c <sd_mmc_start_read_blocks+0x40>)
    4f0c:	42a0      	cmp	r0, r4
    4f0e:	bf34      	ite	cc
    4f10:	2000      	movcc	r0, #0
    4f12:	2001      	movcs	r0, #1
    4f14:	4b0a      	ldr	r3, [pc, #40]	; (4f40 <sd_mmc_start_read_blocks+0x44>)
    4f16:	4798      	blx	r3

	if (!driver_start_read_blocks(sd_mmc_hal, dest, nb_block)) {
    4f18:	4622      	mov	r2, r4
    4f1a:	4631      	mov	r1, r6
    4f1c:	68a8      	ldr	r0, [r5, #8]
    4f1e:	4b09      	ldr	r3, [pc, #36]	; (4f44 <sd_mmc_start_read_blocks+0x48>)
    4f20:	4798      	blx	r3
    4f22:	b918      	cbnz	r0, 4f2c <sd_mmc_start_read_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    4f24:	2200      	movs	r2, #0
    4f26:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    4f28:	2005      	movs	r0, #5
    4f2a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    4f2c:	4a02      	ldr	r2, [pc, #8]	; (4f38 <sd_mmc_start_read_blocks+0x3c>)
    4f2e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    4f30:	1b1c      	subs	r4, r3, r4
    4f32:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    4f34:	2000      	movs	r0, #0
}
    4f36:	bd70      	pop	{r4, r5, r6, pc}
    4f38:	2000066c 	.word	0x2000066c
    4f3c:	00005994 	.word	0x00005994
    4f40:	0000167d 	.word	0x0000167d
    4f44:	00001131 	.word	0x00001131

00004f48 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    4f48:	b510      	push	{r4, lr}
    4f4a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks(sd_mmc_hal)) {
    4f4c:	4b16      	ldr	r3, [pc, #88]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f4e:	6898      	ldr	r0, [r3, #8]
    4f50:	4b16      	ldr	r3, [pc, #88]	; (4fac <sd_mmc_wait_end_of_read_blocks+0x64>)
    4f52:	4798      	blx	r3
    4f54:	b908      	cbnz	r0, 4f5a <sd_mmc_wait_end_of_read_blocks+0x12>
		return SD_MMC_ERR_COMM;
    4f56:	2005      	movs	r0, #5
    4f58:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    4f5a:	b194      	cbz	r4, 4f82 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    4f5c:	2200      	movs	r2, #0
    4f5e:	4b12      	ldr	r3, [pc, #72]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f60:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop read operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    4f62:	4b11      	ldr	r3, [pc, #68]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f64:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    4f66:	2b01      	cmp	r3, #1
    4f68:	d011      	beq.n	4f8e <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
	}
	/* WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	 * The errors on this command must be ignored
	 * and one retry can be necessary in SPI mode for no compliance card.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    4f6a:	2200      	movs	r2, #0
    4f6c:	f243 110c 	movw	r1, #12556	; 0x310c
    4f70:	4b0d      	ldr	r3, [pc, #52]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f72:	6898      	ldr	r0, [r3, #8]
    4f74:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <sd_mmc_wait_end_of_read_blocks+0x68>)
    4f76:	4798      	blx	r3
    4f78:	b168      	cbz	r0, 4f96 <sd_mmc_wait_end_of_read_blocks+0x4e>
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
    4f7a:	4b0e      	ldr	r3, [pc, #56]	; (4fb4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4f7c:	4798      	blx	r3
	return SD_MMC_OK;
    4f7e:	2000      	movs	r0, #0
    4f80:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    4f82:	4b09      	ldr	r3, [pc, #36]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f84:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4f86:	2b00      	cmp	r3, #0
    4f88:	d0eb      	beq.n	4f62 <sd_mmc_wait_end_of_read_blocks+0x1a>
		return SD_MMC_OK;
    4f8a:	2000      	movs	r0, #0
}
    4f8c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    4f8e:	4b09      	ldr	r3, [pc, #36]	; (4fb4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    4f90:	4798      	blx	r3
		return SD_MMC_OK;
    4f92:	2000      	movs	r0, #0
    4f94:	bd10      	pop	{r4, pc}
		driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0);
    4f96:	2200      	movs	r2, #0
    4f98:	f243 110c 	movw	r1, #12556	; 0x310c
    4f9c:	4b02      	ldr	r3, [pc, #8]	; (4fa8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    4f9e:	6898      	ldr	r0, [r3, #8]
    4fa0:	4b03      	ldr	r3, [pc, #12]	; (4fb0 <sd_mmc_wait_end_of_read_blocks+0x68>)
    4fa2:	4798      	blx	r3
    4fa4:	e7e9      	b.n	4f7a <sd_mmc_wait_end_of_read_blocks+0x32>
    4fa6:	bf00      	nop
    4fa8:	2000066c 	.word	0x2000066c
    4fac:	000011a1 	.word	0x000011a1
    4fb0:	00001055 	.word	0x00001055
    4fb4:	00004d59 	.word	0x00004d59

00004fb8 <sd_mmc_write_with_ADMA>:

sd_mmc_err_t sd_mmc_write_with_ADMA(uint8_t slot, uint32_t start, uint32_t *descAdd, uint16_t nb_block)
// Added by DAharoni
{
    4fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fbc:	4606      	mov	r6, r0
    4fbe:	460f      	mov	r7, r1
    4fc0:	4690      	mov	r8, r2
    4fc2:	461d      	mov	r5, r3
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp, tmr;
	
	sd_mmc_err = sd_mmc_select_slot(slot);
    4fc4:	4b2f      	ldr	r3, [pc, #188]	; (5084 <sd_mmc_write_with_ADMA+0xcc>)
    4fc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    4fc8:	4604      	mov	r4, r0
    4fca:	b110      	cbz	r0, 4fd2 <sd_mmc_write_with_ADMA+0x1a>
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_COMM;
	}
	
	return SD_MMC_OK;
}
    4fcc:	4620      	mov	r0, r4
    4fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd_mmc_is_write_protected(slot)) {
    4fd2:	4630      	mov	r0, r6
    4fd4:	4b2c      	ldr	r3, [pc, #176]	; (5088 <sd_mmc_write_with_ADMA+0xd0>)
    4fd6:	4798      	blx	r3
    4fd8:	2800      	cmp	r0, #0
    4fda:	d136      	bne.n	504a <sd_mmc_write_with_ADMA+0x92>
	if (nb_block > 1) {
    4fdc:	2d01      	cmp	r5, #1
    4fde:	d938      	bls.n	5052 <sd_mmc_write_with_ADMA+0x9a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    4fe0:	4a2a      	ldr	r2, [pc, #168]	; (508c <sd_mmc_write_with_ADMA+0xd4>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    4fe2:	4b2b      	ldr	r3, [pc, #172]	; (5090 <sd_mmc_write_with_ADMA+0xd8>)
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	7adb      	ldrb	r3, [r3, #11]
    4fe8:	f013 0f08 	tst.w	r3, #8
    4fec:	d100      	bne.n	4ff0 <sd_mmc_write_with_ADMA+0x38>
		arg = (start * SD_MMC_BLOCK_SIZE);
    4fee:	027f      	lsls	r7, r7, #9
	SDHC0->ASAR[0].reg = (uint32_t)descAdd;
    4ff0:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    4ff4:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	((Sdhc *)hw)->BSR.reg = data;
    4ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
    4ffc:	8099      	strh	r1, [r3, #4]
	((Sdhc *)hw)->BCR.reg = data;
    4ffe:	80dd      	strh	r5, [r3, #6]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    5000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (hri_sdhc_get_PSR_CMDINHC_bit(SDHC0) || hri_sdhc_get_PSR_CMDINHD_bit(SDHC0)) {
    5002:	f013 0f01 	tst.w	r3, #1
    5006:	d1e1      	bne.n	4fcc <sd_mmc_write_with_ADMA+0x14>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    5008:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    500e:	f013 0f02 	tst.w	r3, #2
    5012:	d1db      	bne.n	4fcc <sd_mmc_write_with_ADMA+0x14>
	if (cmd & MCI_CMD_WRITE) {
    5014:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    5018:	d01d      	beq.n	5056 <sd_mmc_write_with_ADMA+0x9e>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    501a:	2300      	movs	r3, #0
	if (cmd & MCI_CMD_SDIO_BYTE) {
    501c:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
    5020:	b921      	cbnz	r1, 502c <sd_mmc_write_with_ADMA+0x74>
		} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    5022:	f402 3100 	and.w	r1, r2, #131072	; 0x20000
    5026:	b1c1      	cbz	r1, 505a <sd_mmc_write_with_ADMA+0xa2>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    5028:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	hri_sdhc_write_TMR_reg(SDHC0, tmr|SDHC_TMR_ACMDEN_CMD12|SDHC_TMR_DMAEN);
    502c:	f043 0305 	orr.w	r3, r3, #5
    5030:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    5032:	f04f 408a 	mov.w	r0, #1157627904	; 0x45000000
    5036:	8183      	strh	r3, [r0, #12]
	if (mci_send_cmd_execute(SDHC0, SDHC_CR_DPSEL_DATA, cmd, arg) == false) {
    5038:	463b      	mov	r3, r7
    503a:	2120      	movs	r1, #32
    503c:	4d15      	ldr	r5, [pc, #84]	; (5094 <sd_mmc_write_with_ADMA+0xdc>)
    503e:	47a8      	blx	r5
    5040:	b9a0      	cbnz	r0, 506c <sd_mmc_write_with_ADMA+0xb4>
		sd_mmc_deselect_slot();
    5042:	4b15      	ldr	r3, [pc, #84]	; (5098 <sd_mmc_write_with_ADMA+0xe0>)
    5044:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5046:	2405      	movs	r4, #5
    5048:	e7c0      	b.n	4fcc <sd_mmc_write_with_ADMA+0x14>
		sd_mmc_deselect_slot();
    504a:	4b13      	ldr	r3, [pc, #76]	; (5098 <sd_mmc_write_with_ADMA+0xe0>)
    504c:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    504e:	2407      	movs	r4, #7
    5050:	e7bc      	b.n	4fcc <sd_mmc_write_with_ADMA+0x14>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    5052:	4a12      	ldr	r2, [pc, #72]	; (509c <sd_mmc_write_with_ADMA+0xe4>)
    5054:	e7c5      	b.n	4fe2 <sd_mmc_write_with_ADMA+0x2a>
		tmr = SDHC_TMR_DTDSEL_READ;
    5056:	2310      	movs	r3, #16
    5058:	e7e0      	b.n	501c <sd_mmc_write_with_ADMA+0x64>
		} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    505a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
    505e:	d1e5      	bne.n	502c <sd_mmc_write_with_ADMA+0x74>
		} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    5060:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    5064:	d0b2      	beq.n	4fcc <sd_mmc_write_with_ADMA+0x14>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    5066:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    506a:	e7df      	b.n	502c <sd_mmc_write_with_ADMA+0x74>
	resp = driver_get_response(sd_mmc_hal);
    506c:	4b08      	ldr	r3, [pc, #32]	; (5090 <sd_mmc_write_with_ADMA+0xd8>)
    506e:	6898      	ldr	r0, [r3, #8]
    5070:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <sd_mmc_write_with_ADMA+0xe8>)
    5072:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5074:	4b0b      	ldr	r3, [pc, #44]	; (50a4 <sd_mmc_write_with_ADMA+0xec>)
    5076:	4003      	ands	r3, r0
    5078:	2b00      	cmp	r3, #0
    507a:	d0a7      	beq.n	4fcc <sd_mmc_write_with_ADMA+0x14>
		sd_mmc_deselect_slot();
    507c:	4b06      	ldr	r3, [pc, #24]	; (5098 <sd_mmc_write_with_ADMA+0xe0>)
    507e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5080:	2405      	movs	r4, #5
    5082:	e7a3      	b.n	4fcc <sd_mmc_write_with_ADMA+0x14>
    5084:	0000476d 	.word	0x0000476d
    5088:	00004de9 	.word	0x00004de9
    508c:	00109119 	.word	0x00109119
    5090:	2000066c 	.word	0x2000066c
    5094:	000010e1 	.word	0x000010e1
    5098:	00004d59 	.word	0x00004d59
    509c:	00089118 	.word	0x00089118
    50a0:	00001085 	.word	0x00001085
    50a4:	e4580000 	.word	0xe4580000

000050a8 <sd_mmc_wait_end_of_ADMA_write>:

// Added by DAharoni
sd_mmc_err_t sd_mmc_wait_end_of_ADMA_write(bool abort)
{
    50a8:	b508      	push	{r3, lr}
	return ((Sdhc *)hw)->EISTR.reg;
    50aa:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    50ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	uint32_t sr;
	
	do {
		sr = hri_sdhc_read_EISTR_reg(SDHC0);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    50b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    50b4:	b973      	cbnz	r3, 50d4 <sd_mmc_wait_end_of_ADMA_write+0x2c>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    50b6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
    50ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
			// TODO: We should reset here but I got lazy and didn't want to make mci_reset to access _mci_reset
			//_mci_reset(SDHC0);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(SDHC0));
    50bc:	f013 0f02 	tst.w	r3, #2
    50c0:	d0f3      	beq.n	50aa <sd_mmc_wait_end_of_ADMA_write+0x2>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    50c2:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
    50c6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    50c8:	b29b      	uxth	r3, r3
    50ca:	f043 0302 	orr.w	r3, r3, #2
    50ce:	8613      	strh	r3, [r2, #48]	; 0x30
	//if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		//sd_mmc_deselect_slot();
		//return SD_MMC_ERR_COMM;
	//}
	
	sd_mmc_deselect_slot();
    50d0:	4b01      	ldr	r3, [pc, #4]	; (50d8 <sd_mmc_wait_end_of_ADMA_write+0x30>)
    50d2:	4798      	blx	r3
	
	return SD_MMC_OK;
}
    50d4:	2000      	movs	r0, #0
    50d6:	bd08      	pop	{r3, pc}
    50d8:	00004d59 	.word	0x00004d59

000050dc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    50dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50de:	b083      	sub	sp, #12
    50e0:	4607      	mov	r7, r0
    50e2:	460e      	mov	r6, r1
    50e4:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    50e6:	4b1c      	ldr	r3, [pc, #112]	; (5158 <sd_mmc_init_write_blocks+0x7c>)
    50e8:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    50ea:	4604      	mov	r4, r0
    50ec:	b110      	cbz	r0, 50f4 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    50ee:	4620      	mov	r0, r4
    50f0:	b003      	add	sp, #12
    50f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    50f4:	4638      	mov	r0, r7
    50f6:	4b19      	ldr	r3, [pc, #100]	; (515c <sd_mmc_init_write_blocks+0x80>)
    50f8:	4798      	blx	r3
    50fa:	b9c0      	cbnz	r0, 512e <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    50fc:	2d01      	cmp	r5, #1
    50fe:	d91a      	bls.n	5136 <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    5100:	4917      	ldr	r1, [pc, #92]	; (5160 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    5102:	4b18      	ldr	r3, [pc, #96]	; (5164 <sd_mmc_init_write_blocks+0x88>)
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	7adb      	ldrb	r3, [r3, #11]
    5108:	f013 0f08 	tst.w	r3, #8
    510c:	d100      	bne.n	5110 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    510e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    5110:	4b14      	ldr	r3, [pc, #80]	; (5164 <sd_mmc_init_write_blocks+0x88>)
    5112:	6898      	ldr	r0, [r3, #8]
    5114:	2301      	movs	r3, #1
    5116:	9301      	str	r3, [sp, #4]
    5118:	9500      	str	r5, [sp, #0]
    511a:	f44f 7300 	mov.w	r3, #512	; 0x200
    511e:	4632      	mov	r2, r6
    5120:	4e11      	ldr	r6, [pc, #68]	; (5168 <sd_mmc_init_write_blocks+0x8c>)
    5122:	47b0      	blx	r6
    5124:	b948      	cbnz	r0, 513a <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    5126:	4b11      	ldr	r3, [pc, #68]	; (516c <sd_mmc_init_write_blocks+0x90>)
    5128:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    512a:	2405      	movs	r4, #5
    512c:	e7df      	b.n	50ee <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    512e:	4b0f      	ldr	r3, [pc, #60]	; (516c <sd_mmc_init_write_blocks+0x90>)
    5130:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    5132:	2407      	movs	r4, #7
    5134:	e7db      	b.n	50ee <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    5136:	490e      	ldr	r1, [pc, #56]	; (5170 <sd_mmc_init_write_blocks+0x94>)
    5138:	e7e3      	b.n	5102 <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    513a:	4b0a      	ldr	r3, [pc, #40]	; (5164 <sd_mmc_init_write_blocks+0x88>)
    513c:	6898      	ldr	r0, [r3, #8]
    513e:	4b0d      	ldr	r3, [pc, #52]	; (5174 <sd_mmc_init_write_blocks+0x98>)
    5140:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    5142:	4b0d      	ldr	r3, [pc, #52]	; (5178 <sd_mmc_init_write_blocks+0x9c>)
    5144:	4003      	ands	r3, r0
    5146:	b91b      	cbnz	r3, 5150 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    5148:	4b06      	ldr	r3, [pc, #24]	; (5164 <sd_mmc_init_write_blocks+0x88>)
    514a:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    514c:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    514e:	e7ce      	b.n	50ee <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    5150:	4b06      	ldr	r3, [pc, #24]	; (516c <sd_mmc_init_write_blocks+0x90>)
    5152:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    5154:	2405      	movs	r4, #5
    5156:	e7ca      	b.n	50ee <sd_mmc_init_write_blocks+0x12>
    5158:	0000476d 	.word	0x0000476d
    515c:	00004de9 	.word	0x00004de9
    5160:	00109119 	.word	0x00109119
    5164:	2000066c 	.word	0x2000066c
    5168:	000010ed 	.word	0x000010ed
    516c:	00004d59 	.word	0x00004d59
    5170:	00089118 	.word	0x00089118
    5174:	00001085 	.word	0x00001085
    5178:	e4580000 	.word	0xe4580000

0000517c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    517c:	b570      	push	{r4, r5, r6, lr}
    517e:	4606      	mov	r6, r0
    5180:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    5182:	4d0d      	ldr	r5, [pc, #52]	; (51b8 <sd_mmc_start_write_blocks+0x3c>)
    5184:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    5186:	f240 626d 	movw	r2, #1645	; 0x66d
    518a:	490c      	ldr	r1, [pc, #48]	; (51bc <sd_mmc_start_write_blocks+0x40>)
    518c:	42a0      	cmp	r0, r4
    518e:	bf34      	ite	cc
    5190:	2000      	movcc	r0, #0
    5192:	2001      	movcs	r0, #1
    5194:	4b0a      	ldr	r3, [pc, #40]	; (51c0 <sd_mmc_start_write_blocks+0x44>)
    5196:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    5198:	4622      	mov	r2, r4
    519a:	4631      	mov	r1, r6
    519c:	68a8      	ldr	r0, [r5, #8]
    519e:	4b09      	ldr	r3, [pc, #36]	; (51c4 <sd_mmc_start_write_blocks+0x48>)
    51a0:	4798      	blx	r3
    51a2:	b918      	cbnz	r0, 51ac <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    51a4:	2200      	movs	r2, #0
    51a6:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    51a8:	2005      	movs	r0, #5
    51aa:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    51ac:	4a02      	ldr	r2, [pc, #8]	; (51b8 <sd_mmc_start_write_blocks+0x3c>)
    51ae:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    51b0:	1b1c      	subs	r4, r3, r4
    51b2:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    51b4:	2000      	movs	r0, #0
}
    51b6:	bd70      	pop	{r4, r5, r6, pc}
    51b8:	2000066c 	.word	0x2000066c
    51bc:	00005994 	.word	0x00005994
    51c0:	0000167d 	.word	0x0000167d
    51c4:	00001169 	.word	0x00001169

000051c8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    51c8:	b510      	push	{r4, lr}
    51ca:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    51cc:	4b14      	ldr	r3, [pc, #80]	; (5220 <sd_mmc_wait_end_of_write_blocks+0x58>)
    51ce:	6898      	ldr	r0, [r3, #8]
    51d0:	4b14      	ldr	r3, [pc, #80]	; (5224 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    51d2:	4798      	blx	r3
    51d4:	b908      	cbnz	r0, 51da <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    51d6:	2005      	movs	r0, #5
    51d8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    51da:	b194      	cbz	r4, 5202 <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    51dc:	2200      	movs	r2, #0
    51de:	4b10      	ldr	r3, [pc, #64]	; (5220 <sd_mmc_wait_end_of_write_blocks+0x58>)
    51e0:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    51e2:	4b0f      	ldr	r3, [pc, #60]	; (5220 <sd_mmc_wait_end_of_write_blocks+0x58>)
    51e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    51e6:	2b01      	cmp	r3, #1
    51e8:	d011      	beq.n	520e <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    51ea:	2200      	movs	r2, #0
    51ec:	f243 110c 	movw	r1, #12556	; 0x310c
    51f0:	4b0b      	ldr	r3, [pc, #44]	; (5220 <sd_mmc_wait_end_of_write_blocks+0x58>)
    51f2:	6898      	ldr	r0, [r3, #8]
    51f4:	4b0c      	ldr	r3, [pc, #48]	; (5228 <sd_mmc_wait_end_of_write_blocks+0x60>)
    51f6:	4798      	blx	r3
    51f8:	b968      	cbnz	r0, 5216 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    51fa:	4b0c      	ldr	r3, [pc, #48]	; (522c <sd_mmc_wait_end_of_write_blocks+0x64>)
    51fc:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    51fe:	2005      	movs	r0, #5
    5200:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    5202:	4b07      	ldr	r3, [pc, #28]	; (5220 <sd_mmc_wait_end_of_write_blocks+0x58>)
    5204:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5206:	2b00      	cmp	r3, #0
    5208:	d0eb      	beq.n	51e2 <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    520a:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    520c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    520e:	4b07      	ldr	r3, [pc, #28]	; (522c <sd_mmc_wait_end_of_write_blocks+0x64>)
    5210:	4798      	blx	r3
		return SD_MMC_OK;
    5212:	2000      	movs	r0, #0
    5214:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    5216:	4b05      	ldr	r3, [pc, #20]	; (522c <sd_mmc_wait_end_of_write_blocks+0x64>)
    5218:	4798      	blx	r3
	return SD_MMC_OK;
    521a:	2000      	movs	r0, #0
    521c:	bd10      	pop	{r4, pc}
    521e:	bf00      	nop
    5220:	2000066c 	.word	0x2000066c
    5224:	000011c9 	.word	0x000011c9
    5228:	00001055 	.word	0x00001055
    522c:	00004d59 	.word	0x00004d59

00005230 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    5230:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    5232:	4903      	ldr	r1, [pc, #12]	; (5240 <sd_mmc_stack_init+0x10>)
    5234:	460a      	mov	r2, r1
    5236:	3104      	adds	r1, #4
    5238:	4802      	ldr	r0, [pc, #8]	; (5244 <sd_mmc_stack_init+0x14>)
    523a:	4b03      	ldr	r3, [pc, #12]	; (5248 <sd_mmc_stack_init+0x18>)
    523c:	4798      	blx	r3
    523e:	bd08      	pop	{r3, pc}
    5240:	20000034 	.word	0x20000034
    5244:	20000730 	.word	0x20000730
    5248:	00004d75 	.word	0x00004d75

0000524c <__aeabi_uldivmod>:
    524c:	b953      	cbnz	r3, 5264 <__aeabi_uldivmod+0x18>
    524e:	b94a      	cbnz	r2, 5264 <__aeabi_uldivmod+0x18>
    5250:	2900      	cmp	r1, #0
    5252:	bf08      	it	eq
    5254:	2800      	cmpeq	r0, #0
    5256:	bf1c      	itt	ne
    5258:	f04f 31ff 	movne.w	r1, #4294967295
    525c:	f04f 30ff 	movne.w	r0, #4294967295
    5260:	f000 b97a 	b.w	5558 <__aeabi_idiv0>
    5264:	f1ad 0c08 	sub.w	ip, sp, #8
    5268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    526c:	f000 f806 	bl	527c <__udivmoddi4>
    5270:	f8dd e004 	ldr.w	lr, [sp, #4]
    5274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5278:	b004      	add	sp, #16
    527a:	4770      	bx	lr

0000527c <__udivmoddi4>:
    527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5280:	468c      	mov	ip, r1
    5282:	460d      	mov	r5, r1
    5284:	4604      	mov	r4, r0
    5286:	9e08      	ldr	r6, [sp, #32]
    5288:	2b00      	cmp	r3, #0
    528a:	d151      	bne.n	5330 <__udivmoddi4+0xb4>
    528c:	428a      	cmp	r2, r1
    528e:	4617      	mov	r7, r2
    5290:	d96d      	bls.n	536e <__udivmoddi4+0xf2>
    5292:	fab2 fe82 	clz	lr, r2
    5296:	f1be 0f00 	cmp.w	lr, #0
    529a:	d00b      	beq.n	52b4 <__udivmoddi4+0x38>
    529c:	f1ce 0c20 	rsb	ip, lr, #32
    52a0:	fa01 f50e 	lsl.w	r5, r1, lr
    52a4:	fa20 fc0c 	lsr.w	ip, r0, ip
    52a8:	fa02 f70e 	lsl.w	r7, r2, lr
    52ac:	ea4c 0c05 	orr.w	ip, ip, r5
    52b0:	fa00 f40e 	lsl.w	r4, r0, lr
    52b4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    52b8:	0c25      	lsrs	r5, r4, #16
    52ba:	fbbc f8fa 	udiv	r8, ip, sl
    52be:	fa1f f987 	uxth.w	r9, r7
    52c2:	fb0a cc18 	mls	ip, sl, r8, ip
    52c6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    52ca:	fb08 f309 	mul.w	r3, r8, r9
    52ce:	42ab      	cmp	r3, r5
    52d0:	d90a      	bls.n	52e8 <__udivmoddi4+0x6c>
    52d2:	19ed      	adds	r5, r5, r7
    52d4:	f108 32ff 	add.w	r2, r8, #4294967295
    52d8:	f080 8123 	bcs.w	5522 <__udivmoddi4+0x2a6>
    52dc:	42ab      	cmp	r3, r5
    52de:	f240 8120 	bls.w	5522 <__udivmoddi4+0x2a6>
    52e2:	f1a8 0802 	sub.w	r8, r8, #2
    52e6:	443d      	add	r5, r7
    52e8:	1aed      	subs	r5, r5, r3
    52ea:	b2a4      	uxth	r4, r4
    52ec:	fbb5 f0fa 	udiv	r0, r5, sl
    52f0:	fb0a 5510 	mls	r5, sl, r0, r5
    52f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    52f8:	fb00 f909 	mul.w	r9, r0, r9
    52fc:	45a1      	cmp	r9, r4
    52fe:	d909      	bls.n	5314 <__udivmoddi4+0x98>
    5300:	19e4      	adds	r4, r4, r7
    5302:	f100 33ff 	add.w	r3, r0, #4294967295
    5306:	f080 810a 	bcs.w	551e <__udivmoddi4+0x2a2>
    530a:	45a1      	cmp	r9, r4
    530c:	f240 8107 	bls.w	551e <__udivmoddi4+0x2a2>
    5310:	3802      	subs	r0, #2
    5312:	443c      	add	r4, r7
    5314:	eba4 0409 	sub.w	r4, r4, r9
    5318:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    531c:	2100      	movs	r1, #0
    531e:	2e00      	cmp	r6, #0
    5320:	d061      	beq.n	53e6 <__udivmoddi4+0x16a>
    5322:	fa24 f40e 	lsr.w	r4, r4, lr
    5326:	2300      	movs	r3, #0
    5328:	6034      	str	r4, [r6, #0]
    532a:	6073      	str	r3, [r6, #4]
    532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5330:	428b      	cmp	r3, r1
    5332:	d907      	bls.n	5344 <__udivmoddi4+0xc8>
    5334:	2e00      	cmp	r6, #0
    5336:	d054      	beq.n	53e2 <__udivmoddi4+0x166>
    5338:	2100      	movs	r1, #0
    533a:	e886 0021 	stmia.w	r6, {r0, r5}
    533e:	4608      	mov	r0, r1
    5340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5344:	fab3 f183 	clz	r1, r3
    5348:	2900      	cmp	r1, #0
    534a:	f040 808e 	bne.w	546a <__udivmoddi4+0x1ee>
    534e:	42ab      	cmp	r3, r5
    5350:	d302      	bcc.n	5358 <__udivmoddi4+0xdc>
    5352:	4282      	cmp	r2, r0
    5354:	f200 80fa 	bhi.w	554c <__udivmoddi4+0x2d0>
    5358:	1a84      	subs	r4, r0, r2
    535a:	eb65 0503 	sbc.w	r5, r5, r3
    535e:	2001      	movs	r0, #1
    5360:	46ac      	mov	ip, r5
    5362:	2e00      	cmp	r6, #0
    5364:	d03f      	beq.n	53e6 <__udivmoddi4+0x16a>
    5366:	e886 1010 	stmia.w	r6, {r4, ip}
    536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    536e:	b912      	cbnz	r2, 5376 <__udivmoddi4+0xfa>
    5370:	2701      	movs	r7, #1
    5372:	fbb7 f7f2 	udiv	r7, r7, r2
    5376:	fab7 fe87 	clz	lr, r7
    537a:	f1be 0f00 	cmp.w	lr, #0
    537e:	d134      	bne.n	53ea <__udivmoddi4+0x16e>
    5380:	1beb      	subs	r3, r5, r7
    5382:	0c3a      	lsrs	r2, r7, #16
    5384:	fa1f fc87 	uxth.w	ip, r7
    5388:	2101      	movs	r1, #1
    538a:	fbb3 f8f2 	udiv	r8, r3, r2
    538e:	0c25      	lsrs	r5, r4, #16
    5390:	fb02 3318 	mls	r3, r2, r8, r3
    5394:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5398:	fb0c f308 	mul.w	r3, ip, r8
    539c:	42ab      	cmp	r3, r5
    539e:	d907      	bls.n	53b0 <__udivmoddi4+0x134>
    53a0:	19ed      	adds	r5, r5, r7
    53a2:	f108 30ff 	add.w	r0, r8, #4294967295
    53a6:	d202      	bcs.n	53ae <__udivmoddi4+0x132>
    53a8:	42ab      	cmp	r3, r5
    53aa:	f200 80d1 	bhi.w	5550 <__udivmoddi4+0x2d4>
    53ae:	4680      	mov	r8, r0
    53b0:	1aed      	subs	r5, r5, r3
    53b2:	b2a3      	uxth	r3, r4
    53b4:	fbb5 f0f2 	udiv	r0, r5, r2
    53b8:	fb02 5510 	mls	r5, r2, r0, r5
    53bc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    53c0:	fb0c fc00 	mul.w	ip, ip, r0
    53c4:	45a4      	cmp	ip, r4
    53c6:	d907      	bls.n	53d8 <__udivmoddi4+0x15c>
    53c8:	19e4      	adds	r4, r4, r7
    53ca:	f100 33ff 	add.w	r3, r0, #4294967295
    53ce:	d202      	bcs.n	53d6 <__udivmoddi4+0x15a>
    53d0:	45a4      	cmp	ip, r4
    53d2:	f200 80b8 	bhi.w	5546 <__udivmoddi4+0x2ca>
    53d6:	4618      	mov	r0, r3
    53d8:	eba4 040c 	sub.w	r4, r4, ip
    53dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    53e0:	e79d      	b.n	531e <__udivmoddi4+0xa2>
    53e2:	4631      	mov	r1, r6
    53e4:	4630      	mov	r0, r6
    53e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53ea:	f1ce 0420 	rsb	r4, lr, #32
    53ee:	fa05 f30e 	lsl.w	r3, r5, lr
    53f2:	fa07 f70e 	lsl.w	r7, r7, lr
    53f6:	fa20 f804 	lsr.w	r8, r0, r4
    53fa:	0c3a      	lsrs	r2, r7, #16
    53fc:	fa25 f404 	lsr.w	r4, r5, r4
    5400:	ea48 0803 	orr.w	r8, r8, r3
    5404:	fbb4 f1f2 	udiv	r1, r4, r2
    5408:	ea4f 4518 	mov.w	r5, r8, lsr #16
    540c:	fb02 4411 	mls	r4, r2, r1, r4
    5410:	fa1f fc87 	uxth.w	ip, r7
    5414:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    5418:	fb01 f30c 	mul.w	r3, r1, ip
    541c:	42ab      	cmp	r3, r5
    541e:	fa00 f40e 	lsl.w	r4, r0, lr
    5422:	d909      	bls.n	5438 <__udivmoddi4+0x1bc>
    5424:	19ed      	adds	r5, r5, r7
    5426:	f101 30ff 	add.w	r0, r1, #4294967295
    542a:	f080 808a 	bcs.w	5542 <__udivmoddi4+0x2c6>
    542e:	42ab      	cmp	r3, r5
    5430:	f240 8087 	bls.w	5542 <__udivmoddi4+0x2c6>
    5434:	3902      	subs	r1, #2
    5436:	443d      	add	r5, r7
    5438:	1aeb      	subs	r3, r5, r3
    543a:	fa1f f588 	uxth.w	r5, r8
    543e:	fbb3 f0f2 	udiv	r0, r3, r2
    5442:	fb02 3310 	mls	r3, r2, r0, r3
    5446:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    544a:	fb00 f30c 	mul.w	r3, r0, ip
    544e:	42ab      	cmp	r3, r5
    5450:	d907      	bls.n	5462 <__udivmoddi4+0x1e6>
    5452:	19ed      	adds	r5, r5, r7
    5454:	f100 38ff 	add.w	r8, r0, #4294967295
    5458:	d26f      	bcs.n	553a <__udivmoddi4+0x2be>
    545a:	42ab      	cmp	r3, r5
    545c:	d96d      	bls.n	553a <__udivmoddi4+0x2be>
    545e:	3802      	subs	r0, #2
    5460:	443d      	add	r5, r7
    5462:	1aeb      	subs	r3, r5, r3
    5464:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    5468:	e78f      	b.n	538a <__udivmoddi4+0x10e>
    546a:	f1c1 0720 	rsb	r7, r1, #32
    546e:	fa22 f807 	lsr.w	r8, r2, r7
    5472:	408b      	lsls	r3, r1
    5474:	fa05 f401 	lsl.w	r4, r5, r1
    5478:	ea48 0303 	orr.w	r3, r8, r3
    547c:	fa20 fe07 	lsr.w	lr, r0, r7
    5480:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5484:	40fd      	lsrs	r5, r7
    5486:	ea4e 0e04 	orr.w	lr, lr, r4
    548a:	fbb5 f9fc 	udiv	r9, r5, ip
    548e:	ea4f 441e 	mov.w	r4, lr, lsr #16
    5492:	fb0c 5519 	mls	r5, ip, r9, r5
    5496:	fa1f f883 	uxth.w	r8, r3
    549a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    549e:	fb09 f408 	mul.w	r4, r9, r8
    54a2:	42ac      	cmp	r4, r5
    54a4:	fa02 f201 	lsl.w	r2, r2, r1
    54a8:	fa00 fa01 	lsl.w	sl, r0, r1
    54ac:	d908      	bls.n	54c0 <__udivmoddi4+0x244>
    54ae:	18ed      	adds	r5, r5, r3
    54b0:	f109 30ff 	add.w	r0, r9, #4294967295
    54b4:	d243      	bcs.n	553e <__udivmoddi4+0x2c2>
    54b6:	42ac      	cmp	r4, r5
    54b8:	d941      	bls.n	553e <__udivmoddi4+0x2c2>
    54ba:	f1a9 0902 	sub.w	r9, r9, #2
    54be:	441d      	add	r5, r3
    54c0:	1b2d      	subs	r5, r5, r4
    54c2:	fa1f fe8e 	uxth.w	lr, lr
    54c6:	fbb5 f0fc 	udiv	r0, r5, ip
    54ca:	fb0c 5510 	mls	r5, ip, r0, r5
    54ce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    54d2:	fb00 f808 	mul.w	r8, r0, r8
    54d6:	45a0      	cmp	r8, r4
    54d8:	d907      	bls.n	54ea <__udivmoddi4+0x26e>
    54da:	18e4      	adds	r4, r4, r3
    54dc:	f100 35ff 	add.w	r5, r0, #4294967295
    54e0:	d229      	bcs.n	5536 <__udivmoddi4+0x2ba>
    54e2:	45a0      	cmp	r8, r4
    54e4:	d927      	bls.n	5536 <__udivmoddi4+0x2ba>
    54e6:	3802      	subs	r0, #2
    54e8:	441c      	add	r4, r3
    54ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    54ee:	eba4 0408 	sub.w	r4, r4, r8
    54f2:	fba0 8902 	umull	r8, r9, r0, r2
    54f6:	454c      	cmp	r4, r9
    54f8:	46c6      	mov	lr, r8
    54fa:	464d      	mov	r5, r9
    54fc:	d315      	bcc.n	552a <__udivmoddi4+0x2ae>
    54fe:	d012      	beq.n	5526 <__udivmoddi4+0x2aa>
    5500:	b156      	cbz	r6, 5518 <__udivmoddi4+0x29c>
    5502:	ebba 030e 	subs.w	r3, sl, lr
    5506:	eb64 0405 	sbc.w	r4, r4, r5
    550a:	fa04 f707 	lsl.w	r7, r4, r7
    550e:	40cb      	lsrs	r3, r1
    5510:	431f      	orrs	r7, r3
    5512:	40cc      	lsrs	r4, r1
    5514:	6037      	str	r7, [r6, #0]
    5516:	6074      	str	r4, [r6, #4]
    5518:	2100      	movs	r1, #0
    551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    551e:	4618      	mov	r0, r3
    5520:	e6f8      	b.n	5314 <__udivmoddi4+0x98>
    5522:	4690      	mov	r8, r2
    5524:	e6e0      	b.n	52e8 <__udivmoddi4+0x6c>
    5526:	45c2      	cmp	sl, r8
    5528:	d2ea      	bcs.n	5500 <__udivmoddi4+0x284>
    552a:	ebb8 0e02 	subs.w	lr, r8, r2
    552e:	eb69 0503 	sbc.w	r5, r9, r3
    5532:	3801      	subs	r0, #1
    5534:	e7e4      	b.n	5500 <__udivmoddi4+0x284>
    5536:	4628      	mov	r0, r5
    5538:	e7d7      	b.n	54ea <__udivmoddi4+0x26e>
    553a:	4640      	mov	r0, r8
    553c:	e791      	b.n	5462 <__udivmoddi4+0x1e6>
    553e:	4681      	mov	r9, r0
    5540:	e7be      	b.n	54c0 <__udivmoddi4+0x244>
    5542:	4601      	mov	r1, r0
    5544:	e778      	b.n	5438 <__udivmoddi4+0x1bc>
    5546:	3802      	subs	r0, #2
    5548:	443c      	add	r4, r7
    554a:	e745      	b.n	53d8 <__udivmoddi4+0x15c>
    554c:	4608      	mov	r0, r1
    554e:	e708      	b.n	5362 <__udivmoddi4+0xe6>
    5550:	f1a8 0802 	sub.w	r8, r8, #2
    5554:	443d      	add	r5, r7
    5556:	e72b      	b.n	53b0 <__udivmoddi4+0x134>

00005558 <__aeabi_idiv0>:
    5558:	4770      	bx	lr
    555a:	bf00      	nop

0000555c <__libc_init_array>:
    555c:	b570      	push	{r4, r5, r6, lr}
    555e:	4e0d      	ldr	r6, [pc, #52]	; (5594 <__libc_init_array+0x38>)
    5560:	4c0d      	ldr	r4, [pc, #52]	; (5598 <__libc_init_array+0x3c>)
    5562:	1ba4      	subs	r4, r4, r6
    5564:	10a4      	asrs	r4, r4, #2
    5566:	2500      	movs	r5, #0
    5568:	42a5      	cmp	r5, r4
    556a:	d109      	bne.n	5580 <__libc_init_array+0x24>
    556c:	4e0b      	ldr	r6, [pc, #44]	; (559c <__libc_init_array+0x40>)
    556e:	4c0c      	ldr	r4, [pc, #48]	; (55a0 <__libc_init_array+0x44>)
    5570:	f000 fa1a 	bl	59a8 <_init>
    5574:	1ba4      	subs	r4, r4, r6
    5576:	10a4      	asrs	r4, r4, #2
    5578:	2500      	movs	r5, #0
    557a:	42a5      	cmp	r5, r4
    557c:	d105      	bne.n	558a <__libc_init_array+0x2e>
    557e:	bd70      	pop	{r4, r5, r6, pc}
    5580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5584:	4798      	blx	r3
    5586:	3501      	adds	r5, #1
    5588:	e7ee      	b.n	5568 <__libc_init_array+0xc>
    558a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    558e:	4798      	blx	r3
    5590:	3501      	adds	r5, #1
    5592:	e7f2      	b.n	557a <__libc_init_array+0x1e>
    5594:	000059b4 	.word	0x000059b4
    5598:	000059b4 	.word	0x000059b4
    559c:	000059b4 	.word	0x000059b4
    55a0:	000059b8 	.word	0x000059b8

000055a4 <memset>:
    55a4:	4402      	add	r2, r0
    55a6:	4603      	mov	r3, r0
    55a8:	4293      	cmp	r3, r2
    55aa:	d100      	bne.n	55ae <memset+0xa>
    55ac:	4770      	bx	lr
    55ae:	f803 1b01 	strb.w	r1, [r3], #1
    55b2:	e7f9      	b.n	55a8 <memset+0x4>
    55b4:	682f2e2e 	.word	0x682f2e2e
    55b8:	732f6c61 	.word	0x732f6c61
    55bc:	682f6372 	.word	0x682f6372
    55c0:	615f6c61 	.word	0x615f6c61
    55c4:	735f6364 	.word	0x735f6364
    55c8:	2e636e79 	.word	0x2e636e79
    55cc:	00000063 	.word	0x00000063
    55d0:	682f2e2e 	.word	0x682f2e2e
    55d4:	732f6c61 	.word	0x732f6c61
    55d8:	682f6372 	.word	0x682f6372
    55dc:	635f6c61 	.word	0x635f6c61
    55e0:	72656d61 	.word	0x72656d61
    55e4:	73615f61 	.word	0x73615f61
    55e8:	2e636e79 	.word	0x2e636e79
    55ec:	00000063 	.word	0x00000063
    55f0:	682f2e2e 	.word	0x682f2e2e
    55f4:	732f6c61 	.word	0x732f6c61
    55f8:	682f6372 	.word	0x682f6372
    55fc:	6d5f6c61 	.word	0x6d5f6c61
    5600:	735f6963 	.word	0x735f6963
    5604:	2e636e79 	.word	0x2e636e79
    5608:	00000063 	.word	0x00000063
    560c:	682f2e2e 	.word	0x682f2e2e
    5610:	732f6c61 	.word	0x732f6c61
    5614:	682f6372 	.word	0x682f6372
    5618:	705f6c61 	.word	0x705f6c61
    561c:	632e6d77 	.word	0x632e6d77
    5620:	00000000 	.word	0x00000000
    5624:	682f2e2e 	.word	0x682f2e2e
    5628:	732f6c61 	.word	0x732f6c61
    562c:	682f6372 	.word	0x682f6372
    5630:	745f6c61 	.word	0x745f6c61
    5634:	72656d69 	.word	0x72656d69
    5638:	0000632e 	.word	0x0000632e
    563c:	682f2e2e 	.word	0x682f2e2e
    5640:	732f6c61 	.word	0x732f6c61
    5644:	682f6372 	.word	0x682f6372
    5648:	755f6c61 	.word	0x755f6c61
    564c:	74726173 	.word	0x74726173
    5650:	7973615f 	.word	0x7973615f
    5654:	632e636e 	.word	0x632e636e
    5658:	00000000 	.word	0x00000000
    565c:	682f2e2e 	.word	0x682f2e2e
    5660:	752f6c61 	.word	0x752f6c61
    5664:	736c6974 	.word	0x736c6974
    5668:	6372732f 	.word	0x6372732f
    566c:	6974752f 	.word	0x6974752f
    5670:	6c5f736c 	.word	0x6c5f736c
    5674:	2e747369 	.word	0x2e747369
    5678:	00000063 	.word	0x00000063
    567c:	682f2e2e 	.word	0x682f2e2e
    5680:	752f6c61 	.word	0x752f6c61
    5684:	736c6974 	.word	0x736c6974
    5688:	6372732f 	.word	0x6372732f
    568c:	6974752f 	.word	0x6974752f
    5690:	725f736c 	.word	0x725f736c
    5694:	62676e69 	.word	0x62676e69
    5698:	65666675 	.word	0x65666675
    569c:	00632e72 	.word	0x00632e72

000056a0 <_adcs>:
    56a0:	00000000 00000018 00001800 00000000     ................
	...
    56b8:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    56c8:	632e6364 00000000                       dc.c....

000056d0 <_cfgs>:
    56d0:	00205000 0a000000 00000000 00000000     .P .............
	...

000057d0 <_map>:
    57d0:	00000006 00000036 00000007 00000037     ....6.......7...
    57e0:	00000009 00000019 0000000e 0000002e     ................
    57f0:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5800:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    5810:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    5820:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    5830:	43000000 43000400                       ...C...C

00005838 <_usarts>:
    5838:	00000005 40100004 00030000 00700002     .......@......p.
    5848:	0000ff58 00000000                       X.......

00005850 <_i2cms>:
	...

00005868 <_i2css>:
	...

00005878 <sercomspi_regs>:
	...
    588c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    589c:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    58ac:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    58bc:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    58cc:	63745f6c 0000632e 682f2e2e 692f6c61     l_tc.c..../hal/i
    58dc:	756c636e 682f6564 635f6c61 72656d61     nclude/hal_camer
    58ec:	73615f61 2e636e79 00000068              a_async.h...

000058f8 <sd_mmc_trans_units>:
    58f8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00005914 <sd_trans_multipliers>:
    5914:	00000000 0000000a 0000000c 0000000d     ................
    5924:	0000000f 00000014 00000019 0000001e     ................
    5934:	00000023 00000028 0000002d 00000032     #...(...-...2...
    5944:	00000037 0000003c 00000046 00000050     7...<...F...P...

00005954 <mmc_trans_multipliers>:
    5954:	00000000 0000000a 0000000c 0000000d     ................
    5964:	0000000f 00000014 0000001a 0000001e     ................
    5974:	00000023 00000028 0000002d 00000034     #...(...-...4...
    5984:	00000037 0000003c 00000046 00000050     7...<...F...P...
    5994:	732f2e2e 6d6d5f64 64732f63 636d6d5f     ../sd_mmc/sd_mmc
    59a4:	0000632e                                .c..

000059a8 <_init>:
    59a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59aa:	bf00      	nop
    59ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59ae:	bc08      	pop	{r3}
    59b0:	469e      	mov	lr, r3
    59b2:	4770      	bx	lr

000059b4 <__init_array_start>:
    59b4:	00000289 	.word	0x00000289

000059b8 <_fini>:
    59b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ba:	bf00      	nop
    59bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59be:	bc08      	pop	{r3}
    59c0:	469e      	mov	lr, r3
    59c2:	4770      	bx	lr

000059c4 <__fini_array_start>:
    59c4:	00000265 	.word	0x00000265
