
Miniscope-v4-wire-free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000039e8  000039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000038  20000000  000039f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020038  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020038  2**0
                  CONTENTS
  5 .bss          00028b9c  20000040  00003a30  00020038  2**4
                  ALLOC
  6 .stack        00010004  20028bdc  0002c5cc  00020038  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003e743  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054d0  00000000  00000000  0005e802  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017b82  00000000  00000000  00063cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001380  00000000  00000000  0007b854  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001440  00000000  00000000  0007cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000328ae  00000000  00000000  0007e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e0bb  00000000  00000000  000b08c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010095c  00000000  00000000  000ce97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003368  00000000  00000000  001cf2dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 8b 03 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 61 1b 00 00     ............a...
      8c:	6d 1b 00 00 e5 02 00 00 79 1b 00 00 e5 02 00 00     m.......y.......
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 85 1b 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	59 19 00 00 65 19 00 00 71 19 00 00 7d 19 00 00     Y...e...q...}...
      cc:	89 19 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	dd 1d 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 89 26 00 00 9d 26 00 00 b1 26 00 00     .....&...&...&..
     154:	c5 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 a1 2b 00 00     .............+..
     1f0:	b5 2b 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     .+..............
     200:	e5 02 00 00 00 00 00 00 00 00 00 00 e5 02 00 00     ................
     210:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     220:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     230:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     240:	e5 02 00 00 b1 1d 00 00 e5 02 00 00 e5 02 00 00     ................
     250:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000040 	.word	0x20000040
     280:	00000000 	.word	0x00000000
     284:	000039f0 	.word	0x000039f0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000039f0 	.word	0x000039f0
     2c4:	20000044 	.word	0x20000044
     2c8:	000039f0 	.word	0x000039f0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	sd_mmc_stack_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000009e5 	.word	0x000009e5
     2e0:	00003321 	.word	0x00003321

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b15      	ldr	r3, [pc, #84]	; (340 <Reset_Handler+0x58>)
     2ec:	4a15      	ldr	r2, [pc, #84]	; (344 <Reset_Handler+0x5c>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d009      	beq.n	306 <Reset_Handler+0x1e>
     2f2:	4b13      	ldr	r3, [pc, #76]	; (340 <Reset_Handler+0x58>)
     2f4:	4a13      	ldr	r2, [pc, #76]	; (344 <Reset_Handler+0x5c>)
     2f6:	e003      	b.n	300 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f8:	6811      	ldr	r1, [r2, #0]
     2fa:	6019      	str	r1, [r3, #0]
     2fc:	3304      	adds	r3, #4
     2fe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     300:	4911      	ldr	r1, [pc, #68]	; (348 <Reset_Handler+0x60>)
     302:	428b      	cmp	r3, r1
     304:	d3f8      	bcc.n	2f8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     306:	4b11      	ldr	r3, [pc, #68]	; (34c <Reset_Handler+0x64>)
     308:	e002      	b.n	310 <Reset_Handler+0x28>
                *pDest++ = 0;
     30a:	2200      	movs	r2, #0
     30c:	601a      	str	r2, [r3, #0]
     30e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x68>)
     312:	4293      	cmp	r3, r2
     314:	d3f9      	bcc.n	30a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     316:	4b0f      	ldr	r3, [pc, #60]	; (354 <Reset_Handler+0x6c>)
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x70>)
     31a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     31e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     324:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     330:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <Reset_Handler+0x74>)
     336:	4798      	blx	r3
        main();
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <Reset_Handler+0x78>)
     33a:	4798      	blx	r3
     33c:	e7fe      	b.n	33c <Reset_Handler+0x54>
     33e:	bf00      	nop
     340:	20000000 	.word	0x20000000
     344:	000039f0 	.word	0x000039f0
     348:	20000038 	.word	0x20000038
     34c:	20000040 	.word	0x20000040
     350:	20028bdc 	.word	0x20028bdc
     354:	e000ed00 	.word	0xe000ed00
     358:	00000000 	.word	0x00000000
     35c:	0000364d 	.word	0x0000364d
     360:	00002e8d 	.word	0x00002e8d

00000364 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     364:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <TIMER_0_init+0x24>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     36e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     370:	2240      	movs	r2, #64	; 0x40
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <TIMER_0_init+0x28>)
     374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_0, TC1, _tc_get_timer());
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <TIMER_0_init+0x2c>)
     37a:	4798      	blx	r3
     37c:	4602      	mov	r2, r0
     37e:	4905      	ldr	r1, [pc, #20]	; (394 <TIMER_0_init+0x30>)
     380:	4805      	ldr	r0, [pc, #20]	; (398 <TIMER_0_init+0x34>)
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <TIMER_0_init+0x38>)
     384:	4798      	blx	r3
     386:	bd08      	pop	{r3, pc}
     388:	40000800 	.word	0x40000800
     38c:	40001c00 	.word	0x40001c00
     390:	00002b5b 	.word	0x00002b5b
     394:	40003c00 	.word	0x40003c00
     398:	20000738 	.word	0x20000738
     39c:	000010a9 	.word	0x000010a9

000003a0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <ADC_0_PORT_init+0x34>)
     3a2:	2204      	movs	r2, #4
     3a4:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3aa:	629a      	str	r2, [r3, #40]	; 0x28
     3ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3b0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
     3d2:	4770      	bx	lr
     3d4:	41008000 	.word	0x41008000

000003d8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <ADC_0_CLOCK_init+0x14>)
     3da:	6a13      	ldr	r3, [r2, #32]
     3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     3e0:	6213      	str	r3, [r2, #32]
     3e2:	2240      	movs	r2, #64	; 0x40
     3e4:	4b02      	ldr	r3, [pc, #8]	; (3f0 <ADC_0_CLOCK_init+0x18>)
     3e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     3ea:	4770      	bx	lr
     3ec:	40000800 	.word	0x40000800
     3f0:	40001c00 	.word	0x40001c00

000003f4 <ADC_0_init>:
{
     3f4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     3f6:	4b05      	ldr	r3, [pc, #20]	; (40c <ADC_0_init+0x18>)
     3f8:	4798      	blx	r3
	ADC_0_PORT_init();
     3fa:	4b05      	ldr	r3, [pc, #20]	; (410 <ADC_0_init+0x1c>)
     3fc:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     3fe:	2200      	movs	r2, #0
     400:	4904      	ldr	r1, [pc, #16]	; (414 <ADC_0_init+0x20>)
     402:	4805      	ldr	r0, [pc, #20]	; (418 <ADC_0_init+0x24>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <ADC_0_init+0x28>)
     406:	4798      	blx	r3
     408:	bd08      	pop	{r3, pc}
     40a:	bf00      	nop
     40c:	000003d9 	.word	0x000003d9
     410:	000003a1 	.word	0x000003a1
     414:	43001c00 	.word	0x43001c00
     418:	200006c8 	.word	0x200006c8
     41c:	00000c41 	.word	0x00000c41

00000420 <EXTERNAL_IRQ_0_init>:
{
     420:	b508      	push	{r3, lr}
     422:	2240      	movs	r2, #64	; 0x40
     424:	4b3f      	ldr	r3, [pc, #252]	; (524 <EXTERNAL_IRQ_0_init+0x104>)
     426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     42a:	4a3f      	ldr	r2, [pc, #252]	; (528 <EXTERNAL_IRQ_0_init+0x108>)
     42c:	6953      	ldr	r3, [r2, #20]
     42e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     432:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     434:	4b3d      	ldr	r3, [pc, #244]	; (52c <EXTERNAL_IRQ_0_init+0x10c>)
     436:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     43e:	493c      	ldr	r1, [pc, #240]	; (530 <EXTERNAL_IRQ_0_init+0x110>)
     440:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <EXTERNAL_IRQ_0_init+0x114>)
     446:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     44a:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
     44e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     452:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	f893 20d6 	ldrb.w	r2, [r3, #214]	; 0xd6
	tmp &= ~PORT_PINCFG_PMUXEN;
     45a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     462:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     466:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     46a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     47e:	4a2e      	ldr	r2, [pc, #184]	; (538 <EXTERNAL_IRQ_0_init+0x118>)
     480:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     4b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	6299      	str	r1, [r3, #40]	; 0x28
     4b4:	4a21      	ldr	r2, [pc, #132]	; (53c <EXTERNAL_IRQ_0_init+0x11c>)
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     4bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e8:	4a15      	ldr	r2, [pc, #84]	; (540 <EXTERNAL_IRQ_0_init+0x120>)
     4ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <EXTERNAL_IRQ_0_init+0x124>)
     4f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4f4:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
     4f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     500:	f893 20ce 	ldrb.w	r2, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     508:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     50c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     510:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     514:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     518:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	ext_irq_init();
     51c:	4b0a      	ldr	r3, [pc, #40]	; (548 <EXTERNAL_IRQ_0_init+0x128>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	40001c00 	.word	0x40001c00
     528:	40000800 	.word	0x40000800
     52c:	41008000 	.word	0x41008000
     530:	40020000 	.word	0x40020000
     534:	c0020040 	.word	0xc0020040
     538:	c0020080 	.word	0xc0020080
     53c:	c0020200 	.word	0xc0020200
     540:	40024000 	.word	0x40024000
     544:	c0020000 	.word	0xc0020000
     548:	00000dcd 	.word	0x00000dcd

0000054c <CAMERA_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	4b58      	ldr	r3, [pc, #352]	; (6b0 <CAMERA_0_PORT_init+0x164>)
     54e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     552:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     556:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     55a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     562:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     566:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     56a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5e2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5e6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     602:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     606:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     60e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     616:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     61a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     61e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     622:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     626:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     62a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     62e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     636:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     63a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     63e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     642:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     646:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     64a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     64e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     656:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     65e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     662:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     666:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     66a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     676:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     682:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     686:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     68a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <CAMERA_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     6b4:	4a02      	ldr	r2, [pc, #8]	; (6c0 <CAMERA_0_CLOCK_init+0xc>)
     6b6:	6a13      	ldr	r3, [r2, #32]
     6b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     6bc:	6213      	str	r3, [r2, #32]
     6be:	4770      	bx	lr
     6c0:	40000800 	.word	0x40000800

000006c4 <CAMERA_0_init>:
{
     6c4:	b508      	push	{r3, lr}
	CAMERA_0_CLOCK_init();
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <CAMERA_0_init+0x14>)
     6c8:	4798      	blx	r3
	camera_async_init(&CAMERA_0, PCC);
     6ca:	4904      	ldr	r1, [pc, #16]	; (6dc <CAMERA_0_init+0x18>)
     6cc:	4804      	ldr	r0, [pc, #16]	; (6e0 <CAMERA_0_init+0x1c>)
     6ce:	4b05      	ldr	r3, [pc, #20]	; (6e4 <CAMERA_0_init+0x20>)
     6d0:	4798      	blx	r3
	CAMERA_0_PORT_init();
     6d2:	4b05      	ldr	r3, [pc, #20]	; (6e8 <CAMERA_0_init+0x24>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006b5 	.word	0x000006b5
     6dc:	43002c00 	.word	0x43002c00
     6e0:	200006b4 	.word	0x200006b4
     6e4:	00000d39 	.word	0x00000d39
     6e8:	0000054d 	.word	0x0000054d

000006ec <USART_0_CLOCK_init>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <USART_0_CLOCK_init+0x1c>)
     6ee:	2240      	movs	r2, #64	; 0x40
     6f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     6f4:	2243      	movs	r2, #67	; 0x43
     6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6fa:	4a04      	ldr	r2, [pc, #16]	; (70c <USART_0_CLOCK_init+0x20>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	f043 0302 	orr.w	r3, r3, #2
     702:	6213      	str	r3, [r2, #32]
     704:	4770      	bx	lr
     706:	bf00      	nop
     708:	40001c00 	.word	0x40001c00
     70c:	40000800 	.word	0x40000800

00000710 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <USART_0_PORT_init+0x44>)
     712:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     71e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     722:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     726:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72a:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     72e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     732:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
     736:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     73e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     742:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     746:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     74e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
     752:	4770      	bx	lr
     754:	41008000 	.word	0x41008000

00000758 <USART_0_init>:
{
     758:	b510      	push	{r4, lr}
     75a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <USART_0_init+0x20>)
     75e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     760:	2300      	movs	r3, #0
     762:	9300      	str	r3, [sp, #0]
     764:	2310      	movs	r3, #16
     766:	4a05      	ldr	r2, [pc, #20]	; (77c <USART_0_init+0x24>)
     768:	4905      	ldr	r1, [pc, #20]	; (780 <USART_0_init+0x28>)
     76a:	4806      	ldr	r0, [pc, #24]	; (784 <USART_0_init+0x2c>)
     76c:	4c06      	ldr	r4, [pc, #24]	; (788 <USART_0_init+0x30>)
     76e:	47a0      	blx	r4
	USART_0_PORT_init();
     770:	4b06      	ldr	r3, [pc, #24]	; (78c <USART_0_init+0x34>)
     772:	4798      	blx	r3
}
     774:	b002      	add	sp, #8
     776:	bd10      	pop	{r4, pc}
     778:	000006ed 	.word	0x000006ed
     77c:	2000005c 	.word	0x2000005c
     780:	43000400 	.word	0x43000400
     784:	200006cc 	.word	0x200006cc
     788:	00001325 	.word	0x00001325
     78c:	00000711 	.word	0x00000711

00000790 <IO_BUS_PORT_init>:
{
     790:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     792:	4b5b      	ldr	r3, [pc, #364]	; (900 <IO_BUS_PORT_init+0x170>)
     794:	f44f 6500 	mov.w	r5, #2048	; 0x800
     798:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     79c:	4e59      	ldr	r6, [pc, #356]	; (904 <IO_BUS_PORT_init+0x174>)
     79e:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     7a2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7aa:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ae:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     7b2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7b6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ba:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     7be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7c6:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ca:	f893 10b5 	ldrb.w	r1, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7d6:	f883 10b5 	strb.w	r1, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7da:	f44f 7180 	mov.w	r1, #256	; 0x100
     7de:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7e0:	4849      	ldr	r0, [pc, #292]	; (908 <IO_BUS_PORT_init+0x178>)
     7e2:	6298      	str	r0, [r3, #40]	; 0x28
     7e4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7e6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     7ec:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7f0:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f4:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     7f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fc:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     804:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     808:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     80c:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     810:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     814:	f44f 7100 	mov.w	r1, #512	; 0x200
     818:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f500 7080 	add.w	r0, r0, #256	; 0x100
     81e:	6298      	str	r0, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     822:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     824:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     828:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     830:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     834:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     840:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     844:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     848:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     850:	f44f 6080 	mov.w	r0, #1024	; 0x400
     854:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	4c2d      	ldr	r4, [pc, #180]	; (90c <IO_BUS_PORT_init+0x17c>)
     858:	629c      	str	r4, [r3, #40]	; 0x28
     85a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85c:	6158      	str	r0, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     862:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     866:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     86a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     87e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     882:	f041 0108 	orr.w	r1, r1, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     88a:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     88c:	629e      	str	r6, [r3, #40]	; 0x28
     88e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     890:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     892:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     896:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     89a:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8be:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8c2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     8c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8ca:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8ce:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     8d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8d6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8f2:	f042 0208 	orr.w	r2, r2, #8
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
}
     8fa:	bc70      	pop	{r4, r5, r6}
     8fc:	4770      	bx	lr
     8fe:	bf00      	nop
     900:	41008000 	.word	0x41008000
     904:	40000800 	.word	0x40000800
     908:	40000100 	.word	0x40000100
     90c:	40000400 	.word	0x40000400

00000910 <IO_BUS_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_SDHC0;
     910:	4a05      	ldr	r2, [pc, #20]	; (928 <IO_BUS_CLOCK_init+0x18>)
     912:	6913      	ldr	r3, [r2, #16]
     914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     918:	6113      	str	r3, [r2, #16]
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <IO_BUS_CLOCK_init+0x1c>)
     91c:	2240      	movs	r2, #64	; 0x40
     91e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
     922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
     926:	4770      	bx	lr
     928:	40000800 	.word	0x40000800
     92c:	40001c00 	.word	0x40001c00

00000930 <IO_BUS_init>:
{
     930:	b508      	push	{r3, lr}
	IO_BUS_CLOCK_init();
     932:	4b05      	ldr	r3, [pc, #20]	; (948 <IO_BUS_init+0x18>)
     934:	4798      	blx	r3
	mci_sync_init(&IO_BUS, SDHC0);
     936:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
     93a:	4804      	ldr	r0, [pc, #16]	; (94c <IO_BUS_init+0x1c>)
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <IO_BUS_init+0x20>)
     93e:	4798      	blx	r3
	IO_BUS_PORT_init();
     940:	4b04      	ldr	r3, [pc, #16]	; (954 <IO_BUS_init+0x24>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	00000911 	.word	0x00000911
     94c:	20000720 	.word	0x20000720
     950:	00000e01 	.word	0x00000e01
     954:	00000791 	.word	0x00000791

00000958 <delay_driver_init>:
{
     958:	b508      	push	{r3, lr}
	delay_init(SysTick);
     95a:	4802      	ldr	r0, [pc, #8]	; (964 <delay_driver_init+0xc>)
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <delay_driver_init+0x10>)
     95e:	4798      	blx	r3
     960:	bd08      	pop	{r3, pc}
     962:	bf00      	nop
     964:	e000e010 	.word	0xe000e010
     968:	00000d75 	.word	0x00000d75

0000096c <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96c:	4a08      	ldr	r2, [pc, #32]	; (990 <PWM_0_PORT_init+0x24>)
     96e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f892 30bf 	ldrb.w	r3, [r2, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f043 0304 	orr.w	r3, r3, #4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f882 30bf 	strb.w	r3, [r2, #191]	; 0xbf
     98e:	4770      	bx	lr
     990:	41008000 	.word	0x41008000

00000994 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     994:	4a04      	ldr	r2, [pc, #16]	; (9a8 <PWM_0_CLOCK_init+0x14>)
     996:	6953      	ldr	r3, [r2, #20]
     998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     99c:	6153      	str	r3, [r2, #20]
     99e:	2240      	movs	r2, #64	; 0x40
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <PWM_0_CLOCK_init+0x18>)
     9a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     9a6:	4770      	bx	lr
     9a8:	40000800 	.word	0x40000800
     9ac:	40001c00 	.word	0x40001c00

000009b0 <PWM_0_init>:
{
     9b0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     9b2:	4b06      	ldr	r3, [pc, #24]	; (9cc <PWM_0_init+0x1c>)
     9b4:	4798      	blx	r3
	PWM_0_PORT_init();
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <PWM_0_init+0x20>)
     9b8:	4798      	blx	r3
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     9ba:	4b06      	ldr	r3, [pc, #24]	; (9d4 <PWM_0_init+0x24>)
     9bc:	4798      	blx	r3
     9be:	4602      	mov	r2, r0
     9c0:	4905      	ldr	r1, [pc, #20]	; (9d8 <PWM_0_init+0x28>)
     9c2:	4806      	ldr	r0, [pc, #24]	; (9dc <PWM_0_init+0x2c>)
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <PWM_0_init+0x30>)
     9c6:	4798      	blx	r3
     9c8:	bd08      	pop	{r3, pc}
     9ca:	bf00      	nop
     9cc:	00000995 	.word	0x00000995
     9d0:	0000096d 	.word	0x0000096d
     9d4:	00002b5f 	.word	0x00002b5f
     9d8:	40003800 	.word	0x40003800
     9dc:	20000698 	.word	0x20000698
     9e0:	00000fad 	.word	0x00000fad

000009e4 <system_init>:
}

void system_init(void)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9e6:	4b88      	ldr	r3, [pc, #544]	; (c08 <system_init+0x224>)
     9e8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ea:	4b88      	ldr	r3, [pc, #544]	; (c0c <system_init+0x228>)
     9ec:	2210      	movs	r2, #16
     9ee:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     9f6:	629a      	str	r2, [r3, #40]	; 0x28
     9f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     9fc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9fe:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a06:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a0a:	2520      	movs	r5, #32
     a0c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	497f      	ldr	r1, [pc, #508]	; (c10 <system_init+0x22c>)
     a12:	6299      	str	r1, [r3, #40]	; 0x28
     a14:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a16:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a1e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a22:	2140      	movs	r1, #64	; 0x40
     a24:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a2a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a2e:	6299      	str	r1, [r3, #40]	; 0x28
     a30:	4878      	ldr	r0, [pc, #480]	; (c14 <system_init+0x230>)
     a32:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a34:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
     a38:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a3c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a40:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     a44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a48:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a4c:	2180      	movs	r1, #128	; 0x80
     a4e:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a54:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     a58:	6299      	str	r1, [r3, #40]	; 0x28
     a5a:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     a5c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
     a60:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     a64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     a6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     a78:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a7a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a7c:	4c66      	ldr	r4, [pc, #408]	; (c18 <system_init+0x234>)
     a7e:	629c      	str	r4, [r3, #40]	; 0x28
     a80:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a82:	f893 604f 	ldrb.w	r6, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     a86:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a8a:	f883 604f 	strb.w	r6, [r3, #79]	; 0x4f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
     a92:	615e      	str	r6, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a96:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     a9a:	629e      	str	r6, [r3, #40]	; 0x28
     a9c:	4e5f      	ldr	r6, [pc, #380]	; (c1c <system_init+0x238>)
     a9e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa0:	f893 6058 	ldrb.w	r6, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aa8:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aac:	2601      	movs	r6, #1
     aae:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ab6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     aba:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     abe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 60c0 	strb.w	r6, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ace:	2602      	movs	r6, #2
     ad0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     adc:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     ae0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ae4:	f893 60c1 	ldrb.w	r6, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae8:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af0:	2604      	movs	r6, #4
     af2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     af6:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
     afe:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     b02:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b06:	f893 60c2 	ldrb.w	r6, [r3, #194]	; 0xc2
	tmp &= ~PORT_PINCFG_PMUXEN;
     b0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b0e:	f883 60c2 	strb.w	r6, [r3, #194]	; 0xc2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b12:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     b1a:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
     b1e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b26:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
     b2a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
     b2e:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b32:	f893 00c5 	ldrb.w	r0, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     b36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b3a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b46:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b52:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b56:	f893 00c9 	ldrb.w	r0, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     b5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     b66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b6a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b72:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b7a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b82:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     b8a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b8e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     b96:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b9e:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ba6:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     baa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bae:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     bb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     bba:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
     bbe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     bc2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bc6:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     bce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd2:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bd6:	f893 20b7 	ldrb.w	r2, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bda:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     be2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	ADC_0_init();
     be6:	4b0e      	ldr	r3, [pc, #56]	; (c20 <system_init+0x23c>)
     be8:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     bea:	4b0e      	ldr	r3, [pc, #56]	; (c24 <system_init+0x240>)
     bec:	4798      	blx	r3

	CAMERA_0_init();
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_init+0x244>)
     bf0:	4798      	blx	r3

	USART_0_init();
     bf2:	4b0e      	ldr	r3, [pc, #56]	; (c2c <system_init+0x248>)
     bf4:	4798      	blx	r3

	IO_BUS_init();
     bf6:	4b0e      	ldr	r3, [pc, #56]	; (c30 <system_init+0x24c>)
     bf8:	4798      	blx	r3

	delay_driver_init();
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <system_init+0x250>)
     bfc:	4798      	blx	r3

	PWM_0_init();
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <system_init+0x254>)
     c00:	4798      	blx	r3

	TIMER_0_init();
     c02:	4b0e      	ldr	r3, [pc, #56]	; (c3c <system_init+0x258>)
     c04:	4798      	blx	r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	0000177d 	.word	0x0000177d
     c0c:	41008000 	.word	0x41008000
     c10:	40000020 	.word	0x40000020
     c14:	c0020000 	.word	0xc0020000
     c18:	40008000 	.word	0x40008000
     c1c:	c0000100 	.word	0xc0000100
     c20:	000003f5 	.word	0x000003f5
     c24:	00000421 	.word	0x00000421
     c28:	000006c5 	.word	0x000006c5
     c2c:	00000759 	.word	0x00000759
     c30:	00000931 	.word	0x00000931
     c34:	00000959 	.word	0x00000959
     c38:	000009b1 	.word	0x000009b1
     c3c:	00000365 	.word	0x00000365

00000c40 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     c44:	4605      	mov	r5, r0
     c46:	b160      	cbz	r0, c62 <adc_sync_init+0x22>
     c48:	b149      	cbz	r1, c5e <adc_sync_init+0x1e>
     c4a:	2001      	movs	r0, #1
     c4c:	2239      	movs	r2, #57	; 0x39
     c4e:	4906      	ldr	r1, [pc, #24]	; (c68 <adc_sync_init+0x28>)
     c50:	4b06      	ldr	r3, [pc, #24]	; (c6c <adc_sync_init+0x2c>)
     c52:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     c54:	4621      	mov	r1, r4
     c56:	4628      	mov	r0, r5
     c58:	4b05      	ldr	r3, [pc, #20]	; (c70 <adc_sync_init+0x30>)
     c5a:	4798      	blx	r3
}
     c5c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     c5e:	2000      	movs	r0, #0
     c60:	e7f4      	b.n	c4c <adc_sync_init+0xc>
     c62:	2000      	movs	r0, #0
     c64:	e7f2      	b.n	c4c <adc_sync_init+0xc>
     c66:	bf00      	nop
     c68:	00003694 	.word	0x00003694
     c6c:	000013b9 	.word	0x000013b9
     c70:	000016e9 	.word	0x000016e9

00000c74 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c78:	460d      	mov	r5, r1
     c7a:	4690      	mov	r8, r2
     c7c:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
     c7e:	4607      	mov	r7, r0
     c80:	b1c8      	cbz	r0, cb6 <adc_sync_read_channel+0x42>
     c82:	b1d2      	cbz	r2, cba <adc_sync_read_channel+0x46>
     c84:	b9db      	cbnz	r3, cbe <adc_sync_read_channel+0x4a>
     c86:	2000      	movs	r0, #0
     c88:	f8df a084 	ldr.w	sl, [pc, #132]	; d10 <adc_sync_read_channel+0x9c>
     c8c:	2267      	movs	r2, #103	; 0x67
     c8e:	4651      	mov	r1, sl
     c90:	4e1a      	ldr	r6, [pc, #104]	; (cfc <adc_sync_read_channel+0x88>)
     c92:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
     c94:	463c      	mov	r4, r7
     c96:	4638      	mov	r0, r7
     c98:	4b19      	ldr	r3, [pc, #100]	; (d00 <adc_sync_read_channel+0x8c>)
     c9a:	4798      	blx	r3
     c9c:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
     c9e:	fb99 f0f0 	sdiv	r0, r9, r0
     ca2:	fb07 9010 	mls	r0, r7, r0, r9
     ca6:	2269      	movs	r2, #105	; 0x69
     ca8:	4651      	mov	r1, sl
     caa:	fab0 f080 	clz	r0, r0
     cae:	0940      	lsrs	r0, r0, #5
     cb0:	47b0      	blx	r6
	uint16_t offset = 0;
     cb2:	2600      	movs	r6, #0
     cb4:	e009      	b.n	cca <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
     cb6:	2000      	movs	r0, #0
     cb8:	e7e6      	b.n	c88 <adc_sync_read_channel+0x14>
     cba:	2000      	movs	r0, #0
     cbc:	e7e4      	b.n	c88 <adc_sync_read_channel+0x14>
     cbe:	2001      	movs	r0, #1
     cc0:	e7e2      	b.n	c88 <adc_sync_read_channel+0x14>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
     cc2:	443e      	add	r6, r7
     cc4:	b2b6      	uxth	r6, r6
	} while (offset < length);
     cc6:	45b1      	cmp	r9, r6
     cc8:	d915      	bls.n	cf6 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
     cca:	4620      	mov	r0, r4
     ccc:	4b0d      	ldr	r3, [pc, #52]	; (d04 <adc_sync_read_channel+0x90>)
     cce:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     cd0:	4629      	mov	r1, r5
     cd2:	4620      	mov	r0, r4
     cd4:	4b0c      	ldr	r3, [pc, #48]	; (d08 <adc_sync_read_channel+0x94>)
     cd6:	4798      	blx	r3
     cd8:	2800      	cmp	r0, #0
     cda:	d0f9      	beq.n	cd0 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
     cdc:	4629      	mov	r1, r5
     cde:	4620      	mov	r0, r4
     ce0:	4b0a      	ldr	r3, [pc, #40]	; (d0c <adc_sync_read_channel+0x98>)
     ce2:	4798      	blx	r3
		buffer[offset] = result;
     ce4:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
     ce8:	2f01      	cmp	r7, #1
     cea:	d9ea      	bls.n	cc2 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
     cec:	1c73      	adds	r3, r6, #1
     cee:	0a00      	lsrs	r0, r0, #8
     cf0:	f808 0003 	strb.w	r0, [r8, r3]
     cf4:	e7e5      	b.n	cc2 <adc_sync_read_channel+0x4e>

	return offset;
}
     cf6:	4630      	mov	r0, r6
     cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cfc:	000013b9 	.word	0x000013b9
     d00:	00001721 	.word	0x00001721
     d04:	00001741 	.word	0x00001741
     d08:	00001735 	.word	0x00001735
     d0c:	00001757 	.word	0x00001757
     d10:	00003694 	.word	0x00003694

00000d14 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d14:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d18:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d1a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d1c:	f3bf 8f5f 	dmb	sy
     d20:	4770      	bx	lr

00000d22 <atomic_leave_critical>:
     d22:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d26:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d28:	f383 8810 	msr	PRIMASK, r3
     d2c:	4770      	bx	lr

00000d2e <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     d2e:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     d30:	6903      	ldr	r3, [r0, #16]
     d32:	b103      	cbz	r3, d36 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     d34:	4798      	blx	r3
     d36:	bd08      	pop	{r3, pc}

00000d38 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     d38:	b538      	push	{r3, r4, r5, lr}
     d3a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d3c:	4604      	mov	r4, r0
     d3e:	b178      	cbz	r0, d60 <camera_async_init+0x28>
     d40:	b161      	cbz	r1, d5c <camera_async_init+0x24>
     d42:	2001      	movs	r0, #1
     d44:	2232      	movs	r2, #50	; 0x32
     d46:	4907      	ldr	r1, [pc, #28]	; (d64 <camera_async_init+0x2c>)
     d48:	4b07      	ldr	r3, [pc, #28]	; (d68 <camera_async_init+0x30>)
     d4a:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     d4c:	4629      	mov	r1, r5
     d4e:	4620      	mov	r0, r4
     d50:	4b06      	ldr	r3, [pc, #24]	; (d6c <camera_async_init+0x34>)
     d52:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     d54:	4b06      	ldr	r3, [pc, #24]	; (d70 <camera_async_init+0x38>)
     d56:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     d58:	2000      	movs	r0, #0
     d5a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     d5c:	2000      	movs	r0, #0
     d5e:	e7f1      	b.n	d44 <camera_async_init+0xc>
     d60:	2000      	movs	r0, #0
     d62:	e7ef      	b.n	d44 <camera_async_init+0xc>
     d64:	000036b0 	.word	0x000036b0
     d68:	000013b9 	.word	0x000013b9
     d6c:	00001d79 	.word	0x00001d79
     d70:	00000d2f 	.word	0x00000d2f

00000d74 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     d74:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     d76:	4b02      	ldr	r3, [pc, #8]	; (d80 <delay_init+0xc>)
     d78:	6018      	str	r0, [r3, #0]
     d7a:	4b02      	ldr	r3, [pc, #8]	; (d84 <delay_init+0x10>)
     d7c:	4798      	blx	r3
     d7e:	bd08      	pop	{r3, pc}
     d80:	2000006c 	.word	0x2000006c
     d84:	000026ed 	.word	0x000026ed

00000d88 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     d88:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     d8a:	2504      	movs	r5, #4
     d8c:	2400      	movs	r4, #0

	while (upper >= lower) {
     d8e:	e007      	b.n	da0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     d90:	4a0d      	ldr	r2, [pc, #52]	; (dc8 <process_ext_irq+0x40>)
     d92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     d96:	b1b3      	cbz	r3, dc6 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     d98:	4798      	blx	r3
     d9a:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     d9c:	3a01      	subs	r2, #1
     d9e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     da0:	42ac      	cmp	r4, r5
     da2:	d810      	bhi.n	dc6 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     da4:	192b      	adds	r3, r5, r4
     da6:	105b      	asrs	r3, r3, #1
     da8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     daa:	2a03      	cmp	r2, #3
     dac:	d80b      	bhi.n	dc6 <process_ext_irq+0x3e>
     dae:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     db0:	4905      	ldr	r1, [pc, #20]	; (dc8 <process_ext_irq+0x40>)
     db2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     db6:	6849      	ldr	r1, [r1, #4]
     db8:	4281      	cmp	r1, r0
     dba:	d0e9      	beq.n	d90 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     dbc:	4281      	cmp	r1, r0
     dbe:	d2ed      	bcs.n	d9c <process_ext_irq+0x14>
			lower = middle + 1;
     dc0:	3201      	adds	r2, #1
     dc2:	b2d4      	uxtb	r4, r2
     dc4:	e7ec      	b.n	da0 <process_ext_irq+0x18>
     dc6:	bd38      	pop	{r3, r4, r5, pc}
     dc8:	20000070 	.word	0x20000070

00000dcc <ext_irq_init>:
{
     dcc:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     dce:	2300      	movs	r3, #0
     dd0:	e00a      	b.n	de8 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     dd2:	4a08      	ldr	r2, [pc, #32]	; (df4 <ext_irq_init+0x28>)
     dd4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     dd8:	f04f 30ff 	mov.w	r0, #4294967295
     ddc:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     dde:	2100      	movs	r1, #0
     de0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     de4:	3301      	adds	r3, #1
     de6:	b29b      	uxth	r3, r3
     de8:	2b03      	cmp	r3, #3
     dea:	d9f2      	bls.n	dd2 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     dec:	4802      	ldr	r0, [pc, #8]	; (df8 <ext_irq_init+0x2c>)
     dee:	4b03      	ldr	r3, [pc, #12]	; (dfc <ext_irq_init+0x30>)
     df0:	4798      	blx	r3
}
     df2:	bd08      	pop	{r3, pc}
     df4:	20000070 	.word	0x20000070
     df8:	00000d89 	.word	0x00000d89
     dfc:	00001a59 	.word	0x00001a59

00000e00 <mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t mci_sync_init(struct mci_sync_desc *mci, void *hw)
{
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	460c      	mov	r4, r1
	ASSERT(mci && hw);
     e04:	4605      	mov	r5, r0
     e06:	b160      	cbz	r0, e22 <mci_sync_init+0x22>
     e08:	b149      	cbz	r1, e1e <mci_sync_init+0x1e>
     e0a:	2001      	movs	r0, #1
     e0c:	2231      	movs	r2, #49	; 0x31
     e0e:	4906      	ldr	r1, [pc, #24]	; (e28 <mci_sync_init+0x28>)
     e10:	4b06      	ldr	r3, [pc, #24]	; (e2c <mci_sync_init+0x2c>)
     e12:	4798      	blx	r3
	return _mci_sync_init(&mci->device, hw);
     e14:	4621      	mov	r1, r4
     e16:	4628      	mov	r0, r5
     e18:	4b05      	ldr	r3, [pc, #20]	; (e30 <mci_sync_init+0x30>)
     e1a:	4798      	blx	r3
}
     e1c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci && hw);
     e1e:	2000      	movs	r0, #0
     e20:	e7f4      	b.n	e0c <mci_sync_init+0xc>
     e22:	2000      	movs	r0, #0
     e24:	e7f2      	b.n	e0c <mci_sync_init+0xc>
     e26:	bf00      	nop
     e28:	000036d0 	.word	0x000036d0
     e2c:	000013b9 	.word	0x000013b9
     e30:	00002035 	.word	0x00002035

00000e34 <mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t mci_sync_select_device(struct mci_sync_desc *mci, uint8_t slot, uint32_t clock, uint8_t bus_width,
                               bool high_speed)
{
     e34:	b5f0      	push	{r4, r5, r6, r7, lr}
     e36:	b083      	sub	sp, #12
     e38:	460d      	mov	r5, r1
     e3a:	4616      	mov	r6, r2
     e3c:	461f      	mov	r7, r3
	ASSERT(mci);
     e3e:	4604      	mov	r4, r0
     e40:	2244      	movs	r2, #68	; 0x44
     e42:	4908      	ldr	r1, [pc, #32]	; (e64 <mci_sync_select_device+0x30>)
     e44:	3000      	adds	r0, #0
     e46:	bf18      	it	ne
     e48:	2001      	movne	r0, #1
     e4a:	4b07      	ldr	r3, [pc, #28]	; (e68 <mci_sync_select_device+0x34>)
     e4c:	4798      	blx	r3
	return _mci_sync_select_device(&mci->device, slot, clock, bus_width, high_speed);
     e4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e52:	9300      	str	r3, [sp, #0]
     e54:	463b      	mov	r3, r7
     e56:	4632      	mov	r2, r6
     e58:	4629      	mov	r1, r5
     e5a:	4620      	mov	r0, r4
     e5c:	4c03      	ldr	r4, [pc, #12]	; (e6c <mci_sync_select_device+0x38>)
     e5e:	47a0      	blx	r4
}
     e60:	b003      	add	sp, #12
     e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e64:	000036d0 	.word	0x000036d0
     e68:	000013b9 	.word	0x000013b9
     e6c:	0000209d 	.word	0x0000209d

00000e70 <mci_sync_deselect_device>:

/**
 *  \brief Deselect a device by an assigned slot
 */
int32_t mci_sync_deselect_device(struct mci_sync_desc *mci, uint8_t slot)
{
     e70:	b538      	push	{r3, r4, r5, lr}
     e72:	460d      	mov	r5, r1
	ASSERT(mci);
     e74:	4604      	mov	r4, r0
     e76:	224d      	movs	r2, #77	; 0x4d
     e78:	4905      	ldr	r1, [pc, #20]	; (e90 <mci_sync_deselect_device+0x20>)
     e7a:	3000      	adds	r0, #0
     e7c:	bf18      	it	ne
     e7e:	2001      	movne	r0, #1
     e80:	4b04      	ldr	r3, [pc, #16]	; (e94 <mci_sync_deselect_device+0x24>)
     e82:	4798      	blx	r3
	return _mci_sync_deselect_device(&mci->device, slot);
     e84:	4629      	mov	r1, r5
     e86:	4620      	mov	r0, r4
     e88:	4b03      	ldr	r3, [pc, #12]	; (e98 <mci_sync_deselect_device+0x28>)
     e8a:	4798      	blx	r3
}
     e8c:	bd38      	pop	{r3, r4, r5, pc}
     e8e:	bf00      	nop
     e90:	000036d0 	.word	0x000036d0
     e94:	000013b9 	.word	0x000013b9
     e98:	00002131 	.word	0x00002131

00000e9c <mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool mci_sync_send_cmd(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg)
{
     e9c:	b570      	push	{r4, r5, r6, lr}
     e9e:	460d      	mov	r5, r1
     ea0:	4616      	mov	r6, r2
	ASSERT(mci);
     ea2:	4604      	mov	r4, r0
     ea4:	2272      	movs	r2, #114	; 0x72
     ea6:	4906      	ldr	r1, [pc, #24]	; (ec0 <mci_sync_send_cmd+0x24>)
     ea8:	3000      	adds	r0, #0
     eaa:	bf18      	it	ne
     eac:	2001      	movne	r0, #1
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <mci_sync_send_cmd+0x28>)
     eb0:	4798      	blx	r3
	return _mci_sync_send_cmd(&mci->device, cmd, arg);
     eb2:	4632      	mov	r2, r6
     eb4:	4629      	mov	r1, r5
     eb6:	4620      	mov	r0, r4
     eb8:	4b03      	ldr	r3, [pc, #12]	; (ec8 <mci_sync_send_cmd+0x2c>)
     eba:	4798      	blx	r3
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	bf00      	nop
     ec0:	000036d0 	.word	0x000036d0
     ec4:	000013b9 	.word	0x000013b9
     ec8:	00002135 	.word	0x00002135

00000ecc <mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t mci_sync_get_response(struct mci_sync_desc *mci)
{
     ecc:	b510      	push	{r4, lr}
	ASSERT(mci);
     ece:	4604      	mov	r4, r0
     ed0:	227b      	movs	r2, #123	; 0x7b
     ed2:	4905      	ldr	r1, [pc, #20]	; (ee8 <mci_sync_get_response+0x1c>)
     ed4:	3000      	adds	r0, #0
     ed6:	bf18      	it	ne
     ed8:	2001      	movne	r0, #1
     eda:	4b04      	ldr	r3, [pc, #16]	; (eec <mci_sync_get_response+0x20>)
     edc:	4798      	blx	r3
	return _mci_sync_get_response(&mci->device);
     ede:	4620      	mov	r0, r4
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <mci_sync_get_response+0x24>)
     ee2:	4798      	blx	r3
}
     ee4:	bd10      	pop	{r4, pc}
     ee6:	bf00      	nop
     ee8:	000036d0 	.word	0x000036d0
     eec:	000013b9 	.word	0x000013b9
     ef0:	0000218d 	.word	0x0000218d

00000ef4 <mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool mci_sync_adtc_start(struct mci_sync_desc *mci, uint32_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block,
                         bool access_block)
{
     ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef6:	b083      	sub	sp, #12
     ef8:	460d      	mov	r5, r1
     efa:	4616      	mov	r6, r2
     efc:	461f      	mov	r7, r3
	ASSERT(mci);
     efe:	4604      	mov	r4, r0
     f00:	2290      	movs	r2, #144	; 0x90
     f02:	490a      	ldr	r1, [pc, #40]	; (f2c <mci_sync_adtc_start+0x38>)
     f04:	3000      	adds	r0, #0
     f06:	bf18      	it	ne
     f08:	2001      	movne	r0, #1
     f0a:	4b09      	ldr	r3, [pc, #36]	; (f30 <mci_sync_adtc_start+0x3c>)
     f0c:	4798      	blx	r3
	return _mci_sync_adtc_start(&mci->device, cmd, arg, block_size, nb_block, access_block);
     f0e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
     f12:	9301      	str	r3, [sp, #4]
     f14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
     f18:	9300      	str	r3, [sp, #0]
     f1a:	463b      	mov	r3, r7
     f1c:	4632      	mov	r2, r6
     f1e:	4629      	mov	r1, r5
     f20:	4620      	mov	r0, r4
     f22:	4c04      	ldr	r4, [pc, #16]	; (f34 <mci_sync_adtc_start+0x40>)
     f24:	47a0      	blx	r4
}
     f26:	b003      	add	sp, #12
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2a:	bf00      	nop
     f2c:	000036d0 	.word	0x000036d0
     f30:	000013b9 	.word	0x000013b9
     f34:	000021b9 	.word	0x000021b9

00000f38 <mci_sync_start_write_blocks>:

/**
 *  \brief Start a write blocks transfer on the line
 */
bool mci_sync_start_write_blocks(struct mci_sync_desc *mci, const void *src, uint16_t nb_block)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	460c      	mov	r4, r1
     f3c:	4616      	mov	r6, r2
	ASSERT(mci && src);
     f3e:	4605      	mov	r5, r0
     f40:	b168      	cbz	r0, f5e <mci_sync_start_write_blocks+0x26>
     f42:	b151      	cbz	r1, f5a <mci_sync_start_write_blocks+0x22>
     f44:	2001      	movs	r0, #1
     f46:	22be      	movs	r2, #190	; 0xbe
     f48:	4906      	ldr	r1, [pc, #24]	; (f64 <mci_sync_start_write_blocks+0x2c>)
     f4a:	4b07      	ldr	r3, [pc, #28]	; (f68 <mci_sync_start_write_blocks+0x30>)
     f4c:	4798      	blx	r3
	return _mci_sync_start_write_blocks(&mci->device, src, nb_block);
     f4e:	4632      	mov	r2, r6
     f50:	4621      	mov	r1, r4
     f52:	4628      	mov	r0, r5
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <mci_sync_start_write_blocks+0x34>)
     f56:	4798      	blx	r3
}
     f58:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci && src);
     f5a:	2000      	movs	r0, #0
     f5c:	e7f3      	b.n	f46 <mci_sync_start_write_blocks+0xe>
     f5e:	2000      	movs	r0, #0
     f60:	e7f1      	b.n	f46 <mci_sync_start_write_blocks+0xe>
     f62:	bf00      	nop
     f64:	000036d0 	.word	0x000036d0
     f68:	000013b9 	.word	0x000013b9
     f6c:	00002321 	.word	0x00002321

00000f70 <mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool mci_sync_wait_end_of_write_blocks(struct mci_sync_desc *mci)
{
     f70:	b510      	push	{r4, lr}
	ASSERT(mci);
     f72:	4604      	mov	r4, r0
     f74:	22d0      	movs	r2, #208	; 0xd0
     f76:	4905      	ldr	r1, [pc, #20]	; (f8c <mci_sync_wait_end_of_write_blocks+0x1c>)
     f78:	3000      	adds	r0, #0
     f7a:	bf18      	it	ne
     f7c:	2001      	movne	r0, #1
     f7e:	4b04      	ldr	r3, [pc, #16]	; (f90 <mci_sync_wait_end_of_write_blocks+0x20>)
     f80:	4798      	blx	r3
	return _mci_sync_wait_end_of_write_blocks(&mci->device);
     f82:	4620      	mov	r0, r4
     f84:	4b03      	ldr	r3, [pc, #12]	; (f94 <mci_sync_wait_end_of_write_blocks+0x24>)
     f86:	4798      	blx	r3
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	bf00      	nop
     f8c:	000036d0 	.word	0x000036d0
     f90:	000013b9 	.word	0x000013b9
     f94:	000023a1 	.word	0x000023a1

00000f98 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     f98:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     f9a:	6943      	ldr	r3, [r0, #20]
     f9c:	b103      	cbz	r3, fa0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     f9e:	4798      	blx	r3
     fa0:	bd08      	pop	{r3, pc}

00000fa2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     fa2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     fa4:	6983      	ldr	r3, [r0, #24]
     fa6:	b103      	cbz	r3, faa <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     fa8:	4798      	blx	r3
     faa:	bd08      	pop	{r3, pc}

00000fac <pwm_init>:
{
     fac:	b538      	push	{r3, r4, r5, lr}
     fae:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     fb0:	4604      	mov	r4, r0
     fb2:	b188      	cbz	r0, fd8 <pwm_init+0x2c>
     fb4:	b171      	cbz	r1, fd4 <pwm_init+0x28>
     fb6:	2001      	movs	r0, #1
     fb8:	2233      	movs	r2, #51	; 0x33
     fba:	4908      	ldr	r1, [pc, #32]	; (fdc <pwm_init+0x30>)
     fbc:	4b08      	ldr	r3, [pc, #32]	; (fe0 <pwm_init+0x34>)
     fbe:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     fc0:	4629      	mov	r1, r5
     fc2:	4620      	mov	r0, r4
     fc4:	4b07      	ldr	r3, [pc, #28]	; (fe4 <pwm_init+0x38>)
     fc6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     fc8:	4b07      	ldr	r3, [pc, #28]	; (fe8 <pwm_init+0x3c>)
     fca:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     fcc:	4b07      	ldr	r3, [pc, #28]	; (fec <pwm_init+0x40>)
     fce:	6063      	str	r3, [r4, #4]
}
     fd0:	2000      	movs	r0, #0
     fd2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     fd4:	2000      	movs	r0, #0
     fd6:	e7ef      	b.n	fb8 <pwm_init+0xc>
     fd8:	2000      	movs	r0, #0
     fda:	e7ed      	b.n	fb8 <pwm_init+0xc>
     fdc:	000036ec 	.word	0x000036ec
     fe0:	000013b9 	.word	0x000013b9
     fe4:	000029b5 	.word	0x000029b5
     fe8:	00000f99 	.word	0x00000f99
     fec:	00000fa3 	.word	0x00000fa3

00000ff0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     ff2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     ff4:	b117      	cbz	r7, ffc <timer_add_timer_task+0xc>
     ff6:	463c      	mov	r4, r7
     ff8:	2600      	movs	r6, #0
     ffa:	e00b      	b.n	1014 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
     ffc:	4b0e      	ldr	r3, [pc, #56]	; (1038 <timer_add_timer_task+0x48>)
     ffe:	4798      	blx	r3
		return;
    1000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1002:	68a5      	ldr	r5, [r4, #8]
    1004:	442b      	add	r3, r5
    1006:	1a9b      	subs	r3, r3, r2
    1008:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    100a:	688d      	ldr	r5, [r1, #8]
    100c:	42ab      	cmp	r3, r5
    100e:	d209      	bcs.n	1024 <timer_add_timer_task+0x34>
			break;
		prev = it;
    1010:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1012:	6824      	ldr	r4, [r4, #0]
    1014:	b134      	cbz	r4, 1024 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    1016:	6863      	ldr	r3, [r4, #4]
    1018:	4293      	cmp	r3, r2
    101a:	d8f2      	bhi.n	1002 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    101c:	68a5      	ldr	r5, [r4, #8]
    101e:	1a9b      	subs	r3, r3, r2
    1020:	442b      	add	r3, r5
    1022:	e7f2      	b.n	100a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    1024:	42bc      	cmp	r4, r7
    1026:	d003      	beq.n	1030 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1028:	4630      	mov	r0, r6
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <timer_add_timer_task+0x4c>)
    102c:	4798      	blx	r3
    102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1030:	4b01      	ldr	r3, [pc, #4]	; (1038 <timer_add_timer_task+0x48>)
    1032:	4798      	blx	r3
    1034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1036:	bf00      	nop
    1038:	000013d5 	.word	0x000013d5
    103c:	00001401 	.word	0x00001401

00001040 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1042:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1044:	6906      	ldr	r6, [r0, #16]
    1046:	3601      	adds	r6, #1
    1048:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    104a:	7e03      	ldrb	r3, [r0, #24]
    104c:	f013 0f01 	tst.w	r3, #1
    1050:	d105      	bne.n	105e <timer_process_counted+0x1e>
    1052:	7e03      	ldrb	r3, [r0, #24]
    1054:	f013 0f02 	tst.w	r3, #2
    1058:	d101      	bne.n	105e <timer_process_counted+0x1e>
    105a:	4605      	mov	r5, r0
    105c:	e009      	b.n	1072 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    105e:	7e03      	ldrb	r3, [r0, #24]
    1060:	f043 0302 	orr.w	r3, r3, #2
    1064:	7603      	strb	r3, [r0, #24]
		return;
    1066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1068:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    106a:	68e3      	ldr	r3, [r4, #12]
    106c:	4620      	mov	r0, r4
    106e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1070:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    1072:	b19c      	cbz	r4, 109c <timer_process_counted+0x5c>
    1074:	6863      	ldr	r3, [r4, #4]
    1076:	1af3      	subs	r3, r6, r3
    1078:	68a2      	ldr	r2, [r4, #8]
    107a:	4293      	cmp	r3, r2
    107c:	d30e      	bcc.n	109c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    107e:	f105 0714 	add.w	r7, r5, #20
    1082:	4638      	mov	r0, r7
    1084:	4b06      	ldr	r3, [pc, #24]	; (10a0 <timer_process_counted+0x60>)
    1086:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1088:	7c23      	ldrb	r3, [r4, #16]
    108a:	2b01      	cmp	r3, #1
    108c:	d1ec      	bne.n	1068 <timer_process_counted+0x28>
			tmp->time_label = time;
    108e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1090:	4632      	mov	r2, r6
    1092:	4621      	mov	r1, r4
    1094:	4638      	mov	r0, r7
    1096:	4b03      	ldr	r3, [pc, #12]	; (10a4 <timer_process_counted+0x64>)
    1098:	4798      	blx	r3
    109a:	e7e5      	b.n	1068 <timer_process_counted+0x28>
    109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    109e:	bf00      	nop
    10a0:	00001409 	.word	0x00001409
    10a4:	00000ff1 	.word	0x00000ff1

000010a8 <timer_init>:
{
    10a8:	b538      	push	{r3, r4, r5, lr}
    10aa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    10ac:	4604      	mov	r4, r0
    10ae:	b180      	cbz	r0, 10d2 <timer_init+0x2a>
    10b0:	b169      	cbz	r1, 10ce <timer_init+0x26>
    10b2:	2001      	movs	r0, #1
    10b4:	223b      	movs	r2, #59	; 0x3b
    10b6:	4908      	ldr	r1, [pc, #32]	; (10d8 <timer_init+0x30>)
    10b8:	4b08      	ldr	r3, [pc, #32]	; (10dc <timer_init+0x34>)
    10ba:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    10bc:	4629      	mov	r1, r5
    10be:	4620      	mov	r0, r4
    10c0:	4b07      	ldr	r3, [pc, #28]	; (10e0 <timer_init+0x38>)
    10c2:	4798      	blx	r3
	descr->time                           = 0;
    10c4:	2000      	movs	r0, #0
    10c6:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <timer_init+0x3c>)
    10ca:	6023      	str	r3, [r4, #0]
}
    10cc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    10ce:	2000      	movs	r0, #0
    10d0:	e7f0      	b.n	10b4 <timer_init+0xc>
    10d2:	2000      	movs	r0, #0
    10d4:	e7ee      	b.n	10b4 <timer_init+0xc>
    10d6:	bf00      	nop
    10d8:	00003704 	.word	0x00003704
    10dc:	000013b9 	.word	0x000013b9
    10e0:	000027e1 	.word	0x000027e1
    10e4:	00001041 	.word	0x00001041

000010e8 <timer_start>:
{
    10e8:	b510      	push	{r4, lr}
	ASSERT(descr);
    10ea:	4604      	mov	r4, r0
    10ec:	2253      	movs	r2, #83	; 0x53
    10ee:	4909      	ldr	r1, [pc, #36]	; (1114 <timer_start+0x2c>)
    10f0:	3000      	adds	r0, #0
    10f2:	bf18      	it	ne
    10f4:	2001      	movne	r0, #1
    10f6:	4b08      	ldr	r3, [pc, #32]	; (1118 <timer_start+0x30>)
    10f8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    10fa:	4620      	mov	r0, r4
    10fc:	4b07      	ldr	r3, [pc, #28]	; (111c <timer_start+0x34>)
    10fe:	4798      	blx	r3
    1100:	b920      	cbnz	r0, 110c <timer_start+0x24>
	_timer_start(&descr->device);
    1102:	4620      	mov	r0, r4
    1104:	4b06      	ldr	r3, [pc, #24]	; (1120 <timer_start+0x38>)
    1106:	4798      	blx	r3
	return ERR_NONE;
    1108:	2000      	movs	r0, #0
    110a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    110c:	f06f 0010 	mvn.w	r0, #16
}
    1110:	bd10      	pop	{r4, pc}
    1112:	bf00      	nop
    1114:	00003704 	.word	0x00003704
    1118:	000013b9 	.word	0x000013b9
    111c:	00002b49 	.word	0x00002b49
    1120:	00002b35 	.word	0x00002b35

00001124 <timer_add_task>:
{
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	b082      	sub	sp, #8
    1128:	460d      	mov	r5, r1
	ASSERT(descr && task);
    112a:	4604      	mov	r4, r0
    112c:	b320      	cbz	r0, 1178 <timer_add_task+0x54>
    112e:	b309      	cbz	r1, 1174 <timer_add_task+0x50>
    1130:	2001      	movs	r0, #1
    1132:	227a      	movs	r2, #122	; 0x7a
    1134:	491f      	ldr	r1, [pc, #124]	; (11b4 <timer_add_task+0x90>)
    1136:	4b20      	ldr	r3, [pc, #128]	; (11b8 <timer_add_task+0x94>)
    1138:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    113a:	7e23      	ldrb	r3, [r4, #24]
    113c:	f043 0301 	orr.w	r3, r3, #1
    1140:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1142:	f104 0614 	add.w	r6, r4, #20
    1146:	4629      	mov	r1, r5
    1148:	4630      	mov	r0, r6
    114a:	4b1c      	ldr	r3, [pc, #112]	; (11bc <timer_add_task+0x98>)
    114c:	4798      	blx	r3
    114e:	b9a8      	cbnz	r0, 117c <timer_add_task+0x58>
	task->time_label = descr->time;
    1150:	6923      	ldr	r3, [r4, #16]
    1152:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1154:	6922      	ldr	r2, [r4, #16]
    1156:	4629      	mov	r1, r5
    1158:	4630      	mov	r0, r6
    115a:	4b19      	ldr	r3, [pc, #100]	; (11c0 <timer_add_task+0x9c>)
    115c:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    115e:	7e23      	ldrb	r3, [r4, #24]
    1160:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1164:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1166:	7e23      	ldrb	r3, [r4, #24]
    1168:	f013 0f02 	tst.w	r3, #2
    116c:	d112      	bne.n	1194 <timer_add_task+0x70>
	return ERR_NONE;
    116e:	2000      	movs	r0, #0
}
    1170:	b002      	add	sp, #8
    1172:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1174:	2000      	movs	r0, #0
    1176:	e7dc      	b.n	1132 <timer_add_task+0xe>
    1178:	2000      	movs	r0, #0
    117a:	e7da      	b.n	1132 <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    117c:	7e23      	ldrb	r3, [r4, #24]
    117e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1182:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1184:	227f      	movs	r2, #127	; 0x7f
    1186:	490b      	ldr	r1, [pc, #44]	; (11b4 <timer_add_task+0x90>)
    1188:	2000      	movs	r0, #0
    118a:	4b0b      	ldr	r3, [pc, #44]	; (11b8 <timer_add_task+0x94>)
    118c:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    118e:	f06f 0011 	mvn.w	r0, #17
    1192:	e7ed      	b.n	1170 <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1194:	a801      	add	r0, sp, #4
    1196:	4b0b      	ldr	r3, [pc, #44]	; (11c4 <timer_add_task+0xa0>)
    1198:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    119a:	7e23      	ldrb	r3, [r4, #24]
    119c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    11a0:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    11a2:	4620      	mov	r0, r4
    11a4:	4b08      	ldr	r3, [pc, #32]	; (11c8 <timer_add_task+0xa4>)
    11a6:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    11a8:	a801      	add	r0, sp, #4
    11aa:	4b08      	ldr	r3, [pc, #32]	; (11cc <timer_add_task+0xa8>)
    11ac:	4798      	blx	r3
	return ERR_NONE;
    11ae:	2000      	movs	r0, #0
    11b0:	e7de      	b.n	1170 <timer_add_task+0x4c>
    11b2:	bf00      	nop
    11b4:	00003704 	.word	0x00003704
    11b8:	000013b9 	.word	0x000013b9
    11bc:	000013bf 	.word	0x000013bf
    11c0:	00000ff1 	.word	0x00000ff1
    11c4:	00000d15 	.word	0x00000d15
    11c8:	00002b65 	.word	0x00002b65
    11cc:	00000d23 	.word	0x00000d23

000011d0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    11d0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    11d2:	2300      	movs	r3, #0
    11d4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    11d6:	69c3      	ldr	r3, [r0, #28]
    11d8:	b11b      	cbz	r3, 11e2 <usart_transmission_complete+0x12>
    11da:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    11de:	4610      	mov	r0, r2
    11e0:	4798      	blx	r3
    11e2:	bd08      	pop	{r3, pc}

000011e4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    11e4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    11e6:	2300      	movs	r3, #0
    11e8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    11ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
    11ec:	b11b      	cbz	r3, 11f6 <usart_error+0x12>
    11ee:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    11f2:	4610      	mov	r0, r2
    11f4:	4798      	blx	r3
    11f6:	bd08      	pop	{r3, pc}

000011f8 <usart_fill_rx_buffer>:
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    11fa:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    11fc:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1200:	302c      	adds	r0, #44	; 0x2c
    1202:	4b03      	ldr	r3, [pc, #12]	; (1210 <usart_fill_rx_buffer+0x18>)
    1204:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1206:	6a23      	ldr	r3, [r4, #32]
    1208:	b10b      	cbz	r3, 120e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    120a:	4628      	mov	r0, r5
    120c:	4798      	blx	r3
    120e:	bd38      	pop	{r3, r4, r5, pc}
    1210:	000014a5 	.word	0x000014a5

00001214 <usart_async_write>:
{
    1214:	b570      	push	{r4, r5, r6, lr}
    1216:	460e      	mov	r6, r1
    1218:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    121a:	4604      	mov	r4, r0
    121c:	b1d8      	cbz	r0, 1256 <usart_async_write+0x42>
    121e:	b1e1      	cbz	r1, 125a <usart_async_write+0x46>
    1220:	b9ea      	cbnz	r2, 125e <usart_async_write+0x4a>
    1222:	2000      	movs	r0, #0
    1224:	f240 123b 	movw	r2, #315	; 0x13b
    1228:	490f      	ldr	r1, [pc, #60]	; (1268 <usart_async_write+0x54>)
    122a:	4b10      	ldr	r3, [pc, #64]	; (126c <usart_async_write+0x58>)
    122c:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    122e:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1232:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1236:	429a      	cmp	r2, r3
    1238:	d113      	bne.n	1262 <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
    123a:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    123c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1240:	2300      	movs	r3, #0
    1242:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1246:	2301      	movs	r3, #1
    1248:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    124a:	f104 0008 	add.w	r0, r4, #8
    124e:	4b08      	ldr	r3, [pc, #32]	; (1270 <usart_async_write+0x5c>)
    1250:	4798      	blx	r3
	return (int32_t)length;
    1252:	4628      	mov	r0, r5
    1254:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1256:	2000      	movs	r0, #0
    1258:	e7e4      	b.n	1224 <usart_async_write+0x10>
    125a:	2000      	movs	r0, #0
    125c:	e7e2      	b.n	1224 <usart_async_write+0x10>
    125e:	2001      	movs	r0, #1
    1260:	e7e0      	b.n	1224 <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
    1262:	f06f 001b 	mvn.w	r0, #27
}
    1266:	bd70      	pop	{r4, r5, r6, pc}
    1268:	0000371c 	.word	0x0000371c
    126c:	000013b9 	.word	0x000013b9
    1270:	00002677 	.word	0x00002677

00001274 <usart_process_byte_sent>:
{
    1274:	b510      	push	{r4, lr}
    1276:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1278:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    127a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    127e:	4293      	cmp	r3, r2
    1280:	d009      	beq.n	1296 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1282:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1284:	1c59      	adds	r1, r3, #1
    1286:	8781      	strh	r1, [r0, #60]	; 0x3c
    1288:	5cd1      	ldrb	r1, [r2, r3]
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <usart_process_byte_sent+0x28>)
    128c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    128e:	4620      	mov	r0, r4
    1290:	4b03      	ldr	r3, [pc, #12]	; (12a0 <usart_process_byte_sent+0x2c>)
    1292:	4798      	blx	r3
    1294:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1296:	4b03      	ldr	r3, [pc, #12]	; (12a4 <usart_process_byte_sent+0x30>)
    1298:	4798      	blx	r3
    129a:	bd10      	pop	{r4, pc}
    129c:	00002671 	.word	0x00002671
    12a0:	00002677 	.word	0x00002677
    12a4:	0000267f 	.word	0x0000267f

000012a8 <usart_async_read>:
{
    12a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ac:	b082      	sub	sp, #8
    12ae:	4688      	mov	r8, r1
    12b0:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
    12b2:	4605      	mov	r5, r0
    12b4:	b1a0      	cbz	r0, 12e0 <usart_async_read+0x38>
    12b6:	b1a9      	cbz	r1, 12e4 <usart_async_read+0x3c>
    12b8:	b9b2      	cbnz	r2, 12e8 <usart_async_read+0x40>
    12ba:	2000      	movs	r0, #0
    12bc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    12c0:	4912      	ldr	r1, [pc, #72]	; (130c <usart_async_read+0x64>)
    12c2:	4b13      	ldr	r3, [pc, #76]	; (1310 <usart_async_read+0x68>)
    12c4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    12c6:	a801      	add	r0, sp, #4
    12c8:	4b12      	ldr	r3, [pc, #72]	; (1314 <usart_async_read+0x6c>)
    12ca:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    12cc:	3534      	adds	r5, #52	; 0x34
    12ce:	4628      	mov	r0, r5
    12d0:	4b11      	ldr	r3, [pc, #68]	; (1318 <usart_async_read+0x70>)
    12d2:	4798      	blx	r3
    12d4:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    12d6:	a801      	add	r0, sp, #4
    12d8:	4b10      	ldr	r3, [pc, #64]	; (131c <usart_async_read+0x74>)
    12da:	4798      	blx	r3
	uint16_t                       was_read = 0;
    12dc:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    12de:	e00b      	b.n	12f8 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
    12e0:	2000      	movs	r0, #0
    12e2:	e7eb      	b.n	12bc <usart_async_read+0x14>
    12e4:	2000      	movs	r0, #0
    12e6:	e7e9      	b.n	12bc <usart_async_read+0x14>
    12e8:	2001      	movs	r0, #1
    12ea:	e7e7      	b.n	12bc <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    12ec:	3401      	adds	r4, #1
    12ee:	b2a4      	uxth	r4, r4
    12f0:	4441      	add	r1, r8
    12f2:	4628      	mov	r0, r5
    12f4:	4b0a      	ldr	r3, [pc, #40]	; (1320 <usart_async_read+0x78>)
    12f6:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    12f8:	4621      	mov	r1, r4
    12fa:	42a7      	cmp	r7, r4
    12fc:	d901      	bls.n	1302 <usart_async_read+0x5a>
    12fe:	42b4      	cmp	r4, r6
    1300:	d3f4      	bcc.n	12ec <usart_async_read+0x44>
}
    1302:	4620      	mov	r0, r4
    1304:	b002      	add	sp, #8
    1306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    130a:	bf00      	nop
    130c:	0000371c 	.word	0x0000371c
    1310:	000013b9 	.word	0x000013b9
    1314:	00000d15 	.word	0x00000d15
    1318:	000014e5 	.word	0x000014e5
    131c:	00000d23 	.word	0x00000d23
    1320:	0000145d 	.word	0x0000145d

00001324 <usart_async_init>:
{
    1324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1326:	460d      	mov	r5, r1
    1328:	4616      	mov	r6, r2
    132a:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    132c:	4604      	mov	r4, r0
    132e:	b318      	cbz	r0, 1378 <usart_async_init+0x54>
    1330:	b321      	cbz	r1, 137c <usart_async_init+0x58>
    1332:	b32a      	cbz	r2, 1380 <usart_async_init+0x5c>
    1334:	bb33      	cbnz	r3, 1384 <usart_async_init+0x60>
    1336:	2000      	movs	r0, #0
    1338:	223a      	movs	r2, #58	; 0x3a
    133a:	4915      	ldr	r1, [pc, #84]	; (1390 <usart_async_init+0x6c>)
    133c:	4b15      	ldr	r3, [pc, #84]	; (1394 <usart_async_init+0x70>)
    133e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1340:	463a      	mov	r2, r7
    1342:	4631      	mov	r1, r6
    1344:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1348:	4b13      	ldr	r3, [pc, #76]	; (1398 <usart_async_init+0x74>)
    134a:	4798      	blx	r3
    134c:	b9e0      	cbnz	r0, 1388 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
    134e:	4629      	mov	r1, r5
    1350:	f104 0008 	add.w	r0, r4, #8
    1354:	4b11      	ldr	r3, [pc, #68]	; (139c <usart_async_init+0x78>)
    1356:	4798      	blx	r3
	if (init_status) {
    1358:	4603      	mov	r3, r0
    135a:	b958      	cbnz	r0, 1374 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    135c:	4a10      	ldr	r2, [pc, #64]	; (13a0 <usart_async_init+0x7c>)
    135e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1360:	4a10      	ldr	r2, [pc, #64]	; (13a4 <usart_async_init+0x80>)
    1362:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1364:	4a10      	ldr	r2, [pc, #64]	; (13a8 <usart_async_init+0x84>)
    1366:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1368:	4a10      	ldr	r2, [pc, #64]	; (13ac <usart_async_init+0x88>)
    136a:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    136c:	4a10      	ldr	r2, [pc, #64]	; (13b0 <usart_async_init+0x8c>)
    136e:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1370:	4a10      	ldr	r2, [pc, #64]	; (13b4 <usart_async_init+0x90>)
    1372:	6162      	str	r2, [r4, #20]
}
    1374:	4618      	mov	r0, r3
    1376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1378:	2000      	movs	r0, #0
    137a:	e7dd      	b.n	1338 <usart_async_init+0x14>
    137c:	2000      	movs	r0, #0
    137e:	e7db      	b.n	1338 <usart_async_init+0x14>
    1380:	2000      	movs	r0, #0
    1382:	e7d9      	b.n	1338 <usart_async_init+0x14>
    1384:	2001      	movs	r0, #1
    1386:	e7d7      	b.n	1338 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
    1388:	f06f 030c 	mvn.w	r3, #12
    138c:	e7f2      	b.n	1374 <usart_async_init+0x50>
    138e:	bf00      	nop
    1390:	0000371c 	.word	0x0000371c
    1394:	000013b9 	.word	0x000013b9
    1398:	00001419 	.word	0x00001419
    139c:	000025ed 	.word	0x000025ed
    13a0:	000012a9 	.word	0x000012a9
    13a4:	00001215 	.word	0x00001215
    13a8:	00001275 	.word	0x00001275
    13ac:	000011f9 	.word	0x000011f9
    13b0:	000011d1 	.word	0x000011d1
    13b4:	000011e5 	.word	0x000011e5

000013b8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    13b8:	b900      	cbnz	r0, 13bc <assert+0x4>
		__asm("BKPT #0");
    13ba:	be00      	bkpt	0x0000
    13bc:	4770      	bx	lr

000013be <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    13be:	6803      	ldr	r3, [r0, #0]
    13c0:	b11b      	cbz	r3, 13ca <is_list_element+0xc>
		if (it == element) {
    13c2:	428b      	cmp	r3, r1
    13c4:	d003      	beq.n	13ce <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	e7fa      	b.n	13c0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    13ca:	2000      	movs	r0, #0
    13cc:	4770      	bx	lr
			return true;
    13ce:	2001      	movs	r0, #1
}
    13d0:	4770      	bx	lr
	...

000013d4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    13d4:	b538      	push	{r3, r4, r5, lr}
    13d6:	4604      	mov	r4, r0
    13d8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    13da:	4b06      	ldr	r3, [pc, #24]	; (13f4 <list_insert_as_head+0x20>)
    13dc:	4798      	blx	r3
    13de:	f080 0001 	eor.w	r0, r0, #1
    13e2:	2239      	movs	r2, #57	; 0x39
    13e4:	4904      	ldr	r1, [pc, #16]	; (13f8 <list_insert_as_head+0x24>)
    13e6:	b2c0      	uxtb	r0, r0
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <list_insert_as_head+0x28>)
    13ea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    13ec:	6823      	ldr	r3, [r4, #0]
    13ee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    13f0:	6025      	str	r5, [r4, #0]
    13f2:	bd38      	pop	{r3, r4, r5, pc}
    13f4:	000013bf 	.word	0x000013bf
    13f8:	0000373c 	.word	0x0000373c
    13fc:	000013b9 	.word	0x000013b9

00001400 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1400:	6803      	ldr	r3, [r0, #0]
    1402:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1404:	6001      	str	r1, [r0, #0]
    1406:	4770      	bx	lr

00001408 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1408:	6803      	ldr	r3, [r0, #0]
    140a:	b11b      	cbz	r3, 1414 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    140c:	681a      	ldr	r2, [r3, #0]
    140e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    1410:	4618      	mov	r0, r3
    1412:	4770      	bx	lr
	}

	return NULL;
    1414:	2000      	movs	r0, #0
}
    1416:	4770      	bx	lr

00001418 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1418:	b570      	push	{r4, r5, r6, lr}
    141a:	460e      	mov	r6, r1
    141c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    141e:	4604      	mov	r4, r0
    1420:	b178      	cbz	r0, 1442 <ringbuffer_init+0x2a>
    1422:	b181      	cbz	r1, 1446 <ringbuffer_init+0x2e>
    1424:	b98a      	cbnz	r2, 144a <ringbuffer_init+0x32>
    1426:	2000      	movs	r0, #0
    1428:	2228      	movs	r2, #40	; 0x28
    142a:	490a      	ldr	r1, [pc, #40]	; (1454 <ringbuffer_init+0x3c>)
    142c:	4b0a      	ldr	r3, [pc, #40]	; (1458 <ringbuffer_init+0x40>)
    142e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1430:	1e6b      	subs	r3, r5, #1
    1432:	421d      	tst	r5, r3
    1434:	d10b      	bne.n	144e <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1436:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1438:	2000      	movs	r0, #0
    143a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    143c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    143e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1440:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1442:	2000      	movs	r0, #0
    1444:	e7f0      	b.n	1428 <ringbuffer_init+0x10>
    1446:	2000      	movs	r0, #0
    1448:	e7ee      	b.n	1428 <ringbuffer_init+0x10>
    144a:	2001      	movs	r0, #1
    144c:	e7ec      	b.n	1428 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    144e:	f06f 000c 	mvn.w	r0, #12
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
    1454:	0000375c 	.word	0x0000375c
    1458:	000013b9 	.word	0x000013b9

0000145c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    145c:	b538      	push	{r3, r4, r5, lr}
    145e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1460:	4604      	mov	r4, r0
    1462:	b1a8      	cbz	r0, 1490 <ringbuffer_get+0x34>
    1464:	b191      	cbz	r1, 148c <ringbuffer_get+0x30>
    1466:	2001      	movs	r0, #1
    1468:	2240      	movs	r2, #64	; 0x40
    146a:	490c      	ldr	r1, [pc, #48]	; (149c <ringbuffer_get+0x40>)
    146c:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <ringbuffer_get+0x44>)
    146e:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1470:	68e2      	ldr	r2, [r4, #12]
    1472:	68a3      	ldr	r3, [r4, #8]
    1474:	429a      	cmp	r2, r3
    1476:	d00d      	beq.n	1494 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    1478:	6822      	ldr	r2, [r4, #0]
    147a:	6861      	ldr	r1, [r4, #4]
    147c:	400b      	ands	r3, r1
    147e:	5cd3      	ldrb	r3, [r2, r3]
    1480:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1482:	68a3      	ldr	r3, [r4, #8]
    1484:	3301      	adds	r3, #1
    1486:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1488:	2000      	movs	r0, #0
    148a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    148c:	2000      	movs	r0, #0
    148e:	e7eb      	b.n	1468 <ringbuffer_get+0xc>
    1490:	2000      	movs	r0, #0
    1492:	e7e9      	b.n	1468 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    1494:	f06f 0009 	mvn.w	r0, #9
}
    1498:	bd38      	pop	{r3, r4, r5, pc}
    149a:	bf00      	nop
    149c:	0000375c 	.word	0x0000375c
    14a0:	000013b9 	.word	0x000013b9

000014a4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    14a4:	b538      	push	{r3, r4, r5, lr}
    14a6:	460d      	mov	r5, r1
	ASSERT(rb);
    14a8:	4604      	mov	r4, r0
    14aa:	2251      	movs	r2, #81	; 0x51
    14ac:	490b      	ldr	r1, [pc, #44]	; (14dc <ringbuffer_put+0x38>)
    14ae:	3000      	adds	r0, #0
    14b0:	bf18      	it	ne
    14b2:	2001      	movne	r0, #1
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <ringbuffer_put+0x3c>)
    14b6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    14b8:	6822      	ldr	r2, [r4, #0]
    14ba:	68e3      	ldr	r3, [r4, #12]
    14bc:	6861      	ldr	r1, [r4, #4]
    14be:	400b      	ands	r3, r1
    14c0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    14c2:	68e3      	ldr	r3, [r4, #12]
    14c4:	68a2      	ldr	r2, [r4, #8]
    14c6:	1a9a      	subs	r2, r3, r2
    14c8:	6861      	ldr	r1, [r4, #4]
    14ca:	428a      	cmp	r2, r1
    14cc:	d901      	bls.n	14d2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    14ce:	1a59      	subs	r1, r3, r1
    14d0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    14d2:	3301      	adds	r3, #1
    14d4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    14d6:	2000      	movs	r0, #0
    14d8:	bd38      	pop	{r3, r4, r5, pc}
    14da:	bf00      	nop
    14dc:	0000375c 	.word	0x0000375c
    14e0:	000013b9 	.word	0x000013b9

000014e4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    14e4:	b510      	push	{r4, lr}
	ASSERT(rb);
    14e6:	4604      	mov	r4, r0
    14e8:	2267      	movs	r2, #103	; 0x67
    14ea:	4905      	ldr	r1, [pc, #20]	; (1500 <ringbuffer_num+0x1c>)
    14ec:	3000      	adds	r0, #0
    14ee:	bf18      	it	ne
    14f0:	2001      	movne	r0, #1
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <ringbuffer_num+0x20>)
    14f4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    14f6:	68e0      	ldr	r0, [r4, #12]
    14f8:	68a3      	ldr	r3, [r4, #8]
}
    14fa:	1ac0      	subs	r0, r0, r3
    14fc:	bd10      	pop	{r4, pc}
    14fe:	bf00      	nop
    1500:	0000375c 	.word	0x0000375c
    1504:	000013b9 	.word	0x000013b9

00001508 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1508:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    150c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    1510:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1514:	4770      	bx	lr
	...

00001518 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1518:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    151a:	4b60      	ldr	r3, [pc, #384]	; (169c <_adc_init+0x184>)
    151c:	4298      	cmp	r0, r3
    151e:	f000 809c 	beq.w	165a <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    1522:	4b5f      	ldr	r3, [pc, #380]	; (16a0 <_adc_init+0x188>)
    1524:	4298      	cmp	r0, r3
    1526:	f000 80a8 	beq.w	167a <_adc_init+0x162>
	uint16_t calib_reg = 0;
    152a:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    152c:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    152e:	f013 0f01 	tst.w	r3, #1
    1532:	d11b      	bne.n	156c <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1534:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1536:	f013 0f03 	tst.w	r3, #3
    153a:	d1fb      	bne.n	1534 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    153c:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    153e:	f013 0f02 	tst.w	r3, #2
    1542:	d00d      	beq.n	1560 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1544:	8803      	ldrh	r3, [r0, #0]
    1546:	b29b      	uxth	r3, r3
    1548:	f023 0302 	bic.w	r3, r3, #2
    154c:	b29b      	uxth	r3, r3
    154e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1550:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1552:	f013 0f03 	tst.w	r3, #3
    1556:	d1fb      	bne.n	1550 <_adc_init+0x38>
    1558:	6b03      	ldr	r3, [r0, #48]	; 0x30
    155a:	f013 0f02 	tst.w	r3, #2
    155e:	d1fb      	bne.n	1558 <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1560:	2301      	movs	r3, #1
    1562:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1564:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1566:	f013 0f03 	tst.w	r3, #3
    156a:	d1fb      	bne.n	1564 <_adc_init+0x4c>
    156c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    156e:	f013 0f01 	tst.w	r3, #1
    1572:	d1fb      	bne.n	156c <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    1574:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1578:	2316      	movs	r3, #22
    157a:	4a4a      	ldr	r2, [pc, #296]	; (16a4 <_adc_init+0x18c>)
    157c:	fb03 2301 	mla	r3, r3, r1, r2
    1580:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    1582:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1584:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1586:	f3c3 030b 	ubfx	r3, r3, #0, #12
    158a:	2b00      	cmp	r3, #0
    158c:	d1fa      	bne.n	1584 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    158e:	2316      	movs	r3, #22
    1590:	4a44      	ldr	r2, [pc, #272]	; (16a4 <_adc_init+0x18c>)
    1592:	fb03 2301 	mla	r3, r3, r1, r2
    1596:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    1598:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    159a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    15a0:	2b00      	cmp	r3, #0
    15a2:	d1fa      	bne.n	159a <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    15a4:	2316      	movs	r3, #22
    15a6:	4a3f      	ldr	r2, [pc, #252]	; (16a4 <_adc_init+0x18c>)
    15a8:	fb03 2301 	mla	r3, r3, r1, r2
    15ac:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    15ae:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    15b0:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    15b2:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    15ba:	2b00      	cmp	r3, #0
    15bc:	d1fa      	bne.n	15b4 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    15be:	2316      	movs	r3, #22
    15c0:	4a38      	ldr	r2, [pc, #224]	; (16a4 <_adc_init+0x18c>)
    15c2:	fb03 2301 	mla	r3, r3, r1, r2
    15c6:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    15c8:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    15d0:	2b00      	cmp	r3, #0
    15d2:	d1fa      	bne.n	15ca <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    15d4:	2316      	movs	r3, #22
    15d6:	4a33      	ldr	r2, [pc, #204]	; (16a4 <_adc_init+0x18c>)
    15d8:	fb03 2301 	mla	r3, r3, r1, r2
    15dc:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    15de:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    15e6:	2b00      	cmp	r3, #0
    15e8:	d1fa      	bne.n	15e0 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    15ea:	2316      	movs	r3, #22
    15ec:	4a2d      	ldr	r2, [pc, #180]	; (16a4 <_adc_init+0x18c>)
    15ee:	fb03 2301 	mla	r3, r3, r1, r2
    15f2:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    15f4:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15f8:	f013 0f80 	tst.w	r3, #128	; 0x80
    15fc:	d1fb      	bne.n	15f6 <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    15fe:	2316      	movs	r3, #22
    1600:	4a28      	ldr	r2, [pc, #160]	; (16a4 <_adc_init+0x18c>)
    1602:	fb03 2301 	mla	r3, r3, r1, r2
    1606:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    1608:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    160a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    160c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1610:	d1fb      	bne.n	160a <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1612:	2316      	movs	r3, #22
    1614:	4a23      	ldr	r2, [pc, #140]	; (16a4 <_adc_init+0x18c>)
    1616:	fb03 2301 	mla	r3, r3, r1, r2
    161a:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    161c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    161e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1620:	f413 7f00 	tst.w	r3, #512	; 0x200
    1624:	d1fb      	bne.n	161e <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1626:	2316      	movs	r3, #22
    1628:	4a1e      	ldr	r2, [pc, #120]	; (16a4 <_adc_init+0x18c>)
    162a:	fb03 2301 	mla	r3, r3, r1, r2
    162e:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    1630:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1632:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1634:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1638:	d1fb      	bne.n	1632 <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    163a:	2216      	movs	r2, #22
    163c:	4b19      	ldr	r3, [pc, #100]	; (16a4 <_adc_init+0x18c>)
    163e:	fb02 3101 	mla	r1, r2, r1, r3
    1642:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1644:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1646:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1648:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    164a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    164c:	f013 0f03 	tst.w	r3, #3
    1650:	d1fb      	bne.n	164a <_adc_init+0x132>

	return ERR_NONE;
}
    1652:	2000      	movs	r0, #0
    1654:	f85d 4b04 	ldr.w	r4, [sp], #4
    1658:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    165a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    165e:	681b      	ldr	r3, [r3, #0]
    1660:	095a      	lsrs	r2, r3, #5
    1662:	0212      	lsls	r2, r2, #8
    1664:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    1668:	0a1c      	lsrs	r4, r3, #8
    166a:	0124      	lsls	r4, r4, #4
    166c:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1670:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    1672:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1676:	431a      	orrs	r2, r3
    1678:	e758      	b.n	152c <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    167a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	0cda      	lsrs	r2, r3, #19
    1682:	0212      	lsls	r2, r2, #8
    1684:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    1688:	0d9c      	lsrs	r4, r3, #22
    168a:	0124      	lsls	r4, r4, #4
    168c:	f004 0470 	and.w	r4, r4, #112	; 0x70
    1690:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    1692:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1696:	431a      	orrs	r2, r3
    1698:	e748      	b.n	152c <_adc_init+0x14>
    169a:	bf00      	nop
    169c:	43001c00 	.word	0x43001c00
    16a0:	43002000 	.word	0x43002000
    16a4:	00003780 	.word	0x00003780

000016a8 <_adc_get_regs>:
{
    16a8:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    16aa:	4b0b      	ldr	r3, [pc, #44]	; (16d8 <_adc_get_regs+0x30>)
    16ac:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    16ae:	2300      	movs	r3, #0
    16b0:	b13b      	cbz	r3, 16c2 <_adc_get_regs+0x1a>
	ASSERT(false);
    16b2:	2288      	movs	r2, #136	; 0x88
    16b4:	4909      	ldr	r1, [pc, #36]	; (16dc <_adc_get_regs+0x34>)
    16b6:	2000      	movs	r0, #0
    16b8:	4b09      	ldr	r3, [pc, #36]	; (16e0 <_adc_get_regs+0x38>)
    16ba:	4798      	blx	r3
	return 0;
    16bc:	2300      	movs	r3, #0
}
    16be:	4618      	mov	r0, r3
    16c0:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    16c2:	2216      	movs	r2, #22
    16c4:	fb02 f203 	mul.w	r2, r2, r3
    16c8:	4906      	ldr	r1, [pc, #24]	; (16e4 <_adc_get_regs+0x3c>)
    16ca:	5c8a      	ldrb	r2, [r1, r2]
    16cc:	4290      	cmp	r0, r2
    16ce:	d0f6      	beq.n	16be <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    16d0:	3301      	adds	r3, #1
    16d2:	b2db      	uxtb	r3, r3
    16d4:	e7ec      	b.n	16b0 <_adc_get_regs+0x8>
    16d6:	bf00      	nop
    16d8:	00001509 	.word	0x00001509
    16dc:	00003798 	.word	0x00003798
    16e0:	000013b9 	.word	0x000013b9
    16e4:	00003780 	.word	0x00003780

000016e8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    16e8:	b538      	push	{r3, r4, r5, lr}
    16ea:	460c      	mov	r4, r1
	ASSERT(device);
    16ec:	4605      	mov	r5, r0
    16ee:	22d9      	movs	r2, #217	; 0xd9
    16f0:	4907      	ldr	r1, [pc, #28]	; (1710 <_adc_sync_init+0x28>)
    16f2:	3000      	adds	r0, #0
    16f4:	bf18      	it	ne
    16f6:	2001      	movne	r0, #1
    16f8:	4b06      	ldr	r3, [pc, #24]	; (1714 <_adc_sync_init+0x2c>)
    16fa:	4798      	blx	r3

	device->hw = hw;
    16fc:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    16fe:	4620      	mov	r0, r4
    1700:	4b05      	ldr	r3, [pc, #20]	; (1718 <_adc_sync_init+0x30>)
    1702:	4798      	blx	r3
    1704:	4601      	mov	r1, r0
    1706:	4620      	mov	r0, r4
    1708:	4b04      	ldr	r3, [pc, #16]	; (171c <_adc_sync_init+0x34>)
    170a:	4798      	blx	r3
}
    170c:	bd38      	pop	{r3, r4, r5, pc}
    170e:	bf00      	nop
    1710:	00003798 	.word	0x00003798
    1714:	000013b9 	.word	0x000013b9
    1718:	000016a9 	.word	0x000016a9
    171c:	00001519 	.word	0x00001519

00001720 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1720:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1722:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    1724:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    1728:	2b03      	cmp	r3, #3
    172a:	d001      	beq.n	1730 <_adc_sync_get_data_size+0x10>
    172c:	2002      	movs	r0, #2
}
    172e:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1730:	2001      	movs	r0, #1
    1732:	4770      	bx	lr

00001734 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    1734:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1736:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    173a:	f000 0001 	and.w	r0, r0, #1
    173e:	4770      	bx	lr

00001740 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1740:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1742:	7d13      	ldrb	r3, [r2, #20]
    1744:	f043 0302 	orr.w	r3, r3, #2
    1748:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    174a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1750:	2b00      	cmp	r3, #0
    1752:	d1fa      	bne.n	174a <_adc_sync_convert+0xa>
}
    1754:	4770      	bx	lr

00001756 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    1756:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
    1758:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    175c:	b280      	uxth	r0, r0
    175e:	4770      	bx	lr

00001760 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1760:	0943      	lsrs	r3, r0, #5
    1762:	f000 001f 	and.w	r0, r0, #31
    1766:	2201      	movs	r2, #1
    1768:	fa02 f000 	lsl.w	r0, r2, r0
    176c:	3340      	adds	r3, #64	; 0x40
    176e:	4a02      	ldr	r2, [pc, #8]	; (1778 <_irq_set+0x18>)
    1770:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1774:	4770      	bx	lr
    1776:	bf00      	nop
    1778:	e000e100 	.word	0xe000e100

0000177c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    177c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    177e:	4a0d      	ldr	r2, [pc, #52]	; (17b4 <_init_chip+0x38>)
    1780:	8813      	ldrh	r3, [r2, #0]
    1782:	b29b      	uxth	r3, r3
    1784:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1786:	4b0c      	ldr	r3, [pc, #48]	; (17b8 <_init_chip+0x3c>)
    1788:	4798      	blx	r3
	_oscctrl_init_sources();
    178a:	4b0c      	ldr	r3, [pc, #48]	; (17bc <_init_chip+0x40>)
    178c:	4798      	blx	r3
	_mclk_init();
    178e:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <_init_chip+0x44>)
    1790:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1792:	200c      	movs	r0, #12
    1794:	4c0b      	ldr	r4, [pc, #44]	; (17c4 <_init_chip+0x48>)
    1796:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <_init_chip+0x4c>)
    179a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    179c:	f640 70f3 	movw	r0, #4083	; 0xff3
    17a0:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    17a2:	4a0a      	ldr	r2, [pc, #40]	; (17cc <_init_chip+0x50>)
    17a4:	6913      	ldr	r3, [r2, #16]
    17a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    17aa:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    17ac:	4b08      	ldr	r3, [pc, #32]	; (17d0 <_init_chip+0x54>)
    17ae:	4798      	blx	r3
    17b0:	bd10      	pop	{r4, pc}
    17b2:	bf00      	nop
    17b4:	41004000 	.word	0x41004000
    17b8:	00001c15 	.word	0x00001c15
    17bc:	00001c35 	.word	0x00001c35
    17c0:	00001c09 	.word	0x00001c09
    17c4:	00001b91 	.word	0x00001b91
    17c8:	00001c39 	.word	0x00001c39
    17cc:	40000800 	.word	0x40000800
    17d0:	0000183d 	.word	0x0000183d

000017d4 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    17d4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17d6:	4a17      	ldr	r2, [pc, #92]	; (1834 <_dmac_handler+0x60>)
    17d8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    17da:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    17de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    17e2:	0088      	lsls	r0, r1, #2
    17e4:	4914      	ldr	r1, [pc, #80]	; (1838 <_dmac_handler+0x64>)
    17e6:	4408      	add	r0, r1
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17e8:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    17ea:	f412 7f80 	tst.w	r2, #256	; 0x100
    17ee:	d105      	bne.n	17fc <_dmac_handler+0x28>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17f0:	4a10      	ldr	r2, [pc, #64]	; (1834 <_dmac_handler+0x60>)
    17f2:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    17f4:	f412 7f00 	tst.w	r2, #512	; 0x200
    17f8:	d10b      	bne.n	1812 <_dmac_handler+0x3e>
    17fa:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    17fc:	011a      	lsls	r2, r3, #4
    17fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1802:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1806:	2101      	movs	r1, #1
    1808:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    180c:	6843      	ldr	r3, [r0, #4]
    180e:	4798      	blx	r3
    1810:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1812:	011a      	lsls	r2, r3, #4
    1814:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1818:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    181c:	2102      	movs	r1, #2
    181e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1826:	fa03 f201 	lsl.w	r2, r3, r1
    182a:	4b03      	ldr	r3, [pc, #12]	; (1838 <_dmac_handler+0x64>)
    182c:	589b      	ldr	r3, [r3, r2]
    182e:	4798      	blx	r3
	}
}
    1830:	e7e3      	b.n	17fa <_dmac_handler+0x26>
    1832:	bf00      	nop
    1834:	4100a000 	.word	0x4100a000
    1838:	20000090 	.word	0x20000090

0000183c <_dma_init>:
{
    183c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    183e:	4a3c      	ldr	r2, [pc, #240]	; (1930 <_dma_init+0xf4>)
    1840:	8813      	ldrh	r3, [r2, #0]
    1842:	b29b      	uxth	r3, r3
    1844:	f023 0302 	bic.w	r3, r3, #2
    1848:	b29b      	uxth	r3, r3
    184a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    184c:	8853      	ldrh	r3, [r2, #2]
    184e:	b29b      	uxth	r3, r3
    1850:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1854:	b29b      	uxth	r3, r3
    1856:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1858:	8813      	ldrh	r3, [r2, #0]
    185a:	b29b      	uxth	r3, r3
    185c:	f043 0301 	orr.w	r3, r3, #1
    1860:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1862:	4b33      	ldr	r3, [pc, #204]	; (1930 <_dma_init+0xf4>)
    1864:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1866:	f013 0f01 	tst.w	r3, #1
    186a:	d1fa      	bne.n	1862 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    186c:	4a30      	ldr	r2, [pc, #192]	; (1930 <_dma_init+0xf4>)
    186e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    1872:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1874:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1876:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    187a:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    187c:	2300      	movs	r3, #0
    187e:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1880:	492c      	ldr	r1, [pc, #176]	; (1934 <_dma_init+0xf8>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1882:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1884:	492c      	ldr	r1, [pc, #176]	; (1938 <_dma_init+0xfc>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1886:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1888:	e016      	b.n	18b8 <_dma_init+0x7c>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    188a:	4a2c      	ldr	r2, [pc, #176]	; (193c <_dma_init+0x100>)
    188c:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1890:	4c27      	ldr	r4, [pc, #156]	; (1930 <_dma_init+0xf4>)
    1892:	1d19      	adds	r1, r3, #4
    1894:	0109      	lsls	r1, r1, #4
    1896:	1860      	adds	r0, r4, r1
    1898:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    189a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    189e:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    18a0:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    18a2:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    18a4:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    18a6:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    18a8:	4922      	ldr	r1, [pc, #136]	; (1934 <_dma_init+0xf8>)
    18aa:	011a      	lsls	r2, r3, #4
    18ac:	1888      	adds	r0, r1, r2
    18ae:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    18b0:	2200      	movs	r2, #0
    18b2:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    18b4:	3301      	adds	r3, #1
    18b6:	b2db      	uxtb	r3, r3
    18b8:	2b1f      	cmp	r3, #31
    18ba:	d9e6      	bls.n	188a <_dma_init+0x4e>
    18bc:	2300      	movs	r3, #0
    18be:	e00a      	b.n	18d6 <_dma_init+0x9a>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    18c0:	f103 011f 	add.w	r1, r3, #31
    18c4:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    18c6:	2a00      	cmp	r2, #0
    18c8:	da10      	bge.n	18ec <_dma_init+0xb0>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    18ca:	2a00      	cmp	r2, #0
    18cc:	da1c      	bge.n	1908 <_dma_init+0xcc>
  if ((int32_t)(IRQn) >= 0)
    18ce:	2a00      	cmp	r2, #0
    18d0:	da24      	bge.n	191c <_dma_init+0xe0>
	for (i = 0; i < 5; i++) {
    18d2:	3301      	adds	r3, #1
    18d4:	b2db      	uxtb	r3, r3
    18d6:	2b04      	cmp	r3, #4
    18d8:	d9f2      	bls.n	18c0 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    18da:	4a15      	ldr	r2, [pc, #84]	; (1930 <_dma_init+0xf4>)
    18dc:	8813      	ldrh	r3, [r2, #0]
    18de:	b29b      	uxth	r3, r3
    18e0:	f043 0302 	orr.w	r3, r3, #2
    18e4:	8013      	strh	r3, [r2, #0]
}
    18e6:	2000      	movs	r0, #0
    18e8:	bc30      	pop	{r4, r5}
    18ea:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ec:	0950      	lsrs	r0, r2, #5
    18ee:	f001 051f 	and.w	r5, r1, #31
    18f2:	2401      	movs	r4, #1
    18f4:	40ac      	lsls	r4, r5
    18f6:	3020      	adds	r0, #32
    18f8:	4d11      	ldr	r5, [pc, #68]	; (1940 <_dma_init+0x104>)
    18fa:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    18fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1902:	f3bf 8f6f 	isb	sy
    1906:	e7e0      	b.n	18ca <_dma_init+0x8e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1908:	0950      	lsrs	r0, r2, #5
    190a:	f001 051f 	and.w	r5, r1, #31
    190e:	2401      	movs	r4, #1
    1910:	40ac      	lsls	r4, r5
    1912:	3060      	adds	r0, #96	; 0x60
    1914:	4d0a      	ldr	r5, [pc, #40]	; (1940 <_dma_init+0x104>)
    1916:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    191a:	e7d8      	b.n	18ce <_dma_init+0x92>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    191c:	0952      	lsrs	r2, r2, #5
    191e:	f001 011f 	and.w	r1, r1, #31
    1922:	2001      	movs	r0, #1
    1924:	fa00 f101 	lsl.w	r1, r0, r1
    1928:	4805      	ldr	r0, [pc, #20]	; (1940 <_dma_init+0x104>)
    192a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    192e:	e7d0      	b.n	18d2 <_dma_init+0x96>
    1930:	4100a000 	.word	0x4100a000
    1934:	20000760 	.word	0x20000760
    1938:	20000960 	.word	0x20000960
    193c:	000037b0 	.word	0x000037b0
    1940:	e000e100 	.word	0xe000e100

00001944 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1944:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1948:	008a      	lsls	r2, r1, #2
    194a:	4b02      	ldr	r3, [pc, #8]	; (1954 <_dma_get_channel_resource+0x10>)
    194c:	4413      	add	r3, r2
    194e:	6003      	str	r3, [r0, #0]
}
    1950:	2000      	movs	r0, #0
    1952:	4770      	bx	lr
    1954:	20000090 	.word	0x20000090

00001958 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    1958:	b508      	push	{r3, lr}
	_dmac_handler();
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <DMAC_0_Handler+0x8>)
    195c:	4798      	blx	r3
    195e:	bd08      	pop	{r3, pc}
    1960:	000017d5 	.word	0x000017d5

00001964 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1964:	b508      	push	{r3, lr}
	_dmac_handler();
    1966:	4b01      	ldr	r3, [pc, #4]	; (196c <DMAC_1_Handler+0x8>)
    1968:	4798      	blx	r3
    196a:	bd08      	pop	{r3, pc}
    196c:	000017d5 	.word	0x000017d5

00001970 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    1970:	b508      	push	{r3, lr}
	_dmac_handler();
    1972:	4b01      	ldr	r3, [pc, #4]	; (1978 <DMAC_2_Handler+0x8>)
    1974:	4798      	blx	r3
    1976:	bd08      	pop	{r3, pc}
    1978:	000017d5 	.word	0x000017d5

0000197c <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    197c:	b508      	push	{r3, lr}
	_dmac_handler();
    197e:	4b01      	ldr	r3, [pc, #4]	; (1984 <DMAC_3_Handler+0x8>)
    1980:	4798      	blx	r3
    1982:	bd08      	pop	{r3, pc}
    1984:	000017d5 	.word	0x000017d5

00001988 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1988:	b508      	push	{r3, lr}
	_dmac_handler();
    198a:	4b01      	ldr	r3, [pc, #4]	; (1990 <DMAC_4_Handler+0x8>)
    198c:	4798      	blx	r3
    198e:	bd08      	pop	{r3, pc}
    1990:	000017d5 	.word	0x000017d5

00001994 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    1998:	4b2a      	ldr	r3, [pc, #168]	; (1a44 <_ext_irq_handler+0xb0>)
    199a:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    199c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    199e:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    19a0:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    19a2:	4b29      	ldr	r3, [pc, #164]	; (1a48 <_ext_irq_handler+0xb4>)
    19a4:	6818      	ldr	r0, [r3, #0]
    19a6:	22f4      	movs	r2, #244	; 0xf4
    19a8:	4928      	ldr	r1, [pc, #160]	; (1a4c <_ext_irq_handler+0xb8>)
    19aa:	3000      	adds	r0, #0
    19ac:	bf18      	it	ne
    19ae:	2001      	movne	r0, #1
    19b0:	4b27      	ldr	r3, [pc, #156]	; (1a50 <_ext_irq_handler+0xbc>)
    19b2:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    19b4:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    19b8:	e035      	b.n	1a26 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    19ba:	4b26      	ldr	r3, [pc, #152]	; (1a54 <_ext_irq_handler+0xc0>)
    19bc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    19c0:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    19c2:	f1b5 3fff 	cmp.w	r5, #4294967295
    19c6:	d003      	beq.n	19d0 <_ext_irq_handler+0x3c>
				callback(pin);
    19c8:	4b1f      	ldr	r3, [pc, #124]	; (1a48 <_ext_irq_handler+0xb4>)
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	4628      	mov	r0, r5
    19ce:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    19d0:	2301      	movs	r3, #1
    19d2:	40a3      	lsls	r3, r4
    19d4:	9c01      	ldr	r4, [sp, #4]
    19d6:	ea24 0403 	bic.w	r4, r4, r3
    19da:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    19dc:	9b01      	ldr	r3, [sp, #4]
    19de:	fa93 f4a3 	rbit	r4, r3
    19e2:	fab4 f484 	clz	r4, r4
    19e6:	b90b      	cbnz	r3, 19ec <_ext_irq_handler+0x58>
    19e8:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    19ec:	f1b4 3fff 	cmp.w	r4, #4294967295
    19f0:	d014      	beq.n	1a1c <_ext_irq_handler+0x88>
    19f2:	2004      	movs	r0, #4
    19f4:	2100      	movs	r1, #0
    19f6:	e001      	b.n	19fc <_ext_irq_handler+0x68>
					upper = middle - 1;
    19f8:	3b01      	subs	r3, #1
    19fa:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    19fc:	4281      	cmp	r1, r0
    19fe:	d8e0      	bhi.n	19c2 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1a00:	1843      	adds	r3, r0, r1
    1a02:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1a06:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1a08:	4a12      	ldr	r2, [pc, #72]	; (1a54 <_ext_irq_handler+0xc0>)
    1a0a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1a0e:	42a2      	cmp	r2, r4
    1a10:	d0d3      	beq.n	19ba <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1a12:	42a2      	cmp	r2, r4
    1a14:	daf0      	bge.n	19f8 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1a16:	3301      	adds	r3, #1
    1a18:	b2d9      	uxtb	r1, r3
    1a1a:	e7ef      	b.n	19fc <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1a1c:	4b09      	ldr	r3, [pc, #36]	; (1a44 <_ext_irq_handler+0xb0>)
    1a1e:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1a20:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1a22:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1a24:	615a      	str	r2, [r3, #20]
	while (flags) {
    1a26:	9b01      	ldr	r3, [sp, #4]
    1a28:	b14b      	cbz	r3, 1a3e <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1a2a:	9b01      	ldr	r3, [sp, #4]
    1a2c:	fa93 f4a3 	rbit	r4, r3
    1a30:	fab4 f484 	clz	r4, r4
    1a34:	2b00      	cmp	r3, #0
    1a36:	d1d9      	bne.n	19ec <_ext_irq_handler+0x58>
    1a38:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1a3c:	e7d6      	b.n	19ec <_ext_irq_handler+0x58>
	}
}
    1a3e:	b002      	add	sp, #8
    1a40:	bd70      	pop	{r4, r5, r6, pc}
    1a42:	bf00      	nop
    1a44:	40002800 	.word	0x40002800
    1a48:	20000210 	.word	0x20000210
    1a4c:	000038d0 	.word	0x000038d0
    1a50:	000013b9 	.word	0x000013b9
    1a54:	000038b0 	.word	0x000038b0

00001a58 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1a58:	4b3d      	ldr	r3, [pc, #244]	; (1b50 <_ext_irq_init+0xf8>)
    1a5a:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1a5c:	f013 0f01 	tst.w	r3, #1
    1a60:	d120      	bne.n	1aa4 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a62:	4b3b      	ldr	r3, [pc, #236]	; (1b50 <_ext_irq_init+0xf8>)
    1a64:	685b      	ldr	r3, [r3, #4]
    1a66:	f013 0f03 	tst.w	r3, #3
    1a6a:	d1fa      	bne.n	1a62 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1a6c:	4b38      	ldr	r3, [pc, #224]	; (1b50 <_ext_irq_init+0xf8>)
    1a6e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1a70:	f013 0f02 	tst.w	r3, #2
    1a74:	d00e      	beq.n	1a94 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    1a76:	4a36      	ldr	r2, [pc, #216]	; (1b50 <_ext_irq_init+0xf8>)
    1a78:	7813      	ldrb	r3, [r2, #0]
    1a7a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1a7e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a80:	4b33      	ldr	r3, [pc, #204]	; (1b50 <_ext_irq_init+0xf8>)
    1a82:	685b      	ldr	r3, [r3, #4]
    1a84:	f013 0f03 	tst.w	r3, #3
    1a88:	d1fa      	bne.n	1a80 <_ext_irq_init+0x28>
    1a8a:	4b31      	ldr	r3, [pc, #196]	; (1b50 <_ext_irq_init+0xf8>)
    1a8c:	685b      	ldr	r3, [r3, #4]
    1a8e:	f013 0f02 	tst.w	r3, #2
    1a92:	d1fa      	bne.n	1a8a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1a94:	2201      	movs	r2, #1
    1a96:	4b2e      	ldr	r3, [pc, #184]	; (1b50 <_ext_irq_init+0xf8>)
    1a98:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a9a:	4b2d      	ldr	r3, [pc, #180]	; (1b50 <_ext_irq_init+0xf8>)
    1a9c:	685b      	ldr	r3, [r3, #4]
    1a9e:	f013 0f03 	tst.w	r3, #3
    1aa2:	d1fa      	bne.n	1a9a <_ext_irq_init+0x42>
    1aa4:	4b2a      	ldr	r3, [pc, #168]	; (1b50 <_ext_irq_init+0xf8>)
    1aa6:	685b      	ldr	r3, [r3, #4]
    1aa8:	f013 0f01 	tst.w	r3, #1
    1aac:	d1fa      	bne.n	1aa4 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1aae:	4a28      	ldr	r2, [pc, #160]	; (1b50 <_ext_irq_init+0xf8>)
    1ab0:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1ab2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    1ab6:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ab8:	4b25      	ldr	r3, [pc, #148]	; (1b50 <_ext_irq_init+0xf8>)
    1aba:	685b      	ldr	r3, [r3, #4]
    1abc:	f013 0f03 	tst.w	r3, #3
    1ac0:	d1fa      	bne.n	1ab8 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1ac2:	4b23      	ldr	r3, [pc, #140]	; (1b50 <_ext_irq_init+0xf8>)
    1ac4:	2200      	movs	r2, #0
    1ac6:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1ac8:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1aca:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1acc:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1ace:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1ad0:	f04f 423b 	mov.w	r2, #3137339392	; 0xbb000000
    1ad4:	61da      	str	r2, [r3, #28]
    1ad6:	4a1f      	ldr	r2, [pc, #124]	; (1b54 <_ext_irq_init+0xfc>)
    1ad8:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1ada:	781a      	ldrb	r2, [r3, #0]
    1adc:	f042 0202 	orr.w	r2, r2, #2
    1ae0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ae2:	4b1b      	ldr	r3, [pc, #108]	; (1b50 <_ext_irq_init+0xf8>)
    1ae4:	685b      	ldr	r3, [r3, #4]
    1ae6:	f013 0f03 	tst.w	r3, #3
    1aea:	d1fa      	bne.n	1ae2 <_ext_irq_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1aec:	4b1a      	ldr	r3, [pc, #104]	; (1b58 <_ext_irq_init+0x100>)
    1aee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b02:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b10:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b18:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    1b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b26:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b2e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b44:	601a      	str	r2, [r3, #0]
	callback = cb;
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <_ext_irq_init+0x104>)
    1b48:	6018      	str	r0, [r3, #0]
}
    1b4a:	2000      	movs	r0, #0
    1b4c:	4770      	bx	lr
    1b4e:	bf00      	nop
    1b50:	40002800 	.word	0x40002800
    1b54:	0a0000b0 	.word	0x0a0000b0
    1b58:	e000e100 	.word	0xe000e100
    1b5c:	20000210 	.word	0x20000210

00001b60 <EIC_6_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_6_Handler(void)
{
    1b60:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b62:	4b01      	ldr	r3, [pc, #4]	; (1b68 <EIC_6_Handler+0x8>)
    1b64:	4798      	blx	r3
    1b66:	bd08      	pop	{r3, pc}
    1b68:	00001995 	.word	0x00001995

00001b6c <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    1b6c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b6e:	4b01      	ldr	r3, [pc, #4]	; (1b74 <EIC_7_Handler+0x8>)
    1b70:	4798      	blx	r3
    1b72:	bd08      	pop	{r3, pc}
    1b74:	00001995 	.word	0x00001995

00001b78 <EIC_9_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    1b78:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b7a:	4b01      	ldr	r3, [pc, #4]	; (1b80 <EIC_9_Handler+0x8>)
    1b7c:	4798      	blx	r3
    1b7e:	bd08      	pop	{r3, pc}
    1b80:	00001995 	.word	0x00001995

00001b84 <EIC_14_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_14_Handler(void)
{
    1b84:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1b86:	4b01      	ldr	r3, [pc, #4]	; (1b8c <EIC_14_Handler+0x8>)
    1b88:	4798      	blx	r3
    1b8a:	bd08      	pop	{r3, pc}
    1b8c:	00001995 	.word	0x00001995

00001b90 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1b90:	f010 0f01 	tst.w	r0, #1
    1b94:	d008      	beq.n	1ba8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b96:	4a17      	ldr	r2, [pc, #92]	; (1bf4 <_gclk_init_generators_by_fref+0x64>)
    1b98:	4b17      	ldr	r3, [pc, #92]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1b9a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1b9c:	4b16      	ldr	r3, [pc, #88]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1b9e:	685a      	ldr	r2, [r3, #4]
    1ba0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1ba4:	421a      	tst	r2, r3
    1ba6:	d1f9      	bne.n	1b9c <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1ba8:	f010 0f02 	tst.w	r0, #2
    1bac:	d008      	beq.n	1bc0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bae:	4a13      	ldr	r2, [pc, #76]	; (1bfc <_gclk_init_generators_by_fref+0x6c>)
    1bb0:	4b11      	ldr	r3, [pc, #68]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1bb2:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bb4:	4b10      	ldr	r3, [pc, #64]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1bb6:	685a      	ldr	r2, [r3, #4]
    1bb8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1bbc:	421a      	tst	r2, r3
    1bbe:	d1f9      	bne.n	1bb4 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1bc0:	f010 0f04 	tst.w	r0, #4
    1bc4:	d008      	beq.n	1bd8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bc6:	4a0e      	ldr	r2, [pc, #56]	; (1c00 <_gclk_init_generators_by_fref+0x70>)
    1bc8:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1bca:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1bcc:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1bce:	685a      	ldr	r2, [r3, #4]
    1bd0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1bd4:	421a      	tst	r2, r3
    1bd6:	d1f9      	bne.n	1bcc <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1bd8:	f010 0f08 	tst.w	r0, #8
    1bdc:	d008      	beq.n	1bf0 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1bde:	4a09      	ldr	r2, [pc, #36]	; (1c04 <_gclk_init_generators_by_fref+0x74>)
    1be0:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1be2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1be4:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <_gclk_init_generators_by_fref+0x68>)
    1be6:	685a      	ldr	r2, [r3, #4]
    1be8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1bec:	421a      	tst	r2, r3
    1bee:	d1f9      	bne.n	1be4 <_gclk_init_generators_by_fref+0x54>
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	00020107 	.word	0x00020107
    1bf8:	40001c00 	.word	0x40001c00
    1bfc:	000a0907 	.word	0x000a0907
    1c00:	00010105 	.word	0x00010105
    1c04:	00100106 	.word	0x00100106

00001c08 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c08:	2201      	movs	r2, #1
    1c0a:	4b01      	ldr	r3, [pc, #4]	; (1c10 <_mclk_init+0x8>)
    1c0c:	715a      	strb	r2, [r3, #5]
    1c0e:	4770      	bx	lr
    1c10:	40000800 	.word	0x40000800

00001c14 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c14:	4b06      	ldr	r3, [pc, #24]	; (1c30 <_osc32kctrl_init_sources+0x1c>)
    1c16:	f242 228e 	movw	r2, #8846	; 0x228e
    1c1a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c1c:	2200      	movs	r2, #0
    1c1e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c20:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c22:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1c24:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1c28:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1c2a:	2201      	movs	r2, #1
    1c2c:	741a      	strb	r2, [r3, #16]
    1c2e:	4770      	bx	lr
    1c30:	40001400 	.word	0x40001400

00001c34 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1c34:	4770      	bx	lr
	...

00001c38 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c38:	4a49      	ldr	r2, [pc, #292]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1c3a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c3c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c40:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c44:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c46:	4b46      	ldr	r3, [pc, #280]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1c48:	685a      	ldr	r2, [r3, #4]
    1c4a:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1c4e:	421a      	tst	r2, r3
    1c50:	d1f9      	bne.n	1c46 <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1c52:	4b43      	ldr	r3, [pc, #268]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1c54:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1c56:	f013 0f04 	tst.w	r3, #4
    1c5a:	d1fa      	bne.n	1c52 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c5c:	4b41      	ldr	r3, [pc, #260]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c5e:	2200      	movs	r2, #0
    1c60:	771a      	strb	r2, [r3, #28]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1c62:	2142      	movs	r1, #66	; 0x42
    1c64:	4a3e      	ldr	r2, [pc, #248]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1c66:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1c6a:	4a3f      	ldr	r2, [pc, #252]	; (1d68 <_oscctrl_init_referenced_generators+0x130>)
    1c6c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c6e:	4b3d      	ldr	r3, [pc, #244]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1c74:	f013 0f10 	tst.w	r3, #16
    1c78:	d1f9      	bne.n	1c6e <_oscctrl_init_referenced_generators+0x36>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c7a:	2200      	movs	r2, #0
    1c7c:	4b39      	ldr	r3, [pc, #228]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c7e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c82:	4b38      	ldr	r3, [pc, #224]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c88:	f013 0f04 	tst.w	r3, #4
    1c8c:	d1f9      	bne.n	1c82 <_oscctrl_init_referenced_generators+0x4a>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c8e:	2202      	movs	r2, #2
    1c90:	4b34      	ldr	r3, [pc, #208]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c92:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c94:	4b33      	ldr	r3, [pc, #204]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1c9a:	f013 0f02 	tst.w	r3, #2
    1c9e:	d1f9      	bne.n	1c94 <_oscctrl_init_referenced_generators+0x5c>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1ca0:	4b30      	ldr	r3, [pc, #192]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1ca4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1ca6:	4b2f      	ldr	r3, [pc, #188]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1ca8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1cac:	f013 0f08 	tst.w	r3, #8
    1cb0:	d1f9      	bne.n	1ca6 <_oscctrl_init_referenced_generators+0x6e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1cb2:	2281      	movs	r2, #129	; 0x81
    1cb4:	4b2b      	ldr	r3, [pc, #172]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1cb6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cba:	4b2a      	ldr	r3, [pc, #168]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1cc0:	f013 0f04 	tst.w	r3, #4
    1cc4:	d1f9      	bne.n	1cba <_oscctrl_init_referenced_generators+0x82>
    1cc6:	2243      	movs	r2, #67	; 0x43
    1cc8:	4b25      	ldr	r3, [pc, #148]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1cce:	2227      	movs	r2, #39	; 0x27
    1cd0:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1cd4:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cd6:	4b23      	ldr	r3, [pc, #140]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1cda:	f013 0f06 	tst.w	r3, #6
    1cde:	d1fa      	bne.n	1cd6 <_oscctrl_init_referenced_generators+0x9e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1ce0:	4b20      	ldr	r3, [pc, #128]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1ce2:	2200      	movs	r2, #0
    1ce4:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1ce6:	2202      	movs	r2, #2
    1ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cec:	4b1d      	ldr	r3, [pc, #116]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1cf0:	f013 0f02 	tst.w	r3, #2
    1cf4:	d1fa      	bne.n	1cec <_oscctrl_init_referenced_generators+0xb4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1cf6:	4b1b      	ldr	r3, [pc, #108]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1cfc:	f013 0f01 	tst.w	r3, #1
    1d00:	d027      	beq.n	1d52 <_oscctrl_init_referenced_generators+0x11a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d02:	4b18      	ldr	r3, [pc, #96]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1d04:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
    1d06:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d0a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d0e:	d1f8      	bne.n	1d02 <_oscctrl_init_referenced_generators+0xca>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1d10:	4b14      	ldr	r3, [pc, #80]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1d14:	f013 0f01 	tst.w	r3, #1
    1d18:	d104      	bne.n	1d24 <_oscctrl_init_referenced_generators+0xec>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1d1a:	4b12      	ldr	r3, [pc, #72]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d1e:	f013 0f02 	tst.w	r3, #2
    1d22:	d0f5      	beq.n	1d10 <_oscctrl_init_referenced_generators+0xd8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d24:	4b0e      	ldr	r3, [pc, #56]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1d26:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d1fb      	bne.n	1d24 <_oscctrl_init_referenced_generators+0xec>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d2c:	4a0c      	ldr	r2, [pc, #48]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1d2e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d30:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d34:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d38:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1d3a:	4b09      	ldr	r3, [pc, #36]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1d3c:	685a      	ldr	r2, [r3, #4]
    1d3e:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1d42:	421a      	tst	r2, r3
    1d44:	d1f9      	bne.n	1d3a <_oscctrl_init_referenced_generators+0x102>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1d46:	4b06      	ldr	r3, [pc, #24]	; (1d60 <_oscctrl_init_referenced_generators+0x128>)
    1d48:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1d4a:	f013 0f04 	tst.w	r3, #4
    1d4e:	d1fa      	bne.n	1d46 <_oscctrl_init_referenced_generators+0x10e>
		;
#endif
	(void)hw;
}
    1d50:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d52:	4b04      	ldr	r3, [pc, #16]	; (1d64 <_oscctrl_init_referenced_generators+0x12c>)
    1d54:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d56:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d5a:	d0fa      	beq.n	1d52 <_oscctrl_init_referenced_generators+0x11a>
    1d5c:	e7d8      	b.n	1d10 <_oscctrl_init_referenced_generators+0xd8>
    1d5e:	bf00      	nop
    1d60:	40001c00 	.word	0x40001c00
    1d64:	40001000 	.word	0x40001000
    1d68:	7c7f05b9 	.word	0x7c7f05b9

00001d6c <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1d6c:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1d6e:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1d70:	6803      	ldr	r3, [r0, #0]
    1d72:	2100      	movs	r1, #0
    1d74:	4798      	blx	r3
    1d76:	bd08      	pop	{r3, pc}

00001d78 <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    1d78:	b538      	push	{r3, r4, r5, lr}
    1d7a:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1d7c:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1d7e:	4b07      	ldr	r3, [pc, #28]	; (1d9c <_camera_async_init+0x24>)
    1d80:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    1d82:	4b07      	ldr	r3, [pc, #28]	; (1da0 <_camera_async_init+0x28>)
    1d84:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    1d86:	4d07      	ldr	r5, [pc, #28]	; (1da4 <_camera_async_init+0x2c>)
    1d88:	2100      	movs	r1, #0
    1d8a:	4628      	mov	r0, r5
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <_camera_async_init+0x30>)
    1d8e:	4798      	blx	r3
	resource->back                 = device;
    1d90:	682b      	ldr	r3, [r5, #0]
    1d92:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    1d94:	4a05      	ldr	r2, [pc, #20]	; (1dac <_camera_async_init+0x34>)
    1d96:	601a      	str	r2, [r3, #0]
    1d98:	bd38      	pop	{r3, r4, r5, pc}
    1d9a:	bf00      	nop
    1d9c:	c0000020 	.word	0xc0000020
    1da0:	20000214 	.word	0x20000214
    1da4:	20000b60 	.word	0x20000b60
    1da8:	00001945 	.word	0x00001945
    1dac:	00001d6d 	.word	0x00001d6d

00001db0 <PCC_Handler>:
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void PCC_Handler(void)
{
    1db0:	b500      	push	{lr}
    1db2:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    1db4:	4b08      	ldr	r3, [pc, #32]	; (1dd8 <PCC_Handler+0x28>)
    1db6:	6818      	ldr	r0, [r3, #0]
    1db8:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1dba:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1dbc:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    1dbe:	2201      	movs	r2, #1
    1dc0:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    1dc2:	9b01      	ldr	r3, [sp, #4]
    1dc4:	f013 0f01 	tst.w	r3, #1
    1dc8:	d003      	beq.n	1dd2 <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1dca:	6803      	ldr	r3, [r0, #0]
    1dcc:	b10b      	cbz	r3, 1dd2 <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    1dce:	2100      	movs	r1, #0
    1dd0:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    1dd2:	b003      	add	sp, #12
    1dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    1dd8:	20000214 	.word	0x20000214

00001ddc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1ddc:	b500      	push	{lr}
    1dde:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1de0:	4b0d      	ldr	r3, [pc, #52]	; (1e18 <RAMECC_Handler+0x3c>)
    1de2:	789b      	ldrb	r3, [r3, #2]
    1de4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1de6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	f013 0f02 	tst.w	r3, #2
    1dee:	d006      	beq.n	1dfe <RAMECC_Handler+0x22>
    1df0:	4b0a      	ldr	r3, [pc, #40]	; (1e1c <RAMECC_Handler+0x40>)
    1df2:	681b      	ldr	r3, [r3, #0]
    1df4:	b11b      	cbz	r3, 1dfe <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1df6:	4a08      	ldr	r2, [pc, #32]	; (1e18 <RAMECC_Handler+0x3c>)
    1df8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1dfa:	4798      	blx	r3
    1dfc:	e009      	b.n	1e12 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1dfe:	9b01      	ldr	r3, [sp, #4]
    1e00:	f013 0f01 	tst.w	r3, #1
    1e04:	d005      	beq.n	1e12 <RAMECC_Handler+0x36>
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <RAMECC_Handler+0x40>)
    1e08:	685b      	ldr	r3, [r3, #4]
    1e0a:	b113      	cbz	r3, 1e12 <RAMECC_Handler+0x36>
    1e0c:	4a02      	ldr	r2, [pc, #8]	; (1e18 <RAMECC_Handler+0x3c>)
    1e0e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1e10:	4798      	blx	r3
	} else {
		return;
	}
}
    1e12:	b003      	add	sp, #12
    1e14:	f85d fb04 	ldr.w	pc, [sp], #4
    1e18:	41020000 	.word	0x41020000
    1e1c:	20000b64 	.word	0x20000b64

00001e20 <_mci_set_speed>:
 * \param hw       The pointer to MCI hardware instance
 * \param speed    SDHC clock speed in Hz.
 * \param prog_clock_mode     Use programmable clock mode
 */
static void _mci_set_speed(const void *const hw, uint32_t speed, uint8_t prog_clock_mode)
{
    1e20:	b410      	push	{r4}
}

static inline bool hri_sdhc_get_CCR_SDCLKEN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e22:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	uint32_t div;
	uint32_t clkbase;
	uint32_t clkmul;

	if (hri_sdhc_get_CCR_SDCLKEN_bit(hw)) {
    1e24:	f013 0f04 	tst.w	r3, #4
    1e28:	d009      	beq.n	1e3e <_mci_set_speed+0x1e>
	return ((Sdhc *)hw)->PSR.reg;
    1e2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
		while (hri_sdhc_read_PSR_reg(hw) & (SDHC_PSR_CMDINHC_CANNOT | SDHC_PSR_CMDINHD_CANNOT))
    1e2c:	f014 0f03 	tst.w	r4, #3
    1e30:	d1fb      	bne.n	1e2a <_mci_set_speed+0xa>
}

static inline void hri_sdhc_clear_CCR_SDCLKEN_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_SDCLKEN;
    1e32:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    1e34:	b2a4      	uxth	r4, r4
    1e36:	f024 0404 	bic.w	r4, r4, #4
    1e3a:	b2a4      	uxth	r4, r4
    1e3c:	8584      	strh	r4, [r0, #44]	; 0x2c
	return (((Sdhc *)hw)->CA1R.reg & SDHC_CA1R_CLKMULT_Msk) >> SDHC_CA1R_CLKMULT_Pos;
    1e3e:	6c44      	ldr	r4, [r0, #68]	; 0x44
    1e40:	f3c4 4407 	ubfx	r4, r4, #16, #8
	//	clkbase = hri_sdhc_read_CA0R_BASECLKF_bf(hw);
	clkbase = CONF_BASE_FREQUENCY;
	clkmul  = hri_sdhc_read_CA1R_CLKMULT_bf(hw);

	/* If programmable clock mode is enabled, baseclk is divided by 2 */
	if (clkmul > 0) {
    1e44:	2c00      	cmp	r4, #0
    1e46:	d135      	bne.n	1eb4 <_mci_set_speed+0x94>
	clkbase = CONF_BASE_FREQUENCY;
    1e48:	4b22      	ldr	r3, [pc, #136]	; (1ed4 <_mci_set_speed+0xb4>)
		clkbase = clkbase / 2;
	}
	if (prog_clock_mode == 0) {
    1e4a:	2a00      	cmp	r2, #0
    1e4c:	d134      	bne.n	1eb8 <_mci_set_speed+0x98>
}

static inline void hri_sdhc_clear_CCR_CLKGSEL_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->CCR.reg &= ~SDHC_CCR_CLKGSEL;
    1e4e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1e50:	b292      	uxth	r2, r2
    1e52:	f022 0220 	bic.w	r2, r2, #32
    1e56:	b292      	uxth	r2, r2
    1e58:	8582      	strh	r2, [r0, #44]	; 0x2c
		/* divided clock mode */
		hri_sdhc_clear_CCR_CLKGSEL_bit(hw);
		/* speed = Base Clock / 2*div */
		div = (clkbase / speed) / 2;
    1e5a:	fbb3 f1f1 	udiv	r1, r3, r1
    1e5e:	0849      	lsrs	r1, r1, #1
	tmp = ((Sdhc *)hw)->HC1R.reg;
    1e60:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		}
	}

	/* Specific constraint for SDHC/SDMMC IP
	The clock divider (DIV) in SDMMC_CCR must be set to a value different from 0 when HSEN is 1. */
	if ((hri_sdhc_get_HC1R_HSEN_bit(hw)) && (div == 0)) {
    1e64:	f013 0f04 	tst.w	r3, #4
    1e68:	d001      	beq.n	1e6e <_mci_set_speed+0x4e>
    1e6a:	b901      	cbnz	r1, 1e6e <_mci_set_speed+0x4e>
		div = 1;
    1e6c:	2101      	movs	r1, #1
	}

	/* Set clock divider */
	hri_sdhc_write_CCR_SDCLKFSEL_bf(hw, div & 0xFF);
    1e6e:	b28a      	uxth	r2, r1

static inline void hri_sdhc_write_CCR_SDCLKFSEL_bf(const void *const hw, hri_sdhc_ccr_reg_t data)
{
	uint16_t tmp;
	SDHC_CRITICAL_SECTION_ENTER();
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e70:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	tmp &= ~SDHC_CCR_SDCLKFSEL_Msk;
    1e72:	b2db      	uxtb	r3, r3
	tmp |= SDHC_CCR_SDCLKFSEL(data);
    1e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1e78:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    1e7a:	8583      	strh	r3, [r0, #44]	; 0x2c
	hri_sdhc_write_CCR_USDCLKFSEL_bf(hw, div >> 8);
    1e7c:	f3c1 210f 	ubfx	r1, r1, #8, #16
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e80:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1e82:	b29b      	uxth	r3, r3
	tmp &= ~SDHC_CCR_USDCLKFSEL_Msk;
    1e84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
	tmp |= SDHC_CCR_USDCLKFSEL(data);
    1e88:	0189      	lsls	r1, r1, #6
    1e8a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    1e8e:	4319      	orrs	r1, r3
	((Sdhc *)hw)->CCR.reg = tmp;
    1e90:	8581      	strh	r1, [r0, #44]	; 0x2c
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_INTCLKEN;
    1e92:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1e94:	b29b      	uxth	r3, r3
    1e96:	f043 0301 	orr.w	r3, r3, #1
    1e9a:	8583      	strh	r3, [r0, #44]	; 0x2c
	tmp = ((Sdhc *)hw)->CCR.reg;
    1e9c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c

	hri_sdhc_set_CCR_INTCLKEN_bit(hw);
	/* Repeat this step until Clock Stable is 1 */
	while (hri_sdhc_get_CCR_INTCLKS_bit(hw) == 0)
    1e9e:	f013 0f02 	tst.w	r3, #2
    1ea2:	d0fb      	beq.n	1e9c <_mci_set_speed+0x7c>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_SDCLKEN;
    1ea4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    1ea6:	b29b      	uxth	r3, r3
    1ea8:	f043 0304 	orr.w	r3, r3, #4
    1eac:	8583      	strh	r3, [r0, #44]	; 0x2c
		;
	/* Output the clock to the card -- Set SD Clock Enable */
	hri_sdhc_set_CCR_SDCLKEN_bit(hw);
}
    1eae:	f85d 4b04 	ldr.w	r4, [sp], #4
    1eb2:	4770      	bx	lr
		clkbase = clkbase / 2;
    1eb4:	4b08      	ldr	r3, [pc, #32]	; (1ed8 <_mci_set_speed+0xb8>)
    1eb6:	e7c8      	b.n	1e4a <_mci_set_speed+0x2a>
	((Sdhc *)hw)->CCR.reg |= SDHC_CCR_CLKGSEL;
    1eb8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1eba:	b292      	uxth	r2, r2
    1ebc:	f042 0220 	orr.w	r2, r2, #32
    1ec0:	8582      	strh	r2, [r0, #44]	; 0x2c
		div = (clkbase * (clkmul + 1)) / speed;
    1ec2:	fb04 3303 	mla	r3, r4, r3, r3
    1ec6:	fbb3 f1f1 	udiv	r1, r3, r1
		if (div > 0) {
    1eca:	2900      	cmp	r1, #0
    1ecc:	d0c8      	beq.n	1e60 <_mci_set_speed+0x40>
			div = div - 1;
    1ece:	3901      	subs	r1, #1
    1ed0:	e7c6      	b.n	1e60 <_mci_set_speed+0x40>
    1ed2:	bf00      	nop
    1ed4:	0393a000 	.word	0x0393a000
    1ed8:	01c9d000 	.word	0x01c9d000

00001edc <_mci_reset>:
{
    1edc:	b510      	push	{r4, lr}
	ASSERT(hw);
    1ede:	4604      	mov	r4, r0
    1ee0:	2234      	movs	r2, #52	; 0x34
    1ee2:	4906      	ldr	r1, [pc, #24]	; (1efc <_mci_reset+0x20>)
    1ee4:	3000      	adds	r0, #0
    1ee6:	bf18      	it	ne
    1ee8:	2001      	movne	r0, #1
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <_mci_reset+0x24>)
    1eec:	4798      	blx	r3
}

static inline void hri_sdhc_set_SRR_SWRSTCMD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTCMD;
    1eee:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    1ef2:	f043 0302 	orr.w	r3, r3, #2
    1ef6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    1efa:	bd10      	pop	{r4, pc}
    1efc:	000038e8 	.word	0x000038e8
    1f00:	000013b9 	.word	0x000013b9

00001f04 <_mci_wait_busy>:
 *
 * \param hw       The pointer to MCI hardware instance
 * \return true if success, otherwise false
 */
static bool _mci_wait_busy(const void *const hw)
{
    1f04:	b510      	push	{r4, lr}
	uint32_t busy_wait = 0xFFFFFFFF;
	uint32_t psr;

	ASSERT(hw);
    1f06:	4604      	mov	r4, r0
    1f08:	227f      	movs	r2, #127	; 0x7f
    1f0a:	490b      	ldr	r1, [pc, #44]	; (1f38 <_mci_wait_busy+0x34>)
    1f0c:	3000      	adds	r0, #0
    1f0e:	bf18      	it	ne
    1f10:	2001      	movne	r0, #1
    1f12:	4b0a      	ldr	r3, [pc, #40]	; (1f3c <_mci_wait_busy+0x38>)
    1f14:	4798      	blx	r3
	uint32_t busy_wait = 0xFFFFFFFF;
    1f16:	f04f 33ff 	mov.w	r3, #4294967295
	return ((Sdhc *)hw)->PSR.reg;
    1f1a:	6a62      	ldr	r2, [r4, #36]	; 0x24

	do {
		psr = hri_sdhc_read_PSR_reg(hw);

		if (busy_wait-- == 0) {
    1f1c:	1e59      	subs	r1, r3, #1
    1f1e:	b12b      	cbz	r3, 1f2c <_mci_wait_busy+0x28>
    1f20:	460b      	mov	r3, r1
			_mci_reset(hw);
			return false;
		}
	} while (!(psr & SDHC_PSR_DATLL(1)));
    1f22:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    1f26:	d0f8      	beq.n	1f1a <_mci_wait_busy+0x16>
	return true;
    1f28:	2001      	movs	r0, #1
}
    1f2a:	bd10      	pop	{r4, pc}
			_mci_reset(hw);
    1f2c:	4620      	mov	r0, r4
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <_mci_wait_busy+0x3c>)
    1f30:	4798      	blx	r3
			return false;
    1f32:	2000      	movs	r0, #0
    1f34:	bd10      	pop	{r4, pc}
    1f36:	bf00      	nop
    1f38:	000038e8 	.word	0x000038e8
    1f3c:	000013b9 	.word	0x000013b9
    1f40:	00001edd 	.word	0x00001edd

00001f44 <_mci_send_cmd_execute>:
 * \param arg        Argument of the command
 *
 * \return true if success, otherwise false
 */
static bool _mci_send_cmd_execute(const void *const hw, uint32_t cmdr, uint32_t cmd, uint32_t arg)
{
    1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f46:	460f      	mov	r7, r1
    1f48:	4615      	mov	r5, r2
    1f4a:	461e      	mov	r6, r3
	uint32_t sr;
	ASSERT(hw);
    1f4c:	4604      	mov	r4, r0
    1f4e:	2299      	movs	r2, #153	; 0x99
    1f50:	4934      	ldr	r1, [pc, #208]	; (2024 <_mci_send_cmd_execute+0xe0>)
    1f52:	3000      	adds	r0, #0
    1f54:	bf18      	it	ne
    1f56:	2001      	movne	r0, #1
    1f58:	4b33      	ldr	r3, [pc, #204]	; (2028 <_mci_send_cmd_execute+0xe4>)
    1f5a:	4798      	blx	r3

	cmdr |= SDHC_CR_CMDIDX(cmd) | SDHC_CR_CMDTYP_NORMAL;
    1f5c:	0229      	lsls	r1, r5, #8
    1f5e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
    1f62:	4339      	orrs	r1, r7

	if (cmd & MCI_RESP_PRESENT) {
    1f64:	f415 7f80 	tst.w	r5, #256	; 0x100
    1f68:	d004      	beq.n	1f74 <_mci_send_cmd_execute+0x30>

		if (cmd & MCI_RESP_136) {
    1f6a:	f415 6f00 	tst.w	r5, #2048	; 0x800
    1f6e:	d00e      	beq.n	1f8e <_mci_send_cmd_execute+0x4a>
			cmdr |= SDHC_CR_RESPTYP_136_BIT;
    1f70:	f041 0101 	orr.w	r1, r1, #1
		} else {
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
		}
	}

	if (cmd & MCI_CMD_OPENDRAIN) {
    1f74:	f415 4f80 	tst.w	r5, #16384	; 0x4000
    1f78:	d012      	beq.n	1fa0 <_mci_send_cmd_execute+0x5c>
}

static inline void hri_sdhc_set_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg |= SDHC_MC1R_OPD;
    1f7a:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    1f7e:	f043 0310 	orr.w	r3, r3, #16
    1f82:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	((Sdhc *)hw)->ARG1R.reg = data;
    1f86:	60a6      	str	r6, [r4, #8]
	} else {
		hri_sdhc_clear_MC1R_OPD_bit(hw);
	}

	hri_sdhc_write_ARG1R_reg(hw, arg);
	hri_sdhc_write_CR_reg(hw, cmdr);
    1f88:	b28b      	uxth	r3, r1
	((Sdhc *)hw)->CR.reg = data;
    1f8a:	81e3      	strh	r3, [r4, #14]
    1f8c:	e017      	b.n	1fbe <_mci_send_cmd_execute+0x7a>
		} else if (cmd & MCI_RESP_BUSY) {
    1f8e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    1f92:	d002      	beq.n	1f9a <_mci_send_cmd_execute+0x56>
			cmdr |= SDHC_CR_RESPTYP_48_BIT_BUSY;
    1f94:	f041 0103 	orr.w	r1, r1, #3
    1f98:	e7ec      	b.n	1f74 <_mci_send_cmd_execute+0x30>
			cmdr |= SDHC_CR_RESPTYP_48_BIT;
    1f9a:	f041 0102 	orr.w	r1, r1, #2
    1f9e:	e7e9      	b.n	1f74 <_mci_send_cmd_execute+0x30>
}

static inline void hri_sdhc_clear_MC1R_OPD_bit(const void *const hw)
{
	SDHC_CRITICAL_SECTION_ENTER();
	((Sdhc *)hw)->MC1R.reg &= ~SDHC_MC1R_OPD;
    1fa0:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
    1fa4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1fa8:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
    1fac:	e7eb      	b.n	1f86 <_mci_send_cmd_execute+0x42>
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		} else {
			if (sr
    1fae:	f240 227f 	movw	r2, #639	; 0x27f
    1fb2:	4213      	tst	r3, r2
    1fb4:	d118      	bne.n	1fe8 <_mci_send_cmd_execute+0xa4>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    1fb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				hri_sdhc_set_EISTR_reg(hw, SDHC_EISTR_MASK);
				return false;
			}
		}
	} while (!hri_sdhc_get_NISTR_CMDC_bit(hw));
    1fb8:	f013 0f01 	tst.w	r3, #1
    1fbc:	d120      	bne.n	2000 <_mci_send_cmd_execute+0xbc>
	return ((Sdhc *)hw)->EISTR.reg;
    1fbe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1fc0:	b29b      	uxth	r3, r3
		if (cmd & MCI_RESP_CRC) {
    1fc2:	f415 5f80 	tst.w	r5, #4096	; 0x1000
    1fc6:	d0f2      	beq.n	1fae <_mci_send_cmd_execute+0x6a>
			if (sr
    1fc8:	f240 225d 	movw	r2, #605	; 0x25d
    1fcc:	4213      	tst	r3, r2
    1fce:	d0f2      	beq.n	1fb6 <_mci_send_cmd_execute+0x72>
				_mci_reset(hw);
    1fd0:	4620      	mov	r0, r4
    1fd2:	4b16      	ldr	r3, [pc, #88]	; (202c <_mci_send_cmd_execute+0xe8>)
    1fd4:	4798      	blx	r3
	((Sdhc *)hw)->EISTR.reg |= mask;
    1fd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1fd8:	b29b      	uxth	r3, r3
    1fda:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    1fde:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    1fe2:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    1fe4:	2000      	movs	r0, #0
    1fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				_mci_reset(hw);
    1fe8:	4620      	mov	r0, r4
    1fea:	4b10      	ldr	r3, [pc, #64]	; (202c <_mci_send_cmd_execute+0xe8>)
    1fec:	4798      	blx	r3
    1fee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1ff0:	b29b      	uxth	r3, r3
    1ff2:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    1ff6:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    1ffa:	8663      	strh	r3, [r4, #50]	; 0x32
				return false;
    1ffc:	2000      	movs	r0, #0
    1ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(cmdr & SDHC_CR_DPSEL_DATA)) {
    2000:	f011 0f20 	tst.w	r1, #32
    2004:	d104      	bne.n	2010 <_mci_send_cmd_execute+0xcc>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_CMDC;
    2006:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2008:	b29b      	uxth	r3, r3
    200a:	f043 0301 	orr.w	r3, r3, #1
    200e:	8623      	strh	r3, [r4, #48]	; 0x30
		hri_sdhc_set_NISTR_CMDC_bit(hw);
	}
	if (cmd & MCI_RESP_BUSY) {
    2010:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    2014:	d101      	bne.n	201a <_mci_send_cmd_execute+0xd6>
		if (!_mci_wait_busy(hw)) {
			return false;
		}
	}

	return true;
    2016:	2001      	movs	r0, #1
}
    2018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!_mci_wait_busy(hw)) {
    201a:	4620      	mov	r0, r4
    201c:	4b04      	ldr	r3, [pc, #16]	; (2030 <_mci_send_cmd_execute+0xec>)
    201e:	4798      	blx	r3
    2020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2022:	bf00      	nop
    2024:	000038e8 	.word	0x000038e8
    2028:	000013b9 	.word	0x000013b9
    202c:	00001edd 	.word	0x00001edd
    2030:	00001f05 	.word	0x00001f05

00002034 <_mci_sync_init>:

/**
 *  \brief Initialize MCI low level driver.
 */
int32_t _mci_sync_init(struct _mci_sync_device *const mci_dev, void *const hw)
{
    2034:	b538      	push	{r3, r4, r5, lr}
    2036:	460c      	mov	r4, r1
	ASSERT(mci_dev && hw);
    2038:	4605      	mov	r5, r0
    203a:	b348      	cbz	r0, 2090 <_mci_sync_init+0x5c>
    203c:	b331      	cbz	r1, 208c <_mci_sync_init+0x58>
    203e:	2001      	movs	r0, #1
    2040:	22d8      	movs	r2, #216	; 0xd8
    2042:	4914      	ldr	r1, [pc, #80]	; (2094 <_mci_sync_init+0x60>)
    2044:	4b14      	ldr	r3, [pc, #80]	; (2098 <_mci_sync_init+0x64>)
    2046:	4798      	blx	r3

	mci_dev->hw = hw;
    2048:	602c      	str	r4, [r5, #0]
	((Sdhc *)hw)->SRR.reg |= SDHC_SRR_SWRSTALL;
    204a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    204e:	f043 0301 	orr.w	r3, r3, #1
    2052:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tmp = ((Sdhc *)hw)->SRR.reg;
    2056:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f

	hri_sdhc_set_SRR_SWRSTALL_bit(hw);
	while (hri_sdhc_get_SRR_SWRSTALL_bit(hw))
    205a:	f013 0f01 	tst.w	r3, #1
    205e:	d1fa      	bne.n	2056 <_mci_sync_init+0x22>
	((Sdhc *)hw)->TCR.reg = data;
    2060:	230e      	movs	r3, #14
    2062:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	((Sdhc *)hw)->PCR.reg = data;
    2066:	230f      	movs	r3, #15
    2068:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	((Sdhc *)hw)->NISTER.reg |= mask;
    206c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    206e:	b29b      	uxth	r3, r3
    2070:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2074:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2078:	86a3      	strh	r3, [r4, #52]	; 0x34
	((Sdhc *)hw)->EISTER.reg |= mask;
    207a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    207c:	b29b      	uxth	r3, r3
    207e:	ea6f 2393 	mvn.w	r3, r3, lsr #10
    2082:	ea6f 2383 	mvn.w	r3, r3, lsl #10
    2086:	86e3      	strh	r3, [r4, #54]	; 0x36

	hri_sdhc_set_NISTER_reg(hw, SDHC_NISTER_MASK);
	hri_sdhc_set_EISTER_reg(hw, SDHC_EISTER_MASK);

	return ERR_NONE;
}
    2088:	2000      	movs	r0, #0
    208a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(mci_dev && hw);
    208c:	2000      	movs	r0, #0
    208e:	e7d7      	b.n	2040 <_mci_sync_init+0xc>
    2090:	2000      	movs	r0, #0
    2092:	e7d5      	b.n	2040 <_mci_sync_init+0xc>
    2094:	000038e8 	.word	0x000038e8
    2098:	000013b9 	.word	0x000013b9

0000209c <_mci_sync_select_device>:
/**
 *  \brief Select a device and initialize it
 */
int32_t _mci_sync_select_device(struct _mci_sync_device *const mci_dev, uint8_t slot, uint32_t clock, uint8_t bus_width,
                                bool high_speed)
{
    209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    209e:	4616      	mov	r6, r2
    20a0:	461d      	mov	r5, r3
    20a2:	f89d 7018 	ldrb.w	r7, [sp, #24]
	(void)(slot);
	void *hw;

	ASSERT(mci_dev && mci_dev->hw);
    20a6:	4604      	mov	r4, r0
    20a8:	b1e0      	cbz	r0, 20e4 <_mci_sync_select_device+0x48>
    20aa:	6803      	ldr	r3, [r0, #0]
    20ac:	b1c3      	cbz	r3, 20e0 <_mci_sync_select_device+0x44>
    20ae:	2001      	movs	r0, #1
    20b0:	f44f 7280 	mov.w	r2, #256	; 0x100
    20b4:	491b      	ldr	r1, [pc, #108]	; (2124 <_mci_sync_select_device+0x88>)
    20b6:	4b1c      	ldr	r3, [pc, #112]	; (2128 <_mci_sync_select_device+0x8c>)
    20b8:	4798      	blx	r3
	hw = mci_dev->hw;
    20ba:	6824      	ldr	r4, [r4, #0]

	if (high_speed) {
    20bc:	b1a7      	cbz	r7, 20e8 <_mci_sync_select_device+0x4c>
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_HSEN;
    20be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    20c2:	f043 0304 	orr.w	r3, r3, #4
    20c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	tmp = ((Sdhc *)hw)->HC2R.reg;
    20ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
		hri_sdhc_set_HC1R_HSEN_bit(hw);
	} else {
		hri_sdhc_clear_HC1R_HSEN_bit(hw);
	}

	if (hri_sdhc_get_HC2R_PVALEN_bit(hw) == 0) {
    20cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    20d0:	d011      	beq.n	20f6 <_mci_sync_select_device+0x5a>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
	}

	switch (bus_width) {
    20d2:	2d01      	cmp	r5, #1
    20d4:	d015      	beq.n	2102 <_mci_sync_select_device+0x66>
    20d6:	2d04      	cmp	r5, #4
    20d8:	d01b      	beq.n	2112 <_mci_sync_select_device+0x76>
	case 4:
		hri_sdhc_set_HC1R_DW_bit(hw);
		break;

	default:
		return ERR_INVALID_ARG;
    20da:	f06f 000c 	mvn.w	r0, #12
	}

	return ERR_NONE;
}
    20de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    20e0:	2000      	movs	r0, #0
    20e2:	e7e5      	b.n	20b0 <_mci_sync_select_device+0x14>
    20e4:	2000      	movs	r0, #0
    20e6:	e7e3      	b.n	20b0 <_mci_sync_select_device+0x14>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_HSEN;
    20e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    20ec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    20f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    20f4:	e7e9      	b.n	20ca <_mci_sync_select_device+0x2e>
		_mci_set_speed(hw, clock, CONF_SDHC0_CLK_GEN_SEL);
    20f6:	2200      	movs	r2, #0
    20f8:	4631      	mov	r1, r6
    20fa:	4620      	mov	r0, r4
    20fc:	4b0b      	ldr	r3, [pc, #44]	; (212c <_mci_sync_select_device+0x90>)
    20fe:	4798      	blx	r3
    2100:	e7e7      	b.n	20d2 <_mci_sync_select_device+0x36>
	((Sdhc *)hw)->HC1R.reg &= ~SDHC_HC1R_DW;
    2102:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2106:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    210a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	return ERR_NONE;
    210e:	2000      	movs	r0, #0
    2110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sdhc *)hw)->HC1R.reg |= SDHC_HC1R_DW;
    2112:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    2116:	f043 0302 	orr.w	r3, r3, #2
    211a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    211e:	2000      	movs	r0, #0
    2120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2122:	bf00      	nop
    2124:	000038e8 	.word	0x000038e8
    2128:	000013b9 	.word	0x000013b9
    212c:	00001e21 	.word	0x00001e21

00002130 <_mci_sync_deselect_device>:
	/* Nothing to do */
	(void)(mci_dev);
	(void)(slot);

	return ERR_NONE;
}
    2130:	2000      	movs	r0, #0
    2132:	4770      	bx	lr

00002134 <_mci_sync_send_cmd>:

/**
 *  \brief Send a command on the selected slot
 */
bool _mci_sync_send_cmd(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg)
{
    2134:	b570      	push	{r4, r5, r6, lr}
    2136:	460d      	mov	r5, r1
    2138:	4616      	mov	r6, r2
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    213a:	4604      	mov	r4, r0
    213c:	b180      	cbz	r0, 2160 <_mci_sync_send_cmd+0x2c>
    213e:	6803      	ldr	r3, [r0, #0]
    2140:	b163      	cbz	r3, 215c <_mci_sync_send_cmd+0x28>
    2142:	2001      	movs	r0, #1
    2144:	f44f 72ab 	mov.w	r2, #342	; 0x156
    2148:	490d      	ldr	r1, [pc, #52]	; (2180 <_mci_sync_send_cmd+0x4c>)
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <_mci_sync_send_cmd+0x50>)
    214c:	4798      	blx	r3
	hw = mci_dev->hw;
    214e:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    2150:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* Check Command Inhibit (CMD) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw)) {
    2152:	f013 0f01 	tst.w	r3, #1
    2156:	d005      	beq.n	2164 <_mci_sync_send_cmd+0x30>
		return false;
    2158:	2000      	movs	r0, #0

	hri_sdhc_clear_TMR_DMAEN_bit(hw);
	hri_sdhc_write_BCR_reg(hw, 0);

	return _mci_send_cmd_execute(hw, 0, cmd, arg);
}
    215a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(mci_dev && mci_dev->hw);
    215c:	2000      	movs	r0, #0
    215e:	e7f1      	b.n	2144 <_mci_sync_send_cmd+0x10>
    2160:	2000      	movs	r0, #0
    2162:	e7ef      	b.n	2144 <_mci_sync_send_cmd+0x10>
	((Sdhc *)hw)->TMR.reg &= ~SDHC_TMR_DMAEN;
    2164:	8983      	ldrh	r3, [r0, #12]
    2166:	b29b      	uxth	r3, r3
    2168:	f023 0301 	bic.w	r3, r3, #1
    216c:	b29b      	uxth	r3, r3
    216e:	8183      	strh	r3, [r0, #12]
	((Sdhc *)hw)->BCR.reg = data;
    2170:	2100      	movs	r1, #0
    2172:	80c1      	strh	r1, [r0, #6]
	return _mci_send_cmd_execute(hw, 0, cmd, arg);
    2174:	4633      	mov	r3, r6
    2176:	462a      	mov	r2, r5
    2178:	4c03      	ldr	r4, [pc, #12]	; (2188 <_mci_sync_send_cmd+0x54>)
    217a:	47a0      	blx	r4
    217c:	bd70      	pop	{r4, r5, r6, pc}
    217e:	bf00      	nop
    2180:	000038e8 	.word	0x000038e8
    2184:	000013b9 	.word	0x000013b9
    2188:	00001f45 	.word	0x00001f45

0000218c <_mci_sync_get_response>:

/**
 *  \brief Get 32 bits response of the last command.
 */
uint32_t _mci_sync_get_response(struct _mci_sync_device *const mci_dev)
{
    218c:	b510      	push	{r4, lr}
	void *hw;
	ASSERT(mci_dev && mci_dev->hw);
    218e:	4604      	mov	r4, r0
    2190:	b160      	cbz	r0, 21ac <_mci_sync_get_response+0x20>
    2192:	6803      	ldr	r3, [r0, #0]
    2194:	b143      	cbz	r3, 21a8 <_mci_sync_get_response+0x1c>
    2196:	2001      	movs	r0, #1
    2198:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    219c:	4904      	ldr	r1, [pc, #16]	; (21b0 <_mci_sync_get_response+0x24>)
    219e:	4b05      	ldr	r3, [pc, #20]	; (21b4 <_mci_sync_get_response+0x28>)
    21a0:	4798      	blx	r3
	hw = mci_dev->hw;
    21a2:	6823      	ldr	r3, [r4, #0]
	return ((Sdhc *)hw)->RR[index].reg;
    21a4:	6918      	ldr	r0, [r3, #16]

	return hri_sdhc_read_RR_reg(hw, 0);
}
    21a6:	bd10      	pop	{r4, pc}
	ASSERT(mci_dev && mci_dev->hw);
    21a8:	2000      	movs	r0, #0
    21aa:	e7f5      	b.n	2198 <_mci_sync_get_response+0xc>
    21ac:	2000      	movs	r0, #0
    21ae:	e7f3      	b.n	2198 <_mci_sync_get_response+0xc>
    21b0:	000038e8 	.word	0x000038e8
    21b4:	000013b9 	.word	0x000013b9

000021b8 <_mci_sync_adtc_start>:
 *         An ADTC (Addressed Data Transfer Commands)
 *         command is used for read/write access.
 */
bool _mci_sync_adtc_start(struct _mci_sync_device *const mci_dev, uint32_t cmd, uint32_t arg, uint16_t block_size,
                          uint16_t nb_block, bool access_block)
{
    21b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21bc:	460d      	mov	r5, r1
    21be:	4690      	mov	r8, r2
    21c0:	461f      	mov	r7, r3
    21c2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	uint32_t tmr;
	void *   hw;
	ASSERT(mci_dev && mci_dev->hw);
    21c6:	4604      	mov	r4, r0
    21c8:	2800      	cmp	r0, #0
    21ca:	d031      	beq.n	2230 <_mci_sync_adtc_start+0x78>
    21cc:	6803      	ldr	r3, [r0, #0]
    21ce:	b36b      	cbz	r3, 222c <_mci_sync_adtc_start+0x74>
    21d0:	2001      	movs	r0, #1
    21d2:	f240 1293 	movw	r2, #403	; 0x193
    21d6:	4921      	ldr	r1, [pc, #132]	; (225c <_mci_sync_adtc_start+0xa4>)
    21d8:	4b21      	ldr	r3, [pc, #132]	; (2260 <_mci_sync_adtc_start+0xa8>)
    21da:	4798      	blx	r3
	hw = mci_dev->hw;
    21dc:	6820      	ldr	r0, [r4, #0]
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHC) >> SDHC_PSR_CMDINHC_Pos;
    21de:	6a43      	ldr	r3, [r0, #36]	; 0x24

	/* No use without dma support */
	(void)access_block;

	/* Check Command Inhibit (CMD/DAT) in the Present State register */
	if (hri_sdhc_get_PSR_CMDINHC_bit(hw) || hri_sdhc_get_PSR_CMDINHD_bit(hw)) {
    21e0:	f013 0f01 	tst.w	r3, #1
    21e4:	d131      	bne.n	224a <_mci_sync_adtc_start+0x92>
	return (((Sdhc *)hw)->PSR.reg & SDHC_PSR_CMDINHD) >> SDHC_PSR_CMDINHD_Pos;
    21e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    21e8:	f013 0f02 	tst.w	r3, #2
    21ec:	d130      	bne.n	2250 <_mci_sync_adtc_start+0x98>
		return false;
	}

	if (cmd & MCI_CMD_WRITE) {
    21ee:	f415 4f00 	tst.w	r5, #32768	; 0x8000
    21f2:	d01f      	beq.n	2234 <_mci_sync_adtc_start+0x7c>
		tmr = SDHC_TMR_DTDSEL_WRITE;
    21f4:	2300      	movs	r3, #0
	} else {
		tmr = SDHC_TMR_DTDSEL_READ;
	}

	if (cmd & MCI_CMD_SDIO_BYTE) {
    21f6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
    21fa:	d104      	bne.n	2206 <_mci_sync_adtc_start+0x4e>
		tmr |= SDHC_TMR_MSBSEL_SINGLE;
	} else if (cmd & MCI_CMD_SDIO_BLOCK) {
    21fc:	f415 3f00 	tst.w	r5, #131072	; 0x20000
    2200:	d01a      	beq.n	2238 <_mci_sync_adtc_start+0x80>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2202:	f043 0322 	orr.w	r3, r3, #34	; 0x22
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
	} else {
		return false;
	}
	hri_sdhc_write_TMR_reg(hw, tmr);
    2206:	b29b      	uxth	r3, r3
	((Sdhc *)hw)->TMR.reg = data;
    2208:	8183      	strh	r3, [r0, #12]
	hri_sdhc_write_BSR_reg(hw, SDHC_BSR_BLOCKSIZE(block_size) | SDHC_BSR_BOUNDARY_4K);
    220a:	f3c7 0309 	ubfx	r3, r7, #0, #10
	((Sdhc *)hw)->BSR.reg = data;
    220e:	8083      	strh	r3, [r0, #4]
	((Sdhc *)hw)->BCR.reg = data;
    2210:	80c6      	strh	r6, [r0, #6]
	hri_sdhc_write_BCR_reg(hw, SDHC_BCR_BCNT(nb_block));

	mci_dev->mci_sync_trans_pos  = 0;
    2212:	2200      	movs	r2, #0
    2214:	2300      	movs	r3, #0
    2216:	e9c4 2302 	strd	r2, r3, [r4, #8]
	mci_dev->mci_sync_block_size = block_size;
    221a:	8227      	strh	r7, [r4, #16]
	mci_dev->mci_sync_nb_block   = nb_block;
    221c:	8266      	strh	r6, [r4, #18]

	return _mci_send_cmd_execute(hw, SDHC_CR_DPSEL_DATA, cmd, arg);
    221e:	4643      	mov	r3, r8
    2220:	462a      	mov	r2, r5
    2222:	2120      	movs	r1, #32
    2224:	4c0f      	ldr	r4, [pc, #60]	; (2264 <_mci_sync_adtc_start+0xac>)
    2226:	47a0      	blx	r4
    2228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(mci_dev && mci_dev->hw);
    222c:	2000      	movs	r0, #0
    222e:	e7d0      	b.n	21d2 <_mci_sync_adtc_start+0x1a>
    2230:	2000      	movs	r0, #0
    2232:	e7ce      	b.n	21d2 <_mci_sync_adtc_start+0x1a>
		tmr = SDHC_TMR_DTDSEL_READ;
    2234:	2310      	movs	r3, #16
    2236:	e7de      	b.n	21f6 <_mci_sync_adtc_start+0x3e>
	} else if (cmd & MCI_CMD_SINGLE_BLOCK) {
    2238:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    223c:	d1e3      	bne.n	2206 <_mci_sync_adtc_start+0x4e>
	} else if (cmd & MCI_CMD_MULTI_BLOCK) {
    223e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
    2242:	d008      	beq.n	2256 <_mci_sync_adtc_start+0x9e>
		tmr |= SDHC_TMR_BCEN | SDHC_TMR_MSBSEL_MULTIPLE;
    2244:	f043 0322 	orr.w	r3, r3, #34	; 0x22
    2248:	e7dd      	b.n	2206 <_mci_sync_adtc_start+0x4e>
		return false;
    224a:	2000      	movs	r0, #0
    224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2250:	2000      	movs	r0, #0
    2252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    2256:	2000      	movs	r0, #0
}
    2258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    225c:	000038e8 	.word	0x000038e8
    2260:	000013b9 	.word	0x000013b9
    2264:	00001f45 	.word	0x00001f45

00002268 <_mci_sync_write_word>:

/**
 *  \brief Write a word on the line
 */
bool _mci_sync_write_word(struct _mci_sync_device *const mci_dev, uint32_t value)
{
    2268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    226a:	460f      	mov	r7, r1
	uint32_t sr;
	uint8_t  nbytes;
	void *   hw;

	ASSERT(mci_dev && mci_dev->hw);
    226c:	4605      	mov	r5, r0
    226e:	2800      	cmp	r0, #0
    2270:	d03f      	beq.n	22f2 <_mci_sync_write_word+0x8a>
    2272:	6803      	ldr	r3, [r0, #0]
    2274:	2b00      	cmp	r3, #0
    2276:	d03a      	beq.n	22ee <_mci_sync_write_word+0x86>
    2278:	2001      	movs	r0, #1
    227a:	f240 220f 	movw	r2, #527	; 0x20f
    227e:	4924      	ldr	r1, [pc, #144]	; (2310 <_mci_sync_write_word+0xa8>)
    2280:	4b24      	ldr	r3, [pc, #144]	; (2314 <_mci_sync_write_word+0xac>)
    2282:	4798      	blx	r3
	hw = mci_dev->hw;
    2284:	682c      	ldr	r4, [r5, #0]

	/* Wait data available */
	nbytes = 4; //( mci_dev->mci_sync_block_size & 0x3 ) ? 1 : 4;
	if (mci_dev->mci_sync_trans_pos % mci_dev->mci_sync_block_size == 0) {
    2286:	8a2a      	ldrh	r2, [r5, #16]
    2288:	2300      	movs	r3, #0
    228a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    228e:	4e22      	ldr	r6, [pc, #136]	; (2318 <_mci_sync_write_word+0xb0>)
    2290:	47b0      	blx	r6
    2292:	4313      	orrs	r3, r2
    2294:	d10c      	bne.n	22b0 <_mci_sync_write_word+0x48>
	return ((Sdhc *)hw)->EISTR.reg;
    2296:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		do {
			sr = hri_sdhc_read_EISTR_reg(hw);

			if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    2298:	f003 0370 	and.w	r3, r3, #112	; 0x70
    229c:	bb5b      	cbnz	r3, 22f6 <_mci_sync_write_word+0x8e>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    229e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
				_mci_reset(hw);
				return false;
			}
		} while (!hri_sdhc_get_NISTR_BWRRDY_bit(hw));
    22a0:	f013 0f10 	tst.w	r3, #16
    22a4:	d0f7      	beq.n	2296 <_mci_sync_write_word+0x2e>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_BWRRDY;
    22a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    22a8:	b29b      	uxth	r3, r3
    22aa:	f043 0310 	orr.w	r3, r3, #16
    22ae:	8623      	strh	r3, [r4, #48]	; 0x30
	((Sdhc *)hw)->BDPR.reg = data;
    22b0:	6227      	str	r7, [r4, #32]
		hri_sdhc_set_NISTR_BWRRDY_bit(hw);
	}
	/* Write data */
	hri_sdhc_write_BDPR_reg(hw, value);
	mci_dev->mci_sync_trans_pos += nbytes;
    22b2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    22b6:	3204      	adds	r2, #4
    22b8:	f143 0300 	adc.w	r3, r3, #0
    22bc:	e9c5 2302 	strd	r2, r3, [r5, #8]

	if (((uint64_t)mci_dev->mci_sync_block_size * mci_dev->mci_sync_nb_block) > mci_dev->mci_sync_trans_pos) {
    22c0:	8a28      	ldrh	r0, [r5, #16]
    22c2:	8a6e      	ldrh	r6, [r5, #18]
    22c4:	fba0 0106 	umull	r0, r1, r0, r6
    22c8:	428b      	cmp	r3, r1
    22ca:	bf08      	it	eq
    22cc:	4282      	cmpeq	r2, r0
    22ce:	d31c      	bcc.n	230a <_mci_sync_write_word+0xa2>
	return ((Sdhc *)hw)->EISTR.reg;
    22d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32

	/* Wait end of transfer */
	do {
		sr = hri_sdhc_read_EISTR_reg(hw);

		if (sr & (SDHC_EISTR_DATTEO | SDHC_EISTR_DATCRC | SDHC_EISTR_DATEND)) {
    22d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
    22d6:	b99b      	cbnz	r3, 2300 <_mci_sync_write_word+0x98>
	tmp = ((Sdhc *)hw)->NISTR.reg;
    22d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_mci_reset(hw);
			return false;
		}
	} while (!hri_sdhc_get_NISTR_TRFC_bit(hw));
    22da:	f013 0f02 	tst.w	r3, #2
    22de:	d0f7      	beq.n	22d0 <_mci_sync_write_word+0x68>
	((Sdhc *)hw)->NISTR.reg |= SDHC_NISTR_TRFC;
    22e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    22e2:	b29b      	uxth	r3, r3
    22e4:	f043 0302 	orr.w	r3, r3, #2
    22e8:	8623      	strh	r3, [r4, #48]	; 0x30
	hri_sdhc_set_NISTR_TRFC_bit(hw);
	return true;
    22ea:	2001      	movs	r0, #1
    22ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(mci_dev && mci_dev->hw);
    22ee:	2000      	movs	r0, #0
    22f0:	e7c3      	b.n	227a <_mci_sync_write_word+0x12>
    22f2:	2000      	movs	r0, #0
    22f4:	e7c1      	b.n	227a <_mci_sync_write_word+0x12>
				_mci_reset(hw);
    22f6:	4620      	mov	r0, r4
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <_mci_sync_write_word+0xb4>)
    22fa:	4798      	blx	r3
				return false;
    22fc:	2000      	movs	r0, #0
    22fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_mci_reset(hw);
    2300:	4620      	mov	r0, r4
    2302:	4b06      	ldr	r3, [pc, #24]	; (231c <_mci_sync_write_word+0xb4>)
    2304:	4798      	blx	r3
			return false;
    2306:	2000      	movs	r0, #0
    2308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
    230a:	2001      	movs	r0, #1
}
    230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    230e:	bf00      	nop
    2310:	000038e8 	.word	0x000038e8
    2314:	000013b9 	.word	0x000013b9
    2318:	0000333d 	.word	0x0000333d
    231c:	00001edd 	.word	0x00001edd

00002320 <_mci_sync_start_write_blocks>:
/**
 *  \brief Start a write blocks transfer on the line
 *  Note: The driver will use the DMA available to speed up the transfer.
 */
bool _mci_sync_start_write_blocks(struct _mci_sync_device *const mci_dev, const void *src, uint16_t nb_block)
{
    2320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2324:	460e      	mov	r6, r1
    2326:	4690      	mov	r8, r2
	uint32_t nb_data;
	uint8_t *ptr    = (uint8_t *)src;
	uint8_t  nbytes = 4;

	ASSERT(mci_dev && mci_dev->hw);
    2328:	4607      	mov	r7, r0
    232a:	b1f0      	cbz	r0, 236a <_mci_sync_start_write_blocks+0x4a>
    232c:	6803      	ldr	r3, [r0, #0]
    232e:	b1d3      	cbz	r3, 2366 <_mci_sync_start_write_blocks+0x46>
    2330:	2001      	movs	r0, #1
    2332:	4d18      	ldr	r5, [pc, #96]	; (2394 <_mci_sync_start_write_blocks+0x74>)
    2334:	f240 225a 	movw	r2, #602	; 0x25a
    2338:	4629      	mov	r1, r5
    233a:	4c17      	ldr	r4, [pc, #92]	; (2398 <_mci_sync_start_write_blocks+0x78>)
    233c:	47a0      	blx	r4
	ASSERT(nb_block);
    233e:	f240 225b 	movw	r2, #603	; 0x25b
    2342:	4629      	mov	r1, r5
    2344:	f118 0000 	adds.w	r0, r8, #0
    2348:	bf18      	it	ne
    234a:	2001      	movne	r0, #1
    234c:	47a0      	blx	r4
	ASSERT(src);
    234e:	f44f 7217 	mov.w	r2, #604	; 0x25c
    2352:	4629      	mov	r1, r5
    2354:	1c30      	adds	r0, r6, #0
    2356:	bf18      	it	ne
    2358:	2001      	movne	r0, #1
    235a:	47a0      	blx	r4

	nb_data = nb_block * mci_dev->mci_sync_block_size;
    235c:	8a3d      	ldrh	r5, [r7, #16]
    235e:	fb05 f508 	mul.w	r5, r5, r8
	uint8_t  nbytes = 4;
    2362:	2404      	movs	r4, #4

	while (nb_data) {
    2364:	e005      	b.n	2372 <_mci_sync_start_write_blocks+0x52>
	ASSERT(mci_dev && mci_dev->hw);
    2366:	2000      	movs	r0, #0
    2368:	e7e3      	b.n	2332 <_mci_sync_start_write_blocks+0x12>
    236a:	2000      	movs	r0, #0
    236c:	e7e1      	b.n	2332 <_mci_sync_start_write_blocks+0x12>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
		if (nb_data < nbytes) {
			nbytes = mci_dev->mci_sync_block_size % nbytes;
		}
		nb_data -= nbytes;
    236e:	1b2d      	subs	r5, r5, r4
		ptr += nbytes;
    2370:	4426      	add	r6, r4
	while (nb_data) {
    2372:	b165      	cbz	r5, 238e <_mci_sync_start_write_blocks+0x6e>
		_mci_sync_write_word(mci_dev, *(uint32_t *)ptr);
    2374:	6831      	ldr	r1, [r6, #0]
    2376:	4638      	mov	r0, r7
    2378:	4b08      	ldr	r3, [pc, #32]	; (239c <_mci_sync_start_write_blocks+0x7c>)
    237a:	4798      	blx	r3
		if (nb_data < nbytes) {
    237c:	42a5      	cmp	r5, r4
    237e:	d2f6      	bcs.n	236e <_mci_sync_start_write_blocks+0x4e>
			nbytes = mci_dev->mci_sync_block_size % nbytes;
    2380:	8a3b      	ldrh	r3, [r7, #16]
    2382:	fb93 f2f4 	sdiv	r2, r3, r4
    2386:	fb04 3412 	mls	r4, r4, r2, r3
    238a:	b2e4      	uxtb	r4, r4
    238c:	e7ef      	b.n	236e <_mci_sync_start_write_blocks+0x4e>
	}

	return true;
}
    238e:	2001      	movs	r0, #1
    2390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2394:	000038e8 	.word	0x000038e8
    2398:	000013b9 	.word	0x000013b9
    239c:	00002269 	.word	0x00002269

000023a0 <_mci_sync_wait_end_of_write_blocks>:

/**
 *  \brief Wait the end of transfer initiated by mci_start_write_blocks()
 */
bool _mci_sync_wait_end_of_write_blocks(struct _mci_sync_device *const mci_dev)
{
    23a0:	b508      	push	{r3, lr}
	ASSERT(mci_dev && mci_dev->hw);
    23a2:	b158      	cbz	r0, 23bc <_mci_sync_wait_end_of_write_blocks+0x1c>
    23a4:	6803      	ldr	r3, [r0, #0]
    23a6:	b13b      	cbz	r3, 23b8 <_mci_sync_wait_end_of_write_blocks+0x18>
    23a8:	2001      	movs	r0, #1
    23aa:	f44f 721f 	mov.w	r2, #636	; 0x27c
    23ae:	4904      	ldr	r1, [pc, #16]	; (23c0 <_mci_sync_wait_end_of_write_blocks+0x20>)
    23b0:	4b04      	ldr	r3, [pc, #16]	; (23c4 <_mci_sync_wait_end_of_write_blocks+0x24>)
    23b2:	4798      	blx	r3

	/* Always return true for sync write blocks */
	return true;
}
    23b4:	2001      	movs	r0, #1
    23b6:	bd08      	pop	{r3, pc}
	ASSERT(mci_dev && mci_dev->hw);
    23b8:	2000      	movs	r0, #0
    23ba:	e7f6      	b.n	23aa <_mci_sync_wait_end_of_write_blocks+0xa>
    23bc:	2000      	movs	r0, #0
    23be:	e7f4      	b.n	23aa <_mci_sync_wait_end_of_write_blocks+0xa>
    23c0:	000038e8 	.word	0x000038e8
    23c4:	000013b9 	.word	0x000013b9

000023c8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    23c8:	b470      	push	{r4, r5, r6}
    23ca:	b087      	sub	sp, #28
    23cc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    23ce:	466c      	mov	r4, sp
    23d0:	4d0c      	ldr	r5, [pc, #48]	; (2404 <_sercom_get_hardware_index+0x3c>)
    23d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    23d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    23d6:	e895 0003 	ldmia.w	r5, {r0, r1}
    23da:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23de:	2000      	movs	r0, #0
    23e0:	2805      	cmp	r0, #5
    23e2:	d80a      	bhi.n	23fa <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    23e4:	ab06      	add	r3, sp, #24
    23e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    23ea:	f853 3c18 	ldr.w	r3, [r3, #-24]
    23ee:	42b3      	cmp	r3, r6
    23f0:	d001      	beq.n	23f6 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23f2:	3001      	adds	r0, #1
    23f4:	e7f4      	b.n	23e0 <_sercom_get_hardware_index+0x18>
			return i;
    23f6:	b2c0      	uxtb	r0, r0
    23f8:	e000      	b.n	23fc <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    23fa:	2000      	movs	r0, #0
}
    23fc:	b007      	add	sp, #28
    23fe:	bc70      	pop	{r4, r5, r6}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	00003900 	.word	0x00003900

00002408 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    2408:	b510      	push	{r4, lr}
	void *hw = device->hw;
    240a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    240c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    240e:	f013 0f01 	tst.w	r3, #1
    2412:	d003      	beq.n	241c <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2414:	7da3      	ldrb	r3, [r4, #22]
    2416:	f013 0f01 	tst.w	r3, #1
    241a:	d112      	bne.n	2442 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    241c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    241e:	f013 0f02 	tst.w	r3, #2
    2422:	d003      	beq.n	242c <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    2424:	7da3      	ldrb	r3, [r4, #22]
    2426:	f013 0f02 	tst.w	r3, #2
    242a:	d10f      	bne.n	244c <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    242c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    242e:	f013 0f04 	tst.w	r3, #4
    2432:	d015      	beq.n	2460 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2434:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2436:	f003 0337 	and.w	r3, r3, #55	; 0x37
    243a:	b163      	cbz	r3, 2456 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    243c:	23ff      	movs	r3, #255	; 0xff
    243e:	8363      	strh	r3, [r4, #26]
    2440:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2442:	2301      	movs	r3, #1
    2444:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2446:	6803      	ldr	r3, [r0, #0]
    2448:	4798      	blx	r3
    244a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    244c:	2302      	movs	r3, #2
    244e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2450:	6883      	ldr	r3, [r0, #8]
    2452:	4798      	blx	r3
    2454:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2456:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2458:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    245a:	b2c9      	uxtb	r1, r1
    245c:	4798      	blx	r3
    245e:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2460:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2462:	09db      	lsrs	r3, r3, #7
    2464:	d100      	bne.n	2468 <_sercom_usart_interrupt_handler+0x60>
    2466:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2468:	2380      	movs	r3, #128	; 0x80
    246a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    246c:	68c3      	ldr	r3, [r0, #12]
    246e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2470:	8b63      	ldrh	r3, [r4, #26]
    2472:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2474:	8363      	strh	r3, [r4, #26]
    2476:	e7f6      	b.n	2466 <_sercom_usart_interrupt_handler+0x5e>

00002478 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
    2478:	4b03      	ldr	r3, [pc, #12]	; (2488 <_sercom_init_irq_param+0x10>)
    247a:	4298      	cmp	r0, r3
    247c:	d000      	beq.n	2480 <_sercom_init_irq_param+0x8>
    247e:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
    2480:	4b02      	ldr	r3, [pc, #8]	; (248c <_sercom_init_irq_param+0x14>)
    2482:	6019      	str	r1, [r3, #0]
	}
}
    2484:	e7fb      	b.n	247e <_sercom_init_irq_param+0x6>
    2486:	bf00      	nop
    2488:	43000400 	.word	0x43000400
    248c:	20000218 	.word	0x20000218

00002490 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2490:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2492:	4b04      	ldr	r3, [pc, #16]	; (24a4 <_sercom_get_irq_num+0x14>)
    2494:	4798      	blx	r3
    2496:	0080      	lsls	r0, r0, #2
    2498:	b2c0      	uxtb	r0, r0
    249a:	302e      	adds	r0, #46	; 0x2e
}
    249c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    24a0:	bd08      	pop	{r3, pc}
    24a2:	bf00      	nop
    24a4:	000023c9 	.word	0x000023c9

000024a8 <_get_sercom_index>:
{
    24a8:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    24aa:	4b0c      	ldr	r3, [pc, #48]	; (24dc <_get_sercom_index+0x34>)
    24ac:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    24ae:	2300      	movs	r3, #0
    24b0:	b143      	cbz	r3, 24c4 <_get_sercom_index+0x1c>
	ASSERT(false);
    24b2:	f240 226b 	movw	r2, #619	; 0x26b
    24b6:	490a      	ldr	r1, [pc, #40]	; (24e0 <_get_sercom_index+0x38>)
    24b8:	2000      	movs	r0, #0
    24ba:	4b0a      	ldr	r3, [pc, #40]	; (24e4 <_get_sercom_index+0x3c>)
    24bc:	4798      	blx	r3
	return 0;
    24be:	2300      	movs	r3, #0
}
    24c0:	4618      	mov	r0, r3
    24c2:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    24c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    24c8:	00d1      	lsls	r1, r2, #3
    24ca:	4a07      	ldr	r2, [pc, #28]	; (24e8 <_get_sercom_index+0x40>)
    24cc:	440a      	add	r2, r1
    24ce:	7e12      	ldrb	r2, [r2, #24]
    24d0:	4290      	cmp	r0, r2
    24d2:	d0f5      	beq.n	24c0 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    24d4:	3301      	adds	r3, #1
    24d6:	b2db      	uxtb	r3, r3
    24d8:	e7ea      	b.n	24b0 <_get_sercom_index+0x8>
    24da:	bf00      	nop
    24dc:	000023c9 	.word	0x000023c9
    24e0:	0000396c 	.word	0x0000396c
    24e4:	000013b9 	.word	0x000013b9
    24e8:	00003900 	.word	0x00003900

000024ec <_usart_init>:
{
    24ec:	b538      	push	{r3, r4, r5, lr}
    24ee:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    24f0:	4b3c      	ldr	r3, [pc, #240]	; (25e4 <_usart_init+0xf8>)
    24f2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    24f4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    24f6:	f013 0f01 	tst.w	r3, #1
    24fa:	d122      	bne.n	2542 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    24fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2500:	00da      	lsls	r2, r3, #3
    2502:	4b39      	ldr	r3, [pc, #228]	; (25e8 <_usart_init+0xfc>)
    2504:	4413      	add	r3, r2
    2506:	69da      	ldr	r2, [r3, #28]
    2508:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    250c:	69e3      	ldr	r3, [r4, #28]
    250e:	f013 0f03 	tst.w	r3, #3
    2512:	d1fb      	bne.n	250c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2514:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2516:	f013 0f02 	tst.w	r3, #2
    251a:	d00b      	beq.n	2534 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    251c:	6823      	ldr	r3, [r4, #0]
    251e:	f023 0302 	bic.w	r3, r3, #2
    2522:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2524:	69e3      	ldr	r3, [r4, #28]
    2526:	f013 0f03 	tst.w	r3, #3
    252a:	d1fb      	bne.n	2524 <_usart_init+0x38>
    252c:	69e3      	ldr	r3, [r4, #28]
    252e:	f013 0f02 	tst.w	r3, #2
    2532:	d1fb      	bne.n	252c <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2534:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2538:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    253a:	69e3      	ldr	r3, [r4, #28]
    253c:	f013 0f03 	tst.w	r3, #3
    2540:	d1fb      	bne.n	253a <_usart_init+0x4e>
    2542:	69e3      	ldr	r3, [r4, #28]
    2544:	f013 0f01 	tst.w	r3, #1
    2548:	d1fb      	bne.n	2542 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    254a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    254e:	00da      	lsls	r2, r3, #3
    2550:	4b25      	ldr	r3, [pc, #148]	; (25e8 <_usart_init+0xfc>)
    2552:	4413      	add	r3, r2
    2554:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2556:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2558:	69e3      	ldr	r3, [r4, #28]
    255a:	f013 0f03 	tst.w	r3, #3
    255e:	d1fb      	bne.n	2558 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2560:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2564:	00da      	lsls	r2, r3, #3
    2566:	4b20      	ldr	r3, [pc, #128]	; (25e8 <_usart_init+0xfc>)
    2568:	4413      	add	r3, r2
    256a:	6a1b      	ldr	r3, [r3, #32]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    256c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    256e:	69e3      	ldr	r3, [r4, #28]
    2570:	f013 0f1f 	tst.w	r3, #31
    2574:	d1fb      	bne.n	256e <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2576:	0042      	lsls	r2, r0, #1
    2578:	4402      	add	r2, r0
    257a:	00d1      	lsls	r1, r2, #3
    257c:	4b1a      	ldr	r3, [pc, #104]	; (25e8 <_usart_init+0xfc>)
    257e:	440b      	add	r3, r1
    2580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2582:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2584:	69db      	ldr	r3, [r3, #28]
    2586:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    258a:	d10a      	bne.n	25a2 <_usart_init+0xb6>
    258c:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2590:	d107      	bne.n	25a2 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2592:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2596:	00da      	lsls	r2, r3, #3
    2598:	4b13      	ldr	r3, [pc, #76]	; (25e8 <_usart_init+0xfc>)
    259a:	4413      	add	r3, r2
    259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    259e:	81a3      	strh	r3, [r4, #12]
    25a0:	e00f      	b.n	25c2 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    25a2:	0042      	lsls	r2, r0, #1
    25a4:	4402      	add	r2, r0
    25a6:	00d1      	lsls	r1, r2, #3
    25a8:	4b0f      	ldr	r3, [pc, #60]	; (25e8 <_usart_init+0xfc>)
    25aa:	440b      	add	r3, r1
    25ac:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    25ae:	89a2      	ldrh	r2, [r4, #12]
    25b0:	f361 020c 	bfi	r2, r1, #0, #13
    25b4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    25b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    25ba:	89a3      	ldrh	r3, [r4, #12]
    25bc:	f362 334f 	bfi	r3, r2, #13, #3
    25c0:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    25c2:	4a09      	ldr	r2, [pc, #36]	; (25e8 <_usart_init+0xfc>)
    25c4:	0043      	lsls	r3, r0, #1
    25c6:	181d      	adds	r5, r3, r0
    25c8:	00e9      	lsls	r1, r5, #3
    25ca:	460d      	mov	r5, r1
    25cc:	4411      	add	r1, r2
    25ce:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
	((Sercom *)hw)->USART.RXPL.reg = data;
    25d2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    25d4:	442a      	add	r2, r5
    25d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    25da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    25de:	2000      	movs	r0, #0
    25e0:	bd38      	pop	{r3, r4, r5, pc}
    25e2:	bf00      	nop
    25e4:	000024a9 	.word	0x000024a9
    25e8:	00003900 	.word	0x00003900

000025ec <_usart_async_init>:
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	460c      	mov	r4, r1
	ASSERT(device);
    25f0:	4606      	mov	r6, r0
    25f2:	22cb      	movs	r2, #203	; 0xcb
    25f4:	4918      	ldr	r1, [pc, #96]	; (2658 <_usart_async_init+0x6c>)
    25f6:	3000      	adds	r0, #0
    25f8:	bf18      	it	ne
    25fa:	2001      	movne	r0, #1
    25fc:	4b17      	ldr	r3, [pc, #92]	; (265c <_usart_async_init+0x70>)
    25fe:	4798      	blx	r3
	init_status = _usart_init(hw);
    2600:	4620      	mov	r0, r4
    2602:	4b17      	ldr	r3, [pc, #92]	; (2660 <_usart_async_init+0x74>)
    2604:	4798      	blx	r3
	if (init_status) {
    2606:	4605      	mov	r5, r0
    2608:	b108      	cbz	r0, 260e <_usart_async_init+0x22>
}
    260a:	4628      	mov	r0, r5
    260c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    260e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    2610:	4631      	mov	r1, r6
    2612:	4620      	mov	r0, r4
    2614:	4b13      	ldr	r3, [pc, #76]	; (2664 <_usart_async_init+0x78>)
    2616:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2618:	4620      	mov	r0, r4
    261a:	4b13      	ldr	r3, [pc, #76]	; (2668 <_usart_async_init+0x7c>)
    261c:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    261e:	2400      	movs	r4, #0
    2620:	e016      	b.n	2650 <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2622:	0941      	lsrs	r1, r0, #5
    2624:	f000 021f 	and.w	r2, r0, #31
    2628:	2301      	movs	r3, #1
    262a:	4093      	lsls	r3, r2
    262c:	4a0f      	ldr	r2, [pc, #60]	; (266c <_usart_async_init+0x80>)
    262e:	f101 0620 	add.w	r6, r1, #32
    2632:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2636:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    263a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    263e:	f101 0660 	add.w	r6, r1, #96	; 0x60
    2642:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2646:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    264a:	3001      	adds	r0, #1
    264c:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    264e:	3401      	adds	r4, #1
    2650:	2c03      	cmp	r4, #3
    2652:	d9e6      	bls.n	2622 <_usart_async_init+0x36>
    2654:	e7d9      	b.n	260a <_usart_async_init+0x1e>
    2656:	bf00      	nop
    2658:	0000396c 	.word	0x0000396c
    265c:	000013b9 	.word	0x000013b9
    2660:	000024ed 	.word	0x000024ed
    2664:	00002479 	.word	0x00002479
    2668:	00002491 	.word	0x00002491
    266c:	e000e100 	.word	0xe000e100

00002670 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2670:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2672:	6299      	str	r1, [r3, #40]	; 0x28
    2674:	4770      	bx	lr

00002676 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2676:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2678:	2201      	movs	r2, #1
    267a:	759a      	strb	r2, [r3, #22]
    267c:	4770      	bx	lr

0000267e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    267e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2680:	2202      	movs	r2, #2
    2682:	759a      	strb	r2, [r3, #22]
    2684:	4770      	bx	lr
	...

00002688 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2688:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    268a:	4b02      	ldr	r3, [pc, #8]	; (2694 <SERCOM5_0_Handler+0xc>)
    268c:	6818      	ldr	r0, [r3, #0]
    268e:	4b02      	ldr	r3, [pc, #8]	; (2698 <SERCOM5_0_Handler+0x10>)
    2690:	4798      	blx	r3
    2692:	bd08      	pop	{r3, pc}
    2694:	20000218 	.word	0x20000218
    2698:	00002409 	.word	0x00002409

0000269c <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    269c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    269e:	4b02      	ldr	r3, [pc, #8]	; (26a8 <SERCOM5_1_Handler+0xc>)
    26a0:	6818      	ldr	r0, [r3, #0]
    26a2:	4b02      	ldr	r3, [pc, #8]	; (26ac <SERCOM5_1_Handler+0x10>)
    26a4:	4798      	blx	r3
    26a6:	bd08      	pop	{r3, pc}
    26a8:	20000218 	.word	0x20000218
    26ac:	00002409 	.word	0x00002409

000026b0 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    26b0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    26b2:	4b02      	ldr	r3, [pc, #8]	; (26bc <SERCOM5_2_Handler+0xc>)
    26b4:	6818      	ldr	r0, [r3, #0]
    26b6:	4b02      	ldr	r3, [pc, #8]	; (26c0 <SERCOM5_2_Handler+0x10>)
    26b8:	4798      	blx	r3
    26ba:	bd08      	pop	{r3, pc}
    26bc:	20000218 	.word	0x20000218
    26c0:	00002409 	.word	0x00002409

000026c4 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    26c4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    26c6:	4b02      	ldr	r3, [pc, #8]	; (26d0 <SERCOM5_3_Handler+0xc>)
    26c8:	6818      	ldr	r0, [r3, #0]
    26ca:	4b02      	ldr	r3, [pc, #8]	; (26d4 <SERCOM5_3_Handler+0x10>)
    26cc:	4798      	blx	r3
    26ce:	bd08      	pop	{r3, pc}
    26d0:	20000218 	.word	0x20000218
    26d4:	00002409 	.word	0x00002409

000026d8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    26d8:	4b03      	ldr	r3, [pc, #12]	; (26e8 <_system_time_init+0x10>)
    26da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    26de:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    26e0:	2205      	movs	r2, #5
    26e2:	601a      	str	r2, [r3, #0]
    26e4:	4770      	bx	lr
    26e6:	bf00      	nop
    26e8:	e000e010 	.word	0xe000e010

000026ec <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    26ec:	b508      	push	{r3, lr}
	_system_time_init(hw);
    26ee:	4b01      	ldr	r3, [pc, #4]	; (26f4 <_delay_init+0x8>)
    26f0:	4798      	blx	r3
    26f2:	bd08      	pop	{r3, pc}
    26f4:	000026d9 	.word	0x000026d9

000026f8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    26f8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    26fa:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    26fc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    26fe:	f012 0f01 	tst.w	r2, #1
    2702:	d100      	bne.n	2706 <tc_interrupt_handler+0xe>
    2704:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2706:	2201      	movs	r2, #1
    2708:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    270a:	6803      	ldr	r3, [r0, #0]
    270c:	4798      	blx	r3
	}
}
    270e:	e7f9      	b.n	2704 <tc_interrupt_handler+0xc>

00002710 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2710:	b538      	push	{r3, r4, r5, lr}
    2712:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2714:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2716:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2718:	f013 0f01 	tst.w	r3, #1
    271c:	d004      	beq.n	2728 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    271e:	2301      	movs	r3, #1
    2720:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2722:	6803      	ldr	r3, [r0, #0]
    2724:	b103      	cbz	r3, 2728 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2726:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2728:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    272a:	f013 0f02 	tst.w	r3, #2
    272e:	d005      	beq.n	273c <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2730:	2302      	movs	r3, #2
    2732:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2734:	686b      	ldr	r3, [r5, #4]
    2736:	b10b      	cbz	r3, 273c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2738:	4628      	mov	r0, r5
    273a:	4798      	blx	r3
    273c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002740 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2740:	4b06      	ldr	r3, [pc, #24]	; (275c <_tc_init_irq_param+0x1c>)
    2742:	4298      	cmp	r0, r3
    2744:	d003      	beq.n	274e <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2746:	4b06      	ldr	r3, [pc, #24]	; (2760 <_tc_init_irq_param+0x20>)
    2748:	4298      	cmp	r0, r3
    274a:	d003      	beq.n	2754 <_tc_init_irq_param+0x14>
    274c:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <_tc_init_irq_param+0x24>)
    2750:	6019      	str	r1, [r3, #0]
    2752:	e7f8      	b.n	2746 <_tc_init_irq_param+0x6>
		_tc1_dev = (struct _timer_device *)dev;
    2754:	4b03      	ldr	r3, [pc, #12]	; (2764 <_tc_init_irq_param+0x24>)
    2756:	6059      	str	r1, [r3, #4]
	}
}
    2758:	e7f8      	b.n	274c <_tc_init_irq_param+0xc>
    275a:	bf00      	nop
    275c:	40003800 	.word	0x40003800
    2760:	40003c00 	.word	0x40003c00
    2764:	2000021c 	.word	0x2000021c

00002768 <get_tc_index>:
{
    2768:	b570      	push	{r4, r5, r6, lr}
    276a:	b086      	sub	sp, #24
    276c:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    276e:	466c      	mov	r4, sp
    2770:	4d17      	ldr	r5, [pc, #92]	; (27d0 <get_tc_index+0x68>)
    2772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2776:	e895 0003 	ldmia.w	r5, {r0, r1}
    277a:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    277e:	2300      	movs	r3, #0
    2780:	2b05      	cmp	r3, #5
    2782:	d80a      	bhi.n	279a <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2784:	aa06      	add	r2, sp, #24
    2786:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    278a:	f852 2c18 	ldr.w	r2, [r2, #-24]
    278e:	42b2      	cmp	r2, r6
    2790:	d001      	beq.n	2796 <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2792:	3301      	adds	r3, #1
    2794:	e7f4      	b.n	2780 <get_tc_index+0x18>
			return i;
    2796:	b2db      	uxtb	r3, r3
    2798:	e000      	b.n	279c <get_tc_index+0x34>
		}
	}
	return 0;
    279a:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    279c:	2200      	movs	r2, #0
    279e:	2a01      	cmp	r2, #1
    27a0:	d80b      	bhi.n	27ba <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    27a2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    27a6:	0081      	lsls	r1, r0, #2
    27a8:	480a      	ldr	r0, [pc, #40]	; (27d4 <get_tc_index+0x6c>)
    27aa:	5c41      	ldrb	r1, [r0, r1]
    27ac:	4299      	cmp	r1, r3
    27ae:	d002      	beq.n	27b6 <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    27b0:	3201      	adds	r2, #1
    27b2:	b2d2      	uxtb	r2, r2
    27b4:	e7f3      	b.n	279e <get_tc_index+0x36>
			return i;
    27b6:	b250      	sxtb	r0, r2
    27b8:	e007      	b.n	27ca <get_tc_index+0x62>
	ASSERT(false);
    27ba:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    27be:	4906      	ldr	r1, [pc, #24]	; (27d8 <get_tc_index+0x70>)
    27c0:	2000      	movs	r0, #0
    27c2:	4b06      	ldr	r3, [pc, #24]	; (27dc <get_tc_index+0x74>)
    27c4:	4798      	blx	r3
	return -1;
    27c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    27ca:	b006      	add	sp, #24
    27cc:	bd70      	pop	{r4, r5, r6, pc}
    27ce:	bf00      	nop
    27d0:	00003988 	.word	0x00003988
    27d4:	20000000 	.word	0x20000000
    27d8:	000039a0 	.word	0x000039a0
    27dc:	000013b9 	.word	0x000013b9

000027e0 <_timer_init>:
{
    27e0:	b570      	push	{r4, r5, r6, lr}
    27e2:	4606      	mov	r6, r0
    27e4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    27e6:	4608      	mov	r0, r1
    27e8:	4b6c      	ldr	r3, [pc, #432]	; (299c <_timer_init+0x1bc>)
    27ea:	4798      	blx	r3
    27ec:	4605      	mov	r5, r0
	device->hw = hw;
    27ee:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    27f0:	228f      	movs	r2, #143	; 0x8f
    27f2:	496b      	ldr	r1, [pc, #428]	; (29a0 <_timer_init+0x1c0>)
    27f4:	2001      	movs	r0, #1
    27f6:	4b6b      	ldr	r3, [pc, #428]	; (29a4 <_timer_init+0x1c4>)
    27f8:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    27fa:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    27fc:	f013 0f01 	tst.w	r3, #1
    2800:	d119      	bne.n	2836 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2802:	6923      	ldr	r3, [r4, #16]
    2804:	f013 0f03 	tst.w	r3, #3
    2808:	d1fb      	bne.n	2802 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    280a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    280c:	f013 0f02 	tst.w	r3, #2
    2810:	d00b      	beq.n	282a <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2812:	6823      	ldr	r3, [r4, #0]
    2814:	f023 0302 	bic.w	r3, r3, #2
    2818:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    281a:	6923      	ldr	r3, [r4, #16]
    281c:	f013 0f03 	tst.w	r3, #3
    2820:	d1fb      	bne.n	281a <_timer_init+0x3a>
    2822:	6923      	ldr	r3, [r4, #16]
    2824:	f013 0f02 	tst.w	r3, #2
    2828:	d1fb      	bne.n	2822 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    282a:	2301      	movs	r3, #1
    282c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    282e:	6923      	ldr	r3, [r4, #16]
    2830:	f013 0f03 	tst.w	r3, #3
    2834:	d1fb      	bne.n	282e <_timer_init+0x4e>
    2836:	6923      	ldr	r3, [r4, #16]
    2838:	f013 0f01 	tst.w	r3, #1
    283c:	d1fb      	bne.n	2836 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    283e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2842:	009a      	lsls	r2, r3, #2
    2844:	4b58      	ldr	r3, [pc, #352]	; (29a8 <_timer_init+0x1c8>)
    2846:	4413      	add	r3, r2
    2848:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    284a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    284c:	6923      	ldr	r3, [r4, #16]
    284e:	f013 0f03 	tst.w	r3, #3
    2852:	d1fb      	bne.n	284c <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2854:	00aa      	lsls	r2, r5, #2
    2856:	442a      	add	r2, r5
    2858:	0091      	lsls	r1, r2, #2
    285a:	4b53      	ldr	r3, [pc, #332]	; (29a8 <_timer_init+0x1c8>)
    285c:	440b      	add	r3, r1
    285e:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2860:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2862:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2864:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2866:	2201      	movs	r2, #1
    2868:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    286a:	685b      	ldr	r3, [r3, #4]
    286c:	f003 030c 	and.w	r3, r3, #12
    2870:	2b08      	cmp	r3, #8
    2872:	d05b      	beq.n	292c <_timer_init+0x14c>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2874:	2b00      	cmp	r3, #0
    2876:	d16d      	bne.n	2954 <_timer_init+0x174>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2878:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    287c:	009a      	lsls	r2, r3, #2
    287e:	4b4a      	ldr	r3, [pc, #296]	; (29a8 <_timer_init+0x1c8>)
    2880:	4413      	add	r3, r2
    2882:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2884:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2886:	6923      	ldr	r3, [r4, #16]
    2888:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    288c:	d1fb      	bne.n	2886 <_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    288e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2892:	009a      	lsls	r2, r3, #2
    2894:	4b44      	ldr	r3, [pc, #272]	; (29a8 <_timer_init+0x1c8>)
    2896:	4413      	add	r3, r2
    2898:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    289a:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    289c:	6923      	ldr	r3, [r4, #16]
    289e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    28a2:	d1fb      	bne.n	289c <_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    28a4:	2301      	movs	r3, #1
    28a6:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    28a8:	4631      	mov	r1, r6
    28aa:	4620      	mov	r0, r4
    28ac:	4b3f      	ldr	r3, [pc, #252]	; (29ac <_timer_init+0x1cc>)
    28ae:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    28b0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    28b4:	009a      	lsls	r2, r3, #2
    28b6:	4b3c      	ldr	r3, [pc, #240]	; (29a8 <_timer_init+0x1c8>)
    28b8:	4413      	add	r3, r2
    28ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    28be:	2b00      	cmp	r3, #0
    28c0:	db0d      	blt.n	28de <_timer_init+0xfe>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28c2:	095a      	lsrs	r2, r3, #5
    28c4:	f003 031f 	and.w	r3, r3, #31
    28c8:	2101      	movs	r1, #1
    28ca:	fa01 f303 	lsl.w	r3, r1, r3
    28ce:	3220      	adds	r2, #32
    28d0:	4937      	ldr	r1, [pc, #220]	; (29b0 <_timer_init+0x1d0>)
    28d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    28d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28da:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    28de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    28e2:	009a      	lsls	r2, r3, #2
    28e4:	4b30      	ldr	r3, [pc, #192]	; (29a8 <_timer_init+0x1c8>)
    28e6:	4413      	add	r3, r2
    28e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    28ec:	2b00      	cmp	r3, #0
    28ee:	db09      	blt.n	2904 <_timer_init+0x124>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28f0:	095a      	lsrs	r2, r3, #5
    28f2:	f003 031f 	and.w	r3, r3, #31
    28f6:	2101      	movs	r1, #1
    28f8:	fa01 f303 	lsl.w	r3, r1, r3
    28fc:	3260      	adds	r2, #96	; 0x60
    28fe:	492c      	ldr	r1, [pc, #176]	; (29b0 <_timer_init+0x1d0>)
    2900:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2904:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2908:	00aa      	lsls	r2, r5, #2
    290a:	4b27      	ldr	r3, [pc, #156]	; (29a8 <_timer_init+0x1c8>)
    290c:	4413      	add	r3, r2
    290e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2912:	2b00      	cmp	r3, #0
    2914:	db08      	blt.n	2928 <_timer_init+0x148>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2916:	0959      	lsrs	r1, r3, #5
    2918:	f003 031f 	and.w	r3, r3, #31
    291c:	2201      	movs	r2, #1
    291e:	fa02 f303 	lsl.w	r3, r2, r3
    2922:	4a23      	ldr	r2, [pc, #140]	; (29b0 <_timer_init+0x1d0>)
    2924:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2928:	2000      	movs	r0, #0
    292a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    292c:	4b1e      	ldr	r3, [pc, #120]	; (29a8 <_timer_init+0x1c8>)
    292e:	440b      	add	r3, r1
    2930:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2932:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2934:	6923      	ldr	r3, [r4, #16]
    2936:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    293a:	d1fb      	bne.n	2934 <_timer_init+0x154>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    293c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2940:	009a      	lsls	r2, r3, #2
    2942:	4b19      	ldr	r3, [pc, #100]	; (29a8 <_timer_init+0x1c8>)
    2944:	4413      	add	r3, r2
    2946:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2948:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    294a:	6923      	ldr	r3, [r4, #16]
    294c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2950:	d1fb      	bne.n	294a <_timer_init+0x16a>
    2952:	e7a7      	b.n	28a4 <_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2954:	2b04      	cmp	r3, #4
    2956:	d1a5      	bne.n	28a4 <_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2958:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    295c:	009a      	lsls	r2, r3, #2
    295e:	4b12      	ldr	r3, [pc, #72]	; (29a8 <_timer_init+0x1c8>)
    2960:	4413      	add	r3, r2
    2962:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2964:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2966:	6923      	ldr	r3, [r4, #16]
    2968:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    296c:	d1fb      	bne.n	2966 <_timer_init+0x186>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    296e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2972:	009a      	lsls	r2, r3, #2
    2974:	4b0c      	ldr	r3, [pc, #48]	; (29a8 <_timer_init+0x1c8>)
    2976:	4413      	add	r3, r2
    2978:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    297a:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    297c:	6923      	ldr	r3, [r4, #16]
    297e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2982:	d1fb      	bne.n	297c <_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2984:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2988:	009a      	lsls	r2, r3, #2
    298a:	4b07      	ldr	r3, [pc, #28]	; (29a8 <_timer_init+0x1c8>)
    298c:	4413      	add	r3, r2
    298e:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2990:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2992:	6923      	ldr	r3, [r4, #16]
    2994:	f013 0f20 	tst.w	r3, #32
    2998:	d1fb      	bne.n	2992 <_timer_init+0x1b2>
    299a:	e783      	b.n	28a4 <_timer_init+0xc4>
    299c:	00002769 	.word	0x00002769
    29a0:	000039a0 	.word	0x000039a0
    29a4:	000013b9 	.word	0x000013b9
    29a8:	20000000 	.word	0x20000000
    29ac:	00002741 	.word	0x00002741
    29b0:	e000e100 	.word	0xe000e100

000029b4 <_pwm_init>:
{
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	4606      	mov	r6, r0
    29b8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    29ba:	4608      	mov	r0, r1
    29bc:	4b59      	ldr	r3, [pc, #356]	; (2b24 <_pwm_init+0x170>)
    29be:	4798      	blx	r3
    29c0:	4605      	mov	r5, r0
	device->hw = hw;
    29c2:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    29c4:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    29c6:	f013 0f01 	tst.w	r3, #1
    29ca:	d119      	bne.n	2a00 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29cc:	6923      	ldr	r3, [r4, #16]
    29ce:	f013 0f03 	tst.w	r3, #3
    29d2:	d1fb      	bne.n	29cc <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    29d4:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    29d6:	f013 0f02 	tst.w	r3, #2
    29da:	d00b      	beq.n	29f4 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    29dc:	6823      	ldr	r3, [r4, #0]
    29de:	f023 0302 	bic.w	r3, r3, #2
    29e2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29e4:	6923      	ldr	r3, [r4, #16]
    29e6:	f013 0f03 	tst.w	r3, #3
    29ea:	d1fb      	bne.n	29e4 <_pwm_init+0x30>
    29ec:	6923      	ldr	r3, [r4, #16]
    29ee:	f013 0f02 	tst.w	r3, #2
    29f2:	d1fb      	bne.n	29ec <_pwm_init+0x38>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    29f4:	2301      	movs	r3, #1
    29f6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    29f8:	6923      	ldr	r3, [r4, #16]
    29fa:	f013 0f03 	tst.w	r3, #3
    29fe:	d1fb      	bne.n	29f8 <_pwm_init+0x44>
    2a00:	6923      	ldr	r3, [r4, #16]
    2a02:	f013 0f01 	tst.w	r3, #1
    2a06:	d1fb      	bne.n	2a00 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2a08:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a0c:	009a      	lsls	r2, r3, #2
    2a0e:	4b46      	ldr	r3, [pc, #280]	; (2b28 <_pwm_init+0x174>)
    2a10:	4413      	add	r3, r2
    2a12:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2a14:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a16:	6923      	ldr	r3, [r4, #16]
    2a18:	f013 0f03 	tst.w	r3, #3
    2a1c:	d1fb      	bne.n	2a16 <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2a1e:	00aa      	lsls	r2, r5, #2
    2a20:	442a      	add	r2, r5
    2a22:	0091      	lsls	r1, r2, #2
    2a24:	4b40      	ldr	r3, [pc, #256]	; (2b28 <_pwm_init+0x174>)
    2a26:	440b      	add	r3, r1
    2a28:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2a2a:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2a2c:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2a2e:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2a30:	2203      	movs	r2, #3
    2a32:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2a34:	685b      	ldr	r3, [r3, #4]
    2a36:	f003 030c 	and.w	r3, r3, #12
    2a3a:	2b08      	cmp	r3, #8
    2a3c:	d059      	beq.n	2af2 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d16b      	bne.n	2b1a <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2a42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a46:	009a      	lsls	r2, r3, #2
    2a48:	4b37      	ldr	r3, [pc, #220]	; (2b28 <_pwm_init+0x174>)
    2a4a:	4413      	add	r3, r2
    2a4c:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a4e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a50:	6923      	ldr	r3, [r4, #16]
    2a52:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2a56:	d1fb      	bne.n	2a50 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2a58:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a5c:	009a      	lsls	r2, r3, #2
    2a5e:	4b32      	ldr	r3, [pc, #200]	; (2b28 <_pwm_init+0x174>)
    2a60:	4413      	add	r3, r2
    2a62:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2a64:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2a66:	6923      	ldr	r3, [r4, #16]
    2a68:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2a6c:	d1fb      	bne.n	2a66 <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2a6e:	4631      	mov	r1, r6
    2a70:	4620      	mov	r0, r4
    2a72:	4b2e      	ldr	r3, [pc, #184]	; (2b2c <_pwm_init+0x178>)
    2a74:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2a76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2a7a:	009a      	lsls	r2, r3, #2
    2a7c:	4b2a      	ldr	r3, [pc, #168]	; (2b28 <_pwm_init+0x174>)
    2a7e:	4413      	add	r3, r2
    2a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2a84:	2b00      	cmp	r3, #0
    2a86:	db0d      	blt.n	2aa4 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a88:	095a      	lsrs	r2, r3, #5
    2a8a:	f003 031f 	and.w	r3, r3, #31
    2a8e:	2101      	movs	r1, #1
    2a90:	fa01 f303 	lsl.w	r3, r1, r3
    2a94:	3220      	adds	r2, #32
    2a96:	4926      	ldr	r1, [pc, #152]	; (2b30 <_pwm_init+0x17c>)
    2a98:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2aa0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2aa4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2aa8:	009a      	lsls	r2, r3, #2
    2aaa:	4b1f      	ldr	r3, [pc, #124]	; (2b28 <_pwm_init+0x174>)
    2aac:	4413      	add	r3, r2
    2aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	db09      	blt.n	2aca <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ab6:	095a      	lsrs	r2, r3, #5
    2ab8:	f003 031f 	and.w	r3, r3, #31
    2abc:	2101      	movs	r1, #1
    2abe:	fa01 f303 	lsl.w	r3, r1, r3
    2ac2:	3260      	adds	r2, #96	; 0x60
    2ac4:	491a      	ldr	r1, [pc, #104]	; (2b30 <_pwm_init+0x17c>)
    2ac6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    2aca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2ace:	00aa      	lsls	r2, r5, #2
    2ad0:	4b15      	ldr	r3, [pc, #84]	; (2b28 <_pwm_init+0x174>)
    2ad2:	4413      	add	r3, r2
    2ad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2ad8:	2b00      	cmp	r3, #0
    2ada:	db21      	blt.n	2b20 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2adc:	0959      	lsrs	r1, r3, #5
    2ade:	f003 031f 	and.w	r3, r3, #31
    2ae2:	2201      	movs	r2, #1
    2ae4:	fa02 f303 	lsl.w	r3, r2, r3
    2ae8:	4a11      	ldr	r2, [pc, #68]	; (2b30 <_pwm_init+0x17c>)
    2aea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2aee:	2000      	movs	r0, #0
    2af0:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2af2:	4b0d      	ldr	r3, [pc, #52]	; (2b28 <_pwm_init+0x174>)
    2af4:	440b      	add	r3, r1
    2af6:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2af8:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2afa:	6923      	ldr	r3, [r4, #16]
    2afc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b00:	d1fb      	bne.n	2afa <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2b02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2b06:	009a      	lsls	r2, r3, #2
    2b08:	4b07      	ldr	r3, [pc, #28]	; (2b28 <_pwm_init+0x174>)
    2b0a:	4413      	add	r3, r2
    2b0c:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b0e:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b10:	6923      	ldr	r3, [r4, #16]
    2b12:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2b16:	d1fb      	bne.n	2b10 <_pwm_init+0x15c>
    2b18:	e7a9      	b.n	2a6e <_pwm_init+0xba>
		return -1;
    2b1a:	f04f 30ff 	mov.w	r0, #4294967295
    2b1e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2b20:	2000      	movs	r0, #0
}
    2b22:	bd70      	pop	{r4, r5, r6, pc}
    2b24:	00002769 	.word	0x00002769
    2b28:	20000000 	.word	0x20000000
    2b2c:	00002741 	.word	0x00002741
    2b30:	e000e100 	.word	0xe000e100

00002b34 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2b34:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2b36:	6813      	ldr	r3, [r2, #0]
    2b38:	f043 0302 	orr.w	r3, r3, #2
    2b3c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2b3e:	6913      	ldr	r3, [r2, #16]
    2b40:	f013 0f03 	tst.w	r3, #3
    2b44:	d1fb      	bne.n	2b3e <_timer_start+0xa>
}
    2b46:	4770      	bx	lr

00002b48 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2b48:	68c2      	ldr	r2, [r0, #12]
    2b4a:	6913      	ldr	r3, [r2, #16]
    2b4c:	f013 0f03 	tst.w	r3, #3
    2b50:	d1fb      	bne.n	2b4a <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2b52:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2b54:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    2b58:	4770      	bx	lr

00002b5a <_tc_get_timer>:
}
    2b5a:	2000      	movs	r0, #0
    2b5c:	4770      	bx	lr

00002b5e <_tc_get_pwm>:
}
    2b5e:	2000      	movs	r0, #0
    2b60:	4770      	bx	lr
	...

00002b64 <_timer_set_irq>:
{
    2b64:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2b66:	68c0      	ldr	r0, [r0, #12]
    2b68:	4b08      	ldr	r3, [pc, #32]	; (2b8c <_timer_set_irq+0x28>)
    2b6a:	4798      	blx	r3
    2b6c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2b6e:	f240 129d 	movw	r2, #413	; 0x19d
    2b72:	4907      	ldr	r1, [pc, #28]	; (2b90 <_timer_set_irq+0x2c>)
    2b74:	2001      	movs	r0, #1
    2b76:	4b07      	ldr	r3, [pc, #28]	; (2b94 <_timer_set_irq+0x30>)
    2b78:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2b7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2b7e:	00a2      	lsls	r2, r4, #2
    2b80:	4b05      	ldr	r3, [pc, #20]	; (2b98 <_timer_set_irq+0x34>)
    2b82:	4413      	add	r3, r2
    2b84:	7898      	ldrb	r0, [r3, #2]
    2b86:	4b05      	ldr	r3, [pc, #20]	; (2b9c <_timer_set_irq+0x38>)
    2b88:	4798      	blx	r3
    2b8a:	bd10      	pop	{r4, pc}
    2b8c:	00002769 	.word	0x00002769
    2b90:	000039a0 	.word	0x000039a0
    2b94:	000013b9 	.word	0x000013b9
    2b98:	20000000 	.word	0x20000000
    2b9c:	00001761 	.word	0x00001761

00002ba0 <TC0_Handler>:
{
    2ba0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2ba2:	4b02      	ldr	r3, [pc, #8]	; (2bac <TC0_Handler+0xc>)
    2ba4:	6818      	ldr	r0, [r3, #0]
    2ba6:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <TC0_Handler+0x10>)
    2ba8:	4798      	blx	r3
    2baa:	bd08      	pop	{r3, pc}
    2bac:	2000021c 	.word	0x2000021c
    2bb0:	00002711 	.word	0x00002711

00002bb4 <TC1_Handler>:
{
    2bb4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    2bb6:	4b02      	ldr	r3, [pc, #8]	; (2bc0 <TC1_Handler+0xc>)
    2bb8:	6858      	ldr	r0, [r3, #4]
    2bba:	4b02      	ldr	r3, [pc, #8]	; (2bc4 <TC1_Handler+0x10>)
    2bbc:	4798      	blx	r3
    2bbe:	bd08      	pop	{r3, pc}
    2bc0:	2000021c 	.word	0x2000021c
    2bc4:	000026f9 	.word	0x000026f9

00002bc8 <millisecondTimer_cb>:
	dataBuffer[numBuffer][BUFFER_HEADER_DATA_LENGTH_POS] = dataWordLength * 4; // In bytes
}

static void millisecondTimer_cb(const struct timer_task *const timer_task)
{
	timeMS++;
    2bc8:	4a02      	ldr	r2, [pc, #8]	; (2bd4 <millisecondTimer_cb+0xc>)
    2bca:	6813      	ldr	r3, [r2, #0]
    2bcc:	3301      	adds	r3, #1
    2bce:	6013      	str	r3, [r2, #0]
    2bd0:	4770      	bx	lr
    2bd2:	bf00      	nop
    2bd4:	20000224 	.word	0x20000224

00002bd8 <checkBattVoltage_cb>:
}

static void checkBattVoltage_cb(const struct timer_task *const timer_task)
{
    2bd8:	b510      	push	{r4, lr}
    2bda:	b082      	sub	sp, #8
	uint8_t adcValue;
	// Uses ADC0 to check batt voltage
	adc_sync_read_channel(&ADC_0, 0, &adcValue, 1);
    2bdc:	2301      	movs	r3, #1
    2bde:	f10d 0207 	add.w	r2, sp, #7
    2be2:	2100      	movs	r1, #0
    2be4:	4806      	ldr	r0, [pc, #24]	; (2c00 <checkBattVoltage_cb+0x28>)
    2be6:	4c07      	ldr	r4, [pc, #28]	; (2c04 <checkBattVoltage_cb+0x2c>)
    2be8:	47a0      	blx	r4
	// Compare to 1.1V band gap
	// Battery voltage goes through a 1/5x voltage divider
	
	// Raise issue if voltage is under 3.4V
	// 3.4V = 158
	if (adcValue < 158) {
    2bea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2bee:	2b9d      	cmp	r3, #157	; 0x9d
    2bf0:	d804      	bhi.n	2bfc <checkBattVoltage_cb+0x24>
		// Low voltage problem
		deviceState |= DEVICE_STATE_LOW_VOLTAGE;
    2bf2:	4a05      	ldr	r2, [pc, #20]	; (2c08 <checkBattVoltage_cb+0x30>)
    2bf4:	6813      	ldr	r3, [r2, #0]
    2bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2bfa:	6013      	str	r3, [r2, #0]
	}
}
    2bfc:	b002      	add	sp, #8
    2bfe:	bd10      	pop	{r4, pc}
    2c00:	200006c8 	.word	0x200006c8
    2c04:	00000c75 	.word	0x00000c75
    2c08:	20000028 	.word	0x20000028

00002c0c <getCurrentTimeMS>:
	return timeMS;
    2c0c:	4b01      	ldr	r3, [pc, #4]	; (2c14 <getCurrentTimeMS+0x8>)
    2c0e:	6818      	ldr	r0, [r3, #0]
}
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	20000224 	.word	0x20000224

00002c18 <getPropFromHeader>:
	return header32bit[headerPos];
    2c18:	4b02      	ldr	r3, [pc, #8]	; (2c24 <getPropFromHeader+0xc>)
    2c1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    2c1e:	6840      	ldr	r0, [r0, #4]
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop
    2c24:	20000224 	.word	0x20000224

00002c28 <setStatusLED>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2c28:	b928      	cbnz	r0, 2c36 <setStatusLED+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c2e:	4b05      	ldr	r3, [pc, #20]	; (2c44 <setStatusLED+0x1c>)
    2c30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2c34:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c36:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c3a:	4b02      	ldr	r3, [pc, #8]	; (2c44 <setStatusLED+0x1c>)
    2c3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2c40:	4770      	bx	lr
    2c42:	bf00      	nop
    2c44:	41008000 	.word	0x41008000

00002c48 <startRecording>:
	// To turn on DMA channel: 
	// _dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
}

void startRecording()
{
    2c48:	b510      	push	{r4, lr}
	writeFrameNum = 0;
    2c4a:	2400      	movs	r4, #0
    2c4c:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <startRecording+0x30>)
    2c4e:	601c      	str	r4, [r3, #0]
	writeBufferCount = 0;
    2c50:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <startRecording+0x34>)
    2c52:	601c      	str	r4, [r3, #0]
	droppedBufferCount = 0;
    2c54:	4b0a      	ldr	r3, [pc, #40]	; (2c80 <startRecording+0x38>)
    2c56:	601c      	str	r4, [r3, #0]
	droppedFrameCount = 0;
    2c58:	4b0a      	ldr	r3, [pc, #40]	; (2c84 <startRecording+0x3c>)
    2c5a:	601c      	str	r4, [r3, #0]
	framesToDrop = 0;
    2c5c:	4b0a      	ldr	r3, [pc, #40]	; (2c88 <startRecording+0x40>)
    2c5e:	601c      	str	r4, [r3, #0]
	
	startTimeMS = getCurrentTimeMS();
    2c60:	4b0a      	ldr	r3, [pc, #40]	; (2c8c <startRecording+0x44>)
    2c62:	4798      	blx	r3
    2c64:	4b0a      	ldr	r3, [pc, #40]	; (2c90 <startRecording+0x48>)
    2c66:	6018      	str	r0, [r3, #0]
	
	deviceState &= !(DEVICE_STATE_START_RECORDING);
    2c68:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <startRecording+0x4c>)
    2c6a:	681a      	ldr	r2, [r3, #0]
    2c6c:	601c      	str	r4, [r3, #0]
	deviceState |= DEVICE_STATE_START_RECORDING_WAITING;
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    2c74:	601a      	str	r2, [r3, #0]
    2c76:	bd10      	pop	{r4, pc}
    2c78:	20000bd0 	.word	0x20000bd0
    2c7c:	20000bcc 	.word	0x20000bcc
    2c80:	20000b7c 	.word	0x20000b7c
    2c84:	20000bc8 	.word	0x20000bc8
    2c88:	20000b78 	.word	0x20000b78
    2c8c:	00002c0d 	.word	0x00002c0d
    2c90:	20000bc4 	.word	0x20000bc4
    2c94:	20000028 	.word	0x20000028

00002c98 <stopRecording>:
}

void stopRecording()
{
    2c98:	b510      	push	{r4, lr}
	// TODO: Change status LEDs
	
	// Write end of recording info to a block
	// TODO: Add more meta data to this (frames dropped?, blocks written?, overall time, data starting block?)!
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_RECORDED_POS] = writeBufferCount;
    2c9a:	4b0f      	ldr	r3, [pc, #60]	; (2cd8 <stopRecording+0x40>)
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	b2db      	uxtb	r3, r3
    2ca0:	4c0e      	ldr	r4, [pc, #56]	; (2cdc <stopRecording+0x44>)
    2ca2:	f884 3208 	strb.w	r3, [r4, #520]	; 0x208
	configBlock[CONFIG_BLOCK_NUM_BUFFERS_DROPPED_POS] = droppedBufferCount;
    2ca6:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <stopRecording+0x48>)
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	b2db      	uxtb	r3, r3
    2cac:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
	sd_mmc_init_write_blocks(0,STARTING_BLOCK, 1);
    2cb0:	2201      	movs	r2, #1
    2cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2cb6:	2000      	movs	r0, #0
    2cb8:	4b0a      	ldr	r3, [pc, #40]	; (2ce4 <stopRecording+0x4c>)
    2cba:	4798      	blx	r3
	sd_mmc_start_write_blocks(configBlock, 1);
    2cbc:	2101      	movs	r1, #1
    2cbe:	f504 7001 	add.w	r0, r4, #516	; 0x204
    2cc2:	4b09      	ldr	r3, [pc, #36]	; (2ce8 <stopRecording+0x50>)
    2cc4:	4798      	blx	r3
	sd_mmc_wait_end_of_write_blocks(false);
    2cc6:	2000      	movs	r0, #0
    2cc8:	4b08      	ldr	r3, [pc, #32]	; (2cec <stopRecording+0x54>)
    2cca:	4798      	blx	r3
	
	deviceState |= DEVICE_STATE_STOP_RECORDING;
    2ccc:	4a08      	ldr	r2, [pc, #32]	; (2cf0 <stopRecording+0x58>)
    2cce:	6813      	ldr	r3, [r2, #0]
    2cd0:	f043 0310 	orr.w	r3, r3, #16
    2cd4:	6013      	str	r3, [r2, #0]
    2cd6:	bd10      	pop	{r4, pc}
    2cd8:	20000bcc 	.word	0x20000bcc
    2cdc:	20000224 	.word	0x20000224
    2ce0:	20000b7c 	.word	0x20000b7c
    2ce4:	000031cd 	.word	0x000031cd
    2ce8:	0000326d 	.word	0x0000326d
    2cec:	000032b9 	.word	0x000032b9
    2cf0:	20000028 	.word	0x20000028

00002cf4 <recording>:
//	deviceState &= !(DEVICE_STATE_RECORDING);	
}

void recording()
{
	if (bufferCount > (writeBufferCount + droppedBufferCount)) {
    2cf4:	4b56      	ldr	r3, [pc, #344]	; (2e50 <recording+0x15c>)
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	4a56      	ldr	r2, [pc, #344]	; (2e54 <recording+0x160>)
    2cfa:	6812      	ldr	r2, [r2, #0]
    2cfc:	4413      	add	r3, r2
    2cfe:	4a56      	ldr	r2, [pc, #344]	; (2e58 <recording+0x164>)
    2d00:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    2d04:	4293      	cmp	r3, r2
    2d06:	f080 80a2 	bcs.w	2e4e <recording+0x15a>
{
    2d0a:	b510      	push	{r4, lr}
		// This means there are filled buffer(s) ready to be written to SD card
		
		// We need to check if the writing to sd card of data buffers has fallen too far behind where we are at risk
		// of writing overwritten data. We need to detect this and decide what to do in this case
		if (bufferCount > (writeBufferCount + droppedBufferCount + NUM_BUFFERS)) {
    2d0c:	4b50      	ldr	r3, [pc, #320]	; (2e50 <recording+0x15c>)
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	4a50      	ldr	r2, [pc, #320]	; (2e54 <recording+0x160>)
    2d12:	6812      	ldr	r2, [r2, #0]
    2d14:	4413      	add	r3, r2
    2d16:	3304      	adds	r3, #4
    2d18:	4a4f      	ldr	r2, [pc, #316]	; (2e58 <recording+0x164>)
    2d1a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
    2d1e:	4293      	cmp	r3, r2
    2d20:	d221      	bcs.n	2d66 <recording+0x72>
			// We  are at risk of at least the current buffer that we want to write to SD card being overflown with new image data
			// We are going to just drop writing the rest of this frame
			
			// Let's figure out how many buffers need to be dropped
			droppedBufferCount += (NUM_BUFFERS - (writeBufferCount + droppedBufferCount) % NUM_BUFFERS);
    2d22:	4b4b      	ldr	r3, [pc, #300]	; (2e50 <recording+0x15c>)
    2d24:	681b      	ldr	r3, [r3, #0]
    2d26:	4a4b      	ldr	r2, [pc, #300]	; (2e54 <recording+0x160>)
    2d28:	6811      	ldr	r1, [r2, #0]
    2d2a:	440b      	add	r3, r1
    2d2c:	f003 0303 	and.w	r3, r3, #3
    2d30:	f1c3 0304 	rsb	r3, r3, #4
    2d34:	6811      	ldr	r1, [r2, #0]
    2d36:	440b      	add	r3, r1
    2d38:	6013      	str	r3, [r2, #0]
			//writeFrameNum = bufferToWrite[BUFFER_HEADER_FRAME_NUM_POS];
			writeBufferCount++;
			
		}
		
		if (((getCurrentTimeMS() - startTimeMS) >= getPropFromHeader(HEADER_RECORD_LENGTH_POS) * 1000) & (getPropFromHeader(HEADER_RECORD_LENGTH_POS) != 0)){
    2d3a:	4b48      	ldr	r3, [pc, #288]	; (2e5c <recording+0x168>)
    2d3c:	4798      	blx	r3
    2d3e:	4b48      	ldr	r3, [pc, #288]	; (2e60 <recording+0x16c>)
    2d40:	681c      	ldr	r4, [r3, #0]
    2d42:	1b04      	subs	r4, r0, r4
    2d44:	2007      	movs	r0, #7
    2d46:	4b47      	ldr	r3, [pc, #284]	; (2e64 <recording+0x170>)
    2d48:	4798      	blx	r3
    2d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2d4e:	fb03 f300 	mul.w	r3, r3, r0
    2d52:	429c      	cmp	r4, r3
    2d54:	bf34      	ite	cc
    2d56:	2400      	movcc	r4, #0
    2d58:	2401      	movcs	r4, #1
    2d5a:	2800      	cmp	r0, #0
    2d5c:	bf08      	it	eq
    2d5e:	2400      	moveq	r4, #0
    2d60:	2c00      	cmp	r4, #0
    2d62:	d171      	bne.n	2e48 <recording+0x154>
    2d64:	bd10      	pop	{r4, pc}
			bufferToWrite = (uint32_t)(&dataBuffer[(writeBufferCount + droppedBufferCount) % NUM_BUFFERS]);
    2d66:	4c3a      	ldr	r4, [pc, #232]	; (2e50 <recording+0x15c>)
    2d68:	6823      	ldr	r3, [r4, #0]
    2d6a:	493a      	ldr	r1, [pc, #232]	; (2e54 <recording+0x160>)
    2d6c:	680a      	ldr	r2, [r1, #0]
    2d6e:	4413      	add	r3, r2
    2d70:	f003 0303 	and.w	r3, r3, #3
    2d74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2d78:	0358      	lsls	r0, r3, #13
    2d7a:	4b3b      	ldr	r3, [pc, #236]	; (2e68 <recording+0x174>)
    2d7c:	4418      	add	r0, r3
    2d7e:	4b3b      	ldr	r3, [pc, #236]	; (2e6c <recording+0x178>)
    2d80:	6018      	str	r0, [r3, #0]
			numBlocks = (bufferToWrite[BUFFER_HEADER_DATA_LENGTH_POS] + (BUFFER_HEADER_LENGTH * 4) + (SD_BLOCK_SIZE - 1)) / SD_BLOCK_SIZE;
    2d82:	6a03      	ldr	r3, [r0, #32]
    2d84:	f203 2323 	addw	r3, r3, #547	; 0x223
    2d88:	0a5b      	lsrs	r3, r3, #9
    2d8a:	4a39      	ldr	r2, [pc, #228]	; (2e70 <recording+0x17c>)
    2d8c:	6013      	str	r3, [r2, #0]
			bufferToWrite[BUFFER_HEADER_WRITE_BUFFER_COUNT_POS] = writeBufferCount;
    2d8e:	6823      	ldr	r3, [r4, #0]
    2d90:	6143      	str	r3, [r0, #20]
			bufferToWrite[BUFFER_HEADER_DROPPED_BUFFER_COUNT_POS] = droppedBufferCount;
    2d92:	680b      	ldr	r3, [r1, #0]
    2d94:	6183      	str	r3, [r0, #24]
			if (numBlocks < initBlocksRemaining) {
    2d96:	6812      	ldr	r2, [r2, #0]
    2d98:	4b36      	ldr	r3, [pc, #216]	; (2e74 <recording+0x180>)
    2d9a:	681b      	ldr	r3, [r3, #0]
    2d9c:	429a      	cmp	r2, r3
    2d9e:	d219      	bcs.n	2dd4 <recording+0xe0>
				if (sd_mmc_start_write_blocks(bufferToWrite, numBlocks) != SD_MMC_OK)
    2da0:	4b33      	ldr	r3, [pc, #204]	; (2e70 <recording+0x17c>)
    2da2:	6819      	ldr	r1, [r3, #0]
    2da4:	b289      	uxth	r1, r1
    2da6:	4b34      	ldr	r3, [pc, #208]	; (2e78 <recording+0x184>)
    2da8:	4798      	blx	r3
    2daa:	b978      	cbnz	r0, 2dcc <recording+0xd8>
				initBlocksRemaining -= numBlocks;
    2dac:	4a30      	ldr	r2, [pc, #192]	; (2e70 <recording+0x17c>)
    2dae:	6810      	ldr	r0, [r2, #0]
    2db0:	4930      	ldr	r1, [pc, #192]	; (2e74 <recording+0x180>)
    2db2:	680b      	ldr	r3, [r1, #0]
    2db4:	1a1b      	subs	r3, r3, r0
    2db6:	600b      	str	r3, [r1, #0]
				currentBlock += numBlocks;
    2db8:	6813      	ldr	r3, [r2, #0]
    2dba:	4a30      	ldr	r2, [pc, #192]	; (2e7c <recording+0x188>)
    2dbc:	6851      	ldr	r1, [r2, #4]
    2dbe:	440b      	add	r3, r1
    2dc0:	6053      	str	r3, [r2, #4]
			writeBufferCount++;
    2dc2:	4a23      	ldr	r2, [pc, #140]	; (2e50 <recording+0x15c>)
    2dc4:	6813      	ldr	r3, [r2, #0]
    2dc6:	3301      	adds	r3, #1
    2dc8:	6013      	str	r3, [r2, #0]
    2dca:	e7b6      	b.n	2d3a <recording+0x46>
				sd_mmc_wait_end_of_write_blocks(false);
    2dcc:	2000      	movs	r0, #0
    2dce:	4b2c      	ldr	r3, [pc, #176]	; (2e80 <recording+0x18c>)
    2dd0:	4798      	blx	r3
    2dd2:	e7eb      	b.n	2dac <recording+0xb8>
				if (sd_mmc_start_write_blocks(bufferToWrite, initBlocksRemaining) != SD_MMC_OK)
    2dd4:	4b27      	ldr	r3, [pc, #156]	; (2e74 <recording+0x180>)
    2dd6:	6819      	ldr	r1, [r3, #0]
    2dd8:	b289      	uxth	r1, r1
    2dda:	4b27      	ldr	r3, [pc, #156]	; (2e78 <recording+0x184>)
    2ddc:	4798      	blx	r3
    2dde:	b9e0      	cbnz	r0, 2e1a <recording+0x126>
				currentBlock += initBlocksRemaining;
    2de0:	4b24      	ldr	r3, [pc, #144]	; (2e74 <recording+0x180>)
    2de2:	681a      	ldr	r2, [r3, #0]
    2de4:	4b25      	ldr	r3, [pc, #148]	; (2e7c <recording+0x188>)
    2de6:	6859      	ldr	r1, [r3, #4]
    2de8:	440a      	add	r2, r1
    2dea:	605a      	str	r2, [r3, #4]
				if (sd_mmc_init_write_blocks(0, currentBlock, BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) != SD_MMC_OK)
    2dec:	6859      	ldr	r1, [r3, #4]
    2dee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    2df2:	2000      	movs	r0, #0
    2df4:	4b23      	ldr	r3, [pc, #140]	; (2e84 <recording+0x190>)
    2df6:	4798      	blx	r3
    2df8:	b998      	cbnz	r0, 2e22 <recording+0x12e>
				currentBlock += numBlocks - initBlocksRemaining;
    2dfa:	491d      	ldr	r1, [pc, #116]	; (2e70 <recording+0x17c>)
    2dfc:	680b      	ldr	r3, [r1, #0]
    2dfe:	4a1d      	ldr	r2, [pc, #116]	; (2e74 <recording+0x180>)
    2e00:	6810      	ldr	r0, [r2, #0]
    2e02:	1a1b      	subs	r3, r3, r0
    2e04:	481d      	ldr	r0, [pc, #116]	; (2e7c <recording+0x188>)
    2e06:	6844      	ldr	r4, [r0, #4]
    2e08:	4423      	add	r3, r4
    2e0a:	6043      	str	r3, [r0, #4]
				initBlocksRemaining = (BUFFER_BLOCK_LENGTH * NB_BUFFER_WRITES_PER_CHUNK) - (numBlocks - initBlocksRemaining);
    2e0c:	6813      	ldr	r3, [r2, #0]
    2e0e:	6809      	ldr	r1, [r1, #0]
    2e10:	1a5b      	subs	r3, r3, r1
    2e12:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
    2e16:	6013      	str	r3, [r2, #0]
    2e18:	e7d3      	b.n	2dc2 <recording+0xce>
				sd_mmc_wait_end_of_write_blocks(false);
    2e1a:	2000      	movs	r0, #0
    2e1c:	4b18      	ldr	r3, [pc, #96]	; (2e80 <recording+0x18c>)
    2e1e:	4798      	blx	r3
    2e20:	e7de      	b.n	2de0 <recording+0xec>
				if (sd_mmc_start_write_blocks((uint32_t)(&bufferToWrite[initBlocksRemaining * SD_BLOCK_SIZE / 4]), numBlocks - initBlocksRemaining) != SD_MMC_OK)
    2e22:	4b12      	ldr	r3, [pc, #72]	; (2e6c <recording+0x178>)
    2e24:	681a      	ldr	r2, [r3, #0]
    2e26:	4b13      	ldr	r3, [pc, #76]	; (2e74 <recording+0x180>)
    2e28:	6818      	ldr	r0, [r3, #0]
    2e2a:	4911      	ldr	r1, [pc, #68]	; (2e70 <recording+0x17c>)
    2e2c:	6809      	ldr	r1, [r1, #0]
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	1ac9      	subs	r1, r1, r3
    2e32:	b289      	uxth	r1, r1
    2e34:	eb02 2040 	add.w	r0, r2, r0, lsl #9
    2e38:	4b0f      	ldr	r3, [pc, #60]	; (2e78 <recording+0x184>)
    2e3a:	4798      	blx	r3
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d0dc      	beq.n	2dfa <recording+0x106>
				sd_mmc_wait_end_of_write_blocks(false);
    2e40:	2000      	movs	r0, #0
    2e42:	4b0f      	ldr	r3, [pc, #60]	; (2e80 <recording+0x18c>)
    2e44:	4798      	blx	r3
    2e46:	e7d8      	b.n	2dfa <recording+0x106>
			// Recording time has elapsed
			stopRecording();			
    2e48:	4b0f      	ldr	r3, [pc, #60]	; (2e88 <recording+0x194>)
    2e4a:	4798      	blx	r3
			
		}
		
	}
	
}
    2e4c:	e78a      	b.n	2d64 <recording+0x70>
    2e4e:	4770      	bx	lr
    2e50:	20000bcc 	.word	0x20000bcc
    2e54:	20000b7c 	.word	0x20000b7c
    2e58:	20000224 	.word	0x20000224
    2e5c:	00002c0d 	.word	0x00002c0d
    2e60:	20000bc4 	.word	0x20000bc4
    2e64:	00002c19 	.word	0x00002c19
    2e68:	20000bd4 	.word	0x20000bd4
    2e6c:	20000bc0 	.word	0x20000bc0
    2e70:	20028bd4 	.word	0x20028bd4
    2e74:	20028bd8 	.word	0x20028bd8
    2e78:	0000326d 	.word	0x0000326d
    2e7c:	20000028 	.word	0x20000028
    2e80:	000032b9 	.word	0x000032b9
    2e84:	000031cd 	.word	0x000031cd
    2e88:	00002c99 	.word	0x00002c99

00002e8c <main>:
int main(void)
{
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	b082      	sub	sp, #8
	uint32_t lastTime = 0;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2e90:	4b32      	ldr	r3, [pc, #200]	; (2f5c <main+0xd0>)
    2e92:	4798      	blx	r3
    2e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2e98:	4b31      	ldr	r3, [pc, #196]	; (2f60 <main+0xd4>)
    2e9a:	619a      	str	r2, [r3, #24]
	
	// Enable the 3.3V regulator
	gpio_set_pin_level(EN_3V3, true);

	setStatusLED(1);
    2e9c:	2001      	movs	r0, #1
    2e9e:	4b31      	ldr	r3, [pc, #196]	; (2f64 <main+0xd8>)
    2ea0:	4798      	blx	r3
	// Sets up a set of circularly linked list for camera DMA.
	linkedListInit(); 
	*/
	
	// Setup a timer to count in milliseconds
	TIMER_0_task1.interval = 10; // Need to check this value
    2ea2:	4c31      	ldr	r4, [pc, #196]	; (2f68 <main+0xdc>)
    2ea4:	230a      	movs	r3, #10
    2ea6:	f8c4 3418 	str.w	r3, [r4, #1048]	; 0x418
	TIMER_0_task1.cb       = millisecondTimer_cb;
    2eaa:	4b30      	ldr	r3, [pc, #192]	; (2f6c <main+0xe0>)
    2eac:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    2eb0:	2301      	movs	r3, #1
    2eb2:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
	
	TIMER_0_task2.interval = 100000; // Need to check this value
    2eb6:	4a2e      	ldr	r2, [pc, #184]	; (2f70 <main+0xe4>)
    2eb8:	f8c4 242c 	str.w	r2, [r4, #1068]	; 0x42c
	TIMER_0_task2.cb       = checkBattVoltage_cb;
    2ebc:	4a2d      	ldr	r2, [pc, #180]	; (2f74 <main+0xe8>)
    2ebe:	f8c4 2430 	str.w	r2, [r4, #1072]	; 0x430
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    2ec2:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    2ec6:	4d2c      	ldr	r5, [pc, #176]	; (2f78 <main+0xec>)
    2ec8:	f504 6182 	add.w	r1, r4, #1040	; 0x410
    2ecc:	4628      	mov	r0, r5
    2ece:	4e2b      	ldr	r6, [pc, #172]	; (2f7c <main+0xf0>)
    2ed0:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    2ed2:	f204 4124 	addw	r1, r4, #1060	; 0x424
    2ed6:	4628      	mov	r0, r5
    2ed8:	47b0      	blx	r6
	timer_start(&TIMER_0);
    2eda:	4628      	mov	r0, r5
    2edc:	4b28      	ldr	r3, [pc, #160]	; (2f80 <main+0xf4>)
    2ede:	4798      	blx	r3
	uint32_t lastTime = 0;
    2ee0:	2500      	movs	r5, #0
    2ee2:	e008      	b.n	2ef6 <main+0x6a>
	sd_mmc_start_write_blocks(configBlock, 1); // We will re-write this block at the end of recording too
	sd_mmc_wait_end_of_write_blocks(false);
	*/
	while (1) {
		if (deviceState & DEVICE_STATE_START_RECORDING)
			startRecording();
    2ee4:	4b27      	ldr	r3, [pc, #156]	; (2f84 <main+0xf8>)
    2ee6:	4798      	blx	r3
    2ee8:	e00a      	b.n	2f00 <main+0x74>
		if (deviceState & DEVICE_STATE_RECORDING) {
			recording();
    2eea:	4b27      	ldr	r3, [pc, #156]	; (2f88 <main+0xfc>)
    2eec:	4798      	blx	r3
    2eee:	e00c      	b.n	2f0a <main+0x7e>
			if (gpio_get_pin_level(LED_STATUS) == 1) {
				setStatusLED(0);
				
			}
			else {
				setStatusLED(1);
    2ef0:	2001      	movs	r0, #1
    2ef2:	4b1c      	ldr	r3, [pc, #112]	; (2f64 <main+0xd8>)
    2ef4:	4798      	blx	r3
		if (deviceState & DEVICE_STATE_START_RECORDING)
    2ef6:	4b25      	ldr	r3, [pc, #148]	; (2f8c <main+0x100>)
    2ef8:	681b      	ldr	r3, [r3, #0]
    2efa:	f013 0f04 	tst.w	r3, #4
    2efe:	d1f1      	bne.n	2ee4 <main+0x58>
		if (deviceState & DEVICE_STATE_RECORDING) {
    2f00:	4b22      	ldr	r3, [pc, #136]	; (2f8c <main+0x100>)
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	f013 0f08 	tst.w	r3, #8
    2f08:	d1ef      	bne.n	2eea <main+0x5e>
		if (timeMS%100 == 0 && lastTime != timeMS) {
    2f0a:	4b17      	ldr	r3, [pc, #92]	; (2f68 <main+0xdc>)
    2f0c:	681a      	ldr	r2, [r3, #0]
    2f0e:	4b20      	ldr	r3, [pc, #128]	; (2f90 <main+0x104>)
    2f10:	fba3 1302 	umull	r1, r3, r3, r2
    2f14:	095b      	lsrs	r3, r3, #5
    2f16:	2164      	movs	r1, #100	; 0x64
    2f18:	fb01 2313 	mls	r3, r1, r3, r2
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d1ea      	bne.n	2ef6 <main+0x6a>
    2f20:	4b11      	ldr	r3, [pc, #68]	; (2f68 <main+0xdc>)
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	429d      	cmp	r5, r3
    2f26:	d0e6      	beq.n	2ef6 <main+0x6a>
			lastTime = timeMS;
    2f28:	4b0f      	ldr	r3, [pc, #60]	; (2f68 <main+0xdc>)
    2f2a:	681d      	ldr	r5, [r3, #0]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2f2c:	a801      	add	r0, sp, #4
    2f2e:	4b19      	ldr	r3, [pc, #100]	; (2f94 <main+0x108>)
    2f30:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2f32:	4b0b      	ldr	r3, [pc, #44]	; (2f60 <main+0xd4>)
    2f34:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2f38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2f3c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2f40:	4054      	eors	r4, r2
    2f42:	400c      	ands	r4, r1
    2f44:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    2f46:	a801      	add	r0, sp, #4
    2f48:	4b13      	ldr	r3, [pc, #76]	; (2f98 <main+0x10c>)
    2f4a:	4798      	blx	r3
			if (gpio_get_pin_level(LED_STATUS) == 1) {
    2f4c:	f414 7f00 	tst.w	r4, #512	; 0x200
    2f50:	d0ce      	beq.n	2ef0 <main+0x64>
				setStatusLED(0);
    2f52:	2000      	movs	r0, #0
    2f54:	4b03      	ldr	r3, [pc, #12]	; (2f64 <main+0xd8>)
    2f56:	4798      	blx	r3
    2f58:	e7cd      	b.n	2ef6 <main+0x6a>
    2f5a:	bf00      	nop
    2f5c:	000002d1 	.word	0x000002d1
    2f60:	41008000 	.word	0x41008000
    2f64:	00002c29 	.word	0x00002c29
    2f68:	20000224 	.word	0x20000224
    2f6c:	00002bc9 	.word	0x00002bc9
    2f70:	000186a0 	.word	0x000186a0
    2f74:	00002bd9 	.word	0x00002bd9
    2f78:	20000738 	.word	0x20000738
    2f7c:	00001125 	.word	0x00001125
    2f80:	000010e9 	.word	0x000010e9
    2f84:	00002c49 	.word	0x00002c49
    2f88:	00002cf5 	.word	0x00002cf5
    2f8c:	20000028 	.word	0x20000028
    2f90:	51eb851f 	.word	0x51eb851f
    2f94:	00000d15 	.word	0x00000d15
    2f98:	00000d23 	.word	0x00000d23

00002f9c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    2f9c:	b510      	push	{r4, lr}
    2f9e:	b082      	sub	sp, #8
	driver_select_device(
	    sd_mmc_hal, sd_mmc_slot_sel, sd_mmc_card->clock, sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    2fa0:	4807      	ldr	r0, [pc, #28]	; (2fc0 <sd_mmc_configure_slot+0x24>)
    2fa2:	6802      	ldr	r2, [r0, #0]
    2fa4:	7f94      	ldrb	r4, [r2, #30]
	driver_select_device(
    2fa6:	7b53      	ldrb	r3, [r2, #13]
    2fa8:	6812      	ldr	r2, [r2, #0]
    2faa:	7901      	ldrb	r1, [r0, #4]
    2fac:	6880      	ldr	r0, [r0, #8]
    2fae:	3400      	adds	r4, #0
    2fb0:	bf18      	it	ne
    2fb2:	2401      	movne	r4, #1
    2fb4:	9400      	str	r4, [sp, #0]
    2fb6:	4c03      	ldr	r4, [pc, #12]	; (2fc4 <sd_mmc_configure_slot+0x28>)
    2fb8:	47a0      	blx	r4
}
    2fba:	b002      	add	sp, #8
    2fbc:	bd10      	pop	{r4, pc}
    2fbe:	bf00      	nop
    2fc0:	2000065c 	.word	0x2000065c
    2fc4:	00000e35 	.word	0x00000e35

00002fc8 <sd_mmc_select_slot>:
	if (slot >= CONF_SD_MMC_MEM_CNT) {
    2fc8:	b108      	cbz	r0, 2fce <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
    2fca:	2004      	movs	r0, #4
    2fcc:	4770      	bx	lr
{
    2fce:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd0:	b083      	sub	sp, #12
    2fd2:	4604      	mov	r4, r0
	if (_cd && _cd[slot].pin != -1) {
    2fd4:	4b45      	ldr	r3, [pc, #276]	; (30ec <sd_mmc_select_slot+0x124>)
    2fd6:	68db      	ldr	r3, [r3, #12]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d050      	beq.n	307e <sd_mmc_select_slot+0xb6>
    2fdc:	0087      	lsls	r7, r0, #2
    2fde:	f933 5020 	ldrsh.w	r5, [r3, r0, lsl #2]
    2fe2:	f1b5 3fff 	cmp.w	r5, #4294967295
    2fe6:	d04a      	beq.n	307e <sd_mmc_select_slot+0xb6>
		if (gpio_get_pin_level(_cd[slot].pin) != _cd[slot].val) {
    2fe8:	b2ed      	uxtb	r5, r5
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    2fea:	096e      	lsrs	r6, r5, #5
	CRITICAL_SECTION_ENTER();
    2fec:	a801      	add	r0, sp, #4
    2fee:	4b40      	ldr	r3, [pc, #256]	; (30f0 <sd_mmc_select_slot+0x128>)
    2ff0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2ff2:	4940      	ldr	r1, [pc, #256]	; (30f4 <sd_mmc_select_slot+0x12c>)
    2ff4:	01f3      	lsls	r3, r6, #7
    2ff6:	18ca      	adds	r2, r1, r3
    2ff8:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ffa:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2ffc:	6916      	ldr	r6, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    2ffe:	405e      	eors	r6, r3
    3000:	400e      	ands	r6, r1
    3002:	405e      	eors	r6, r3
	CRITICAL_SECTION_LEAVE();
    3004:	a801      	add	r0, sp, #4
    3006:	4b3c      	ldr	r3, [pc, #240]	; (30f8 <sd_mmc_select_slot+0x130>)
    3008:	4798      	blx	r3
    300a:	f005 051f 	and.w	r5, r5, #31
    300e:	2301      	movs	r3, #1
    3010:	fa03 f505 	lsl.w	r5, r3, r5
    3014:	4235      	tst	r5, r6
    3016:	bf14      	ite	ne
    3018:	461a      	movne	r2, r3
    301a:	2200      	moveq	r2, #0
    301c:	4b33      	ldr	r3, [pc, #204]	; (30ec <sd_mmc_select_slot+0x124>)
    301e:	68db      	ldr	r3, [r3, #12]
    3020:	441f      	add	r7, r3
    3022:	887b      	ldrh	r3, [r7, #2]
    3024:	429a      	cmp	r2, r3
    3026:	d006      	beq.n	3036 <sd_mmc_select_slot+0x6e>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    3028:	4b30      	ldr	r3, [pc, #192]	; (30ec <sd_mmc_select_slot+0x124>)
    302a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    302e:	2304      	movs	r3, #4
    3030:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3032:	2002      	movs	r0, #2
    3034:	e047      	b.n	30c6 <sd_mmc_select_slot+0xfe>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
    3036:	4b2d      	ldr	r3, [pc, #180]	; (30ec <sd_mmc_select_slot+0x124>)
    3038:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    303c:	7e9b      	ldrb	r3, [r3, #26]
    303e:	2b04      	cmp	r3, #4
    3040:	d009      	beq.n	3056 <sd_mmc_select_slot+0x8e>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
    3042:	2b01      	cmp	r3, #1
    3044:	d00e      	beq.n	3064 <sd_mmc_select_slot+0x9c>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
    3046:	4b29      	ldr	r3, [pc, #164]	; (30ec <sd_mmc_select_slot+0x124>)
    3048:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    304c:	7e9b      	ldrb	r3, [r3, #26]
    304e:	2b03      	cmp	r3, #3
    3050:	d11d      	bne.n	308e <sd_mmc_select_slot+0xc6>
			return SD_MMC_ERR_UNUSABLE;
    3052:	2003      	movs	r0, #3
    3054:	e037      	b.n	30c6 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
    3056:	4b25      	ldr	r3, [pc, #148]	; (30ec <sd_mmc_select_slot+0x124>)
    3058:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    305c:	2301      	movs	r3, #1
    305e:	76a3      	strb	r3, [r4, #26]
			return SD_MMC_ERR_NO_CARD;
    3060:	2002      	movs	r0, #2
    3062:	e030      	b.n	30c6 <sd_mmc_select_slot+0xfe>
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    3064:	4b21      	ldr	r3, [pc, #132]	; (30ec <sd_mmc_select_slot+0x124>)
    3066:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    306a:	2202      	movs	r2, #2
    306c:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    306e:	4a23      	ldr	r2, [pc, #140]	; (30fc <sd_mmc_select_slot+0x134>)
    3070:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    3072:	2201      	movs	r2, #1
    3074:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    3076:	2200      	movs	r2, #0
    3078:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    307c:	e7e3      	b.n	3046 <sd_mmc_select_slot+0x7e>
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    307e:	4b1b      	ldr	r3, [pc, #108]	; (30ec <sd_mmc_select_slot+0x124>)
    3080:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    3084:	7e9b      	ldrb	r3, [r3, #26]
		    || (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    3086:	3b03      	subs	r3, #3
    3088:	b2db      	uxtb	r3, r3
		if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    308a:	2b01      	cmp	r3, #1
    308c:	d91d      	bls.n	30ca <sd_mmc_select_slot+0x102>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    308e:	4b17      	ldr	r3, [pc, #92]	; (30ec <sd_mmc_select_slot+0x124>)
    3090:	791b      	ldrb	r3, [r3, #4]
    3092:	429c      	cmp	r4, r3
    3094:	d026      	beq.n	30e4 <sd_mmc_select_slot+0x11c>
    3096:	4b15      	ldr	r3, [pc, #84]	; (30ec <sd_mmc_select_slot+0x124>)
    3098:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    309a:	bb2b      	cbnz	r3, 30e8 <sd_mmc_select_slot+0x120>
    309c:	2001      	movs	r0, #1
    309e:	f240 422c 	movw	r2, #1068	; 0x42c
    30a2:	4917      	ldr	r1, [pc, #92]	; (3100 <sd_mmc_select_slot+0x138>)
    30a4:	4b17      	ldr	r3, [pc, #92]	; (3104 <sd_mmc_select_slot+0x13c>)
    30a6:	4798      	blx	r3
	sd_mmc_slot_sel = slot;
    30a8:	4d10      	ldr	r5, [pc, #64]	; (30ec <sd_mmc_select_slot+0x124>)
    30aa:	712c      	strb	r4, [r5, #4]
	sd_mmc_card     = &sd_mmc_cards[slot];
    30ac:	f105 0310 	add.w	r3, r5, #16
    30b0:	0164      	lsls	r4, r4, #5
    30b2:	4423      	add	r3, r4
    30b4:	602b      	str	r3, [r5, #0]
	sd_mmc_configure_slot();
    30b6:	4b14      	ldr	r3, [pc, #80]	; (3108 <sd_mmc_select_slot+0x140>)
    30b8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ? SD_MMC_INIT_ONGOING : SD_MMC_OK;
    30ba:	442c      	add	r4, r5
    30bc:	7ea0      	ldrb	r0, [r4, #26]
    30be:	2802      	cmp	r0, #2
    30c0:	bf14      	ite	ne
    30c2:	2000      	movne	r0, #0
    30c4:	2001      	moveq	r0, #1
}
    30c6:	b003      	add	sp, #12
    30c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    30ca:	4b08      	ldr	r3, [pc, #32]	; (30ec <sd_mmc_select_slot+0x124>)
    30cc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    30d0:	2202      	movs	r2, #2
    30d2:	769a      	strb	r2, [r3, #26]
			sd_mmc_cards[slot].clock      = SDMMC_CLOCK_INIT;
    30d4:	4a09      	ldr	r2, [pc, #36]	; (30fc <sd_mmc_select_slot+0x134>)
    30d6:	611a      	str	r2, [r3, #16]
			sd_mmc_cards[slot].bus_width  = 1;
    30d8:	2201      	movs	r2, #1
    30da:	775a      	strb	r2, [r3, #29]
			sd_mmc_cards[slot].high_speed = 0;
    30dc:	2200      	movs	r2, #0
    30de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    30e2:	e7d4      	b.n	308e <sd_mmc_select_slot+0xc6>
	ASSERT(!(sd_mmc_slot_sel != slot && sd_mmc_nb_block_remaining != 0));
    30e4:	2001      	movs	r0, #1
    30e6:	e7da      	b.n	309e <sd_mmc_select_slot+0xd6>
    30e8:	2000      	movs	r0, #0
    30ea:	e7d8      	b.n	309e <sd_mmc_select_slot+0xd6>
    30ec:	2000065c 	.word	0x2000065c
    30f0:	00000d15 	.word	0x00000d15
    30f4:	41008000 	.word	0x41008000
    30f8:	00000d23 	.word	0x00000d23
    30fc:	00061a80 	.word	0x00061a80
    3100:	000039b4 	.word	0x000039b4
    3104:	000013b9 	.word	0x000013b9
    3108:	00002f9d 	.word	0x00002f9d

0000310c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    310c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < CONF_SD_MMC_MEM_CNT) {
    310e:	4b04      	ldr	r3, [pc, #16]	; (3120 <sd_mmc_deselect_slot+0x14>)
    3110:	7919      	ldrb	r1, [r3, #4]
    3112:	b101      	cbz	r1, 3116 <sd_mmc_deselect_slot+0xa>
    3114:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_hal, sd_mmc_slot_sel);
    3116:	6898      	ldr	r0, [r3, #8]
    3118:	4b02      	ldr	r3, [pc, #8]	; (3124 <sd_mmc_deselect_slot+0x18>)
    311a:	4798      	blx	r3
	}
}
    311c:	e7fa      	b.n	3114 <sd_mmc_deselect_slot+0x8>
    311e:	bf00      	nop
    3120:	2000065c 	.word	0x2000065c
    3124:	00000e71 	.word	0x00000e71

00003128 <sd_mmc_init>:
#endif

/*--------------------- PUBLIC FUNCTIONS ----------------------------*/

void sd_mmc_init(void *hal, sd_mmc_detect_t *card_detects, sd_mmc_detect_t *wp_detects)
{
    3128:	b430      	push	{r4, r5}
	/* GPIO will be used to detect card and write protect.
	 * The related clocks and pinmux must be configurated in good
	 * condition. */

	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    312a:	2300      	movs	r3, #0
    312c:	b13b      	cbz	r3, 313e <sd_mmc_init+0x16>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; /* No slot configurated */
    312e:	4b08      	ldr	r3, [pc, #32]	; (3150 <sd_mmc_init+0x28>)
    3130:	24ff      	movs	r4, #255	; 0xff
    3132:	711c      	strb	r4, [r3, #4]
	sd_mmc_hal      = hal;
    3134:	6098      	str	r0, [r3, #8]
	_cd             = card_detects;
    3136:	60d9      	str	r1, [r3, #12]
	_wp             = wp_detects;
    3138:	635a      	str	r2, [r3, #52]	; 0x34
}
    313a:	bc30      	pop	{r4, r5}
    313c:	4770      	bx	lr
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    313e:	4c04      	ldr	r4, [pc, #16]	; (3150 <sd_mmc_init+0x28>)
    3140:	eb04 1443 	add.w	r4, r4, r3, lsl #5
    3144:	2504      	movs	r5, #4
    3146:	76a5      	strb	r5, [r4, #26]
	for (uint8_t slot = 0; slot < CONF_SD_MMC_MEM_CNT; slot++) {
    3148:	3301      	adds	r3, #1
    314a:	b2db      	uxtb	r3, r3
    314c:	e7ee      	b.n	312c <sd_mmc_init+0x4>
    314e:	bf00      	nop
    3150:	2000065c 	.word	0x2000065c

00003154 <sd_mmc_is_write_protected>:
}

bool sd_mmc_is_write_protected(uint8_t slot)
{
	/* No detection, always writable */
	if (!_wp || _wp[slot].pin == -1) {
    3154:	4b19      	ldr	r3, [pc, #100]	; (31bc <sd_mmc_is_write_protected+0x68>)
    3156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3158:	b35b      	cbz	r3, 31b2 <sd_mmc_is_write_protected+0x5e>
{
    315a:	b570      	push	{r4, r5, r6, lr}
    315c:	b082      	sub	sp, #8
	if (!_wp || _wp[slot].pin == -1) {
    315e:	0085      	lsls	r5, r0, #2
    3160:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
    3164:	f1b3 3fff 	cmp.w	r3, #4294967295
    3168:	d025      	beq.n	31b6 <sd_mmc_is_write_protected+0x62>
		return false;
	}
	/* Write Protect Detect */
	if (gpio_get_pin_level(_wp[slot].pin) == _wp[slot].val) {
    316a:	b2de      	uxtb	r6, r3
    316c:	0974      	lsrs	r4, r6, #5
	CRITICAL_SECTION_ENTER();
    316e:	a801      	add	r0, sp, #4
    3170:	4b13      	ldr	r3, [pc, #76]	; (31c0 <sd_mmc_is_write_protected+0x6c>)
    3172:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3174:	4913      	ldr	r1, [pc, #76]	; (31c4 <sd_mmc_is_write_protected+0x70>)
    3176:	01e3      	lsls	r3, r4, #7
    3178:	18ca      	adds	r2, r1, r3
    317a:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    317c:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    317e:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3180:	405c      	eors	r4, r3
    3182:	400c      	ands	r4, r1
    3184:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3186:	a801      	add	r0, sp, #4
    3188:	4b0f      	ldr	r3, [pc, #60]	; (31c8 <sd_mmc_is_write_protected+0x74>)
    318a:	4798      	blx	r3
    318c:	f006 031f 	and.w	r3, r6, #31
    3190:	2201      	movs	r2, #1
    3192:	fa02 f303 	lsl.w	r3, r2, r3
    3196:	4223      	tst	r3, r4
    3198:	bf08      	it	eq
    319a:	2200      	moveq	r2, #0
    319c:	4b07      	ldr	r3, [pc, #28]	; (31bc <sd_mmc_is_write_protected+0x68>)
    319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    31a0:	441d      	add	r5, r3
    31a2:	886b      	ldrh	r3, [r5, #2]
    31a4:	429a      	cmp	r2, r3
    31a6:	d002      	beq.n	31ae <sd_mmc_is_write_protected+0x5a>
		return true;
	}
	return false;
    31a8:	2000      	movs	r0, #0
}
    31aa:	b002      	add	sp, #8
    31ac:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    31ae:	2001      	movs	r0, #1
    31b0:	e7fb      	b.n	31aa <sd_mmc_is_write_protected+0x56>
		return false;
    31b2:	2000      	movs	r0, #0
    31b4:	4770      	bx	lr
    31b6:	2000      	movs	r0, #0
    31b8:	e7f7      	b.n	31aa <sd_mmc_is_write_protected+0x56>
    31ba:	bf00      	nop
    31bc:	2000065c 	.word	0x2000065c
    31c0:	00000d15 	.word	0x00000d15
    31c4:	41008000 	.word	0x41008000
    31c8:	00000d23 	.word	0x00000d23

000031cc <sd_mmc_init_write_blocks>:
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start, uint16_t nb_block)
{
    31cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ce:	b083      	sub	sp, #12
    31d0:	4607      	mov	r7, r0
    31d2:	460e      	mov	r6, r1
    31d4:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t     cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    31d6:	4b1c      	ldr	r3, [pc, #112]	; (3248 <sd_mmc_init_write_blocks+0x7c>)
    31d8:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
    31da:	4604      	mov	r4, r0
    31dc:	b110      	cbz	r0, 31e4 <sd_mmc_init_write_blocks+0x18>
	}

	sd_mmc_nb_block_remaining  = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    31de:	4620      	mov	r0, r4
    31e0:	b003      	add	sp, #12
    31e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    31e4:	4638      	mov	r0, r7
    31e6:	4b19      	ldr	r3, [pc, #100]	; (324c <sd_mmc_init_write_blocks+0x80>)
    31e8:	4798      	blx	r3
    31ea:	b9c0      	cbnz	r0, 321e <sd_mmc_init_write_blocks+0x52>
	if (nb_block > 1) {
    31ec:	2d01      	cmp	r5, #1
    31ee:	d91a      	bls.n	3226 <sd_mmc_init_write_blocks+0x5a>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    31f0:	4917      	ldr	r1, [pc, #92]	; (3250 <sd_mmc_init_write_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    31f2:	4b18      	ldr	r3, [pc, #96]	; (3254 <sd_mmc_init_write_blocks+0x88>)
    31f4:	681b      	ldr	r3, [r3, #0]
    31f6:	7adb      	ldrb	r3, [r3, #11]
    31f8:	f013 0f08 	tst.w	r3, #8
    31fc:	d100      	bne.n	3200 <sd_mmc_init_write_blocks+0x34>
		arg = (start * SD_MMC_BLOCK_SIZE);
    31fe:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(sd_mmc_hal, cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    3200:	4b14      	ldr	r3, [pc, #80]	; (3254 <sd_mmc_init_write_blocks+0x88>)
    3202:	6898      	ldr	r0, [r3, #8]
    3204:	2301      	movs	r3, #1
    3206:	9301      	str	r3, [sp, #4]
    3208:	9500      	str	r5, [sp, #0]
    320a:	f44f 7300 	mov.w	r3, #512	; 0x200
    320e:	4632      	mov	r2, r6
    3210:	4e11      	ldr	r6, [pc, #68]	; (3258 <sd_mmc_init_write_blocks+0x8c>)
    3212:	47b0      	blx	r6
    3214:	b948      	cbnz	r0, 322a <sd_mmc_init_write_blocks+0x5e>
		sd_mmc_deselect_slot();
    3216:	4b11      	ldr	r3, [pc, #68]	; (325c <sd_mmc_init_write_blocks+0x90>)
    3218:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    321a:	2405      	movs	r4, #5
    321c:	e7df      	b.n	31de <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    321e:	4b0f      	ldr	r3, [pc, #60]	; (325c <sd_mmc_init_write_blocks+0x90>)
    3220:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    3222:	2407      	movs	r4, #7
    3224:	e7db      	b.n	31de <sd_mmc_init_write_blocks+0x12>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    3226:	490e      	ldr	r1, [pc, #56]	; (3260 <sd_mmc_init_write_blocks+0x94>)
    3228:	e7e3      	b.n	31f2 <sd_mmc_init_write_blocks+0x26>
	resp = driver_get_response(sd_mmc_hal);
    322a:	4b0a      	ldr	r3, [pc, #40]	; (3254 <sd_mmc_init_write_blocks+0x88>)
    322c:	6898      	ldr	r0, [r3, #8]
    322e:	4b0d      	ldr	r3, [pc, #52]	; (3264 <sd_mmc_init_write_blocks+0x98>)
    3230:	4798      	blx	r3
	if (resp & CARD_STATUS_ERR_RD_WR) {
    3232:	4b0d      	ldr	r3, [pc, #52]	; (3268 <sd_mmc_init_write_blocks+0x9c>)
    3234:	4003      	ands	r3, r0
    3236:	b91b      	cbnz	r3, 3240 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining  = nb_block;
    3238:	4b06      	ldr	r3, [pc, #24]	; (3254 <sd_mmc_init_write_blocks+0x88>)
    323a:	861d      	strh	r5, [r3, #48]	; 0x30
	sd_mmc_nb_block_to_tranfer = nb_block;
    323c:	871d      	strh	r5, [r3, #56]	; 0x38
	return SD_MMC_OK;
    323e:	e7ce      	b.n	31de <sd_mmc_init_write_blocks+0x12>
		sd_mmc_deselect_slot();
    3240:	4b06      	ldr	r3, [pc, #24]	; (325c <sd_mmc_init_write_blocks+0x90>)
    3242:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3244:	2405      	movs	r4, #5
    3246:	e7ca      	b.n	31de <sd_mmc_init_write_blocks+0x12>
    3248:	00002fc9 	.word	0x00002fc9
    324c:	00003155 	.word	0x00003155
    3250:	00109119 	.word	0x00109119
    3254:	2000065c 	.word	0x2000065c
    3258:	00000ef5 	.word	0x00000ef5
    325c:	0000310d 	.word	0x0000310d
    3260:	00089118 	.word	0x00089118
    3264:	00000ecd 	.word	0x00000ecd
    3268:	e4580000 	.word	0xe4580000

0000326c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	4606      	mov	r6, r0
    3270:	460c      	mov	r4, r1
	ASSERT(sd_mmc_nb_block_remaining >= nb_block);
    3272:	4d0d      	ldr	r5, [pc, #52]	; (32a8 <sd_mmc_start_write_blocks+0x3c>)
    3274:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    3276:	f240 52fa 	movw	r2, #1530	; 0x5fa
    327a:	490c      	ldr	r1, [pc, #48]	; (32ac <sd_mmc_start_write_blocks+0x40>)
    327c:	42a0      	cmp	r0, r4
    327e:	bf34      	ite	cc
    3280:	2000      	movcc	r0, #0
    3282:	2001      	movcs	r0, #1
    3284:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <sd_mmc_start_write_blocks+0x44>)
    3286:	4798      	blx	r3
	if (!driver_start_write_blocks(sd_mmc_hal, src, nb_block)) {
    3288:	4622      	mov	r2, r4
    328a:	4631      	mov	r1, r6
    328c:	68a8      	ldr	r0, [r5, #8]
    328e:	4b09      	ldr	r3, [pc, #36]	; (32b4 <sd_mmc_start_write_blocks+0x48>)
    3290:	4798      	blx	r3
    3292:	b918      	cbnz	r0, 329c <sd_mmc_start_write_blocks+0x30>
		sd_mmc_nb_block_remaining = 0;
    3294:	2200      	movs	r2, #0
    3296:	862a      	strh	r2, [r5, #48]	; 0x30
		return SD_MMC_ERR_COMM;
    3298:	2005      	movs	r0, #5
    329a:	bd70      	pop	{r4, r5, r6, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
    329c:	4a02      	ldr	r2, [pc, #8]	; (32a8 <sd_mmc_start_write_blocks+0x3c>)
    329e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    32a0:	1b1c      	subs	r4, r3, r4
    32a2:	8614      	strh	r4, [r2, #48]	; 0x30
	return SD_MMC_OK;
    32a4:	2000      	movs	r0, #0
}
    32a6:	bd70      	pop	{r4, r5, r6, pc}
    32a8:	2000065c 	.word	0x2000065c
    32ac:	000039b4 	.word	0x000039b4
    32b0:	000013b9 	.word	0x000013b9
    32b4:	00000f39 	.word	0x00000f39

000032b8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    32b8:	b510      	push	{r4, lr}
    32ba:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks(sd_mmc_hal)) {
    32bc:	4b14      	ldr	r3, [pc, #80]	; (3310 <sd_mmc_wait_end_of_write_blocks+0x58>)
    32be:	6898      	ldr	r0, [r3, #8]
    32c0:	4b14      	ldr	r3, [pc, #80]	; (3314 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    32c2:	4798      	blx	r3
    32c4:	b908      	cbnz	r0, 32ca <sd_mmc_wait_end_of_write_blocks+0x12>
		return SD_MMC_ERR_COMM;
    32c6:	2005      	movs	r0, #5
    32c8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
    32ca:	b194      	cbz	r4, 32f2 <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    32cc:	2200      	movs	r2, #0
    32ce:	4b10      	ldr	r3, [pc, #64]	; (3310 <sd_mmc_wait_end_of_write_blocks+0x58>)
    32d0:	861a      	strh	r2, [r3, #48]	; 0x30
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	/* All blocks are transfered then stop write operation */
	if (sd_mmc_nb_block_to_tranfer == 1) {
    32d2:	4b0f      	ldr	r3, [pc, #60]	; (3310 <sd_mmc_wait_end_of_write_blocks+0x58>)
    32d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    32d6:	2b01      	cmp	r3, #1
    32d8:	d011      	beq.n	32fe <sd_mmc_wait_end_of_write_blocks+0x46>
		return SD_MMC_OK;
	}

	/* Note: SPI multiblock writes terminate using a special
	 * token, not a STOP_TRANSMISSION request.*/
	if (!driver_adtc_stop(sd_mmc_hal, SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    32da:	2200      	movs	r2, #0
    32dc:	f243 110c 	movw	r1, #12556	; 0x310c
    32e0:	4b0b      	ldr	r3, [pc, #44]	; (3310 <sd_mmc_wait_end_of_write_blocks+0x58>)
    32e2:	6898      	ldr	r0, [r3, #8]
    32e4:	4b0c      	ldr	r3, [pc, #48]	; (3318 <sd_mmc_wait_end_of_write_blocks+0x60>)
    32e6:	4798      	blx	r3
    32e8:	b968      	cbnz	r0, 3306 <sd_mmc_wait_end_of_write_blocks+0x4e>
		sd_mmc_deselect_slot();
    32ea:	4b0c      	ldr	r3, [pc, #48]	; (331c <sd_mmc_wait_end_of_write_blocks+0x64>)
    32ec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    32ee:	2005      	movs	r0, #5
    32f0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
    32f2:	4b07      	ldr	r3, [pc, #28]	; (3310 <sd_mmc_wait_end_of_write_blocks+0x58>)
    32f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    32f6:	2b00      	cmp	r3, #0
    32f8:	d0eb      	beq.n	32d2 <sd_mmc_wait_end_of_write_blocks+0x1a>
		return SD_MMC_OK;
    32fa:	2000      	movs	r0, #0
	}

	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    32fc:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
    32fe:	4b07      	ldr	r3, [pc, #28]	; (331c <sd_mmc_wait_end_of_write_blocks+0x64>)
    3300:	4798      	blx	r3
		return SD_MMC_OK;
    3302:	2000      	movs	r0, #0
    3304:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    3306:	4b05      	ldr	r3, [pc, #20]	; (331c <sd_mmc_wait_end_of_write_blocks+0x64>)
    3308:	4798      	blx	r3
	return SD_MMC_OK;
    330a:	2000      	movs	r0, #0
    330c:	bd10      	pop	{r4, pc}
    330e:	bf00      	nop
    3310:	2000065c 	.word	0x2000065c
    3314:	00000f71 	.word	0x00000f71
    3318:	00000e9d 	.word	0x00000e9d
    331c:	0000310d 	.word	0x0000310d

00003320 <sd_mmc_stack_init>:
	}
#endif
}

void sd_mmc_stack_init(void)
{
    3320:	b508      	push	{r3, lr}

	sd_mmc_init(&IO_BUS, SDMMC_ACCESS_0_cd, SDMMC_ACCESS_0_wp);
    3322:	4903      	ldr	r1, [pc, #12]	; (3330 <sd_mmc_stack_init+0x10>)
    3324:	460a      	mov	r2, r1
    3326:	3104      	adds	r1, #4
    3328:	4802      	ldr	r0, [pc, #8]	; (3334 <sd_mmc_stack_init+0x14>)
    332a:	4b03      	ldr	r3, [pc, #12]	; (3338 <sd_mmc_stack_init+0x18>)
    332c:	4798      	blx	r3
    332e:	bd08      	pop	{r3, pc}
    3330:	20000030 	.word	0x20000030
    3334:	20000720 	.word	0x20000720
    3338:	00003129 	.word	0x00003129

0000333c <__aeabi_uldivmod>:
    333c:	b953      	cbnz	r3, 3354 <__aeabi_uldivmod+0x18>
    333e:	b94a      	cbnz	r2, 3354 <__aeabi_uldivmod+0x18>
    3340:	2900      	cmp	r1, #0
    3342:	bf08      	it	eq
    3344:	2800      	cmpeq	r0, #0
    3346:	bf1c      	itt	ne
    3348:	f04f 31ff 	movne.w	r1, #4294967295
    334c:	f04f 30ff 	movne.w	r0, #4294967295
    3350:	f000 b97a 	b.w	3648 <__aeabi_idiv0>
    3354:	f1ad 0c08 	sub.w	ip, sp, #8
    3358:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    335c:	f000 f806 	bl	336c <__udivmoddi4>
    3360:	f8dd e004 	ldr.w	lr, [sp, #4]
    3364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3368:	b004      	add	sp, #16
    336a:	4770      	bx	lr

0000336c <__udivmoddi4>:
    336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3370:	468c      	mov	ip, r1
    3372:	460d      	mov	r5, r1
    3374:	4604      	mov	r4, r0
    3376:	9e08      	ldr	r6, [sp, #32]
    3378:	2b00      	cmp	r3, #0
    337a:	d151      	bne.n	3420 <__udivmoddi4+0xb4>
    337c:	428a      	cmp	r2, r1
    337e:	4617      	mov	r7, r2
    3380:	d96d      	bls.n	345e <__udivmoddi4+0xf2>
    3382:	fab2 fe82 	clz	lr, r2
    3386:	f1be 0f00 	cmp.w	lr, #0
    338a:	d00b      	beq.n	33a4 <__udivmoddi4+0x38>
    338c:	f1ce 0c20 	rsb	ip, lr, #32
    3390:	fa01 f50e 	lsl.w	r5, r1, lr
    3394:	fa20 fc0c 	lsr.w	ip, r0, ip
    3398:	fa02 f70e 	lsl.w	r7, r2, lr
    339c:	ea4c 0c05 	orr.w	ip, ip, r5
    33a0:	fa00 f40e 	lsl.w	r4, r0, lr
    33a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    33a8:	0c25      	lsrs	r5, r4, #16
    33aa:	fbbc f8fa 	udiv	r8, ip, sl
    33ae:	fa1f f987 	uxth.w	r9, r7
    33b2:	fb0a cc18 	mls	ip, sl, r8, ip
    33b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    33ba:	fb08 f309 	mul.w	r3, r8, r9
    33be:	42ab      	cmp	r3, r5
    33c0:	d90a      	bls.n	33d8 <__udivmoddi4+0x6c>
    33c2:	19ed      	adds	r5, r5, r7
    33c4:	f108 32ff 	add.w	r2, r8, #4294967295
    33c8:	f080 8123 	bcs.w	3612 <__udivmoddi4+0x2a6>
    33cc:	42ab      	cmp	r3, r5
    33ce:	f240 8120 	bls.w	3612 <__udivmoddi4+0x2a6>
    33d2:	f1a8 0802 	sub.w	r8, r8, #2
    33d6:	443d      	add	r5, r7
    33d8:	1aed      	subs	r5, r5, r3
    33da:	b2a4      	uxth	r4, r4
    33dc:	fbb5 f0fa 	udiv	r0, r5, sl
    33e0:	fb0a 5510 	mls	r5, sl, r0, r5
    33e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    33e8:	fb00 f909 	mul.w	r9, r0, r9
    33ec:	45a1      	cmp	r9, r4
    33ee:	d909      	bls.n	3404 <__udivmoddi4+0x98>
    33f0:	19e4      	adds	r4, r4, r7
    33f2:	f100 33ff 	add.w	r3, r0, #4294967295
    33f6:	f080 810a 	bcs.w	360e <__udivmoddi4+0x2a2>
    33fa:	45a1      	cmp	r9, r4
    33fc:	f240 8107 	bls.w	360e <__udivmoddi4+0x2a2>
    3400:	3802      	subs	r0, #2
    3402:	443c      	add	r4, r7
    3404:	eba4 0409 	sub.w	r4, r4, r9
    3408:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    340c:	2100      	movs	r1, #0
    340e:	2e00      	cmp	r6, #0
    3410:	d061      	beq.n	34d6 <__udivmoddi4+0x16a>
    3412:	fa24 f40e 	lsr.w	r4, r4, lr
    3416:	2300      	movs	r3, #0
    3418:	6034      	str	r4, [r6, #0]
    341a:	6073      	str	r3, [r6, #4]
    341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3420:	428b      	cmp	r3, r1
    3422:	d907      	bls.n	3434 <__udivmoddi4+0xc8>
    3424:	2e00      	cmp	r6, #0
    3426:	d054      	beq.n	34d2 <__udivmoddi4+0x166>
    3428:	2100      	movs	r1, #0
    342a:	e886 0021 	stmia.w	r6, {r0, r5}
    342e:	4608      	mov	r0, r1
    3430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3434:	fab3 f183 	clz	r1, r3
    3438:	2900      	cmp	r1, #0
    343a:	f040 808e 	bne.w	355a <__udivmoddi4+0x1ee>
    343e:	42ab      	cmp	r3, r5
    3440:	d302      	bcc.n	3448 <__udivmoddi4+0xdc>
    3442:	4282      	cmp	r2, r0
    3444:	f200 80fa 	bhi.w	363c <__udivmoddi4+0x2d0>
    3448:	1a84      	subs	r4, r0, r2
    344a:	eb65 0503 	sbc.w	r5, r5, r3
    344e:	2001      	movs	r0, #1
    3450:	46ac      	mov	ip, r5
    3452:	2e00      	cmp	r6, #0
    3454:	d03f      	beq.n	34d6 <__udivmoddi4+0x16a>
    3456:	e886 1010 	stmia.w	r6, {r4, ip}
    345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    345e:	b912      	cbnz	r2, 3466 <__udivmoddi4+0xfa>
    3460:	2701      	movs	r7, #1
    3462:	fbb7 f7f2 	udiv	r7, r7, r2
    3466:	fab7 fe87 	clz	lr, r7
    346a:	f1be 0f00 	cmp.w	lr, #0
    346e:	d134      	bne.n	34da <__udivmoddi4+0x16e>
    3470:	1beb      	subs	r3, r5, r7
    3472:	0c3a      	lsrs	r2, r7, #16
    3474:	fa1f fc87 	uxth.w	ip, r7
    3478:	2101      	movs	r1, #1
    347a:	fbb3 f8f2 	udiv	r8, r3, r2
    347e:	0c25      	lsrs	r5, r4, #16
    3480:	fb02 3318 	mls	r3, r2, r8, r3
    3484:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    3488:	fb0c f308 	mul.w	r3, ip, r8
    348c:	42ab      	cmp	r3, r5
    348e:	d907      	bls.n	34a0 <__udivmoddi4+0x134>
    3490:	19ed      	adds	r5, r5, r7
    3492:	f108 30ff 	add.w	r0, r8, #4294967295
    3496:	d202      	bcs.n	349e <__udivmoddi4+0x132>
    3498:	42ab      	cmp	r3, r5
    349a:	f200 80d1 	bhi.w	3640 <__udivmoddi4+0x2d4>
    349e:	4680      	mov	r8, r0
    34a0:	1aed      	subs	r5, r5, r3
    34a2:	b2a3      	uxth	r3, r4
    34a4:	fbb5 f0f2 	udiv	r0, r5, r2
    34a8:	fb02 5510 	mls	r5, r2, r0, r5
    34ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    34b0:	fb0c fc00 	mul.w	ip, ip, r0
    34b4:	45a4      	cmp	ip, r4
    34b6:	d907      	bls.n	34c8 <__udivmoddi4+0x15c>
    34b8:	19e4      	adds	r4, r4, r7
    34ba:	f100 33ff 	add.w	r3, r0, #4294967295
    34be:	d202      	bcs.n	34c6 <__udivmoddi4+0x15a>
    34c0:	45a4      	cmp	ip, r4
    34c2:	f200 80b8 	bhi.w	3636 <__udivmoddi4+0x2ca>
    34c6:	4618      	mov	r0, r3
    34c8:	eba4 040c 	sub.w	r4, r4, ip
    34cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    34d0:	e79d      	b.n	340e <__udivmoddi4+0xa2>
    34d2:	4631      	mov	r1, r6
    34d4:	4630      	mov	r0, r6
    34d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34da:	f1ce 0420 	rsb	r4, lr, #32
    34de:	fa05 f30e 	lsl.w	r3, r5, lr
    34e2:	fa07 f70e 	lsl.w	r7, r7, lr
    34e6:	fa20 f804 	lsr.w	r8, r0, r4
    34ea:	0c3a      	lsrs	r2, r7, #16
    34ec:	fa25 f404 	lsr.w	r4, r5, r4
    34f0:	ea48 0803 	orr.w	r8, r8, r3
    34f4:	fbb4 f1f2 	udiv	r1, r4, r2
    34f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
    34fc:	fb02 4411 	mls	r4, r2, r1, r4
    3500:	fa1f fc87 	uxth.w	ip, r7
    3504:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    3508:	fb01 f30c 	mul.w	r3, r1, ip
    350c:	42ab      	cmp	r3, r5
    350e:	fa00 f40e 	lsl.w	r4, r0, lr
    3512:	d909      	bls.n	3528 <__udivmoddi4+0x1bc>
    3514:	19ed      	adds	r5, r5, r7
    3516:	f101 30ff 	add.w	r0, r1, #4294967295
    351a:	f080 808a 	bcs.w	3632 <__udivmoddi4+0x2c6>
    351e:	42ab      	cmp	r3, r5
    3520:	f240 8087 	bls.w	3632 <__udivmoddi4+0x2c6>
    3524:	3902      	subs	r1, #2
    3526:	443d      	add	r5, r7
    3528:	1aeb      	subs	r3, r5, r3
    352a:	fa1f f588 	uxth.w	r5, r8
    352e:	fbb3 f0f2 	udiv	r0, r3, r2
    3532:	fb02 3310 	mls	r3, r2, r0, r3
    3536:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    353a:	fb00 f30c 	mul.w	r3, r0, ip
    353e:	42ab      	cmp	r3, r5
    3540:	d907      	bls.n	3552 <__udivmoddi4+0x1e6>
    3542:	19ed      	adds	r5, r5, r7
    3544:	f100 38ff 	add.w	r8, r0, #4294967295
    3548:	d26f      	bcs.n	362a <__udivmoddi4+0x2be>
    354a:	42ab      	cmp	r3, r5
    354c:	d96d      	bls.n	362a <__udivmoddi4+0x2be>
    354e:	3802      	subs	r0, #2
    3550:	443d      	add	r5, r7
    3552:	1aeb      	subs	r3, r5, r3
    3554:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    3558:	e78f      	b.n	347a <__udivmoddi4+0x10e>
    355a:	f1c1 0720 	rsb	r7, r1, #32
    355e:	fa22 f807 	lsr.w	r8, r2, r7
    3562:	408b      	lsls	r3, r1
    3564:	fa05 f401 	lsl.w	r4, r5, r1
    3568:	ea48 0303 	orr.w	r3, r8, r3
    356c:	fa20 fe07 	lsr.w	lr, r0, r7
    3570:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    3574:	40fd      	lsrs	r5, r7
    3576:	ea4e 0e04 	orr.w	lr, lr, r4
    357a:	fbb5 f9fc 	udiv	r9, r5, ip
    357e:	ea4f 441e 	mov.w	r4, lr, lsr #16
    3582:	fb0c 5519 	mls	r5, ip, r9, r5
    3586:	fa1f f883 	uxth.w	r8, r3
    358a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    358e:	fb09 f408 	mul.w	r4, r9, r8
    3592:	42ac      	cmp	r4, r5
    3594:	fa02 f201 	lsl.w	r2, r2, r1
    3598:	fa00 fa01 	lsl.w	sl, r0, r1
    359c:	d908      	bls.n	35b0 <__udivmoddi4+0x244>
    359e:	18ed      	adds	r5, r5, r3
    35a0:	f109 30ff 	add.w	r0, r9, #4294967295
    35a4:	d243      	bcs.n	362e <__udivmoddi4+0x2c2>
    35a6:	42ac      	cmp	r4, r5
    35a8:	d941      	bls.n	362e <__udivmoddi4+0x2c2>
    35aa:	f1a9 0902 	sub.w	r9, r9, #2
    35ae:	441d      	add	r5, r3
    35b0:	1b2d      	subs	r5, r5, r4
    35b2:	fa1f fe8e 	uxth.w	lr, lr
    35b6:	fbb5 f0fc 	udiv	r0, r5, ip
    35ba:	fb0c 5510 	mls	r5, ip, r0, r5
    35be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    35c2:	fb00 f808 	mul.w	r8, r0, r8
    35c6:	45a0      	cmp	r8, r4
    35c8:	d907      	bls.n	35da <__udivmoddi4+0x26e>
    35ca:	18e4      	adds	r4, r4, r3
    35cc:	f100 35ff 	add.w	r5, r0, #4294967295
    35d0:	d229      	bcs.n	3626 <__udivmoddi4+0x2ba>
    35d2:	45a0      	cmp	r8, r4
    35d4:	d927      	bls.n	3626 <__udivmoddi4+0x2ba>
    35d6:	3802      	subs	r0, #2
    35d8:	441c      	add	r4, r3
    35da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    35de:	eba4 0408 	sub.w	r4, r4, r8
    35e2:	fba0 8902 	umull	r8, r9, r0, r2
    35e6:	454c      	cmp	r4, r9
    35e8:	46c6      	mov	lr, r8
    35ea:	464d      	mov	r5, r9
    35ec:	d315      	bcc.n	361a <__udivmoddi4+0x2ae>
    35ee:	d012      	beq.n	3616 <__udivmoddi4+0x2aa>
    35f0:	b156      	cbz	r6, 3608 <__udivmoddi4+0x29c>
    35f2:	ebba 030e 	subs.w	r3, sl, lr
    35f6:	eb64 0405 	sbc.w	r4, r4, r5
    35fa:	fa04 f707 	lsl.w	r7, r4, r7
    35fe:	40cb      	lsrs	r3, r1
    3600:	431f      	orrs	r7, r3
    3602:	40cc      	lsrs	r4, r1
    3604:	6037      	str	r7, [r6, #0]
    3606:	6074      	str	r4, [r6, #4]
    3608:	2100      	movs	r1, #0
    360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    360e:	4618      	mov	r0, r3
    3610:	e6f8      	b.n	3404 <__udivmoddi4+0x98>
    3612:	4690      	mov	r8, r2
    3614:	e6e0      	b.n	33d8 <__udivmoddi4+0x6c>
    3616:	45c2      	cmp	sl, r8
    3618:	d2ea      	bcs.n	35f0 <__udivmoddi4+0x284>
    361a:	ebb8 0e02 	subs.w	lr, r8, r2
    361e:	eb69 0503 	sbc.w	r5, r9, r3
    3622:	3801      	subs	r0, #1
    3624:	e7e4      	b.n	35f0 <__udivmoddi4+0x284>
    3626:	4628      	mov	r0, r5
    3628:	e7d7      	b.n	35da <__udivmoddi4+0x26e>
    362a:	4640      	mov	r0, r8
    362c:	e791      	b.n	3552 <__udivmoddi4+0x1e6>
    362e:	4681      	mov	r9, r0
    3630:	e7be      	b.n	35b0 <__udivmoddi4+0x244>
    3632:	4601      	mov	r1, r0
    3634:	e778      	b.n	3528 <__udivmoddi4+0x1bc>
    3636:	3802      	subs	r0, #2
    3638:	443c      	add	r4, r7
    363a:	e745      	b.n	34c8 <__udivmoddi4+0x15c>
    363c:	4608      	mov	r0, r1
    363e:	e708      	b.n	3452 <__udivmoddi4+0xe6>
    3640:	f1a8 0802 	sub.w	r8, r8, #2
    3644:	443d      	add	r5, r7
    3646:	e72b      	b.n	34a0 <__udivmoddi4+0x134>

00003648 <__aeabi_idiv0>:
    3648:	4770      	bx	lr
    364a:	bf00      	nop

0000364c <__libc_init_array>:
    364c:	b570      	push	{r4, r5, r6, lr}
    364e:	4e0d      	ldr	r6, [pc, #52]	; (3684 <__libc_init_array+0x38>)
    3650:	4c0d      	ldr	r4, [pc, #52]	; (3688 <__libc_init_array+0x3c>)
    3652:	1ba4      	subs	r4, r4, r6
    3654:	10a4      	asrs	r4, r4, #2
    3656:	2500      	movs	r5, #0
    3658:	42a5      	cmp	r5, r4
    365a:	d109      	bne.n	3670 <__libc_init_array+0x24>
    365c:	4e0b      	ldr	r6, [pc, #44]	; (368c <__libc_init_array+0x40>)
    365e:	4c0c      	ldr	r4, [pc, #48]	; (3690 <__libc_init_array+0x44>)
    3660:	f000 f9b2 	bl	39c8 <_init>
    3664:	1ba4      	subs	r4, r4, r6
    3666:	10a4      	asrs	r4, r4, #2
    3668:	2500      	movs	r5, #0
    366a:	42a5      	cmp	r5, r4
    366c:	d105      	bne.n	367a <__libc_init_array+0x2e>
    366e:	bd70      	pop	{r4, r5, r6, pc}
    3670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3674:	4798      	blx	r3
    3676:	3501      	adds	r5, #1
    3678:	e7ee      	b.n	3658 <__libc_init_array+0xc>
    367a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    367e:	4798      	blx	r3
    3680:	3501      	adds	r5, #1
    3682:	e7f2      	b.n	366a <__libc_init_array+0x1e>
    3684:	000039d4 	.word	0x000039d4
    3688:	000039d4 	.word	0x000039d4
    368c:	000039d4 	.word	0x000039d4
    3690:	000039d8 	.word	0x000039d8
    3694:	682f2e2e 	.word	0x682f2e2e
    3698:	732f6c61 	.word	0x732f6c61
    369c:	682f6372 	.word	0x682f6372
    36a0:	615f6c61 	.word	0x615f6c61
    36a4:	735f6364 	.word	0x735f6364
    36a8:	2e636e79 	.word	0x2e636e79
    36ac:	00000063 	.word	0x00000063
    36b0:	682f2e2e 	.word	0x682f2e2e
    36b4:	732f6c61 	.word	0x732f6c61
    36b8:	682f6372 	.word	0x682f6372
    36bc:	635f6c61 	.word	0x635f6c61
    36c0:	72656d61 	.word	0x72656d61
    36c4:	73615f61 	.word	0x73615f61
    36c8:	2e636e79 	.word	0x2e636e79
    36cc:	00000063 	.word	0x00000063
    36d0:	682f2e2e 	.word	0x682f2e2e
    36d4:	732f6c61 	.word	0x732f6c61
    36d8:	682f6372 	.word	0x682f6372
    36dc:	6d5f6c61 	.word	0x6d5f6c61
    36e0:	735f6963 	.word	0x735f6963
    36e4:	2e636e79 	.word	0x2e636e79
    36e8:	00000063 	.word	0x00000063
    36ec:	682f2e2e 	.word	0x682f2e2e
    36f0:	732f6c61 	.word	0x732f6c61
    36f4:	682f6372 	.word	0x682f6372
    36f8:	705f6c61 	.word	0x705f6c61
    36fc:	632e6d77 	.word	0x632e6d77
    3700:	00000000 	.word	0x00000000
    3704:	682f2e2e 	.word	0x682f2e2e
    3708:	732f6c61 	.word	0x732f6c61
    370c:	682f6372 	.word	0x682f6372
    3710:	745f6c61 	.word	0x745f6c61
    3714:	72656d69 	.word	0x72656d69
    3718:	0000632e 	.word	0x0000632e
    371c:	682f2e2e 	.word	0x682f2e2e
    3720:	732f6c61 	.word	0x732f6c61
    3724:	682f6372 	.word	0x682f6372
    3728:	755f6c61 	.word	0x755f6c61
    372c:	74726173 	.word	0x74726173
    3730:	7973615f 	.word	0x7973615f
    3734:	632e636e 	.word	0x632e636e
    3738:	00000000 	.word	0x00000000
    373c:	682f2e2e 	.word	0x682f2e2e
    3740:	752f6c61 	.word	0x752f6c61
    3744:	736c6974 	.word	0x736c6974
    3748:	6372732f 	.word	0x6372732f
    374c:	6974752f 	.word	0x6974752f
    3750:	6c5f736c 	.word	0x6c5f736c
    3754:	2e747369 	.word	0x2e747369
    3758:	00000063 	.word	0x00000063
    375c:	682f2e2e 	.word	0x682f2e2e
    3760:	752f6c61 	.word	0x752f6c61
    3764:	736c6974 	.word	0x736c6974
    3768:	6372732f 	.word	0x6372732f
    376c:	6974752f 	.word	0x6974752f
    3770:	725f736c 	.word	0x725f736c
    3774:	62676e69 	.word	0x62676e69
    3778:	65666675 	.word	0x65666675
    377c:	00632e72 	.word	0x00632e72

00003780 <_adcs>:
    3780:	00000000 00000018 00001800 00000000     ................
	...
    3798:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    37a8:	632e6364 00000000                       dc.c....

000037b0 <_cfgs>:
    37b0:	00205000 0a000000 00000000 00000000     .P .............
	...

000038b0 <_map>:
    38b0:	00000006 00000036 00000007 00000037     ....6.......7...
    38c0:	00000009 00000019 0000000e 0000002e     ................
    38d0:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    38e0:	632e6369 00000000 682f2e2e 732f6c70     ic.c....../hpl/s
    38f0:	2f636864 5f6c7068 63686473 0000632e     dhc/hpl_sdhc.c..
    3900:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    3910:	43000000 43000400                       ...C...C

00003918 <_usarts>:
    3918:	00000005 40100004 00030000 00700002     .......@......p.
    3928:	0000ff58 00000000                       X.......

00003930 <_i2cms>:
	...

00003948 <_i2css>:
	...

00003958 <sercomspi_regs>:
	...
    396c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    397c:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    398c:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    399c:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    39ac:	63745f6c 0000632e 732f2e2e 6d6d5f64     l_tc.c..../sd_mm
    39bc:	64732f63 636d6d5f 0000632e              c/sd_mmc.c..

000039c8 <_init>:
    39c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ca:	bf00      	nop
    39cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39ce:	bc08      	pop	{r3}
    39d0:	469e      	mov	lr, r3
    39d2:	4770      	bx	lr

000039d4 <__init_array_start>:
    39d4:	00000289 	.word	0x00000289

000039d8 <_fini>:
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39da:	bf00      	nop
    39dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39de:	bc08      	pop	{r3}
    39e0:	469e      	mov	lr, r3
    39e2:	4770      	bx	lr

000039e4 <__fini_array_start>:
    39e4:	00000265 	.word	0x00000265
