
MiniscopeUntethered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003014  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  00403014  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000534e8  20400450  00403468  00020450  2**3
                  ALLOC
  3 .stack        00002000  20453938  00456950  00020450  2**0
                  ALLOC
  4 .heap         00000200  20455938  00458950  00020450  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b855  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035be  00000000  00000000  0003bd28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a65  00000000  00000000  0003f2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b18  00000000  00000000  00045d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cb8  00000000  00000000  00046863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f83a  00000000  00000000  0004751b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ee68  00000000  00000000  00066d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008891f  00000000  00000000  00075bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001a94  00000000  00000000  000fe4dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 59 45 20 15 1f 40 00 11 1f 40 00 11 1f 40 00     8YE ..@...@...@.
  400010:	11 1f 40 00 11 1f 40 00 11 1f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	11 1f 40 00 11 1f 40 00 00 00 00 00 11 1f 40 00     ..@...@.......@.
  40003c:	d5 19 40 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ..@...@...@...@.
  40004c:	11 1f 40 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ..@...@...@...@.
  40005c:	11 1f 40 00 11 1f 40 00 00 00 00 00 11 26 40 00     ..@...@......&@.
  40006c:	11 1f 40 00 00 00 00 00 11 1f 40 00 11 1f 40 00     ..@.......@...@.
  40007c:	a9 2c 40 00 11 1f 40 00 00 00 00 00 11 1f 40 00     .,@...@.......@.
  40008c:	11 1f 40 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ..@...@...@...@.
  40009c:	11 1f 40 00 11 1f 40 00 11 1f 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	11 1f 40 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ..@...@...@...@.
  4000c4:	11 1f 40 00 11 1f 40 00 11 1f 40 00 00 00 00 00     ..@...@...@.....
  4000d4:	11 1f 40 00 00 00 00 00 11 1f 40 00 11 1f 40 00     ..@.......@...@.
  4000e4:	11 1f 40 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ..@...@...@...@.
  4000f4:	11 1f 40 00 11 1f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400104:	00 00 00 00 11 1f 40 00 11 1f 40 00 11 1f 40 00     ......@...@...@.
	...
  400120:	11 1f 40 00 11 1f 40 00 51 26 40 00 11 1f 40 00     ..@...@.Q&@...@.
  400130:	11 1f 40 00 00 00 00 00 00 00 00 00 11 1f 40 00     ..@...........@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400450 	.word	0x20400450
  40015c:	00000000 	.word	0x00000000
  400160:	00403014 	.word	0x00403014

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00403014 	.word	0x00403014
  4001a0:	20400454 	.word	0x20400454
  4001a4:	00403014 	.word	0x00403014
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	2040046c 	.word	0x2040046c
  4001cc:	20400494 	.word	0x20400494
  4001d0:	00400cc5 	.word	0x00400cc5

004001d4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	20400470 	.word	0x20400470
  40021c:	20400494 	.word	0x20400494
  400220:	2040046c 	.word	0x2040046c
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
{
  40022c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
}
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
	return true;
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	2040046c 	.word	0x2040046c
  400258:	00400d59 	.word	0x00400d59
  40025c:	00400d85 	.word	0x00400d85

00400260 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400260:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
	}
}
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	20400494 	.word	0x20400494
  400278:	00400d35 	.word	0x00400d35

0040027c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40027c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
	driver_init();
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20400470 	.word	0x20400470
  400294:	20400494 	.word	0x20400494
  400298:	00400c89 	.word	0x00400c89

0040029c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4002a2:	4b8a      	ldr	r3, [pc, #552]	; (4004cc <sd_mmc_check+0x230>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4002ac:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <sd_mmc_check+0x234>)
  4002ae:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b8:	4b86      	ldr	r3, [pc, #536]	; (4004d4 <sd_mmc_check+0x238>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002c4:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4002c6:	4b84      	ldr	r3, [pc, #528]	; (4004d8 <sd_mmc_check+0x23c>)
  4002c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002ca:	4629      	mov	r1, r5
  4002cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d0:	4b82      	ldr	r3, [pc, #520]	; (4004dc <sd_mmc_check+0x240>)
  4002d2:	4798      	blx	r3
  4002d4:	b930      	cbnz	r0, 4002e4 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002d6:	4b7f      	ldr	r3, [pc, #508]	; (4004d4 <sd_mmc_check+0x238>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	2403      	movs	r4, #3
  4002dc:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002de:	4b7c      	ldr	r3, [pc, #496]	; (4004d0 <sd_mmc_check+0x234>)
  4002e0:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002e2:	e7e5      	b.n	4002b0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002e8:	f245 5008 	movw	r0, #21768	; 0x5508
  4002ec:	4b7b      	ldr	r3, [pc, #492]	; (4004dc <sd_mmc_check+0x240>)
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	f040 8090 	bne.w	400416 <sd_mmc_check+0x17a>
	*v2 = 0;
  4002f6:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4002f8:	4b76      	ldr	r3, [pc, #472]	; (4004d4 <sd_mmc_check+0x238>)
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	7adb      	ldrb	r3, [r3, #11]
  4002fe:	f013 0f01 	tst.w	r3, #1
  400302:	f040 82a7 	bne.w	400854 <sd_mmc_check+0x5b8>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400306:	2100      	movs	r1, #0
  400308:	f245 1003 	movw	r0, #20739	; 0x5103
  40030c:	4b73      	ldr	r3, [pc, #460]	; (4004dc <sd_mmc_check+0x240>)
  40030e:	4798      	blx	r3
  400310:	2800      	cmp	r0, #0
  400312:	d0e0      	beq.n	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400314:	4d6f      	ldr	r5, [pc, #444]	; (4004d4 <sd_mmc_check+0x238>)
  400316:	682e      	ldr	r6, [r5, #0]
  400318:	4b71      	ldr	r3, [pc, #452]	; (4004e0 <sd_mmc_check+0x244>)
  40031a:	4798      	blx	r3
  40031c:	0c00      	lsrs	r0, r0, #16
  40031e:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400320:	682b      	ldr	r3, [r5, #0]
  400322:	7adb      	ldrb	r3, [r3, #11]
  400324:	f013 0f01 	tst.w	r3, #1
  400328:	d034      	beq.n	400394 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40032a:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <sd_mmc_check+0x248>)
  40032c:	4798      	blx	r3
  40032e:	2800      	cmp	r0, #0
  400330:	d0d1      	beq.n	4002d6 <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400332:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400334:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400336:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40033a:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40033e:	496a      	ldr	r1, [pc, #424]	; (4004e8 <sd_mmc_check+0x24c>)
  400340:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f201 	mul.w	r2, r2, r1
  40034c:	4967      	ldr	r1, [pc, #412]	; (4004ec <sd_mmc_check+0x250>)
  40034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400352:	fb02 f201 	mul.w	r2, r2, r1
  400356:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400358:	7b9a      	ldrb	r2, [r3, #14]
  40035a:	0992      	lsrs	r2, r2, #6
  40035c:	f040 81b3 	bne.w	4006c6 <sd_mmc_check+0x42a>
  400360:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400362:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400364:	7d1a      	ldrb	r2, [r3, #20]
  400366:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400368:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40036c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400370:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400372:	7dd9      	ldrb	r1, [r3, #23]
  400374:	0049      	lsls	r1, r1, #1
  400376:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40037e:	3201      	adds	r2, #1
  400380:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400384:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400386:	408a      	lsls	r2, r1
  400388:	7cd9      	ldrb	r1, [r3, #19]
  40038a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40038e:	408a      	lsls	r2, r1
				/ 1024;
  400390:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400392:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400394:	4b4f      	ldr	r3, [pc, #316]	; (4004d4 <sd_mmc_check+0x238>)
  400396:	681b      	ldr	r3, [r3, #0]
  400398:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40039a:	0409      	lsls	r1, r1, #16
  40039c:	f243 1007 	movw	r0, #12551	; 0x3107
  4003a0:	4b4e      	ldr	r3, [pc, #312]	; (4004dc <sd_mmc_check+0x240>)
  4003a2:	4798      	blx	r3
  4003a4:	2800      	cmp	r0, #0
  4003a6:	d096      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003a8:	4b4a      	ldr	r3, [pc, #296]	; (4004d4 <sd_mmc_check+0x238>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	7ada      	ldrb	r2, [r3, #11]
  4003ae:	f012 0f01 	tst.w	r2, #1
  4003b2:	f000 8199 	beq.w	4006e8 <sd_mmc_check+0x44c>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4003b6:	8919      	ldrh	r1, [r3, #8]
  4003b8:	0409      	lsls	r1, r1, #16
  4003ba:	f241 1037 	movw	r0, #4407	; 0x1137
  4003be:	4b47      	ldr	r3, [pc, #284]	; (4004dc <sd_mmc_check+0x240>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d087      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4003c6:	2301      	movs	r3, #1
  4003c8:	9300      	str	r3, [sp, #0]
  4003ca:	2208      	movs	r2, #8
  4003cc:	2100      	movs	r1, #0
  4003ce:	4848      	ldr	r0, [pc, #288]	; (4004f0 <sd_mmc_check+0x254>)
  4003d0:	4d48      	ldr	r5, [pc, #288]	; (4004f4 <sd_mmc_check+0x258>)
  4003d2:	47a8      	blx	r5
  4003d4:	2800      	cmp	r0, #0
  4003d6:	f43f af7e 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  4003da:	2101      	movs	r1, #1
  4003dc:	a804      	add	r0, sp, #16
  4003de:	4b46      	ldr	r3, [pc, #280]	; (4004f8 <sd_mmc_check+0x25c>)
  4003e0:	4798      	blx	r3
  4003e2:	2800      	cmp	r0, #0
  4003e4:	f43f af77 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  4003e8:	4b44      	ldr	r3, [pc, #272]	; (4004fc <sd_mmc_check+0x260>)
  4003ea:	4798      	blx	r3
  4003ec:	2800      	cmp	r0, #0
  4003ee:	f43f af72 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  4003f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4003f6:	f003 030f 	and.w	r3, r3, #15
  4003fa:	2b01      	cmp	r3, #1
  4003fc:	f000 81bb 	beq.w	400776 <sd_mmc_check+0x4da>
  400400:	2b00      	cmp	r3, #0
  400402:	f000 816d 	beq.w	4006e0 <sd_mmc_check+0x444>
  400406:	2b02      	cmp	r3, #2
  400408:	f000 81ba 	beq.w	400780 <sd_mmc_check+0x4e4>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40040c:	4b31      	ldr	r3, [pc, #196]	; (4004d4 <sd_mmc_check+0x238>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	2210      	movs	r2, #16
  400412:	731a      	strb	r2, [r3, #12]
  400414:	e168      	b.n	4006e8 <sd_mmc_check+0x44c>
	resp = driver_get_response();
  400416:	4b32      	ldr	r3, [pc, #200]	; (4004e0 <sd_mmc_check+0x244>)
  400418:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40041a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40041e:	f000 8217 	beq.w	400850 <sd_mmc_check+0x5b4>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400422:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400426:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40042a:	f47f af54 	bne.w	4002d6 <sd_mmc_check+0x3a>
	*v2 = 1;
  40042e:	2201      	movs	r2, #1
  400430:	e762      	b.n	4002f8 <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  400432:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400438:	4b26      	ldr	r3, [pc, #152]	; (4004d4 <sd_mmc_check+0x238>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	7ad3      	ldrb	r3, [r2, #11]
  40043e:	f043 0308 	orr.w	r3, r3, #8
  400442:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400444:	4b23      	ldr	r3, [pc, #140]	; (4004d4 <sd_mmc_check+0x238>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	7adb      	ldrb	r3, [r3, #11]
  40044a:	f013 0f01 	tst.w	r3, #1
  40044e:	f43f af5a 	beq.w	400306 <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400452:	2100      	movs	r1, #0
  400454:	f645 3002 	movw	r0, #23298	; 0x5b02
  400458:	4b20      	ldr	r3, [pc, #128]	; (4004dc <sd_mmc_check+0x240>)
  40045a:	4798      	blx	r3
  40045c:	2800      	cmp	r0, #0
  40045e:	f47f af52 	bne.w	400306 <sd_mmc_check+0x6a>
  400462:	e738      	b.n	4002d6 <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  400464:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40046c:	d027      	beq.n	4004be <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40046e:	2100      	movs	r1, #0
  400470:	f645 3002 	movw	r0, #23298	; 0x5b02
  400474:	4b19      	ldr	r3, [pc, #100]	; (4004dc <sd_mmc_check+0x240>)
  400476:	4798      	blx	r3
  400478:	2800      	cmp	r0, #0
  40047a:	f43f af2c 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <sd_mmc_check+0x238>)
  400480:	681b      	ldr	r3, [r3, #0]
  400482:	2201      	movs	r2, #1
  400484:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40048a:	f241 1003 	movw	r0, #4355	; 0x1103
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <sd_mmc_check+0x240>)
  400490:	4798      	blx	r3
  400492:	2800      	cmp	r0, #0
  400494:	f43f af1f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  400498:	4b12      	ldr	r3, [pc, #72]	; (4004e4 <sd_mmc_check+0x248>)
  40049a:	4798      	blx	r3
  40049c:	2800      	cmp	r0, #0
  40049e:	f43f af1a 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <sd_mmc_check+0x238>)
  4004a4:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004a6:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4004a8:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004ac:	3b01      	subs	r3, #1
  4004ae:	2b03      	cmp	r3, #3
  4004b0:	d826      	bhi.n	400500 <sd_mmc_check+0x264>
  4004b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4004b6:	00ef      	.short	0x00ef
  4004b8:	00f500f2 	.word	0x00f500f2
  4004bc:	00f8      	.short	0x00f8
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <sd_mmc_check+0x238>)
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	7ad3      	ldrb	r3, [r2, #11]
  4004c4:	f043 0308 	orr.w	r3, r3, #8
  4004c8:	72d3      	strb	r3, [r2, #11]
  4004ca:	e7d0      	b.n	40046e <sd_mmc_check+0x1d2>
  4004cc:	004001d5 	.word	0x004001d5
  4004d0:	00400261 	.word	0x00400261
  4004d4:	2040046c 	.word	0x2040046c
  4004d8:	00400d37 	.word	0x00400d37
  4004dc:	00400d59 	.word	0x00400d59
  4004e0:	00400d7d 	.word	0x00400d7d
  4004e4:	0040022d 	.word	0x0040022d
  4004e8:	00402f90 	.word	0x00402f90
  4004ec:	00402fac 	.word	0x00402fac
  4004f0:	00081133 	.word	0x00081133
  4004f4:	00400db5 	.word	0x00400db5
  4004f8:	00400ef1 	.word	0x00400ef1
  4004fc:	00400f55 	.word	0x00400f55
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400500:	2312      	movs	r3, #18
  400502:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400504:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400506:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40050a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40050e:	49a1      	ldr	r1, [pc, #644]	; (400794 <sd_mmc_check+0x4f8>)
  400510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400518:	fb03 f301 	mul.w	r3, r3, r1
  40051c:	499e      	ldr	r1, [pc, #632]	; (400798 <sd_mmc_check+0x4fc>)
  40051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400522:	fb03 f301 	mul.w	r3, r3, r1
  400526:	6013      	str	r3, [r2, #0]
  400528:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40052a:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40052c:	7d13      	ldrb	r3, [r2, #20]
  40052e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400530:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400534:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400538:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40053c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400540:	428b      	cmp	r3, r1
  400542:	d00f      	beq.n	400564 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400544:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400546:	7dd1      	ldrb	r1, [r2, #23]
  400548:	0049      	lsls	r1, r1, #1
  40054a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40054e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400550:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400554:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400556:	408b      	lsls	r3, r1
  400558:	7cd1      	ldrb	r1, [r2, #19]
  40055a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40055e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400560:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400562:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400564:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400566:	0409      	lsls	r1, r1, #16
  400568:	f243 1007 	movw	r0, #12551	; 0x3107
  40056c:	4b8b      	ldr	r3, [pc, #556]	; (40079c <sd_mmc_check+0x500>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb0 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400576:	4b8a      	ldr	r3, [pc, #552]	; (4007a0 <sd_mmc_check+0x504>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	7b1b      	ldrb	r3, [r3, #12]
  40057c:	2b3f      	cmp	r3, #63	; 0x3f
  40057e:	f240 809f 	bls.w	4006c0 <sd_mmc_check+0x424>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400582:	2100      	movs	r1, #0
  400584:	9100      	str	r1, [sp, #0]
  400586:	2301      	movs	r3, #1
  400588:	f44f 7200 	mov.w	r2, #512	; 0x200
  40058c:	4885      	ldr	r0, [pc, #532]	; (4007a4 <sd_mmc_check+0x508>)
  40058e:	4d86      	ldr	r5, [pc, #536]	; (4007a8 <sd_mmc_check+0x50c>)
  400590:	47a8      	blx	r5
  400592:	2800      	cmp	r0, #0
  400594:	f43f ae9f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400598:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40059a:	4e84      	ldr	r6, [pc, #528]	; (4007ac <sd_mmc_check+0x510>)
  40059c:	a803      	add	r0, sp, #12
  40059e:	47b0      	blx	r6
  4005a0:	2800      	cmp	r0, #0
  4005a2:	f43f ae98 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005a6:	3501      	adds	r5, #1
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	2d32      	cmp	r5, #50	; 0x32
  4005ac:	d1f6      	bne.n	40059c <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  4005ae:	9e03      	ldr	r6, [sp, #12]
  4005b0:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005b4:	4b7a      	ldr	r3, [pc, #488]	; (4007a0 <sd_mmc_check+0x504>)
  4005b6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005b8:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ba:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005bc:	7d1b      	ldrb	r3, [r3, #20]
  4005be:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4005c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4005c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005d0:	4293      	cmp	r3, r2
  4005d2:	d10e      	bne.n	4005f2 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  4005d4:	4f75      	ldr	r7, [pc, #468]	; (4007ac <sd_mmc_check+0x510>)
  4005d6:	a804      	add	r0, sp, #16
  4005d8:	47b8      	blx	r7
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7b 	beq.w	4002d6 <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005e0:	3501      	adds	r5, #1
  4005e2:	b2ad      	uxth	r5, r5
  4005e4:	2d35      	cmp	r5, #53	; 0x35
  4005e6:	d9f6      	bls.n	4005d6 <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  4005e8:	4b6d      	ldr	r3, [pc, #436]	; (4007a0 <sd_mmc_check+0x504>)
  4005ea:	681a      	ldr	r2, [r3, #0]
  4005ec:	9b04      	ldr	r3, [sp, #16]
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4005f2:	4f6e      	ldr	r7, [pc, #440]	; (4007ac <sd_mmc_check+0x510>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4005f4:	2d7f      	cmp	r5, #127	; 0x7f
  4005f6:	d959      	bls.n	4006ac <sd_mmc_check+0x410>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4005f8:	4b6d      	ldr	r3, [pc, #436]	; (4007b0 <sd_mmc_check+0x514>)
  4005fa:	7818      	ldrb	r0, [r3, #0]
  4005fc:	4b6d      	ldr	r3, [pc, #436]	; (4007b4 <sd_mmc_check+0x518>)
  4005fe:	4798      	blx	r3
  400600:	2803      	cmp	r0, #3
  400602:	d91d      	bls.n	400640 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400604:	4b6a      	ldr	r3, [pc, #424]	; (4007b0 <sd_mmc_check+0x514>)
  400606:	7818      	ldrb	r0, [r3, #0]
  400608:	4b6a      	ldr	r3, [pc, #424]	; (4007b4 <sd_mmc_check+0x518>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
	switch (bus_width) {
  40060e:	2804      	cmp	r0, #4
  400610:	d054      	beq.n	4006bc <sd_mmc_check+0x420>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400612:	4b69      	ldr	r3, [pc, #420]	; (4007b8 <sd_mmc_check+0x51c>)
  400614:	4969      	ldr	r1, [pc, #420]	; (4007bc <sd_mmc_check+0x520>)
  400616:	2808      	cmp	r0, #8
  400618:	bf18      	it	ne
  40061a:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40061c:	f243 1006 	movw	r0, #12550	; 0x3106
  400620:	4b5e      	ldr	r3, [pc, #376]	; (40079c <sd_mmc_check+0x500>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f43f ae56 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40062a:	4b65      	ldr	r3, [pc, #404]	; (4007c0 <sd_mmc_check+0x524>)
  40062c:	4798      	blx	r3
  40062e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400632:	f47f ae50 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  400636:	4b5a      	ldr	r3, [pc, #360]	; (4007a0 <sd_mmc_check+0x504>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  40063c:	4b61      	ldr	r3, [pc, #388]	; (4007c4 <sd_mmc_check+0x528>)
  40063e:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400640:	4b61      	ldr	r3, [pc, #388]	; (4007c8 <sd_mmc_check+0x52c>)
  400642:	4798      	blx	r3
  400644:	b1b6      	cbz	r6, 400674 <sd_mmc_check+0x3d8>
  400646:	b1a8      	cbz	r0, 400674 <sd_mmc_check+0x3d8>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400648:	4960      	ldr	r1, [pc, #384]	; (4007cc <sd_mmc_check+0x530>)
  40064a:	f243 1006 	movw	r0, #12550	; 0x3106
  40064e:	4b53      	ldr	r3, [pc, #332]	; (40079c <sd_mmc_check+0x500>)
  400650:	4798      	blx	r3
  400652:	2800      	cmp	r0, #0
  400654:	f43f ae3f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400658:	4b59      	ldr	r3, [pc, #356]	; (4007c0 <sd_mmc_check+0x524>)
  40065a:	4798      	blx	r3
  40065c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400660:	f47f ae39 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  400664:	4b4e      	ldr	r3, [pc, #312]	; (4007a0 <sd_mmc_check+0x504>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2201      	movs	r2, #1
  40066a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40066c:	4a58      	ldr	r2, [pc, #352]	; (4007d0 <sd_mmc_check+0x534>)
  40066e:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400670:	4b54      	ldr	r3, [pc, #336]	; (4007c4 <sd_mmc_check+0x528>)
  400672:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400674:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400676:	f44f 7800 	mov.w	r8, #512	; 0x200
  40067a:	f241 1710 	movw	r7, #4368	; 0x1110
  40067e:	4e47      	ldr	r6, [pc, #284]	; (40079c <sd_mmc_check+0x500>)
  400680:	4641      	mov	r1, r8
  400682:	4638      	mov	r0, r7
  400684:	47b0      	blx	r6
  400686:	2800      	cmp	r0, #0
  400688:	d16e      	bne.n	400768 <sd_mmc_check+0x4cc>
  40068a:	3d01      	subs	r5, #1
	while (retry--) {
  40068c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400690:	d1f6      	bne.n	400680 <sd_mmc_check+0x3e4>
  400692:	e620      	b.n	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400694:	2314      	movs	r3, #20
  400696:	7313      	strb	r3, [r2, #12]
  400698:	e734      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40069a:	2322      	movs	r3, #34	; 0x22
  40069c:	7313      	strb	r3, [r2, #12]
  40069e:	e731      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  4006a0:	2330      	movs	r3, #48	; 0x30
  4006a2:	7313      	strb	r3, [r2, #12]
  4006a4:	e72e      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  4006a6:	2340      	movs	r3, #64	; 0x40
  4006a8:	7313      	strb	r3, [r2, #12]
  4006aa:	e72b      	b.n	400504 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  4006ac:	a804      	add	r0, sp, #16
  4006ae:	47b8      	blx	r7
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae10 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	e79b      	b.n	4005f4 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006bc:	4945      	ldr	r1, [pc, #276]	; (4007d4 <sd_mmc_check+0x538>)
  4006be:	e7ad      	b.n	40061c <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  4006c0:	4b40      	ldr	r3, [pc, #256]	; (4007c4 <sd_mmc_check+0x528>)
  4006c2:	4798      	blx	r3
  4006c4:	e7d6      	b.n	400674 <sd_mmc_check+0x3d8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c6:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006c8:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ca:	7d5a      	ldrb	r2, [r3, #21]
  4006cc:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4006d2:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4006d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4006d8:	3201      	adds	r2, #1
  4006da:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4006dc:	605a      	str	r2, [r3, #4]
  4006de:	e659      	b.n	400394 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4006e0:	4b2f      	ldr	r3, [pc, #188]	; (4007a0 <sd_mmc_check+0x504>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2210      	movs	r2, #16
  4006e6:	731a      	strb	r2, [r3, #12]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4006e8:	4b31      	ldr	r3, [pc, #196]	; (4007b0 <sd_mmc_check+0x514>)
  4006ea:	7818      	ldrb	r0, [r3, #0]
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <sd_mmc_check+0x518>)
  4006ee:	4798      	blx	r3
  4006f0:	2803      	cmp	r0, #3
  4006f2:	d91c      	bls.n	40072e <sd_mmc_check+0x492>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4006f4:	4b2a      	ldr	r3, [pc, #168]	; (4007a0 <sd_mmc_check+0x504>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7ada      	ldrb	r2, [r3, #11]
  4006fa:	f012 0f01 	tst.w	r2, #1
  4006fe:	d014      	beq.n	40072a <sd_mmc_check+0x48e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400700:	8919      	ldrh	r1, [r3, #8]
  400702:	0409      	lsls	r1, r1, #16
  400704:	f241 1037 	movw	r0, #4407	; 0x1137
  400708:	4b24      	ldr	r3, [pc, #144]	; (40079c <sd_mmc_check+0x500>)
  40070a:	4798      	blx	r3
  40070c:	2800      	cmp	r0, #0
  40070e:	f43f ade2 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400712:	2102      	movs	r1, #2
  400714:	f241 1006 	movw	r0, #4358	; 0x1106
  400718:	4b20      	ldr	r3, [pc, #128]	; (40079c <sd_mmc_check+0x500>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f adda 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  400722:	4b1f      	ldr	r3, [pc, #124]	; (4007a0 <sd_mmc_check+0x504>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2204      	movs	r2, #4
  400728:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  40072a:	4b26      	ldr	r3, [pc, #152]	; (4007c4 <sd_mmc_check+0x528>)
  40072c:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  40072e:	4b26      	ldr	r3, [pc, #152]	; (4007c8 <sd_mmc_check+0x52c>)
  400730:	4798      	blx	r3
  400732:	b150      	cbz	r0, 40074a <sd_mmc_check+0x4ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400734:	4b1a      	ldr	r3, [pc, #104]	; (4007a0 <sd_mmc_check+0x504>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	7ada      	ldrb	r2, [r3, #11]
  40073a:	f012 0f01 	tst.w	r2, #1
  40073e:	d002      	beq.n	400746 <sd_mmc_check+0x4aa>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400740:	7b1b      	ldrb	r3, [r3, #12]
  400742:	2b10      	cmp	r3, #16
  400744:	d84a      	bhi.n	4007dc <sd_mmc_check+0x540>
		sd_mmc_configure_slot();
  400746:	4b1f      	ldr	r3, [pc, #124]	; (4007c4 <sd_mmc_check+0x528>)
  400748:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <sd_mmc_check+0x504>)
  40074c:	681b      	ldr	r3, [r3, #0]
  40074e:	7adb      	ldrb	r3, [r3, #11]
  400750:	f013 0f01 	tst.w	r3, #1
  400754:	d008      	beq.n	400768 <sd_mmc_check+0x4cc>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400756:	f44f 7100 	mov.w	r1, #512	; 0x200
  40075a:	f241 1010 	movw	r0, #4368	; 0x1110
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <sd_mmc_check+0x500>)
  400760:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400762:	2800      	cmp	r0, #0
  400764:	f43f adb7 	beq.w	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400768:	4b0d      	ldr	r3, [pc, #52]	; (4007a0 <sd_mmc_check+0x504>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2200      	movs	r2, #0
  40076e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400770:	4b19      	ldr	r3, [pc, #100]	; (4007d8 <sd_mmc_check+0x53c>)
  400772:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400774:	e59c      	b.n	4002b0 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <sd_mmc_check+0x504>)
  400778:	681b      	ldr	r3, [r3, #0]
  40077a:	221a      	movs	r2, #26
  40077c:	731a      	strb	r2, [r3, #12]
  40077e:	e7b3      	b.n	4006e8 <sd_mmc_check+0x44c>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400780:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400784:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <sd_mmc_check+0x504>)
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	bf14      	ite	ne
  40078c:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40078e:	2220      	moveq	r2, #32
  400790:	731a      	strb	r2, [r3, #12]
  400792:	e7a9      	b.n	4006e8 <sd_mmc_check+0x44c>
  400794:	00402f90 	.word	0x00402f90
  400798:	00402f50 	.word	0x00402f50
  40079c:	00400d59 	.word	0x00400d59
  4007a0:	2040046c 	.word	0x2040046c
  4007a4:	00081108 	.word	0x00081108
  4007a8:	00400db5 	.word	0x00400db5
  4007ac:	00400e7d 	.word	0x00400e7d
  4007b0:	20400494 	.word	0x20400494
  4007b4:	00400cb5 	.word	0x00400cb5
  4007b8:	01b70000 	.word	0x01b70000
  4007bc:	01b70200 	.word	0x01b70200
  4007c0:	00400d7d 	.word	0x00400d7d
  4007c4:	004001ad 	.word	0x004001ad
  4007c8:	00400cbf 	.word	0x00400cbf
  4007cc:	03b90100 	.word	0x03b90100
  4007d0:	03197500 	.word	0x03197500
  4007d4:	01b70100 	.word	0x01b70100
  4007d8:	00400261 	.word	0x00400261
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4007dc:	2540      	movs	r5, #64	; 0x40
  4007de:	462a      	mov	r2, r5
  4007e0:	2100      	movs	r1, #0
  4007e2:	a804      	add	r0, sp, #16
  4007e4:	4b39      	ldr	r3, [pc, #228]	; (4008cc <sd_mmc_check+0x630>)
  4007e6:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4007e8:	2301      	movs	r3, #1
  4007ea:	9300      	str	r3, [sp, #0]
  4007ec:	462a      	mov	r2, r5
  4007ee:	4938      	ldr	r1, [pc, #224]	; (4008d0 <sd_mmc_check+0x634>)
  4007f0:	4838      	ldr	r0, [pc, #224]	; (4008d4 <sd_mmc_check+0x638>)
  4007f2:	4d39      	ldr	r5, [pc, #228]	; (4008d8 <sd_mmc_check+0x63c>)
  4007f4:	47a8      	blx	r5
  4007f6:	2800      	cmp	r0, #0
  4007f8:	f43f ad6d 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  4007fc:	2101      	movs	r1, #1
  4007fe:	a804      	add	r0, sp, #16
  400800:	4b36      	ldr	r3, [pc, #216]	; (4008dc <sd_mmc_check+0x640>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f43f ad66 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40080a:	4b35      	ldr	r3, [pc, #212]	; (4008e0 <sd_mmc_check+0x644>)
  40080c:	4798      	blx	r3
  40080e:	2800      	cmp	r0, #0
  400810:	f43f ad61 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400814:	4b33      	ldr	r3, [pc, #204]	; (4008e4 <sd_mmc_check+0x648>)
  400816:	4798      	blx	r3
  400818:	f010 0f80 	tst.w	r0, #128	; 0x80
  40081c:	f47f ad5b 	bne.w	4002d6 <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400820:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400824:	f003 030f 	and.w	r3, r3, #15
  400828:	2b0f      	cmp	r3, #15
  40082a:	d08c      	beq.n	400746 <sd_mmc_check+0x4aa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40082c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400830:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400834:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400838:	f47f ad4d 	bne.w	4002d6 <sd_mmc_check+0x3a>
	driver_send_clock();
  40083c:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <sd_mmc_check+0x64c>)
  40083e:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <sd_mmc_check+0x650>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	2201      	movs	r2, #1
  400846:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	0052      	lsls	r2, r2, #1
  40084c:	601a      	str	r2, [r3, #0]
  40084e:	e77a      	b.n	400746 <sd_mmc_check+0x4aa>
	*v2 = 0;
  400850:	2200      	movs	r2, #0
  400852:	e551      	b.n	4002f8 <sd_mmc_check+0x5c>
  400854:	2a00      	cmp	r2, #0
  400856:	4f26      	ldr	r7, [pc, #152]	; (4008f0 <sd_mmc_check+0x654>)
  400858:	bf08      	it	eq
  40085a:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40085e:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400862:	f04f 0800 	mov.w	r8, #0
  400866:	4e23      	ldr	r6, [pc, #140]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  400868:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4008e4 <sd_mmc_check+0x648>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40086c:	4641      	mov	r1, r8
  40086e:	f241 1037 	movw	r0, #4407	; 0x1137
  400872:	47b0      	blx	r6
  400874:	b150      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400876:	4639      	mov	r1, r7
  400878:	f244 5029 	movw	r0, #17705	; 0x4529
  40087c:	47b0      	blx	r6
  40087e:	b128      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		resp = driver_get_response();
  400880:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400882:	2800      	cmp	r0, #0
  400884:	f6ff add5 	blt.w	400432 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  400888:	3d01      	subs	r5, #1
  40088a:	d1ef      	bne.n	40086c <sd_mmc_check+0x5d0>
			sd_mmc_card->type = CARD_TYPE_MMC;
  40088c:	4b17      	ldr	r3, [pc, #92]	; (4008ec <sd_mmc_check+0x650>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2202      	movs	r2, #2
  400892:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400894:	2100      	movs	r1, #0
  400896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x658>)
  40089c:	4798      	blx	r3
  40089e:	2800      	cmp	r0, #0
  4008a0:	f43f ad19 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008a4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4008f0 <sd_mmc_check+0x654>
  4008ac:	4f11      	ldr	r7, [pc, #68]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  4008ae:	4e0d      	ldr	r6, [pc, #52]	; (4008e4 <sd_mmc_check+0x648>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008b0:	4641      	mov	r1, r8
  4008b2:	f244 5001 	movw	r0, #17665	; 0x4501
  4008b6:	47b8      	blx	r7
  4008b8:	2800      	cmp	r0, #0
  4008ba:	f43f ad0c 	beq.w	4002d6 <sd_mmc_check+0x3a>
		resp = driver_get_response();
  4008be:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  4008c0:	2800      	cmp	r0, #0
  4008c2:	f6ff adcf 	blt.w	400464 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  4008c6:	3d01      	subs	r5, #1
  4008c8:	d1f2      	bne.n	4008b0 <sd_mmc_check+0x614>
  4008ca:	e504      	b.n	4002d6 <sd_mmc_check+0x3a>
  4008cc:	00402d95 	.word	0x00402d95
  4008d0:	80ffff01 	.word	0x80ffff01
  4008d4:	00081106 	.word	0x00081106
  4008d8:	00400db5 	.word	0x00400db5
  4008dc:	00400ef1 	.word	0x00400ef1
  4008e0:	00400f55 	.word	0x00400f55
  4008e4:	00400d7d 	.word	0x00400d7d
  4008e8:	00400d37 	.word	0x00400d37
  4008ec:	2040046c 	.word	0x2040046c
  4008f0:	401f8000 	.word	0x401f8000
  4008f4:	00400d59 	.word	0x00400d59

004008f8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4008f8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <sd_mmc_get_type+0x18>)
  4008fc:	4798      	blx	r3
  4008fe:	b108      	cbz	r0, 400904 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400900:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400902:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400904:	4b03      	ldr	r3, [pc, #12]	; (400914 <sd_mmc_get_type+0x1c>)
  400906:	4798      	blx	r3
	return sd_mmc_card->type;
  400908:	4b03      	ldr	r3, [pc, #12]	; (400918 <sd_mmc_get_type+0x20>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	7ad8      	ldrb	r0, [r3, #11]
  40090e:	bd08      	pop	{r3, pc}
  400910:	004001d5 	.word	0x004001d5
  400914:	00400261 	.word	0x00400261
  400918:	2040046c 	.word	0x2040046c

0040091c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40091c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <sd_mmc_get_capacity+0x18>)
  400920:	4798      	blx	r3
  400922:	b108      	cbz	r0, 400928 <sd_mmc_get_capacity+0xc>
		return 0;
  400924:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400926:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400928:	4b03      	ldr	r3, [pc, #12]	; (400938 <sd_mmc_get_capacity+0x1c>)
  40092a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <sd_mmc_get_capacity+0x20>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6858      	ldr	r0, [r3, #4]
  400932:	bd08      	pop	{r3, pc}
  400934:	004001d5 	.word	0x004001d5
  400938:	00400261 	.word	0x00400261
  40093c:	2040046c 	.word	0x2040046c

00400940 <sd_mmc_init_read_blocks>:
	return false;
}

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400944:	b082      	sub	sp, #8
  400946:	468a      	mov	sl, r1
  400948:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40094a:	4b26      	ldr	r3, [pc, #152]	; (4009e4 <sd_mmc_init_read_blocks+0xa4>)
  40094c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  40094e:	4680      	mov	r8, r0
  400950:	b118      	cbz	r0, 40095a <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400952:	4640      	mov	r0, r8
  400954:	b002      	add	sp, #8
  400956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40095a:	4c23      	ldr	r4, [pc, #140]	; (4009e8 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  40095c:	4e23      	ldr	r6, [pc, #140]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  40095e:	4d24      	ldr	r5, [pc, #144]	; (4009f0 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400960:	4f24      	ldr	r7, [pc, #144]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400962:	6833      	ldr	r3, [r6, #0]
  400964:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400966:	0409      	lsls	r1, r1, #16
  400968:	f241 100d 	movw	r0, #4365	; 0x110d
  40096c:	47a8      	blx	r5
  40096e:	b128      	cbz	r0, 40097c <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400970:	47b8      	blx	r7
  400972:	f410 7f80 	tst.w	r0, #256	; 0x100
  400976:	d117      	bne.n	4009a8 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400978:	3c01      	subs	r4, #1
  40097a:	d1f2      	bne.n	400962 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  40097c:	4b1e      	ldr	r3, [pc, #120]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  40097e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400980:	f04f 0805 	mov.w	r8, #5
  400984:	e7e5      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400986:	4b1b      	ldr	r3, [pc, #108]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
  400988:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40098a:	4b1c      	ldr	r3, [pc, #112]	; (4009fc <sd_mmc_init_read_blocks+0xbc>)
  40098c:	4003      	ands	r3, r0
  40098e:	b933      	cbnz	r3, 40099e <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400990:	4b1b      	ldr	r3, [pc, #108]	; (400a00 <sd_mmc_init_read_blocks+0xc0>)
  400992:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400996:	4b1b      	ldr	r3, [pc, #108]	; (400a04 <sd_mmc_init_read_blocks+0xc4>)
  400998:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  40099c:	e7d9      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  40099e:	4b16      	ldr	r3, [pc, #88]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009a0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4009a2:	f04f 0805 	mov.w	r8, #5
  4009a6:	e7d4      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  4009a8:	4b17      	ldr	r3, [pc, #92]	; (400a08 <sd_mmc_init_read_blocks+0xc8>)
  4009aa:	4818      	ldr	r0, [pc, #96]	; (400a0c <sd_mmc_init_read_blocks+0xcc>)
  4009ac:	f1b9 0f01 	cmp.w	r9, #1
  4009b0:	bf98      	it	ls
  4009b2:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4009b4:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
  4009b6:	681b      	ldr	r3, [r3, #0]
  4009b8:	7adb      	ldrb	r3, [r3, #11]
  4009ba:	f013 0f08 	tst.w	r3, #8
  4009be:	d101      	bne.n	4009c4 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  4009c0:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4009c4:	2301      	movs	r3, #1
  4009c6:	9300      	str	r3, [sp, #0]
  4009c8:	464b      	mov	r3, r9
  4009ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  4009ce:	4651      	mov	r1, sl
  4009d0:	4c0f      	ldr	r4, [pc, #60]	; (400a10 <sd_mmc_init_read_blocks+0xd0>)
  4009d2:	47a0      	blx	r4
  4009d4:	2800      	cmp	r0, #0
  4009d6:	d1d6      	bne.n	400986 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4009dc:	f04f 0805 	mov.w	r8, #5
  4009e0:	e7b7      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  4009e2:	bf00      	nop
  4009e4:	004001d5 	.word	0x004001d5
  4009e8:	00030d41 	.word	0x00030d41
  4009ec:	2040046c 	.word	0x2040046c
  4009f0:	00400d59 	.word	0x00400d59
  4009f4:	00400d7d 	.word	0x00400d7d
  4009f8:	00400261 	.word	0x00400261
  4009fc:	e4580000 	.word	0xe4580000
  400a00:	20400490 	.word	0x20400490
  400a04:	20400492 	.word	0x20400492
  400a08:	00081111 	.word	0x00081111
  400a0c:	00101112 	.word	0x00101112
  400a10:	00400db5 	.word	0x00400db5

00400a14 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400a14:	b510      	push	{r4, lr}
  400a16:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <sd_mmc_start_read_blocks+0x20>)
  400a1a:	4798      	blx	r3
  400a1c:	b920      	cbnz	r0, 400a28 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400a1e:	2200      	movs	r2, #0
  400a20:	4b05      	ldr	r3, [pc, #20]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a22:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400a24:	2005      	movs	r0, #5
  400a26:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400a28:	4a03      	ldr	r2, [pc, #12]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a2a:	8813      	ldrh	r3, [r2, #0]
  400a2c:	1b1c      	subs	r4, r3, r4
  400a2e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400a30:	2000      	movs	r0, #0
}
  400a32:	bd10      	pop	{r4, pc}
  400a34:	00400ef1 	.word	0x00400ef1
  400a38:	20400490 	.word	0x20400490

00400a3c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400a3c:	b510      	push	{r4, lr}
  400a3e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400a40:	4b13      	ldr	r3, [pc, #76]	; (400a90 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400a42:	4798      	blx	r3
  400a44:	b908      	cbnz	r0, 400a4a <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400a46:	2005      	movs	r0, #5
  400a48:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400a4a:	b184      	cbz	r4, 400a6e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400a4c:	2200      	movs	r2, #0
  400a4e:	4b11      	ldr	r3, [pc, #68]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a50:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400a52:	4b11      	ldr	r3, [pc, #68]	; (400a98 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400a54:	881b      	ldrh	r3, [r3, #0]
  400a56:	2b01      	cmp	r3, #1
  400a58:	d00f      	beq.n	400a7a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400a5a:	2100      	movs	r1, #0
  400a5c:	f243 100c 	movw	r0, #12556	; 0x310c
  400a60:	4b0e      	ldr	r3, [pc, #56]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a62:	4798      	blx	r3
  400a64:	b168      	cbz	r0, 400a82 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400a66:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a68:	4798      	blx	r3
	return SD_MMC_OK;
  400a6a:	2000      	movs	r0, #0
  400a6c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400a6e:	4b09      	ldr	r3, [pc, #36]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a70:	881b      	ldrh	r3, [r3, #0]
  400a72:	2b00      	cmp	r3, #0
  400a74:	d0ed      	beq.n	400a52 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400a76:	2000      	movs	r0, #0
}
  400a78:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400a7a:	4b09      	ldr	r3, [pc, #36]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a7c:	4798      	blx	r3
		return SD_MMC_OK;
  400a7e:	2000      	movs	r0, #0
  400a80:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400a82:	2100      	movs	r1, #0
  400a84:	f243 100c 	movw	r0, #12556	; 0x310c
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a8a:	4798      	blx	r3
  400a8c:	e7eb      	b.n	400a66 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400a8e:	bf00      	nop
  400a90:	00400f55 	.word	0x00400f55
  400a94:	20400490 	.word	0x20400490
  400a98:	20400492 	.word	0x20400492
  400a9c:	00400d59 	.word	0x00400d59
  400aa0:	00400261 	.word	0x00400261

00400aa4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400aa4:	b570      	push	{r4, r5, r6, lr}
  400aa6:	b082      	sub	sp, #8
  400aa8:	460e      	mov	r6, r1
  400aaa:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400aac:	4b16      	ldr	r3, [pc, #88]	; (400b08 <sd_mmc_init_write_blocks+0x64>)
  400aae:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400ab0:	4604      	mov	r4, r0
  400ab2:	b9b8      	cbnz	r0, 400ae4 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400ab4:	4b15      	ldr	r3, [pc, #84]	; (400b0c <sd_mmc_init_write_blocks+0x68>)
  400ab6:	4816      	ldr	r0, [pc, #88]	; (400b10 <sd_mmc_init_write_blocks+0x6c>)
  400ab8:	2d01      	cmp	r5, #1
  400aba:	bf98      	it	ls
  400abc:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <sd_mmc_init_write_blocks+0x70>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	7adb      	ldrb	r3, [r3, #11]
  400ac4:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400ac8:	bf08      	it	eq
  400aca:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400acc:	2301      	movs	r3, #1
  400ace:	9300      	str	r3, [sp, #0]
  400ad0:	462b      	mov	r3, r5
  400ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ad6:	4631      	mov	r1, r6
  400ad8:	4e0f      	ldr	r6, [pc, #60]	; (400b18 <sd_mmc_init_write_blocks+0x74>)
  400ada:	47b0      	blx	r6
  400adc:	b928      	cbnz	r0, 400aea <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400ade:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400ae0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ae2:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400ae4:	4620      	mov	r0, r4
  400ae6:	b002      	add	sp, #8
  400ae8:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400aea:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <sd_mmc_init_write_blocks+0x7c>)
  400aec:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <sd_mmc_init_write_blocks+0x80>)
  400af0:	4003      	ands	r3, r0
  400af2:	b923      	cbnz	r3, 400afe <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400af4:	4b0c      	ldr	r3, [pc, #48]	; (400b28 <sd_mmc_init_write_blocks+0x84>)
  400af6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400af8:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <sd_mmc_init_write_blocks+0x88>)
  400afa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400afc:	e7f2      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400afe:	4b07      	ldr	r3, [pc, #28]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400b00:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400b02:	2405      	movs	r4, #5
  400b04:	e7ee      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
  400b06:	bf00      	nop
  400b08:	004001d5 	.word	0x004001d5
  400b0c:	00089118 	.word	0x00089118
  400b10:	00109119 	.word	0x00109119
  400b14:	2040046c 	.word	0x2040046c
  400b18:	00400db5 	.word	0x00400db5
  400b1c:	00400261 	.word	0x00400261
  400b20:	00400d7d 	.word	0x00400d7d
  400b24:	e4580000 	.word	0xe4580000
  400b28:	20400490 	.word	0x20400490
  400b2c:	20400492 	.word	0x20400492

00400b30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400b30:	b510      	push	{r4, lr}
  400b32:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400b34:	4b06      	ldr	r3, [pc, #24]	; (400b50 <sd_mmc_start_write_blocks+0x20>)
  400b36:	4798      	blx	r3
  400b38:	b920      	cbnz	r0, 400b44 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400b3a:	2200      	movs	r2, #0
  400b3c:	4b05      	ldr	r3, [pc, #20]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b3e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400b40:	2005      	movs	r0, #5
  400b42:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400b44:	4a03      	ldr	r2, [pc, #12]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b46:	8813      	ldrh	r3, [r2, #0]
  400b48:	1b1c      	subs	r4, r3, r4
  400b4a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400b4c:	2000      	movs	r0, #0
}
  400b4e:	bd10      	pop	{r4, pc}
  400b50:	00400fb9 	.word	0x00400fb9
  400b54:	20400490 	.word	0x20400490

00400b58 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400b58:	b510      	push	{r4, lr}
  400b5a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400b5c:	4b12      	ldr	r3, [pc, #72]	; (400ba8 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400b5e:	4798      	blx	r3
  400b60:	b908      	cbnz	r0, 400b66 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400b62:	2005      	movs	r0, #5
  400b64:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400b66:	b184      	cbz	r4, 400b8a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400b68:	2200      	movs	r2, #0
  400b6a:	4b10      	ldr	r3, [pc, #64]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b6c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400b6e:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400b70:	881b      	ldrh	r3, [r3, #0]
  400b72:	2b01      	cmp	r3, #1
  400b74:	d00f      	beq.n	400b96 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400b76:	2100      	movs	r1, #0
  400b78:	f243 100c 	movw	r0, #12556	; 0x310c
  400b7c:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b7e:	4798      	blx	r3
  400b80:	b968      	cbnz	r0, 400b9e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400b82:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b84:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400b86:	2005      	movs	r0, #5
  400b88:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400b8a:	4b08      	ldr	r3, [pc, #32]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b8c:	881b      	ldrh	r3, [r3, #0]
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d0ed      	beq.n	400b6e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400b92:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400b94:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400b96:	4b08      	ldr	r3, [pc, #32]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b98:	4798      	blx	r3
		return SD_MMC_OK;
  400b9a:	2000      	movs	r0, #0
  400b9c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400b9e:	4b06      	ldr	r3, [pc, #24]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400ba0:	4798      	blx	r3
	return SD_MMC_OK;
  400ba2:	2000      	movs	r0, #0
  400ba4:	bd10      	pop	{r4, pc}
  400ba6:	bf00      	nop
  400ba8:	0040101d 	.word	0x0040101d
  400bac:	20400490 	.word	0x20400490
  400bb0:	20400492 	.word	0x20400492
  400bb4:	00400d59 	.word	0x00400d59
  400bb8:	00400261 	.word	0x00400261

00400bbc <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400bbc:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc2:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400bc4:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400bc6:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400bc8:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400bca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400bcc:	2680      	movs	r6, #128	; 0x80
  400bce:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400bd0:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400bd2:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400bd4:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400bd6:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400bd8:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400bda:	2200      	movs	r2, #0
  400bdc:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400bde:	2205      	movs	r2, #5
  400be0:	601a      	str	r2, [r3, #0]
}
  400be2:	bc70      	pop	{r4, r5, r6}
  400be4:	4770      	bx	lr
	...

00400be8 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400be8:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400bea:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400bee:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400bf0:	f411 7f80 	tst.w	r1, #256	; 0x100
  400bf4:	d004      	beq.n	400c00 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400bf6:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400bfa:	d00e      	beq.n	400c1a <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400bfc:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400c00:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400c04:	bf18      	it	ne
  400c06:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c0e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400c10:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400c12:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400c14:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400c18:	e00d      	b.n	400c36 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400c1a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400c1e:	bf14      	ite	ne
  400c20:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400c24:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400c28:	e7ea      	b.n	400c00 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c2a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400c2e:	d10c      	bne.n	400c4a <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400c30:	f013 0f01 	tst.w	r3, #1
  400c34:	d10d      	bne.n	400c52 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  400c36:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400c38:	2a00      	cmp	r2, #0
  400c3a:	d0f6      	beq.n	400c2a <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400c3c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400c40:	d0f6      	beq.n	400c30 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  400c42:	4b10      	ldr	r3, [pc, #64]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c44:	4798      	blx	r3
				return false;
  400c46:	2000      	movs	r0, #0
  400c48:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400c4a:	4b0e      	ldr	r3, [pc, #56]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c4c:	4798      	blx	r3
				return false;
  400c4e:	2000      	movs	r0, #0
  400c50:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400c52:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400c56:	d103      	bne.n	400c60 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400c58:	2001      	movs	r0, #1
  400c5a:	bd08      	pop	{r3, pc}
	return true;
  400c5c:	2001      	movs	r0, #1
  400c5e:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c66:	f04f 32ff 	mov.w	r2, #4294967295
  400c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400c6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400c72:	2b20      	cmp	r3, #32
  400c74:	d0f2      	beq.n	400c5c <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  400c76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400c78:	3a01      	subs	r2, #1
  400c7a:	d1f8      	bne.n	400c6e <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  400c7c:	4b01      	ldr	r3, [pc, #4]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c7e:	4798      	blx	r3
			return false;
  400c80:	2000      	movs	r0, #0
  400c82:	bd08      	pop	{r3, pc}
  400c84:	00400bbd 	.word	0x00400bbd

00400c88 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400c88:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400c8a:	2012      	movs	r0, #18
  400c8c:	4c08      	ldr	r4, [pc, #32]	; (400cb0 <hsmci_init+0x28>)
  400c8e:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400c90:	203a      	movs	r0, #58	; 0x3a
  400c92:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c98:	2272      	movs	r2, #114	; 0x72
  400c9a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400c9c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400c9e:	2211      	movs	r2, #17
  400ca0:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400ca2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400ca6:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400ca8:	2205      	movs	r2, #5
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	00401bc1 	.word	0x00401bc1

00400cb4 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400cb4:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400cb6:	bf0c      	ite	eq
  400cb8:	2004      	moveq	r0, #4
  400cba:	2000      	movne	r0, #0
  400cbc:	4770      	bx	lr

00400cbe <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400cbe:	2001      	movs	r0, #1
  400cc0:	4770      	bx	lr
	...

00400cc4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400cc4:	b19b      	cbz	r3, 400cee <hsmci_select_device+0x2a>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400cd0:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400cd2:	0049      	lsls	r1, r1, #1
  400cd4:	4b15      	ldr	r3, [pc, #84]	; (400d2c <hsmci_select_device+0x68>)
  400cd6:	4299      	cmp	r1, r3
  400cd8:	d810      	bhi.n	400cfc <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  400cda:	4815      	ldr	r0, [pc, #84]	; (400d30 <hsmci_select_device+0x6c>)
  400cdc:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
  400ce0:	fb01 0113 	mls	r1, r1, r3, r0
		if (rest > 0) {
  400ce4:	b101      	cbz	r1, 400ce8 <hsmci_select_device+0x24>
			clkdiv++;
  400ce6:	3301      	adds	r3, #1
		if (clkdiv > 0) {
  400ce8:	b14b      	cbz	r3, 400cfe <hsmci_select_device+0x3a>
			clkdiv -= 1;
  400cea:	3b01      	subs	r3, #1
  400cec:	e007      	b.n	400cfe <hsmci_select_device+0x3a>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cf2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400cf8:	6543      	str	r3, [r0, #84]	; 0x54
  400cfa:	e7ea      	b.n	400cd2 <hsmci_select_device+0xe>
		clkdiv = 0;
  400cfc:	2300      	movs	r3, #0
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400cfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d02:	6848      	ldr	r0, [r1, #4]
  400d04:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400d08:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400d0a:	6848      	ldr	r0, [r1, #4]
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	4303      	orrs	r3, r0
  400d10:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400d12:	2a04      	cmp	r2, #4
  400d14:	d007      	beq.n	400d26 <hsmci_select_device+0x62>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400d16:	2a08      	cmp	r2, #8
  400d18:	bf0c      	ite	eq
  400d1a:	22c0      	moveq	r2, #192	; 0xc0
  400d1c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d22:	60da      	str	r2, [r3, #12]
  400d24:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400d26:	2280      	movs	r2, #128	; 0x80
  400d28:	e7f9      	b.n	400d1e <hsmci_select_device+0x5a>
  400d2a:	bf00      	nop
  400d2c:	089543ff 	.word	0x089543ff
  400d30:	08954400 	.word	0x08954400

00400d34 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  400d34:	4770      	bx	lr

00400d36 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d3a:	685a      	ldr	r2, [r3, #4]
  400d3c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d40:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400d42:	2200      	movs	r2, #0
  400d44:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400d46:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400d4a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400d4c:	461a      	mov	r2, r3
  400d4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400d50:	f013 0f01 	tst.w	r3, #1
  400d54:	d0fb      	beq.n	400d4e <hsmci_send_clock+0x18>
}
  400d56:	4770      	bx	lr

00400d58 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400d58:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d5e:	685a      	ldr	r2, [r3, #4]
  400d60:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d64:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400d66:	2400      	movs	r4, #0
  400d68:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400d6a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400d6c:	460a      	mov	r2, r1
  400d6e:	4601      	mov	r1, r0
  400d70:	4620      	mov	r0, r4
  400d72:	4b01      	ldr	r3, [pc, #4]	; (400d78 <hsmci_send_cmd+0x20>)
  400d74:	4798      	blx	r3
}
  400d76:	bd10      	pop	{r4, pc}
  400d78:	00400be9 	.word	0x00400be9

00400d7c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d80:	6a18      	ldr	r0, [r3, #32]
}
  400d82:	4770      	bx	lr

00400d84 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400d84:	b410      	push	{r4}
  400d86:	1d03      	adds	r3, r0, #4
  400d88:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400d8a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400d8e:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400d90:	0e11      	lsrs	r1, r2, #24
  400d92:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400d96:	0c11      	lsrs	r1, r2, #16
  400d98:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400d9c:	0a11      	lsrs	r1, r2, #8
  400d9e:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400da2:	f803 2c01 	strb.w	r2, [r3, #-1]
  400da6:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  400da8:	4283      	cmp	r3, r0
  400daa:	d1f0      	bne.n	400d8e <hsmci_get_response_128+0xa>
		response++;
	}
}
  400dac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db0:	4770      	bx	lr
	...

00400db4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400db4:	b570      	push	{r4, r5, r6, lr}
  400db6:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400dba:	b384      	cbz	r4, 400e1e <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400dbc:	f44f 7580 	mov.w	r5, #256	; 0x100
  400dc0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400dc4:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400dc6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400dca:	686c      	ldr	r4, [r5, #4]
  400dcc:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400dd0:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400dd2:	f012 0f03 	tst.w	r2, #3
  400dd6:	d027      	beq.n	400e28 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400dd8:	686c      	ldr	r4, [r5, #4]
  400dda:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400dde:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400de0:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400de4:	2c00      	cmp	r4, #0
  400de6:	bf14      	ite	ne
  400de8:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400dec:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400df0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400df4:	d11f      	bne.n	400e36 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400df6:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400dfa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400dfe:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400e00:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400e04:	d12b      	bne.n	400e5e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  400e06:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400e0a:	d12b      	bne.n	400e64 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400e0c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400e10:	d118      	bne.n	400e44 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400e12:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400e16:	bf18      	it	ne
  400e18:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400e1c:	e012      	b.n	400e44 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  400e1e:	2500      	movs	r5, #0
  400e20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400e24:	6525      	str	r5, [r4, #80]	; 0x50
  400e26:	e7ce      	b.n	400dc6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400e28:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400e2c:	686c      	ldr	r4, [r5, #4]
  400e2e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400e32:	606c      	str	r4, [r5, #4]
  400e34:	e7d4      	b.n	400de0 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400e36:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400e3a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400e3e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400e42:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400e44:	2600      	movs	r6, #0
  400e46:	4d09      	ldr	r5, [pc, #36]	; (400e6c <hsmci_adtc_start+0xb8>)
  400e48:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400e4a:	4d09      	ldr	r5, [pc, #36]	; (400e70 <hsmci_adtc_start+0xbc>)
  400e4c:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400e4e:	4a09      	ldr	r2, [pc, #36]	; (400e74 <hsmci_adtc_start+0xc0>)
  400e50:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400e52:	460a      	mov	r2, r1
  400e54:	4601      	mov	r1, r0
  400e56:	4620      	mov	r0, r4
  400e58:	4b07      	ldr	r3, [pc, #28]	; (400e78 <hsmci_adtc_start+0xc4>)
  400e5a:	4798      	blx	r3
}
  400e5c:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400e5e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400e62:	e7ef      	b.n	400e44 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400e64:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400e68:	e7ec      	b.n	400e44 <hsmci_adtc_start+0x90>
  400e6a:	bf00      	nop
  400e6c:	2040049c 	.word	0x2040049c
  400e70:	20400496 	.word	0x20400496
  400e74:	20400498 	.word	0x20400498
  400e78:	00400be9 	.word	0x00400be9

00400e7c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400e7c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400e7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e82:	4a16      	ldr	r2, [pc, #88]	; (400edc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e86:	4213      	tst	r3, r2
  400e88:	d11d      	bne.n	400ec6 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400e8a:	f013 0f02 	tst.w	r3, #2
  400e8e:	d0f9      	beq.n	400e84 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e96:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400e98:	4a11      	ldr	r2, [pc, #68]	; (400ee0 <hsmci_read_word+0x64>)
  400e9a:	6813      	ldr	r3, [r2, #0]
  400e9c:	3304      	adds	r3, #4
  400e9e:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400ea0:	4a10      	ldr	r2, [pc, #64]	; (400ee4 <hsmci_read_word+0x68>)
  400ea2:	8811      	ldrh	r1, [r2, #0]
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <hsmci_read_word+0x6c>)
  400ea6:	8812      	ldrh	r2, [r2, #0]
  400ea8:	fb02 f201 	mul.w	r2, r2, r1
  400eac:	4293      	cmp	r3, r2
  400eae:	d312      	bcc.n	400ed6 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eb4:	4a09      	ldr	r2, [pc, #36]	; (400edc <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eb8:	4213      	tst	r3, r2
  400eba:	d108      	bne.n	400ece <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400ebc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400ec0:	d0f9      	beq.n	400eb6 <hsmci_read_word+0x3a>
	return true;
  400ec2:	2001      	movs	r0, #1
  400ec4:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <hsmci_read_word+0x70>)
  400ec8:	4798      	blx	r3
			return false;
  400eca:	2000      	movs	r0, #0
  400ecc:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400ece:	4b07      	ldr	r3, [pc, #28]	; (400eec <hsmci_read_word+0x70>)
  400ed0:	4798      	blx	r3
			return false;
  400ed2:	2000      	movs	r0, #0
  400ed4:	bd08      	pop	{r3, pc}
		return true;
  400ed6:	2001      	movs	r0, #1
}
  400ed8:	bd08      	pop	{r3, pc}
  400eda:	bf00      	nop
  400edc:	c0600000 	.word	0xc0600000
  400ee0:	2040049c 	.word	0x2040049c
  400ee4:	20400496 	.word	0x20400496
  400ee8:	20400498 	.word	0x20400498
  400eec:	00400bbd 	.word	0x00400bbd

00400ef0 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ef2:	b089      	sub	sp, #36	; 0x24
  400ef4:	4607      	mov	r7, r0
  400ef6:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400ef8:	2220      	movs	r2, #32
  400efa:	2100      	movs	r1, #0
  400efc:	4668      	mov	r0, sp
  400efe:	4b0e      	ldr	r3, [pc, #56]	; (400f38 <hsmci_start_read_blocks+0x48>)
  400f00:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f02:	4e0e      	ldr	r6, [pc, #56]	; (400f3c <hsmci_start_read_blocks+0x4c>)
  400f04:	2501      	movs	r5, #1
  400f06:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400f08:	4b0d      	ldr	r3, [pc, #52]	; (400f40 <hsmci_start_read_blocks+0x50>)
  400f0a:	881b      	ldrh	r3, [r3, #0]
  400f0c:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400f10:	4b0c      	ldr	r3, [pc, #48]	; (400f44 <hsmci_start_read_blocks+0x54>)
  400f12:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400f14:	08a3      	lsrs	r3, r4, #2
  400f16:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400f18:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <hsmci_start_read_blocks+0x58>)
  400f1a:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  400f1c:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400f1e:	466a      	mov	r2, sp
  400f20:	2100      	movs	r1, #0
  400f22:	4630      	mov	r0, r6
  400f24:	4b09      	ldr	r3, [pc, #36]	; (400f4c <hsmci_start_read_blocks+0x5c>)
  400f26:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400f28:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400f2a:	4a09      	ldr	r2, [pc, #36]	; (400f50 <hsmci_start_read_blocks+0x60>)
  400f2c:	6813      	ldr	r3, [r2, #0]
  400f2e:	441c      	add	r4, r3
  400f30:	6014      	str	r4, [r2, #0]
	return true;
}
  400f32:	4628      	mov	r0, r5
  400f34:	b009      	add	sp, #36	; 0x24
  400f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f38:	00402d95 	.word	0x00402d95
  400f3c:	40078000 	.word	0x40078000
  400f40:	20400496 	.word	0x20400496
  400f44:	00043001 	.word	0x00043001
  400f48:	40000200 	.word	0x40000200
  400f4c:	00401d47 	.word	0x00401d47
  400f50:	2040049c 	.word	0x2040049c

00400f54 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  400f54:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f56:	4b12      	ldr	r3, [pc, #72]	; (400fa0 <hsmci_wait_end_of_read_blocks+0x4c>)
  400f58:	881b      	ldrh	r3, [r3, #0]
  400f5a:	4a12      	ldr	r2, [pc, #72]	; (400fa4 <hsmci_wait_end_of_read_blocks+0x50>)
  400f5c:	8812      	ldrh	r2, [r2, #0]
  400f5e:	fb02 f203 	mul.w	r2, r2, r3
  400f62:	4b11      	ldr	r3, [pc, #68]	; (400fa8 <hsmci_wait_end_of_read_blocks+0x54>)
  400f64:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400f66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f6a:	4910      	ldr	r1, [pc, #64]	; (400fac <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f6c:	4e10      	ldr	r6, [pc, #64]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f6e:	e009      	b.n	400f84 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  400f70:	4b10      	ldr	r3, [pc, #64]	; (400fb4 <hsmci_wait_end_of_read_blocks+0x60>)
  400f72:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400f74:	2201      	movs	r2, #1
  400f76:	4b0e      	ldr	r3, [pc, #56]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f78:	621a      	str	r2, [r3, #32]
			return false;
  400f7a:	2000      	movs	r0, #0
  400f7c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400f7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400f82:	d10a      	bne.n	400f9a <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400f84:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400f86:	420b      	tst	r3, r1
  400f88:	d1f2      	bne.n	400f70 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400f8a:	42a2      	cmp	r2, r4
  400f8c:	d9f7      	bls.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400f8e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400f90:	f015 0f01 	tst.w	r5, #1
  400f94:	d0f3      	beq.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  400f96:	2001      	movs	r0, #1
	return true;
}
  400f98:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400f9a:	2001      	movs	r0, #1
  400f9c:	bd70      	pop	{r4, r5, r6, pc}
  400f9e:	bf00      	nop
  400fa0:	20400496 	.word	0x20400496
  400fa4:	20400498 	.word	0x20400498
  400fa8:	2040049c 	.word	0x2040049c
  400fac:	c0600000 	.word	0xc0600000
  400fb0:	40078000 	.word	0x40078000
  400fb4:	00400bbd 	.word	0x00400bbd

00400fb8 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  400fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fba:	b089      	sub	sp, #36	; 0x24
  400fbc:	4607      	mov	r7, r0
  400fbe:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400fc0:	2220      	movs	r2, #32
  400fc2:	2100      	movs	r1, #0
  400fc4:	4668      	mov	r0, sp
  400fc6:	4b0e      	ldr	r3, [pc, #56]	; (401000 <hsmci_start_write_blocks+0x48>)
  400fc8:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400fca:	4e0e      	ldr	r6, [pc, #56]	; (401004 <hsmci_start_write_blocks+0x4c>)
  400fcc:	2501      	movs	r5, #1
  400fce:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400fd0:	4b0d      	ldr	r3, [pc, #52]	; (401008 <hsmci_start_write_blocks+0x50>)
  400fd2:	881b      	ldrh	r3, [r3, #0]
  400fd4:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400fd8:	4b0c      	ldr	r3, [pc, #48]	; (40100c <hsmci_start_write_blocks+0x54>)
  400fda:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400fdc:	08a3      	lsrs	r3, r4, #2
  400fde:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  400fe0:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400fe2:	4b0b      	ldr	r3, [pc, #44]	; (401010 <hsmci_start_write_blocks+0x58>)
  400fe4:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400fe6:	466a      	mov	r2, sp
  400fe8:	2100      	movs	r1, #0
  400fea:	4630      	mov	r0, r6
  400fec:	4b09      	ldr	r3, [pc, #36]	; (401014 <hsmci_start_write_blocks+0x5c>)
  400fee:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400ff0:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400ff2:	4a09      	ldr	r2, [pc, #36]	; (401018 <hsmci_start_write_blocks+0x60>)
  400ff4:	6813      	ldr	r3, [r2, #0]
  400ff6:	441c      	add	r4, r3
  400ff8:	6014      	str	r4, [r2, #0]
	return true;
}
  400ffa:	4628      	mov	r0, r5
  400ffc:	b009      	add	sp, #36	; 0x24
  400ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401000:	00402d95 	.word	0x00402d95
  401004:	40078000 	.word	0x40078000
  401008:	20400496 	.word	0x20400496
  40100c:	00015011 	.word	0x00015011
  401010:	40000200 	.word	0x40000200
  401014:	00401d47 	.word	0x00401d47
  401018:	2040049c 	.word	0x2040049c

0040101c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40101c:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  40101e:	4b12      	ldr	r3, [pc, #72]	; (401068 <hsmci_wait_end_of_write_blocks+0x4c>)
  401020:	881b      	ldrh	r3, [r3, #0]
  401022:	4a12      	ldr	r2, [pc, #72]	; (40106c <hsmci_wait_end_of_write_blocks+0x50>)
  401024:	8812      	ldrh	r2, [r2, #0]
  401026:	fb02 f203 	mul.w	r2, r2, r3
  40102a:	4b11      	ldr	r3, [pc, #68]	; (401070 <hsmci_wait_end_of_write_blocks+0x54>)
  40102c:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  40102e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401032:	4910      	ldr	r1, [pc, #64]	; (401074 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401034:	4e10      	ldr	r6, [pc, #64]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401036:	e009      	b.n	40104c <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  401038:	4b10      	ldr	r3, [pc, #64]	; (40107c <hsmci_wait_end_of_write_blocks+0x60>)
  40103a:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  40103c:	2201      	movs	r2, #1
  40103e:	4b0e      	ldr	r3, [pc, #56]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401040:	621a      	str	r2, [r3, #32]
			return false;
  401042:	2000      	movs	r0, #0
  401044:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401046:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40104a:	d10a      	bne.n	401062 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  40104c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40104e:	420b      	tst	r3, r1
  401050:	d1f2      	bne.n	401038 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401052:	42a2      	cmp	r2, r4
  401054:	d9f7      	bls.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  401056:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  401058:	f015 0f01 	tst.w	r5, #1
  40105c:	d0f3      	beq.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  40105e:	2001      	movs	r0, #1

	return true;
}
  401060:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  401062:	2001      	movs	r0, #1
  401064:	bd70      	pop	{r4, r5, r6, pc}
  401066:	bf00      	nop
  401068:	20400496 	.word	0x20400496
  40106c:	20400498 	.word	0x20400498
  401070:	2040049c 	.word	0x2040049c
  401074:	c0600000 	.word	0xc0600000
  401078:	40078000 	.word	0x40078000
  40107c:	00400bbd 	.word	0x00400bbd

00401080 <matrix_set_system_io>:

	p_matrix->MATRIX_SYSIO = ul_io;

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)
	
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <matrix_set_system_io+0x1c>)
  401082:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  401086:	4a06      	ldr	r2, [pc, #24]	; (4010a0 <matrix_set_system_io+0x20>)
  401088:	400a      	ands	r2, r1
  40108a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);
  40108e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  401092:	b280      	uxth	r0, r0
  401094:	4310      	orrs	r0, r2
  401096:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  40109a:	4770      	bx	lr
  40109c:	40088000 	.word	0x40088000
  4010a0:	ffff0000 	.word	0xffff0000

004010a4 <matrix_get_system_io>:

	return (p_matrix->MATRIX_SYSIO);

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)

	return (p_matrix->CCFG_SYSIO & 0xFFFF);
  4010a4:	4b02      	ldr	r3, [pc, #8]	; (4010b0 <matrix_get_system_io+0xc>)
  4010a6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
#else

	return (p_matrix->CCFG_SYSIO);

#endif
}
  4010aa:	b280      	uxth	r0, r0
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop
  4010b0:	40088000 	.word	0x40088000

004010b4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4010b4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4010b6:	010b      	lsls	r3, r1, #4
  4010b8:	4293      	cmp	r3, r2
  4010ba:	d914      	bls.n	4010e6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010bc:	00c9      	lsls	r1, r1, #3
  4010be:	084b      	lsrs	r3, r1, #1
  4010c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4010c4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4010c8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010ca:	1e5c      	subs	r4, r3, #1
  4010cc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010d0:	428c      	cmp	r4, r1
  4010d2:	d901      	bls.n	4010d8 <usart_set_async_baudrate+0x24>
		return 1;
  4010d4:	2001      	movs	r0, #1
  4010d6:	e017      	b.n	401108 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4010d8:	6841      	ldr	r1, [r0, #4]
  4010da:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4010de:	6041      	str	r1, [r0, #4]
  4010e0:	e00c      	b.n	4010fc <usart_set_async_baudrate+0x48>
		return 1;
  4010e2:	2001      	movs	r0, #1
  4010e4:	e010      	b.n	401108 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010e6:	0859      	lsrs	r1, r3, #1
  4010e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4010ec:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010f0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010f2:	1e5c      	subs	r4, r3, #1
  4010f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010f8:	428c      	cmp	r4, r1
  4010fa:	d8f2      	bhi.n	4010e2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010fc:	0412      	lsls	r2, r2, #16
  4010fe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401102:	431a      	orrs	r2, r3
  401104:	6202      	str	r2, [r0, #32]

	return 0;
  401106:	2000      	movs	r0, #0
}
  401108:	f85d 4b04 	ldr.w	r4, [sp], #4
  40110c:	4770      	bx	lr
	...

00401110 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401110:	4b08      	ldr	r3, [pc, #32]	; (401134 <usart_reset+0x24>)
  401112:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401116:	2300      	movs	r3, #0
  401118:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40111a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40111c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40111e:	2388      	movs	r3, #136	; 0x88
  401120:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401122:	2324      	movs	r3, #36	; 0x24
  401124:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401126:	f44f 7380 	mov.w	r3, #256	; 0x100
  40112a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40112c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401130:	6003      	str	r3, [r0, #0]
  401132:	4770      	bx	lr
  401134:	55534100 	.word	0x55534100

00401138 <usart_init_rs232>:
{
  401138:	b570      	push	{r4, r5, r6, lr}
  40113a:	4605      	mov	r5, r0
  40113c:	460c      	mov	r4, r1
  40113e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401140:	4b0f      	ldr	r3, [pc, #60]	; (401180 <usart_init_rs232+0x48>)
  401142:	4798      	blx	r3
	ul_reg_val = 0;
  401144:	2200      	movs	r2, #0
  401146:	4b0f      	ldr	r3, [pc, #60]	; (401184 <usart_init_rs232+0x4c>)
  401148:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40114a:	b1a4      	cbz	r4, 401176 <usart_init_rs232+0x3e>
  40114c:	4632      	mov	r2, r6
  40114e:	6821      	ldr	r1, [r4, #0]
  401150:	4628      	mov	r0, r5
  401152:	4b0d      	ldr	r3, [pc, #52]	; (401188 <usart_init_rs232+0x50>)
  401154:	4798      	blx	r3
  401156:	4602      	mov	r2, r0
  401158:	b978      	cbnz	r0, 40117a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40115a:	6863      	ldr	r3, [r4, #4]
  40115c:	68a1      	ldr	r1, [r4, #8]
  40115e:	430b      	orrs	r3, r1
  401160:	6921      	ldr	r1, [r4, #16]
  401162:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401164:	68e1      	ldr	r1, [r4, #12]
  401166:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401168:	4906      	ldr	r1, [pc, #24]	; (401184 <usart_init_rs232+0x4c>)
  40116a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40116c:	6869      	ldr	r1, [r5, #4]
  40116e:	430b      	orrs	r3, r1
  401170:	606b      	str	r3, [r5, #4]
}
  401172:	4610      	mov	r0, r2
  401174:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401176:	2201      	movs	r2, #1
  401178:	e7fb      	b.n	401172 <usart_init_rs232+0x3a>
  40117a:	2201      	movs	r2, #1
  40117c:	e7f9      	b.n	401172 <usart_init_rs232+0x3a>
  40117e:	bf00      	nop
  401180:	00401111 	.word	0x00401111
  401184:	204004a0 	.word	0x204004a0
  401188:	004010b5 	.word	0x004010b5

0040118c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  40118c:	2340      	movs	r3, #64	; 0x40
  40118e:	6003      	str	r3, [r0, #0]
  401190:	4770      	bx	lr

00401192 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401192:	2310      	movs	r3, #16
  401194:	6003      	str	r3, [r0, #0]
  401196:	4770      	bx	lr

00401198 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  401198:	6081      	str	r1, [r0, #8]
  40119a:	4770      	bx	lr

0040119c <usart_get_status>:
	return p_usart->US_CSR;
  40119c:	6940      	ldr	r0, [r0, #20]
}
  40119e:	4770      	bx	lr

004011a0 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4011a0:	6943      	ldr	r3, [r0, #20]
  4011a2:	f013 0f01 	tst.w	r3, #1
  4011a6:	d005      	beq.n	4011b4 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4011a8:	6983      	ldr	r3, [r0, #24]
  4011aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4011ae:	600b      	str	r3, [r1, #0]
	return 0;
  4011b0:	2000      	movs	r0, #0
  4011b2:	4770      	bx	lr
		return 1;
  4011b4:	2001      	movs	r0, #1
}
  4011b6:	4770      	bx	lr

004011b8 <TWIHS_init>:
#include "definitions.h"



void TWIHS_init()
{	
  4011b8:	b500      	push	{lr}
  4011ba:	b085      	sub	sp, #20
	/* TWIHS Settings */
	twihs_options_t twihsOpt;
	twihsOpt.master_clk = sysclk_get_cpu_hz() / 2;	// Make sure this is the correct clock to be checking,
  4011bc:	4b09      	ldr	r3, [pc, #36]	; (4011e4 <TWIHS_init+0x2c>)
  4011be:	9301      	str	r3, [sp, #4]
	twihsOpt.speed = 100000;						// 100KHz
  4011c0:	4b09      	ldr	r3, [pc, #36]	; (4011e8 <TWIHS_init+0x30>)
  4011c2:	9302      	str	r3, [sp, #8]
	
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  4011c4:	4b09      	ldr	r3, [pc, #36]	; (4011ec <TWIHS_init+0x34>)
  4011c6:	4798      	blx	r3
  4011c8:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  4011cc:	4b08      	ldr	r3, [pc, #32]	; (4011f0 <TWIHS_init+0x38>)
  4011ce:	4798      	blx	r3

	pmc_enable_periph_clk(ID_TWIHS1);
  4011d0:	2014      	movs	r0, #20
  4011d2:	4b08      	ldr	r3, [pc, #32]	; (4011f4 <TWIHS_init+0x3c>)
  4011d4:	4798      	blx	r3

	twihs_master_init(TWIHS1, &twihsOpt);
  4011d6:	a901      	add	r1, sp, #4
  4011d8:	4807      	ldr	r0, [pc, #28]	; (4011f8 <TWIHS_init+0x40>)
  4011da:	4b08      	ldr	r3, [pc, #32]	; (4011fc <TWIHS_init+0x44>)
  4011dc:	4798      	blx	r3
}
  4011de:	b005      	add	sp, #20
  4011e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4011e4:	044aa200 	.word	0x044aa200
  4011e8:	000186a0 	.word	0x000186a0
  4011ec:	004010a5 	.word	0x004010a5
  4011f0:	00401081 	.word	0x00401081
  4011f4:	00401bc1 	.word	0x00401bc1
  4011f8:	4001c000 	.word	0x4001c000
  4011fc:	00401c5d 	.word	0x00401c5d

00401200 <SPI_BitBang_init>:

void SPI_BitBang_init()
{
  401200:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_PIOB);
  401202:	200b      	movs	r0, #11
  401204:	4b04      	ldr	r3, [pc, #16]	; (401218 <SPI_BitBang_init+0x18>)
  401206:	4798      	blx	r3
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  401208:	4b04      	ldr	r3, [pc, #16]	; (40121c <SPI_BitBang_init+0x1c>)
  40120a:	4798      	blx	r3
  40120c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  401210:	4b03      	ldr	r3, [pc, #12]	; (401220 <SPI_BitBang_init+0x20>)
  401212:	4798      	blx	r3
  401214:	bd08      	pop	{r3, pc}
  401216:	bf00      	nop
  401218:	00401bc1 	.word	0x00401bc1
  40121c:	004010a5 	.word	0x004010a5
  401220:	00401081 	.word	0x00401081

00401224 <USART_init>:
}

void USART_init()
{
  401224:	b510      	push	{r4, lr}
  401226:	b086      	sub	sp, #24
	/* USART Settings */
	const sam_usart_opt_t usart_console_settings = {
  401228:	2300      	movs	r3, #0
  40122a:	9303      	str	r3, [sp, #12]
  40122c:	9304      	str	r3, [sp, #16]
  40122e:	9305      	str	r3, [sp, #20]
  401230:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401234:	9300      	str	r3, [sp, #0]
  401236:	23c0      	movs	r3, #192	; 0xc0
  401238:	9301      	str	r3, [sp, #4]
  40123a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40123e:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401240:	200f      	movs	r0, #15
  401242:	4b0c      	ldr	r3, [pc, #48]	; (401274 <USART_init+0x50>)
  401244:	4798      	blx	r3
		US_MR_CHMODE_NORMAL
	};
	
	sysclk_enable_peripheral_clock(ID_USART2);

	usart_init_rs232(USART2, &usart_console_settings, sysclk_get_peripheral_hz());
  401246:	4c0c      	ldr	r4, [pc, #48]	; (401278 <USART_init+0x54>)
  401248:	4a0c      	ldr	r2, [pc, #48]	; (40127c <USART_init+0x58>)
  40124a:	4669      	mov	r1, sp
  40124c:	4620      	mov	r0, r4
  40124e:	4b0c      	ldr	r3, [pc, #48]	; (401280 <USART_init+0x5c>)
  401250:	4798      	blx	r3
	usart_enable_tx(USART2);
  401252:	4620      	mov	r0, r4
  401254:	4b0b      	ldr	r3, [pc, #44]	; (401284 <USART_init+0x60>)
  401256:	4798      	blx	r3
	usart_enable_rx(USART2);
  401258:	4620      	mov	r0, r4
  40125a:	4b0b      	ldr	r3, [pc, #44]	; (401288 <USART_init+0x64>)
  40125c:	4798      	blx	r3

	usart_enable_interrupt(USART2, US_IER_RXRDY);		// Character reception interrupt
  40125e:	2101      	movs	r1, #1
  401260:	4620      	mov	r0, r4
  401262:	4b0a      	ldr	r3, [pc, #40]	; (40128c <USART_init+0x68>)
  401264:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401266:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40126a:	4b09      	ldr	r3, [pc, #36]	; (401290 <USART_init+0x6c>)
  40126c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);						// General interrupts for the USART module
}
  40126e:	b006      	add	sp, #24
  401270:	bd10      	pop	{r4, pc}
  401272:	bf00      	nop
  401274:	00401bc1 	.word	0x00401bc1
  401278:	4002c000 	.word	0x4002c000
  40127c:	044aa200 	.word	0x044aa200
  401280:	00401139 	.word	0x00401139
  401284:	0040118d 	.word	0x0040118d
  401288:	00401193 	.word	0x00401193
  40128c:	00401199 	.word	0x00401199
  401290:	e000e100 	.word	0xe000e100

00401294 <Enable_Clock_Management1>:
#include "PYTHON480.h"


// Configure clock management blocks, activate clock generation and distribution circuits
void Enable_Clock_Management1() 
{
  401294:	b510      	push	{r4, lr}
	SPI_Write(2, 0x0000);	// Monochrome sensor
  401296:	2100      	movs	r1, #0
  401298:	2002      	movs	r0, #2
  40129a:	4c0e      	ldr	r4, [pc, #56]	; (4012d4 <Enable_Clock_Management1+0x40>)
  40129c:	47a0      	blx	r4
	SPI_Write(17, 0x2113);	// Configure PLL
  40129e:	f242 1113 	movw	r1, #8467	; 0x2113
  4012a2:	2011      	movs	r0, #17
  4012a4:	47a0      	blx	r4
	SPI_Write(20, 0x0000);	// Configure clock management
  4012a6:	2100      	movs	r1, #0
  4012a8:	2014      	movs	r0, #20
  4012aa:	47a0      	blx	r4
	SPI_Write(26, 0x2280);	// Configure PLL lock detector
  4012ac:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  4012b0:	201a      	movs	r0, #26
  4012b2:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);	// Configure PLL lock detector
  4012b4:	f643 512d 	movw	r1, #15661	; 0x3d2d
  4012b8:	201b      	movs	r0, #27
  4012ba:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7014|0x0008);	// SPI_Write(32, 0x2004); PLL input clock
  4012bc:	f247 011c 	movw	r1, #28700	; 0x701c
  4012c0:	2020      	movs	r0, #32
  4012c2:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7014);			// SPI_Write(32, 0x2004); PLL input clock
		SPI_Write(32, 0x7014|0x0008);			// SPI_Write(32, 0x2004); PLL input clock
	#endif
	
	SPI_Write(8, 0x0000);	// Release PLL soft reset
  4012c4:	2100      	movs	r1, #0
  4012c6:	2008      	movs	r0, #8
  4012c8:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(16, 0x0007);			// Disable PLL
  4012ca:	2107      	movs	r1, #7
  4012cc:	2010      	movs	r0, #16
  4012ce:	47a0      	blx	r4
  4012d0:	bd10      	pop	{r4, pc}
  4012d2:	bf00      	nop
  4012d4:	00401819 	.word	0x00401819

004012d8 <Enable_Clock_Management2>:
	#endif
}

// Enable internal clock distribution
void Enable_Clock_Management2() 
{
  4012d8:	b510      	push	{r4, lr}
	SPI_Write(9, 0x0000);	// Release clock generator Soft Reset
  4012da:	2100      	movs	r1, #0
  4012dc:	2009      	movs	r0, #9
  4012de:	4c05      	ldr	r4, [pc, #20]	; (4012f4 <Enable_Clock_Management2+0x1c>)
  4012e0:	47a0      	blx	r4

	// Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7006|0x0008);		// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
  4012e2:	f247 010e 	movw	r1, #28686	; 0x700e
  4012e6:	2020      	movs	r0, #32
  4012e8:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7006);				// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
		SPI_Write(32, 0x7006|0x0008);				// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	SPI_Write(34, 0x0001);	// Enable logic blocks
  4012ea:	2101      	movs	r1, #1
  4012ec:	2022      	movs	r0, #34	; 0x22
  4012ee:	47a0      	blx	r4
  4012f0:	bd10      	pop	{r4, pc}
  4012f2:	bf00      	nop
  4012f4:	00401819 	.word	0x00401819

004012f8 <Required_Uploads>:
}

// Reserved register settings uploads
void Required_Uploads() 
{
  4012f8:	b510      	push	{r4, lr}
	SPI_Write(2, 0x0000);
  4012fa:	2100      	movs	r1, #0
  4012fc:	2002      	movs	r0, #2
  4012fe:	4ccd      	ldr	r4, [pc, #820]	; (401634 <Required_Uploads+0x33c>)
  401300:	47a0      	blx	r4
	SPI_Write(8, 0x0000);
  401302:	2100      	movs	r1, #0
  401304:	2008      	movs	r0, #8
  401306:	47a0      	blx	r4
	SPI_Write(9, 0x0000);
  401308:	2100      	movs	r1, #0
  40130a:	2009      	movs	r0, #9
  40130c:	47a0      	blx	r4
	SPI_Write(10, 0x0000);
  40130e:	2100      	movs	r1, #0
  401310:	200a      	movs	r0, #10
  401312:	47a0      	blx	r4
	SPI_Write(20, 0x0000);
  401314:	2100      	movs	r1, #0
  401316:	2014      	movs	r0, #20
  401318:	47a0      	blx	r4
	// SPI_Write(24, 0x0001);
	SPI_Write(26, 0x2280);
  40131a:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  40131e:	201a      	movs	r0, #26
  401320:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);
  401322:	f643 512d 	movw	r1, #15661	; 0x3d2d
  401326:	201b      	movs	r0, #27
  401328:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);
  40132a:	f247 010f 	movw	r1, #28687	; 0x700f
  40132e:	2020      	movs	r0, #32
  401330:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7007);
		SPI_Write(32, 0x7007|0x0008);
	#endif
	
	SPI_Write(34, 0x0001);
  401332:	2101      	movs	r1, #1
  401334:	2022      	movs	r0, #34	; 0x22
  401336:	47a0      	blx	r4
	SPI_Write(40, 0x0007);		// 3rd bit enables bias. This was set to 0 (0x003).
  401338:	2107      	movs	r1, #7
  40133a:	2028      	movs	r0, #40	; 0x28
  40133c:	47a0      	blx	r4
	SPI_Write(41, 0x085F);
  40133e:	f640 015f 	movw	r1, #2143	; 0x85f
  401342:	2029      	movs	r0, #41	; 0x29
  401344:	47a0      	blx	r4
	SPI_Write(42, 0x4103);
  401346:	f244 1103 	movw	r1, #16643	; 0x4103
  40134a:	202a      	movs	r0, #42	; 0x2a
  40134c:	47a0      	blx	r4
	SPI_Write(43, 0x0518);
  40134e:	f44f 61a3 	mov.w	r1, #1304	; 0x518
  401352:	202b      	movs	r0, #43	; 0x2b
  401354:	47a0      	blx	r4
	SPI_Write(48, 0x0001);
  401356:	2101      	movs	r1, #1
  401358:	2030      	movs	r0, #48	; 0x30
  40135a:	47a0      	blx	r4
	SPI_Write(64, 0x0001);
  40135c:	2101      	movs	r1, #1
  40135e:	2040      	movs	r0, #64	; 0x40
  401360:	47a0      	blx	r4
	SPI_Write(65, 0x382A);		// Bias block. SPI_Write(65, 0x382B)
  401362:	f643 012a 	movw	r1, #14378	; 0x382a
  401366:	2041      	movs	r0, #65	; 0x41
  401368:	47a0      	blx	r4
	SPI_Write(66, 0x53C8);
  40136a:	f245 31c8 	movw	r1, #21448	; 0x53c8
  40136e:	2042      	movs	r0, #66	; 0x42
  401370:	47a0      	blx	r4
	SPI_Write(67, 0x0665);
  401372:	f240 6165 	movw	r1, #1637	; 0x665
  401376:	2043      	movs	r0, #67	; 0x43
  401378:	47a0      	blx	r4
	SPI_Write(68, 0x0085);
  40137a:	2185      	movs	r1, #133	; 0x85
  40137c:	2044      	movs	r0, #68	; 0x44
  40137e:	47a0      	blx	r4
	SPI_Write(69, 0x0888);
  401380:	f640 0188 	movw	r1, #2184	; 0x888
  401384:	2045      	movs	r0, #69	; 0x45
  401386:	47a0      	blx	r4
	SPI_Write(70, 0x4800);
  401388:	f44f 4190 	mov.w	r1, #18432	; 0x4800
  40138c:	2046      	movs	r0, #70	; 0x46
  40138e:	47a0      	blx	r4
	SPI_Write(71, 0x8888);
  401390:	f648 0188 	movw	r1, #34952	; 0x8888
  401394:	2047      	movs	r0, #71	; 0x47
  401396:	47a0      	blx	r4
	SPI_Write(72, 0x0117);
  401398:	f240 1117 	movw	r1, #279	; 0x117
  40139c:	2048      	movs	r0, #72	; 0x48
  40139e:	47a0      	blx	r4
	// SPI_Write(112, 0x0007);
	SPI_Write(112, 0x0000);		// LVDS power-down config
  4013a0:	2100      	movs	r1, #0
  4013a2:	2070      	movs	r0, #112	; 0x70
  4013a4:	47a0      	blx	r4
	SPI_Write(128, 0x470A);		//SPI_Write(128, 0x470A); SPI_Write(128, 0x4714); black offset
  4013a6:	f244 710a 	movw	r1, #18186	; 0x470a
  4013aa:	2080      	movs	r0, #128	; 0x80
  4013ac:	47a0      	blx	r4
	SPI_Write(129, 0x8001);
  4013ae:	f248 0101 	movw	r1, #32769	; 0x8001
  4013b2:	2081      	movs	r0, #129	; 0x81
  4013b4:	47a0      	blx	r4
	// SPI_Write(130, 0x0001);	// Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
//	SPI_Write(144,0x0003);

	SPI_Write(130, 0x0015);
  4013b6:	2115      	movs	r1, #21
  4013b8:	2082      	movs	r0, #130	; 0x82
  4013ba:	47a0      	blx	r4
	SPI_Write(192, 0x0801);		// Monitor select function
  4013bc:	f640 0101 	movw	r1, #2049	; 0x801
  4013c0:	20c0      	movs	r0, #192	; 0xc0
  4013c2:	47a0      	blx	r4
	SPI_Write(194, 0x03E4);		// reverse x and y enabled for demo kit compatibility
  4013c4:	f44f 7179 	mov.w	r1, #996	; 0x3e4
  4013c8:	20c2      	movs	r0, #194	; 0xc2
  4013ca:	47a0      	blx	r4
	SPI_Write(197, 0x0380);		// Num black lines SPI_Write(197, 0x030A);
  4013cc:	f44f 7160 	mov.w	r1, #896	; 0x380
  4013d0:	20c5      	movs	r0, #197	; 0xc5
  4013d2:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(199, 167);	// Exposure/Frame rate config, SPI_Write(199, 0x0299);	// Why is this not 666?? --> Python divides input clock by 4 and then uses PLL to multiply by 4 again
  4013d4:	21a7      	movs	r1, #167	; 0xa7
  4013d6:	20c7      	movs	r0, #199	; 0xc7
  4013d8:	47a0      	blx	r4
		SPI_Write(200, 5000);	// Frame length, SPI_Write(200, 0x0350);
  4013da:	f241 3188 	movw	r1, #5000	; 0x1388
  4013de:	20c8      	movs	r0, #200	; 0xc8
  4013e0:	47a0      	blx	r4
		SPI_Write(201, 4900);	// SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
  4013e2:	f241 3124 	movw	r1, #4900	; 0x1324
  4013e6:	20c9      	movs	r0, #201	; 0xc9
  4013e8:	47a0      	blx	r4
		SPI_Write(199, 666);		// Exposure/Frame rate config, SPI_Write(199, 0x0299);
		SPI_Write(200, 3000);	// Frame length, SPI_Write(200, 0x0350);
		SPI_Write(201, 2900);	// SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
	#endif
	
	SPI_Write(204, 0x00E1); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  4013ea:	21e1      	movs	r1, #225	; 0xe1
  4013ec:	20cc      	movs	r0, #204	; 0xcc
  4013ee:	47a0      	blx	r4
	SPI_Write(207, 0x0014);
  4013f0:	2114      	movs	r1, #20
  4013f2:	20cf      	movs	r0, #207	; 0xcf
  4013f4:	47a0      	blx	r4
	SPI_Write(214, 0x0100);
  4013f6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4013fa:	20d6      	movs	r0, #214	; 0xd6
  4013fc:	47a0      	blx	r4
	SPI_Write(215, 0x101F);
  4013fe:	f241 011f 	movw	r1, #4127	; 0x101f
  401402:	20d7      	movs	r0, #215	; 0xd7
  401404:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  401406:	2100      	movs	r1, #0
  401408:	20d8      	movs	r0, #216	; 0xd8
  40140a:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  40140c:	2123      	movs	r1, #35	; 0x23
  40140e:	20db      	movs	r0, #219	; 0xdb
  401410:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  401412:	f643 412b 	movw	r1, #15403	; 0x3c2b
  401416:	20dc      	movs	r0, #220	; 0xdc
  401418:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  40141a:	f642 314d 	movw	r1, #11085	; 0x2b4d
  40141e:	20dd      	movs	r0, #221	; 0xdd
  401420:	47a0      	blx	r4
	SPI_Write(224, 0x3E5E);
  401422:	f643 615e 	movw	r1, #15966	; 0x3e5e
  401426:	20e0      	movs	r0, #224	; 0xe0
  401428:	47a0      	blx	r4
	SPI_Write(211, 0x0049);
  40142a:	2149      	movs	r1, #73	; 0x49
  40142c:	20d3      	movs	r0, #211	; 0xd3
  40142e:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  401430:	2100      	movs	r1, #0
  401432:	20d8      	movs	r0, #216	; 0xd8
  401434:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  401436:	2123      	movs	r1, #35	; 0x23
  401438:	20db      	movs	r0, #219	; 0xdb
  40143a:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  40143c:	f643 412b 	movw	r1, #15403	; 0x3c2b
  401440:	20dc      	movs	r0, #220	; 0xdc
  401442:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  401444:	f642 314d 	movw	r1, #11085	; 0x2b4d
  401448:	20dd      	movs	r0, #221	; 0xdd
  40144a:	47a0      	blx	r4
	SPI_Write(230, 0x0299);
  40144c:	f240 2199 	movw	r1, #665	; 0x299
  401450:	20e6      	movs	r0, #230	; 0xe6
  401452:	47a0      	blx	r4
	SPI_Write(231, 0x0350);
  401454:	f44f 7154 	mov.w	r1, #848	; 0x350
  401458:	20e7      	movs	r0, #231	; 0xe7
  40145a:	47a0      	blx	r4
	SPI_Write(232, 0x01F4);
  40145c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  401460:	20e8      	movs	r0, #232	; 0xe8
  401462:	47a0      	blx	r4
	SPI_Write(235, 0x00E1);
  401464:	21e1      	movs	r1, #225	; 0xe1
  401466:	20eb      	movs	r0, #235	; 0xeb
  401468:	47a0      	blx	r4


	
	// PROGRAM SPACE //
	SPI_Write(384, 0xC800);
  40146a:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40146e:	f44f 70c0 	mov.w	r0, #384	; 0x180
  401472:	47a0      	blx	r4
	SPI_Write(385, 0xFB1F);
  401474:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  401478:	f240 1081 	movw	r0, #385	; 0x181
  40147c:	47a0      	blx	r4
	SPI_Write(386, 0xFB1F);
  40147e:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  401482:	f44f 70c1 	mov.w	r0, #386	; 0x182
  401486:	47a0      	blx	r4
	SPI_Write(387, 0xFB12);
  401488:	f64f 3112 	movw	r1, #64274	; 0xfb12
  40148c:	f240 1083 	movw	r0, #387	; 0x183
  401490:	47a0      	blx	r4
	SPI_Write(388, 0xF912);
  401492:	f64f 1112 	movw	r1, #63762	; 0xf912
  401496:	f44f 70c2 	mov.w	r0, #388	; 0x184
  40149a:	47a0      	blx	r4
	SPI_Write(389, 0xF903);
  40149c:	f64f 1103 	movw	r1, #63747	; 0xf903
  4014a0:	f240 1085 	movw	r0, #389	; 0x185
  4014a4:	47a0      	blx	r4
	SPI_Write(390, 0xF802);
  4014a6:	f64f 0102 	movw	r1, #63490	; 0xf802
  4014aa:	f44f 70c3 	mov.w	r0, #390	; 0x186
  4014ae:	47a0      	blx	r4
	SPI_Write(391, 0xF30F);
  4014b0:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4014b4:	f240 1087 	movw	r0, #391	; 0x187
  4014b8:	47a0      	blx	r4
	SPI_Write(392, 0xF30F);
  4014ba:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4014be:	f44f 70c4 	mov.w	r0, #392	; 0x188
  4014c2:	47a0      	blx	r4
	SPI_Write(393, 0xF30F);
  4014c4:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4014c8:	f240 1089 	movw	r0, #393	; 0x189
  4014cc:	47a0      	blx	r4
	SPI_Write(394, 0xF30A);
  4014ce:	f24f 310a 	movw	r1, #62218	; 0xf30a
  4014d2:	f44f 70c5 	mov.w	r0, #394	; 0x18a
  4014d6:	47a0      	blx	r4
	SPI_Write(395, 0xF101);
  4014d8:	f24f 1101 	movw	r1, #61697	; 0xf101
  4014dc:	f240 108b 	movw	r0, #395	; 0x18b
  4014e0:	47a0      	blx	r4
	SPI_Write(396, 0xF00A);
  4014e2:	f24f 010a 	movw	r1, #61450	; 0xf00a
  4014e6:	f44f 70c6 	mov.w	r0, #396	; 0x18c
  4014ea:	47a0      	blx	r4
	SPI_Write(397, 0xF24B);
  4014ec:	f24f 214b 	movw	r1, #62027	; 0xf24b
  4014f0:	f240 108d 	movw	r0, #397	; 0x18d
  4014f4:	47a0      	blx	r4
	SPI_Write(398, 0xF201);
  4014f6:	f24f 2101 	movw	r1, #61953	; 0xf201
  4014fa:	f44f 70c7 	mov.w	r0, #398	; 0x18e
  4014fe:	47a0      	blx	r4
	SPI_Write(399, 0xF226);
  401500:	f24f 2126 	movw	r1, #61990	; 0xf226
  401504:	f240 108f 	movw	r0, #399	; 0x18f
  401508:	47a0      	blx	r4
	SPI_Write(400, 0xF021);
  40150a:	f24f 0121 	movw	r1, #61473	; 0xf021
  40150e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401512:	47a0      	blx	r4
	SPI_Write(401, 0xF001);
  401514:	f24f 0101 	movw	r1, #61441	; 0xf001
  401518:	f240 1091 	movw	r0, #401	; 0x191
  40151c:	47a0      	blx	r4
	SPI_Write(402, 0xF402);
  40151e:	f24f 4102 	movw	r1, #62466	; 0xf402
  401522:	f44f 70c9 	mov.w	r0, #402	; 0x192
  401526:	47a0      	blx	r4
	SPI_Write(403, 0xF007);
  401528:	f24f 0107 	movw	r1, #61447	; 0xf007
  40152c:	f240 1093 	movw	r0, #403	; 0x193
  401530:	47a0      	blx	r4
	SPI_Write(404, 0xF20F);
  401532:	f24f 210f 	movw	r1, #61967	; 0xf20f
  401536:	f44f 70ca 	mov.w	r0, #404	; 0x194
  40153a:	47a0      	blx	r4
	SPI_Write(405, 0xF20F);
  40153c:	f24f 210f 	movw	r1, #61967	; 0xf20f
  401540:	f240 1095 	movw	r0, #405	; 0x195
  401544:	47a0      	blx	r4
	SPI_Write(406, 0xF202);
  401546:	f24f 2102 	movw	r1, #61954	; 0xf202
  40154a:	f44f 70cb 	mov.w	r0, #406	; 0x196
  40154e:	47a0      	blx	r4
	SPI_Write(407, 0xF006);
  401550:	f24f 0106 	movw	r1, #61446	; 0xf006
  401554:	f240 1097 	movw	r0, #407	; 0x197
  401558:	47a0      	blx	r4
	SPI_Write(408, 0xEC08);
  40155a:	f64e 4108 	movw	r1, #60424	; 0xec08
  40155e:	f44f 70cc 	mov.w	r0, #408	; 0x198
  401562:	47a0      	blx	r4
	SPI_Write(409, 0xC801);
  401564:	f64c 0101 	movw	r1, #51201	; 0xc801
  401568:	f240 1099 	movw	r0, #409	; 0x199
  40156c:	47a0      	blx	r4
	SPI_Write(410, 0xC800);
  40156e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  401572:	f44f 70cd 	mov.w	r0, #410	; 0x19a
  401576:	47a0      	blx	r4

	SPI_Write(419, 0xC800);
  401578:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40157c:	f240 10a3 	movw	r0, #419	; 0x1a3
  401580:	47a0      	blx	r4
	SPI_Write(420, 0xCC02);
  401582:	f64c 4102 	movw	r1, #52226	; 0xcc02
  401586:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
  40158a:	47a0      	blx	r4
	SPI_Write(421, 0xCC01);
  40158c:	f64c 4101 	movw	r1, #52225	; 0xcc01
  401590:	f240 10a5 	movw	r0, #421	; 0x1a5
  401594:	47a0      	blx	r4
	SPI_Write(422, 0xCC02);
  401596:	f64c 4102 	movw	r1, #52226	; 0xcc02
  40159a:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
  40159e:	47a0      	blx	r4
	SPI_Write(423, 0xCC01);
  4015a0:	f64c 4101 	movw	r1, #52225	; 0xcc01
  4015a4:	f240 10a7 	movw	r0, #423	; 0x1a7
  4015a8:	47a0      	blx	r4
	SPI_Write(424, 0xCC02);
  4015aa:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4015ae:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
  4015b2:	47a0      	blx	r4
	SPI_Write(425, 0xC805);
  4015b4:	f64c 0105 	movw	r1, #51205	; 0xc805
  4015b8:	f240 10a9 	movw	r0, #425	; 0x1a9
  4015bc:	47a0      	blx	r4
	SPI_Write(426, 0xC800);
  4015be:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  4015c2:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
  4015c6:	47a0      	blx	r4

	SPI_Write(427, 0x0030);
  4015c8:	2130      	movs	r1, #48	; 0x30
  4015ca:	f240 10ab 	movw	r0, #427	; 0x1ab
  4015ce:	47a0      	blx	r4
	SPI_Write(428, 0x207B);
  4015d0:	f242 017b 	movw	r1, #8315	; 0x207b
  4015d4:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
  4015d8:	47a0      	blx	r4
	SPI_Write(429, 0x2071);
  4015da:	f242 0171 	movw	r1, #8305	; 0x2071
  4015de:	f240 10ad 	movw	r0, #429	; 0x1ad
  4015e2:	47a0      	blx	r4
	SPI_Write(430, 0x0071);
  4015e4:	2171      	movs	r1, #113	; 0x71
  4015e6:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
  4015ea:	47a0      	blx	r4
	SPI_Write(431, 0x107F);
  4015ec:	f241 017f 	movw	r1, #4223	; 0x107f
  4015f0:	f240 10af 	movw	r0, #431	; 0x1af
  4015f4:	47a0      	blx	r4
	SPI_Write(432, 0x1072);
  4015f6:	f241 0172 	movw	r1, #4210	; 0x1072
  4015fa:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
  4015fe:	47a0      	blx	r4
	SPI_Write(433, 0x1074);
  401600:	f241 0174 	movw	r1, #4212	; 0x1074
  401604:	f240 10b1 	movw	r0, #433	; 0x1b1
  401608:	47a0      	blx	r4
	SPI_Write(434, 0x0071);
  40160a:	2171      	movs	r1, #113	; 0x71
  40160c:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
  401610:	47a0      	blx	r4
	SPI_Write(435, 0x0031);
  401612:	2131      	movs	r1, #49	; 0x31
  401614:	f240 10b3 	movw	r0, #435	; 0x1b3
  401618:	47a0      	blx	r4
	SPI_Write(436, 0x21BB);
  40161a:	f242 11bb 	movw	r1, #8635	; 0x21bb
  40161e:	f44f 70da 	mov.w	r0, #436	; 0x1b4
  401622:	47a0      	blx	r4
	SPI_Write(437, 0x20B1);
  401624:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401628:	f240 10b5 	movw	r0, #437	; 0x1b5
  40162c:	47a0      	blx	r4
	SPI_Write(438, 0x00B1);
  40162e:	21b1      	movs	r1, #177	; 0xb1
  401630:	e002      	b.n	401638 <Required_Uploads+0x340>
  401632:	bf00      	nop
  401634:	00401819 	.word	0x00401819
  401638:	f44f 70db 	mov.w	r0, #438	; 0x1b6
  40163c:	47a0      	blx	r4
	SPI_Write(439, 0x10BF);
  40163e:	f241 01bf 	movw	r1, #4287	; 0x10bf
  401642:	f240 10b7 	movw	r0, #439	; 0x1b7
  401646:	47a0      	blx	r4
	SPI_Write(440, 0x10B2);
  401648:	f241 01b2 	movw	r1, #4274	; 0x10b2
  40164c:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
  401650:	47a0      	blx	r4
	SPI_Write(441, 0x10B4);
  401652:	f241 01b4 	movw	r1, #4276	; 0x10b4
  401656:	f240 10b9 	movw	r0, #441	; 0x1b9
  40165a:	47a0      	blx	r4
	SPI_Write(442, 0x00B1);
  40165c:	21b1      	movs	r1, #177	; 0xb1
  40165e:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
  401662:	47a0      	blx	r4
	SPI_Write(443, 0x0030);
  401664:	2130      	movs	r1, #48	; 0x30
  401666:	f240 10bb 	movw	r0, #443	; 0x1bb
  40166a:	47a0      	blx	r4

	SPI_Write(444, 0x0030);
  40166c:	2130      	movs	r1, #48	; 0x30
  40166e:	f44f 70de 	mov.w	r0, #444	; 0x1bc
  401672:	47a0      	blx	r4
	SPI_Write(445, 0x217B);
  401674:	f242 117b 	movw	r1, #8571	; 0x217b
  401678:	f240 10bd 	movw	r0, #445	; 0x1bd
  40167c:	47a0      	blx	r4
	SPI_Write(446, 0x2071);
  40167e:	f242 0171 	movw	r1, #8305	; 0x2071
  401682:	f44f 70df 	mov.w	r0, #446	; 0x1be
  401686:	47a0      	blx	r4
	SPI_Write(447, 0x0071);
  401688:	2171      	movs	r1, #113	; 0x71
  40168a:	f240 10bf 	movw	r0, #447	; 0x1bf
  40168e:	47a0      	blx	r4
	SPI_Write(448, 0x107F);
  401690:	f241 017f 	movw	r1, #4223	; 0x107f
  401694:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
  401698:	47a0      	blx	r4
	SPI_Write(449, 0x1072);
  40169a:	f241 0172 	movw	r1, #4210	; 0x1072
  40169e:	f240 10c1 	movw	r0, #449	; 0x1c1
  4016a2:	47a0      	blx	r4
	SPI_Write(450, 0x1074);
  4016a4:	f241 0174 	movw	r1, #4212	; 0x1074
  4016a8:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
  4016ac:	47a0      	blx	r4
	SPI_Write(451, 0x0071);
  4016ae:	2171      	movs	r1, #113	; 0x71
  4016b0:	f240 10c3 	movw	r0, #451	; 0x1c3
  4016b4:	47a0      	blx	r4
	SPI_Write(452, 0x0031);
  4016b6:	2131      	movs	r1, #49	; 0x31
  4016b8:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
  4016bc:	47a0      	blx	r4
	SPI_Write(453, 0x21BB);
  4016be:	f242 11bb 	movw	r1, #8635	; 0x21bb
  4016c2:	f240 10c5 	movw	r0, #453	; 0x1c5
  4016c6:	47a0      	blx	r4
	SPI_Write(454, 0x20B1);
  4016c8:	f242 01b1 	movw	r1, #8369	; 0x20b1
  4016cc:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
  4016d0:	47a0      	blx	r4
	SPI_Write(455, 0x00B1);
  4016d2:	21b1      	movs	r1, #177	; 0xb1
  4016d4:	f240 10c7 	movw	r0, #455	; 0x1c7
  4016d8:	47a0      	blx	r4
	SPI_Write(456, 0x10BF);
  4016da:	f241 01bf 	movw	r1, #4287	; 0x10bf
  4016de:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
  4016e2:	47a0      	blx	r4
	SPI_Write(457, 0x10B2);
  4016e4:	f241 01b2 	movw	r1, #4274	; 0x10b2
  4016e8:	f240 10c9 	movw	r0, #457	; 0x1c9
  4016ec:	47a0      	blx	r4
	SPI_Write(458, 0x10B4);
  4016ee:	f241 01b4 	movw	r1, #4276	; 0x10b4
  4016f2:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
  4016f6:	47a0      	blx	r4
	SPI_Write(459, 0x00B1);
  4016f8:	21b1      	movs	r1, #177	; 0xb1
  4016fa:	f240 10cb 	movw	r0, #459	; 0x1cb
  4016fe:	47a0      	blx	r4
	SPI_Write(460, 0x0030);
  401700:	2130      	movs	r1, #48	; 0x30
  401702:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  401706:	47a0      	blx	r4

	SPI_Write(461, 0x0030);
  401708:	2130      	movs	r1, #48	; 0x30
  40170a:	f240 10cd 	movw	r0, #461	; 0x1cd
  40170e:	47a0      	blx	r4
	SPI_Write(462, 0x217B);
  401710:	f242 117b 	movw	r1, #8571	; 0x217b
  401714:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
  401718:	47a0      	blx	r4
	SPI_Write(463, 0x2071);
  40171a:	f242 0171 	movw	r1, #8305	; 0x2071
  40171e:	f240 10cf 	movw	r0, #463	; 0x1cf
  401722:	47a0      	blx	r4
	SPI_Write(464, 0x0071);
  401724:	2171      	movs	r1, #113	; 0x71
  401726:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
  40172a:	47a0      	blx	r4
	SPI_Write(465, 0x1071);
  40172c:	f241 0171 	movw	r1, #4209	; 0x1071
  401730:	f240 10d1 	movw	r0, #465	; 0x1d1
  401734:	47a0      	blx	r4
	SPI_Write(466, 0x0071);
  401736:	2171      	movs	r1, #113	; 0x71
  401738:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
  40173c:	47a0      	blx	r4
	SPI_Write(467, 0x0031);
  40173e:	2131      	movs	r1, #49	; 0x31
  401740:	f240 10d3 	movw	r0, #467	; 0x1d3
  401744:	47a0      	blx	r4
	SPI_Write(468, 0x21BB);
  401746:	f242 11bb 	movw	r1, #8635	; 0x21bb
  40174a:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  40174e:	47a0      	blx	r4
	SPI_Write(469, 0x20B1);
  401750:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401754:	f240 10d5 	movw	r0, #469	; 0x1d5
  401758:	47a0      	blx	r4
	SPI_Write(470, 0x00B1);
  40175a:	21b1      	movs	r1, #177	; 0xb1
  40175c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
  401760:	47a0      	blx	r4
	SPI_Write(471, 0x10B3);
  401762:	f241 01b3 	movw	r1, #4275	; 0x10b3
  401766:	f240 10d7 	movw	r0, #471	; 0x1d7
  40176a:	47a0      	blx	r4
	SPI_Write(472, 0x10B1);
  40176c:	f241 01b1 	movw	r1, #4273	; 0x10b1
  401770:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  401774:	47a0      	blx	r4
	SPI_Write(473, 0x00B1);
  401776:	21b1      	movs	r1, #177	; 0xb1
  401778:	f240 10d9 	movw	r0, #473	; 0x1d9
  40177c:	47a0      	blx	r4
	SPI_Write(474, 0x003F);
  40177e:	213f      	movs	r1, #63	; 0x3f
  401780:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  401784:	47a0      	blx	r4
	SPI_Write(475, 0x0032);
  401786:	2132      	movs	r1, #50	; 0x32
  401788:	f240 10db 	movw	r0, #475	; 0x1db
  40178c:	47a0      	blx	r4
	SPI_Write(476, 0x0030);
  40178e:	2130      	movs	r1, #48	; 0x30
  401790:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  401794:	47a0      	blx	r4
  401796:	bd10      	pop	{r4, pc}

00401798 <Soft_PowerUp>:
}

// Internal blocks are enabled and prepared to start processing the image data stream
void Soft_PowerUp() 
{
  401798:	b510      	push	{r4, lr}
	SPI_Write(10, 0x0000);		// Release soft reset state
  40179a:	2100      	movs	r1, #0
  40179c:	200a      	movs	r0, #10
  40179e:	4c0d      	ldr	r4, [pc, #52]	; (4017d4 <Soft_PowerUp+0x3c>)
  4017a0:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);	// Enable analog clock
  4017a2:	f247 010f 	movw	r1, #28687	; 0x700f
  4017a6:	2020      	movs	r0, #32
  4017a8:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7007);			// Enable analog clock
	#endif
	
	SPI_Write(40, 0x0007);		// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
  4017aa:	2107      	movs	r1, #7
  4017ac:	2028      	movs	r0, #40	; 0x28
  4017ae:	47a0      	blx	r4
	SPI_Write(42, 0x4113);		// SPI_Write(42, 0x4103); Configure image core
  4017b0:	f244 1113 	movw	r1, #16659	; 0x4113
  4017b4:	202a      	movs	r0, #42	; 0x2a
  4017b6:	47a0      	blx	r4
	SPI_Write(48, 0x0001);		// Enable AFE
  4017b8:	2101      	movs	r1, #1
  4017ba:	2030      	movs	r0, #48	; 0x30
  4017bc:	47a0      	blx	r4
	SPI_Write(64, 0x0001);		// Enable biasing block
  4017be:	2101      	movs	r1, #1
  4017c0:	2040      	movs	r0, #64	; 0x40
  4017c2:	47a0      	blx	r4
	SPI_Write(72, 0x0127);		// SPI_Write(72, 0x0117); Enable charge pump.
  4017c4:	f240 1127 	movw	r1, #295	; 0x127
  4017c8:	2048      	movs	r0, #72	; 0x48
  4017ca:	47a0      	blx	r4
	//SPI_Write(112, 0x0007);	// Enable LVDS transmitters
	SPI_Write(112, 0x0000);		// Enable LVDS transmitters
  4017cc:	2100      	movs	r1, #0
  4017ce:	2070      	movs	r0, #112	; 0x70
  4017d0:	47a0      	blx	r4
  4017d2:	bd10      	pop	{r4, pc}
  4017d4:	00401819 	.word	0x00401819

004017d8 <Enable_Subsample>:
}

// Enable subsampling by taking every other pixel
void Enable_Subsample()
{
  4017d8:	b510      	push	{r4, lr}
	SPI_Write(192, 0x0803 | 0x0080);	// Subsampling
  4017da:	f640 0183 	movw	r1, #2179	; 0x883
  4017de:	20c0      	movs	r0, #192	; 0xc0
  4017e0:	4c03      	ldr	r4, [pc, #12]	; (4017f0 <Enable_Subsample+0x18>)
  4017e2:	47a0      	blx	r4
	SPI_Write(194, 0x03E4 | 0x0C00);	// Subsampling mode in both x and y (Check VITA-compatibility)
  4017e4:	f640 71e4 	movw	r1, #4068	; 0xfe4
  4017e8:	20c2      	movs	r0, #194	; 0xc2
  4017ea:	47a0      	blx	r4
  4017ec:	bd10      	pop	{r4, pc}
  4017ee:	bf00      	nop
  4017f0:	00401819 	.word	0x00401819

004017f4 <ROI_Configuration>:
}

// Window Configuration
void ROI_Configuration()
	{
  4017f4:	b510      	push	{r4, lr}
		
		// ROI0 config0
		// * default: 0xC900 (x_start 0x00, x_end 0xC9)
		// goes from 0 - 201
		// mind the subsampling
		SPI_Write(256, 0xC405);		// Take 20 pixels off from each side (each bit = 4 pxs) // Is it 8 pixels since subsampling??
  4017f6:	f24c 4105 	movw	r1, #50181	; 0xc405
  4017fa:	f44f 7080 	mov.w	r0, #256	; 0x100
  4017fe:	4c05      	ldr	r4, [pc, #20]	; (401814 <ROI_Configuration+0x20>)
  401800:	47a0      	blx	r4
		
		// ROI0 config1
		// * default: 0x9700 (y_start 0x00, y_end 0x97)
		// goes from 0 - 151
		// mind the subsampling
		SPI_Write(257, 0x9502);		// take 8 pixels off from each side (each bit = 4 pxs)
  401802:	f249 5102 	movw	r1, #38146	; 0x9502
  401806:	f240 1001 	movw	r0, #257	; 0x101
  40180a:	47a0      	blx	r4
		// bit 2 
		// SPI_Write(264, val);
		
		
		// Active ROI selection (195 vs 228??)
		SPI_Write(228, 0x0000);		// Choose ROI0
  40180c:	2100      	movs	r1, #0
  40180e:	20e4      	movs	r0, #228	; 0xe4
  401810:	47a0      	blx	r4
  401812:	bd10      	pop	{r4, pc}
  401814:	00401819 	.word	0x00401819

00401818 <SPI_Write>:
#include "definitions.h"


// SPI_Write: writes value on a register of the slave
void SPI_Write(uint16_t reg, uint16_t val)
{
  401818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40181c:	4604      	mov	r4, r0
  40181e:	460d      	mov	r5, r1
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401820:	4f33      	ldr	r7, [pc, #204]	; (4018f0 <SPI_Write+0xd8>)
  401822:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
  401826:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	uint8_t count = 0;
	
	// ===== Open the communication line with Python480 ===== //

	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. Slave Select (SS) pin up
	delay_us(10);
  40182a:	20f3      	movs	r0, #243	; 0xf3
  40182c:	4e31      	ldr	r6, [pc, #196]	; (4018f4 <SPI_Write+0xdc>)
  40182e:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401830:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  401834:	20f3      	movs	r0, #243	; 0xf3
  401836:	47b0      	blx	r6
  401838:	f04f 0b09 	mov.w	fp, #9
  40183c:	463e      	mov	r6, r7
  40183e:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  401842:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  401844:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  401848:	4f2a      	ldr	r7, [pc, #168]	; (4018f4 <SPI_Write+0xdc>)
  40184a:	e00f      	b.n	40186c <SPI_Write+0x54>
  40184c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401850:	6373      	str	r3, [r6, #52]	; 0x34
  401852:	4640      	mov	r0, r8
  401854:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401856:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  40185a:	4640      	mov	r0, r8
  40185c:	47b8      	blx	r7
		
		reg = reg << 1;							// 5. Move the next MSD to the top
  40185e:	0064      	lsls	r4, r4, #1
  401860:	b2a4      	uxth	r4, r4
  401862:	f10b 33ff 	add.w	r3, fp, #4294967295
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD (Most Significant Digit) to LSD (Least)
  401866:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
  40186a:	d008      	beq.n	40187e <SPI_Write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40186c:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  401870:	f414 7f80 	tst.w	r4, #256	; 0x100
  401874:	d0ea      	beq.n	40184c <SPI_Write+0x34>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401876:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40187a:	6333      	str	r3, [r6, #48]	; 0x30
  40187c:	e7e9      	b.n	401852 <SPI_Write+0x3a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40187e:	4c1c      	ldr	r4, [pc, #112]	; (4018f0 <SPI_Write+0xd8>)
  401880:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  401884:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401886:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40188a:	6323      	str	r3, [r4, #48]	; 0x30
	}
	
	// ===== Notify Python480 that it's a WRITE command ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 1);	// 2. MOSI up (Write Command)
	delay_us(10);
  40188c:	20f3      	movs	r0, #243	; 0xf3
  40188e:	4e19      	ldr	r6, [pc, #100]	; (4018f4 <SPI_Write+0xdc>)
  401890:	47b0      	blx	r6
  401892:	6327      	str	r7, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 3. Clock up
	delay_us(10);
  401894:	20f3      	movs	r0, #243	; 0xf3
  401896:	47b0      	blx	r6
  401898:	2410      	movs	r4, #16
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40189a:	4e15      	ldr	r6, [pc, #84]	; (4018f0 <SPI_Write+0xd8>)
  40189c:	46b9      	mov	r9, r7
  40189e:	46ba      	mov	sl, r7
		}
		else										// If bit value 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  4018a0:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  4018a4:	4f13      	ldr	r7, [pc, #76]	; (4018f4 <SPI_Write+0xdc>)
  4018a6:	e00e      	b.n	4018c6 <SPI_Write+0xae>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4018ac:	6333      	str	r3, [r6, #48]	; 0x30
  4018ae:	4640      	mov	r0, r8
  4018b0:	47b8      	blx	r7
  4018b2:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  4018b6:	4640      	mov	r0, r8
  4018b8:	47b8      	blx	r7
		
		val = val << 1;							// 5. Move next MSD to the top
  4018ba:	006d      	lsls	r5, r5, #1
  4018bc:	b2ad      	uxth	r5, r5
  4018be:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
  4018c0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4018c4:	d008      	beq.n	4018d8 <SPI_Write+0xc0>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4018c6:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (val & 0x8000)							// If bit value 1
  4018ca:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4018ce:	d1eb      	bne.n	4018a8 <SPI_Write+0x90>
  4018d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4018d4:	6373      	str	r3, [r6, #52]	; 0x34
  4018d6:	e7ea      	b.n	4018ae <SPI_Write+0x96>
  4018d8:	4c05      	ldr	r4, [pc, #20]	; (4018f0 <SPI_Write+0xd8>)
  4018da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4018de:	6363      	str	r3, [r4, #52]	; 0x34
	}
	
	// ===== Shut down the communication line ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	delay_us(10);
  4018e0:	20f3      	movs	r0, #243	; 0xf3
  4018e2:	4b04      	ldr	r3, [pc, #16]	; (4018f4 <SPI_Write+0xdc>)
  4018e4:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4018ea:	6323      	str	r3, [r4, #48]	; 0x30
  4018ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018f0:	400e1400 	.word	0x400e1400
  4018f4:	20400001 	.word	0x20400001

004018f8 <SPI_Read>:
	ioport_set_pin_level(SPI_BB_SS, 1);		// 2. Slave select high (de-select)
}


uint16_t SPI_Read(uint16_t reg)
{
  4018f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018fc:	4605      	mov	r5, r0
  4018fe:	4e33      	ldr	r6, [pc, #204]	; (4019cc <SPI_Read+0xd4>)
  401900:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  401904:	6337      	str	r7, [r6, #48]	; 0x30
	uint8_t count = 0;
	uint16_t value = 0;
	
	// ===== Open the communication line with Python480 ===== //
	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. Slave Select (SS) pin up
	delay_us(10);
  401906:	20f3      	movs	r0, #243	; 0xf3
  401908:	4c31      	ldr	r4, [pc, #196]	; (4019d0 <SPI_Read+0xd8>)
  40190a:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40190c:	6377      	str	r7, [r6, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  40190e:	20f3      	movs	r0, #243	; 0xf3
  401910:	47a0      	blx	r4
  401912:	2409      	movs	r4, #9
  401914:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  401918:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  40191a:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  40191e:	4f2c      	ldr	r7, [pc, #176]	; (4019d0 <SPI_Read+0xd8>)
  401920:	e00e      	b.n	401940 <SPI_Read+0x48>
  401922:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401926:	6373      	str	r3, [r6, #52]	; 0x34
  401928:	4640      	mov	r0, r8
  40192a:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40192c:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401930:	4640      	mov	r0, r8
  401932:	47b8      	blx	r7

		reg = reg << 1;							// 5. Move the next MSD to the top
  401934:	006d      	lsls	r5, r5, #1
  401936:	b2ad      	uxth	r5, r5
  401938:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD (Most Significant Digit) to LSD (Least)
  40193a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40193e:	d008      	beq.n	401952 <SPI_Read+0x5a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401940:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  401944:	f415 7f80 	tst.w	r5, #256	; 0x100
  401948:	d0eb      	beq.n	401922 <SPI_Read+0x2a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40194a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40194e:	6333      	str	r3, [r6, #48]	; 0x30
  401950:	e7ea      	b.n	401928 <SPI_Read+0x30>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401952:	4c1e      	ldr	r4, [pc, #120]	; (4019cc <SPI_Read+0xd4>)
  401954:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  401958:	6366      	str	r6, [r4, #52]	; 0x34
  40195a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40195e:	6363      	str	r3, [r4, #52]	; 0x34
	}
	
	// ===== Notify Python480 that it's a READ command ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 0);	// 2. MOSI down (Read Command)
	delay_us(10);
  401960:	20f3      	movs	r0, #243	; 0xf3
  401962:	4d1b      	ldr	r5, [pc, #108]	; (4019d0 <SPI_Read+0xd8>)
  401964:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401966:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 3. Clock up
	delay_us(10);
  401968:	20f3      	movs	r0, #243	; 0xf3
  40196a:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40196c:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 4. Clock down
	delay_us(10);
  40196e:	20f3      	movs	r0, #243	; 0xf3
  401970:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401972:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 5. Clock up
	delay_us(10);
  401974:	20f3      	movs	r0, #243	; 0xf3
  401976:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401978:	6366      	str	r6, [r4, #52]	; 0x34
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40197a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	
	// ===== Receive the value coming in from Python480 ===== //
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
	{
		ioport_set_pin_level(SPI_BB_SCK, 0);					// 2. Clock down
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  40197c:	f3c0 5800 	ubfx	r8, r0, #20, #1
		delay_us(10);
  401980:	20f3      	movs	r0, #243	; 0xf3
  401982:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401984:	6326      	str	r6, [r4, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);					// 4. Clock up
		delay_us(10);
  401986:	20f3      	movs	r0, #243	; 0xf3
  401988:	47a8      	blx	r5
  40198a:	240f      	movs	r4, #15
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40198c:	4d0f      	ldr	r5, [pc, #60]	; (4019cc <SPI_Read+0xd4>)
  40198e:	4637      	mov	r7, r6
  401990:	636f      	str	r7, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401992:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  401994:	f3c0 5000 	ubfx	r0, r0, #20, #1
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  401998:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
  40199c:	fa1f f880 	uxth.w	r8, r0
		delay_us(10);
  4019a0:	20f3      	movs	r0, #243	; 0xf3
  4019a2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4019d0 <SPI_Read+0xd8>
  4019a6:	47c8      	blx	r9
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019a8:	632e      	str	r6, [r5, #48]	; 0x30
		delay_us(10);
  4019aa:	20f3      	movs	r0, #243	; 0xf3
  4019ac:	47c8      	blx	r9
  4019ae:	1e63      	subs	r3, r4, #1
		
		if (count == 15)						// 5. Don't move a bit up if we got all the data
  4019b0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4019b4:	d1ec      	bne.n	401990 <SPI_Read+0x98>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019b6:	4b05      	ldr	r3, [pc, #20]	; (4019cc <SPI_Read+0xd4>)
  4019b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4019bc:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4019c2:	631a      	str	r2, [r3, #48]	; 0x30
	// ===== Finish communication with Python480 ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);		// 1. Clock down
	ioport_set_pin_level(SPI_BB_SS, 1);			// 2. Slave select up
	
	return value;
}
  4019c4:	4640      	mov	r0, r8
  4019c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019ca:	bf00      	nop
  4019cc:	400e1400 	.word	0x400e1400
  4019d0:	20400001 	.word	0x20400001

004019d4 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
  4019d4:	4a02      	ldr	r2, [pc, #8]	; (4019e0 <SysTick_Handler+0xc>)
  4019d6:	6813      	ldr	r3, [r2, #0]
  4019d8:	3301      	adds	r3, #1
  4019da:	6013      	str	r3, [r2, #0]
  4019dc:	4770      	bx	lr
  4019de:	bf00      	nop
  4019e0:	204004a4 	.word	0x204004a4

004019e4 <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  4019e4:	2200      	movs	r2, #0
  4019e6:	4b06      	ldr	r3, [pc, #24]	; (401a00 <time_tick_init+0x1c>)
  4019e8:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4019ea:	4b06      	ldr	r3, [pc, #24]	; (401a04 <time_tick_init+0x20>)
  4019ec:	4906      	ldr	r1, [pc, #24]	; (401a08 <time_tick_init+0x24>)
  4019ee:	6059      	str	r1, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4019f0:	20e0      	movs	r0, #224	; 0xe0
  4019f2:	4906      	ldr	r1, [pc, #24]	; (401a0c <time_tick_init+0x28>)
  4019f4:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4019fa:	2207      	movs	r2, #7
  4019fc:	601a      	str	r2, [r3, #0]
  4019fe:	4770      	bx	lr
  401a00:	204004a4 	.word	0x204004a4
  401a04:	e000e010 	.word	0xe000e010
  401a08:	0002327f 	.word	0x0002327f
  401a0c:	e000ed00 	.word	0xe000ed00

00401a10 <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  401a10:	4b01      	ldr	r3, [pc, #4]	; (401a18 <time_tick_get+0x8>)
  401a12:	6818      	ldr	r0, [r3, #0]
}
  401a14:	4770      	bx	lr
  401a16:	bf00      	nop
  401a18:	204004a4 	.word	0x204004a4

00401a1c <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
  401a1c:	4281      	cmp	r1, r0
  401a1e:	d202      	bcs.n	401a26 <time_tick_calc_delay+0xa>
		return (tick_end - tick_start) * (1000 / TICK_US);
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  401a20:	1a09      	subs	r1, r1, r0
  401a22:	1e48      	subs	r0, r1, #1
	}
}
  401a24:	4770      	bx	lr
		return (tick_end - tick_start) * (1000 / TICK_US);
  401a26:	1a08      	subs	r0, r1, r0
  401a28:	4770      	bx	lr
	...

00401a2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a2c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a2e:	4810      	ldr	r0, [pc, #64]	; (401a70 <sysclk_init+0x44>)
  401a30:	4b10      	ldr	r3, [pc, #64]	; (401a74 <sysclk_init+0x48>)
  401a32:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401a34:	213e      	movs	r1, #62	; 0x3e
  401a36:	2000      	movs	r0, #0
  401a38:	4b0f      	ldr	r3, [pc, #60]	; (401a78 <sysclk_init+0x4c>)
  401a3a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401a3c:	4c0f      	ldr	r4, [pc, #60]	; (401a7c <sysclk_init+0x50>)
  401a3e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401a40:	2800      	cmp	r0, #0
  401a42:	d0fc      	beq.n	401a3e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401a44:	4b0e      	ldr	r3, [pc, #56]	; (401a80 <sysclk_init+0x54>)
  401a46:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401a48:	4a0e      	ldr	r2, [pc, #56]	; (401a84 <sysclk_init+0x58>)
  401a4a:	4b0f      	ldr	r3, [pc, #60]	; (401a88 <sysclk_init+0x5c>)
  401a4c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401a4e:	4c0f      	ldr	r4, [pc, #60]	; (401a8c <sysclk_init+0x60>)
  401a50:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401a52:	2800      	cmp	r0, #0
  401a54:	d0fc      	beq.n	401a50 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401a56:	2002      	movs	r0, #2
  401a58:	4b0d      	ldr	r3, [pc, #52]	; (401a90 <sysclk_init+0x64>)
  401a5a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401a5c:	2000      	movs	r0, #0
  401a5e:	4b0d      	ldr	r3, [pc, #52]	; (401a94 <sysclk_init+0x68>)
  401a60:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401a62:	4b0d      	ldr	r3, [pc, #52]	; (401a98 <sysclk_init+0x6c>)
  401a64:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401a66:	480d      	ldr	r0, [pc, #52]	; (401a9c <sysclk_init+0x70>)
  401a68:	4b02      	ldr	r3, [pc, #8]	; (401a74 <sysclk_init+0x48>)
  401a6a:	4798      	blx	r3
  401a6c:	bd10      	pop	{r4, pc}
  401a6e:	bf00      	nop
  401a70:	11e1a300 	.word	0x11e1a300
  401a74:	004020dd 	.word	0x004020dd
  401a78:	00401b3d 	.word	0x00401b3d
  401a7c:	00401b91 	.word	0x00401b91
  401a80:	00401ba1 	.word	0x00401ba1
  401a84:	200b3f01 	.word	0x200b3f01
  401a88:	400e0600 	.word	0x400e0600
  401a8c:	00401bb1 	.word	0x00401bb1
  401a90:	00401aa1 	.word	0x00401aa1
  401a94:	00401ad9 	.word	0x00401ad9
  401a98:	00401fd1 	.word	0x00401fd1
  401a9c:	08954400 	.word	0x08954400

00401aa0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401aa0:	2803      	cmp	r0, #3
  401aa2:	d011      	beq.n	401ac8 <pmc_mck_set_division+0x28>
  401aa4:	2804      	cmp	r0, #4
  401aa6:	d012      	beq.n	401ace <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401aa8:	2802      	cmp	r0, #2
  401aaa:	bf0c      	ite	eq
  401aac:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401ab0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401ab2:	4a08      	ldr	r2, [pc, #32]	; (401ad4 <pmc_mck_set_division+0x34>)
  401ab4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401aba:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401abc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401abe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ac0:	f013 0f08 	tst.w	r3, #8
  401ac4:	d0fb      	beq.n	401abe <pmc_mck_set_division+0x1e>
}
  401ac6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401ac8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401acc:	e7f1      	b.n	401ab2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401ace:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401ad2:	e7ee      	b.n	401ab2 <pmc_mck_set_division+0x12>
  401ad4:	400e0600 	.word	0x400e0600

00401ad8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401ad8:	4a17      	ldr	r2, [pc, #92]	; (401b38 <pmc_switch_mck_to_pllack+0x60>)
  401ada:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401ae0:	4318      	orrs	r0, r3
  401ae2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ae4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ae6:	f013 0f08 	tst.w	r3, #8
  401aea:	d10a      	bne.n	401b02 <pmc_switch_mck_to_pllack+0x2a>
  401aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401af0:	4911      	ldr	r1, [pc, #68]	; (401b38 <pmc_switch_mck_to_pllack+0x60>)
  401af2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401af4:	f012 0f08 	tst.w	r2, #8
  401af8:	d103      	bne.n	401b02 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401afa:	3b01      	subs	r3, #1
  401afc:	d1f9      	bne.n	401af2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401afe:	2001      	movs	r0, #1
  401b00:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401b02:	4a0d      	ldr	r2, [pc, #52]	; (401b38 <pmc_switch_mck_to_pllack+0x60>)
  401b04:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b06:	f023 0303 	bic.w	r3, r3, #3
  401b0a:	f043 0302 	orr.w	r3, r3, #2
  401b0e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401b10:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401b12:	f013 0f08 	tst.w	r3, #8
  401b16:	d10a      	bne.n	401b2e <pmc_switch_mck_to_pllack+0x56>
  401b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401b1c:	4906      	ldr	r1, [pc, #24]	; (401b38 <pmc_switch_mck_to_pllack+0x60>)
  401b1e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401b20:	f012 0f08 	tst.w	r2, #8
  401b24:	d105      	bne.n	401b32 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401b26:	3b01      	subs	r3, #1
  401b28:	d1f9      	bne.n	401b1e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401b2a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401b2c:	4770      	bx	lr
	return 0;
  401b2e:	2000      	movs	r0, #0
  401b30:	4770      	bx	lr
  401b32:	2000      	movs	r0, #0
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	400e0600 	.word	0x400e0600

00401b3c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401b3c:	b9a0      	cbnz	r0, 401b68 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401b3e:	480e      	ldr	r0, [pc, #56]	; (401b78 <pmc_switch_mainck_to_xtal+0x3c>)
  401b40:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401b42:	0209      	lsls	r1, r1, #8
  401b44:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401b46:	4a0d      	ldr	r2, [pc, #52]	; (401b7c <pmc_switch_mainck_to_xtal+0x40>)
  401b48:	401a      	ands	r2, r3
  401b4a:	4b0d      	ldr	r3, [pc, #52]	; (401b80 <pmc_switch_mainck_to_xtal+0x44>)
  401b4c:	4313      	orrs	r3, r2
  401b4e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401b50:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401b52:	4602      	mov	r2, r0
  401b54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401b56:	f013 0f01 	tst.w	r3, #1
  401b5a:	d0fb      	beq.n	401b54 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401b5c:	4a06      	ldr	r2, [pc, #24]	; (401b78 <pmc_switch_mainck_to_xtal+0x3c>)
  401b5e:	6a11      	ldr	r1, [r2, #32]
  401b60:	4b08      	ldr	r3, [pc, #32]	; (401b84 <pmc_switch_mainck_to_xtal+0x48>)
  401b62:	430b      	orrs	r3, r1
  401b64:	6213      	str	r3, [r2, #32]
  401b66:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b68:	4903      	ldr	r1, [pc, #12]	; (401b78 <pmc_switch_mainck_to_xtal+0x3c>)
  401b6a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401b6c:	4a06      	ldr	r2, [pc, #24]	; (401b88 <pmc_switch_mainck_to_xtal+0x4c>)
  401b6e:	401a      	ands	r2, r3
  401b70:	4b06      	ldr	r3, [pc, #24]	; (401b8c <pmc_switch_mainck_to_xtal+0x50>)
  401b72:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b74:	620b      	str	r3, [r1, #32]
  401b76:	4770      	bx	lr
  401b78:	400e0600 	.word	0x400e0600
  401b7c:	ffc8fffc 	.word	0xffc8fffc
  401b80:	00370001 	.word	0x00370001
  401b84:	01370000 	.word	0x01370000
  401b88:	fec8fffc 	.word	0xfec8fffc
  401b8c:	01370002 	.word	0x01370002

00401b90 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b90:	4b02      	ldr	r3, [pc, #8]	; (401b9c <pmc_osc_is_ready_mainck+0xc>)
  401b92:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b94:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401b98:	4770      	bx	lr
  401b9a:	bf00      	nop
  401b9c:	400e0600 	.word	0x400e0600

00401ba0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401ba0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401ba4:	4b01      	ldr	r3, [pc, #4]	; (401bac <pmc_disable_pllack+0xc>)
  401ba6:	629a      	str	r2, [r3, #40]	; 0x28
  401ba8:	4770      	bx	lr
  401baa:	bf00      	nop
  401bac:	400e0600 	.word	0x400e0600

00401bb0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401bb0:	4b02      	ldr	r3, [pc, #8]	; (401bbc <pmc_is_locked_pllack+0xc>)
  401bb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401bb4:	f000 0002 	and.w	r0, r0, #2
  401bb8:	4770      	bx	lr
  401bba:	bf00      	nop
  401bbc:	400e0600 	.word	0x400e0600

00401bc0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401bc0:	283f      	cmp	r0, #63	; 0x3f
  401bc2:	d81e      	bhi.n	401c02 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401bc4:	281f      	cmp	r0, #31
  401bc6:	d80c      	bhi.n	401be2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401bc8:	4b11      	ldr	r3, [pc, #68]	; (401c10 <pmc_enable_periph_clk+0x50>)
  401bca:	699a      	ldr	r2, [r3, #24]
  401bcc:	2301      	movs	r3, #1
  401bce:	4083      	lsls	r3, r0
  401bd0:	4393      	bics	r3, r2
  401bd2:	d018      	beq.n	401c06 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401bd4:	2301      	movs	r3, #1
  401bd6:	fa03 f000 	lsl.w	r0, r3, r0
  401bda:	4b0d      	ldr	r3, [pc, #52]	; (401c10 <pmc_enable_periph_clk+0x50>)
  401bdc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401bde:	2000      	movs	r0, #0
  401be0:	4770      	bx	lr
		ul_id -= 32;
  401be2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401be4:	4b0a      	ldr	r3, [pc, #40]	; (401c10 <pmc_enable_periph_clk+0x50>)
  401be6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401bea:	2301      	movs	r3, #1
  401bec:	4083      	lsls	r3, r0
  401bee:	4393      	bics	r3, r2
  401bf0:	d00b      	beq.n	401c0a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401bf2:	2301      	movs	r3, #1
  401bf4:	fa03 f000 	lsl.w	r0, r3, r0
  401bf8:	4b05      	ldr	r3, [pc, #20]	; (401c10 <pmc_enable_periph_clk+0x50>)
  401bfa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401bfe:	2000      	movs	r0, #0
  401c00:	4770      	bx	lr
		return 1;
  401c02:	2001      	movs	r0, #1
  401c04:	4770      	bx	lr
	return 0;
  401c06:	2000      	movs	r0, #0
  401c08:	4770      	bx	lr
  401c0a:	2000      	movs	r0, #0
}
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop
  401c10:	400e0600 	.word	0x400e0600

00401c14 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401c14:	4b10      	ldr	r3, [pc, #64]	; (401c58 <twihs_set_speed+0x44>)
  401c16:	4299      	cmp	r1, r3
  401c18:	d81b      	bhi.n	401c52 <twihs_set_speed+0x3e>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c1a:	0049      	lsls	r1, r1, #1
  401c1c:	fbb2 f2f1 	udiv	r2, r2, r1
  401c20:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c22:	2aff      	cmp	r2, #255	; 0xff
  401c24:	d913      	bls.n	401c4e <twihs_set_speed+0x3a>
  401c26:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  401c28:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401c2a:	0852      	lsrs	r2, r2, #1
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c2c:	2aff      	cmp	r2, #255	; 0xff
  401c2e:	d901      	bls.n	401c34 <twihs_set_speed+0x20>
  401c30:	2b06      	cmp	r3, #6
  401c32:	d9f9      	bls.n	401c28 <twihs_set_speed+0x14>
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c34:	b2d1      	uxtb	r1, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  401c36:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c3a:	0212      	lsls	r2, r2, #8
  401c3c:	b292      	uxth	r2, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  401c3e:	430a      	orrs	r2, r1
  401c40:	041b      	lsls	r3, r3, #16
  401c42:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401c46:	4313      	orrs	r3, r2
	p_twihs->TWIHS_CWGR =
  401c48:	6103      	str	r3, [r0, #16]

	return PASS;
  401c4a:	2000      	movs	r0, #0
  401c4c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c4e:	2300      	movs	r3, #0
  401c50:	e7f0      	b.n	401c34 <twihs_set_speed+0x20>
		return FAIL;
  401c52:	2001      	movs	r0, #1
}
  401c54:	4770      	bx	lr
  401c56:	bf00      	nop
  401c58:	00061a80 	.word	0x00061a80

00401c5c <twihs_master_init>:
{
  401c5c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401c5e:	f04f 32ff 	mov.w	r2, #4294967295
  401c62:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401c64:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401c66:	2280      	movs	r2, #128	; 0x80
  401c68:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401c6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c6c:	2208      	movs	r2, #8
  401c6e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c70:	2220      	movs	r2, #32
  401c72:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c74:	2204      	movs	r2, #4
  401c76:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c78:	680a      	ldr	r2, [r1, #0]
  401c7a:	6849      	ldr	r1, [r1, #4]
  401c7c:	4b03      	ldr	r3, [pc, #12]	; (401c8c <twihs_master_init+0x30>)
  401c7e:	4798      	blx	r3
}
  401c80:	2801      	cmp	r0, #1
  401c82:	bf14      	ite	ne
  401c84:	2000      	movne	r0, #0
  401c86:	2001      	moveq	r0, #1
  401c88:	bd08      	pop	{r3, pc}
  401c8a:	bf00      	nop
  401c8c:	00401c15 	.word	0x00401c15

00401c90 <twihs_master_write>:
	uint32_t cnt = p_packet->length;
  401c90:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401c92:	2b00      	cmp	r3, #0
  401c94:	d04d      	beq.n	401d32 <twihs_master_write+0xa2>
{
  401c96:	b470      	push	{r4, r5, r6}
  401c98:	b083      	sub	sp, #12
	uint8_t *buffer = p_packet->buffer;
  401c9a:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0; 
  401c9c:	2600      	movs	r6, #0
  401c9e:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401ca0:	7c0a      	ldrb	r2, [r1, #16]
  401ca2:	0412      	lsls	r2, r2, #16
  401ca4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401ca8:	684d      	ldr	r5, [r1, #4]
  401caa:	022d      	lsls	r5, r5, #8
  401cac:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401cb0:	432a      	orrs	r2, r5
  401cb2:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401cb4:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401cb6:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401cb8:	b15d      	cbz	r5, 401cd2 <twihs_master_write+0x42>
	val = addr[0];
  401cba:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401cbc:	2d01      	cmp	r5, #1
  401cbe:	dd02      	ble.n	401cc6 <twihs_master_write+0x36>
		val |= addr[1];
  401cc0:	784e      	ldrb	r6, [r1, #1]
  401cc2:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401cc6:	2d02      	cmp	r5, #2
  401cc8:	dd04      	ble.n	401cd4 <twihs_master_write+0x44>
		val |= addr[2];
  401cca:	7889      	ldrb	r1, [r1, #2]
  401ccc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401cd0:	e000      	b.n	401cd4 <twihs_master_write+0x44>
		return 0;
  401cd2:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401cd4:	60c2      	str	r2, [r0, #12]
  401cd6:	e004      	b.n	401ce2 <twihs_master_write+0x52>
		p_twihs->TWIHS_THR = *buffer++;
  401cd8:	f814 2b01 	ldrb.w	r2, [r4], #1
  401cdc:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401cde:	3b01      	subs	r3, #1
  401ce0:	d015      	beq.n	401d0e <twihs_master_write+0x7e>
		status = p_twihs->TWIHS_SR;
  401ce2:	6a02      	ldr	r2, [r0, #32]
  401ce4:	9201      	str	r2, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401ce6:	9a01      	ldr	r2, [sp, #4]
  401ce8:	f412 7f80 	tst.w	r2, #256	; 0x100
  401cec:	d125      	bne.n	401d3a <twihs_master_write+0xaa>
		if (!(status & TWIHS_SR_TXRDY)) {
  401cee:	9a01      	ldr	r2, [sp, #4]
  401cf0:	f012 0f04 	tst.w	r2, #4
  401cf4:	d1f0      	bne.n	401cd8 <twihs_master_write+0x48>
		status = p_twihs->TWIHS_SR;
  401cf6:	6a02      	ldr	r2, [r0, #32]
  401cf8:	9201      	str	r2, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401cfa:	9a01      	ldr	r2, [sp, #4]
  401cfc:	f412 7f80 	tst.w	r2, #256	; 0x100
  401d00:	d119      	bne.n	401d36 <twihs_master_write+0xa6>
		if (!(status & TWIHS_SR_TXRDY)) {
  401d02:	9a01      	ldr	r2, [sp, #4]
  401d04:	f012 0f04 	tst.w	r2, #4
  401d08:	d1e6      	bne.n	401cd8 <twihs_master_write+0x48>
	while (cnt > 0) {
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d1f3      	bne.n	401cf6 <twihs_master_write+0x66>
		status = p_twihs->TWIHS_SR;
  401d0e:	6a03      	ldr	r3, [r0, #32]
  401d10:	9301      	str	r3, [sp, #4]
		if (status & TWIHS_SR_NACK) {
  401d12:	9b01      	ldr	r3, [sp, #4]
  401d14:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d18:	d113      	bne.n	401d42 <twihs_master_write+0xb2>
		if (status & TWIHS_SR_TXRDY) {
  401d1a:	9b01      	ldr	r3, [sp, #4]
  401d1c:	f013 0f04 	tst.w	r3, #4
  401d20:	d0f5      	beq.n	401d0e <twihs_master_write+0x7e>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d22:	2302      	movs	r3, #2
  401d24:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d26:	6a03      	ldr	r3, [r0, #32]
  401d28:	f013 0f01 	tst.w	r3, #1
  401d2c:	d0fb      	beq.n	401d26 <twihs_master_write+0x96>
	return TWIHS_SUCCESS;
  401d2e:	2000      	movs	r0, #0
  401d30:	e004      	b.n	401d3c <twihs_master_write+0xac>
		return TWIHS_INVALID_ARGUMENT;
  401d32:	2001      	movs	r0, #1
  401d34:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d36:	2005      	movs	r0, #5
  401d38:	e000      	b.n	401d3c <twihs_master_write+0xac>
  401d3a:	2005      	movs	r0, #5
}
  401d3c:	b003      	add	sp, #12
  401d3e:	bc70      	pop	{r4, r5, r6}
  401d40:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d42:	2005      	movs	r0, #5
  401d44:	e7fa      	b.n	401d3c <twihs_master_write+0xac>

00401d46 <xdmac_configure_transfer>:
  401d46:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401d4a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401d4c:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401d4e:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401d50:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401d52:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401d54:	6813      	ldr	r3, [r2, #0]
  401d56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401d5a:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401d5c:	6913      	ldr	r3, [r2, #16]
  401d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401d62:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401d64:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401d66:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401d68:	6993      	ldr	r3, [r2, #24]
  401d6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401d6e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401d72:	69d3      	ldr	r3, [r2, #28]
  401d74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401d7c:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401d7e:	678b      	str	r3, [r1, #120]	; 0x78
  401d80:	4770      	bx	lr
	...

00401d84 <board_init>:
		base->PIO_PUDR = mask;
  401d84:	4b61      	ldr	r3, [pc, #388]	; (401f0c <board_init+0x188>)
  401d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d8a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d90:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d92:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d98:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d9a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  401d9e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401da0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401da2:	4311      	orrs	r1, r2
  401da4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401da6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401dac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401db2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401db4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401dba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401dbc:	4311      	orrs	r1, r2
  401dbe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401dc0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401dc2:	4311      	orrs	r1, r2
  401dc4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401dc6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401dc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401dcc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401dce:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401dd2:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401dd4:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401dd6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401dda:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401ddc:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401de0:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401de2:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401de4:	4308      	orrs	r0, r1
  401de6:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401de8:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401dea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401dee:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401df0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401df4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401df6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401df8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401dfc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401dfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401e02:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401e04:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401e06:	4308      	orrs	r0, r1
  401e08:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e0a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401e0c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401e10:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e12:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e16:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e18:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e1a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401e1e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401e20:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401e24:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401e26:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401e28:	4308      	orrs	r0, r1
  401e2a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e2c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401e2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e32:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e34:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e38:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e3a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e3c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401e40:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401e42:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401e46:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401e48:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401e4a:	4308      	orrs	r0, r1
  401e4c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e4e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401e50:	2110      	movs	r1, #16
  401e52:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e54:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e58:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e5a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e5c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401e60:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401e62:	f020 0010 	bic.w	r0, r0, #16
  401e66:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e68:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401e6a:	f020 0010 	bic.w	r0, r0, #16
  401e6e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e70:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401e72:	2120      	movs	r1, #32
  401e74:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401e76:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401e7a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401e7c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401e7e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401e82:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401e84:	f020 0020 	bic.w	r0, r0, #32
  401e88:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401e8a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401e8c:	f020 0020 	bic.w	r0, r0, #32
  401e90:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401e92:	6059      	str	r1, [r3, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401e94:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  401e98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401e9c:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e9e:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401ea2:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ea4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401ea8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401eaa:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401eae:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401eb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401eb4:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401eb6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401eba:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ebc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ebe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ec2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_PUDR = mask;
  401ec4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ec8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ece:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ed0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401ed6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401ed8:	4311      	orrs	r1, r2
  401eda:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401edc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401ede:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  401ee2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401ee4:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401eea:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ef0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ef2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401ef8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401efa:	4311      	orrs	r1, r2
  401efc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401efe:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f00:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  401f04:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401f06:	605a      	str	r2, [r3, #4]
  401f08:	4770      	bx	lr
  401f0a:	bf00      	nop
  401f0c:	400e0e00 	.word	0x400e0e00

00401f10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f10:	e7fe      	b.n	401f10 <Dummy_Handler>
	...

00401f14 <Reset_Handler>:
{
  401f14:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  401f16:	4b23      	ldr	r3, [pc, #140]	; (401fa4 <Reset_Handler+0x90>)
  401f18:	4a23      	ldr	r2, [pc, #140]	; (401fa8 <Reset_Handler+0x94>)
  401f1a:	429a      	cmp	r2, r3
  401f1c:	d010      	beq.n	401f40 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  401f1e:	4b23      	ldr	r3, [pc, #140]	; (401fac <Reset_Handler+0x98>)
  401f20:	4a20      	ldr	r2, [pc, #128]	; (401fa4 <Reset_Handler+0x90>)
  401f22:	429a      	cmp	r2, r3
  401f24:	d20c      	bcs.n	401f40 <Reset_Handler+0x2c>
  401f26:	3b01      	subs	r3, #1
  401f28:	1a9b      	subs	r3, r3, r2
  401f2a:	f023 0303 	bic.w	r3, r3, #3
  401f2e:	3304      	adds	r3, #4
  401f30:	4413      	add	r3, r2
  401f32:	491d      	ldr	r1, [pc, #116]	; (401fa8 <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
  401f34:	f851 0b04 	ldr.w	r0, [r1], #4
  401f38:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401f3c:	429a      	cmp	r2, r3
  401f3e:	d1f9      	bne.n	401f34 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  401f40:	4b1b      	ldr	r3, [pc, #108]	; (401fb0 <Reset_Handler+0x9c>)
  401f42:	4a1c      	ldr	r2, [pc, #112]	; (401fb4 <Reset_Handler+0xa0>)
  401f44:	429a      	cmp	r2, r3
  401f46:	d20a      	bcs.n	401f5e <Reset_Handler+0x4a>
  401f48:	3b01      	subs	r3, #1
  401f4a:	1a9b      	subs	r3, r3, r2
  401f4c:	f023 0303 	bic.w	r3, r3, #3
  401f50:	3304      	adds	r3, #4
  401f52:	4413      	add	r3, r2
                *pDest++ = 0;
  401f54:	2100      	movs	r1, #0
  401f56:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401f5a:	4293      	cmp	r3, r2
  401f5c:	d1fb      	bne.n	401f56 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401f5e:	4a16      	ldr	r2, [pc, #88]	; (401fb8 <Reset_Handler+0xa4>)
  401f60:	4b16      	ldr	r3, [pc, #88]	; (401fbc <Reset_Handler+0xa8>)
  401f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401f66:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f68:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  401f6c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f6e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401f72:	2100      	movs	r1, #0
  401f74:	4a12      	ldr	r2, [pc, #72]	; (401fc0 <Reset_Handler+0xac>)
  401f76:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401f78:	4912      	ldr	r1, [pc, #72]	; (401fc4 <Reset_Handler+0xb0>)
  401f7a:	680a      	ldr	r2, [r1, #0]
  401f7c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  401f80:	600a      	str	r2, [r1, #0]
  __ASM volatile ("dsb");
  401f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401f86:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401f8a:	b92b      	cbnz	r3, 401f98 <Reset_Handler+0x84>
		cpu_irq_enable();
  401f8c:	2201      	movs	r2, #1
  401f8e:	4b0c      	ldr	r3, [pc, #48]	; (401fc0 <Reset_Handler+0xac>)
  401f90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401f92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f96:	b662      	cpsie	i
        __libc_init_array();
  401f98:	4b0b      	ldr	r3, [pc, #44]	; (401fc8 <Reset_Handler+0xb4>)
  401f9a:	4798      	blx	r3
        main();
  401f9c:	4b0b      	ldr	r3, [pc, #44]	; (401fcc <Reset_Handler+0xb8>)
  401f9e:	4798      	blx	r3
  401fa0:	e7fe      	b.n	401fa0 <Reset_Handler+0x8c>
  401fa2:	bf00      	nop
  401fa4:	20400000 	.word	0x20400000
  401fa8:	00403014 	.word	0x00403014
  401fac:	2040044c 	.word	0x2040044c
  401fb0:	20453938 	.word	0x20453938
  401fb4:	20400450 	.word	0x20400450
  401fb8:	e000ed00 	.word	0xe000ed00
  401fbc:	00400000 	.word	0x00400000
  401fc0:	2040000a 	.word	0x2040000a
  401fc4:	e000ed88 	.word	0xe000ed88
  401fc8:	00402d45 	.word	0x00402d45
  401fcc:	004026f9 	.word	0x004026f9

00401fd0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401fd0:	4b3b      	ldr	r3, [pc, #236]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  401fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fd4:	f003 0303 	and.w	r3, r3, #3
  401fd8:	2b01      	cmp	r3, #1
  401fda:	d01d      	beq.n	402018 <SystemCoreClockUpdate+0x48>
  401fdc:	b183      	cbz	r3, 402000 <SystemCoreClockUpdate+0x30>
  401fde:	2b02      	cmp	r3, #2
  401fe0:	d036      	beq.n	402050 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401fe2:	4b37      	ldr	r3, [pc, #220]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  401fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401fea:	2b70      	cmp	r3, #112	; 0x70
  401fec:	d05f      	beq.n	4020ae <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401fee:	4b34      	ldr	r3, [pc, #208]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  401ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ff2:	4934      	ldr	r1, [pc, #208]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  401ff4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401ff8:	680b      	ldr	r3, [r1, #0]
  401ffa:	40d3      	lsrs	r3, r2
  401ffc:	600b      	str	r3, [r1, #0]
  401ffe:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402000:	4b31      	ldr	r3, [pc, #196]	; (4020c8 <SystemCoreClockUpdate+0xf8>)
  402002:	695b      	ldr	r3, [r3, #20]
  402004:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402008:	bf14      	ite	ne
  40200a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40200e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402012:	4b2c      	ldr	r3, [pc, #176]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  402014:	601a      	str	r2, [r3, #0]
  402016:	e7e4      	b.n	401fe2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402018:	4b29      	ldr	r3, [pc, #164]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  40201a:	6a1b      	ldr	r3, [r3, #32]
  40201c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402020:	d003      	beq.n	40202a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402022:	4a2a      	ldr	r2, [pc, #168]	; (4020cc <SystemCoreClockUpdate+0xfc>)
  402024:	4b27      	ldr	r3, [pc, #156]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  402026:	601a      	str	r2, [r3, #0]
  402028:	e7db      	b.n	401fe2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40202a:	4a29      	ldr	r2, [pc, #164]	; (4020d0 <SystemCoreClockUpdate+0x100>)
  40202c:	4b25      	ldr	r3, [pc, #148]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  40202e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402030:	4b23      	ldr	r3, [pc, #140]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  402032:	6a1b      	ldr	r3, [r3, #32]
  402034:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402038:	2b10      	cmp	r3, #16
  40203a:	d005      	beq.n	402048 <SystemCoreClockUpdate+0x78>
  40203c:	2b20      	cmp	r3, #32
  40203e:	d1d0      	bne.n	401fe2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  402040:	4a22      	ldr	r2, [pc, #136]	; (4020cc <SystemCoreClockUpdate+0xfc>)
  402042:	4b20      	ldr	r3, [pc, #128]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  402044:	601a      	str	r2, [r3, #0]
          break;
  402046:	e7cc      	b.n	401fe2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  402048:	4a22      	ldr	r2, [pc, #136]	; (4020d4 <SystemCoreClockUpdate+0x104>)
  40204a:	4b1e      	ldr	r3, [pc, #120]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  40204c:	601a      	str	r2, [r3, #0]
          break;
  40204e:	e7c8      	b.n	401fe2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402050:	4b1b      	ldr	r3, [pc, #108]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  402052:	6a1b      	ldr	r3, [r3, #32]
  402054:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402058:	d016      	beq.n	402088 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40205a:	4a1c      	ldr	r2, [pc, #112]	; (4020cc <SystemCoreClockUpdate+0xfc>)
  40205c:	4b19      	ldr	r3, [pc, #100]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  40205e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402060:	4b17      	ldr	r3, [pc, #92]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  402062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402064:	f003 0303 	and.w	r3, r3, #3
  402068:	2b02      	cmp	r3, #2
  40206a:	d1ba      	bne.n	401fe2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40206c:	4a14      	ldr	r2, [pc, #80]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  40206e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402070:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402072:	4814      	ldr	r0, [pc, #80]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402074:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402078:	6803      	ldr	r3, [r0, #0]
  40207a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40207e:	b2d2      	uxtb	r2, r2
  402080:	fbb3 f3f2 	udiv	r3, r3, r2
  402084:	6003      	str	r3, [r0, #0]
  402086:	e7ac      	b.n	401fe2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402088:	4a11      	ldr	r2, [pc, #68]	; (4020d0 <SystemCoreClockUpdate+0x100>)
  40208a:	4b0e      	ldr	r3, [pc, #56]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  40208c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40208e:	4b0c      	ldr	r3, [pc, #48]	; (4020c0 <SystemCoreClockUpdate+0xf0>)
  402090:	6a1b      	ldr	r3, [r3, #32]
  402092:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402096:	2b10      	cmp	r3, #16
  402098:	d005      	beq.n	4020a6 <SystemCoreClockUpdate+0xd6>
  40209a:	2b20      	cmp	r3, #32
  40209c:	d1e0      	bne.n	402060 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40209e:	4a0b      	ldr	r2, [pc, #44]	; (4020cc <SystemCoreClockUpdate+0xfc>)
  4020a0:	4b08      	ldr	r3, [pc, #32]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  4020a2:	601a      	str	r2, [r3, #0]
          break;
  4020a4:	e7dc      	b.n	402060 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4020a6:	4a0b      	ldr	r2, [pc, #44]	; (4020d4 <SystemCoreClockUpdate+0x104>)
  4020a8:	4b06      	ldr	r3, [pc, #24]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  4020aa:	601a      	str	r2, [r3, #0]
          break;
  4020ac:	e7d8      	b.n	402060 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4020ae:	4a05      	ldr	r2, [pc, #20]	; (4020c4 <SystemCoreClockUpdate+0xf4>)
  4020b0:	6813      	ldr	r3, [r2, #0]
  4020b2:	4909      	ldr	r1, [pc, #36]	; (4020d8 <SystemCoreClockUpdate+0x108>)
  4020b4:	fba1 1303 	umull	r1, r3, r1, r3
  4020b8:	085b      	lsrs	r3, r3, #1
  4020ba:	6013      	str	r3, [r2, #0]
  4020bc:	4770      	bx	lr
  4020be:	bf00      	nop
  4020c0:	400e0600 	.word	0x400e0600
  4020c4:	2040000c 	.word	0x2040000c
  4020c8:	400e1810 	.word	0x400e1810
  4020cc:	00b71b00 	.word	0x00b71b00
  4020d0:	003d0900 	.word	0x003d0900
  4020d4:	007a1200 	.word	0x007a1200
  4020d8:	aaaaaaab 	.word	0xaaaaaaab

004020dc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4020dc:	4b12      	ldr	r3, [pc, #72]	; (402128 <system_init_flash+0x4c>)
  4020de:	4298      	cmp	r0, r3
  4020e0:	d911      	bls.n	402106 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4020e2:	4b12      	ldr	r3, [pc, #72]	; (40212c <system_init_flash+0x50>)
  4020e4:	4298      	cmp	r0, r3
  4020e6:	d913      	bls.n	402110 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4020e8:	4b11      	ldr	r3, [pc, #68]	; (402130 <system_init_flash+0x54>)
  4020ea:	4298      	cmp	r0, r3
  4020ec:	d914      	bls.n	402118 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4020ee:	4b11      	ldr	r3, [pc, #68]	; (402134 <system_init_flash+0x58>)
  4020f0:	4298      	cmp	r0, r3
  4020f2:	d915      	bls.n	402120 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4020f4:	4b10      	ldr	r3, [pc, #64]	; (402138 <system_init_flash+0x5c>)
  4020f6:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4020f8:	bf94      	ite	ls
  4020fa:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4020fe:	4a0f      	ldrhi	r2, [pc, #60]	; (40213c <system_init_flash+0x60>)
  402100:	4b0f      	ldr	r3, [pc, #60]	; (402140 <system_init_flash+0x64>)
  402102:	601a      	str	r2, [r3, #0]
  402104:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402106:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40210a:	4b0d      	ldr	r3, [pc, #52]	; (402140 <system_init_flash+0x64>)
  40210c:	601a      	str	r2, [r3, #0]
  40210e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402110:	4a0c      	ldr	r2, [pc, #48]	; (402144 <system_init_flash+0x68>)
  402112:	4b0b      	ldr	r3, [pc, #44]	; (402140 <system_init_flash+0x64>)
  402114:	601a      	str	r2, [r3, #0]
  402116:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402118:	4a0b      	ldr	r2, [pc, #44]	; (402148 <system_init_flash+0x6c>)
  40211a:	4b09      	ldr	r3, [pc, #36]	; (402140 <system_init_flash+0x64>)
  40211c:	601a      	str	r2, [r3, #0]
  40211e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402120:	4a0a      	ldr	r2, [pc, #40]	; (40214c <system_init_flash+0x70>)
  402122:	4b07      	ldr	r3, [pc, #28]	; (402140 <system_init_flash+0x64>)
  402124:	601a      	str	r2, [r3, #0]
  402126:	4770      	bx	lr
  402128:	01312cff 	.word	0x01312cff
  40212c:	026259ff 	.word	0x026259ff
  402130:	039386ff 	.word	0x039386ff
  402134:	04c4b3ff 	.word	0x04c4b3ff
  402138:	05f5e0ff 	.word	0x05f5e0ff
  40213c:	04000500 	.word	0x04000500
  402140:	400e0c00 	.word	0x400e0c00
  402144:	04000100 	.word	0x04000100
  402148:	04000200 	.word	0x04000200
  40214c:	04000300 	.word	0x04000300

00402150 <enableSourceClk>:
		base->PIO_PUDR = mask;
  402150:	4b0e      	ldr	r3, [pc, #56]	; (40218c <enableSourceClk+0x3c>)
  402152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402156:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40215c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40215e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402164:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402166:	4311      	orrs	r1, r2
  402168:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40216a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40216c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  402170:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402172:	605a      	str	r2, [r3, #4]
	//Sets PCK1 as clock output using Main Clocks
	//pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);//Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  402174:	4a06      	ldr	r2, [pc, #24]	; (402190 <enableSourceClk+0x40>)
  402176:	f44f 7300 	mov.w	r3, #512	; 0x200
  40217a:	6013      	str	r3, [r2, #0]
	#endif
	#ifdef EV76C454_SUBSAMP //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(2); //Should make output = 48MHz
	#endif
	#ifdef PYTHON480 //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 12MHz
  40217c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  40217e:	f023 0357 	bic.w	r3, r3, #87	; 0x57
  402182:	f043 0352 	orr.w	r3, r3, #82	; 0x52
  402186:	6453      	str	r3, [r2, #68]	; 0x44
  402188:	4770      	bx	lr
  40218a:	bf00      	nop
  40218c:	400e0e00 	.word	0x400e0e00
  402190:	400e0600 	.word	0x400e0600

00402194 <imagingSensorParamInit>:
	packetCMOS.addr_length = 1;
}

void imagingSensorParamInit() 
{
	PIOA->PIO_PCMR |= PIO_PCMR_DSIZE(D_SIZE);
  402194:	4a03      	ldr	r2, [pc, #12]	; (4021a4 <imagingSensorParamInit+0x10>)
  402196:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  40219a:	f043 0320 	orr.w	r3, r3, #32
  40219e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  4021a2:	4770      	bx	lr
  4021a4:	400e0e00 	.word	0x400e0e00

004021a8 <imagingSensorDMAInit>:
	if (FRSTS == 1)
	PIOA->PIO_PCMR |= PIO_PCMR_FRSTS;
}

void imagingSensorDMAInit() 
{
  4021a8:	b508      	push	{r3, lr}
	// Single Block With Single Microblock Transfer
	uint32_t channelStatus = 0;
	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  4021aa:	203a      	movs	r0, #58	; 0x3a
  4021ac:	4b05      	ldr	r3, [pc, #20]	; (4021c4 <imagingSensorDMAInit+0x1c>)
  4021ae:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4021b0:	4b05      	ldr	r3, [pc, #20]	; (4021c8 <imagingSensorDMAInit+0x20>)
  4021b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4021ba:	2120      	movs	r1, #32
  4021bc:	f883 133a 	strb.w	r1, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4021c0:	605a      	str	r2, [r3, #4]
  4021c2:	bd08      	pop	{r3, pc}
  4021c4:	00401bc1 	.word	0x00401bc1
  4021c8:	e000e100 	.word	0xe000e100

004021cc <imagingSensorStartDMA>:

void imagingSensorStartDMA() 
{
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  4021cc:	4b23      	ldr	r3, [pc, #140]	; (40225c <imagingSensorStartDMA+0x90>)
  4021ce:	2202      	movs	r2, #2
  4021d0:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  4021d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  4021d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  4021d8:	4a21      	ldr	r2, [pc, #132]	; (402260 <imagingSensorStartDMA+0x94>)
  4021da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			break;
	}
	#endif
	
	#ifdef PYTHON480
	switch(frameNumber%3){
  4021de:	4b21      	ldr	r3, [pc, #132]	; (402264 <imagingSensorStartDMA+0x98>)
  4021e0:	681a      	ldr	r2, [r3, #0]
  4021e2:	4b21      	ldr	r3, [pc, #132]	; (402268 <imagingSensorStartDMA+0x9c>)
  4021e4:	fba3 1302 	umull	r1, r3, r3, r2
  4021e8:	085b      	lsrs	r3, r3, #1
  4021ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4021ee:	1ad3      	subs	r3, r2, r3
  4021f0:	2b01      	cmp	r3, #1
  4021f2:	d029      	beq.n	402248 <imagingSensorStartDMA+0x7c>
  4021f4:	b31b      	cbz	r3, 40223e <imagingSensorStartDMA+0x72>
  4021f6:	2b02      	cmp	r3, #2
  4021f8:	d02b      	beq.n	402252 <imagingSensorStartDMA+0x86>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
		break;
	}
	#endif

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  4021fa:	4b18      	ldr	r3, [pc, #96]	; (40225c <imagingSensorStartDMA+0x90>)
  4021fc:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
  402200:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  402204:	4a19      	ldr	r2, [pc, #100]	; (40226c <imagingSensorStartDMA+0xa0>)
  402206:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  40220a:	2200      	movs	r2, #0
  40220c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  402210:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  402214:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  402218:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  40221c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  402220:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  402224:	f042 0201 	orr.w	r2, r2, #1
  402228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  40222c:	68da      	ldr	r2, [r3, #12]
  40222e:	f042 0202 	orr.w	r2, r2, #2
  402232:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  402234:	69da      	ldr	r2, [r3, #28]
  402236:	f042 0202 	orr.w	r2, r2, #2
  40223a:	61da      	str	r2, [r3, #28]
  40223c:	4770      	bx	lr
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer0;
  40223e:	4b07      	ldr	r3, [pc, #28]	; (40225c <imagingSensorStartDMA+0x90>)
  402240:	4a0b      	ldr	r2, [pc, #44]	; (402270 <imagingSensorStartDMA+0xa4>)
  402242:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  402246:	e7d8      	b.n	4021fa <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer1;
  402248:	4b04      	ldr	r3, [pc, #16]	; (40225c <imagingSensorStartDMA+0x90>)
  40224a:	4a0a      	ldr	r2, [pc, #40]	; (402274 <imagingSensorStartDMA+0xa8>)
  40224c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  402250:	e7d3      	b.n	4021fa <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
  402252:	4b02      	ldr	r3, [pc, #8]	; (40225c <imagingSensorStartDMA+0x90>)
  402254:	4a08      	ldr	r2, [pc, #32]	; (402278 <imagingSensorStartDMA+0xac>)
  402256:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  40225a:	e7ce      	b.n	4021fa <imagingSensorStartDMA+0x2e>
  40225c:	40078000 	.word	0x40078000
  402260:	400e0f64 	.word	0x400e0f64
  402264:	204004b4 	.word	0x204004b4
  402268:	aaaaaaab 	.word	0xaaaaaaab
  40226c:	22043001 	.word	0x22043001
  402270:	204004b8 	.word	0x204004b8
  402274:	2041c0b8 	.word	0x2041c0b8
  402278:	20437cb8 	.word	0x20437cb8

0040227c <imagingSensorItInit>:
{
	//PIOA->PIO_PCIER = PIO_PCISR_DRDY; //Enable Data Ready Interrupt
	//PIOA->PIO_PCIDR |= (PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled

	//PIOA->PIO_PCIER = (PIO_PCIDR_OVRE); //Enable Data Ready Interrupt
	PIOA->PIO_PCIDR |= (PIO_PCIDR_DRDY)|(PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled
  40227c:	4a03      	ldr	r2, [pc, #12]	; (40228c <imagingSensorItInit+0x10>)
  40227e:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
  402282:	f043 030f 	orr.w	r3, r3, #15
  402286:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
  40228a:	4770      	bx	lr
  40228c:	400e0e00 	.word	0x400e0e00

00402290 <imageSensorVSyncItInit>:
}

void imageSensorVSyncItInit() 
{
	PIOA->PIO_PER		|= VSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  402290:	4b12      	ldr	r3, [pc, #72]	; (4022dc <imageSensorVSyncItInit+0x4c>)
  402292:	681a      	ldr	r2, [r3, #0]
  402294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402298:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= VSYNC_MASK; //Disables output on this pin.
  40229a:	695a      	ldr	r2, [r3, #20]
  40229c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022a0:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= VSYNC_MASK; //Enables pulldown resistor
  4022a2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  4022a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= VSYNC_MASK; //Enables the input change interrupt
  4022ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4022b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022b4:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= VSYNC_MASK; //Enables additional Interrupt modes
  4022b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  4022ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= VSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  4022c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  4022c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= VSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  4022ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  4022d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4022d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4022da:	4770      	bx	lr
  4022dc:	400e0e00 	.word	0x400e0e00

004022e0 <imageSensorHSyncItInit>:
	//		printf("VSync is set as input");
}

void imageSensorHSyncItInit() 
{
	PIOA->PIO_PER		|= HSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  4022e0:	4b12      	ldr	r3, [pc, #72]	; (40232c <imageSensorHSyncItInit+0x4c>)
  4022e2:	681a      	ldr	r2, [r3, #0]
  4022e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4022e8:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= HSYNC_MASK; //Disables output on this pin.
  4022ea:	695a      	ldr	r2, [r3, #20]
  4022ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4022f0:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= HSYNC_MASK; //Enables pulldown resistor
  4022f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  4022f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4022fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= HSYNC_MASK; //Enables the input change interrupt
  4022fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  402300:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402304:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= HSYNC_MASK; //Enables additional Interrupt modes
  402306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  40230a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40230e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= HSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  402312:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  402316:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40231a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR	|= HSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  40231e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  402322:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402326:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40232a:	4770      	bx	lr
  40232c:	400e0e00 	.word	0x400e0e00

00402330 <imagingSensorLoadHeader>:
}

void imagingSensorLoadHeader()
{
  402330:	b500      	push	{lr}
  402332:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t headerTemp[SDMMC_BLOCK_SIZE] = {0};
  402336:	f44f 7200 	mov.w	r2, #512	; 0x200
  40233a:	2100      	movs	r1, #0
  40233c:	4668      	mov	r0, sp
  40233e:	4b16      	ldr	r3, [pc, #88]	; (402398 <imagingSensorLoadHeader+0x68>)
  402340:	4798      	blx	r3
	uint32_t *header = (uint32_t *)headerTemp;

	uint32_t writeKey[4] = {0};
	sd_mmc_init_read_blocks(SD_SLOT_NB,HEADER_SECTOR,1);
  402342:	2201      	movs	r2, #1
  402344:	4915      	ldr	r1, [pc, #84]	; (40239c <imagingSensorLoadHeader+0x6c>)
  402346:	2000      	movs	r0, #0
  402348:	4b15      	ldr	r3, [pc, #84]	; (4023a0 <imagingSensorLoadHeader+0x70>)
  40234a:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerTemp,1);
  40234c:	2101      	movs	r1, #1
  40234e:	4668      	mov	r0, sp
  402350:	4b14      	ldr	r3, [pc, #80]	; (4023a4 <imagingSensorLoadHeader+0x74>)
  402352:	4798      	blx	r3
	sd_mmc_wait_end_of_read_blocks(false);
  402354:	2000      	movs	r0, #0
  402356:	4b14      	ldr	r3, [pc, #80]	; (4023a8 <imagingSensorLoadHeader+0x78>)
  402358:	4798      	blx	r3

	gain				= header[HEADER_GAIN_POS];		// Not used in V4 WF
  40235a:	9a04      	ldr	r2, [sp, #16]
  40235c:	4b13      	ldr	r3, [pc, #76]	; (4023ac <imagingSensorLoadHeader+0x7c>)
  40235e:	601a      	str	r2, [r3, #0]
	ledValue			= header[HEADER_LED_POS];		// header should be between 0 and 255;
  402360:	9a05      	ldr	r2, [sp, #20]
  402362:	4b13      	ldr	r3, [pc, #76]	; (4023b0 <imagingSensorLoadHeader+0x80>)
  402364:	601a      	str	r2, [r3, #0]
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];
  402366:	9a06      	ldr	r2, [sp, #24]
  402368:	4b12      	ldr	r3, [pc, #72]	; (4023b4 <imagingSensorLoadHeader+0x84>)
  40236a:	601a      	str	r2, [r3, #0]
	focalLength			= header[HEADER_EWL_FOCUS_POS];
  40236c:	9a07      	ldr	r2, [sp, #28]
  40236e:	4b12      	ldr	r3, [pc, #72]	; (4023b8 <imagingSensorLoadHeader+0x88>)
  402370:	601a      	str	r2, [r3, #0]
	recMode				= header[HEADER_REC_MODE_POS];
  402372:	9a08      	ldr	r2, [sp, #32]
  402374:	4b11      	ldr	r3, [pc, #68]	; (4023bc <imagingSensorLoadHeader+0x8c>)
  402376:	601a      	str	r2, [r3, #0]
	focusMin			= header[HEADER_FOC_MIN_POS];
  402378:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40237a:	4b11      	ldr	r3, [pc, #68]	; (4023c0 <imagingSensorLoadHeader+0x90>)
  40237c:	601a      	str	r2, [r3, #0]
	focusMax			= header[HEADER_FOC_MAX_POS];
  40237e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402380:	4b10      	ldr	r3, [pc, #64]	; (4023c4 <imagingSensorLoadHeader+0x94>)
  402382:	601a      	str	r2, [r3, #0]
	focusSteps			= header[HEADER_FOC_STEPS_POS];
  402384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402386:	4b10      	ldr	r3, [pc, #64]	; (4023c8 <imagingSensorLoadHeader+0x98>)
  402388:	601a      	str	r2, [r3, #0]
	focusStepLen		= header[HEADER_FOC_PL_LEN_POS];
  40238a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40238c:	4b0f      	ldr	r3, [pc, #60]	; (4023cc <imagingSensorLoadHeader+0x9c>)
  40238e:	601a      	str	r2, [r3, #0]
}
  402390:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
  402394:	f85d fb04 	ldr.w	pc, [sp], #4
  402398:	00402d95 	.word	0x00402d95
  40239c:	001fffff 	.word	0x001fffff
  4023a0:	00400941 	.word	0x00400941
  4023a4:	00400a15 	.word	0x00400a15
  4023a8:	00400a3d 	.word	0x00400a3d
  4023ac:	2040001c 	.word	0x2040001c
  4023b0:	204538b8 	.word	0x204538b8
  4023b4:	204538c0 	.word	0x204538c0
  4023b8:	204004ac 	.word	0x204004ac
  4023bc:	204538cc 	.word	0x204538cc
  4023c0:	204004b0 	.word	0x204004b0
  4023c4:	20400010 	.word	0x20400010
  4023c8:	20400018 	.word	0x20400018
  4023cc:	20400014 	.word	0x20400014

004023d0 <imagingSensorCaptureEnable>:

void imagingSensorCaptureEnable() 
{
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN;
  4023d0:	4a03      	ldr	r2, [pc, #12]	; (4023e0 <imagingSensorCaptureEnable+0x10>)
  4023d2:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  4023d6:	f043 0301 	orr.w	r3, r3, #1
  4023da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  4023de:	4770      	bx	lr
  4023e0:	400e0e00 	.word	0x400e0e00

004023e4 <imagingSensorCaptureDisable>:
}

void imagingSensorCaptureDisable() 
{
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN);
  4023e4:	4a03      	ldr	r2, [pc, #12]	; (4023f4 <imagingSensorCaptureDisable+0x10>)
  4023e6:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  4023ea:	f023 0301 	bic.w	r3, r3, #1
  4023ee:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  4023f2:	4770      	bx	lr
  4023f4:	400e0e00 	.word	0x400e0e00

004023f8 <imagingSensorSetup>:
{
  4023f8:	b508      	push	{r3, lr}
	imagingSensorCaptureDisable();		// Makes sure PIo Capture is disabled
  4023fa:	4b0f      	ldr	r3, [pc, #60]	; (402438 <imagingSensorSetup+0x40>)
  4023fc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);		// Sets PIO clock
  4023fe:	200a      	movs	r0, #10
  402400:	4b0e      	ldr	r3, [pc, #56]	; (40243c <imagingSensorSetup+0x44>)
  402402:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402404:	4b0e      	ldr	r3, [pc, #56]	; (402440 <imagingSensorSetup+0x48>)
  402406:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40240a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40240e:	2140      	movs	r1, #64	; 0x40
  402410:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402414:	601a      	str	r2, [r3, #0]
	imagingSensorItInit();				// Sets up interrupts // Might need to change interrupts for DMA transfer
  402416:	4b0b      	ldr	r3, [pc, #44]	; (402444 <imagingSensorSetup+0x4c>)
  402418:	4798      	blx	r3
	imagingSensorDMAInit();
  40241a:	4b0b      	ldr	r3, [pc, #44]	; (402448 <imagingSensorSetup+0x50>)
  40241c:	4798      	blx	r3
	imagingSensorParamInit();			// Configures PIO Capture settings
  40241e:	4b0b      	ldr	r3, [pc, #44]	; (40244c <imagingSensorSetup+0x54>)
  402420:	4798      	blx	r3
	imageSensorVSyncItInit();			// Sets up VSync interrupt to detect end of frame
  402422:	4b0b      	ldr	r3, [pc, #44]	; (402450 <imagingSensorSetup+0x58>)
  402424:	4798      	blx	r3
	imageSensorHSyncItInit();
  402426:	4b0b      	ldr	r3, [pc, #44]	; (402454 <imagingSensorSetup+0x5c>)
  402428:	4798      	blx	r3
	packetCMOS.chip = IMAGING_SENSOR_ADR;
  40242a:	4b0b      	ldr	r3, [pc, #44]	; (402458 <imagingSensorSetup+0x60>)
  40242c:	2218      	movs	r2, #24
  40242e:	741a      	strb	r2, [r3, #16]
	packetCMOS.addr_length = 1;
  402430:	2201      	movs	r2, #1
  402432:	605a      	str	r2, [r3, #4]
  402434:	bd08      	pop	{r3, pc}
  402436:	bf00      	nop
  402438:	004023e5 	.word	0x004023e5
  40243c:	00401bc1 	.word	0x00401bc1
  402440:	e000e100 	.word	0xe000e100
  402444:	0040227d 	.word	0x0040227d
  402448:	004021a9 	.word	0x004021a9
  40244c:	00402195 	.word	0x00402195
  402450:	00402291 	.word	0x00402291
  402454:	004022e1 	.word	0x004022e1
  402458:	204538e8 	.word	0x204538e8

0040245c <checkVSync>:
}

void checkVSync() 
{
	if (pcISR & VSYNC_MASK) { //VSync signal is detected. End of frame capture
  40245c:	4b55      	ldr	r3, [pc, #340]	; (4025b4 <checkVSync+0x158>)
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  402464:	f000 80a4 	beq.w	4025b0 <checkVSync+0x154>
{
  402468:	b570      	push	{r4, r5, r6, lr}
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) {
  40246a:	4b53      	ldr	r3, [pc, #332]	; (4025b8 <checkVSync+0x15c>)
  40246c:	781b      	ldrb	r3, [r3, #0]
  40246e:	b113      	cbz	r3, 402476 <checkVSync+0x1a>
  402470:	4b52      	ldr	r3, [pc, #328]	; (4025bc <checkVSync+0x160>)
  402472:	781b      	ldrb	r3, [r3, #0]
  402474:	b92b      	cbnz	r3, 402482 <checkVSync+0x26>

			#endif
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) { //waits for the first VSync to start capture. This makes sure we capture a full first frame
  402476:	4b51      	ldr	r3, [pc, #324]	; (4025bc <checkVSync+0x160>)
  402478:	781b      	ldrb	r3, [r3, #0]
  40247a:	2b00      	cmp	r3, #0
  40247c:	f040 808b 	bne.w	402596 <checkVSync+0x13a>
  402480:	bd70      	pop	{r4, r5, r6, pc}
			captureEnabled = 0;
  402482:	2300      	movs	r3, #0
  402484:	4a4c      	ldr	r2, [pc, #304]	; (4025b8 <checkVSync+0x15c>)
  402486:	7013      	strb	r3, [r2, #0]
			startRecording = 0;
  402488:	4a4c      	ldr	r2, [pc, #304]	; (4025bc <checkVSync+0x160>)
  40248a:	7013      	strb	r3, [r2, #0]
			imagingSensorCaptureDisable();
  40248c:	4b4c      	ldr	r3, [pc, #304]	; (4025c0 <checkVSync+0x164>)
  40248e:	4798      	blx	r3
			switch (frameNumber%3)
  402490:	4b4c      	ldr	r3, [pc, #304]	; (4025c4 <checkVSync+0x168>)
  402492:	681a      	ldr	r2, [r3, #0]
  402494:	4b4c      	ldr	r3, [pc, #304]	; (4025c8 <checkVSync+0x16c>)
  402496:	fba3 1302 	umull	r1, r3, r3, r2
  40249a:	085b      	lsrs	r3, r3, #1
  40249c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4024a0:	1ad3      	subs	r3, r2, r3
  4024a2:	2b01      	cmp	r3, #1
  4024a4:	d03b      	beq.n	40251e <checkVSync+0xc2>
  4024a6:	b1e3      	cbz	r3, 4024e2 <checkVSync+0x86>
  4024a8:	2b02      	cmp	r3, #2
  4024aa:	d056      	beq.n	40255a <checkVSync+0xfe>
			lineCount = 0;
  4024ac:	2300      	movs	r3, #0
  4024ae:	4a47      	ldr	r2, [pc, #284]	; (4025cc <checkVSync+0x170>)
  4024b0:	6013      	str	r3, [r2, #0]
			frameNumber++;
  4024b2:	4a44      	ldr	r2, [pc, #272]	; (4025c4 <checkVSync+0x168>)
  4024b4:	6811      	ldr	r1, [r2, #0]
  4024b6:	3101      	adds	r1, #1
  4024b8:	6011      	str	r1, [r2, #0]
			overflowCount = 0;
  4024ba:	4945      	ldr	r1, [pc, #276]	; (4025d0 <checkVSync+0x174>)
  4024bc:	600b      	str	r3, [r1, #0]
			xferDMAComplete = 0;
  4024be:	4945      	ldr	r1, [pc, #276]	; (4025d4 <checkVSync+0x178>)
  4024c0:	600b      	str	r3, [r1, #0]
			if (frameNumber<=sdImageWriteFrameNum +2) {
  4024c2:	4b45      	ldr	r3, [pc, #276]	; (4025d8 <checkVSync+0x17c>)
  4024c4:	681b      	ldr	r3, [r3, #0]
  4024c6:	6812      	ldr	r2, [r2, #0]
  4024c8:	3302      	adds	r3, #2
  4024ca:	4293      	cmp	r3, r2
  4024cc:	d3d8      	bcc.n	402480 <checkVSync+0x24>
				startRecording = 1;
  4024ce:	2301      	movs	r3, #1
  4024d0:	4a3a      	ldr	r2, [pc, #232]	; (4025bc <checkVSync+0x160>)
  4024d2:	7013      	strb	r3, [r2, #0]
				captureEnabled = 1;
  4024d4:	4a38      	ldr	r2, [pc, #224]	; (4025b8 <checkVSync+0x15c>)
  4024d6:	7013      	strb	r3, [r2, #0]
				imagingSensorStartDMA();
  4024d8:	4b40      	ldr	r3, [pc, #256]	; (4025dc <checkVSync+0x180>)
  4024da:	4798      	blx	r3
				imagingSensorCaptureEnable();
  4024dc:	4b40      	ldr	r3, [pc, #256]	; (4025e0 <checkVSync+0x184>)
  4024de:	4798      	blx	r3
  4024e0:	bd70      	pop	{r4, r5, r6, pc}
				imageBuffer0[buffSize-1] = frameNumber;
  4024e2:	4d38      	ldr	r5, [pc, #224]	; (4025c4 <checkVSync+0x168>)
  4024e4:	682a      	ldr	r2, [r5, #0]
  4024e6:	4c3f      	ldr	r4, [pc, #252]	; (4025e4 <checkVSync+0x188>)
  4024e8:	4b3f      	ldr	r3, [pc, #252]	; (4025e8 <checkVSync+0x18c>)
  4024ea:	50e2      	str	r2, [r4, r3]
				imageBuffer0[buffSize-2] = time_tick_calc_delay(start_time, time_tick_get());	// time when frame arrives to MCU
  4024ec:	4b3f      	ldr	r3, [pc, #252]	; (4025ec <checkVSync+0x190>)
  4024ee:	681e      	ldr	r6, [r3, #0]
  4024f0:	4b3f      	ldr	r3, [pc, #252]	; (4025f0 <checkVSync+0x194>)
  4024f2:	4798      	blx	r3
  4024f4:	4601      	mov	r1, r0
  4024f6:	4630      	mov	r0, r6
  4024f8:	4b3e      	ldr	r3, [pc, #248]	; (4025f4 <checkVSync+0x198>)
  4024fa:	4798      	blx	r3
  4024fc:	4b3e      	ldr	r3, [pc, #248]	; (4025f8 <checkVSync+0x19c>)
  4024fe:	50e0      	str	r0, [r4, r3]
				imageBuffer0[buffSize-3] = lineCount;
  402500:	4b32      	ldr	r3, [pc, #200]	; (4025cc <checkVSync+0x170>)
  402502:	681a      	ldr	r2, [r3, #0]
  402504:	4b3d      	ldr	r3, [pc, #244]	; (4025fc <checkVSync+0x1a0>)
  402506:	50e2      	str	r2, [r4, r3]
				imageBuffer0[buffSize-4] = xferDMAComplete; //Overflow flag
  402508:	4b32      	ldr	r3, [pc, #200]	; (4025d4 <checkVSync+0x178>)
  40250a:	681a      	ldr	r2, [r3, #0]
  40250c:	4b3c      	ldr	r3, [pc, #240]	; (402600 <checkVSync+0x1a4>)
  40250e:	50e2      	str	r2, [r4, r3]
				imageBuffer0[buffSize-8] = frameNumber-sdImageWriteFrameNum;
  402510:	682b      	ldr	r3, [r5, #0]
  402512:	4a31      	ldr	r2, [pc, #196]	; (4025d8 <checkVSync+0x17c>)
  402514:	6812      	ldr	r2, [r2, #0]
  402516:	1a9b      	subs	r3, r3, r2
  402518:	4a3a      	ldr	r2, [pc, #232]	; (402604 <checkVSync+0x1a8>)
  40251a:	50a3      	str	r3, [r4, r2]
				break;
  40251c:	e7c6      	b.n	4024ac <checkVSync+0x50>
				imageBuffer1[buffSize-1] = frameNumber;
  40251e:	4d29      	ldr	r5, [pc, #164]	; (4025c4 <checkVSync+0x168>)
  402520:	682a      	ldr	r2, [r5, #0]
  402522:	4c39      	ldr	r4, [pc, #228]	; (402608 <checkVSync+0x1ac>)
  402524:	4b30      	ldr	r3, [pc, #192]	; (4025e8 <checkVSync+0x18c>)
  402526:	50e2      	str	r2, [r4, r3]
				imageBuffer1[buffSize-2] = time_tick_calc_delay(start_time, time_tick_get());
  402528:	4b30      	ldr	r3, [pc, #192]	; (4025ec <checkVSync+0x190>)
  40252a:	681e      	ldr	r6, [r3, #0]
  40252c:	4b30      	ldr	r3, [pc, #192]	; (4025f0 <checkVSync+0x194>)
  40252e:	4798      	blx	r3
  402530:	4601      	mov	r1, r0
  402532:	4630      	mov	r0, r6
  402534:	4b2f      	ldr	r3, [pc, #188]	; (4025f4 <checkVSync+0x198>)
  402536:	4798      	blx	r3
  402538:	4b2f      	ldr	r3, [pc, #188]	; (4025f8 <checkVSync+0x19c>)
  40253a:	50e0      	str	r0, [r4, r3]
				imageBuffer1[buffSize-3] = lineCount;
  40253c:	4b23      	ldr	r3, [pc, #140]	; (4025cc <checkVSync+0x170>)
  40253e:	681a      	ldr	r2, [r3, #0]
  402540:	4b2e      	ldr	r3, [pc, #184]	; (4025fc <checkVSync+0x1a0>)
  402542:	50e2      	str	r2, [r4, r3]
				imageBuffer1[buffSize-4] = xferDMAComplete; //Overflow flag
  402544:	4b23      	ldr	r3, [pc, #140]	; (4025d4 <checkVSync+0x178>)
  402546:	681a      	ldr	r2, [r3, #0]
  402548:	4b2d      	ldr	r3, [pc, #180]	; (402600 <checkVSync+0x1a4>)
  40254a:	50e2      	str	r2, [r4, r3]
				imageBuffer1[buffSize-8] = frameNumber-sdImageWriteFrameNum;
  40254c:	682b      	ldr	r3, [r5, #0]
  40254e:	4a22      	ldr	r2, [pc, #136]	; (4025d8 <checkVSync+0x17c>)
  402550:	6812      	ldr	r2, [r2, #0]
  402552:	1a9b      	subs	r3, r3, r2
  402554:	4a2b      	ldr	r2, [pc, #172]	; (402604 <checkVSync+0x1a8>)
  402556:	50a3      	str	r3, [r4, r2]
				break;
  402558:	e7a8      	b.n	4024ac <checkVSync+0x50>
				imageBuffer2[buffSize-1] = frameNumber;
  40255a:	4d1a      	ldr	r5, [pc, #104]	; (4025c4 <checkVSync+0x168>)
  40255c:	682a      	ldr	r2, [r5, #0]
  40255e:	4c2b      	ldr	r4, [pc, #172]	; (40260c <checkVSync+0x1b0>)
  402560:	4b21      	ldr	r3, [pc, #132]	; (4025e8 <checkVSync+0x18c>)
  402562:	50e2      	str	r2, [r4, r3]
				imageBuffer2[buffSize-2] = time_tick_calc_delay(start_time, time_tick_get());
  402564:	4b21      	ldr	r3, [pc, #132]	; (4025ec <checkVSync+0x190>)
  402566:	681e      	ldr	r6, [r3, #0]
  402568:	4b21      	ldr	r3, [pc, #132]	; (4025f0 <checkVSync+0x194>)
  40256a:	4798      	blx	r3
  40256c:	4601      	mov	r1, r0
  40256e:	4630      	mov	r0, r6
  402570:	4b20      	ldr	r3, [pc, #128]	; (4025f4 <checkVSync+0x198>)
  402572:	4798      	blx	r3
  402574:	4b20      	ldr	r3, [pc, #128]	; (4025f8 <checkVSync+0x19c>)
  402576:	50e0      	str	r0, [r4, r3]
				imageBuffer2[buffSize-3] = lineCount;
  402578:	4b14      	ldr	r3, [pc, #80]	; (4025cc <checkVSync+0x170>)
  40257a:	681a      	ldr	r2, [r3, #0]
  40257c:	4b1f      	ldr	r3, [pc, #124]	; (4025fc <checkVSync+0x1a0>)
  40257e:	50e2      	str	r2, [r4, r3]
				imageBuffer2[buffSize-4] = xferDMAComplete; //Overflow flag
  402580:	4b14      	ldr	r3, [pc, #80]	; (4025d4 <checkVSync+0x178>)
  402582:	681a      	ldr	r2, [r3, #0]
  402584:	4b1e      	ldr	r3, [pc, #120]	; (402600 <checkVSync+0x1a4>)
  402586:	50e2      	str	r2, [r4, r3]
				imageBuffer2[buffSize-8] = frameNumber-sdImageWriteFrameNum;
  402588:	682b      	ldr	r3, [r5, #0]
  40258a:	4a13      	ldr	r2, [pc, #76]	; (4025d8 <checkVSync+0x17c>)
  40258c:	6812      	ldr	r2, [r2, #0]
  40258e:	1a9b      	subs	r3, r3, r2
  402590:	4a1c      	ldr	r2, [pc, #112]	; (402604 <checkVSync+0x1a8>)
  402592:	50a3      	str	r3, [r4, r2]
				break;
  402594:	e78a      	b.n	4024ac <checkVSync+0x50>
			captureEnabled = 1;
  402596:	2201      	movs	r2, #1
  402598:	4b07      	ldr	r3, [pc, #28]	; (4025b8 <checkVSync+0x15c>)
  40259a:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  40259c:	2300      	movs	r3, #0
  40259e:	4a0b      	ldr	r2, [pc, #44]	; (4025cc <checkVSync+0x170>)
  4025a0:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  4025a2:	4a0b      	ldr	r2, [pc, #44]	; (4025d0 <checkVSync+0x174>)
  4025a4:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  4025a6:	4b0d      	ldr	r3, [pc, #52]	; (4025dc <checkVSync+0x180>)
  4025a8:	4798      	blx	r3
			imagingSensorCaptureEnable();
  4025aa:	4b0d      	ldr	r3, [pc, #52]	; (4025e0 <checkVSync+0x184>)
  4025ac:	4798      	blx	r3

		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
  4025ae:	e767      	b.n	402480 <checkVSync+0x24>
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop
  4025b4:	204538c8 	.word	0x204538c8
  4025b8:	204004a8 	.word	0x204004a8
  4025bc:	204538d8 	.word	0x204538d8
  4025c0:	004023e5 	.word	0x004023e5
  4025c4:	204004b4 	.word	0x204004b4
  4025c8:	aaaaaaab 	.word	0xaaaaaaab
  4025cc:	204538bc 	.word	0x204538bc
  4025d0:	204538c4 	.word	0x204538c4
  4025d4:	204538e4 	.word	0x204538e4
  4025d8:	204538d4 	.word	0x204538d4
  4025dc:	004021cd 	.word	0x004021cd
  4025e0:	004023d1 	.word	0x004023d1
  4025e4:	204004b8 	.word	0x204004b8
  4025e8:	0001bbfc 	.word	0x0001bbfc
  4025ec:	204538dc 	.word	0x204538dc
  4025f0:	00401a11 	.word	0x00401a11
  4025f4:	00401a1d 	.word	0x00401a1d
  4025f8:	0001bbf8 	.word	0x0001bbf8
  4025fc:	0001bbf4 	.word	0x0001bbf4
  402600:	0001bbf0 	.word	0x0001bbf0
  402604:	0001bbe0 	.word	0x0001bbe0
  402608:	2041c0b8 	.word	0x2041c0b8
  40260c:	20437cb8 	.word	0x20437cb8

00402610 <PIOA_Handler>:

void PIOA_Handler(void) 
{
  402610:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  402612:	4b0a      	ldr	r3, [pc, #40]	; (40263c <PIOA_Handler+0x2c>)
  402614:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  402616:	4b0a      	ldr	r3, [pc, #40]	; (402640 <PIOA_Handler+0x30>)
  402618:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK) {
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  402620:	d004      	beq.n	40262c <PIOA_Handler+0x1c>
		if (captureEnabled == 1)
  402622:	4b08      	ldr	r3, [pc, #32]	; (402644 <PIOA_Handler+0x34>)
  402624:	781b      	ldrb	r3, [r3, #0]
  402626:	b2db      	uxtb	r3, r3
  402628:	2b01      	cmp	r3, #1
  40262a:	d002      	beq.n	402632 <PIOA_Handler+0x22>
			lineCount++;
	}
	checkVSync();
  40262c:	4b06      	ldr	r3, [pc, #24]	; (402648 <PIOA_Handler+0x38>)
  40262e:	4798      	blx	r3
  402630:	bd08      	pop	{r3, pc}
			lineCount++;
  402632:	4a06      	ldr	r2, [pc, #24]	; (40264c <PIOA_Handler+0x3c>)
  402634:	6813      	ldr	r3, [r2, #0]
  402636:	3301      	adds	r3, #1
  402638:	6013      	str	r3, [r2, #0]
  40263a:	e7f7      	b.n	40262c <PIOA_Handler+0x1c>
  40263c:	400e0e00 	.word	0x400e0e00
  402640:	204538c8 	.word	0x204538c8
  402644:	204004a8 	.word	0x204004a8
  402648:	0040245d 	.word	0x0040245d
  40264c:	204538bc 	.word	0x204538bc

00402650 <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  402650:	4b04      	ldr	r3, [pc, #16]	; (402664 <XDMAC_Handler+0x14>)
  402652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) {
  402656:	f013 0f01 	tst.w	r3, #1
  40265a:	d002      	beq.n	402662 <XDMAC_Handler+0x12>
		xferDMAComplete = 1;
  40265c:	2201      	movs	r2, #1
  40265e:	4b02      	ldr	r3, [pc, #8]	; (402668 <XDMAC_Handler+0x18>)
  402660:	601a      	str	r2, [r3, #0]
  402662:	4770      	bx	lr
  402664:	40078000 	.word	0x40078000
  402668:	204538e4 	.word	0x204538e4

0040266c <PYTHON480_Init>:
/*                           LOCAL FUNCTIONS                            */
/************************************************************************/
void usart_write_word(Usart *p_usart, uint32_t four_bytes);

void PYTHON480_Init()
{
  40266c:	b538      	push	{r3, r4, r5, lr}
	Enable_Clock_Management1();
  40266e:	4b07      	ldr	r3, [pc, #28]	; (40268c <PYTHON480_Init+0x20>)
  402670:	4798      	blx	r3
	delay_ms(10);			// Small pause here for things to stabilize.
  402672:	4d07      	ldr	r5, [pc, #28]	; (402690 <PYTHON480_Init+0x24>)
  402674:	4628      	mov	r0, r5
  402676:	4c07      	ldr	r4, [pc, #28]	; (402694 <PYTHON480_Init+0x28>)
  402678:	47a0      	blx	r4
	Enable_Clock_Management2();
  40267a:	4b07      	ldr	r3, [pc, #28]	; (402698 <PYTHON480_Init+0x2c>)
  40267c:	4798      	blx	r3
	delay_ms(10);
  40267e:	4628      	mov	r0, r5
  402680:	47a0      	blx	r4
	Required_Uploads();
  402682:	4b06      	ldr	r3, [pc, #24]	; (40269c <PYTHON480_Init+0x30>)
  402684:	4798      	blx	r3
	Soft_PowerUp();
  402686:	4b06      	ldr	r3, [pc, #24]	; (4026a0 <PYTHON480_Init+0x34>)
  402688:	4798      	blx	r3
  40268a:	bd38      	pop	{r3, r4, r5, pc}
  40268c:	00401295 	.word	0x00401295
  402690:	0003b440 	.word	0x0003b440
  402694:	20400001 	.word	0x20400001
  402698:	004012d9 	.word	0x004012d9
  40269c:	004012f9 	.word	0x004012f9
  4026a0:	00401799 	.word	0x00401799

004026a4 <PYTHON480_Pin_Setup>:
	// Enable_Seq();			// Sequencer has already been enabled in Required Uploads..
}

void PYTHON480_Pin_Setup()
{
  4026a4:	b538      	push	{r3, r4, r5, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026a6:	4b0f      	ldr	r3, [pc, #60]	; (4026e4 <PYTHON480_Pin_Setup+0x40>)
  4026a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4026ac:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026b2:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026b4:	4c0c      	ldr	r4, [pc, #48]	; (4026e8 <PYTHON480_Pin_Setup+0x44>)
  4026b6:	2502      	movs	r5, #2
  4026b8:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026ba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026be:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LED_PIN, 0);

	// Set up RESET_N PIN
	ioport_set_pin_dir(RESET_N_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESET_N_PIN, 0);
	delay_ms(100);
  4026c0:	480a      	ldr	r0, [pc, #40]	; (4026ec <PYTHON480_Pin_Setup+0x48>)
  4026c2:	4b0b      	ldr	r3, [pc, #44]	; (4026f0 <PYTHON480_Pin_Setup+0x4c>)
  4026c4:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026c6:	6325      	str	r5, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026c8:	2304      	movs	r3, #4
  4026ca:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026d0:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4026d2:	4b08      	ldr	r3, [pc, #32]	; (4026f4 <PYTHON480_Pin_Setup+0x50>)
  4026d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4026d8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026de:	635a      	str	r2, [r3, #52]	; 0x34
  4026e0:	bd38      	pop	{r3, r4, r5, pc}
  4026e2:	bf00      	nop
  4026e4:	400e1400 	.word	0x400e1400
  4026e8:	400e1000 	.word	0x400e1000
  4026ec:	00250a78 	.word	0x00250a78
  4026f0:	20400001 	.word	0x20400001
  4026f4:	400e0e00 	.word	0x400e0e00

004026f8 <main>:
	{}
}


int main (void)
{
  4026f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026fc:	b09b      	sub	sp, #108	; 0x6c
	uint32_t writeFrameNum = 0;
	
	/* LED Board TWI Variables */
	twihs_packet_t p_ExcLED;
	uint8_t led_buff[2];
	p_ExcLED.chip = POTENTIOMETER_ADR;		// This is the slave address
  4026fe:	2350      	movs	r3, #80	; 0x50
  402700:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	p_ExcLED.addr[0] = 0x00;				// This is register address for potentiometer A.
  402704:	2300      	movs	r3, #0
  402706:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
	//	packetExcLED.addr[1] = 0x01;			// This is register address for potentiometer B.
	p_ExcLED.addr_length = 1;				// The register value didn't use to get sent without this..but now it does
  40270a:	2301      	movs	r3, #1
  40270c:	9316      	str	r3, [sp, #88]	; 0x58
	led_buff[0] = 114;
  40270e:	2272      	movs	r2, #114	; 0x72
  402710:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
	led_buff[1] = 0xFF - ledValue;			// Make sure the LED value makes sense/between 0 and 255
  402714:	4a9f      	ldr	r2, [pc, #636]	; (402994 <main+0x29c>)
  402716:	6812      	ldr	r2, [r2, #0]
  402718:	43d2      	mvns	r2, r2
  40271a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
	p_ExcLED.buffer = (uint8_t *) led_buff;	// Location of the value to send
  40271e:	aa14      	add	r2, sp, #80	; 0x50
  402720:	9217      	str	r2, [sp, #92]	; 0x5c
	p_ExcLED.length = 2;
  402722:	2202      	movs	r2, #2
  402724:	9218      	str	r2, [sp, #96]	; 0x60
	
	twihs_packet_t p_EWL_init;
	uint8_t EWL_init_buff[2];
	p_EWL_init.chip = HE_EWL_DRIVER_ADR;		// 0b 0010 0011
  402726:	2023      	movs	r0, #35	; 0x23
  402728:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
	p_EWL_init.addr[0] = 0x03;
  40272c:	2403      	movs	r4, #3
  40272e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	p_EWL_init.addr_length = 1;
  402732:	9310      	str	r3, [sp, #64]	; 0x40
	EWL_init_buff[0] = 0x03;
  402734:	a91a      	add	r1, sp, #104	; 0x68
  402736:	f801 4d30 	strb.w	r4, [r1, #-48]!
	p_EWL_init.buffer = (uint8_t *) EWL_init_buff;
  40273a:	9111      	str	r1, [sp, #68]	; 0x44
	p_EWL_init.length = 1;
  40273c:	9312      	str	r3, [sp, #72]	; 0x48
	
	twihs_packet_t p_EWL_focus;
	uint8_t EWL_focus_buff[2];
	p_EWL_focus.chip = HE_EWL_DRIVER_ADR;		// 0b 0010 0011
  40273e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
	p_EWL_focus.addr[0] = 0x08;
  402742:	2108      	movs	r1, #8
  402744:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	p_EWL_focus.addr_length = 1;
  402748:	930a      	str	r3, [sp, #40]	; 0x28
	EWL_focus_buff[0] = focalLength;
  40274a:	4993      	ldr	r1, [pc, #588]	; (402998 <main+0x2a0>)
  40274c:	6809      	ldr	r1, [r1, #0]
  40274e:	f88d 1020 	strb.w	r1, [sp, #32]
	EWL_focus_buff[1] = 0x02;
  402752:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	p_EWL_focus.buffer = (uint8_t *) EWL_focus_buff;
  402756:	a908      	add	r1, sp, #32
  402758:	910b      	str	r1, [sp, #44]	; 0x2c
	p_EWL_focus.length = 2;
  40275a:	920c      	str	r2, [sp, #48]	; 0x30

	/** initialize MCU */
	irq_initialize_vectors();
	cpu_irq_enable();
  40275c:	4a8f      	ldr	r2, [pc, #572]	; (40299c <main+0x2a4>)
  40275e:	7013      	strb	r3, [r2, #0]
  402760:	f3bf 8f5f 	dmb	sy
  402764:	b662      	cpsie	i

	sysclk_init();
  402766:	4b8e      	ldr	r3, [pc, #568]	; (4029a0 <main+0x2a8>)
  402768:	4798      	blx	r3
	board_init();	// Sets up SD card slot pins.
  40276a:	4b8e      	ldr	r3, [pc, #568]	; (4029a4 <main+0x2ac>)
  40276c:	4798      	blx	r3
  40276e:	200a      	movs	r0, #10
  402770:	4c8d      	ldr	r4, [pc, #564]	; (4029a8 <main+0x2b0>)
  402772:	47a0      	blx	r4
  402774:	200b      	movs	r0, #11
  402776:	47a0      	blx	r4
  402778:	2010      	movs	r0, #16
  40277a:	47a0      	blx	r4
	ioport_init();	// Turns on all peripheral clocks. Could remove this to save power.
	
	time_tick_init();
  40277c:	4b8b      	ldr	r3, [pc, #556]	; (4029ac <main+0x2b4>)
  40277e:	4798      	blx	r3
	
	/** Initialize TWIHS Module */
	TWIHS_init();
  402780:	4b8b      	ldr	r3, [pc, #556]	; (4029b0 <main+0x2b8>)
  402782:	4798      	blx	r3
	
	/** Initialize USART Module */
	USART_init();
  402784:	4b8b      	ldr	r3, [pc, #556]	; (4029b4 <main+0x2bc>)
  402786:	4798      	blx	r3

	/** Initialize Image Sensor */
	enableSourceClk();	// Turns on SCK1 from MCU to drive CMOS sensor
  402788:	4b8b      	ldr	r3, [pc, #556]	; (4029b8 <main+0x2c0>)
  40278a:	4798      	blx	r3

	#ifdef PYTHON480
		PYTHON480_Pin_Setup();
  40278c:	4b8b      	ldr	r3, [pc, #556]	; (4029bc <main+0x2c4>)
  40278e:	4798      	blx	r3
		SPI_BitBang_init();
  402790:	4b8b      	ldr	r3, [pc, #556]	; (4029c0 <main+0x2c8>)
  402792:	4798      	blx	r3
  402794:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402798:	4b8a      	ldr	r3, [pc, #552]	; (4029c4 <main+0x2cc>)
  40279a:	635a      	str	r2, [r3, #52]	; 0x34
	#endif

	ioport_set_pin_level(LED_PIN, 0);
	
	PYTHON480_Init();
  40279c:	4b8a      	ldr	r3, [pc, #552]	; (4029c8 <main+0x2d0>)
  40279e:	4798      	blx	r3
	
	uint16_t Python_Check;
	Python_Check = SPI_Read(200);
  4027a0:	20c8      	movs	r0, #200	; 0xc8
  4027a2:	4b8a      	ldr	r3, [pc, #552]	; (4029cc <main+0x2d4>)
  4027a4:	4798      	blx	r3
	
	if (Python_Check == 5000)
  4027a6:	f241 3388 	movw	r3, #5000	; 0x1388
  4027aa:	4298      	cmp	r0, r3
  4027ac:	d030      	beq.n	402810 <main+0x118>
		
	
	#ifdef DEBUG_MODE
//	NO_Subsample_ROI();
	#else
	Enable_Subsample();
  4027ae:	4b88      	ldr	r3, [pc, #544]	; (4029d0 <main+0x2d8>)
  4027b0:	4798      	blx	r3
	ROI_Configuration();
  4027b2:	4b88      	ldr	r3, [pc, #544]	; (4029d4 <main+0x2dc>)
  4027b4:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4027b6:	4b88      	ldr	r3, [pc, #544]	; (4029d8 <main+0x2e0>)
  4027b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4027bc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4027be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4027c2:	631a      	str	r2, [r3, #48]	; 0x30
	#endif
		
	/** Boot up excitation LED & EWL driver */
	ioport_set_pin_dir(LED_ENT_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LED_ENT_PIN, 1);
	while (twihs_master_write(TWIHS1, &p_EWL_init) != TWIHS_SUCCESS)
  4027c4:	4d85      	ldr	r5, [pc, #532]	; (4029dc <main+0x2e4>)
  4027c6:	4c86      	ldr	r4, [pc, #536]	; (4029e0 <main+0x2e8>)
  4027c8:	a90f      	add	r1, sp, #60	; 0x3c
  4027ca:	4628      	mov	r0, r5
  4027cc:	47a0      	blx	r4
  4027ce:	2800      	cmp	r0, #0
  4027d0:	d1fa      	bne.n	4027c8 <main+0xd0>
	testLEDBoardSetup();
	#endif // LED_BOARD_TEST_MODE
	
	
	/** Sets interrupts, configures IO pins for DMA CMOS sensor */
	imagingSensorSetup();
  4027d2:	4b84      	ldr	r3, [pc, #528]	; (4029e4 <main+0x2ec>)
  4027d4:	4798      	blx	r3


	/** Initialize SD Card Module */
	sd_mmc_init();
  4027d6:	4b84      	ldr	r3, [pc, #528]	; (4029e8 <main+0x2f0>)
  4027d8:	4798      	blx	r3

	
	/** Send frames to UART-USB Board */
	writeFrameNum = 0;
	frameNumber = 0;
  4027da:	2200      	movs	r2, #0
  4027dc:	4b83      	ldr	r3, [pc, #524]	; (4029ec <main+0x2f4>)
  4027de:	601a      	str	r2, [r3, #0]
	tick_start = time_tick_get();
  4027e0:	4b83      	ldr	r3, [pc, #524]	; (4029f0 <main+0x2f8>)
  4027e2:	4798      	blx	r3
  4027e4:	4b83      	ldr	r3, [pc, #524]	; (4029f4 <main+0x2fc>)
  4027e6:	6018      	str	r0, [r3, #0]
	start_time = tick_start;
  4027e8:	681a      	ldr	r2, [r3, #0]
  4027ea:	4b83      	ldr	r3, [pc, #524]	; (4029f8 <main+0x300>)
  4027ec:	601a      	str	r2, [r3, #0]
	startRecording = 1;
  4027ee:	2201      	movs	r2, #1
  4027f0:	4b82      	ldr	r3, [pc, #520]	; (4029fc <main+0x304>)
  4027f2:	701a      	strb	r2, [r3, #0]
  4027f4:	2204      	movs	r2, #4
  4027f6:	4b82      	ldr	r3, [pc, #520]	; (402a00 <main+0x308>)
  4027f8:	631a      	str	r2, [r3, #48]	; 0x30
  4027fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4027fe:	4a76      	ldr	r2, [pc, #472]	; (4029d8 <main+0x2e0>)
  402800:	6313      	str	r3, [r2, #48]	; 0x30
  402802:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  402806:	6313      	str	r3, [r2, #48]	; 0x30
	ioport_set_pin_level(TRIGGER0_PIN, 1);	// Starts acquiring imaging sensor data
	ioport_set_pin_level(LED_ENT_PIN, 1);
	ioport_set_pin_level(LED_PIN, 1);
	
	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK) 
  402808:	2600      	movs	r6, #0
  40280a:	4d7e      	ldr	r5, [pc, #504]	; (402a04 <main+0x30c>)
	{
		if (writeFrameNum > frameNumber)
  40280c:	4c77      	ldr	r4, [pc, #476]	; (4029ec <main+0x2f4>)
  40280e:	e00a      	b.n	402826 <main+0x12e>
  402810:	4c6c      	ldr	r4, [pc, #432]	; (4029c4 <main+0x2cc>)
  402812:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  402816:	6325      	str	r5, [r4, #48]	; 0x30
		tick_start = time_tick_get();
  402818:	4b75      	ldr	r3, [pc, #468]	; (4029f0 <main+0x2f8>)
  40281a:	4798      	blx	r3
  40281c:	4b75      	ldr	r3, [pc, #468]	; (4029f4 <main+0x2fc>)
  40281e:	6018      	str	r0, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402820:	6365      	str	r5, [r4, #52]	; 0x34
  402822:	e7c4      	b.n	4027ae <main+0xb6>
		if (writeFrameNum > frameNumber)
  402824:	6823      	ldr	r3, [r4, #0]
	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK) 
  402826:	4630      	mov	r0, r6
  402828:	47a8      	blx	r5
  40282a:	2800      	cmp	r0, #0
  40282c:	d1fa      	bne.n	402824 <main+0x12c>
			delay_ms(1);
		}
	}

	/** Stop recording until SD card */
	startRecording = 0;
  40282e:	2400      	movs	r4, #0
  402830:	4b72      	ldr	r3, [pc, #456]	; (4029fc <main+0x304>)
  402832:	701c      	strb	r4, [r3, #0]
  402834:	2204      	movs	r2, #4
  402836:	4b72      	ldr	r3, [pc, #456]	; (402a00 <main+0x308>)
  402838:	635a      	str	r2, [r3, #52]	; 0x34
  40283a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40283e:	4a66      	ldr	r2, [pc, #408]	; (4029d8 <main+0x2e0>)
  402840:	6353      	str	r3, [r2, #52]	; 0x34
  402842:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  402846:	6353      	str	r3, [r2, #52]	; 0x34
	ioport_set_pin_level(TRIGGER0_PIN, 0);	// Stops acquiring imaging sensor data
	ioport_set_pin_level(LED_ENT_PIN, 0);
	ioport_set_pin_level(LED_PIN, 0);
	
	
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC))		// This is the correct type of card (SDHC)
  402848:	4620      	mov	r0, r4
  40284a:	4b6f      	ldr	r3, [pc, #444]	; (402a08 <main+0x310>)
  40284c:	4798      	blx	r3
	{}
	uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB);				// in KB
  40284e:	4620      	mov	r0, r4
  402850:	4b6e      	ldr	r3, [pc, #440]	; (402a0c <main+0x314>)
  402852:	4798      	blx	r3
	// {
	//This is a problem. Maybe turn off the LED
	// }

	/** Configure Miniscope */
	imagingSensorLoadHeader();
  402854:	4b6e      	ldr	r3, [pc, #440]	; (402a10 <main+0x318>)
  402856:	4798      	blx	r3
	
	while (twihs_master_write(TWIHS1, &p_ExcLED) != TWIHS_SUCCESS)
  402858:	4d60      	ldr	r5, [pc, #384]	; (4029dc <main+0x2e4>)
  40285a:	4c61      	ldr	r4, [pc, #388]	; (4029e0 <main+0x2e8>)
  40285c:	a915      	add	r1, sp, #84	; 0x54
  40285e:	4628      	mov	r0, r5
  402860:	47a0      	blx	r4
  402862:	2800      	cmp	r0, #0
  402864:	d1fa      	bne.n	40285c <main+0x164>
	{}
	while (twihs_master_write(TWIHS1, &p_EWL_focus) != TWIHS_SUCCESS)
  402866:	4e5d      	ldr	r6, [pc, #372]	; (4029dc <main+0x2e4>)
  402868:	4c5d      	ldr	r4, [pc, #372]	; (4029e0 <main+0x2e8>)
  40286a:	a909      	add	r1, sp, #36	; 0x24
  40286c:	4630      	mov	r0, r6
  40286e:	47a0      	blx	r4
  402870:	4605      	mov	r5, r0
  402872:	2800      	cmp	r0, #0
  402874:	d1f9      	bne.n	40286a <main+0x172>
	{}

	if (gain == 1)
  402876:	4b67      	ldr	r3, [pc, #412]	; (402a14 <main+0x31c>)
  402878:	681b      	ldr	r3, [r3, #0]
  40287a:	2b01      	cmp	r3, #1
  40287c:	d056      	beq.n	40292c <main+0x234>
	{
		SPI_Write(204, 0x00E1); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
	}
	else if (gain == 2)
  40287e:	4b65      	ldr	r3, [pc, #404]	; (402a14 <main+0x31c>)
  402880:	681b      	ldr	r3, [r3, #0]
  402882:	2b02      	cmp	r3, #2
  402884:	d057      	beq.n	402936 <main+0x23e>
	{
		SPI_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
	}
	else if (gain == 3)
  402886:	4b63      	ldr	r3, [pc, #396]	; (402a14 <main+0x31c>)
  402888:	681b      	ldr	r3, [r3, #0]
  40288a:	2b03      	cmp	r3, #3
  40288c:	d058      	beq.n	402940 <main+0x248>
	else
	{}


	/** Wait 5 seconds*/
	tick_start = time_tick_get();
  40288e:	4b58      	ldr	r3, [pc, #352]	; (4029f0 <main+0x2f8>)
  402890:	4798      	blx	r3
  402892:	4b58      	ldr	r3, [pc, #352]	; (4029f4 <main+0x2fc>)
  402894:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) < 5000)
  402896:	461f      	mov	r7, r3
  402898:	4e55      	ldr	r6, [pc, #340]	; (4029f0 <main+0x2f8>)
  40289a:	4c5f      	ldr	r4, [pc, #380]	; (402a18 <main+0x320>)
  40289c:	f8d7 8000 	ldr.w	r8, [r7]
  4028a0:	47b0      	blx	r6
  4028a2:	4601      	mov	r1, r0
  4028a4:	4640      	mov	r0, r8
  4028a6:	47a0      	blx	r4
  4028a8:	f241 3387 	movw	r3, #4999	; 0x1387
  4028ac:	4298      	cmp	r0, r3
  4028ae:	d9f5      	bls.n	40289c <main+0x1a4>
	{}

	
	/** Set up to write to SD card */
	sd_mmc_init_write_blocks(SD_SLOT_NB, STARTING_BLOCK, 50 * NB_BLOCKS_PER_FRAME);	
  4028b0:	f642 325c 	movw	r2, #11100	; 0x2b5c
  4028b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4028b8:	2000      	movs	r0, #0
  4028ba:	4b58      	ldr	r3, [pc, #352]	; (402a1c <main+0x324>)
  4028bc:	4798      	blx	r3
	uint32_t writeCount = 0;
	
	
	/** Set up to begin data recording */
	writeFrameNum = 0;
	frameNumber = 0;
  4028be:	2200      	movs	r2, #0
  4028c0:	4b4a      	ldr	r3, [pc, #296]	; (4029ec <main+0x2f4>)
  4028c2:	601a      	str	r2, [r3, #0]
	tick_start = time_tick_get();
  4028c4:	4b4a      	ldr	r3, [pc, #296]	; (4029f0 <main+0x2f8>)
  4028c6:	4798      	blx	r3
  4028c8:	4b4a      	ldr	r3, [pc, #296]	; (4029f4 <main+0x2fc>)
  4028ca:	6018      	str	r0, [r3, #0]
	start_time = tick_start;
  4028cc:	681a      	ldr	r2, [r3, #0]
  4028ce:	4b4a      	ldr	r3, [pc, #296]	; (4029f8 <main+0x300>)
  4028d0:	601a      	str	r2, [r3, #0]
	startRecording = 1;
  4028d2:	2301      	movs	r3, #1
  4028d4:	4a49      	ldr	r2, [pc, #292]	; (4029fc <main+0x304>)
  4028d6:	7013      	strb	r3, [r2, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4028d8:	2104      	movs	r1, #4
  4028da:	4a49      	ldr	r2, [pc, #292]	; (402a00 <main+0x308>)
  4028dc:	6311      	str	r1, [r2, #48]	; 0x30
  4028de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4028e2:	493d      	ldr	r1, [pc, #244]	; (4029d8 <main+0x2e0>)
  4028e4:	630a      	str	r2, [r1, #48]	; 0x30
  4028e6:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
  4028ea:	630a      	str	r2, [r1, #48]	; 0x30
	ioport_set_pin_level(LED_ENT_PIN, 1);
	ioport_set_pin_level(LED_PIN, 1);
	
	
	/** Sweep Mode */
	uint8_t voltageStep = focusMin;			// VLL_4RMS = 44.5mV_RMS x N + 24.4V_RMS, where N = code 0x000 to 0x3FF in decimal (0-1023), voltageStep is the 8 MSBs (0-255)
  4028ec:	4a4c      	ldr	r2, [pc, #304]	; (402a20 <main+0x328>)
  4028ee:	6814      	ldr	r4, [r2, #0]
  4028f0:	b2e4      	uxtb	r4, r4
	
	twihs_packet_t packetEWLTest;
	uint8_t EWLTestBuff[2];
	packetEWLTest.chip = HE_EWL_DRIVER_ADR;	// 0b 0111 0111
  4028f2:	2223      	movs	r2, #35	; 0x23
  4028f4:	f88d 201c 	strb.w	r2, [sp, #28]
	packetEWLTest.addr[0] = 0x08;
  4028f8:	2208      	movs	r2, #8
  4028fa:	f88d 200c 	strb.w	r2, [sp, #12]
	packetEWLTest.addr_length = 1;
  4028fe:	9304      	str	r3, [sp, #16]
	packetEWLTest.buffer = (uint8_t *) EWLTestBuff;
  402900:	eb0d 0302 	add.w	r3, sp, r2
  402904:	9305      	str	r3, [sp, #20]
	EWLTestBuff[1] = 0x02;
  402906:	2302      	movs	r3, #2
  402908:	f88d 3009 	strb.w	r3, [sp, #9]
	packetEWLTest.length = 2;
  40290c:	9306      	str	r3, [sp, #24]
	uint32_t curBlock = STARTING_BLOCK;
  40290e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  402912:	9300      	str	r3, [sp, #0]
				}
				else
				{
					imageBuffer1[buffSize - 5] = focalLength;
				}
				imageBuffer1[buffSize - 6] = time_tick_calc_delay(tick_start, time_tick_get());		// time when beginning to write to SD
  402914:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4029f4 <main+0x2fc>
  402918:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4029f0 <main+0x2f8>
  40291c:	4f3e      	ldr	r7, [pc, #248]	; (402a18 <main+0x320>)
  40291e:	4e41      	ldr	r6, [pc, #260]	; (402a24 <main+0x32c>)
  402920:	f8df a114 	ldr.w	sl, [pc, #276]	; 402a38 <main+0x340>
  402924:	eb06 030a 	add.w	r3, r6, sl
  402928:	9301      	str	r3, [sp, #4]
  40292a:	e0c5      	b.n	402ab8 <main+0x3c0>
		SPI_Write(204, 0x00E1); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  40292c:	21e1      	movs	r1, #225	; 0xe1
  40292e:	20cc      	movs	r0, #204	; 0xcc
  402930:	4b3d      	ldr	r3, [pc, #244]	; (402a28 <main+0x330>)
  402932:	4798      	blx	r3
  402934:	e7ab      	b.n	40288e <main+0x196>
		SPI_Write(204, 0x00E4); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  402936:	21e4      	movs	r1, #228	; 0xe4
  402938:	20cc      	movs	r0, #204	; 0xcc
  40293a:	4b3b      	ldr	r3, [pc, #236]	; (402a28 <main+0x330>)
  40293c:	4798      	blx	r3
  40293e:	e7a6      	b.n	40288e <main+0x196>
		SPI_Write(204, 0x0024); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  402940:	2124      	movs	r1, #36	; 0x24
  402942:	20cc      	movs	r0, #204	; 0xcc
  402944:	4b38      	ldr	r3, [pc, #224]	; (402a28 <main+0x330>)
  402946:	4798      	blx	r3
  402948:	e7a1      	b.n	40288e <main+0x196>
				if (writeFrameNum % (20 * focusStepLen)  == 0)
  40294a:	4b38      	ldr	r3, [pc, #224]	; (402a2c <main+0x334>)
  40294c:	681b      	ldr	r3, [r3, #0]
  40294e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402952:	009b      	lsls	r3, r3, #2
  402954:	fbb5 f2f3 	udiv	r2, r5, r3
  402958:	fb03 5312 	mls	r3, r3, r2, r5
  40295c:	2b00      	cmp	r3, #0
  40295e:	f040 80b4 	bne.w	402aca <main+0x3d2>
					EWLTestBuff[0] = voltageStep;
  402962:	f88d 4008 	strb.w	r4, [sp, #8]
					twihs_master_write(TWIHS1, &packetEWLTest);
  402966:	a903      	add	r1, sp, #12
  402968:	481c      	ldr	r0, [pc, #112]	; (4029dc <main+0x2e4>)
  40296a:	4b1d      	ldr	r3, [pc, #116]	; (4029e0 <main+0x2e8>)
  40296c:	4798      	blx	r3
					if (voltageStep <= focusMax)
  40296e:	4b30      	ldr	r3, [pc, #192]	; (402a30 <main+0x338>)
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	429c      	cmp	r4, r3
  402974:	f200 80a9 	bhi.w	402aca <main+0x3d2>
						voltageStep += ((focusMax + 1 - focusMin) / focusSteps);
  402978:	4b2d      	ldr	r3, [pc, #180]	; (402a30 <main+0x338>)
  40297a:	681b      	ldr	r3, [r3, #0]
  40297c:	4a28      	ldr	r2, [pc, #160]	; (402a20 <main+0x328>)
  40297e:	6811      	ldr	r1, [r2, #0]
  402980:	4a2c      	ldr	r2, [pc, #176]	; (402a34 <main+0x33c>)
  402982:	6812      	ldr	r2, [r2, #0]
  402984:	3301      	adds	r3, #1
  402986:	1a5b      	subs	r3, r3, r1
  402988:	fbb3 f3f2 	udiv	r3, r3, r2
  40298c:	441c      	add	r4, r3
  40298e:	b2e4      	uxtb	r4, r4
  402990:	e09b      	b.n	402aca <main+0x3d2>
  402992:	bf00      	nop
  402994:	204538b8 	.word	0x204538b8
  402998:	204004ac 	.word	0x204004ac
  40299c:	2040000a 	.word	0x2040000a
  4029a0:	00401a2d 	.word	0x00401a2d
  4029a4:	00401d85 	.word	0x00401d85
  4029a8:	00401bc1 	.word	0x00401bc1
  4029ac:	004019e5 	.word	0x004019e5
  4029b0:	004011b9 	.word	0x004011b9
  4029b4:	00401225 	.word	0x00401225
  4029b8:	00402151 	.word	0x00402151
  4029bc:	004026a5 	.word	0x004026a5
  4029c0:	00401201 	.word	0x00401201
  4029c4:	400e1400 	.word	0x400e1400
  4029c8:	0040266d 	.word	0x0040266d
  4029cc:	004018f9 	.word	0x004018f9
  4029d0:	004017d9 	.word	0x004017d9
  4029d4:	004017f5 	.word	0x004017f5
  4029d8:	400e0e00 	.word	0x400e0e00
  4029dc:	4001c000 	.word	0x4001c000
  4029e0:	00401c91 	.word	0x00401c91
  4029e4:	004023f9 	.word	0x004023f9
  4029e8:	0040027d 	.word	0x0040027d
  4029ec:	204004b4 	.word	0x204004b4
  4029f0:	00401a11 	.word	0x00401a11
  4029f4:	20453908 	.word	0x20453908
  4029f8:	204538dc 	.word	0x204538dc
  4029fc:	204538d8 	.word	0x204538d8
  402a00:	400e1000 	.word	0x400e1000
  402a04:	0040029d 	.word	0x0040029d
  402a08:	004008f9 	.word	0x004008f9
  402a0c:	0040091d 	.word	0x0040091d
  402a10:	00402331 	.word	0x00402331
  402a14:	2040001c 	.word	0x2040001c
  402a18:	00401a1d 	.word	0x00401a1d
  402a1c:	00400aa5 	.word	0x00400aa5
  402a20:	204004b0 	.word	0x204004b0
  402a24:	2041c0b8 	.word	0x2041c0b8
  402a28:	00401819 	.word	0x00401819
  402a2c:	20400014 	.word	0x20400014
  402a30:	20400010 	.word	0x20400010
  402a34:	20400018 	.word	0x20400018
  402a38:	0001bbe8 	.word	0x0001bbe8
				if (recMode == 2)
  402a3c:	4b53      	ldr	r3, [pc, #332]	; (402b8c <main+0x494>)
  402a3e:	681b      	ldr	r3, [r3, #0]
  402a40:	2b02      	cmp	r3, #2
  402a42:	d06b      	beq.n	402b1c <main+0x424>
					imageBuffer0[buffSize - 5] = focalLength;
  402a44:	4b52      	ldr	r3, [pc, #328]	; (402b90 <main+0x498>)
  402a46:	6819      	ldr	r1, [r3, #0]
  402a48:	4b52      	ldr	r3, [pc, #328]	; (402b94 <main+0x49c>)
  402a4a:	4a53      	ldr	r2, [pc, #332]	; (402b98 <main+0x4a0>)
  402a4c:	50d1      	str	r1, [r2, r3]
				imageBuffer0[buffSize - 6] = time_tick_calc_delay(tick_start, time_tick_get());
  402a4e:	f8d9 b000 	ldr.w	fp, [r9]
  402a52:	47c0      	blx	r8
  402a54:	4601      	mov	r1, r0
  402a56:	4658      	mov	r0, fp
  402a58:	47b8      	blx	r7
  402a5a:	4b4f      	ldr	r3, [pc, #316]	; (402b98 <main+0x4a0>)
  402a5c:	f843 000a 	str.w	r0, [r3, sl]
				imageBuffer0[buffSize - 7] = frameNumber - writeFrameNum;
  402a60:	4a4e      	ldr	r2, [pc, #312]	; (402b9c <main+0x4a4>)
  402a62:	6812      	ldr	r2, [r2, #0]
  402a64:	1b52      	subs	r2, r2, r5
  402a66:	494e      	ldr	r1, [pc, #312]	; (402ba0 <main+0x4a8>)
  402a68:	505a      	str	r2, [r3, r1]
				sd_mmc_start_write_blocks(&imageBuffer0[0], NB_BLOCKS_PER_WRITE);
  402a6a:	21de      	movs	r1, #222	; 0xde
  402a6c:	4618      	mov	r0, r3
  402a6e:	4b4d      	ldr	r3, [pc, #308]	; (402ba4 <main+0x4ac>)
  402a70:	4798      	blx	r3
					sd_mmc_start_write_blocks(&imageBuffer2[0], NB_BLOCKS_PER_WRITE);
					break;
				}			
			#endif

			sd_mmc_wait_end_of_write_blocks(false);
  402a72:	2000      	movs	r0, #0
  402a74:	4b4c      	ldr	r3, [pc, #304]	; (402ba8 <main+0x4b0>)
  402a76:	4798      	blx	r3
			writeFrameNum++;	
  402a78:	3501      	adds	r5, #1
			sdImageWriteFrameNum = writeFrameNum;
  402a7a:	4b4c      	ldr	r3, [pc, #304]	; (402bac <main+0x4b4>)
  402a7c:	601d      	str	r5, [r3, #0]
			#endif
			#ifdef EV76C454_SUBSAMP
				startRecording = 1;
			#endif
			#ifdef PYTHON480
				startRecording = 1;
  402a7e:	2201      	movs	r2, #1
  402a80:	4b4b      	ldr	r3, [pc, #300]	; (402bb0 <main+0x4b8>)
  402a82:	701a      	strb	r2, [r3, #0]
			#endif
			#ifdef EV76C454
				startRecording = 1;
			#endif
			
			if (writeFrameNum % 50 == 0)
  402a84:	4b4b      	ldr	r3, [pc, #300]	; (402bb4 <main+0x4bc>)
  402a86:	fba3 2305 	umull	r2, r3, r3, r5
  402a8a:	091b      	lsrs	r3, r3, #4
  402a8c:	2232      	movs	r2, #50	; 0x32
  402a8e:	fb02 5313 	mls	r3, r2, r3, r5
  402a92:	2b00      	cmp	r3, #0
  402a94:	d067      	beq.n	402b66 <main+0x46e>
				curBlock += 50 * NB_BLOCKS_PER_FRAME;
				sd_mmc_init_write_blocks(SD_SLOT_NB, curBlock, 50 * NB_BLOCKS_PER_FRAME);
			}
		}
		
		if (time_tick_calc_delay(tick_start, time_tick_get()) >= numFramesToRecord * 1000)
  402a96:	f8d9 b000 	ldr.w	fp, [r9]
  402a9a:	47c0      	blx	r8
  402a9c:	4601      	mov	r1, r0
  402a9e:	4658      	mov	r0, fp
  402aa0:	47b8      	blx	r7
  402aa2:	4b45      	ldr	r3, [pc, #276]	; (402bb8 <main+0x4c0>)
  402aa4:	681a      	ldr	r2, [r3, #0]
  402aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402aaa:	fb03 f302 	mul.w	r3, r3, r2
  402aae:	4298      	cmp	r0, r3
  402ab0:	d263      	bcs.n	402b7a <main+0x482>
			ioport_set_pin_level(LED_PIN, 0);
			ioport_set_pin_level(LED_ENT_PIN, 0);
			while (1)
			{}
		}
		testPoint = 0;						
  402ab2:	2200      	movs	r2, #0
  402ab4:	4b41      	ldr	r3, [pc, #260]	; (402bbc <main+0x4c4>)
  402ab6:	601a      	str	r2, [r3, #0]
		if (frameNumber > writeFrameNum) 
  402ab8:	4b38      	ldr	r3, [pc, #224]	; (402b9c <main+0x4a4>)
  402aba:	681b      	ldr	r3, [r3, #0]
  402abc:	429d      	cmp	r5, r3
  402abe:	d2ea      	bcs.n	402a96 <main+0x39e>
			if (recMode == 2)
  402ac0:	4b32      	ldr	r3, [pc, #200]	; (402b8c <main+0x494>)
  402ac2:	681b      	ldr	r3, [r3, #0]
  402ac4:	2b02      	cmp	r3, #2
  402ac6:	f43f af40 	beq.w	40294a <main+0x252>
			switch (writeFrameNum % 3)
  402aca:	4b3d      	ldr	r3, [pc, #244]	; (402bc0 <main+0x4c8>)
  402acc:	fba3 2305 	umull	r2, r3, r3, r5
  402ad0:	085b      	lsrs	r3, r3, #1
  402ad2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402ad6:	1aeb      	subs	r3, r5, r3
  402ad8:	2b01      	cmp	r3, #1
  402ada:	d023      	beq.n	402b24 <main+0x42c>
  402adc:	2b00      	cmp	r3, #0
  402ade:	d0ad      	beq.n	402a3c <main+0x344>
  402ae0:	2b02      	cmp	r3, #2
  402ae2:	d1c6      	bne.n	402a72 <main+0x37a>
				if (recMode == 2)
  402ae4:	4b29      	ldr	r3, [pc, #164]	; (402b8c <main+0x494>)
  402ae6:	681b      	ldr	r3, [r3, #0]
  402ae8:	2b02      	cmp	r3, #2
  402aea:	d038      	beq.n	402b5e <main+0x466>
					imageBuffer2[buffSize - 5] = focalLength;
  402aec:	4b28      	ldr	r3, [pc, #160]	; (402b90 <main+0x498>)
  402aee:	6819      	ldr	r1, [r3, #0]
  402af0:	4b28      	ldr	r3, [pc, #160]	; (402b94 <main+0x49c>)
  402af2:	4a34      	ldr	r2, [pc, #208]	; (402bc4 <main+0x4cc>)
  402af4:	50d1      	str	r1, [r2, r3]
				imageBuffer2[buffSize - 6] = time_tick_calc_delay(tick_start, time_tick_get());
  402af6:	f8d9 b000 	ldr.w	fp, [r9]
  402afa:	47c0      	blx	r8
  402afc:	4601      	mov	r1, r0
  402afe:	4658      	mov	r0, fp
  402b00:	47b8      	blx	r7
  402b02:	4b30      	ldr	r3, [pc, #192]	; (402bc4 <main+0x4cc>)
  402b04:	f843 000a 	str.w	r0, [r3, sl]
				imageBuffer2[buffSize - 7] = frameNumber - writeFrameNum;
  402b08:	4a24      	ldr	r2, [pc, #144]	; (402b9c <main+0x4a4>)
  402b0a:	6812      	ldr	r2, [r2, #0]
  402b0c:	1b52      	subs	r2, r2, r5
  402b0e:	4924      	ldr	r1, [pc, #144]	; (402ba0 <main+0x4a8>)
  402b10:	505a      	str	r2, [r3, r1]
				sd_mmc_start_write_blocks(&imageBuffer2[0], NB_BLOCKS_PER_WRITE);
  402b12:	21de      	movs	r1, #222	; 0xde
  402b14:	4618      	mov	r0, r3
  402b16:	4b23      	ldr	r3, [pc, #140]	; (402ba4 <main+0x4ac>)
  402b18:	4798      	blx	r3
				break;
  402b1a:	e7aa      	b.n	402a72 <main+0x37a>
					imageBuffer0[buffSize - 5] = voltageStep;
  402b1c:	4b1d      	ldr	r3, [pc, #116]	; (402b94 <main+0x49c>)
  402b1e:	4a1e      	ldr	r2, [pc, #120]	; (402b98 <main+0x4a0>)
  402b20:	50d4      	str	r4, [r2, r3]
  402b22:	e794      	b.n	402a4e <main+0x356>
				if (recMode == 2)
  402b24:	4b19      	ldr	r3, [pc, #100]	; (402b8c <main+0x494>)
  402b26:	681b      	ldr	r3, [r3, #0]
  402b28:	2b02      	cmp	r3, #2
  402b2a:	d015      	beq.n	402b58 <main+0x460>
					imageBuffer1[buffSize - 5] = focalLength;
  402b2c:	4b18      	ldr	r3, [pc, #96]	; (402b90 <main+0x498>)
  402b2e:	681a      	ldr	r2, [r3, #0]
  402b30:	4b18      	ldr	r3, [pc, #96]	; (402b94 <main+0x49c>)
  402b32:	50f2      	str	r2, [r6, r3]
				imageBuffer1[buffSize - 6] = time_tick_calc_delay(tick_start, time_tick_get());		// time when beginning to write to SD
  402b34:	f8d9 b000 	ldr.w	fp, [r9]
  402b38:	47c0      	blx	r8
  402b3a:	4601      	mov	r1, r0
  402b3c:	4658      	mov	r0, fp
  402b3e:	47b8      	blx	r7
  402b40:	9b01      	ldr	r3, [sp, #4]
  402b42:	6018      	str	r0, [r3, #0]
				imageBuffer1[buffSize - 7] = frameNumber - writeFrameNum;
  402b44:	4b15      	ldr	r3, [pc, #84]	; (402b9c <main+0x4a4>)
  402b46:	681b      	ldr	r3, [r3, #0]
  402b48:	1b5b      	subs	r3, r3, r5
  402b4a:	4a15      	ldr	r2, [pc, #84]	; (402ba0 <main+0x4a8>)
  402b4c:	50b3      	str	r3, [r6, r2]
				sd_mmc_start_write_blocks(&imageBuffer1[0], NB_BLOCKS_PER_WRITE);
  402b4e:	21de      	movs	r1, #222	; 0xde
  402b50:	4630      	mov	r0, r6
  402b52:	4b14      	ldr	r3, [pc, #80]	; (402ba4 <main+0x4ac>)
  402b54:	4798      	blx	r3
				break;
  402b56:	e78c      	b.n	402a72 <main+0x37a>
					imageBuffer1[buffSize - 5] = voltageStep;
  402b58:	4b0e      	ldr	r3, [pc, #56]	; (402b94 <main+0x49c>)
  402b5a:	50f4      	str	r4, [r6, r3]
  402b5c:	e7ea      	b.n	402b34 <main+0x43c>
					imageBuffer2[buffSize - 5] = voltageStep;
  402b5e:	4b0d      	ldr	r3, [pc, #52]	; (402b94 <main+0x49c>)
  402b60:	4a18      	ldr	r2, [pc, #96]	; (402bc4 <main+0x4cc>)
  402b62:	50d4      	str	r4, [r2, r3]
  402b64:	e7c7      	b.n	402af6 <main+0x3fe>
				curBlock += 50 * NB_BLOCKS_PER_FRAME;
  402b66:	f642 325c 	movw	r2, #11100	; 0x2b5c
  402b6a:	9b00      	ldr	r3, [sp, #0]
  402b6c:	4413      	add	r3, r2
  402b6e:	9300      	str	r3, [sp, #0]
				sd_mmc_init_write_blocks(SD_SLOT_NB, curBlock, 50 * NB_BLOCKS_PER_FRAME);
  402b70:	4619      	mov	r1, r3
  402b72:	2000      	movs	r0, #0
  402b74:	4b14      	ldr	r3, [pc, #80]	; (402bc8 <main+0x4d0>)
  402b76:	4798      	blx	r3
  402b78:	e78d      	b.n	402a96 <main+0x39e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402b7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402b7e:	4a13      	ldr	r2, [pc, #76]	; (402bcc <main+0x4d4>)
  402b80:	6353      	str	r3, [r2, #52]	; 0x34
  402b82:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  402b86:	6353      	str	r3, [r2, #52]	; 0x34
  402b88:	e7fe      	b.n	402b88 <main+0x490>
  402b8a:	bf00      	nop
  402b8c:	204538cc 	.word	0x204538cc
  402b90:	204004ac 	.word	0x204004ac
  402b94:	0001bbec 	.word	0x0001bbec
  402b98:	204004b8 	.word	0x204004b8
  402b9c:	204004b4 	.word	0x204004b4
  402ba0:	0001bbe4 	.word	0x0001bbe4
  402ba4:	00400b31 	.word	0x00400b31
  402ba8:	00400b59 	.word	0x00400b59
  402bac:	204538d4 	.word	0x204538d4
  402bb0:	204538d8 	.word	0x204538d8
  402bb4:	51eb851f 	.word	0x51eb851f
  402bb8:	204538c0 	.word	0x204538c0
  402bbc:	204538e0 	.word	0x204538e0
  402bc0:	aaaaaaab 	.word	0xaaaaaaab
  402bc4:	20437cb8 	.word	0x20437cb8
  402bc8:	00400aa5 	.word	0x00400aa5
  402bcc:	400e1400 	.word	0x400e1400

00402bd0 <miniscope_calibrate>:
	}
}


void miniscope_calibrate(uint32_t buffer[2])
{
  402bd0:	b530      	push	{r4, r5, lr}
  402bd2:	b087      	sub	sp, #28
	if (rx_buffer[0] == 1)					// Option 1 = LED brightness
  402bd4:	4b2e      	ldr	r3, [pc, #184]	; (402c90 <miniscope_calibrate+0xc0>)
  402bd6:	681b      	ldr	r3, [r3, #0]
  402bd8:	2b01      	cmp	r3, #1
  402bda:	d005      	beq.n	402be8 <miniscope_calibrate+0x18>
		
		while (twihs_master_write(TWIHS1, &p_LED_cal) != TWIHS_SUCCESS)
		{}
	}
	
	else if (rx_buffer[0] == 2)				// Option 2 = EWL focal length
  402bdc:	2b02      	cmp	r3, #2
  402bde:	d022      	beq.n	402c26 <miniscope_calibrate+0x56>
		
		while (twihs_master_write(TWIHS1, &p_EWL_cal) != TWIHS_SUCCESS)
		{}
	}
	
	else if (rx_buffer[0] == 3)				// Option 3 = image sensor gain
  402be0:	2b03      	cmp	r3, #3
  402be2:	d03d      	beq.n	402c60 <miniscope_calibrate+0x90>
		else if (rx_buffer[1] == 3)
		{
			SPI_Write(204, 0x0024); 			// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
		}
	}
}
  402be4:	b007      	add	sp, #28
  402be6:	bd30      	pop	{r4, r5, pc}
		ledValue = rx_buffer[1];
  402be8:	4b29      	ldr	r3, [pc, #164]	; (402c90 <miniscope_calibrate+0xc0>)
  402bea:	685a      	ldr	r2, [r3, #4]
  402bec:	4b29      	ldr	r3, [pc, #164]	; (402c94 <miniscope_calibrate+0xc4>)
  402bee:	601a      	str	r2, [r3, #0]
		p_LED_cal.chip = POTENTIOMETER_ADR;		// This is the slave address
  402bf0:	2250      	movs	r2, #80	; 0x50
  402bf2:	f88d 2014 	strb.w	r2, [sp, #20]
		p_LED_cal.addr[0] = 0x00;				// This is register address for potentiometer A.
  402bf6:	2200      	movs	r2, #0
  402bf8:	f88d 2004 	strb.w	r2, [sp, #4]
		p_LED_cal.addr_length = 1;				// The register value didn't use to get sent without this..but now it does
  402bfc:	2201      	movs	r2, #1
  402bfe:	9202      	str	r2, [sp, #8]
		led_buff[0] = 114;
  402c00:	2272      	movs	r2, #114	; 0x72
  402c02:	f88d 2000 	strb.w	r2, [sp]
		led_buff[1] = 0xFF - ledValue;			// Make sure the LED value makes sense/between 0 and 255
  402c06:	681b      	ldr	r3, [r3, #0]
  402c08:	43db      	mvns	r3, r3
  402c0a:	f88d 3001 	strb.w	r3, [sp, #1]
		p_LED_cal.buffer = (uint8_t *) led_buff;	// Location of the value to send
  402c0e:	f8cd d00c 	str.w	sp, [sp, #12]
		p_LED_cal.length = 2;
  402c12:	2302      	movs	r3, #2
  402c14:	9304      	str	r3, [sp, #16]
		while (twihs_master_write(TWIHS1, &p_LED_cal) != TWIHS_SUCCESS)
  402c16:	4d20      	ldr	r5, [pc, #128]	; (402c98 <miniscope_calibrate+0xc8>)
  402c18:	4c20      	ldr	r4, [pc, #128]	; (402c9c <miniscope_calibrate+0xcc>)
  402c1a:	a901      	add	r1, sp, #4
  402c1c:	4628      	mov	r0, r5
  402c1e:	47a0      	blx	r4
  402c20:	2800      	cmp	r0, #0
  402c22:	d1fa      	bne.n	402c1a <miniscope_calibrate+0x4a>
  402c24:	e7de      	b.n	402be4 <miniscope_calibrate+0x14>
		focalLength = rx_buffer[2];
  402c26:	4b1a      	ldr	r3, [pc, #104]	; (402c90 <miniscope_calibrate+0xc0>)
  402c28:	689a      	ldr	r2, [r3, #8]
  402c2a:	4b1d      	ldr	r3, [pc, #116]	; (402ca0 <miniscope_calibrate+0xd0>)
  402c2c:	601a      	str	r2, [r3, #0]
		p_EWL_cal.chip = HE_EWL_DRIVER_ADR;		// 0b 0111 0111
  402c2e:	2223      	movs	r2, #35	; 0x23
  402c30:	f88d 2014 	strb.w	r2, [sp, #20]
		p_EWL_cal.addr[0] = 0x08;
  402c34:	2208      	movs	r2, #8
  402c36:	f88d 2004 	strb.w	r2, [sp, #4]
		p_EWL_cal.addr_length = 1;
  402c3a:	2201      	movs	r2, #1
  402c3c:	9202      	str	r2, [sp, #8]
		EWL_focus_buff[0] = focalLength;
  402c3e:	681b      	ldr	r3, [r3, #0]
  402c40:	f88d 3000 	strb.w	r3, [sp]
		EWL_focus_buff[1] = 0x02;
  402c44:	2302      	movs	r3, #2
  402c46:	f88d 3001 	strb.w	r3, [sp, #1]
		p_EWL_cal.buffer = (uint8_t *) EWL_focus_buff;
  402c4a:	f8cd d00c 	str.w	sp, [sp, #12]
		p_EWL_cal.length = 2;
  402c4e:	9304      	str	r3, [sp, #16]
		while (twihs_master_write(TWIHS1, &p_EWL_cal) != TWIHS_SUCCESS)
  402c50:	4d11      	ldr	r5, [pc, #68]	; (402c98 <miniscope_calibrate+0xc8>)
  402c52:	4c12      	ldr	r4, [pc, #72]	; (402c9c <miniscope_calibrate+0xcc>)
  402c54:	a901      	add	r1, sp, #4
  402c56:	4628      	mov	r0, r5
  402c58:	47a0      	blx	r4
  402c5a:	2800      	cmp	r0, #0
  402c5c:	d1fa      	bne.n	402c54 <miniscope_calibrate+0x84>
  402c5e:	e7c1      	b.n	402be4 <miniscope_calibrate+0x14>
		if (rx_buffer[1] == 1)
  402c60:	4b0b      	ldr	r3, [pc, #44]	; (402c90 <miniscope_calibrate+0xc0>)
  402c62:	685b      	ldr	r3, [r3, #4]
  402c64:	2b01      	cmp	r3, #1
  402c66:	d008      	beq.n	402c7a <miniscope_calibrate+0xaa>
		else if (rx_buffer[1] == 2)
  402c68:	2b02      	cmp	r3, #2
  402c6a:	d00b      	beq.n	402c84 <miniscope_calibrate+0xb4>
		else if (rx_buffer[1] == 3)
  402c6c:	2b03      	cmp	r3, #3
  402c6e:	d1b9      	bne.n	402be4 <miniscope_calibrate+0x14>
			SPI_Write(204, 0x0024); 			// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  402c70:	2124      	movs	r1, #36	; 0x24
  402c72:	20cc      	movs	r0, #204	; 0xcc
  402c74:	4b0b      	ldr	r3, [pc, #44]	; (402ca4 <miniscope_calibrate+0xd4>)
  402c76:	4798      	blx	r3
}
  402c78:	e7b4      	b.n	402be4 <miniscope_calibrate+0x14>
			SPI_Write(204, 0x00E1); 			// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  402c7a:	21e1      	movs	r1, #225	; 0xe1
  402c7c:	20cc      	movs	r0, #204	; 0xcc
  402c7e:	4b09      	ldr	r3, [pc, #36]	; (402ca4 <miniscope_calibrate+0xd4>)
  402c80:	4798      	blx	r3
  402c82:	e7af      	b.n	402be4 <miniscope_calibrate+0x14>
			SPI_Write(204, 0x00E4); 			// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  402c84:	21e4      	movs	r1, #228	; 0xe4
  402c86:	20cc      	movs	r0, #204	; 0xcc
  402c88:	4b06      	ldr	r3, [pc, #24]	; (402ca4 <miniscope_calibrate+0xd4>)
  402c8a:	4798      	blx	r3
  402c8c:	e7aa      	b.n	402be4 <miniscope_calibrate+0x14>
  402c8e:	bf00      	nop
  402c90:	20453900 	.word	0x20453900
  402c94:	204538b8 	.word	0x204538b8
  402c98:	4001c000 	.word	0x4001c000
  402c9c:	00401c91 	.word	0x00401c91
  402ca0:	204004ac 	.word	0x204004ac
  402ca4:	00401819 	.word	0x00401819

00402ca8 <USART2_Handler>:


/** UART interrupt handler
/*  Receives data from UART into a 2-word buffer, then calibrates Miniscope when both elements are fully written */
void USART_ISR_HANDLER(void)
{
  402ca8:	b570      	push	{r4, r5, r6, lr}
  402caa:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART2);
  402cac:	481e      	ldr	r0, [pc, #120]	; (402d28 <USART2_Handler+0x80>)
  402cae:	4b1f      	ldr	r3, [pc, #124]	; (402d2c <USART2_Handler+0x84>)
  402cb0:	4798      	blx	r3

	if (dw_status & US_CSR_RXRDY)
  402cb2:	f010 0f01 	tst.w	r0, #1
  402cb6:	d101      	bne.n	402cbc <USART2_Handler+0x14>
			}
			
			rx_location = (rx_location + 1) % 2;	// Move between address & value
		}
	}
  402cb8:	b002      	add	sp, #8
  402cba:	bd70      	pop	{r4, r5, r6, pc}
		usart_read(USART2, &received_byte);
  402cbc:	a901      	add	r1, sp, #4
  402cbe:	481a      	ldr	r0, [pc, #104]	; (402d28 <USART2_Handler+0x80>)
  402cc0:	4b1b      	ldr	r3, [pc, #108]	; (402d30 <USART2_Handler+0x88>)
  402cc2:	4798      	blx	r3
		rx_buffer[rx_location] = (rx_buffer[rx_location] & ~(0xFF << (8 * (3 - rx_letter)))) | (received_byte << (8 * (3 - rx_letter)));		// Writes from MSB to LSB, 8 bits at a time
  402cc4:	4b1b      	ldr	r3, [pc, #108]	; (402d34 <USART2_Handler+0x8c>)
  402cc6:	781c      	ldrb	r4, [r3, #0]
  402cc8:	4d1b      	ldr	r5, [pc, #108]	; (402d38 <USART2_Handler+0x90>)
  402cca:	782b      	ldrb	r3, [r5, #0]
  402ccc:	f1c3 0103 	rsb	r1, r3, #3
  402cd0:	00c9      	lsls	r1, r1, #3
  402cd2:	4e1a      	ldr	r6, [pc, #104]	; (402d3c <USART2_Handler+0x94>)
  402cd4:	22ff      	movs	r2, #255	; 0xff
  402cd6:	fa02 f001 	lsl.w	r0, r2, r1
  402cda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402cde:	ea22 0200 	bic.w	r2, r2, r0
  402ce2:	9801      	ldr	r0, [sp, #4]
  402ce4:	fa00 f101 	lsl.w	r1, r0, r1
  402ce8:	430a      	orrs	r2, r1
  402cea:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
		rx_letter = (rx_letter + 1) % 4;		// Move 8 bits to the right (towards LSB)
  402cee:	3301      	adds	r3, #1
  402cf0:	425a      	negs	r2, r3
  402cf2:	f003 0303 	and.w	r3, r3, #3
  402cf6:	f002 0203 	and.w	r2, r2, #3
  402cfa:	bf58      	it	pl
  402cfc:	4253      	negpl	r3, r2
  402cfe:	b2db      	uxtb	r3, r3
  402d00:	702b      	strb	r3, [r5, #0]
		if (rx_letter % 4 == 0)					// If an entire word is written
  402d02:	f013 0f03 	tst.w	r3, #3
  402d06:	d1d7      	bne.n	402cb8 <USART2_Handler+0x10>
			if (rx_location == 1)					// and if it's the second word (both address & value received)
  402d08:	2c01      	cmp	r4, #1
  402d0a:	d008      	beq.n	402d1e <USART2_Handler+0x76>
			rx_location = (rx_location + 1) % 2;	// Move between address & value
  402d0c:	4a09      	ldr	r2, [pc, #36]	; (402d34 <USART2_Handler+0x8c>)
  402d0e:	7813      	ldrb	r3, [r2, #0]
  402d10:	3301      	adds	r3, #1
  402d12:	f003 0301 	and.w	r3, r3, #1
  402d16:	bf48      	it	mi
  402d18:	425b      	negmi	r3, r3
  402d1a:	7013      	strb	r3, [r2, #0]
  402d1c:	e7cc      	b.n	402cb8 <USART2_Handler+0x10>
				miniscope_calibrate(rx_buffer);		// Calibrate the Miniscope
  402d1e:	4630      	mov	r0, r6
  402d20:	4b07      	ldr	r3, [pc, #28]	; (402d40 <USART2_Handler+0x98>)
  402d22:	4798      	blx	r3
  402d24:	e7f2      	b.n	402d0c <USART2_Handler+0x64>
  402d26:	bf00      	nop
  402d28:	4002c000 	.word	0x4002c000
  402d2c:	0040119d 	.word	0x0040119d
  402d30:	004011a1 	.word	0x004011a1
  402d34:	204538d1 	.word	0x204538d1
  402d38:	204538d0 	.word	0x204538d0
  402d3c:	20453900 	.word	0x20453900
  402d40:	00402bd1 	.word	0x00402bd1

00402d44 <__libc_init_array>:
  402d44:	b570      	push	{r4, r5, r6, lr}
  402d46:	4e0f      	ldr	r6, [pc, #60]	; (402d84 <__libc_init_array+0x40>)
  402d48:	4d0f      	ldr	r5, [pc, #60]	; (402d88 <__libc_init_array+0x44>)
  402d4a:	1b76      	subs	r6, r6, r5
  402d4c:	10b6      	asrs	r6, r6, #2
  402d4e:	bf18      	it	ne
  402d50:	2400      	movne	r4, #0
  402d52:	d005      	beq.n	402d60 <__libc_init_array+0x1c>
  402d54:	3401      	adds	r4, #1
  402d56:	f855 3b04 	ldr.w	r3, [r5], #4
  402d5a:	4798      	blx	r3
  402d5c:	42a6      	cmp	r6, r4
  402d5e:	d1f9      	bne.n	402d54 <__libc_init_array+0x10>
  402d60:	4e0a      	ldr	r6, [pc, #40]	; (402d8c <__libc_init_array+0x48>)
  402d62:	4d0b      	ldr	r5, [pc, #44]	; (402d90 <__libc_init_array+0x4c>)
  402d64:	1b76      	subs	r6, r6, r5
  402d66:	f000 f943 	bl	402ff0 <_init>
  402d6a:	10b6      	asrs	r6, r6, #2
  402d6c:	bf18      	it	ne
  402d6e:	2400      	movne	r4, #0
  402d70:	d006      	beq.n	402d80 <__libc_init_array+0x3c>
  402d72:	3401      	adds	r4, #1
  402d74:	f855 3b04 	ldr.w	r3, [r5], #4
  402d78:	4798      	blx	r3
  402d7a:	42a6      	cmp	r6, r4
  402d7c:	d1f9      	bne.n	402d72 <__libc_init_array+0x2e>
  402d7e:	bd70      	pop	{r4, r5, r6, pc}
  402d80:	bd70      	pop	{r4, r5, r6, pc}
  402d82:	bf00      	nop
  402d84:	00402ffc 	.word	0x00402ffc
  402d88:	00402ffc 	.word	0x00402ffc
  402d8c:	00403004 	.word	0x00403004
  402d90:	00402ffc 	.word	0x00402ffc

00402d94 <memset>:
  402d94:	b470      	push	{r4, r5, r6}
  402d96:	0786      	lsls	r6, r0, #30
  402d98:	d046      	beq.n	402e28 <memset+0x94>
  402d9a:	1e54      	subs	r4, r2, #1
  402d9c:	2a00      	cmp	r2, #0
  402d9e:	d041      	beq.n	402e24 <memset+0x90>
  402da0:	b2ca      	uxtb	r2, r1
  402da2:	4603      	mov	r3, r0
  402da4:	e002      	b.n	402dac <memset+0x18>
  402da6:	f114 34ff 	adds.w	r4, r4, #4294967295
  402daa:	d33b      	bcc.n	402e24 <memset+0x90>
  402dac:	f803 2b01 	strb.w	r2, [r3], #1
  402db0:	079d      	lsls	r5, r3, #30
  402db2:	d1f8      	bne.n	402da6 <memset+0x12>
  402db4:	2c03      	cmp	r4, #3
  402db6:	d92e      	bls.n	402e16 <memset+0x82>
  402db8:	b2cd      	uxtb	r5, r1
  402dba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402dbe:	2c0f      	cmp	r4, #15
  402dc0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402dc4:	d919      	bls.n	402dfa <memset+0x66>
  402dc6:	f103 0210 	add.w	r2, r3, #16
  402dca:	4626      	mov	r6, r4
  402dcc:	3e10      	subs	r6, #16
  402dce:	2e0f      	cmp	r6, #15
  402dd0:	f842 5c10 	str.w	r5, [r2, #-16]
  402dd4:	f842 5c0c 	str.w	r5, [r2, #-12]
  402dd8:	f842 5c08 	str.w	r5, [r2, #-8]
  402ddc:	f842 5c04 	str.w	r5, [r2, #-4]
  402de0:	f102 0210 	add.w	r2, r2, #16
  402de4:	d8f2      	bhi.n	402dcc <memset+0x38>
  402de6:	f1a4 0210 	sub.w	r2, r4, #16
  402dea:	f022 020f 	bic.w	r2, r2, #15
  402dee:	f004 040f 	and.w	r4, r4, #15
  402df2:	3210      	adds	r2, #16
  402df4:	2c03      	cmp	r4, #3
  402df6:	4413      	add	r3, r2
  402df8:	d90d      	bls.n	402e16 <memset+0x82>
  402dfa:	461e      	mov	r6, r3
  402dfc:	4622      	mov	r2, r4
  402dfe:	3a04      	subs	r2, #4
  402e00:	2a03      	cmp	r2, #3
  402e02:	f846 5b04 	str.w	r5, [r6], #4
  402e06:	d8fa      	bhi.n	402dfe <memset+0x6a>
  402e08:	1f22      	subs	r2, r4, #4
  402e0a:	f022 0203 	bic.w	r2, r2, #3
  402e0e:	3204      	adds	r2, #4
  402e10:	4413      	add	r3, r2
  402e12:	f004 0403 	and.w	r4, r4, #3
  402e16:	b12c      	cbz	r4, 402e24 <memset+0x90>
  402e18:	b2c9      	uxtb	r1, r1
  402e1a:	441c      	add	r4, r3
  402e1c:	f803 1b01 	strb.w	r1, [r3], #1
  402e20:	429c      	cmp	r4, r3
  402e22:	d1fb      	bne.n	402e1c <memset+0x88>
  402e24:	bc70      	pop	{r4, r5, r6}
  402e26:	4770      	bx	lr
  402e28:	4614      	mov	r4, r2
  402e2a:	4603      	mov	r3, r0
  402e2c:	e7c2      	b.n	402db4 <memset+0x20>
  402e2e:	bf00      	nop

00402e30 <register_fini>:
  402e30:	4b02      	ldr	r3, [pc, #8]	; (402e3c <register_fini+0xc>)
  402e32:	b113      	cbz	r3, 402e3a <register_fini+0xa>
  402e34:	4802      	ldr	r0, [pc, #8]	; (402e40 <register_fini+0x10>)
  402e36:	f000 b805 	b.w	402e44 <atexit>
  402e3a:	4770      	bx	lr
  402e3c:	00000000 	.word	0x00000000
  402e40:	00402e51 	.word	0x00402e51

00402e44 <atexit>:
  402e44:	2300      	movs	r3, #0
  402e46:	4601      	mov	r1, r0
  402e48:	461a      	mov	r2, r3
  402e4a:	4618      	mov	r0, r3
  402e4c:	f000 b81e 	b.w	402e8c <__register_exitproc>

00402e50 <__libc_fini_array>:
  402e50:	b538      	push	{r3, r4, r5, lr}
  402e52:	4c0a      	ldr	r4, [pc, #40]	; (402e7c <__libc_fini_array+0x2c>)
  402e54:	4d0a      	ldr	r5, [pc, #40]	; (402e80 <__libc_fini_array+0x30>)
  402e56:	1b64      	subs	r4, r4, r5
  402e58:	10a4      	asrs	r4, r4, #2
  402e5a:	d00a      	beq.n	402e72 <__libc_fini_array+0x22>
  402e5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402e60:	3b01      	subs	r3, #1
  402e62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402e66:	3c01      	subs	r4, #1
  402e68:	f855 3904 	ldr.w	r3, [r5], #-4
  402e6c:	4798      	blx	r3
  402e6e:	2c00      	cmp	r4, #0
  402e70:	d1f9      	bne.n	402e66 <__libc_fini_array+0x16>
  402e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402e76:	f000 b8c5 	b.w	403004 <_fini>
  402e7a:	bf00      	nop
  402e7c:	00403014 	.word	0x00403014
  402e80:	00403010 	.word	0x00403010

00402e84 <__retarget_lock_acquire_recursive>:
  402e84:	4770      	bx	lr
  402e86:	bf00      	nop

00402e88 <__retarget_lock_release_recursive>:
  402e88:	4770      	bx	lr
  402e8a:	bf00      	nop

00402e8c <__register_exitproc>:
  402e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e90:	4d2c      	ldr	r5, [pc, #176]	; (402f44 <__register_exitproc+0xb8>)
  402e92:	4606      	mov	r6, r0
  402e94:	6828      	ldr	r0, [r5, #0]
  402e96:	4698      	mov	r8, r3
  402e98:	460f      	mov	r7, r1
  402e9a:	4691      	mov	r9, r2
  402e9c:	f7ff fff2 	bl	402e84 <__retarget_lock_acquire_recursive>
  402ea0:	4b29      	ldr	r3, [pc, #164]	; (402f48 <__register_exitproc+0xbc>)
  402ea2:	681c      	ldr	r4, [r3, #0]
  402ea4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402ea8:	2b00      	cmp	r3, #0
  402eaa:	d03e      	beq.n	402f2a <__register_exitproc+0x9e>
  402eac:	685a      	ldr	r2, [r3, #4]
  402eae:	2a1f      	cmp	r2, #31
  402eb0:	dc1c      	bgt.n	402eec <__register_exitproc+0x60>
  402eb2:	f102 0e01 	add.w	lr, r2, #1
  402eb6:	b176      	cbz	r6, 402ed6 <__register_exitproc+0x4a>
  402eb8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402ebc:	2401      	movs	r4, #1
  402ebe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402ec2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402ec6:	4094      	lsls	r4, r2
  402ec8:	4320      	orrs	r0, r4
  402eca:	2e02      	cmp	r6, #2
  402ecc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402ed0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402ed4:	d023      	beq.n	402f1e <__register_exitproc+0x92>
  402ed6:	3202      	adds	r2, #2
  402ed8:	f8c3 e004 	str.w	lr, [r3, #4]
  402edc:	6828      	ldr	r0, [r5, #0]
  402ede:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402ee2:	f7ff ffd1 	bl	402e88 <__retarget_lock_release_recursive>
  402ee6:	2000      	movs	r0, #0
  402ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402eec:	4b17      	ldr	r3, [pc, #92]	; (402f4c <__register_exitproc+0xc0>)
  402eee:	b30b      	cbz	r3, 402f34 <__register_exitproc+0xa8>
  402ef0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402ef4:	f3af 8000 	nop.w
  402ef8:	4603      	mov	r3, r0
  402efa:	b1d8      	cbz	r0, 402f34 <__register_exitproc+0xa8>
  402efc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402f00:	6002      	str	r2, [r0, #0]
  402f02:	2100      	movs	r1, #0
  402f04:	6041      	str	r1, [r0, #4]
  402f06:	460a      	mov	r2, r1
  402f08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402f0c:	f04f 0e01 	mov.w	lr, #1
  402f10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402f14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402f18:	2e00      	cmp	r6, #0
  402f1a:	d0dc      	beq.n	402ed6 <__register_exitproc+0x4a>
  402f1c:	e7cc      	b.n	402eb8 <__register_exitproc+0x2c>
  402f1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402f22:	430c      	orrs	r4, r1
  402f24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402f28:	e7d5      	b.n	402ed6 <__register_exitproc+0x4a>
  402f2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402f2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402f32:	e7bb      	b.n	402eac <__register_exitproc+0x20>
  402f34:	6828      	ldr	r0, [r5, #0]
  402f36:	f7ff ffa7 	bl	402e88 <__retarget_lock_release_recursive>
  402f3a:	f04f 30ff 	mov.w	r0, #4294967295
  402f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f42:	bf00      	nop
  402f44:	20400448 	.word	0x20400448
  402f48:	00402fec 	.word	0x00402fec
  402f4c:	00000000 	.word	0x00000000

00402f50 <mmc_trans_multipliers>:
  402f50:	00000000 0000000a 0000000c 0000000d     ................
  402f60:	0000000f 00000014 0000001a 0000001e     ................
  402f70:	00000023 00000028 0000002d 00000034     #...(...-...4...
  402f80:	00000037 0000003c 00000046 00000050     7...<...F...P...

00402f90 <sd_mmc_trans_units>:
  402f90:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00402fac <sd_trans_multipliers>:
  402fac:	00000000 0000000a 0000000c 0000000d     ................
  402fbc:	0000000f 00000014 00000019 0000001e     ................
  402fcc:	00000023 00000028 0000002d 00000032     #...(...-...2...
  402fdc:	00000037 0000003c 00000046 00000050     7...<...F...P...

00402fec <_global_impure_ptr>:
  402fec:	20400020                                 .@ 

00402ff0 <_init>:
  402ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ff2:	bf00      	nop
  402ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402ff6:	bc08      	pop	{r3}
  402ff8:	469e      	mov	lr, r3
  402ffa:	4770      	bx	lr

00402ffc <__init_array_start>:
  402ffc:	00402e31 	.word	0x00402e31

00403000 <__frame_dummy_init_array_entry>:
  403000:	00400165                                e.@.

00403004 <_fini>:
  403004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403006:	bf00      	nop
  403008:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40300a:	bc08      	pop	{r3}
  40300c:	469e      	mov	lr, r3
  40300e:	4770      	bx	lr

00403010 <__fini_array_start>:
  403010:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <focusMax>:
20400010:	00ff 0000                                   ....

20400014 <focusStepLen>:
20400014:	0005 0000                                   ....

20400018 <focusSteps>:
20400018:	0010 0000                                   ....

2040001c <gain>:
2040001c:	0001 0000                                   ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	3914 2045                                   .9E 
