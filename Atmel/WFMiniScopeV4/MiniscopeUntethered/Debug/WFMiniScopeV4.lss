
WFMiniScopeV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002570  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20400000  00402570  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0001d5ec  20400448  004029b8  00020444  2**3
                  ALLOC
  3 .stack        00002004  2041da34  0041ffa4  00020444  2**0
                  ALLOC
  4 .heap         00000200  2041fa38  00421fa8  00020444  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001eb09  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d07  00000000  00000000  0003efd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000069aa  00000000  00000000  00042cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a48  00000000  00000000  00049685  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cd0  00000000  00000000  0004a0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020bcf  00000000  00000000  0004ad9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010c91  00000000  00000000  0006b96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089ef9  00000000  00000000  0007c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001844  00000000  00000000  001064f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 fa 41 20 7d 1d 40 00 79 1d 40 00 79 1d 40 00     8.A }.@.y.@.y.@.
  400010:	79 1d 40 00 79 1d 40 00 79 1d 40 00 00 00 00 00     y.@.y.@.y.@.....
	...
  40002c:	79 1d 40 00 79 1d 40 00 00 00 00 00 79 1d 40 00     y.@.y.@.....y.@.
  40003c:	ad 19 40 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     ..@.y.@.y.@.y.@.
  40004c:	79 1d 40 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     y.@.y.@.y.@.y.@.
  40005c:	79 1d 40 00 79 1d 40 00 00 00 00 00 95 17 40 00     y.@.y.@.......@.
  40006c:	ad 0f 40 00 00 00 00 00 79 1d 40 00 79 1d 40 00     ..@.....y.@.y.@.
  40007c:	79 1d 40 00 c1 0f 40 00 00 00 00 00 79 1d 40 00     y.@...@.....y.@.
  40008c:	79 1d 40 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     y.@.y.@.y.@.y.@.
  40009c:	79 1d 40 00 79 1d 40 00 79 1d 40 00 00 00 00 00     y.@.y.@.y.@.....
	...
  4000b4:	79 1d 40 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     y.@.y.@.y.@.y.@.
  4000c4:	79 1d 40 00 79 1d 40 00 79 1d 40 00 00 00 00 00     y.@.y.@.y.@.....
  4000d4:	79 1d 40 00 00 00 00 00 79 1d 40 00 79 1d 40 00     y.@.....y.@.y.@.
  4000e4:	79 1d 40 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     y.@.y.@.y.@.y.@.
  4000f4:	79 1d 40 00 79 1d 40 00 00 00 00 00 00 00 00 00     y.@.y.@.........
  400104:	00 00 00 00 79 1d 40 00 79 1d 40 00 79 1d 40 00     ....y.@.y.@.y.@.
	...
  400120:	79 1d 40 00 79 1d 40 00 d5 17 40 00 79 1d 40 00     y.@.y.@...@.y.@.
  400130:	79 1d 40 00 00 00 00 00 00 00 00 00 79 1d 40 00     y.@.........y.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400448 	.word	0x20400448
  40015c:	00000000 	.word	0x00000000
  400160:	00402570 	.word	0x00402570

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402570 	.word	0x00402570
  4001a0:	2040044c 	.word	0x2040044c
  4001a4:	00402570 	.word	0x00402570
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4001ac:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	20400464 	.word	0x20400464
  4001cc:	2040048c 	.word	0x2040048c
  4001d0:	00400b65 	.word	0x00400b65

004001d4 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	20400468 	.word	0x20400468
  40021c:	2040048c 	.word	0x2040048c
  400220:	20400464 	.word	0x20400464
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
{
  40022c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
}
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
	return true;
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	20400464 	.word	0x20400464
  400258:	00400bf9 	.word	0x00400bf9
  40025c:	00400c25 	.word	0x00400c25

00400260 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400260:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
	}
}
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	2040048c 	.word	0x2040048c
  400278:	00400bd5 	.word	0x00400bd5

0040027c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40027c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
	driver_init();
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20400468 	.word	0x20400468
  400294:	2040048c 	.word	0x2040048c
  400298:	00400b29 	.word	0x00400b29

0040029c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4002a2:	4b8a      	ldr	r3, [pc, #552]	; (4004cc <sd_mmc_check+0x230>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  4002ac:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <sd_mmc_check+0x234>)
  4002ae:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b8:	4b86      	ldr	r3, [pc, #536]	; (4004d4 <sd_mmc_check+0x238>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002c4:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4002c6:	4b84      	ldr	r3, [pc, #528]	; (4004d8 <sd_mmc_check+0x23c>)
  4002c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002ca:	4629      	mov	r1, r5
  4002cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d0:	4b82      	ldr	r3, [pc, #520]	; (4004dc <sd_mmc_check+0x240>)
  4002d2:	4798      	blx	r3
  4002d4:	b930      	cbnz	r0, 4002e4 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002d6:	4b7f      	ldr	r3, [pc, #508]	; (4004d4 <sd_mmc_check+0x238>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	2403      	movs	r4, #3
  4002dc:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002de:	4b7c      	ldr	r3, [pc, #496]	; (4004d0 <sd_mmc_check+0x234>)
  4002e0:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002e2:	e7e5      	b.n	4002b0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002e8:	f245 5008 	movw	r0, #21768	; 0x5508
  4002ec:	4b7b      	ldr	r3, [pc, #492]	; (4004dc <sd_mmc_check+0x240>)
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	f040 8090 	bne.w	400416 <sd_mmc_check+0x17a>
	*v2 = 0;
  4002f6:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4002f8:	4b76      	ldr	r3, [pc, #472]	; (4004d4 <sd_mmc_check+0x238>)
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	7adb      	ldrb	r3, [r3, #11]
  4002fe:	f013 0f01 	tst.w	r3, #1
  400302:	f040 82a7 	bne.w	400854 <sd_mmc_check+0x5b8>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400306:	2100      	movs	r1, #0
  400308:	f245 1003 	movw	r0, #20739	; 0x5103
  40030c:	4b73      	ldr	r3, [pc, #460]	; (4004dc <sd_mmc_check+0x240>)
  40030e:	4798      	blx	r3
  400310:	2800      	cmp	r0, #0
  400312:	d0e0      	beq.n	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400314:	4d6f      	ldr	r5, [pc, #444]	; (4004d4 <sd_mmc_check+0x238>)
  400316:	682e      	ldr	r6, [r5, #0]
  400318:	4b71      	ldr	r3, [pc, #452]	; (4004e0 <sd_mmc_check+0x244>)
  40031a:	4798      	blx	r3
  40031c:	0c00      	lsrs	r0, r0, #16
  40031e:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400320:	682b      	ldr	r3, [r5, #0]
  400322:	7adb      	ldrb	r3, [r3, #11]
  400324:	f013 0f01 	tst.w	r3, #1
  400328:	d034      	beq.n	400394 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40032a:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <sd_mmc_check+0x248>)
  40032c:	4798      	blx	r3
  40032e:	2800      	cmp	r0, #0
  400330:	d0d1      	beq.n	4002d6 <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400332:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400334:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400336:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40033a:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40033e:	496a      	ldr	r1, [pc, #424]	; (4004e8 <sd_mmc_check+0x24c>)
  400340:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f201 	mul.w	r2, r2, r1
  40034c:	4967      	ldr	r1, [pc, #412]	; (4004ec <sd_mmc_check+0x250>)
  40034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400352:	fb02 f201 	mul.w	r2, r2, r1
  400356:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400358:	7b9a      	ldrb	r2, [r3, #14]
  40035a:	0992      	lsrs	r2, r2, #6
  40035c:	f040 81b3 	bne.w	4006c6 <sd_mmc_check+0x42a>
  400360:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400362:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400364:	7d1a      	ldrb	r2, [r3, #20]
  400366:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400368:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40036c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400370:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400372:	7dd9      	ldrb	r1, [r3, #23]
  400374:	0049      	lsls	r1, r1, #1
  400376:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40037e:	3201      	adds	r2, #1
  400380:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400384:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400386:	408a      	lsls	r2, r1
  400388:	7cd9      	ldrb	r1, [r3, #19]
  40038a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40038e:	408a      	lsls	r2, r1
				/ 1024;
  400390:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400392:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400394:	4b4f      	ldr	r3, [pc, #316]	; (4004d4 <sd_mmc_check+0x238>)
  400396:	681b      	ldr	r3, [r3, #0]
  400398:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40039a:	0409      	lsls	r1, r1, #16
  40039c:	f243 1007 	movw	r0, #12551	; 0x3107
  4003a0:	4b4e      	ldr	r3, [pc, #312]	; (4004dc <sd_mmc_check+0x240>)
  4003a2:	4798      	blx	r3
  4003a4:	2800      	cmp	r0, #0
  4003a6:	d096      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003a8:	4b4a      	ldr	r3, [pc, #296]	; (4004d4 <sd_mmc_check+0x238>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	7ada      	ldrb	r2, [r3, #11]
  4003ae:	f012 0f01 	tst.w	r2, #1
  4003b2:	f000 8199 	beq.w	4006e8 <sd_mmc_check+0x44c>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4003b6:	8919      	ldrh	r1, [r3, #8]
  4003b8:	0409      	lsls	r1, r1, #16
  4003ba:	f241 1037 	movw	r0, #4407	; 0x1137
  4003be:	4b47      	ldr	r3, [pc, #284]	; (4004dc <sd_mmc_check+0x240>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d087      	beq.n	4002d6 <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4003c6:	2301      	movs	r3, #1
  4003c8:	9300      	str	r3, [sp, #0]
  4003ca:	2208      	movs	r2, #8
  4003cc:	2100      	movs	r1, #0
  4003ce:	4848      	ldr	r0, [pc, #288]	; (4004f0 <sd_mmc_check+0x254>)
  4003d0:	4d48      	ldr	r5, [pc, #288]	; (4004f4 <sd_mmc_check+0x258>)
  4003d2:	47a8      	blx	r5
  4003d4:	2800      	cmp	r0, #0
  4003d6:	f43f af7e 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  4003da:	2101      	movs	r1, #1
  4003dc:	a804      	add	r0, sp, #16
  4003de:	4b46      	ldr	r3, [pc, #280]	; (4004f8 <sd_mmc_check+0x25c>)
  4003e0:	4798      	blx	r3
  4003e2:	2800      	cmp	r0, #0
  4003e4:	f43f af77 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  4003e8:	4b44      	ldr	r3, [pc, #272]	; (4004fc <sd_mmc_check+0x260>)
  4003ea:	4798      	blx	r3
  4003ec:	2800      	cmp	r0, #0
  4003ee:	f43f af72 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  4003f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4003f6:	f003 030f 	and.w	r3, r3, #15
  4003fa:	2b01      	cmp	r3, #1
  4003fc:	f000 81bb 	beq.w	400776 <sd_mmc_check+0x4da>
  400400:	2b00      	cmp	r3, #0
  400402:	f000 816d 	beq.w	4006e0 <sd_mmc_check+0x444>
  400406:	2b02      	cmp	r3, #2
  400408:	f000 81ba 	beq.w	400780 <sd_mmc_check+0x4e4>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40040c:	4b31      	ldr	r3, [pc, #196]	; (4004d4 <sd_mmc_check+0x238>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	2210      	movs	r2, #16
  400412:	731a      	strb	r2, [r3, #12]
  400414:	e168      	b.n	4006e8 <sd_mmc_check+0x44c>
	resp = driver_get_response();
  400416:	4b32      	ldr	r3, [pc, #200]	; (4004e0 <sd_mmc_check+0x244>)
  400418:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40041a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40041e:	f000 8217 	beq.w	400850 <sd_mmc_check+0x5b4>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400422:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400426:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40042a:	f47f af54 	bne.w	4002d6 <sd_mmc_check+0x3a>
	*v2 = 1;
  40042e:	2201      	movs	r2, #1
  400430:	e762      	b.n	4002f8 <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  400432:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400438:	4b26      	ldr	r3, [pc, #152]	; (4004d4 <sd_mmc_check+0x238>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	7ad3      	ldrb	r3, [r2, #11]
  40043e:	f043 0308 	orr.w	r3, r3, #8
  400442:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400444:	4b23      	ldr	r3, [pc, #140]	; (4004d4 <sd_mmc_check+0x238>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	7adb      	ldrb	r3, [r3, #11]
  40044a:	f013 0f01 	tst.w	r3, #1
  40044e:	f43f af5a 	beq.w	400306 <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400452:	2100      	movs	r1, #0
  400454:	f645 3002 	movw	r0, #23298	; 0x5b02
  400458:	4b20      	ldr	r3, [pc, #128]	; (4004dc <sd_mmc_check+0x240>)
  40045a:	4798      	blx	r3
  40045c:	2800      	cmp	r0, #0
  40045e:	f47f af52 	bne.w	400306 <sd_mmc_check+0x6a>
  400462:	e738      	b.n	4002d6 <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  400464:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40046c:	d027      	beq.n	4004be <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40046e:	2100      	movs	r1, #0
  400470:	f645 3002 	movw	r0, #23298	; 0x5b02
  400474:	4b19      	ldr	r3, [pc, #100]	; (4004dc <sd_mmc_check+0x240>)
  400476:	4798      	blx	r3
  400478:	2800      	cmp	r0, #0
  40047a:	f43f af2c 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <sd_mmc_check+0x238>)
  400480:	681b      	ldr	r3, [r3, #0]
  400482:	2201      	movs	r2, #1
  400484:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40048a:	f241 1003 	movw	r0, #4355	; 0x1103
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <sd_mmc_check+0x240>)
  400490:	4798      	blx	r3
  400492:	2800      	cmp	r0, #0
  400494:	f43f af1f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  400498:	4b12      	ldr	r3, [pc, #72]	; (4004e4 <sd_mmc_check+0x248>)
  40049a:	4798      	blx	r3
  40049c:	2800      	cmp	r0, #0
  40049e:	f43f af1a 	beq.w	4002d6 <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <sd_mmc_check+0x238>)
  4004a4:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004a6:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4004a8:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004ac:	3b01      	subs	r3, #1
  4004ae:	2b03      	cmp	r3, #3
  4004b0:	d826      	bhi.n	400500 <sd_mmc_check+0x264>
  4004b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4004b6:	00ef      	.short	0x00ef
  4004b8:	00f500f2 	.word	0x00f500f2
  4004bc:	00f8      	.short	0x00f8
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <sd_mmc_check+0x238>)
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	7ad3      	ldrb	r3, [r2, #11]
  4004c4:	f043 0308 	orr.w	r3, r3, #8
  4004c8:	72d3      	strb	r3, [r2, #11]
  4004ca:	e7d0      	b.n	40046e <sd_mmc_check+0x1d2>
  4004cc:	004001d5 	.word	0x004001d5
  4004d0:	00400261 	.word	0x00400261
  4004d4:	20400464 	.word	0x20400464
  4004d8:	00400bd7 	.word	0x00400bd7
  4004dc:	00400bf9 	.word	0x00400bf9
  4004e0:	00400c1d 	.word	0x00400c1d
  4004e4:	0040022d 	.word	0x0040022d
  4004e8:	004024ec 	.word	0x004024ec
  4004ec:	00402508 	.word	0x00402508
  4004f0:	00081133 	.word	0x00081133
  4004f4:	00400c55 	.word	0x00400c55
  4004f8:	00400d91 	.word	0x00400d91
  4004fc:	00400df5 	.word	0x00400df5
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400500:	2312      	movs	r3, #18
  400502:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400504:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  400506:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40050a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40050e:	49a1      	ldr	r1, [pc, #644]	; (400794 <sd_mmc_check+0x4f8>)
  400510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400518:	fb03 f301 	mul.w	r3, r3, r1
  40051c:	499e      	ldr	r1, [pc, #632]	; (400798 <sd_mmc_check+0x4fc>)
  40051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400522:	fb03 f301 	mul.w	r3, r3, r1
  400526:	6013      	str	r3, [r2, #0]
  400528:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40052a:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40052c:	7d13      	ldrb	r3, [r2, #20]
  40052e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400530:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400534:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400538:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  40053c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400540:	428b      	cmp	r3, r1
  400542:	d00f      	beq.n	400564 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400544:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400546:	7dd1      	ldrb	r1, [r2, #23]
  400548:	0049      	lsls	r1, r1, #1
  40054a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40054e:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400550:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400554:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400556:	408b      	lsls	r3, r1
  400558:	7cd1      	ldrb	r1, [r2, #19]
  40055a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40055e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400560:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400562:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400564:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400566:	0409      	lsls	r1, r1, #16
  400568:	f243 1007 	movw	r0, #12551	; 0x3107
  40056c:	4b8b      	ldr	r3, [pc, #556]	; (40079c <sd_mmc_check+0x500>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb0 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400576:	4b8a      	ldr	r3, [pc, #552]	; (4007a0 <sd_mmc_check+0x504>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	7b1b      	ldrb	r3, [r3, #12]
  40057c:	2b3f      	cmp	r3, #63	; 0x3f
  40057e:	f240 809f 	bls.w	4006c0 <sd_mmc_check+0x424>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400582:	2100      	movs	r1, #0
  400584:	9100      	str	r1, [sp, #0]
  400586:	2301      	movs	r3, #1
  400588:	f44f 7200 	mov.w	r2, #512	; 0x200
  40058c:	4885      	ldr	r0, [pc, #532]	; (4007a4 <sd_mmc_check+0x508>)
  40058e:	4d86      	ldr	r5, [pc, #536]	; (4007a8 <sd_mmc_check+0x50c>)
  400590:	47a8      	blx	r5
  400592:	2800      	cmp	r0, #0
  400594:	f43f ae9f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400598:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40059a:	4e84      	ldr	r6, [pc, #528]	; (4007ac <sd_mmc_check+0x510>)
  40059c:	a803      	add	r0, sp, #12
  40059e:	47b0      	blx	r6
  4005a0:	2800      	cmp	r0, #0
  4005a2:	f43f ae98 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4005a6:	3501      	adds	r5, #1
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	2d32      	cmp	r5, #50	; 0x32
  4005ac:	d1f6      	bne.n	40059c <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  4005ae:	9e03      	ldr	r6, [sp, #12]
  4005b0:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4005b4:	4b7a      	ldr	r3, [pc, #488]	; (4007a0 <sd_mmc_check+0x504>)
  4005b6:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005b8:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ba:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005bc:	7d1b      	ldrb	r3, [r3, #20]
  4005be:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4005c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4005c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005d0:	4293      	cmp	r3, r2
  4005d2:	d10e      	bne.n	4005f2 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  4005d4:	4f75      	ldr	r7, [pc, #468]	; (4007ac <sd_mmc_check+0x510>)
  4005d6:	a804      	add	r0, sp, #16
  4005d8:	47b8      	blx	r7
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7b 	beq.w	4002d6 <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4005e0:	3501      	adds	r5, #1
  4005e2:	b2ad      	uxth	r5, r5
  4005e4:	2d35      	cmp	r5, #53	; 0x35
  4005e6:	d9f6      	bls.n	4005d6 <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  4005e8:	4b6d      	ldr	r3, [pc, #436]	; (4007a0 <sd_mmc_check+0x504>)
  4005ea:	681a      	ldr	r2, [r3, #0]
  4005ec:	9b04      	ldr	r3, [sp, #16]
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4005f2:	4f6e      	ldr	r7, [pc, #440]	; (4007ac <sd_mmc_check+0x510>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4005f4:	2d7f      	cmp	r5, #127	; 0x7f
  4005f6:	d959      	bls.n	4006ac <sd_mmc_check+0x410>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4005f8:	4b6d      	ldr	r3, [pc, #436]	; (4007b0 <sd_mmc_check+0x514>)
  4005fa:	7818      	ldrb	r0, [r3, #0]
  4005fc:	4b6d      	ldr	r3, [pc, #436]	; (4007b4 <sd_mmc_check+0x518>)
  4005fe:	4798      	blx	r3
  400600:	2803      	cmp	r0, #3
  400602:	d91d      	bls.n	400640 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  400604:	4b6a      	ldr	r3, [pc, #424]	; (4007b0 <sd_mmc_check+0x514>)
  400606:	7818      	ldrb	r0, [r3, #0]
  400608:	4b6a      	ldr	r3, [pc, #424]	; (4007b4 <sd_mmc_check+0x518>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
	switch (bus_width) {
  40060e:	2804      	cmp	r0, #4
  400610:	d054      	beq.n	4006bc <sd_mmc_check+0x420>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400612:	4b69      	ldr	r3, [pc, #420]	; (4007b8 <sd_mmc_check+0x51c>)
  400614:	4969      	ldr	r1, [pc, #420]	; (4007bc <sd_mmc_check+0x520>)
  400616:	2808      	cmp	r0, #8
  400618:	bf18      	it	ne
  40061a:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40061c:	f243 1006 	movw	r0, #12550	; 0x3106
  400620:	4b5e      	ldr	r3, [pc, #376]	; (40079c <sd_mmc_check+0x500>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f43f ae56 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40062a:	4b65      	ldr	r3, [pc, #404]	; (4007c0 <sd_mmc_check+0x524>)
  40062c:	4798      	blx	r3
  40062e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400632:	f47f ae50 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  400636:	4b5a      	ldr	r3, [pc, #360]	; (4007a0 <sd_mmc_check+0x504>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  40063c:	4b61      	ldr	r3, [pc, #388]	; (4007c4 <sd_mmc_check+0x528>)
  40063e:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400640:	4b61      	ldr	r3, [pc, #388]	; (4007c8 <sd_mmc_check+0x52c>)
  400642:	4798      	blx	r3
  400644:	b1b6      	cbz	r6, 400674 <sd_mmc_check+0x3d8>
  400646:	b1a8      	cbz	r0, 400674 <sd_mmc_check+0x3d8>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400648:	4960      	ldr	r1, [pc, #384]	; (4007cc <sd_mmc_check+0x530>)
  40064a:	f243 1006 	movw	r0, #12550	; 0x3106
  40064e:	4b53      	ldr	r3, [pc, #332]	; (40079c <sd_mmc_check+0x500>)
  400650:	4798      	blx	r3
  400652:	2800      	cmp	r0, #0
  400654:	f43f ae3f 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400658:	4b59      	ldr	r3, [pc, #356]	; (4007c0 <sd_mmc_check+0x524>)
  40065a:	4798      	blx	r3
  40065c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400660:	f47f ae39 	bne.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  400664:	4b4e      	ldr	r3, [pc, #312]	; (4007a0 <sd_mmc_check+0x504>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2201      	movs	r2, #1
  40066a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40066c:	4a58      	ldr	r2, [pc, #352]	; (4007d0 <sd_mmc_check+0x534>)
  40066e:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400670:	4b54      	ldr	r3, [pc, #336]	; (4007c4 <sd_mmc_check+0x528>)
  400672:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400674:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400676:	f44f 7800 	mov.w	r8, #512	; 0x200
  40067a:	f241 1710 	movw	r7, #4368	; 0x1110
  40067e:	4e47      	ldr	r6, [pc, #284]	; (40079c <sd_mmc_check+0x500>)
  400680:	4641      	mov	r1, r8
  400682:	4638      	mov	r0, r7
  400684:	47b0      	blx	r6
  400686:	2800      	cmp	r0, #0
  400688:	d16e      	bne.n	400768 <sd_mmc_check+0x4cc>
  40068a:	3d01      	subs	r5, #1
	while (retry--) {
  40068c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400690:	d1f6      	bne.n	400680 <sd_mmc_check+0x3e4>
  400692:	e620      	b.n	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400694:	2314      	movs	r3, #20
  400696:	7313      	strb	r3, [r2, #12]
  400698:	e734      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40069a:	2322      	movs	r3, #34	; 0x22
  40069c:	7313      	strb	r3, [r2, #12]
  40069e:	e731      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  4006a0:	2330      	movs	r3, #48	; 0x30
  4006a2:	7313      	strb	r3, [r2, #12]
  4006a4:	e72e      	b.n	400504 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  4006a6:	2340      	movs	r3, #64	; 0x40
  4006a8:	7313      	strb	r3, [r2, #12]
  4006aa:	e72b      	b.n	400504 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  4006ac:	a804      	add	r0, sp, #16
  4006ae:	47b8      	blx	r7
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae10 	beq.w	4002d6 <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	e79b      	b.n	4005f4 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006bc:	4945      	ldr	r1, [pc, #276]	; (4007d4 <sd_mmc_check+0x538>)
  4006be:	e7ad      	b.n	40061c <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  4006c0:	4b40      	ldr	r3, [pc, #256]	; (4007c4 <sd_mmc_check+0x528>)
  4006c2:	4798      	blx	r3
  4006c4:	e7d6      	b.n	400674 <sd_mmc_check+0x3d8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006c6:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006c8:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ca:	7d5a      	ldrb	r2, [r3, #21]
  4006cc:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4006d2:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  4006d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4006d8:	3201      	adds	r2, #1
  4006da:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4006dc:	605a      	str	r2, [r3, #4]
  4006de:	e659      	b.n	400394 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4006e0:	4b2f      	ldr	r3, [pc, #188]	; (4007a0 <sd_mmc_check+0x504>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2210      	movs	r2, #16
  4006e6:	731a      	strb	r2, [r3, #12]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4006e8:	4b31      	ldr	r3, [pc, #196]	; (4007b0 <sd_mmc_check+0x514>)
  4006ea:	7818      	ldrb	r0, [r3, #0]
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <sd_mmc_check+0x518>)
  4006ee:	4798      	blx	r3
  4006f0:	2803      	cmp	r0, #3
  4006f2:	d91c      	bls.n	40072e <sd_mmc_check+0x492>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4006f4:	4b2a      	ldr	r3, [pc, #168]	; (4007a0 <sd_mmc_check+0x504>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7ada      	ldrb	r2, [r3, #11]
  4006fa:	f012 0f01 	tst.w	r2, #1
  4006fe:	d014      	beq.n	40072a <sd_mmc_check+0x48e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400700:	8919      	ldrh	r1, [r3, #8]
  400702:	0409      	lsls	r1, r1, #16
  400704:	f241 1037 	movw	r0, #4407	; 0x1137
  400708:	4b24      	ldr	r3, [pc, #144]	; (40079c <sd_mmc_check+0x500>)
  40070a:	4798      	blx	r3
  40070c:	2800      	cmp	r0, #0
  40070e:	f43f ade2 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400712:	2102      	movs	r1, #2
  400714:	f241 1006 	movw	r0, #4358	; 0x1106
  400718:	4b20      	ldr	r3, [pc, #128]	; (40079c <sd_mmc_check+0x500>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f adda 	beq.w	4002d6 <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  400722:	4b1f      	ldr	r3, [pc, #124]	; (4007a0 <sd_mmc_check+0x504>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2204      	movs	r2, #4
  400728:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  40072a:	4b26      	ldr	r3, [pc, #152]	; (4007c4 <sd_mmc_check+0x528>)
  40072c:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  40072e:	4b26      	ldr	r3, [pc, #152]	; (4007c8 <sd_mmc_check+0x52c>)
  400730:	4798      	blx	r3
  400732:	b150      	cbz	r0, 40074a <sd_mmc_check+0x4ae>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400734:	4b1a      	ldr	r3, [pc, #104]	; (4007a0 <sd_mmc_check+0x504>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	7ada      	ldrb	r2, [r3, #11]
  40073a:	f012 0f01 	tst.w	r2, #1
  40073e:	d002      	beq.n	400746 <sd_mmc_check+0x4aa>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400740:	7b1b      	ldrb	r3, [r3, #12]
  400742:	2b10      	cmp	r3, #16
  400744:	d84a      	bhi.n	4007dc <sd_mmc_check+0x540>
		sd_mmc_configure_slot();
  400746:	4b1f      	ldr	r3, [pc, #124]	; (4007c4 <sd_mmc_check+0x528>)
  400748:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <sd_mmc_check+0x504>)
  40074c:	681b      	ldr	r3, [r3, #0]
  40074e:	7adb      	ldrb	r3, [r3, #11]
  400750:	f013 0f01 	tst.w	r3, #1
  400754:	d008      	beq.n	400768 <sd_mmc_check+0x4cc>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400756:	f44f 7100 	mov.w	r1, #512	; 0x200
  40075a:	f241 1010 	movw	r0, #4368	; 0x1110
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <sd_mmc_check+0x500>)
  400760:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400762:	2800      	cmp	r0, #0
  400764:	f43f adb7 	beq.w	4002d6 <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400768:	4b0d      	ldr	r3, [pc, #52]	; (4007a0 <sd_mmc_check+0x504>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2200      	movs	r2, #0
  40076e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400770:	4b19      	ldr	r3, [pc, #100]	; (4007d8 <sd_mmc_check+0x53c>)
  400772:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400774:	e59c      	b.n	4002b0 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <sd_mmc_check+0x504>)
  400778:	681b      	ldr	r3, [r3, #0]
  40077a:	221a      	movs	r2, #26
  40077c:	731a      	strb	r2, [r3, #12]
  40077e:	e7b3      	b.n	4006e8 <sd_mmc_check+0x44c>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400780:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400784:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <sd_mmc_check+0x504>)
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	bf14      	ite	ne
  40078c:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  40078e:	2220      	moveq	r2, #32
  400790:	731a      	strb	r2, [r3, #12]
  400792:	e7a9      	b.n	4006e8 <sd_mmc_check+0x44c>
  400794:	004024ec 	.word	0x004024ec
  400798:	004024ac 	.word	0x004024ac
  40079c:	00400bf9 	.word	0x00400bf9
  4007a0:	20400464 	.word	0x20400464
  4007a4:	00081108 	.word	0x00081108
  4007a8:	00400c55 	.word	0x00400c55
  4007ac:	00400d1d 	.word	0x00400d1d
  4007b0:	2040048c 	.word	0x2040048c
  4007b4:	00400b55 	.word	0x00400b55
  4007b8:	01b70000 	.word	0x01b70000
  4007bc:	01b70200 	.word	0x01b70200
  4007c0:	00400c1d 	.word	0x00400c1d
  4007c4:	004001ad 	.word	0x004001ad
  4007c8:	00400b5f 	.word	0x00400b5f
  4007cc:	03b90100 	.word	0x03b90100
  4007d0:	03197500 	.word	0x03197500
  4007d4:	01b70100 	.word	0x01b70100
  4007d8:	00400261 	.word	0x00400261
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  4007dc:	2540      	movs	r5, #64	; 0x40
  4007de:	462a      	mov	r2, r5
  4007e0:	2100      	movs	r1, #0
  4007e2:	a804      	add	r0, sp, #16
  4007e4:	4b39      	ldr	r3, [pc, #228]	; (4008cc <sd_mmc_check+0x630>)
  4007e6:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4007e8:	2301      	movs	r3, #1
  4007ea:	9300      	str	r3, [sp, #0]
  4007ec:	462a      	mov	r2, r5
  4007ee:	4938      	ldr	r1, [pc, #224]	; (4008d0 <sd_mmc_check+0x634>)
  4007f0:	4838      	ldr	r0, [pc, #224]	; (4008d4 <sd_mmc_check+0x638>)
  4007f2:	4d39      	ldr	r5, [pc, #228]	; (4008d8 <sd_mmc_check+0x63c>)
  4007f4:	47a8      	blx	r5
  4007f6:	2800      	cmp	r0, #0
  4007f8:	f43f ad6d 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  4007fc:	2101      	movs	r1, #1
  4007fe:	a804      	add	r0, sp, #16
  400800:	4b36      	ldr	r3, [pc, #216]	; (4008dc <sd_mmc_check+0x640>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f43f ad66 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40080a:	4b35      	ldr	r3, [pc, #212]	; (4008e0 <sd_mmc_check+0x644>)
  40080c:	4798      	blx	r3
  40080e:	2800      	cmp	r0, #0
  400810:	f43f ad61 	beq.w	4002d6 <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400814:	4b33      	ldr	r3, [pc, #204]	; (4008e4 <sd_mmc_check+0x648>)
  400816:	4798      	blx	r3
  400818:	f010 0f80 	tst.w	r0, #128	; 0x80
  40081c:	f47f ad5b 	bne.w	4002d6 <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400820:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400824:	f003 030f 	and.w	r3, r3, #15
  400828:	2b0f      	cmp	r3, #15
  40082a:	d08c      	beq.n	400746 <sd_mmc_check+0x4aa>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40082c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400830:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400834:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400838:	f47f ad4d 	bne.w	4002d6 <sd_mmc_check+0x3a>
	driver_send_clock();
  40083c:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <sd_mmc_check+0x64c>)
  40083e:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <sd_mmc_check+0x650>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	2201      	movs	r2, #1
  400846:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	0052      	lsls	r2, r2, #1
  40084c:	601a      	str	r2, [r3, #0]
  40084e:	e77a      	b.n	400746 <sd_mmc_check+0x4aa>
	*v2 = 0;
  400850:	2200      	movs	r2, #0
  400852:	e551      	b.n	4002f8 <sd_mmc_check+0x5c>
  400854:	2a00      	cmp	r2, #0
  400856:	4f26      	ldr	r7, [pc, #152]	; (4008f0 <sd_mmc_check+0x654>)
  400858:	bf08      	it	eq
  40085a:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40085e:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400862:	f04f 0800 	mov.w	r8, #0
  400866:	4e23      	ldr	r6, [pc, #140]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  400868:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4008e4 <sd_mmc_check+0x648>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40086c:	4641      	mov	r1, r8
  40086e:	f241 1037 	movw	r0, #4407	; 0x1137
  400872:	47b0      	blx	r6
  400874:	b150      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400876:	4639      	mov	r1, r7
  400878:	f244 5029 	movw	r0, #17705	; 0x4529
  40087c:	47b0      	blx	r6
  40087e:	b128      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
		resp = driver_get_response();
  400880:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400882:	2800      	cmp	r0, #0
  400884:	f6ff add5 	blt.w	400432 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  400888:	3d01      	subs	r5, #1
  40088a:	d1ef      	bne.n	40086c <sd_mmc_check+0x5d0>
			sd_mmc_card->type = CARD_TYPE_MMC;
  40088c:	4b17      	ldr	r3, [pc, #92]	; (4008ec <sd_mmc_check+0x650>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2202      	movs	r2, #2
  400892:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400894:	2100      	movs	r1, #0
  400896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x658>)
  40089c:	4798      	blx	r3
  40089e:	2800      	cmp	r0, #0
  4008a0:	f43f ad19 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008a4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4008f0 <sd_mmc_check+0x654>
  4008ac:	4f11      	ldr	r7, [pc, #68]	; (4008f4 <sd_mmc_check+0x658>)
		resp = driver_get_response();
  4008ae:	4e0d      	ldr	r6, [pc, #52]	; (4008e4 <sd_mmc_check+0x648>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4008b0:	4641      	mov	r1, r8
  4008b2:	f244 5001 	movw	r0, #17665	; 0x4501
  4008b6:	47b8      	blx	r7
  4008b8:	2800      	cmp	r0, #0
  4008ba:	f43f ad0c 	beq.w	4002d6 <sd_mmc_check+0x3a>
		resp = driver_get_response();
  4008be:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  4008c0:	2800      	cmp	r0, #0
  4008c2:	f6ff adcf 	blt.w	400464 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  4008c6:	3d01      	subs	r5, #1
  4008c8:	d1f2      	bne.n	4008b0 <sd_mmc_check+0x614>
  4008ca:	e504      	b.n	4002d6 <sd_mmc_check+0x3a>
  4008cc:	004022f1 	.word	0x004022f1
  4008d0:	80ffff01 	.word	0x80ffff01
  4008d4:	00081106 	.word	0x00081106
  4008d8:	00400c55 	.word	0x00400c55
  4008dc:	00400d91 	.word	0x00400d91
  4008e0:	00400df5 	.word	0x00400df5
  4008e4:	00400c1d 	.word	0x00400c1d
  4008e8:	00400bd7 	.word	0x00400bd7
  4008ec:	20400464 	.word	0x20400464
  4008f0:	401f8000 	.word	0x401f8000
  4008f4:	00400bf9 	.word	0x00400bf9

004008f8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4008f8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <sd_mmc_get_type+0x18>)
  4008fc:	4798      	blx	r3
  4008fe:	b108      	cbz	r0, 400904 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400900:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400902:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400904:	4b03      	ldr	r3, [pc, #12]	; (400914 <sd_mmc_get_type+0x1c>)
  400906:	4798      	blx	r3
	return sd_mmc_card->type;
  400908:	4b03      	ldr	r3, [pc, #12]	; (400918 <sd_mmc_get_type+0x20>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	7ad8      	ldrb	r0, [r3, #11]
  40090e:	bd08      	pop	{r3, pc}
  400910:	004001d5 	.word	0x004001d5
  400914:	00400261 	.word	0x00400261
  400918:	20400464 	.word	0x20400464

0040091c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  40091c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <sd_mmc_get_capacity+0x18>)
  400920:	4798      	blx	r3
  400922:	b108      	cbz	r0, 400928 <sd_mmc_get_capacity+0xc>
		return 0;
  400924:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400926:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400928:	4b03      	ldr	r3, [pc, #12]	; (400938 <sd_mmc_get_capacity+0x1c>)
  40092a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <sd_mmc_get_capacity+0x20>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6858      	ldr	r0, [r3, #4]
  400932:	bd08      	pop	{r3, pc}
  400934:	004001d5 	.word	0x004001d5
  400938:	00400261 	.word	0x00400261
  40093c:	20400464 	.word	0x20400464

00400940 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400940:	2000      	movs	r0, #0
  400942:	4770      	bx	lr

00400944 <sd_mmc_init_write_blocks>:
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400944:	b570      	push	{r4, r5, r6, lr}
  400946:	b082      	sub	sp, #8
  400948:	460e      	mov	r6, r1
  40094a:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40094c:	4b16      	ldr	r3, [pc, #88]	; (4009a8 <sd_mmc_init_write_blocks+0x64>)
  40094e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400950:	4604      	mov	r4, r0
  400952:	b9b8      	cbnz	r0, 400984 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400954:	4b15      	ldr	r3, [pc, #84]	; (4009ac <sd_mmc_init_write_blocks+0x68>)
  400956:	4816      	ldr	r0, [pc, #88]	; (4009b0 <sd_mmc_init_write_blocks+0x6c>)
  400958:	2d01      	cmp	r5, #1
  40095a:	bf98      	it	ls
  40095c:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40095e:	4b15      	ldr	r3, [pc, #84]	; (4009b4 <sd_mmc_init_write_blocks+0x70>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	7adb      	ldrb	r3, [r3, #11]
  400964:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400968:	bf08      	it	eq
  40096a:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40096c:	2301      	movs	r3, #1
  40096e:	9300      	str	r3, [sp, #0]
  400970:	462b      	mov	r3, r5
  400972:	f44f 7200 	mov.w	r2, #512	; 0x200
  400976:	4631      	mov	r1, r6
  400978:	4e0f      	ldr	r6, [pc, #60]	; (4009b8 <sd_mmc_init_write_blocks+0x74>)
  40097a:	47b0      	blx	r6
  40097c:	b928      	cbnz	r0, 40098a <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  40097e:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <sd_mmc_init_write_blocks+0x78>)
  400980:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400982:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400984:	4620      	mov	r0, r4
  400986:	b002      	add	sp, #8
  400988:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  40098a:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <sd_mmc_init_write_blocks+0x7c>)
  40098c:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40098e:	4b0d      	ldr	r3, [pc, #52]	; (4009c4 <sd_mmc_init_write_blocks+0x80>)
  400990:	4003      	ands	r3, r0
  400992:	b923      	cbnz	r3, 40099e <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400994:	4b0c      	ldr	r3, [pc, #48]	; (4009c8 <sd_mmc_init_write_blocks+0x84>)
  400996:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400998:	4b0c      	ldr	r3, [pc, #48]	; (4009cc <sd_mmc_init_write_blocks+0x88>)
  40099a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  40099c:	e7f2      	b.n	400984 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  40099e:	4b07      	ldr	r3, [pc, #28]	; (4009bc <sd_mmc_init_write_blocks+0x78>)
  4009a0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4009a2:	2405      	movs	r4, #5
  4009a4:	e7ee      	b.n	400984 <sd_mmc_init_write_blocks+0x40>
  4009a6:	bf00      	nop
  4009a8:	004001d5 	.word	0x004001d5
  4009ac:	00089118 	.word	0x00089118
  4009b0:	00109119 	.word	0x00109119
  4009b4:	20400464 	.word	0x20400464
  4009b8:	00400c55 	.word	0x00400c55
  4009bc:	00400261 	.word	0x00400261
  4009c0:	00400c1d 	.word	0x00400c1d
  4009c4:	e4580000 	.word	0xe4580000
  4009c8:	20400488 	.word	0x20400488
  4009cc:	2040048a 	.word	0x2040048a

004009d0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4009d0:	b510      	push	{r4, lr}
  4009d2:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) 
  4009d4:	4b06      	ldr	r3, [pc, #24]	; (4009f0 <sd_mmc_start_write_blocks+0x20>)
  4009d6:	4798      	blx	r3
  4009d8:	b920      	cbnz	r0, 4009e4 <sd_mmc_start_write_blocks+0x14>
	{
		sd_mmc_nb_block_remaining = 0;
  4009da:	2200      	movs	r2, #0
  4009dc:	4b05      	ldr	r3, [pc, #20]	; (4009f4 <sd_mmc_start_write_blocks+0x24>)
  4009de:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4009e0:	2005      	movs	r0, #5
  4009e2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4009e4:	4a03      	ldr	r2, [pc, #12]	; (4009f4 <sd_mmc_start_write_blocks+0x24>)
  4009e6:	8813      	ldrh	r3, [r2, #0]
  4009e8:	1b1c      	subs	r4, r3, r4
  4009ea:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4009ec:	2000      	movs	r0, #0
}
  4009ee:	bd10      	pop	{r4, pc}
  4009f0:	00400e59 	.word	0x00400e59
  4009f4:	20400488 	.word	0x20400488

004009f8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  4009f8:	b510      	push	{r4, lr}
  4009fa:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) 
  4009fc:	4b12      	ldr	r3, [pc, #72]	; (400a48 <sd_mmc_wait_end_of_write_blocks+0x50>)
  4009fe:	4798      	blx	r3
  400a00:	b908      	cbnz	r0, 400a06 <sd_mmc_wait_end_of_write_blocks+0xe>
	{
		return SD_MMC_ERR_COMM;
  400a02:	2005      	movs	r0, #5
  400a04:	bd10      	pop	{r4, pc}
	}
	if (abort) 
  400a06:	b184      	cbz	r4, 400a2a <sd_mmc_wait_end_of_write_blocks+0x32>
	{
		sd_mmc_nb_block_remaining = 0;
  400a08:	2200      	movs	r2, #0
  400a0a:	4b10      	ldr	r3, [pc, #64]	; (400a4c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400a0c:	801a      	strh	r2, [r3, #0]
	{
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400a0e:	4b10      	ldr	r3, [pc, #64]	; (400a50 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400a10:	881b      	ldrh	r3, [r3, #0]
  400a12:	2b01      	cmp	r3, #1
  400a14:	d00f      	beq.n	400a36 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400a16:	2100      	movs	r1, #0
  400a18:	f243 100c 	movw	r0, #12556	; 0x310c
  400a1c:	4b0d      	ldr	r3, [pc, #52]	; (400a54 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400a1e:	4798      	blx	r3
  400a20:	b968      	cbnz	r0, 400a3e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400a22:	4b0d      	ldr	r3, [pc, #52]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a24:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400a26:	2005      	movs	r0, #5
  400a28:	bd10      	pop	{r4, pc}
	else if (sd_mmc_nb_block_remaining) 
  400a2a:	4b08      	ldr	r3, [pc, #32]	; (400a4c <sd_mmc_wait_end_of_write_blocks+0x54>)
  400a2c:	881b      	ldrh	r3, [r3, #0]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d0ed      	beq.n	400a0e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400a32:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400a34:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400a36:	4b08      	ldr	r3, [pc, #32]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a38:	4798      	blx	r3
		return SD_MMC_OK;
  400a3a:	2000      	movs	r0, #0
  400a3c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400a3e:	4b06      	ldr	r3, [pc, #24]	; (400a58 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400a40:	4798      	blx	r3
	return SD_MMC_OK;
  400a42:	2000      	movs	r0, #0
  400a44:	bd10      	pop	{r4, pc}
  400a46:	bf00      	nop
  400a48:	00400ebd 	.word	0x00400ebd
  400a4c:	20400488 	.word	0x20400488
  400a50:	2040048a 	.word	0x2040048a
  400a54:	00400bf9 	.word	0x00400bf9
  400a58:	00400261 	.word	0x00400261

00400a5c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400a5c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400a62:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400a64:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400a66:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400a68:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400a6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400a6c:	2680      	movs	r6, #128	; 0x80
  400a6e:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400a70:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400a72:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400a74:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400a76:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400a78:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
  400a7a:	2200      	movs	r2, #0
  400a7c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400a7e:	2205      	movs	r2, #5
  400a80:	601a      	str	r2, [r3, #0]
}
  400a82:	bc70      	pop	{r4, r5, r6}
  400a84:	4770      	bx	lr
	...

00400a88 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400a88:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400a8a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400a8e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400a90:	f411 7f80 	tst.w	r1, #256	; 0x100
  400a94:	d004      	beq.n	400aa0 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400a96:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400a9a:	d00e      	beq.n	400aba <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400a9c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400aa0:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400aa4:	bf18      	it	ne
  400aa6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400aae:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400ab0:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400ab2:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400ab4:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400ab8:	e00d      	b.n	400ad6 <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400aba:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400abe:	bf14      	ite	ne
  400ac0:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400ac4:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400ac8:	e7ea      	b.n	400aa0 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400aca:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400ace:	d10c      	bne.n	400aea <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400ad0:	f013 0f01 	tst.w	r3, #1
  400ad4:	d10d      	bne.n	400af2 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  400ad6:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400ad8:	2a00      	cmp	r2, #0
  400ada:	d0f6      	beq.n	400aca <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400adc:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400ae0:	d0f6      	beq.n	400ad0 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  400ae2:	4b10      	ldr	r3, [pc, #64]	; (400b24 <hsmci_send_cmd_execute+0x9c>)
  400ae4:	4798      	blx	r3
				return false;
  400ae6:	2000      	movs	r0, #0
  400ae8:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400aea:	4b0e      	ldr	r3, [pc, #56]	; (400b24 <hsmci_send_cmd_execute+0x9c>)
  400aec:	4798      	blx	r3
				return false;
  400aee:	2000      	movs	r0, #0
  400af0:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400af2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400af6:	d103      	bne.n	400b00 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400af8:	2001      	movs	r0, #1
  400afa:	bd08      	pop	{r3, pc}
	return true;
  400afc:	2001      	movs	r0, #1
  400afe:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400b06:	f04f 32ff 	mov.w	r2, #4294967295
  400b0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400b0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400b12:	2b20      	cmp	r3, #32
  400b14:	d0f2      	beq.n	400afc <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  400b16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400b18:	3a01      	subs	r2, #1
  400b1a:	d1f8      	bne.n	400b0e <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  400b1c:	4b01      	ldr	r3, [pc, #4]	; (400b24 <hsmci_send_cmd_execute+0x9c>)
  400b1e:	4798      	blx	r3
			return false;
  400b20:	2000      	movs	r0, #0
  400b22:	bd08      	pop	{r3, pc}
  400b24:	00400a5d 	.word	0x00400a5d

00400b28 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400b28:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400b2a:	2012      	movs	r0, #18
  400b2c:	4c08      	ldr	r4, [pc, #32]	; (400b50 <hsmci_init+0x28>)
  400b2e:	47a0      	blx	r4
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_XDMAC);
  400b30:	203a      	movs	r0, #58	; 0x3a
  400b32:	47a0      	blx	r4
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400b38:	2272      	movs	r2, #114	; 0x72
  400b3a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400b3c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400b3e:	2211      	movs	r2, #17
  400b40:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400b42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400b46:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400b48:	2205      	movs	r2, #5
  400b4a:	601a      	str	r2, [r3, #0]
  400b4c:	bd10      	pop	{r4, pc}
  400b4e:	bf00      	nop
  400b50:	00401b99 	.word	0x00401b99

00400b54 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400b54:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400b56:	bf0c      	ite	eq
  400b58:	2004      	moveq	r0, #4
  400b5a:	2000      	movne	r0, #0
  400b5c:	4770      	bx	lr

00400b5e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400b5e:	2001      	movs	r0, #1
  400b60:	4770      	bx	lr
	...

00400b64 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400b64:	b19b      	cbz	r3, 400b8e <hsmci_select_device+0x2a>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400b66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400b6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400b70:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400b72:	0049      	lsls	r1, r1, #1
  400b74:	4b15      	ldr	r3, [pc, #84]	; (400bcc <hsmci_select_device+0x68>)
  400b76:	4299      	cmp	r1, r3
  400b78:	d810      	bhi.n	400b9c <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  400b7a:	4815      	ldr	r0, [pc, #84]	; (400bd0 <hsmci_select_device+0x6c>)
  400b7c:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
  400b80:	fb01 0113 	mls	r1, r1, r3, r0
		if (rest > 0) {
  400b84:	b101      	cbz	r1, 400b88 <hsmci_select_device+0x24>
			clkdiv++;
  400b86:	3301      	adds	r3, #1
		if (clkdiv > 0) {
  400b88:	b14b      	cbz	r3, 400b9e <hsmci_select_device+0x3a>
			clkdiv -= 1;
  400b8a:	3b01      	subs	r3, #1
  400b8c:	e007      	b.n	400b9e <hsmci_select_device+0x3a>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  400b8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400b92:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400b98:	6543      	str	r3, [r0, #84]	; 0x54
  400b9a:	e7ea      	b.n	400b72 <hsmci_select_device+0xe>
		clkdiv = 0;
  400b9c:	2300      	movs	r3, #0
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400ba2:	6848      	ldr	r0, [r1, #4]
  400ba4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400ba8:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400baa:	6848      	ldr	r0, [r1, #4]
  400bac:	b2db      	uxtb	r3, r3
  400bae:	4303      	orrs	r3, r0
  400bb0:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  400bb2:	2a04      	cmp	r2, #4
  400bb4:	d007      	beq.n	400bc6 <hsmci_select_device+0x62>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  400bb6:	2a08      	cmp	r2, #8
  400bb8:	bf0c      	ite	eq
  400bba:	22c0      	moveq	r2, #192	; 0xc0
  400bbc:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  400bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc2:	60da      	str	r2, [r3, #12]
  400bc4:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  400bc6:	2280      	movs	r2, #128	; 0x80
  400bc8:	e7f9      	b.n	400bbe <hsmci_select_device+0x5a>
  400bca:	bf00      	nop
  400bcc:	089543ff 	.word	0x089543ff
  400bd0:	08954400 	.word	0x08954400

00400bd4 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  400bd4:	4770      	bx	lr

00400bd6 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bda:	685a      	ldr	r2, [r3, #4]
  400bdc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400be0:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  400be2:	2200      	movs	r2, #0
  400be4:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  400be6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400bea:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  400bec:	461a      	mov	r2, r3
  400bee:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400bf0:	f013 0f01 	tst.w	r3, #1
  400bf4:	d0fb      	beq.n	400bee <hsmci_send_clock+0x18>
}
  400bf6:	4770      	bx	lr

00400bf8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  400bf8:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  400bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bfe:	685a      	ldr	r2, [r3, #4]
  400c00:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400c04:	605a      	str	r2, [r3, #4]
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
  400c06:	2400      	movs	r4, #0
  400c08:	651c      	str	r4, [r3, #80]	; 0x50
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  400c0a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  400c0c:	460a      	mov	r2, r1
  400c0e:	4601      	mov	r1, r0
  400c10:	4620      	mov	r0, r4
  400c12:	4b01      	ldr	r3, [pc, #4]	; (400c18 <hsmci_send_cmd+0x20>)
  400c14:	4798      	blx	r3
}
  400c16:	bd10      	pop	{r4, pc}
  400c18:	00400a89 	.word	0x00400a89

00400c1c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  400c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c20:	6a18      	ldr	r0, [r3, #32]
}
  400c22:	4770      	bx	lr

00400c24 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  400c24:	b410      	push	{r4}
  400c26:	1d03      	adds	r3, r0, #4
  400c28:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  400c2a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400c2e:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  400c30:	0e11      	lsrs	r1, r2, #24
  400c32:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  400c36:	0c11      	lsrs	r1, r2, #16
  400c38:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  400c3c:	0a11      	lsrs	r1, r2, #8
  400c3e:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  400c42:	f803 2c01 	strb.w	r2, [r3, #-1]
  400c46:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  400c48:	4283      	cmp	r3, r0
  400c4a:	d1f0      	bne.n	400c2e <hsmci_get_response_128+0xa>
		response++;
	}
}
  400c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c50:	4770      	bx	lr
	...

00400c54 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  400c54:	b570      	push	{r4, r5, r6, lr}
  400c56:	f89d 4010 	ldrb.w	r4, [sp, #16]
	}
#endif

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
	if (access_block) {
  400c5a:	b384      	cbz	r4, 400cbe <hsmci_adtc_start+0x6a>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
  400c5c:	f44f 7580 	mov.w	r5, #256	; 0x100
  400c60:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400c64:	6525      	str	r5, [r4, #80]	; 0x50
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  400c66:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400c6a:	686c      	ldr	r4, [r5, #4]
  400c6c:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400c70:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  400c72:	f012 0f03 	tst.w	r2, #3
  400c76:	d027      	beq.n	400cc8 <hsmci_adtc_start+0x74>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  400c78:	686c      	ldr	r4, [r5, #4]
  400c7a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400c7e:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  400c80:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  400c84:	2c00      	cmp	r4, #0
  400c86:	bf14      	ite	ne
  400c88:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400c8c:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  400c90:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400c94:	d11f      	bne.n	400cd6 <hsmci_adtc_start+0x82>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  400c96:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400c9a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400c9e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  400ca0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400ca4:	d12b      	bne.n	400cfe <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  400ca6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400caa:	d12b      	bne.n	400d04 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  400cac:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400cb0:	d118      	bne.n	400ce4 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  400cb2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  400cb6:	bf18      	it	ne
  400cb8:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400cbc:	e012      	b.n	400ce4 <hsmci_adtc_start+0x90>
		HSMCI->HSMCI_DMA = 0;
  400cbe:	2500      	movs	r5, #0
  400cc0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400cc4:	6525      	str	r5, [r4, #80]	; 0x50
  400cc6:	e7ce      	b.n	400c66 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  400cc8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400ccc:	686c      	ldr	r4, [r5, #4]
  400cce:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400cd2:	606c      	str	r4, [r5, #4]
  400cd4:	e7d4      	b.n	400c80 <hsmci_adtc_start+0x2c>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  400cd6:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  400cda:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400cde:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400ce2:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  400ce4:	2600      	movs	r6, #0
  400ce6:	4d09      	ldr	r5, [pc, #36]	; (400d0c <hsmci_adtc_start+0xb8>)
  400ce8:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  400cea:	4d09      	ldr	r5, [pc, #36]	; (400d10 <hsmci_adtc_start+0xbc>)
  400cec:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  400cee:	4a09      	ldr	r2, [pc, #36]	; (400d14 <hsmci_adtc_start+0xc0>)
  400cf0:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  400cf2:	460a      	mov	r2, r1
  400cf4:	4601      	mov	r1, r0
  400cf6:	4620      	mov	r0, r4
  400cf8:	4b07      	ldr	r3, [pc, #28]	; (400d18 <hsmci_adtc_start+0xc4>)
  400cfa:	4798      	blx	r3
}
  400cfc:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  400cfe:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400d02:	e7ef      	b.n	400ce4 <hsmci_adtc_start+0x90>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  400d04:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400d08:	e7ec      	b.n	400ce4 <hsmci_adtc_start+0x90>
  400d0a:	bf00      	nop
  400d0c:	20400494 	.word	0x20400494
  400d10:	2040048e 	.word	0x2040048e
  400d14:	20400490 	.word	0x20400490
  400d18:	00400a89 	.word	0x00400a89

00400d1c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  400d1c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  400d1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400d22:	4a16      	ldr	r2, [pc, #88]	; (400d7c <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400d26:	4213      	tst	r3, r2
  400d28:	d11d      	bne.n	400d66 <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  400d2a:	f013 0f02 	tst.w	r3, #2
  400d2e:	d0f9      	beq.n	400d24 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  400d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d36:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  400d38:	4a11      	ldr	r2, [pc, #68]	; (400d80 <hsmci_read_word+0x64>)
  400d3a:	6813      	ldr	r3, [r2, #0]
  400d3c:	3304      	adds	r3, #4
  400d3e:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400d40:	4a10      	ldr	r2, [pc, #64]	; (400d84 <hsmci_read_word+0x68>)
  400d42:	8811      	ldrh	r1, [r2, #0]
  400d44:	4a10      	ldr	r2, [pc, #64]	; (400d88 <hsmci_read_word+0x6c>)
  400d46:	8812      	ldrh	r2, [r2, #0]
  400d48:	fb02 f201 	mul.w	r2, r2, r1
  400d4c:	4293      	cmp	r3, r2
  400d4e:	d312      	bcc.n	400d76 <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  400d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400d54:	4a09      	ldr	r2, [pc, #36]	; (400d7c <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  400d56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400d58:	4213      	tst	r3, r2
  400d5a:	d108      	bne.n	400d6e <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400d5c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400d60:	d0f9      	beq.n	400d56 <hsmci_read_word+0x3a>
	return true;
  400d62:	2001      	movs	r0, #1
  400d64:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400d66:	4b09      	ldr	r3, [pc, #36]	; (400d8c <hsmci_read_word+0x70>)
  400d68:	4798      	blx	r3
			return false;
  400d6a:	2000      	movs	r0, #0
  400d6c:	bd08      	pop	{r3, pc}
			hsmci_reset();
  400d6e:	4b07      	ldr	r3, [pc, #28]	; (400d8c <hsmci_read_word+0x70>)
  400d70:	4798      	blx	r3
			return false;
  400d72:	2000      	movs	r0, #0
  400d74:	bd08      	pop	{r3, pc}
		return true;
  400d76:	2001      	movs	r0, #1
}
  400d78:	bd08      	pop	{r3, pc}
  400d7a:	bf00      	nop
  400d7c:	c0600000 	.word	0xc0600000
  400d80:	20400494 	.word	0x20400494
  400d84:	2040048e 	.word	0x2040048e
  400d88:	20400490 	.word	0x20400490
  400d8c:	00400a5d 	.word	0x00400a5d

00400d90 <hsmci_start_read_blocks>:
#endif // HSMCI_MR_PDCMODE

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
#ifdef HSMCI_DMA_DMAEN
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d92:	b089      	sub	sp, #36	; 0x24
  400d94:	4607      	mov	r7, r0
  400d96:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400d98:	2220      	movs	r2, #32
  400d9a:	2100      	movs	r1, #0
  400d9c:	4668      	mov	r0, sp
  400d9e:	4b0e      	ldr	r3, [pc, #56]	; (400dd8 <hsmci_start_read_blocks+0x48>)
  400da0:	4798      	blx	r3
 */
static inline void xdmac_channel_disable(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400da2:	4e0e      	ldr	r6, [pc, #56]	; (400ddc <hsmci_start_read_blocks+0x4c>)
  400da4:	2501      	movs	r5, #1
  400da6:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400da8:	4b0d      	ldr	r3, [pc, #52]	; (400de0 <hsmci_start_read_blocks+0x50>)
  400daa:	881b      	ldrh	r3, [r3, #0]
  400dac:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400db0:	4b0c      	ldr	r3, [pc, #48]	; (400de4 <hsmci_start_read_blocks+0x54>)
  400db2:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF1
					| XDMAC_CC_DIF_AHB_IF0
					| XDMAC_CC_SAM_FIXED_AM
					| XDMAC_CC_DAM_INCREMENTED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400db4:	08a3      	lsrs	r3, r4, #2
  400db6:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400db8:	4b0b      	ldr	r3, [pc, #44]	; (400de8 <hsmci_start_read_blocks+0x58>)
  400dba:	9301      	str	r3, [sp, #4]
	p_cfg.mbr_da = (uint32_t)dest;
  400dbc:	9702      	str	r7, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400dbe:	466a      	mov	r2, sp
  400dc0:	2100      	movs	r1, #0
  400dc2:	4630      	mov	r0, r6
  400dc4:	4b09      	ldr	r3, [pc, #36]	; (400dec <hsmci_start_read_blocks+0x5c>)
  400dc6:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400dc8:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400dca:	4a09      	ldr	r2, [pc, #36]	; (400df0 <hsmci_start_read_blocks+0x60>)
  400dcc:	6813      	ldr	r3, [r2, #0]
  400dce:	441c      	add	r4, r3
  400dd0:	6014      	str	r4, [r2, #0]
	return true;
}
  400dd2:	4628      	mov	r0, r5
  400dd4:	b009      	add	sp, #36	; 0x24
  400dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400dd8:	004022f1 	.word	0x004022f1
  400ddc:	40078000 	.word	0x40078000
  400de0:	2040048e 	.word	0x2040048e
  400de4:	00043001 	.word	0x00043001
  400de8:	40000200 	.word	0x40000200
  400dec:	00401c69 	.word	0x00401c69
  400df0:	20400494 	.word	0x20400494

00400df4 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  400df4:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400df6:	4b12      	ldr	r3, [pc, #72]	; (400e40 <hsmci_wait_end_of_read_blocks+0x4c>)
  400df8:	881b      	ldrh	r3, [r3, #0]
  400dfa:	4a12      	ldr	r2, [pc, #72]	; (400e44 <hsmci_wait_end_of_read_blocks+0x50>)
  400dfc:	8812      	ldrh	r2, [r2, #0]
  400dfe:	fb02 f203 	mul.w	r2, r2, r3
  400e02:	4b11      	ldr	r3, [pc, #68]	; (400e48 <hsmci_wait_end_of_read_blocks+0x54>)
  400e04:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400e06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e0a:	4910      	ldr	r1, [pc, #64]	; (400e4c <hsmci_wait_end_of_read_blocks+0x58>)
 */
static inline uint32_t xdmac_channel_get_interrupt_status(Xdmac *xdmac, uint32_t channel_num)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400e0c:	4e10      	ldr	r6, [pc, #64]	; (400e50 <hsmci_wait_end_of_read_blocks+0x5c>)
  400e0e:	e009      	b.n	400e24 <hsmci_wait_end_of_read_blocks+0x30>
			hsmci_reset();
  400e10:	4b10      	ldr	r3, [pc, #64]	; (400e54 <hsmci_wait_end_of_read_blocks+0x60>)
  400e12:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400e14:	2201      	movs	r2, #1
  400e16:	4b0e      	ldr	r3, [pc, #56]	; (400e50 <hsmci_wait_end_of_read_blocks+0x5c>)
  400e18:	621a      	str	r2, [r3, #32]
			return false;
  400e1a:	2000      	movs	r0, #0
  400e1c:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400e1e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400e22:	d10a      	bne.n	400e3a <hsmci_wait_end_of_read_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400e24:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400e26:	420b      	tst	r3, r1
  400e28:	d1f2      	bne.n	400e10 <hsmci_wait_end_of_read_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400e2a:	42a2      	cmp	r2, r4
  400e2c:	d9f7      	bls.n	400e1e <hsmci_wait_end_of_read_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400e2e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400e30:	f015 0f01 	tst.w	r5, #1
  400e34:	d0f3      	beq.n	400e1e <hsmci_wait_end_of_read_blocks+0x2a>
				return true;
  400e36:	2001      	movs	r0, #1
	return true;
}
  400e38:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400e3a:	2001      	movs	r0, #1
  400e3c:	bd70      	pop	{r4, r5, r6, pc}
  400e3e:	bf00      	nop
  400e40:	2040048e 	.word	0x2040048e
  400e44:	20400490 	.word	0x20400490
  400e48:	20400494 	.word	0x20400494
  400e4c:	c0600000 	.word	0xc0600000
  400e50:	40078000 	.word	0x40078000
  400e54:	00400a5d 	.word	0x00400a5d

00400e58 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e5a:	b089      	sub	sp, #36	; 0x24
  400e5c:	4607      	mov	r7, r0
  400e5e:	460c      	mov	r4, r1
	xdmac_channel_config_t p_cfg = {0, 0, 0, 0, 0, 0, 0, 0};
  400e60:	2220      	movs	r2, #32
  400e62:	2100      	movs	r1, #0
  400e64:	4668      	mov	r0, sp
  400e66:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <hsmci_start_write_blocks+0x48>)
  400e68:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400e6a:	4e0e      	ldr	r6, [pc, #56]	; (400ea4 <hsmci_start_write_blocks+0x4c>)
  400e6c:	2501      	movs	r5, #1
  400e6e:	6235      	str	r5, [r6, #32]
	Assert(nb_block);
	Assert(dest);

	xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);

	nb_data = nb_block * hsmci_block_size;
  400e70:	4b0d      	ldr	r3, [pc, #52]	; (400ea8 <hsmci_start_write_blocks+0x50>)
  400e72:	881b      	ldrh	r3, [r3, #0]
  400e74:	fb04 f403 	mul.w	r4, r4, r3

	p_cfg.mbr_cfg = XDMAC_CC_TYPE_PER_TRAN
  400e78:	4b0c      	ldr	r3, [pc, #48]	; (400eac <hsmci_start_write_blocks+0x54>)
  400e7a:	9303      	str	r3, [sp, #12]
					| XDMAC_CC_SIF_AHB_IF0
					| XDMAC_CC_DIF_AHB_IF1
					| XDMAC_CC_SAM_INCREMENTED_AM
					| XDMAC_CC_DAM_FIXED_AM
					| XDMAC_CC_PERID(CONF_HSMCI_XDMAC_CHANNEL);
	p_cfg.mbr_ubc = nb_data / 4;
  400e7c:	08a3      	lsrs	r3, r4, #2
  400e7e:	9300      	str	r3, [sp, #0]
	p_cfg.mbr_sa = (uint32_t)src;
  400e80:	9701      	str	r7, [sp, #4]
	p_cfg.mbr_da = (uint32_t)&(HSMCI->HSMCI_FIFO[0]);
  400e82:	4b0b      	ldr	r3, [pc, #44]	; (400eb0 <hsmci_start_write_blocks+0x58>)
  400e84:	9302      	str	r3, [sp, #8]
	xdmac_configure_transfer(XDMAC, CONF_HSMCI_XDMAC_CHANNEL, &p_cfg);
  400e86:	466a      	mov	r2, sp
  400e88:	2100      	movs	r1, #0
  400e8a:	4630      	mov	r0, r6
  400e8c:	4b09      	ldr	r3, [pc, #36]	; (400eb4 <hsmci_start_write_blocks+0x5c>)
  400e8e:	4798      	blx	r3
	xdmac->XDMAC_GE = (XDMAC_GE_EN0 << channel_num);
  400e90:	61f5      	str	r5, [r6, #28]
	xdmac_channel_enable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
	hsmci_transfert_pos += nb_data;
  400e92:	4a09      	ldr	r2, [pc, #36]	; (400eb8 <hsmci_start_write_blocks+0x60>)
  400e94:	6813      	ldr	r3, [r2, #0]
  400e96:	441c      	add	r4, r3
  400e98:	6014      	str	r4, [r2, #0]
	return true;
}
  400e9a:	4628      	mov	r0, r5
  400e9c:	b009      	add	sp, #36	; 0x24
  400e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400ea0:	004022f1 	.word	0x004022f1
  400ea4:	40078000 	.word	0x40078000
  400ea8:	2040048e 	.word	0x2040048e
  400eac:	00015011 	.word	0x00015011
  400eb0:	40000200 	.word	0x40000200
  400eb4:	00401c69 	.word	0x00401c69
  400eb8:	20400494 	.word	0x20400494

00400ebc <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  400ebc:	b570      	push	{r4, r5, r6, lr}
			hsmci_reset();
			// Disable XDMAC
			xdmac_channel_disable(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400ebe:	4b12      	ldr	r3, [pc, #72]	; (400f08 <hsmci_wait_end_of_write_blocks+0x4c>)
  400ec0:	881b      	ldrh	r3, [r3, #0]
  400ec2:	4a12      	ldr	r2, [pc, #72]	; (400f0c <hsmci_wait_end_of_write_blocks+0x50>)
  400ec4:	8812      	ldrh	r2, [r2, #0]
  400ec6:	fb02 f203 	mul.w	r2, r2, r3
  400eca:	4b11      	ldr	r3, [pc, #68]	; (400f10 <hsmci_wait_end_of_write_blocks+0x54>)
  400ecc:	681c      	ldr	r4, [r3, #0]
		sr = HSMCI->HSMCI_SR;
  400ece:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400ed2:	4910      	ldr	r1, [pc, #64]	; (400f14 <hsmci_wait_end_of_write_blocks+0x58>)
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400ed4:	4e10      	ldr	r6, [pc, #64]	; (400f18 <hsmci_wait_end_of_write_blocks+0x5c>)
  400ed6:	e009      	b.n	400eec <hsmci_wait_end_of_write_blocks+0x30>
			hsmci_reset();
  400ed8:	4b10      	ldr	r3, [pc, #64]	; (400f1c <hsmci_wait_end_of_write_blocks+0x60>)
  400eda:	4798      	blx	r3
	xdmac->XDMAC_GD =(XDMAC_GD_DI0 << channel_num);
  400edc:	2201      	movs	r2, #1
  400ede:	4b0e      	ldr	r3, [pc, #56]	; (400f18 <hsmci_wait_end_of_write_blocks+0x5c>)
  400ee0:	621a      	str	r2, [r3, #32]
			return false;
  400ee2:	2000      	movs	r0, #0
  400ee4:	bd70      	pop	{r4, r5, r6, pc}
			dma_sr = xdmac_channel_get_interrupt_status(XDMAC, CONF_HSMCI_XDMAC_CHANNEL);
			if (dma_sr & XDMAC_CIS_BIS) {
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  400ee6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400eea:	d10a      	bne.n	400f02 <hsmci_wait_end_of_write_blocks+0x46>
		sr = HSMCI->HSMCI_SR;
  400eec:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  400eee:	420b      	tst	r3, r1
  400ef0:	d1f2      	bne.n	400ed8 <hsmci_wait_end_of_write_blocks+0x1c>
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  400ef2:	42a2      	cmp	r2, r4
  400ef4:	d9f7      	bls.n	400ee6 <hsmci_wait_end_of_write_blocks+0x2a>
	return xdmac->XDMAC_CHID[channel_num].XDMAC_CIS;
  400ef6:	6df5      	ldr	r5, [r6, #92]	; 0x5c
			if (dma_sr & XDMAC_CIS_BIS) {
  400ef8:	f015 0f01 	tst.w	r5, #1
  400efc:	d0f3      	beq.n	400ee6 <hsmci_wait_end_of_write_blocks+0x2a>
				return true;
  400efe:	2001      	movs	r0, #1

	return true;
}
  400f00:	bd70      	pop	{r4, r5, r6, pc}
	return true;
  400f02:	2001      	movs	r0, #1
  400f04:	bd70      	pop	{r4, r5, r6, pc}
  400f06:	bf00      	nop
  400f08:	2040048e 	.word	0x2040048e
  400f0c:	20400490 	.word	0x20400490
  400f10:	20400494 	.word	0x20400494
  400f14:	c0600000 	.word	0xc0600000
  400f18:	40078000 	.word	0x40078000
  400f1c:	00400a5d 	.word	0x00400a5d

00400f20 <matrix_set_system_io>:

	p_matrix->MATRIX_SYSIO = ul_io;

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)
	
	p_matrix->CCFG_SYSIO &= 0xFFFF0000;
  400f20:	4b06      	ldr	r3, [pc, #24]	; (400f3c <matrix_set_system_io+0x1c>)
  400f22:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  400f26:	4a06      	ldr	r2, [pc, #24]	; (400f40 <matrix_set_system_io+0x20>)
  400f28:	400a      	ands	r2, r1
  400f2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	p_matrix->CCFG_SYSIO |= (ul_io & 0xFFFF);
  400f2e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400f32:	b280      	uxth	r0, r0
  400f34:	4310      	orrs	r0, r2
  400f36:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  400f3a:	4770      	bx	lr
  400f3c:	40088000 	.word	0x40088000
  400f40:	ffff0000 	.word	0xffff0000

00400f44 <matrix_get_system_io>:

	return (p_matrix->MATRIX_SYSIO);

#elif (SAMV71 || SAMV70 || SAMS70 || SAME70)

	return (p_matrix->CCFG_SYSIO & 0xFFFF);		// CCFG_SYSIO: SOFTWARE API DEFINITION FOR AHB Bus Matrix
  400f44:	4b02      	ldr	r3, [pc, #8]	; (400f50 <matrix_get_system_io+0xc>)
  400f46:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
#else

	return (p_matrix->CCFG_SYSIO);

#endif
}
  400f4a:	b280      	uxth	r0, r0
  400f4c:	4770      	bx	lr
  400f4e:	bf00      	nop
  400f50:	40088000 	.word	0x40088000

00400f54 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400f54:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400f56:	4770      	bx	lr

00400f58 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400f58:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400f5a:	4770      	bx	lr

00400f5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f60:	4604      	mov	r4, r0
  400f62:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f64:	4b0e      	ldr	r3, [pc, #56]	; (400fa0 <pio_handler_process+0x44>)
  400f66:	4798      	blx	r3
  400f68:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f6a:	4620      	mov	r0, r4
  400f6c:	4b0d      	ldr	r3, [pc, #52]	; (400fa4 <pio_handler_process+0x48>)
  400f6e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f70:	4005      	ands	r5, r0
  400f72:	d013      	beq.n	400f9c <pio_handler_process+0x40>
  400f74:	4c0c      	ldr	r4, [pc, #48]	; (400fa8 <pio_handler_process+0x4c>)
  400f76:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f7a:	e003      	b.n	400f84 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f7c:	42b4      	cmp	r4, r6
  400f7e:	d00d      	beq.n	400f9c <pio_handler_process+0x40>
  400f80:	3410      	adds	r4, #16
		while (status != 0) {
  400f82:	b15d      	cbz	r5, 400f9c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f84:	6820      	ldr	r0, [r4, #0]
  400f86:	4540      	cmp	r0, r8
  400f88:	d1f8      	bne.n	400f7c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f8a:	6861      	ldr	r1, [r4, #4]
  400f8c:	4229      	tst	r1, r5
  400f8e:	d0f5      	beq.n	400f7c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f90:	68e3      	ldr	r3, [r4, #12]
  400f92:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f94:	6863      	ldr	r3, [r4, #4]
  400f96:	ea25 0503 	bic.w	r5, r5, r3
  400f9a:	e7ef      	b.n	400f7c <pio_handler_process+0x20>
  400f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fa0:	00400f55 	.word	0x00400f55
  400fa4:	00400f59 	.word	0x00400f59
  400fa8:	20400498 	.word	0x20400498

00400fac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400fac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400fae:	210b      	movs	r1, #11
  400fb0:	4801      	ldr	r0, [pc, #4]	; (400fb8 <PIOB_Handler+0xc>)
  400fb2:	4b02      	ldr	r3, [pc, #8]	; (400fbc <PIOB_Handler+0x10>)
  400fb4:	4798      	blx	r3
  400fb6:	bd08      	pop	{r3, pc}
  400fb8:	400e1000 	.word	0x400e1000
  400fbc:	00400f5d 	.word	0x00400f5d

00400fc0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400fc0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400fc2:	2110      	movs	r1, #16
  400fc4:	4801      	ldr	r0, [pc, #4]	; (400fcc <PIOD_Handler+0xc>)
  400fc6:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <PIOD_Handler+0x10>)
  400fc8:	4798      	blx	r3
  400fca:	bd08      	pop	{r3, pc}
  400fcc:	400e1400 	.word	0x400e1400
  400fd0:	00400f5d 	.word	0x00400f5d

00400fd4 <TWIHS_init>:
#include "definitions.h"



void TWIHS_init()
{	
  400fd4:	b500      	push	{lr}
  400fd6:	b085      	sub	sp, #20
	//Make sure you have the correct TWIHS
	twihs_options_t twihsOpt;
	twihsOpt.master_clk = sysclk_get_cpu_hz()/2; //make sure this is the correct clock to be checking
  400fd8:	4b1b      	ldr	r3, [pc, #108]	; (401048 <TWIHS_init+0x74>)
  400fda:	9301      	str	r3, [sp, #4]
	twihsOpt.speed = 100000; //100kHz
  400fdc:	4b1b      	ldr	r3, [pc, #108]	; (40104c <TWIHS_init+0x78>)
  400fde:	9302      	str	r3, [sp, #8]
	
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  400fe0:	4b1b      	ldr	r3, [pc, #108]	; (401050 <TWIHS_init+0x7c>)
  400fe2:	4798      	blx	r3
  400fe4:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  400fe8:	4b1a      	ldr	r3, [pc, #104]	; (401054 <TWIHS_init+0x80>)
  400fea:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400fec:	4b1a      	ldr	r3, [pc, #104]	; (401058 <TWIHS_init+0x84>)
  400fee:	2220      	movs	r2, #32
  400ff0:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400ff6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400ff8:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ffe:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401000:	f021 0120 	bic.w	r1, r1, #32
  401004:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401006:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401008:	f021 0120 	bic.w	r1, r1, #32
  40100c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40100e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401010:	2210      	movs	r2, #16
  401012:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401018:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40101a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40101c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401020:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401022:	f021 0110 	bic.w	r1, r1, #16
  401026:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401028:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40102a:	f021 0110 	bic.w	r1, r1, #16
  40102e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401030:	605a      	str	r2, [r3, #4]
	ioport_set_pin_mode(TWCK_PIN,TWCK_MODE);
	ioport_disable_pin(TWCK_PIN);
	ioport_set_pin_mode(TWD_PIN,TWD_MODE);
	ioport_disable_pin(TWD_PIN);

	pmc_enable_periph_clk(ID_TWIHS1);
  401032:	2014      	movs	r0, #20
  401034:	4b09      	ldr	r3, [pc, #36]	; (40105c <TWIHS_init+0x88>)
  401036:	4798      	blx	r3

	twihs_master_init(TWIHS1,&twihsOpt);
  401038:	a901      	add	r1, sp, #4
  40103a:	4809      	ldr	r0, [pc, #36]	; (401060 <TWIHS_init+0x8c>)
  40103c:	4b09      	ldr	r3, [pc, #36]	; (401064 <TWIHS_init+0x90>)
  40103e:	4798      	blx	r3
}
  401040:	b005      	add	sp, #20
  401042:	f85d fb04 	ldr.w	pc, [sp], #4
  401046:	bf00      	nop
  401048:	044aa200 	.word	0x044aa200
  40104c:	000186a0 	.word	0x000186a0
  401050:	00400f45 	.word	0x00400f45
  401054:	00400f21 	.word	0x00400f21
  401058:	400e1000 	.word	0x400e1000
  40105c:	00401b99 	.word	0x00401b99
  401060:	4001c000 	.word	0x4001c000
  401064:	00401c35 	.word	0x00401c35

00401068 <SPI_BitBang_init>:

void SPI_BitBang_init()
{
  401068:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_PIOB);
  40106a:	200b      	movs	r0, #11
  40106c:	4b10      	ldr	r3, [pc, #64]	; (4010b0 <SPI_BitBang_init+0x48>)
  40106e:	4798      	blx	r3
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  401070:	4b10      	ldr	r3, [pc, #64]	; (4010b4 <SPI_BitBang_init+0x4c>)
  401072:	4798      	blx	r3
  401074:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  401078:	4b0f      	ldr	r3, [pc, #60]	; (4010b8 <SPI_BitBang_init+0x50>)
  40107a:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40107c:	4b0f      	ldr	r3, [pc, #60]	; (4010bc <SPI_BitBang_init+0x54>)
  40107e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401082:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401084:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401088:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40108a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40108e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401090:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401094:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401096:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40109a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40109c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4010a0:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4010a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4010a6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4010a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4010ac:	631a      	str	r2, [r3, #48]	; 0x30
  4010ae:	bd08      	pop	{r3, pc}
  4010b0:	00401b99 	.word	0x00401b99
  4010b4:	00400f45 	.word	0x00400f45
  4010b8:	00400f21 	.word	0x00400f21
  4010bc:	400e1400 	.word	0x400e1400

004010c0 <EnableClockMngmnt1>:
#include "PYTHON480.h"


void EnableClockMngmnt1() 
{
  4010c0:	b510      	push	{r4, lr}
	// configure clock management blocks, activate clock generation and distribution circuits
	SPI_Write(2, 0x0000);// Monochrome sensor
  4010c2:	2100      	movs	r1, #0
  4010c4:	2002      	movs	r0, #2
  4010c6:	4c0e      	ldr	r4, [pc, #56]	; (401100 <EnableClockMngmnt1+0x40>)
  4010c8:	47a0      	blx	r4
	SPI_Write(17, 0x2113);// Configure PLL
  4010ca:	f242 1113 	movw	r1, #8467	; 0x2113
  4010ce:	2011      	movs	r0, #17
  4010d0:	47a0      	blx	r4
	SPI_Write(20, 0x0000);// Configure clock management
  4010d2:	2100      	movs	r1, #0
  4010d4:	2014      	movs	r0, #20
  4010d6:	47a0      	blx	r4
	SPI_Write(26, 0x2280);// Configure PLL lock detector
  4010d8:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  4010dc:	201a      	movs	r0, #26
  4010de:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);// Configure PLL lock detector
  4010e0:	f643 512d 	movw	r1, #15661	; 0x3d2d
  4010e4:	201b      	movs	r0, #27
  4010e6:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7014|0x0008);// SPI_Write(32, 0x2004);PLL input clock
  4010e8:	f247 011c 	movw	r1, #28700	; 0x701c
  4010ec:	2020      	movs	r0, #32
  4010ee:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7014);// SPI_Write(32, 0x2004);PLL input clock
	#endif
	
	SPI_Write(8, 0x0000);// Release PLL soft reset
  4010f0:	2100      	movs	r1, #0
  4010f2:	2008      	movs	r0, #8
  4010f4:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(16,0x0007);// Disable PLL
  4010f6:	2107      	movs	r1, #7
  4010f8:	2010      	movs	r0, #16
  4010fa:	47a0      	blx	r4
  4010fc:	bd10      	pop	{r4, pc}
  4010fe:	bf00      	nop
  401100:	004017f1 	.word	0x004017f1

00401104 <EnableClockMngmnt2>:
		SPI_Write(16, 0x0003);// Enable PLL Andres says to make this 0x0007. I originally had it at 0x0004. Try 0x0003
	#endif
}

void EnableClockMngmnt2() 
{// Enable internal clock distribution
  401104:	b510      	push	{r4, lr}
	SPI_Write(9, 0x0000);// Release clock generator Soft Reset
  401106:	2100      	movs	r1, #0
  401108:	2009      	movs	r0, #9
  40110a:	4c05      	ldr	r4, [pc, #20]	; (401120 <EnableClockMngmnt2+0x1c>)
  40110c:	47a0      	blx	r4

	//Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7006|0x0008);// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
  40110e:	f247 010e 	movw	r1, #28686	; 0x700e
  401112:	2020      	movs	r0, #32
  401114:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7006);// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	SPI_Write(34, 0x0001);// Enable logic blocks
  401116:	2101      	movs	r1, #1
  401118:	2022      	movs	r0, #34	; 0x22
  40111a:	47a0      	blx	r4
  40111c:	bd10      	pop	{r4, pc}
  40111e:	bf00      	nop
  401120:	004017f1 	.word	0x004017f1

00401124 <RequiredUploads>:
}

void RequiredUploads() 
{// Reserved register settings uploads
  401124:	b510      	push	{r4, lr}
	SPI_Write(2, 0x0000);
  401126:	2100      	movs	r1, #0
  401128:	2002      	movs	r0, #2
  40112a:	4ccd      	ldr	r4, [pc, #820]	; (401460 <RequiredUploads+0x33c>)
  40112c:	47a0      	blx	r4
	SPI_Write(8, 0x0000);
  40112e:	2100      	movs	r1, #0
  401130:	2008      	movs	r0, #8
  401132:	47a0      	blx	r4
	SPI_Write(9, 0x0000);
  401134:	2100      	movs	r1, #0
  401136:	2009      	movs	r0, #9
  401138:	47a0      	blx	r4
	SPI_Write(10, 0x0000);
  40113a:	2100      	movs	r1, #0
  40113c:	200a      	movs	r0, #10
  40113e:	47a0      	blx	r4
	SPI_Write(20, 0x0000);
  401140:	2100      	movs	r1, #0
  401142:	2014      	movs	r0, #20
  401144:	47a0      	blx	r4
	//SPI_Write(24, 0x0001);
	SPI_Write(26, 0x2280);
  401146:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  40114a:	201a      	movs	r0, #26
  40114c:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);
  40114e:	f643 512d 	movw	r1, #15661	; 0x3d2d
  401152:	201b      	movs	r0, #27
  401154:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);
  401156:	f247 010f 	movw	r1, #28687	; 0x700f
  40115a:	2020      	movs	r0, #32
  40115c:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7007);
	#endif
	
	SPI_Write(34, 0x0001);
  40115e:	2101      	movs	r1, #1
  401160:	2022      	movs	r0, #34	; 0x22
  401162:	47a0      	blx	r4
	SPI_Write(40, 0x0007); // 3rd bit enables bias. This was set to 0 (0x003).
  401164:	2107      	movs	r1, #7
  401166:	2028      	movs	r0, #40	; 0x28
  401168:	47a0      	blx	r4
	SPI_Write(41, 0x085F);
  40116a:	f640 015f 	movw	r1, #2143	; 0x85f
  40116e:	2029      	movs	r0, #41	; 0x29
  401170:	47a0      	blx	r4
	SPI_Write(42, 0x4103);
  401172:	f244 1103 	movw	r1, #16643	; 0x4103
  401176:	202a      	movs	r0, #42	; 0x2a
  401178:	47a0      	blx	r4
	SPI_Write(43, 0x0518);
  40117a:	f44f 61a3 	mov.w	r1, #1304	; 0x518
  40117e:	202b      	movs	r0, #43	; 0x2b
  401180:	47a0      	blx	r4
	SPI_Write(48, 0x0001);
  401182:	2101      	movs	r1, #1
  401184:	2030      	movs	r0, #48	; 0x30
  401186:	47a0      	blx	r4
	SPI_Write(64, 0x0001);
  401188:	2101      	movs	r1, #1
  40118a:	2040      	movs	r0, #64	; 0x40
  40118c:	47a0      	blx	r4
	SPI_Write(65, 0x382A); //Bias block. SPI_Write(65, 0x382B)
  40118e:	f643 012a 	movw	r1, #14378	; 0x382a
  401192:	2041      	movs	r0, #65	; 0x41
  401194:	47a0      	blx	r4
	SPI_Write(66, 0x53C8);
  401196:	f245 31c8 	movw	r1, #21448	; 0x53c8
  40119a:	2042      	movs	r0, #66	; 0x42
  40119c:	47a0      	blx	r4
	SPI_Write(67, 0x0665);
  40119e:	f240 6165 	movw	r1, #1637	; 0x665
  4011a2:	2043      	movs	r0, #67	; 0x43
  4011a4:	47a0      	blx	r4
	SPI_Write(68, 0x0085);
  4011a6:	2185      	movs	r1, #133	; 0x85
  4011a8:	2044      	movs	r0, #68	; 0x44
  4011aa:	47a0      	blx	r4
	SPI_Write(69, 0x0888);
  4011ac:	f640 0188 	movw	r1, #2184	; 0x888
  4011b0:	2045      	movs	r0, #69	; 0x45
  4011b2:	47a0      	blx	r4
	SPI_Write(70, 0x4800);
  4011b4:	f44f 4190 	mov.w	r1, #18432	; 0x4800
  4011b8:	2046      	movs	r0, #70	; 0x46
  4011ba:	47a0      	blx	r4
	SPI_Write(71, 0x8888);
  4011bc:	f648 0188 	movw	r1, #34952	; 0x8888
  4011c0:	2047      	movs	r0, #71	; 0x47
  4011c2:	47a0      	blx	r4
	SPI_Write(72, 0x0117);
  4011c4:	f240 1117 	movw	r1, #279	; 0x117
  4011c8:	2048      	movs	r0, #72	; 0x48
  4011ca:	47a0      	blx	r4
	//SPI_Write(112, 0x0007);
	SPI_Write(112, 0x0000); // LVDS power-down config
  4011cc:	2100      	movs	r1, #0
  4011ce:	2070      	movs	r0, #112	; 0x70
  4011d0:	47a0      	blx	r4
	SPI_Write(128, 0x470A); //SPI_Write(128, 0x470A); SPI_Write(128, 0x4714); black offset
  4011d2:	f244 710a 	movw	r1, #18186	; 0x470a
  4011d6:	2080      	movs	r0, #128	; 0x80
  4011d8:	47a0      	blx	r4
	SPI_Write(129, 0x8001);
  4011da:	f248 0101 	movw	r1, #32769	; 0x8001
  4011de:	2081      	movs	r0, #129	; 0x81
  4011e0:	47a0      	blx	r4
	//SPI_Write(130, 0x0001); // Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	//SPI_Write(144,0x0003);

	SPI_Write(130, 0x0015);
  4011e2:	2115      	movs	r1, #21
  4011e4:	2082      	movs	r0, #130	; 0x82
  4011e6:	47a0      	blx	r4
	SPI_Write(192, 0x0801); // Monitor select function
  4011e8:	f640 0101 	movw	r1, #2049	; 0x801
  4011ec:	20c0      	movs	r0, #192	; 0xc0
  4011ee:	47a0      	blx	r4
	SPI_Write(194, 0x03E4);	// reverse x and y enabled for demo kit compatibility
  4011f0:	f44f 7179 	mov.w	r1, #996	; 0x3e4
  4011f4:	20c2      	movs	r0, #194	; 0xc2
  4011f6:	47a0      	blx	r4
	SPI_Write(197, 0x0380); // Num black lines SPI_Write(197, 0x030A);
  4011f8:	f44f 7160 	mov.w	r1, #896	; 0x380
  4011fc:	20c5      	movs	r0, #197	; 0xc5
  4011fe:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(199, 167); // Exposure/Frame rate config, SPI_Write(199, 0x0299);
  401200:	21a7      	movs	r1, #167	; 0xa7
  401202:	20c7      	movs	r0, #199	; 0xc7
  401204:	47a0      	blx	r4
		SPI_Write(200, 5000); // Frame length, SPI_Write(200, 0x0350);
  401206:	f241 3188 	movw	r1, #5000	; 0x1388
  40120a:	20c8      	movs	r0, #200	; 0xc8
  40120c:	47a0      	blx	r4
		SPI_Write(201, 4900); // SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
  40120e:	f241 3124 	movw	r1, #4900	; 0x1324
  401212:	20c9      	movs	r0, #201	; 0xc9
  401214:	47a0      	blx	r4
		SPI_Write(199, 666); // Exposure/Frame rate config, SPI_Write(199, 0x0299);
		SPI_Write(200, 3000); // Frame length, SPI_Write(200, 0x0350);
		SPI_Write(201, 2900); // SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
	#endif
	
	SPI_Write(204, 0x0024); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  401216:	2124      	movs	r1, #36	; 0x24
  401218:	20cc      	movs	r0, #204	; 0xcc
  40121a:	47a0      	blx	r4
	SPI_Write(207, 0x0014);
  40121c:	2114      	movs	r1, #20
  40121e:	20cf      	movs	r0, #207	; 0xcf
  401220:	47a0      	blx	r4
	SPI_Write(214, 0x0100);
  401222:	f44f 7180 	mov.w	r1, #256	; 0x100
  401226:	20d6      	movs	r0, #214	; 0xd6
  401228:	47a0      	blx	r4
	SPI_Write(215, 0x101F);
  40122a:	f241 011f 	movw	r1, #4127	; 0x101f
  40122e:	20d7      	movs	r0, #215	; 0xd7
  401230:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  401232:	2100      	movs	r1, #0
  401234:	20d8      	movs	r0, #216	; 0xd8
  401236:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  401238:	2123      	movs	r1, #35	; 0x23
  40123a:	20db      	movs	r0, #219	; 0xdb
  40123c:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  40123e:	f643 412b 	movw	r1, #15403	; 0x3c2b
  401242:	20dc      	movs	r0, #220	; 0xdc
  401244:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  401246:	f642 314d 	movw	r1, #11085	; 0x2b4d
  40124a:	20dd      	movs	r0, #221	; 0xdd
  40124c:	47a0      	blx	r4
	SPI_Write(224, 0x3E5E);
  40124e:	f643 615e 	movw	r1, #15966	; 0x3e5e
  401252:	20e0      	movs	r0, #224	; 0xe0
  401254:	47a0      	blx	r4
	SPI_Write(211, 0x0049);
  401256:	2149      	movs	r1, #73	; 0x49
  401258:	20d3      	movs	r0, #211	; 0xd3
  40125a:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  40125c:	2100      	movs	r1, #0
  40125e:	20d8      	movs	r0, #216	; 0xd8
  401260:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  401262:	2123      	movs	r1, #35	; 0x23
  401264:	20db      	movs	r0, #219	; 0xdb
  401266:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  401268:	f643 412b 	movw	r1, #15403	; 0x3c2b
  40126c:	20dc      	movs	r0, #220	; 0xdc
  40126e:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  401270:	f642 314d 	movw	r1, #11085	; 0x2b4d
  401274:	20dd      	movs	r0, #221	; 0xdd
  401276:	47a0      	blx	r4
	SPI_Write(230, 0x0299);
  401278:	f240 2199 	movw	r1, #665	; 0x299
  40127c:	20e6      	movs	r0, #230	; 0xe6
  40127e:	47a0      	blx	r4
	SPI_Write(231, 0x0350);
  401280:	f44f 7154 	mov.w	r1, #848	; 0x350
  401284:	20e7      	movs	r0, #231	; 0xe7
  401286:	47a0      	blx	r4
	SPI_Write(232, 0x01F4);
  401288:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  40128c:	20e8      	movs	r0, #232	; 0xe8
  40128e:	47a0      	blx	r4
	SPI_Write(235, 0x00E1);
  401290:	21e1      	movs	r1, #225	; 0xe1
  401292:	20eb      	movs	r0, #235	; 0xeb
  401294:	47a0      	blx	r4


	//////////////////////////////////////////
	////// PROGRAM SPACE //////
	//////////////////////////////////////////
	SPI_Write(384, 0xC800);
  401296:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40129a:	f44f 70c0 	mov.w	r0, #384	; 0x180
  40129e:	47a0      	blx	r4
	SPI_Write(385, 0xFB1F);
  4012a0:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  4012a4:	f240 1081 	movw	r0, #385	; 0x181
  4012a8:	47a0      	blx	r4
	SPI_Write(386, 0xFB1F);
  4012aa:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  4012ae:	f44f 70c1 	mov.w	r0, #386	; 0x182
  4012b2:	47a0      	blx	r4
	SPI_Write(387, 0xFB12);
  4012b4:	f64f 3112 	movw	r1, #64274	; 0xfb12
  4012b8:	f240 1083 	movw	r0, #387	; 0x183
  4012bc:	47a0      	blx	r4
	SPI_Write(388, 0xF912);
  4012be:	f64f 1112 	movw	r1, #63762	; 0xf912
  4012c2:	f44f 70c2 	mov.w	r0, #388	; 0x184
  4012c6:	47a0      	blx	r4
	SPI_Write(389, 0xF903);
  4012c8:	f64f 1103 	movw	r1, #63747	; 0xf903
  4012cc:	f240 1085 	movw	r0, #389	; 0x185
  4012d0:	47a0      	blx	r4
	SPI_Write(390, 0xF802);
  4012d2:	f64f 0102 	movw	r1, #63490	; 0xf802
  4012d6:	f44f 70c3 	mov.w	r0, #390	; 0x186
  4012da:	47a0      	blx	r4
	SPI_Write(391, 0xF30F);
  4012dc:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4012e0:	f240 1087 	movw	r0, #391	; 0x187
  4012e4:	47a0      	blx	r4
	SPI_Write(392, 0xF30F);
  4012e6:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4012ea:	f44f 70c4 	mov.w	r0, #392	; 0x188
  4012ee:	47a0      	blx	r4
	SPI_Write(393, 0xF30F);
  4012f0:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4012f4:	f240 1089 	movw	r0, #393	; 0x189
  4012f8:	47a0      	blx	r4
	SPI_Write(394, 0xF30A);
  4012fa:	f24f 310a 	movw	r1, #62218	; 0xf30a
  4012fe:	f44f 70c5 	mov.w	r0, #394	; 0x18a
  401302:	47a0      	blx	r4
	SPI_Write(395, 0xF101);
  401304:	f24f 1101 	movw	r1, #61697	; 0xf101
  401308:	f240 108b 	movw	r0, #395	; 0x18b
  40130c:	47a0      	blx	r4
	SPI_Write(396, 0xF00A);
  40130e:	f24f 010a 	movw	r1, #61450	; 0xf00a
  401312:	f44f 70c6 	mov.w	r0, #396	; 0x18c
  401316:	47a0      	blx	r4
	SPI_Write(397, 0xF24B);
  401318:	f24f 214b 	movw	r1, #62027	; 0xf24b
  40131c:	f240 108d 	movw	r0, #397	; 0x18d
  401320:	47a0      	blx	r4
	SPI_Write(398, 0xF201);
  401322:	f24f 2101 	movw	r1, #61953	; 0xf201
  401326:	f44f 70c7 	mov.w	r0, #398	; 0x18e
  40132a:	47a0      	blx	r4
	SPI_Write(399, 0xF226);
  40132c:	f24f 2126 	movw	r1, #61990	; 0xf226
  401330:	f240 108f 	movw	r0, #399	; 0x18f
  401334:	47a0      	blx	r4
	SPI_Write(400, 0xF021);
  401336:	f24f 0121 	movw	r1, #61473	; 0xf021
  40133a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40133e:	47a0      	blx	r4
	SPI_Write(401, 0xF001);
  401340:	f24f 0101 	movw	r1, #61441	; 0xf001
  401344:	f240 1091 	movw	r0, #401	; 0x191
  401348:	47a0      	blx	r4
	SPI_Write(402, 0xF402);
  40134a:	f24f 4102 	movw	r1, #62466	; 0xf402
  40134e:	f44f 70c9 	mov.w	r0, #402	; 0x192
  401352:	47a0      	blx	r4
	SPI_Write(403, 0xF007);
  401354:	f24f 0107 	movw	r1, #61447	; 0xf007
  401358:	f240 1093 	movw	r0, #403	; 0x193
  40135c:	47a0      	blx	r4
	SPI_Write(404, 0xF20F);
  40135e:	f24f 210f 	movw	r1, #61967	; 0xf20f
  401362:	f44f 70ca 	mov.w	r0, #404	; 0x194
  401366:	47a0      	blx	r4
	SPI_Write(405, 0xF20F);
  401368:	f24f 210f 	movw	r1, #61967	; 0xf20f
  40136c:	f240 1095 	movw	r0, #405	; 0x195
  401370:	47a0      	blx	r4
	SPI_Write(406, 0xF202);
  401372:	f24f 2102 	movw	r1, #61954	; 0xf202
  401376:	f44f 70cb 	mov.w	r0, #406	; 0x196
  40137a:	47a0      	blx	r4
	SPI_Write(407, 0xF006);
  40137c:	f24f 0106 	movw	r1, #61446	; 0xf006
  401380:	f240 1097 	movw	r0, #407	; 0x197
  401384:	47a0      	blx	r4
	SPI_Write(408, 0xEC08);
  401386:	f64e 4108 	movw	r1, #60424	; 0xec08
  40138a:	f44f 70cc 	mov.w	r0, #408	; 0x198
  40138e:	47a0      	blx	r4
	SPI_Write(409, 0xC801);
  401390:	f64c 0101 	movw	r1, #51201	; 0xc801
  401394:	f240 1099 	movw	r0, #409	; 0x199
  401398:	47a0      	blx	r4
	SPI_Write(410, 0xC800);
  40139a:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40139e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
  4013a2:	47a0      	blx	r4

	SPI_Write(419, 0xC800);
  4013a4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  4013a8:	f240 10a3 	movw	r0, #419	; 0x1a3
  4013ac:	47a0      	blx	r4
	SPI_Write(420, 0xCC02);
  4013ae:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4013b2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
  4013b6:	47a0      	blx	r4
	SPI_Write(421, 0xCC01);
  4013b8:	f64c 4101 	movw	r1, #52225	; 0xcc01
  4013bc:	f240 10a5 	movw	r0, #421	; 0x1a5
  4013c0:	47a0      	blx	r4
	SPI_Write(422, 0xCC02);
  4013c2:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4013c6:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
  4013ca:	47a0      	blx	r4
	SPI_Write(423, 0xCC01);
  4013cc:	f64c 4101 	movw	r1, #52225	; 0xcc01
  4013d0:	f240 10a7 	movw	r0, #423	; 0x1a7
  4013d4:	47a0      	blx	r4
	SPI_Write(424, 0xCC02);
  4013d6:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4013da:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
  4013de:	47a0      	blx	r4
	SPI_Write(425, 0xC805);
  4013e0:	f64c 0105 	movw	r1, #51205	; 0xc805
  4013e4:	f240 10a9 	movw	r0, #425	; 0x1a9
  4013e8:	47a0      	blx	r4
	SPI_Write(426, 0xC800);
  4013ea:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  4013ee:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
  4013f2:	47a0      	blx	r4

	SPI_Write(427, 0x0030);
  4013f4:	2130      	movs	r1, #48	; 0x30
  4013f6:	f240 10ab 	movw	r0, #427	; 0x1ab
  4013fa:	47a0      	blx	r4
	SPI_Write(428, 0x207B);
  4013fc:	f242 017b 	movw	r1, #8315	; 0x207b
  401400:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
  401404:	47a0      	blx	r4
	SPI_Write(429, 0x2071);
  401406:	f242 0171 	movw	r1, #8305	; 0x2071
  40140a:	f240 10ad 	movw	r0, #429	; 0x1ad
  40140e:	47a0      	blx	r4
	SPI_Write(430, 0x0071);
  401410:	2171      	movs	r1, #113	; 0x71
  401412:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
  401416:	47a0      	blx	r4
	SPI_Write(431, 0x107F);
  401418:	f241 017f 	movw	r1, #4223	; 0x107f
  40141c:	f240 10af 	movw	r0, #431	; 0x1af
  401420:	47a0      	blx	r4
	SPI_Write(432, 0x1072);
  401422:	f241 0172 	movw	r1, #4210	; 0x1072
  401426:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
  40142a:	47a0      	blx	r4
	SPI_Write(433, 0x1074);
  40142c:	f241 0174 	movw	r1, #4212	; 0x1074
  401430:	f240 10b1 	movw	r0, #433	; 0x1b1
  401434:	47a0      	blx	r4
	SPI_Write(434, 0x0071);
  401436:	2171      	movs	r1, #113	; 0x71
  401438:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
  40143c:	47a0      	blx	r4
	SPI_Write(435, 0x0031);
  40143e:	2131      	movs	r1, #49	; 0x31
  401440:	f240 10b3 	movw	r0, #435	; 0x1b3
  401444:	47a0      	blx	r4
	SPI_Write(436, 0x21BB);
  401446:	f242 11bb 	movw	r1, #8635	; 0x21bb
  40144a:	f44f 70da 	mov.w	r0, #436	; 0x1b4
  40144e:	47a0      	blx	r4
	SPI_Write(437, 0x20B1);
  401450:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401454:	f240 10b5 	movw	r0, #437	; 0x1b5
  401458:	47a0      	blx	r4
	SPI_Write(438, 0x00B1);
  40145a:	21b1      	movs	r1, #177	; 0xb1
  40145c:	e002      	b.n	401464 <RequiredUploads+0x340>
  40145e:	bf00      	nop
  401460:	004017f1 	.word	0x004017f1
  401464:	f44f 70db 	mov.w	r0, #438	; 0x1b6
  401468:	47a0      	blx	r4
	SPI_Write(439, 0x10BF);
  40146a:	f241 01bf 	movw	r1, #4287	; 0x10bf
  40146e:	f240 10b7 	movw	r0, #439	; 0x1b7
  401472:	47a0      	blx	r4
	SPI_Write(440, 0x10B2);
  401474:	f241 01b2 	movw	r1, #4274	; 0x10b2
  401478:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
  40147c:	47a0      	blx	r4
	SPI_Write(441, 0x10B4);
  40147e:	f241 01b4 	movw	r1, #4276	; 0x10b4
  401482:	f240 10b9 	movw	r0, #441	; 0x1b9
  401486:	47a0      	blx	r4
	SPI_Write(442, 0x00B1);
  401488:	21b1      	movs	r1, #177	; 0xb1
  40148a:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
  40148e:	47a0      	blx	r4
	SPI_Write(443, 0x0030);
  401490:	2130      	movs	r1, #48	; 0x30
  401492:	f240 10bb 	movw	r0, #443	; 0x1bb
  401496:	47a0      	blx	r4

	SPI_Write(444, 0x0030);
  401498:	2130      	movs	r1, #48	; 0x30
  40149a:	f44f 70de 	mov.w	r0, #444	; 0x1bc
  40149e:	47a0      	blx	r4
	SPI_Write(445, 0x217B);
  4014a0:	f242 117b 	movw	r1, #8571	; 0x217b
  4014a4:	f240 10bd 	movw	r0, #445	; 0x1bd
  4014a8:	47a0      	blx	r4
	SPI_Write(446, 0x2071);
  4014aa:	f242 0171 	movw	r1, #8305	; 0x2071
  4014ae:	f44f 70df 	mov.w	r0, #446	; 0x1be
  4014b2:	47a0      	blx	r4
	SPI_Write(447, 0x0071);
  4014b4:	2171      	movs	r1, #113	; 0x71
  4014b6:	f240 10bf 	movw	r0, #447	; 0x1bf
  4014ba:	47a0      	blx	r4
	SPI_Write(448, 0x107F);
  4014bc:	f241 017f 	movw	r1, #4223	; 0x107f
  4014c0:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
  4014c4:	47a0      	blx	r4
	SPI_Write(449, 0x1072);
  4014c6:	f241 0172 	movw	r1, #4210	; 0x1072
  4014ca:	f240 10c1 	movw	r0, #449	; 0x1c1
  4014ce:	47a0      	blx	r4
	SPI_Write(450, 0x1074);
  4014d0:	f241 0174 	movw	r1, #4212	; 0x1074
  4014d4:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
  4014d8:	47a0      	blx	r4
	SPI_Write(451, 0x0071);
  4014da:	2171      	movs	r1, #113	; 0x71
  4014dc:	f240 10c3 	movw	r0, #451	; 0x1c3
  4014e0:	47a0      	blx	r4
	SPI_Write(452, 0x0031);
  4014e2:	2131      	movs	r1, #49	; 0x31
  4014e4:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
  4014e8:	47a0      	blx	r4
	SPI_Write(453, 0x21BB);
  4014ea:	f242 11bb 	movw	r1, #8635	; 0x21bb
  4014ee:	f240 10c5 	movw	r0, #453	; 0x1c5
  4014f2:	47a0      	blx	r4
	SPI_Write(454, 0x20B1);
  4014f4:	f242 01b1 	movw	r1, #8369	; 0x20b1
  4014f8:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
  4014fc:	47a0      	blx	r4
	SPI_Write(455, 0x00B1);
  4014fe:	21b1      	movs	r1, #177	; 0xb1
  401500:	f240 10c7 	movw	r0, #455	; 0x1c7
  401504:	47a0      	blx	r4
	SPI_Write(456, 0x10BF);
  401506:	f241 01bf 	movw	r1, #4287	; 0x10bf
  40150a:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
  40150e:	47a0      	blx	r4
	SPI_Write(457, 0x10B2);
  401510:	f241 01b2 	movw	r1, #4274	; 0x10b2
  401514:	f240 10c9 	movw	r0, #457	; 0x1c9
  401518:	47a0      	blx	r4
	SPI_Write(458, 0x10B4);
  40151a:	f241 01b4 	movw	r1, #4276	; 0x10b4
  40151e:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
  401522:	47a0      	blx	r4
	SPI_Write(459, 0x00B1);
  401524:	21b1      	movs	r1, #177	; 0xb1
  401526:	f240 10cb 	movw	r0, #459	; 0x1cb
  40152a:	47a0      	blx	r4
	SPI_Write(460, 0x0030);
  40152c:	2130      	movs	r1, #48	; 0x30
  40152e:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  401532:	47a0      	blx	r4

	SPI_Write(461, 0x0030);
  401534:	2130      	movs	r1, #48	; 0x30
  401536:	f240 10cd 	movw	r0, #461	; 0x1cd
  40153a:	47a0      	blx	r4
	SPI_Write(462, 0x217B);
  40153c:	f242 117b 	movw	r1, #8571	; 0x217b
  401540:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
  401544:	47a0      	blx	r4
	SPI_Write(463, 0x2071);
  401546:	f242 0171 	movw	r1, #8305	; 0x2071
  40154a:	f240 10cf 	movw	r0, #463	; 0x1cf
  40154e:	47a0      	blx	r4
	SPI_Write(464, 0x0071);
  401550:	2171      	movs	r1, #113	; 0x71
  401552:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
  401556:	47a0      	blx	r4
	SPI_Write(465, 0x1071);
  401558:	f241 0171 	movw	r1, #4209	; 0x1071
  40155c:	f240 10d1 	movw	r0, #465	; 0x1d1
  401560:	47a0      	blx	r4
	SPI_Write(466, 0x0071);
  401562:	2171      	movs	r1, #113	; 0x71
  401564:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
  401568:	47a0      	blx	r4
	SPI_Write(467, 0x0031);
  40156a:	2131      	movs	r1, #49	; 0x31
  40156c:	f240 10d3 	movw	r0, #467	; 0x1d3
  401570:	47a0      	blx	r4
	SPI_Write(468, 0x21BB);
  401572:	f242 11bb 	movw	r1, #8635	; 0x21bb
  401576:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  40157a:	47a0      	blx	r4
	SPI_Write(469, 0x20B1);
  40157c:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401580:	f240 10d5 	movw	r0, #469	; 0x1d5
  401584:	47a0      	blx	r4
	SPI_Write(470, 0x00B1);
  401586:	21b1      	movs	r1, #177	; 0xb1
  401588:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
  40158c:	47a0      	blx	r4
	SPI_Write(471, 0x10B3);
  40158e:	f241 01b3 	movw	r1, #4275	; 0x10b3
  401592:	f240 10d7 	movw	r0, #471	; 0x1d7
  401596:	47a0      	blx	r4
	SPI_Write(472, 0x10B1);
  401598:	f241 01b1 	movw	r1, #4273	; 0x10b1
  40159c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  4015a0:	47a0      	blx	r4
	SPI_Write(473, 0x00B1);
  4015a2:	21b1      	movs	r1, #177	; 0xb1
  4015a4:	f240 10d9 	movw	r0, #473	; 0x1d9
  4015a8:	47a0      	blx	r4
	SPI_Write(474, 0x003F);
  4015aa:	213f      	movs	r1, #63	; 0x3f
  4015ac:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  4015b0:	47a0      	blx	r4
	SPI_Write(475, 0x0032);
  4015b2:	2132      	movs	r1, #50	; 0x32
  4015b4:	f240 10db 	movw	r0, #475	; 0x1db
  4015b8:	47a0      	blx	r4
	SPI_Write(476, 0x0030);
  4015ba:	2130      	movs	r1, #48	; 0x30
  4015bc:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  4015c0:	47a0      	blx	r4
  4015c2:	bd10      	pop	{r4, pc}

004015c4 <SoftPowerUp>:
}

void SoftPowerUp() 
{
  4015c4:	b510      	push	{r4, lr}
	SPI_Write(10, 0x0000);	// Release soft reset state
  4015c6:	2100      	movs	r1, #0
  4015c8:	200a      	movs	r0, #10
  4015ca:	4c0d      	ldr	r4, [pc, #52]	; (401600 <SoftPowerUp+0x3c>)
  4015cc:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);	// Enable analog clock
  4015ce:	f247 010f 	movw	r1, #28687	; 0x700f
  4015d2:	2020      	movs	r0, #32
  4015d4:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7007);	// Enable analog clock
	#endif
	
	SPI_Write(40, 0x0007);	// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
  4015d6:	2107      	movs	r1, #7
  4015d8:	2028      	movs	r0, #40	; 0x28
  4015da:	47a0      	blx	r4
	SPI_Write(42, 0x4113);	// SPI_Write(42, 0x4103); Configure image core
  4015dc:	f244 1113 	movw	r1, #16659	; 0x4113
  4015e0:	202a      	movs	r0, #42	; 0x2a
  4015e2:	47a0      	blx	r4
	SPI_Write(48, 0x0001);	// Enable AFE
  4015e4:	2101      	movs	r1, #1
  4015e6:	2030      	movs	r0, #48	; 0x30
  4015e8:	47a0      	blx	r4
	SPI_Write(64, 0x0001);	// Enable biasing block
  4015ea:	2101      	movs	r1, #1
  4015ec:	2040      	movs	r0, #64	; 0x40
  4015ee:	47a0      	blx	r4
	SPI_Write(72, 0x0127);	// SPI_Write(72, 0x0117); Enable charge pump.
  4015f0:	f240 1127 	movw	r1, #295	; 0x127
  4015f4:	2048      	movs	r0, #72	; 0x48
  4015f6:	47a0      	blx	r4
	//SPI_Write(112, 0x0007);	// Enable LVDS transmitters
	SPI_Write(112, 0x0000);	// Enable LVDS transmitters
  4015f8:	2100      	movs	r1, #0
  4015fa:	2070      	movs	r0, #112	; 0x70
  4015fc:	47a0      	blx	r4
  4015fe:	bd10      	pop	{r4, pc}
  401600:	004017f1 	.word	0x004017f1

00401604 <fillBuffer>:
/************************************************************************/
/*                         Function Definitions                         */
/************************************************************************/
// Fills buffer with data
void fillBuffer()
{
  401604:	4b03      	ldr	r3, [pc, #12]	; (401614 <fillBuffer+0x10>)
  401606:	4904      	ldr	r1, [pc, #16]	; (401618 <fillBuffer+0x14>)
		for (i = 0; i < NUM_PIXEL_WORDS; ++i)
		{
			// &var: address to the var
			// *: the value of the pointer
			pBuf = (&imageBuffer[i]);	// these are all zero --> the pointer points at the address of each of these zeroes
			*pBuf = 0x11223344;			// Each of these locations is filled with 0x11223344
  401608:	4a04      	ldr	r2, [pc, #16]	; (40161c <fillBuffer+0x18>)
  40160a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < NUM_PIXEL_WORDS; ++i)
  40160e:	428b      	cmp	r3, r1
  401610:	d1fb      	bne.n	40160a <fillBuffer+0x6>
		}
	#endif
}
  401612:	4770      	bx	lr
  401614:	20400544 	.word	0x20400544
  401618:	2041da04 	.word	0x2041da04
  40161c:	11223344 	.word	0x11223344

00401620 <enableSourceClk>:
		base->PIO_PUDR = mask;
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <enableSourceClk+0x3c>)
  401622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401626:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40162c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40162e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401634:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401636:	4311      	orrs	r1, r2
  401638:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40163a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40163c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  401640:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401642:	605a      	str	r2, [r3, #4]
	// CSS: Clock Source Selection
	// Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);	// Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  401644:	4a06      	ldr	r2, [pc, #24]	; (401660 <enableSourceClk+0x40>)
  401646:	f44f 7300 	mov.w	r3, #512	; 0x200
  40164a:	6013      	str	r3, [r2, #0]
	#endif
	#ifdef EV76C541 //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 24MHz. Sensor divides by 4
	#endif
	#ifdef NOIP1SN0480A //Trying to run MCU slower
		PMC->PMC_PCK[1] = (PMC->PMC_PCK[1] & ~(uint32_t)PMC_PCK_CSS_Msk)|(PMC_PCK_CSS_PLLA_CLK)|PMC_PCK_PRES(5); //Should make output = 24MHz. Sensor divides by 2^5 = 32
  40164c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  40164e:	f023 0357 	bic.w	r3, r3, #87	; 0x57
  401652:	f043 0352 	orr.w	r3, r3, #82	; 0x52
  401656:	6453      	str	r3, [r2, #68]	; 0x44
  401658:	4770      	bx	lr
  40165a:	bf00      	nop
  40165c:	400e0e00 	.word	0x400e0e00
  401660:	400e0600 	.word	0x400e0600

00401664 <imagingSensorStartDMA>:
void imagingSensorStartDMA() 
{
	
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  401664:	4b14      	ldr	r3, [pc, #80]	; (4016b8 <imagingSensorStartDMA+0x54>)
  401666:	2202      	movs	r2, #2
  401668:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  40166a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  40166c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  401670:	4a12      	ldr	r2, [pc, #72]	; (4016bc <imagingSensorStartDMA+0x58>)
  401672:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
		break;
	}
	#endif

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  401676:	f247 5230 	movw	r2, #30000	; 0x7530
  40167a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  40167e:	4a10      	ldr	r2, [pc, #64]	; (4016c0 <imagingSensorStartDMA+0x5c>)
  401680:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  401684:	2200      	movs	r2, #0
  401686:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  40168a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  40168e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  401692:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  401696:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  40169a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  40169e:	f042 0201 	orr.w	r2, r2, #1
  4016a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  4016a6:	68da      	ldr	r2, [r3, #12]
  4016a8:	f042 0202 	orr.w	r2, r2, #2
  4016ac:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  4016ae:	69da      	ldr	r2, [r3, #28]
  4016b0:	f042 0202 	orr.w	r2, r2, #2
  4016b4:	61da      	str	r2, [r3, #28]
  4016b6:	4770      	bx	lr
  4016b8:	40078000 	.word	0x40078000
  4016bc:	400e0f68 	.word	0x400e0f68
  4016c0:	22043001 	.word	0x22043001

004016c4 <imagingSensorCaptureEnable>:
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];
}

void imagingSensorCaptureEnable() 
{
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN ;
  4016c4:	4a03      	ldr	r2, [pc, #12]	; (4016d4 <imagingSensorCaptureEnable+0x10>)
  4016c6:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
  4016ca:	f043 0301 	orr.w	r3, r3, #1
  4016ce:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  4016d2:	4770      	bx	lr
  4016d4:	400e0e00 	.word	0x400e0e00

004016d8 <imagingSensorCaptureDisable>:
}

void imagingSensorCaptureDisable()
{
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
  4016d8:	4a03      	ldr	r2, [pc, #12]	; (4016e8 <imagingSensorCaptureDisable+0x10>)
  4016da:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
  4016de:	f023 0301 	bic.w	r3, r3, #1
  4016e2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  4016e6:	4770      	bx	lr
  4016e8:	400e0e00 	.word	0x400e0e00

004016ec <checkVSync>:
}

void checkVSync() 
{
	if (pcISR & VSYNC_MASK)
  4016ec:	4b1c      	ldr	r3, [pc, #112]	; (401760 <checkVSync+0x74>)
  4016ee:	681b      	ldr	r3, [r3, #0]
  4016f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4016f4:	d033      	beq.n	40175e <checkVSync+0x72>
{
  4016f6:	b570      	push	{r4, r5, r6, lr}
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) 
  4016f8:	4b1a      	ldr	r3, [pc, #104]	; (401764 <checkVSync+0x78>)
  4016fa:	781b      	ldrb	r3, [r3, #0]
  4016fc:	b113      	cbz	r3, 401704 <checkVSync+0x18>
  4016fe:	4b1a      	ldr	r3, [pc, #104]	; (401768 <checkVSync+0x7c>)
  401700:	781b      	ldrb	r3, [r3, #0]
  401702:	b91b      	cbnz	r3, 40170c <checkVSync+0x20>

			#endif
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) 
  401704:	4b18      	ldr	r3, [pc, #96]	; (401768 <checkVSync+0x7c>)
  401706:	781b      	ldrb	r3, [r3, #0]
  401708:	b9e3      	cbnz	r3, 401744 <checkVSync+0x58>
  40170a:	bd70      	pop	{r4, r5, r6, pc}
			captureEnabled = 0;
  40170c:	2400      	movs	r4, #0
  40170e:	4b15      	ldr	r3, [pc, #84]	; (401764 <checkVSync+0x78>)
  401710:	701c      	strb	r4, [r3, #0]
			startRecording = 0;
  401712:	4b15      	ldr	r3, [pc, #84]	; (401768 <checkVSync+0x7c>)
  401714:	701c      	strb	r4, [r3, #0]
			imagingSensorCaptureDisable();
  401716:	4b15      	ldr	r3, [pc, #84]	; (40176c <checkVSync+0x80>)
  401718:	4798      	blx	r3
				imageBuffer[buffSize-1] = frameNumber;
  40171a:	4b15      	ldr	r3, [pc, #84]	; (401770 <checkVSync+0x84>)
  40171c:	6818      	ldr	r0, [r3, #0]
  40171e:	4a15      	ldr	r2, [pc, #84]	; (401774 <checkVSync+0x88>)
  401720:	4915      	ldr	r1, [pc, #84]	; (401778 <checkVSync+0x8c>)
  401722:	5050      	str	r0, [r2, r1]
				imageBuffer[buffSize-3] = lineCount;
  401724:	4815      	ldr	r0, [pc, #84]	; (40177c <checkVSync+0x90>)
  401726:	6805      	ldr	r5, [r0, #0]
  401728:	3908      	subs	r1, #8
  40172a:	5055      	str	r5, [r2, r1]
				imageBuffer[buffSize-4] = xferDMAComplete; //Overflow flag
  40172c:	4914      	ldr	r1, [pc, #80]	; (401780 <checkVSync+0x94>)
  40172e:	680e      	ldr	r6, [r1, #0]
  401730:	4d14      	ldr	r5, [pc, #80]	; (401784 <checkVSync+0x98>)
  401732:	5156      	str	r6, [r2, r5]
			lineCount = 0;
  401734:	6004      	str	r4, [r0, #0]
			frameNumber++;
  401736:	681a      	ldr	r2, [r3, #0]
  401738:	3201      	adds	r2, #1
  40173a:	601a      	str	r2, [r3, #0]
			overflowCount = 0;
  40173c:	4b12      	ldr	r3, [pc, #72]	; (401788 <checkVSync+0x9c>)
  40173e:	601c      	str	r4, [r3, #0]
			xferDMAComplete = 0;
  401740:	600c      	str	r4, [r1, #0]
  401742:	bd70      	pop	{r4, r5, r6, pc}
		{ //waits for the first VSync to start capture. This makes sure we capture a full first frame
			captureEnabled = 1;
  401744:	2201      	movs	r2, #1
  401746:	4b07      	ldr	r3, [pc, #28]	; (401764 <checkVSync+0x78>)
  401748:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  40174a:	2300      	movs	r3, #0
  40174c:	4a0b      	ldr	r2, [pc, #44]	; (40177c <checkVSync+0x90>)
  40174e:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  401750:	4a0d      	ldr	r2, [pc, #52]	; (401788 <checkVSync+0x9c>)
  401752:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  401754:	4b0d      	ldr	r3, [pc, #52]	; (40178c <checkVSync+0xa0>)
  401756:	4798      	blx	r3
			imagingSensorCaptureEnable();
  401758:	4b0d      	ldr	r3, [pc, #52]	; (401790 <checkVSync+0xa4>)
  40175a:	4798      	blx	r3

		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
  40175c:	e7d5      	b.n	40170a <checkVSync+0x1e>
  40175e:	4770      	bx	lr
  401760:	20400518 	.word	0x20400518
  401764:	20400508 	.word	0x20400508
  401768:	2040051c 	.word	0x2040051c
  40176c:	004016d9 	.word	0x004016d9
  401770:	2040050c 	.word	0x2040050c
  401774:	20400548 	.word	0x20400548
  401778:	0001d4bc 	.word	0x0001d4bc
  40177c:	20400510 	.word	0x20400510
  401780:	20400524 	.word	0x20400524
  401784:	0001d4b0 	.word	0x0001d4b0
  401788:	20400514 	.word	0x20400514
  40178c:	00401665 	.word	0x00401665
  401790:	004016c5 	.word	0x004016c5

00401794 <PIOA_Handler>:

/************************************************************************/
/*	         Overwrites the Stock Functions in pio_handler.h            */
/************************************************************************/
void PIOA_Handler(void) 
{
  401794:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  401796:	4b0a      	ldr	r3, [pc, #40]	; (4017c0 <PIOA_Handler+0x2c>)
  401798:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  40179a:	4b0a      	ldr	r3, [pc, #40]	; (4017c4 <PIOA_Handler+0x30>)
  40179c:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK) 
  40179e:	681b      	ldr	r3, [r3, #0]
  4017a0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4017a4:	d004      	beq.n	4017b0 <PIOA_Handler+0x1c>
	{
		if (captureEnabled == 1)
  4017a6:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <PIOA_Handler+0x34>)
  4017a8:	781b      	ldrb	r3, [r3, #0]
  4017aa:	b2db      	uxtb	r3, r3
  4017ac:	2b01      	cmp	r3, #1
  4017ae:	d002      	beq.n	4017b6 <PIOA_Handler+0x22>
		{
			lineCount++;
		}
	}
	checkVSync();
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <PIOA_Handler+0x38>)
  4017b2:	4798      	blx	r3
  4017b4:	bd08      	pop	{r3, pc}
			lineCount++;
  4017b6:	4a06      	ldr	r2, [pc, #24]	; (4017d0 <PIOA_Handler+0x3c>)
  4017b8:	6813      	ldr	r3, [r2, #0]
  4017ba:	3301      	adds	r3, #1
  4017bc:	6013      	str	r3, [r2, #0]
  4017be:	e7f7      	b.n	4017b0 <PIOA_Handler+0x1c>
  4017c0:	400e0e00 	.word	0x400e0e00
  4017c4:	20400518 	.word	0x20400518
  4017c8:	20400508 	.word	0x20400508
  4017cc:	004016ed 	.word	0x004016ed
  4017d0:	20400510 	.word	0x20400510

004017d4 <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  4017d4:	4b04      	ldr	r3, [pc, #16]	; (4017e8 <XDMAC_Handler+0x14>)
  4017d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) 
  4017da:	f013 0f01 	tst.w	r3, #1
  4017de:	d002      	beq.n	4017e6 <XDMAC_Handler+0x12>
	{
		xferDMAComplete = 1;
  4017e0:	2201      	movs	r2, #1
  4017e2:	4b02      	ldr	r3, [pc, #8]	; (4017ec <XDMAC_Handler+0x18>)
  4017e4:	601a      	str	r2, [r3, #0]
  4017e6:	4770      	bx	lr
  4017e8:	40078000 	.word	0x40078000
  4017ec:	20400524 	.word	0x20400524

004017f0 <SPI_Write>:
#include "definitions.h"


// SPI_Write: writes value on a register of the slave
void SPI_Write(uint16_t reg, uint16_t val)
{
  4017f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017f4:	4604      	mov	r4, r0
  4017f6:	460d      	mov	r5, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4017f8:	4f33      	ldr	r7, [pc, #204]	; (4018c8 <SPI_Write+0xd8>)
  4017fa:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
  4017fe:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	uint8_t count = 0;
//	reg = reg | 0x100;					// Sets write bit to 1 (100(hex) = 1 0000 0000(bin))
	
	// ==== Open the communication line with Python480
	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. SS pin up
	delay_us(10);
  401802:	20f3      	movs	r0, #243	; 0xf3
  401804:	4e31      	ldr	r6, [pc, #196]	; (4018cc <SPI_Write+0xdc>)
  401806:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401808:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  40180c:	20f3      	movs	r0, #243	; 0xf3
  40180e:	47b0      	blx	r6
  401810:	f04f 0b09 	mov.w	fp, #9
  401814:	463e      	mov	r6, r7
  401816:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  40181a:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  40181c:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  401820:	4f2a      	ldr	r7, [pc, #168]	; (4018cc <SPI_Write+0xdc>)
  401822:	e00f      	b.n	401844 <SPI_Write+0x54>
  401824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401828:	6373      	str	r3, [r6, #52]	; 0x34
  40182a:	4640      	mov	r0, r8
  40182c:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40182e:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401832:	4640      	mov	r0, r8
  401834:	47b8      	blx	r7
		
		reg = reg << 1;							// 5. Move the digit down
  401836:	0064      	lsls	r4, r4, #1
  401838:	b2a4      	uxth	r4, r4
  40183a:	f10b 33ff 	add.w	r3, fp, #4294967295
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD to LSD
  40183e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
  401842:	d008      	beq.n	401856 <SPI_Write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401844:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  401848:	f414 7f80 	tst.w	r4, #256	; 0x100
  40184c:	d0ea      	beq.n	401824 <SPI_Write+0x34>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40184e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401852:	6333      	str	r3, [r6, #48]	; 0x30
  401854:	e7e9      	b.n	40182a <SPI_Write+0x3a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401856:	4c1c      	ldr	r4, [pc, #112]	; (4018c8 <SPI_Write+0xd8>)
  401858:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  40185c:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40185e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401862:	6323      	str	r3, [r4, #48]	; 0x30
	}
	
	// ===== Notify Python480 that it's a WRITE command
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 1);	// 2. MOSI up
	delay_us(10);
  401864:	20f3      	movs	r0, #243	; 0xf3
  401866:	4e19      	ldr	r6, [pc, #100]	; (4018cc <SPI_Write+0xdc>)
  401868:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40186a:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 3. Clock up
	delay_us(10);
  40186c:	20f3      	movs	r0, #243	; 0xf3
  40186e:	47b0      	blx	r6
  401870:	2410      	movs	r4, #16
  401872:	4e15      	ldr	r6, [pc, #84]	; (4018c8 <SPI_Write+0xd8>)
  401874:	46b9      	mov	r9, r7
  401876:	46ba      	mov	sl, r7
		}
		else										// If bit value 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  401878:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  40187c:	4f13      	ldr	r7, [pc, #76]	; (4018cc <SPI_Write+0xdc>)
  40187e:	e00e      	b.n	40189e <SPI_Write+0xae>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401884:	6333      	str	r3, [r6, #48]	; 0x30
  401886:	4640      	mov	r0, r8
  401888:	47b8      	blx	r7
  40188a:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  40188e:	4640      	mov	r0, r8
  401890:	47b8      	blx	r7
		
		val = val << 1;							// 5. Move the digit down
  401892:	006d      	lsls	r5, r5, #1
  401894:	b2ad      	uxth	r5, r5
  401896:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
  401898:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40189c:	d008      	beq.n	4018b0 <SPI_Write+0xc0>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40189e:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (val & 0x8000)							// If bit value 1
  4018a2:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4018a6:	d1eb      	bne.n	401880 <SPI_Write+0x90>
  4018a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4018ac:	6373      	str	r3, [r6, #52]	; 0x34
  4018ae:	e7ea      	b.n	401886 <SPI_Write+0x96>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018b0:	4c05      	ldr	r4, [pc, #20]	; (4018c8 <SPI_Write+0xd8>)
  4018b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  4018b6:	6323      	str	r3, [r4, #48]	; 0x30
	}
	
	// ===== Shut down the communication line
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 1. Clock down
	delay_us(10);
  4018b8:	20f3      	movs	r0, #243	; 0xf3
  4018ba:	4b04      	ldr	r3, [pc, #16]	; (4018cc <SPI_Write+0xdc>)
  4018bc:	4798      	blx	r3
  4018be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4018c2:	6323      	str	r3, [r4, #48]	; 0x30
  4018c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018c8:	400e1400 	.word	0x400e1400
  4018cc:	20400001 	.word	0x20400001

004018d0 <SPI_Read>:
	ioport_set_pin_level(SPI_BB_SS, 1);		// 2. Chip select high
}


uint16_t SPI_Read(uint16_t reg)
{
  4018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018d4:	4605      	mov	r5, r0
  4018d6:	4e33      	ldr	r6, [pc, #204]	; (4019a4 <SPI_Read+0xd4>)
  4018d8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  4018dc:	6337      	str	r7, [r6, #48]	; 0x30
	uint16_t value = 0;
	//	reg = reg | 0x100;					// Sets write bit to 1 (100(hex) = 1 0000 0000(bin))
	
	// ==== Open the communication line with Python480
	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. SS pin up
	delay_us(10);
  4018de:	20f3      	movs	r0, #243	; 0xf3
  4018e0:	4c31      	ldr	r4, [pc, #196]	; (4019a8 <SPI_Read+0xd8>)
  4018e2:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4018e4:	6377      	str	r7, [r6, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  4018e6:	20f3      	movs	r0, #243	; 0xf3
  4018e8:	47a0      	blx	r4
  4018ea:	2409      	movs	r4, #9
  4018ec:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  4018f0:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  4018f2:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  4018f6:	4f2c      	ldr	r7, [pc, #176]	; (4019a8 <SPI_Read+0xd8>)
  4018f8:	e00e      	b.n	401918 <SPI_Read+0x48>
  4018fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4018fe:	6373      	str	r3, [r6, #52]	; 0x34
  401900:	4640      	mov	r0, r8
  401902:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401904:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401908:	4640      	mov	r0, r8
  40190a:	47b8      	blx	r7
		
		reg = reg << 1;							// 5. Move the digit down
  40190c:	006d      	lsls	r5, r5, #1
  40190e:	b2ad      	uxth	r5, r5
  401910:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD to LSD
  401912:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401916:	d008      	beq.n	40192a <SPI_Read+0x5a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401918:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  40191c:	f415 7f80 	tst.w	r5, #256	; 0x100
  401920:	d0eb      	beq.n	4018fa <SPI_Read+0x2a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401922:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401926:	6333      	str	r3, [r6, #48]	; 0x30
  401928:	e7ea      	b.n	401900 <SPI_Read+0x30>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40192a:	4c1e      	ldr	r4, [pc, #120]	; (4019a4 <SPI_Read+0xd4>)
  40192c:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  401930:	6366      	str	r6, [r4, #52]	; 0x34
  401932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401936:	6363      	str	r3, [r4, #52]	; 0x34
	}
	
	// ===== Notify Python480 that it's a READ command
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 0);	// 2. MOSI up
	delay_us(10);
  401938:	20f3      	movs	r0, #243	; 0xf3
  40193a:	4d1b      	ldr	r5, [pc, #108]	; (4019a8 <SPI_Read+0xd8>)
  40193c:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40193e:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 3. Clock up
	delay_us(10);
  401940:	20f3      	movs	r0, #243	; 0xf3
  401942:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401944:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 4. Clock down
	delay_us(10);
  401946:	20f3      	movs	r0, #243	; 0xf3
  401948:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40194a:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 5. Clock up
	delay_us(10);
  40194c:	20f3      	movs	r0, #243	; 0xf3
  40194e:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401950:	6366      	str	r6, [r4, #52]	; 0x34
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401952:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	
	// ===== Receive the value coming in from Python480
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
	{
		ioport_set_pin_level(SPI_BB_SCK, 0);					// 2. Clock down
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  401954:	f3c0 5800 	ubfx	r8, r0, #20, #1
		delay_us(10);
  401958:	20f3      	movs	r0, #243	; 0xf3
  40195a:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40195c:	6326      	str	r6, [r4, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);					// 4. Clock up
		delay_us(10);
  40195e:	20f3      	movs	r0, #243	; 0xf3
  401960:	47a8      	blx	r5
  401962:	240f      	movs	r4, #15
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401964:	4d0f      	ldr	r5, [pc, #60]	; (4019a4 <SPI_Read+0xd4>)
  401966:	4637      	mov	r7, r6
  401968:	636f      	str	r7, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40196a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  40196c:	f3c0 5000 	ubfx	r0, r0, #20, #1
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  401970:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
  401974:	fa1f f880 	uxth.w	r8, r0
		delay_us(10);
  401978:	20f3      	movs	r0, #243	; 0xf3
  40197a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4019a8 <SPI_Read+0xd8>
  40197e:	47c8      	blx	r9
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401980:	632e      	str	r6, [r5, #48]	; 0x30
		delay_us(10);
  401982:	20f3      	movs	r0, #243	; 0xf3
  401984:	47c8      	blx	r9
  401986:	1e63      	subs	r3, r4, #1
		
		if (count == 15)						// 5. Don't move a bit up if we got all the data
  401988:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40198c:	d1ec      	bne.n	401968 <SPI_Read+0x98>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40198e:	4b05      	ldr	r3, [pc, #20]	; (4019a4 <SPI_Read+0xd4>)
  401990:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401994:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40199a:	631a      	str	r2, [r3, #48]	; 0x30
	// ===== Finish communication with Python480
	ioport_set_pin_level(SPI_BB_SCK, 0);		// 1. Clock down
	ioport_set_pin_level(SPI_BB_SS, 1);			// 2. Slave select up
	
	return value;
}
  40199c:	4640      	mov	r0, r8
  40199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4019a2:	bf00      	nop
  4019a4:	400e1400 	.word	0x400e1400
  4019a8:	20400001 	.word	0x20400001

004019ac <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	++g_ms_ticks;
  4019ac:	4a02      	ldr	r2, [pc, #8]	; (4019b8 <SysTick_Handler+0xc>)
  4019ae:	6813      	ldr	r3, [r2, #0]
  4019b0:	3301      	adds	r3, #1
  4019b2:	6013      	str	r3, [r2, #0]
  4019b4:	4770      	bx	lr
  4019b6:	bf00      	nop
  4019b8:	20400528 	.word	0x20400528

004019bc <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  4019bc:	2200      	movs	r2, #0
  4019be:	4b06      	ldr	r3, [pc, #24]	; (4019d8 <time_tick_init+0x1c>)
  4019c0:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4019c2:	4b06      	ldr	r3, [pc, #24]	; (4019dc <time_tick_init+0x20>)
  4019c4:	4906      	ldr	r1, [pc, #24]	; (4019e0 <time_tick_init+0x24>)
  4019c6:	6059      	str	r1, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4019c8:	20e0      	movs	r0, #224	; 0xe0
  4019ca:	4906      	ldr	r1, [pc, #24]	; (4019e4 <time_tick_init+0x28>)
  4019cc:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4019d2:	2207      	movs	r2, #7
  4019d4:	601a      	str	r2, [r3, #0]
  4019d6:	4770      	bx	lr
  4019d8:	20400528 	.word	0x20400528
  4019dc:	e000e010 	.word	0xe000e010
  4019e0:	0002327f 	.word	0x0002327f
  4019e4:	e000ed00 	.word	0xe000ed00

004019e8 <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  4019e8:	4b01      	ldr	r3, [pc, #4]	; (4019f0 <time_tick_get+0x8>)
  4019ea:	6818      	ldr	r0, [r3, #0]
}
  4019ec:	4770      	bx	lr
  4019ee:	bf00      	nop
  4019f0:	20400528 	.word	0x20400528

004019f4 <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) 
  4019f4:	4281      	cmp	r1, r0
  4019f6:	d202      	bcs.n	4019fe <time_tick_calc_delay+0xa>
	}
	
	else 
	{
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  4019f8:	1a09      	subs	r1, r1, r0
  4019fa:	1e48      	subs	r0, r1, #1
	}
}
  4019fc:	4770      	bx	lr
		return (tick_end - tick_start) * (1000 / TICK_US);
  4019fe:	1a08      	subs	r0, r1, r0
  401a00:	4770      	bx	lr
	...

00401a04 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401a04:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401a06:	4810      	ldr	r0, [pc, #64]	; (401a48 <sysclk_init+0x44>)
  401a08:	4b10      	ldr	r3, [pc, #64]	; (401a4c <sysclk_init+0x48>)
  401a0a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401a0c:	213e      	movs	r1, #62	; 0x3e
  401a0e:	2000      	movs	r0, #0
  401a10:	4b0f      	ldr	r3, [pc, #60]	; (401a50 <sysclk_init+0x4c>)
  401a12:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401a14:	4c0f      	ldr	r4, [pc, #60]	; (401a54 <sysclk_init+0x50>)
  401a16:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401a18:	2800      	cmp	r0, #0
  401a1a:	d0fc      	beq.n	401a16 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401a1c:	4b0e      	ldr	r3, [pc, #56]	; (401a58 <sysclk_init+0x54>)
  401a1e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401a20:	4a0e      	ldr	r2, [pc, #56]	; (401a5c <sysclk_init+0x58>)
  401a22:	4b0f      	ldr	r3, [pc, #60]	; (401a60 <sysclk_init+0x5c>)
  401a24:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401a26:	4c0f      	ldr	r4, [pc, #60]	; (401a64 <sysclk_init+0x60>)
  401a28:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401a2a:	2800      	cmp	r0, #0
  401a2c:	d0fc      	beq.n	401a28 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401a2e:	2002      	movs	r0, #2
  401a30:	4b0d      	ldr	r3, [pc, #52]	; (401a68 <sysclk_init+0x64>)
  401a32:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401a34:	2000      	movs	r0, #0
  401a36:	4b0d      	ldr	r3, [pc, #52]	; (401a6c <sysclk_init+0x68>)
  401a38:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401a3a:	4b0d      	ldr	r3, [pc, #52]	; (401a70 <sysclk_init+0x6c>)
  401a3c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401a3e:	480d      	ldr	r0, [pc, #52]	; (401a74 <sysclk_init+0x70>)
  401a40:	4b02      	ldr	r3, [pc, #8]	; (401a4c <sysclk_init+0x48>)
  401a42:	4798      	blx	r3
  401a44:	bd10      	pop	{r4, pc}
  401a46:	bf00      	nop
  401a48:	11e1a300 	.word	0x11e1a300
  401a4c:	00401f45 	.word	0x00401f45
  401a50:	00401b15 	.word	0x00401b15
  401a54:	00401b69 	.word	0x00401b69
  401a58:	00401b79 	.word	0x00401b79
  401a5c:	200b3f01 	.word	0x200b3f01
  401a60:	400e0600 	.word	0x400e0600
  401a64:	00401b89 	.word	0x00401b89
  401a68:	00401a79 	.word	0x00401a79
  401a6c:	00401ab1 	.word	0x00401ab1
  401a70:	00401e39 	.word	0x00401e39
  401a74:	08954400 	.word	0x08954400

00401a78 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401a78:	2803      	cmp	r0, #3
  401a7a:	d011      	beq.n	401aa0 <pmc_mck_set_division+0x28>
  401a7c:	2804      	cmp	r0, #4
  401a7e:	d012      	beq.n	401aa6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401a80:	2802      	cmp	r0, #2
  401a82:	bf0c      	ite	eq
  401a84:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401a88:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401a8a:	4a08      	ldr	r2, [pc, #32]	; (401aac <pmc_mck_set_division+0x34>)
  401a8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401a92:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401a94:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401a96:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a98:	f013 0f08 	tst.w	r3, #8
  401a9c:	d0fb      	beq.n	401a96 <pmc_mck_set_division+0x1e>
}
  401a9e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401aa0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401aa4:	e7f1      	b.n	401a8a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401aaa:	e7ee      	b.n	401a8a <pmc_mck_set_division+0x12>
  401aac:	400e0600 	.word	0x400e0600

00401ab0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401ab0:	4a17      	ldr	r2, [pc, #92]	; (401b10 <pmc_switch_mck_to_pllack+0x60>)
  401ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401ab8:	4318      	orrs	r0, r3
  401aba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401abc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401abe:	f013 0f08 	tst.w	r3, #8
  401ac2:	d10a      	bne.n	401ada <pmc_switch_mck_to_pllack+0x2a>
  401ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401ac8:	4911      	ldr	r1, [pc, #68]	; (401b10 <pmc_switch_mck_to_pllack+0x60>)
  401aca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401acc:	f012 0f08 	tst.w	r2, #8
  401ad0:	d103      	bne.n	401ada <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ad2:	3b01      	subs	r3, #1
  401ad4:	d1f9      	bne.n	401aca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401ad6:	2001      	movs	r0, #1
  401ad8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401ada:	4a0d      	ldr	r2, [pc, #52]	; (401b10 <pmc_switch_mck_to_pllack+0x60>)
  401adc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ade:	f023 0303 	bic.w	r3, r3, #3
  401ae2:	f043 0302 	orr.w	r3, r3, #2
  401ae6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ae8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401aea:	f013 0f08 	tst.w	r3, #8
  401aee:	d10a      	bne.n	401b06 <pmc_switch_mck_to_pllack+0x56>
  401af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401af4:	4906      	ldr	r1, [pc, #24]	; (401b10 <pmc_switch_mck_to_pllack+0x60>)
  401af6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401af8:	f012 0f08 	tst.w	r2, #8
  401afc:	d105      	bne.n	401b0a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401afe:	3b01      	subs	r3, #1
  401b00:	d1f9      	bne.n	401af6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401b02:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401b04:	4770      	bx	lr
	return 0;
  401b06:	2000      	movs	r0, #0
  401b08:	4770      	bx	lr
  401b0a:	2000      	movs	r0, #0
  401b0c:	4770      	bx	lr
  401b0e:	bf00      	nop
  401b10:	400e0600 	.word	0x400e0600

00401b14 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401b14:	b9a0      	cbnz	r0, 401b40 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401b16:	480e      	ldr	r0, [pc, #56]	; (401b50 <pmc_switch_mainck_to_xtal+0x3c>)
  401b18:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401b1a:	0209      	lsls	r1, r1, #8
  401b1c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401b1e:	4a0d      	ldr	r2, [pc, #52]	; (401b54 <pmc_switch_mainck_to_xtal+0x40>)
  401b20:	401a      	ands	r2, r3
  401b22:	4b0d      	ldr	r3, [pc, #52]	; (401b58 <pmc_switch_mainck_to_xtal+0x44>)
  401b24:	4313      	orrs	r3, r2
  401b26:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401b28:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401b2a:	4602      	mov	r2, r0
  401b2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401b2e:	f013 0f01 	tst.w	r3, #1
  401b32:	d0fb      	beq.n	401b2c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401b34:	4a06      	ldr	r2, [pc, #24]	; (401b50 <pmc_switch_mainck_to_xtal+0x3c>)
  401b36:	6a11      	ldr	r1, [r2, #32]
  401b38:	4b08      	ldr	r3, [pc, #32]	; (401b5c <pmc_switch_mainck_to_xtal+0x48>)
  401b3a:	430b      	orrs	r3, r1
  401b3c:	6213      	str	r3, [r2, #32]
  401b3e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b40:	4903      	ldr	r1, [pc, #12]	; (401b50 <pmc_switch_mainck_to_xtal+0x3c>)
  401b42:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401b44:	4a06      	ldr	r2, [pc, #24]	; (401b60 <pmc_switch_mainck_to_xtal+0x4c>)
  401b46:	401a      	ands	r2, r3
  401b48:	4b06      	ldr	r3, [pc, #24]	; (401b64 <pmc_switch_mainck_to_xtal+0x50>)
  401b4a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401b4c:	620b      	str	r3, [r1, #32]
  401b4e:	4770      	bx	lr
  401b50:	400e0600 	.word	0x400e0600
  401b54:	ffc8fffc 	.word	0xffc8fffc
  401b58:	00370001 	.word	0x00370001
  401b5c:	01370000 	.word	0x01370000
  401b60:	fec8fffc 	.word	0xfec8fffc
  401b64:	01370002 	.word	0x01370002

00401b68 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b68:	4b02      	ldr	r3, [pc, #8]	; (401b74 <pmc_osc_is_ready_mainck+0xc>)
  401b6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b6c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401b70:	4770      	bx	lr
  401b72:	bf00      	nop
  401b74:	400e0600 	.word	0x400e0600

00401b78 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401b78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401b7c:	4b01      	ldr	r3, [pc, #4]	; (401b84 <pmc_disable_pllack+0xc>)
  401b7e:	629a      	str	r2, [r3, #40]	; 0x28
  401b80:	4770      	bx	lr
  401b82:	bf00      	nop
  401b84:	400e0600 	.word	0x400e0600

00401b88 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b88:	4b02      	ldr	r3, [pc, #8]	; (401b94 <pmc_is_locked_pllack+0xc>)
  401b8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b8c:	f000 0002 	and.w	r0, r0, #2
  401b90:	4770      	bx	lr
  401b92:	bf00      	nop
  401b94:	400e0600 	.word	0x400e0600

00401b98 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401b98:	283f      	cmp	r0, #63	; 0x3f
  401b9a:	d81e      	bhi.n	401bda <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401b9c:	281f      	cmp	r0, #31
  401b9e:	d80c      	bhi.n	401bba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401ba0:	4b11      	ldr	r3, [pc, #68]	; (401be8 <pmc_enable_periph_clk+0x50>)
  401ba2:	699a      	ldr	r2, [r3, #24]
  401ba4:	2301      	movs	r3, #1
  401ba6:	4083      	lsls	r3, r0
  401ba8:	4393      	bics	r3, r2
  401baa:	d018      	beq.n	401bde <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401bac:	2301      	movs	r3, #1
  401bae:	fa03 f000 	lsl.w	r0, r3, r0
  401bb2:	4b0d      	ldr	r3, [pc, #52]	; (401be8 <pmc_enable_periph_clk+0x50>)
  401bb4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401bb6:	2000      	movs	r0, #0
  401bb8:	4770      	bx	lr
		ul_id -= 32;
  401bba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401bbc:	4b0a      	ldr	r3, [pc, #40]	; (401be8 <pmc_enable_periph_clk+0x50>)
  401bbe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401bc2:	2301      	movs	r3, #1
  401bc4:	4083      	lsls	r3, r0
  401bc6:	4393      	bics	r3, r2
  401bc8:	d00b      	beq.n	401be2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401bca:	2301      	movs	r3, #1
  401bcc:	fa03 f000 	lsl.w	r0, r3, r0
  401bd0:	4b05      	ldr	r3, [pc, #20]	; (401be8 <pmc_enable_periph_clk+0x50>)
  401bd2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401bd6:	2000      	movs	r0, #0
  401bd8:	4770      	bx	lr
		return 1;
  401bda:	2001      	movs	r0, #1
  401bdc:	4770      	bx	lr
	return 0;
  401bde:	2000      	movs	r0, #0
  401be0:	4770      	bx	lr
  401be2:	2000      	movs	r0, #0
}
  401be4:	4770      	bx	lr
  401be6:	bf00      	nop
  401be8:	400e0600 	.word	0x400e0600

00401bec <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401bec:	4b10      	ldr	r3, [pc, #64]	; (401c30 <twihs_set_speed+0x44>)
  401bee:	4299      	cmp	r1, r3
  401bf0:	d81b      	bhi.n	401c2a <twihs_set_speed+0x3e>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401bf2:	0049      	lsls	r1, r1, #1
  401bf4:	fbb2 f2f1 	udiv	r2, r2, r1
  401bf8:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401bfa:	2aff      	cmp	r2, #255	; 0xff
  401bfc:	d913      	bls.n	401c26 <twihs_set_speed+0x3a>
  401bfe:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  401c00:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  401c02:	0852      	lsrs	r2, r2, #1
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c04:	2aff      	cmp	r2, #255	; 0xff
  401c06:	d901      	bls.n	401c0c <twihs_set_speed+0x20>
  401c08:	2b06      	cmp	r3, #6
  401c0a:	d9f9      	bls.n	401c00 <twihs_set_speed+0x14>
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c0c:	b2d1      	uxtb	r1, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  401c0e:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c12:	0212      	lsls	r2, r2, #8
  401c14:	b292      	uxth	r2, r2
			TWIHS_CWGR_CKDIV(ckdiv)|TWIHS_CWGR_HOLD(60);
  401c16:	430a      	orrs	r2, r1
  401c18:	041b      	lsls	r3, r3, #16
  401c1a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401c1e:	4313      	orrs	r3, r2
	p_twihs->TWIHS_CWGR =
  401c20:	6103      	str	r3, [r0, #16]

	return PASS;
  401c22:	2000      	movs	r0, #0
  401c24:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c26:	2300      	movs	r3, #0
  401c28:	e7f0      	b.n	401c0c <twihs_set_speed+0x20>
		return FAIL;
  401c2a:	2001      	movs	r0, #1
}
  401c2c:	4770      	bx	lr
  401c2e:	bf00      	nop
  401c30:	00061a80 	.word	0x00061a80

00401c34 <twihs_master_init>:
{
  401c34:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401c36:	f04f 32ff 	mov.w	r2, #4294967295
  401c3a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401c3c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401c3e:	2280      	movs	r2, #128	; 0x80
  401c40:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401c42:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c44:	2208      	movs	r2, #8
  401c46:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c48:	2220      	movs	r2, #32
  401c4a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c4c:	2204      	movs	r2, #4
  401c4e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c50:	680a      	ldr	r2, [r1, #0]
  401c52:	6849      	ldr	r1, [r1, #4]
  401c54:	4b03      	ldr	r3, [pc, #12]	; (401c64 <twihs_master_init+0x30>)
  401c56:	4798      	blx	r3
}
  401c58:	2801      	cmp	r0, #1
  401c5a:	bf14      	ite	ne
  401c5c:	2000      	movne	r0, #0
  401c5e:	2001      	moveq	r0, #1
  401c60:	bd08      	pop	{r3, pc}
  401c62:	bf00      	nop
  401c64:	00401bed 	.word	0x00401bed

00401c68 <xdmac_configure_transfer>:
  401c68:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401c6c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	Assert(cfg);
	
	xdmac_channel_get_interrupt_status( xdmac, channel_num);
	xdmac_channel_set_source_addr(xdmac, channel_num, cfg->mbr_sa);
  401c6e:	6853      	ldr	r3, [r2, #4]
 */
static inline void xdmac_channel_set_source_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t src_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSA = src_addr;
  401c70:	660b      	str	r3, [r1, #96]	; 0x60
	xdmac_channel_set_destination_addr(xdmac, channel_num, cfg->mbr_da);
  401c72:	6893      	ldr	r3, [r2, #8]
 */
static inline void xdmac_channel_set_destination_addr(Xdmac *xdmac, uint32_t channel_num, uint32_t dst_addr)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDA = dst_addr;
  401c74:	664b      	str	r3, [r1, #100]	; 0x64
 */
static inline void xdmac_channel_set_microblock_control(Xdmac *xdmac, uint32_t channel_num, uint32_t ublen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CUBC = XDMAC_CUBC_UBLEN(ublen);
  401c76:	6813      	ldr	r3, [r2, #0]
  401c78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401c7c:	670b      	str	r3, [r1, #112]	; 0x70
 */
static inline void xdmac_channel_set_block_control(Xdmac *xdmac, uint32_t channel_num, uint32_t blen)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CBC = XDMAC_CBC_BLEN(blen);
  401c7e:	6913      	ldr	r3, [r2, #16]
  401c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401c84:	674b      	str	r3, [r1, #116]	; 0x74
	xdmac_channel_set_microblock_control(xdmac, channel_num, cfg->mbr_ubc);
	xdmac_channel_set_block_control(xdmac, channel_num, cfg->mbr_bc);
	xdmac_channel_set_datastride_mempattern(xdmac, channel_num, cfg->mbr_ds);
  401c86:	6953      	ldr	r3, [r2, #20]
 */
static inline void xdmac_channel_set_datastride_mempattern(Xdmac *xdmac, uint32_t channel_num, uint32_t dds_msp)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDS_MSP = dds_msp;
  401c88:	67cb      	str	r3, [r1, #124]	; 0x7c
static inline void xdmac_channel_set_source_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t subs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CSUS = XDMAC_CSUS_SUBS(subs);
  401c8a:	6993      	ldr	r3, [r2, #24]
  401c8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401c90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
static inline void xdmac_channel_set_destination_microblock_stride(Xdmac *xdmac,
		uint32_t channel_num, uint32_t dubs)
{
	Assert(xdmac);
	Assert(channel_num < XDMACCHID_NUMBER);
	xdmac->XDMAC_CHID[channel_num].XDMAC_CDUS = XDMAC_CDUS_DUBS(dubs);
  401c94:	69d3      	ldr	r3, [r2, #28]
  401c96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	xdmac_channel_set_source_microblock_stride(xdmac, channel_num, cfg->mbr_sus);
	xdmac_channel_set_destination_microblock_stride(xdmac, channel_num, cfg->mbr_dus);
	xdmac_channel_set_config(xdmac, channel_num, cfg->mbr_cfg );
  401c9e:	68d3      	ldr	r3, [r2, #12]
	xdmac->XDMAC_CHID[channel_num].XDMAC_CC = config;
  401ca0:	678b      	str	r3, [r1, #120]	; 0x78
  401ca2:	4770      	bx	lr

00401ca4 <board_init>:
		base->PIO_PUDR = mask;
  401ca4:	4b33      	ldr	r3, [pc, #204]	; (401d74 <board_init+0xd0>)
  401ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401caa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cb0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cb2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401cba:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  401cbe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401cc0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401cc2:	4311      	orrs	r1, r2
  401cc4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401cc6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401ccc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cd2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cd4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401cda:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401cdc:	4311      	orrs	r1, r2
  401cde:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401ce0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401ce2:	4311      	orrs	r1, r2
  401ce4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401ce6:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401cec:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401cf2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401cf4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401cfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401cfc:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  401d00:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d02:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d04:	4311      	orrs	r1, r2
  401d06:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d08:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401d0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401d0e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d14:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d16:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d1e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401d22:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d24:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d26:	4311      	orrs	r1, r2
  401d28:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d2a:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401d2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d30:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d36:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d38:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d3e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d40:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401d44:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d46:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d48:	4311      	orrs	r1, r2
  401d4a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d4c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401d52:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401d58:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401d5a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401d60:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401d62:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  401d66:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401d68:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401d6a:	4311      	orrs	r1, r2
  401d6c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401d6e:	605a      	str	r2, [r3, #4]
  401d70:	4770      	bx	lr
  401d72:	bf00      	nop
  401d74:	400e0e00 	.word	0x400e0e00

00401d78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d78:	e7fe      	b.n	401d78 <Dummy_Handler>
	...

00401d7c <Reset_Handler>:
{
  401d7c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  401d7e:	4b23      	ldr	r3, [pc, #140]	; (401e0c <Reset_Handler+0x90>)
  401d80:	4a23      	ldr	r2, [pc, #140]	; (401e10 <Reset_Handler+0x94>)
  401d82:	429a      	cmp	r2, r3
  401d84:	d010      	beq.n	401da8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  401d86:	4b23      	ldr	r3, [pc, #140]	; (401e14 <Reset_Handler+0x98>)
  401d88:	4a20      	ldr	r2, [pc, #128]	; (401e0c <Reset_Handler+0x90>)
  401d8a:	429a      	cmp	r2, r3
  401d8c:	d20c      	bcs.n	401da8 <Reset_Handler+0x2c>
  401d8e:	3b01      	subs	r3, #1
  401d90:	1a9b      	subs	r3, r3, r2
  401d92:	f023 0303 	bic.w	r3, r3, #3
  401d96:	3304      	adds	r3, #4
  401d98:	4413      	add	r3, r2
  401d9a:	491d      	ldr	r1, [pc, #116]	; (401e10 <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
  401d9c:	f851 0b04 	ldr.w	r0, [r1], #4
  401da0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401da4:	429a      	cmp	r2, r3
  401da6:	d1f9      	bne.n	401d9c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  401da8:	4b1b      	ldr	r3, [pc, #108]	; (401e18 <Reset_Handler+0x9c>)
  401daa:	4a1c      	ldr	r2, [pc, #112]	; (401e1c <Reset_Handler+0xa0>)
  401dac:	429a      	cmp	r2, r3
  401dae:	d20a      	bcs.n	401dc6 <Reset_Handler+0x4a>
  401db0:	3b01      	subs	r3, #1
  401db2:	1a9b      	subs	r3, r3, r2
  401db4:	f023 0303 	bic.w	r3, r3, #3
  401db8:	3304      	adds	r3, #4
  401dba:	4413      	add	r3, r2
                *pDest++ = 0;
  401dbc:	2100      	movs	r1, #0
  401dbe:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401dc2:	4293      	cmp	r3, r2
  401dc4:	d1fb      	bne.n	401dbe <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401dc6:	4a16      	ldr	r2, [pc, #88]	; (401e20 <Reset_Handler+0xa4>)
  401dc8:	4b16      	ldr	r3, [pc, #88]	; (401e24 <Reset_Handler+0xa8>)
  401dca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401dce:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401dd0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  401dd4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401dd6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401dda:	2100      	movs	r1, #0
  401ddc:	4a12      	ldr	r2, [pc, #72]	; (401e28 <Reset_Handler+0xac>)
  401dde:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401de0:	4912      	ldr	r1, [pc, #72]	; (401e2c <Reset_Handler+0xb0>)
  401de2:	680a      	ldr	r2, [r1, #0]
  401de4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  401de8:	600a      	str	r2, [r1, #0]
  __ASM volatile ("dsb");
  401dea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401dee:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401df2:	b92b      	cbnz	r3, 401e00 <Reset_Handler+0x84>
		cpu_irq_enable();
  401df4:	2201      	movs	r2, #1
  401df6:	4b0c      	ldr	r3, [pc, #48]	; (401e28 <Reset_Handler+0xac>)
  401df8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401dfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401dfe:	b662      	cpsie	i
        __libc_init_array();
  401e00:	4b0b      	ldr	r3, [pc, #44]	; (401e30 <Reset_Handler+0xb4>)
  401e02:	4798      	blx	r3
        main();
  401e04:	4b0b      	ldr	r3, [pc, #44]	; (401e34 <Reset_Handler+0xb8>)
  401e06:	4798      	blx	r3
  401e08:	e7fe      	b.n	401e08 <Reset_Handler+0x8c>
  401e0a:	bf00      	nop
  401e0c:	20400000 	.word	0x20400000
  401e10:	00402570 	.word	0x00402570
  401e14:	20400444 	.word	0x20400444
  401e18:	2041da34 	.word	0x2041da34
  401e1c:	20400448 	.word	0x20400448
  401e20:	e000ed00 	.word	0xe000ed00
  401e24:	00400000 	.word	0x00400000
  401e28:	20400010 	.word	0x20400010
  401e2c:	e000ed88 	.word	0xe000ed88
  401e30:	004022a1 	.word	0x004022a1
  401e34:	00401fed 	.word	0x00401fed

00401e38 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401e38:	4b3b      	ldr	r3, [pc, #236]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e3c:	f003 0303 	and.w	r3, r3, #3
  401e40:	2b01      	cmp	r3, #1
  401e42:	d01d      	beq.n	401e80 <SystemCoreClockUpdate+0x48>
  401e44:	b183      	cbz	r3, 401e68 <SystemCoreClockUpdate+0x30>
  401e46:	2b02      	cmp	r3, #2
  401e48:	d036      	beq.n	401eb8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401e4a:	4b37      	ldr	r3, [pc, #220]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e52:	2b70      	cmp	r3, #112	; 0x70
  401e54:	d05f      	beq.n	401f16 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401e56:	4b34      	ldr	r3, [pc, #208]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e5a:	4934      	ldr	r1, [pc, #208]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401e5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401e60:	680b      	ldr	r3, [r1, #0]
  401e62:	40d3      	lsrs	r3, r2
  401e64:	600b      	str	r3, [r1, #0]
  401e66:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401e68:	4b31      	ldr	r3, [pc, #196]	; (401f30 <SystemCoreClockUpdate+0xf8>)
  401e6a:	695b      	ldr	r3, [r3, #20]
  401e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401e70:	bf14      	ite	ne
  401e72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401e76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401e7a:	4b2c      	ldr	r3, [pc, #176]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401e7c:	601a      	str	r2, [r3, #0]
  401e7e:	e7e4      	b.n	401e4a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401e80:	4b29      	ldr	r3, [pc, #164]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401e82:	6a1b      	ldr	r3, [r3, #32]
  401e84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401e88:	d003      	beq.n	401e92 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401e8a:	4a2a      	ldr	r2, [pc, #168]	; (401f34 <SystemCoreClockUpdate+0xfc>)
  401e8c:	4b27      	ldr	r3, [pc, #156]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401e8e:	601a      	str	r2, [r3, #0]
  401e90:	e7db      	b.n	401e4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e92:	4a29      	ldr	r2, [pc, #164]	; (401f38 <SystemCoreClockUpdate+0x100>)
  401e94:	4b25      	ldr	r3, [pc, #148]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401e96:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401e98:	4b23      	ldr	r3, [pc, #140]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401e9a:	6a1b      	ldr	r3, [r3, #32]
  401e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ea0:	2b10      	cmp	r3, #16
  401ea2:	d005      	beq.n	401eb0 <SystemCoreClockUpdate+0x78>
  401ea4:	2b20      	cmp	r3, #32
  401ea6:	d1d0      	bne.n	401e4a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401ea8:	4a22      	ldr	r2, [pc, #136]	; (401f34 <SystemCoreClockUpdate+0xfc>)
  401eaa:	4b20      	ldr	r3, [pc, #128]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401eac:	601a      	str	r2, [r3, #0]
          break;
  401eae:	e7cc      	b.n	401e4a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401eb0:	4a22      	ldr	r2, [pc, #136]	; (401f3c <SystemCoreClockUpdate+0x104>)
  401eb2:	4b1e      	ldr	r3, [pc, #120]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401eb4:	601a      	str	r2, [r3, #0]
          break;
  401eb6:	e7c8      	b.n	401e4a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401eb8:	4b1b      	ldr	r3, [pc, #108]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401eba:	6a1b      	ldr	r3, [r3, #32]
  401ebc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ec0:	d016      	beq.n	401ef0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401ec2:	4a1c      	ldr	r2, [pc, #112]	; (401f34 <SystemCoreClockUpdate+0xfc>)
  401ec4:	4b19      	ldr	r3, [pc, #100]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401ec6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401ec8:	4b17      	ldr	r3, [pc, #92]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ecc:	f003 0303 	and.w	r3, r3, #3
  401ed0:	2b02      	cmp	r3, #2
  401ed2:	d1ba      	bne.n	401e4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401ed4:	4a14      	ldr	r2, [pc, #80]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401ed6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401ed8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401eda:	4814      	ldr	r0, [pc, #80]	; (401f2c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401edc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401ee0:	6803      	ldr	r3, [r0, #0]
  401ee2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401ee6:	b2d2      	uxtb	r2, r2
  401ee8:	fbb3 f3f2 	udiv	r3, r3, r2
  401eec:	6003      	str	r3, [r0, #0]
  401eee:	e7ac      	b.n	401e4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ef0:	4a11      	ldr	r2, [pc, #68]	; (401f38 <SystemCoreClockUpdate+0x100>)
  401ef2:	4b0e      	ldr	r3, [pc, #56]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401ef4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401ef6:	4b0c      	ldr	r3, [pc, #48]	; (401f28 <SystemCoreClockUpdate+0xf0>)
  401ef8:	6a1b      	ldr	r3, [r3, #32]
  401efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401efe:	2b10      	cmp	r3, #16
  401f00:	d005      	beq.n	401f0e <SystemCoreClockUpdate+0xd6>
  401f02:	2b20      	cmp	r3, #32
  401f04:	d1e0      	bne.n	401ec8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401f06:	4a0b      	ldr	r2, [pc, #44]	; (401f34 <SystemCoreClockUpdate+0xfc>)
  401f08:	4b08      	ldr	r3, [pc, #32]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401f0a:	601a      	str	r2, [r3, #0]
          break;
  401f0c:	e7dc      	b.n	401ec8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401f0e:	4a0b      	ldr	r2, [pc, #44]	; (401f3c <SystemCoreClockUpdate+0x104>)
  401f10:	4b06      	ldr	r3, [pc, #24]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401f12:	601a      	str	r2, [r3, #0]
          break;
  401f14:	e7d8      	b.n	401ec8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401f16:	4a05      	ldr	r2, [pc, #20]	; (401f2c <SystemCoreClockUpdate+0xf4>)
  401f18:	6813      	ldr	r3, [r2, #0]
  401f1a:	4909      	ldr	r1, [pc, #36]	; (401f40 <SystemCoreClockUpdate+0x108>)
  401f1c:	fba1 1303 	umull	r1, r3, r1, r3
  401f20:	085b      	lsrs	r3, r3, #1
  401f22:	6013      	str	r3, [r2, #0]
  401f24:	4770      	bx	lr
  401f26:	bf00      	nop
  401f28:	400e0600 	.word	0x400e0600
  401f2c:	20400014 	.word	0x20400014
  401f30:	400e1810 	.word	0x400e1810
  401f34:	00b71b00 	.word	0x00b71b00
  401f38:	003d0900 	.word	0x003d0900
  401f3c:	007a1200 	.word	0x007a1200
  401f40:	aaaaaaab 	.word	0xaaaaaaab

00401f44 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401f44:	4b12      	ldr	r3, [pc, #72]	; (401f90 <system_init_flash+0x4c>)
  401f46:	4298      	cmp	r0, r3
  401f48:	d911      	bls.n	401f6e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401f4a:	4b12      	ldr	r3, [pc, #72]	; (401f94 <system_init_flash+0x50>)
  401f4c:	4298      	cmp	r0, r3
  401f4e:	d913      	bls.n	401f78 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401f50:	4b11      	ldr	r3, [pc, #68]	; (401f98 <system_init_flash+0x54>)
  401f52:	4298      	cmp	r0, r3
  401f54:	d914      	bls.n	401f80 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401f56:	4b11      	ldr	r3, [pc, #68]	; (401f9c <system_init_flash+0x58>)
  401f58:	4298      	cmp	r0, r3
  401f5a:	d915      	bls.n	401f88 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401f5c:	4b10      	ldr	r3, [pc, #64]	; (401fa0 <system_init_flash+0x5c>)
  401f5e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f60:	bf94      	ite	ls
  401f62:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f66:	4a0f      	ldrhi	r2, [pc, #60]	; (401fa4 <system_init_flash+0x60>)
  401f68:	4b0f      	ldr	r3, [pc, #60]	; (401fa8 <system_init_flash+0x64>)
  401f6a:	601a      	str	r2, [r3, #0]
  401f6c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f72:	4b0d      	ldr	r3, [pc, #52]	; (401fa8 <system_init_flash+0x64>)
  401f74:	601a      	str	r2, [r3, #0]
  401f76:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f78:	4a0c      	ldr	r2, [pc, #48]	; (401fac <system_init_flash+0x68>)
  401f7a:	4b0b      	ldr	r3, [pc, #44]	; (401fa8 <system_init_flash+0x64>)
  401f7c:	601a      	str	r2, [r3, #0]
  401f7e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f80:	4a0b      	ldr	r2, [pc, #44]	; (401fb0 <system_init_flash+0x6c>)
  401f82:	4b09      	ldr	r3, [pc, #36]	; (401fa8 <system_init_flash+0x64>)
  401f84:	601a      	str	r2, [r3, #0]
  401f86:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f88:	4a0a      	ldr	r2, [pc, #40]	; (401fb4 <system_init_flash+0x70>)
  401f8a:	4b07      	ldr	r3, [pc, #28]	; (401fa8 <system_init_flash+0x64>)
  401f8c:	601a      	str	r2, [r3, #0]
  401f8e:	4770      	bx	lr
  401f90:	01312cff 	.word	0x01312cff
  401f94:	026259ff 	.word	0x026259ff
  401f98:	039386ff 	.word	0x039386ff
  401f9c:	04c4b3ff 	.word	0x04c4b3ff
  401fa0:	05f5e0ff 	.word	0x05f5e0ff
  401fa4:	04000500 	.word	0x04000500
  401fa8:	400e0c00 	.word	0x400e0c00
  401fac:	04000100 	.word	0x04000100
  401fb0:	04000200 	.word	0x04000200
  401fb4:	04000300 	.word	0x04000300

00401fb8 <init_PYTHON480>:
//	LED_ENT_PORT &= ~(1<<LED_ENT2_PIN);
}

// Sets up initial register values in the PYTHON 480
void init_PYTHON480()
{
  401fb8:	b508      	push	{r3, lr}
	EnableClockMngmnt1();
  401fba:	4b06      	ldr	r3, [pc, #24]	; (401fd4 <init_PYTHON480+0x1c>)
  401fbc:	4798      	blx	r3
	delay_ms(10);			// Maybe a small pause here for things to stabilize
  401fbe:	4806      	ldr	r0, [pc, #24]	; (401fd8 <init_PYTHON480+0x20>)
  401fc0:	4b06      	ldr	r3, [pc, #24]	; (401fdc <init_PYTHON480+0x24>)
  401fc2:	4798      	blx	r3
	EnableClockMngmnt2();
  401fc4:	4b06      	ldr	r3, [pc, #24]	; (401fe0 <init_PYTHON480+0x28>)
  401fc6:	4798      	blx	r3
	RequiredUploads();
  401fc8:	4b06      	ldr	r3, [pc, #24]	; (401fe4 <init_PYTHON480+0x2c>)
  401fca:	4798      	blx	r3
	SoftPowerUp();
  401fcc:	4b06      	ldr	r3, [pc, #24]	; (401fe8 <init_PYTHON480+0x30>)
  401fce:	4798      	blx	r3
  401fd0:	bd08      	pop	{r3, pc}
  401fd2:	bf00      	nop
  401fd4:	004010c1 	.word	0x004010c1
  401fd8:	0003b440 	.word	0x0003b440
  401fdc:	20400001 	.word	0x20400001
  401fe0:	00401105 	.word	0x00401105
  401fe4:	00401125 	.word	0x00401125
  401fe8:	004015c5 	.word	0x004015c5

00401fec <main>:
/************************************************************************/
/*                            MAIN FUNCTION                             */
/************************************************************************/

int main (void)
{
  401fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t SD;


	// ========== Interrupt Managements ========== //
	irq_initialize_vectors();		// IRQ: Interrupt Request Line
	cpu_irq_enable();
  401fee:	2201      	movs	r2, #1
  401ff0:	4b8a      	ldr	r3, [pc, #552]	; (40221c <main+0x230>)
  401ff2:	701a      	strb	r2, [r3, #0]
  401ff4:	f3bf 8f5f 	dmb	sy
  401ff8:	b662      	cpsie	i

	
	// ========== MCU Initiations ========== //
	sysclk_init();
  401ffa:	4b89      	ldr	r3, [pc, #548]	; (402220 <main+0x234>)
  401ffc:	4798      	blx	r3
	board_init();		
  401ffe:	4b89      	ldr	r3, [pc, #548]	; (402224 <main+0x238>)
  402000:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402002:	200a      	movs	r0, #10
  402004:	4c88      	ldr	r4, [pc, #544]	; (402228 <main+0x23c>)
  402006:	47a0      	blx	r4
  402008:	200b      	movs	r0, #11
  40200a:	47a0      	blx	r4
  40200c:	2010      	movs	r0, #16
  40200e:	47a0      	blx	r4
	ioport_init();					// turns on all peripheral clocks. could remove this to save power
									// this is redundant, so maybe get rid of it after.

	// ========== CMOS Sensor Connection ========== //
	enableSourceClk();				// Turns on SCK1 from MCU to drive CMOS sensor	
  402010:	4b86      	ldr	r3, [pc, #536]	; (40222c <main+0x240>)
  402012:	4798      	blx	r3
	time_tick_init();
  402014:	4b86      	ldr	r3, [pc, #536]	; (402230 <main+0x244>)
  402016:	4798      	blx	r3
//	PWM_Init();						// This is for older MiniScopes
	
	#ifdef NOIP1SN0480A
		SPI_BitBang_init();
  402018:	4b86      	ldr	r3, [pc, #536]	; (402234 <main+0x248>)
  40201a:	4798      	blx	r3
		TWIHS_init();
  40201c:	4b86      	ldr	r3, [pc, #536]	; (402238 <main+0x24c>)
  40201e:	4798      	blx	r3
	#else
//		Python480 uses SPI, and lens & LED use I2C
	#endif
	
	tick_start = time_tick_get();
  402020:	4f86      	ldr	r7, [pc, #536]	; (40223c <main+0x250>)
  402022:	47b8      	blx	r7
  402024:	4e86      	ldr	r6, [pc, #536]	; (402240 <main+0x254>)
  402026:	6030      	str	r0, [r6, #0]
	time_ms = time_tick_calc_delay(tick_start, time_tick_get());		// 1000Hz...?
  402028:	6835      	ldr	r5, [r6, #0]
  40202a:	47b8      	blx	r7
  40202c:	4601      	mov	r1, r0
  40202e:	4628      	mov	r0, r5
  402030:	4b84      	ldr	r3, [pc, #528]	; (402244 <main+0x258>)
  402032:	4798      	blx	r3
  402034:	4b84      	ldr	r3, [pc, #528]	; (402248 <main+0x25c>)
  402036:	6018      	str	r0, [r3, #0]


	// ========== Power On Status LED ========== //
	pmc_enable_periph_clk(ID_PIOD);
  402038:	2010      	movs	r0, #16
  40203a:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40203c:	4b83      	ldr	r3, [pc, #524]	; (40224c <main+0x260>)
  40203e:	2502      	movs	r5, #2
  402040:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402042:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402046:	631d      	str	r5, [r3, #48]	; 0x30
	
	
	// ========== PYTHON480 Connection ========== //
	// BEGIN PERIPHERAL CLOCK
	// Enable control of sensor control pins (Reset on, trigger off, Monitor off)
	pmc_enable_periph_clk(ID_PIOA);
  402048:	200a      	movs	r0, #10
  40204a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40204c:	200b      	movs	r0, #11
  40204e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402050:	4c7f      	ldr	r4, [pc, #508]	; (402250 <main+0x264>)
  402052:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402054:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402058:	6365      	str	r5, [r4, #52]	; 0x34
	// RESET PIN
	// goes off and on
	ioport_set_pin_dir(RESET_N_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESET_N_PIN, 0);					// not sure if this can stay high the whole time.

	tick_start = time_tick_get();
  40205a:	47b8      	blx	r7
  40205c:	6030      	str	r0, [r6, #0]
	delay_ms(100);
  40205e:	487d      	ldr	r0, [pc, #500]	; (402254 <main+0x268>)
  402060:	4b7d      	ldr	r3, [pc, #500]	; (402258 <main+0x26c>)
  402062:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402064:	6325      	str	r5, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402066:	2304      	movs	r3, #4
  402068:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40206a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40206e:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402070:	4b7a      	ldr	r3, [pc, #488]	; (40225c <main+0x270>)
  402072:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402076:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402078:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40207c:	635a      	str	r2, [r3, #52]	; 0x34
	
	// STANDBY PIN
	/* No standby in Python480 */

	// ========== Power Up Python480 ========== //
	init_PYTHON480();
  40207e:	4b78      	ldr	r3, [pc, #480]	; (402260 <main+0x274>)
  402080:	4798      	blx	r3
	
	uint16_t PythonID;
	// Read the Python480 ID using the SPI connection
	PythonID = SPI_Read(0x0000);
  402082:	2000      	movs	r0, #0
  402084:	4b77      	ldr	r3, [pc, #476]	; (402264 <main+0x278>)
  402086:	4798      	blx	r3
	if (PythonID == 0x5004)
  402088:	f245 0304 	movw	r3, #20484	; 0x5004
  40208c:	4298      	cmp	r0, r3
  40208e:	d00c      	beq.n	4020aa <main+0xbe>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402090:	2201      	movs	r2, #1
  402092:	4b72      	ldr	r3, [pc, #456]	; (40225c <main+0x270>)
  402094:	631a      	str	r2, [r3, #48]	; 0x30
	// ========== Power Up the Excitation LED ========== //
	enableLED();
	
	
	// ========== SD Card ========== //
	sd_mmc_init();
  402096:	4b74      	ldr	r3, [pc, #464]	; (402268 <main+0x27c>)
  402098:	4798      	blx	r3
	
	// Check connection
	uint32_t sdCheck;
	sdCheck = sd_mmc_check(SD_SLOT_NB);
  40209a:	2000      	movs	r0, #0
  40209c:	4b73      	ldr	r3, [pc, #460]	; (40226c <main+0x280>)
  40209e:	4798      	blx	r3
	while (sdCheck != SD_MMC_OK) 
  4020a0:	b1f0      	cbz	r0, 4020e0 <main+0xf4>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4020a2:	4c6a      	ldr	r4, [pc, #424]	; (40224c <main+0x260>)
	{
		ioport_toggle_pin_level(LED_PIN);					// while the SD connection is NOT okay.. wait
		delay_ms(100);										// delete later when expansion PCB
  4020a4:	4e6b      	ldr	r6, [pc, #428]	; (402254 <main+0x268>)
  4020a6:	4d6c      	ldr	r5, [pc, #432]	; (402258 <main+0x26c>)
  4020a8:	e013      	b.n	4020d2 <main+0xe6>
  4020aa:	4b68      	ldr	r3, [pc, #416]	; (40224c <main+0x260>)
  4020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4020ae:	f013 0f02 	tst.w	r3, #2
  4020b2:	d002      	beq.n	4020ba <main+0xce>
		port->PIO_CODR = mask;
  4020b4:	4b65      	ldr	r3, [pc, #404]	; (40224c <main+0x260>)
  4020b6:	635d      	str	r5, [r3, #52]	; 0x34
  4020b8:	e7ea      	b.n	402090 <main+0xa4>
	} else {
		port->PIO_SODR = mask;
  4020ba:	2202      	movs	r2, #2
  4020bc:	4b63      	ldr	r3, [pc, #396]	; (40224c <main+0x260>)
  4020be:	631a      	str	r2, [r3, #48]	; 0x30
  4020c0:	e7e6      	b.n	402090 <main+0xa4>
  4020c2:	2302      	movs	r3, #2
  4020c4:	6323      	str	r3, [r4, #48]	; 0x30
  4020c6:	4630      	mov	r0, r6
  4020c8:	47a8      	blx	r5
		sdCheck = sd_mmc_check(SD_SLOT_NB);
  4020ca:	2000      	movs	r0, #0
  4020cc:	4b67      	ldr	r3, [pc, #412]	; (40226c <main+0x280>)
  4020ce:	4798      	blx	r3
	while (sdCheck != SD_MMC_OK) 
  4020d0:	b130      	cbz	r0, 4020e0 <main+0xf4>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4020d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020d4:	f013 0f02 	tst.w	r3, #2
  4020d8:	d0f3      	beq.n	4020c2 <main+0xd6>
		port->PIO_CODR = mask;
  4020da:	2302      	movs	r3, #2
  4020dc:	6363      	str	r3, [r4, #52]	; 0x34
  4020de:	e7f2      	b.n	4020c6 <main+0xda>
	}																
		
	// Check SD Card Type
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC)) // Bitwise OR --> 9 = 8 + 1
  4020e0:	2000      	movs	r0, #0
  4020e2:	4b63      	ldr	r3, [pc, #396]	; (402270 <main+0x284>)
  4020e4:	4798      	blx	r3
  4020e6:	2809      	cmp	r0, #9
  4020e8:	d027      	beq.n	40213a <main+0x14e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4020ea:	2202      	movs	r2, #2
  4020ec:	4b57      	ldr	r3, [pc, #348]	; (40224c <main+0x260>)
  4020ee:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4020f0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4020f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4020f8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4020fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4020fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402102:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402104:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402108:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40210c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40210e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402116:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402118:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40211c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402120:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402122:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40212a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40212c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_set_pin_dir(SD_PIN_2, IOPORT_DIR_OUTPUT);
		ioport_set_pin_dir(SD_PIN_3, IOPORT_DIR_OUTPUT);
		ioport_set_pin_dir(SD_PIN_4, IOPORT_DIR_OUTPUT);
		ioport_set_pin_dir(SD_CONFIG, IOPORT_DIR_INPUT);
		
		pmc_enable_periph_clk(ID_PIOA);						// Already initiated before, so check again
  402130:	200a      	movs	r0, #10
  402132:	4b3d      	ldr	r3, [pc, #244]	; (402228 <main+0x23c>)
  402134:	4798      	blx	r3
  402136:	2000      	movs	r0, #0
  402138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40213a:	2202      	movs	r2, #2
  40213c:	4b43      	ldr	r3, [pc, #268]	; (40224c <main+0x260>)
  40213e:	631a      	str	r2, [r3, #48]	; 0x30
		uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB);
  402140:	2000      	movs	r0, #0
  402142:	4b4c      	ldr	r3, [pc, #304]	; (402274 <main+0x288>)
  402144:	4798      	blx	r3
		tick_start = time_tick_get();
  402146:	4b3d      	ldr	r3, [pc, #244]	; (40223c <main+0x250>)
  402148:	4798      	blx	r3
  40214a:	4b3d      	ldr	r3, [pc, #244]	; (402240 <main+0x254>)
  40214c:	6018      	str	r0, [r3, #0]
		delay_ms(5000);
  40214e:	484a      	ldr	r0, [pc, #296]	; (402278 <main+0x28c>)
  402150:	4b41      	ldr	r3, [pc, #260]	; (402258 <main+0x26c>)
  402152:	4798      	blx	r3
		if (sd_mmc_is_write_protected(SD_SLOT_NB) == true)
  402154:	2000      	movs	r0, #0
  402156:	4b49      	ldr	r3, [pc, #292]	; (40227c <main+0x290>)
  402158:	4798      	blx	r3
  40215a:	bb38      	cbnz	r0, 4021ac <main+0x1c0>
		fillBuffer();
  40215c:	4b48      	ldr	r3, [pc, #288]	; (402280 <main+0x294>)
  40215e:	4798      	blx	r3
		if (SD_MMC_OK != sd_mmc_init_write_blocks(SD_SLOT_NB, STARTING_BLOCK, NB_BLOCKS_PER_FRAME))
  402160:	22ea      	movs	r2, #234	; 0xea
  402162:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402166:	2000      	movs	r0, #0
  402168:	4b46      	ldr	r3, [pc, #280]	; (402284 <main+0x298>)
  40216a:	4798      	blx	r3
  40216c:	2800      	cmp	r0, #0
  40216e:	d12a      	bne.n	4021c6 <main+0x1da>
		for (i = 0; i < numWritesPerFrame; ++i)
  402170:	4b45      	ldr	r3, [pc, #276]	; (402288 <main+0x29c>)
  402172:	681b      	ldr	r3, [r3, #0]
  402174:	b163      	cbz	r3, 402190 <main+0x1a4>
  402176:	2400      	movs	r4, #0
			if (SD_MMC_OK != sd_mmc_start_write_blocks(imageBuffer, NB_BLOCKS_PER_FRAME))
  402178:	4f44      	ldr	r7, [pc, #272]	; (40228c <main+0x2a0>)
  40217a:	4e45      	ldr	r6, [pc, #276]	; (402290 <main+0x2a4>)
		for (i = 0; i < numWritesPerFrame; ++i)
  40217c:	4d42      	ldr	r5, [pc, #264]	; (402288 <main+0x29c>)
			if (SD_MMC_OK != sd_mmc_start_write_blocks(imageBuffer, NB_BLOCKS_PER_FRAME))
  40217e:	21ea      	movs	r1, #234	; 0xea
  402180:	4638      	mov	r0, r7
  402182:	47b0      	blx	r6
  402184:	2800      	cmp	r0, #0
  402186:	d12b      	bne.n	4021e0 <main+0x1f4>
		for (i = 0; i < numWritesPerFrame; ++i)
  402188:	3401      	adds	r4, #1
  40218a:	682b      	ldr	r3, [r5, #0]
  40218c:	42a3      	cmp	r3, r4
  40218e:	d8f6      	bhi.n	40217e <main+0x192>
		if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(true))
  402190:	2001      	movs	r0, #1
  402192:	4b40      	ldr	r3, [pc, #256]	; (402294 <main+0x2a8>)
  402194:	4798      	blx	r3
  402196:	2800      	cmp	r0, #0
  402198:	d033      	beq.n	402202 <main+0x216>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40219a:	4b2c      	ldr	r3, [pc, #176]	; (40224c <main+0x260>)
  40219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40219e:	f013 0f02 	tst.w	r3, #2
  4021a2:	d02a      	beq.n	4021fa <main+0x20e>
		port->PIO_CODR = mask;
  4021a4:	2202      	movs	r2, #2
  4021a6:	4b29      	ldr	r3, [pc, #164]	; (40224c <main+0x260>)
  4021a8:	635a      	str	r2, [r3, #52]	; 0x34
  4021aa:	e014      	b.n	4021d6 <main+0x1ea>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4021ac:	4b27      	ldr	r3, [pc, #156]	; (40224c <main+0x260>)
  4021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4021b0:	f013 0f02 	tst.w	r3, #2
  4021b4:	d003      	beq.n	4021be <main+0x1d2>
		port->PIO_CODR = mask;
  4021b6:	2202      	movs	r2, #2
  4021b8:	4b24      	ldr	r3, [pc, #144]	; (40224c <main+0x260>)
  4021ba:	635a      	str	r2, [r3, #52]	; 0x34
  4021bc:	e7ce      	b.n	40215c <main+0x170>
		port->PIO_SODR = mask;
  4021be:	2202      	movs	r2, #2
  4021c0:	4b22      	ldr	r3, [pc, #136]	; (40224c <main+0x260>)
  4021c2:	631a      	str	r2, [r3, #48]	; 0x30
  4021c4:	e7ca      	b.n	40215c <main+0x170>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4021c6:	4b21      	ldr	r3, [pc, #132]	; (40224c <main+0x260>)
  4021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4021ca:	f013 0f02 	tst.w	r3, #2
  4021ce:	d003      	beq.n	4021d8 <main+0x1ec>
		port->PIO_CODR = mask;
  4021d0:	2202      	movs	r2, #2
  4021d2:	4b1e      	ldr	r3, [pc, #120]	; (40224c <main+0x260>)
  4021d4:	635a      	str	r2, [r3, #52]	; 0x34
		// send 4 bits of data
		// and so on
	}
	
	return 0;
}
  4021d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port->PIO_SODR = mask;
  4021d8:	2202      	movs	r2, #2
  4021da:	4b1c      	ldr	r3, [pc, #112]	; (40224c <main+0x260>)
  4021dc:	631a      	str	r2, [r3, #48]	; 0x30
  4021de:	e7fa      	b.n	4021d6 <main+0x1ea>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4021e0:	4b1a      	ldr	r3, [pc, #104]	; (40224c <main+0x260>)
  4021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4021e4:	f013 0f02 	tst.w	r3, #2
  4021e8:	d003      	beq.n	4021f2 <main+0x206>
		port->PIO_CODR = mask;
  4021ea:	2202      	movs	r2, #2
  4021ec:	4b17      	ldr	r3, [pc, #92]	; (40224c <main+0x260>)
  4021ee:	635a      	str	r2, [r3, #52]	; 0x34
  4021f0:	e7f1      	b.n	4021d6 <main+0x1ea>
		port->PIO_SODR = mask;
  4021f2:	2202      	movs	r2, #2
  4021f4:	4b15      	ldr	r3, [pc, #84]	; (40224c <main+0x260>)
  4021f6:	631a      	str	r2, [r3, #48]	; 0x30
  4021f8:	e7ed      	b.n	4021d6 <main+0x1ea>
  4021fa:	2202      	movs	r2, #2
  4021fc:	4b13      	ldr	r3, [pc, #76]	; (40224c <main+0x260>)
  4021fe:	631a      	str	r2, [r3, #48]	; 0x30
  402200:	e7e9      	b.n	4021d6 <main+0x1ea>
			testPoint++;
  402202:	4c25      	ldr	r4, [pc, #148]	; (402298 <main+0x2ac>)
			delay_ms(1000);
  402204:	4e25      	ldr	r6, [pc, #148]	; (40229c <main+0x2b0>)
  402206:	4d14      	ldr	r5, [pc, #80]	; (402258 <main+0x26c>)
			testPoint++;
  402208:	6823      	ldr	r3, [r4, #0]
  40220a:	3301      	adds	r3, #1
  40220c:	6023      	str	r3, [r4, #0]
			testPoint++;
  40220e:	6823      	ldr	r3, [r4, #0]
  402210:	3301      	adds	r3, #1
  402212:	6023      	str	r3, [r4, #0]
			delay_ms(1000);
  402214:	4630      	mov	r0, r6
  402216:	47a8      	blx	r5
  402218:	e7f6      	b.n	402208 <main+0x21c>
  40221a:	bf00      	nop
  40221c:	20400010 	.word	0x20400010
  402220:	00401a05 	.word	0x00401a05
  402224:	00401ca5 	.word	0x00401ca5
  402228:	00401b99 	.word	0x00401b99
  40222c:	00401621 	.word	0x00401621
  402230:	004019bd 	.word	0x004019bd
  402234:	00401069 	.word	0x00401069
  402238:	00400fd5 	.word	0x00400fd5
  40223c:	004019e9 	.word	0x004019e9
  402240:	2041da08 	.word	0x2041da08
  402244:	004019f5 	.word	0x004019f5
  402248:	2041da0c 	.word	0x2041da0c
  40224c:	400e1400 	.word	0x400e1400
  402250:	400e1000 	.word	0x400e1000
  402254:	00250a78 	.word	0x00250a78
  402258:	20400001 	.word	0x20400001
  40225c:	400e0e00 	.word	0x400e0e00
  402260:	00401fb9 	.word	0x00401fb9
  402264:	004018d1 	.word	0x004018d1
  402268:	0040027d 	.word	0x0040027d
  40226c:	0040029d 	.word	0x0040029d
  402270:	004008f9 	.word	0x004008f9
  402274:	0040091d 	.word	0x0040091d
  402278:	073c0b67 	.word	0x073c0b67
  40227c:	00400941 	.word	0x00400941
  402280:	00401605 	.word	0x00401605
  402284:	00400945 	.word	0x00400945
  402288:	2040000c 	.word	0x2040000c
  40228c:	20400548 	.word	0x20400548
  402290:	004009d1 	.word	0x004009d1
  402294:	004009f9 	.word	0x004009f9
  402298:	20400520 	.word	0x20400520
  40229c:	017268af 	.word	0x017268af

004022a0 <__libc_init_array>:
  4022a0:	b570      	push	{r4, r5, r6, lr}
  4022a2:	4e0f      	ldr	r6, [pc, #60]	; (4022e0 <__libc_init_array+0x40>)
  4022a4:	4d0f      	ldr	r5, [pc, #60]	; (4022e4 <__libc_init_array+0x44>)
  4022a6:	1b76      	subs	r6, r6, r5
  4022a8:	10b6      	asrs	r6, r6, #2
  4022aa:	bf18      	it	ne
  4022ac:	2400      	movne	r4, #0
  4022ae:	d005      	beq.n	4022bc <__libc_init_array+0x1c>
  4022b0:	3401      	adds	r4, #1
  4022b2:	f855 3b04 	ldr.w	r3, [r5], #4
  4022b6:	4798      	blx	r3
  4022b8:	42a6      	cmp	r6, r4
  4022ba:	d1f9      	bne.n	4022b0 <__libc_init_array+0x10>
  4022bc:	4e0a      	ldr	r6, [pc, #40]	; (4022e8 <__libc_init_array+0x48>)
  4022be:	4d0b      	ldr	r5, [pc, #44]	; (4022ec <__libc_init_array+0x4c>)
  4022c0:	1b76      	subs	r6, r6, r5
  4022c2:	f000 f943 	bl	40254c <_init>
  4022c6:	10b6      	asrs	r6, r6, #2
  4022c8:	bf18      	it	ne
  4022ca:	2400      	movne	r4, #0
  4022cc:	d006      	beq.n	4022dc <__libc_init_array+0x3c>
  4022ce:	3401      	adds	r4, #1
  4022d0:	f855 3b04 	ldr.w	r3, [r5], #4
  4022d4:	4798      	blx	r3
  4022d6:	42a6      	cmp	r6, r4
  4022d8:	d1f9      	bne.n	4022ce <__libc_init_array+0x2e>
  4022da:	bd70      	pop	{r4, r5, r6, pc}
  4022dc:	bd70      	pop	{r4, r5, r6, pc}
  4022de:	bf00      	nop
  4022e0:	00402558 	.word	0x00402558
  4022e4:	00402558 	.word	0x00402558
  4022e8:	00402560 	.word	0x00402560
  4022ec:	00402558 	.word	0x00402558

004022f0 <memset>:
  4022f0:	b470      	push	{r4, r5, r6}
  4022f2:	0786      	lsls	r6, r0, #30
  4022f4:	d046      	beq.n	402384 <memset+0x94>
  4022f6:	1e54      	subs	r4, r2, #1
  4022f8:	2a00      	cmp	r2, #0
  4022fa:	d041      	beq.n	402380 <memset+0x90>
  4022fc:	b2ca      	uxtb	r2, r1
  4022fe:	4603      	mov	r3, r0
  402300:	e002      	b.n	402308 <memset+0x18>
  402302:	f114 34ff 	adds.w	r4, r4, #4294967295
  402306:	d33b      	bcc.n	402380 <memset+0x90>
  402308:	f803 2b01 	strb.w	r2, [r3], #1
  40230c:	079d      	lsls	r5, r3, #30
  40230e:	d1f8      	bne.n	402302 <memset+0x12>
  402310:	2c03      	cmp	r4, #3
  402312:	d92e      	bls.n	402372 <memset+0x82>
  402314:	b2cd      	uxtb	r5, r1
  402316:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40231a:	2c0f      	cmp	r4, #15
  40231c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402320:	d919      	bls.n	402356 <memset+0x66>
  402322:	f103 0210 	add.w	r2, r3, #16
  402326:	4626      	mov	r6, r4
  402328:	3e10      	subs	r6, #16
  40232a:	2e0f      	cmp	r6, #15
  40232c:	f842 5c10 	str.w	r5, [r2, #-16]
  402330:	f842 5c0c 	str.w	r5, [r2, #-12]
  402334:	f842 5c08 	str.w	r5, [r2, #-8]
  402338:	f842 5c04 	str.w	r5, [r2, #-4]
  40233c:	f102 0210 	add.w	r2, r2, #16
  402340:	d8f2      	bhi.n	402328 <memset+0x38>
  402342:	f1a4 0210 	sub.w	r2, r4, #16
  402346:	f022 020f 	bic.w	r2, r2, #15
  40234a:	f004 040f 	and.w	r4, r4, #15
  40234e:	3210      	adds	r2, #16
  402350:	2c03      	cmp	r4, #3
  402352:	4413      	add	r3, r2
  402354:	d90d      	bls.n	402372 <memset+0x82>
  402356:	461e      	mov	r6, r3
  402358:	4622      	mov	r2, r4
  40235a:	3a04      	subs	r2, #4
  40235c:	2a03      	cmp	r2, #3
  40235e:	f846 5b04 	str.w	r5, [r6], #4
  402362:	d8fa      	bhi.n	40235a <memset+0x6a>
  402364:	1f22      	subs	r2, r4, #4
  402366:	f022 0203 	bic.w	r2, r2, #3
  40236a:	3204      	adds	r2, #4
  40236c:	4413      	add	r3, r2
  40236e:	f004 0403 	and.w	r4, r4, #3
  402372:	b12c      	cbz	r4, 402380 <memset+0x90>
  402374:	b2c9      	uxtb	r1, r1
  402376:	441c      	add	r4, r3
  402378:	f803 1b01 	strb.w	r1, [r3], #1
  40237c:	429c      	cmp	r4, r3
  40237e:	d1fb      	bne.n	402378 <memset+0x88>
  402380:	bc70      	pop	{r4, r5, r6}
  402382:	4770      	bx	lr
  402384:	4614      	mov	r4, r2
  402386:	4603      	mov	r3, r0
  402388:	e7c2      	b.n	402310 <memset+0x20>
  40238a:	bf00      	nop

0040238c <register_fini>:
  40238c:	4b02      	ldr	r3, [pc, #8]	; (402398 <register_fini+0xc>)
  40238e:	b113      	cbz	r3, 402396 <register_fini+0xa>
  402390:	4802      	ldr	r0, [pc, #8]	; (40239c <register_fini+0x10>)
  402392:	f000 b805 	b.w	4023a0 <atexit>
  402396:	4770      	bx	lr
  402398:	00000000 	.word	0x00000000
  40239c:	004023ad 	.word	0x004023ad

004023a0 <atexit>:
  4023a0:	2300      	movs	r3, #0
  4023a2:	4601      	mov	r1, r0
  4023a4:	461a      	mov	r2, r3
  4023a6:	4618      	mov	r0, r3
  4023a8:	f000 b81e 	b.w	4023e8 <__register_exitproc>

004023ac <__libc_fini_array>:
  4023ac:	b538      	push	{r3, r4, r5, lr}
  4023ae:	4c0a      	ldr	r4, [pc, #40]	; (4023d8 <__libc_fini_array+0x2c>)
  4023b0:	4d0a      	ldr	r5, [pc, #40]	; (4023dc <__libc_fini_array+0x30>)
  4023b2:	1b64      	subs	r4, r4, r5
  4023b4:	10a4      	asrs	r4, r4, #2
  4023b6:	d00a      	beq.n	4023ce <__libc_fini_array+0x22>
  4023b8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4023bc:	3b01      	subs	r3, #1
  4023be:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4023c2:	3c01      	subs	r4, #1
  4023c4:	f855 3904 	ldr.w	r3, [r5], #-4
  4023c8:	4798      	blx	r3
  4023ca:	2c00      	cmp	r4, #0
  4023cc:	d1f9      	bne.n	4023c2 <__libc_fini_array+0x16>
  4023ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4023d2:	f000 b8c5 	b.w	402560 <_fini>
  4023d6:	bf00      	nop
  4023d8:	00402570 	.word	0x00402570
  4023dc:	0040256c 	.word	0x0040256c

004023e0 <__retarget_lock_acquire_recursive>:
  4023e0:	4770      	bx	lr
  4023e2:	bf00      	nop

004023e4 <__retarget_lock_release_recursive>:
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop

004023e8 <__register_exitproc>:
  4023e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4023ec:	4d2c      	ldr	r5, [pc, #176]	; (4024a0 <__register_exitproc+0xb8>)
  4023ee:	4606      	mov	r6, r0
  4023f0:	6828      	ldr	r0, [r5, #0]
  4023f2:	4698      	mov	r8, r3
  4023f4:	460f      	mov	r7, r1
  4023f6:	4691      	mov	r9, r2
  4023f8:	f7ff fff2 	bl	4023e0 <__retarget_lock_acquire_recursive>
  4023fc:	4b29      	ldr	r3, [pc, #164]	; (4024a4 <__register_exitproc+0xbc>)
  4023fe:	681c      	ldr	r4, [r3, #0]
  402400:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402404:	2b00      	cmp	r3, #0
  402406:	d03e      	beq.n	402486 <__register_exitproc+0x9e>
  402408:	685a      	ldr	r2, [r3, #4]
  40240a:	2a1f      	cmp	r2, #31
  40240c:	dc1c      	bgt.n	402448 <__register_exitproc+0x60>
  40240e:	f102 0e01 	add.w	lr, r2, #1
  402412:	b176      	cbz	r6, 402432 <__register_exitproc+0x4a>
  402414:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402418:	2401      	movs	r4, #1
  40241a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40241e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402422:	4094      	lsls	r4, r2
  402424:	4320      	orrs	r0, r4
  402426:	2e02      	cmp	r6, #2
  402428:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40242c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402430:	d023      	beq.n	40247a <__register_exitproc+0x92>
  402432:	3202      	adds	r2, #2
  402434:	f8c3 e004 	str.w	lr, [r3, #4]
  402438:	6828      	ldr	r0, [r5, #0]
  40243a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40243e:	f7ff ffd1 	bl	4023e4 <__retarget_lock_release_recursive>
  402442:	2000      	movs	r0, #0
  402444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402448:	4b17      	ldr	r3, [pc, #92]	; (4024a8 <__register_exitproc+0xc0>)
  40244a:	b30b      	cbz	r3, 402490 <__register_exitproc+0xa8>
  40244c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402450:	f3af 8000 	nop.w
  402454:	4603      	mov	r3, r0
  402456:	b1d8      	cbz	r0, 402490 <__register_exitproc+0xa8>
  402458:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40245c:	6002      	str	r2, [r0, #0]
  40245e:	2100      	movs	r1, #0
  402460:	6041      	str	r1, [r0, #4]
  402462:	460a      	mov	r2, r1
  402464:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402468:	f04f 0e01 	mov.w	lr, #1
  40246c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402470:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402474:	2e00      	cmp	r6, #0
  402476:	d0dc      	beq.n	402432 <__register_exitproc+0x4a>
  402478:	e7cc      	b.n	402414 <__register_exitproc+0x2c>
  40247a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40247e:	430c      	orrs	r4, r1
  402480:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402484:	e7d5      	b.n	402432 <__register_exitproc+0x4a>
  402486:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40248a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40248e:	e7bb      	b.n	402408 <__register_exitproc+0x20>
  402490:	6828      	ldr	r0, [r5, #0]
  402492:	f7ff ffa7 	bl	4023e4 <__retarget_lock_release_recursive>
  402496:	f04f 30ff 	mov.w	r0, #4294967295
  40249a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40249e:	bf00      	nop
  4024a0:	20400440 	.word	0x20400440
  4024a4:	00402548 	.word	0x00402548
  4024a8:	00000000 	.word	0x00000000

004024ac <mmc_trans_multipliers>:
  4024ac:	00000000 0000000a 0000000c 0000000d     ................
  4024bc:	0000000f 00000014 0000001a 0000001e     ................
  4024cc:	00000023 00000028 0000002d 00000034     #...(...-...4...
  4024dc:	00000037 0000003c 00000046 00000050     7...<...F...P...

004024ec <sd_mmc_trans_units>:
  4024ec:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00402508 <sd_trans_multipliers>:
  402508:	00000000 0000000a 0000000c 0000000d     ................
  402518:	0000000f 00000014 00000019 0000001e     ................
  402528:	00000023 00000028 0000002d 00000032     #...(...-...2...
  402538:	00000037 0000003c 00000046 00000050     7...<...F...P...

00402548 <_global_impure_ptr>:
  402548:	20400018                                ..@ 

0040254c <_init>:
  40254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40254e:	bf00      	nop
  402550:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402552:	bc08      	pop	{r3}
  402554:	469e      	mov	lr, r3
  402556:	4770      	bx	lr

00402558 <__init_array_start>:
  402558:	0040238d 	.word	0x0040238d

0040255c <__frame_dummy_init_array_entry>:
  40255c:	00400165                                e.@.

00402560 <_fini>:
  402560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402562:	bf00      	nop
  402564:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402566:	bc08      	pop	{r3}
  402568:	469e      	mov	lr, r3
  40256a:	4770      	bx	lr

0040256c <__fini_array_start>:
  40256c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <numWritesPerFrame>:
2040000c:	0001 0000                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	da10 2041                                   ..A 
