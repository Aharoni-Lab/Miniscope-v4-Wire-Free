
MiniscopeUntethered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ce4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20400000  00402ce4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00053708  20400448  00403130  00020448  2**3
                  ALLOC
  3 .stack        00002000  20453b50  00456838  00020448  2**0
                  ALLOC
  4 .heap         00000200  20455b50  00458838  00020448  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020472  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c424  00000000  00000000  000204cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035ac  00000000  00000000  0003c8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000067bb  00000000  00000000  0003fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009c8  00000000  00000000  00046656  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b70  00000000  00000000  0004701e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001fb1a  00000000  00000000  00047b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e61a  00000000  00000000  000676a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088a51  00000000  00000000  00075cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001784  00000000  00000000  000fe714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 5b 45 20 b1 1f 40 00 ad 1f 40 00 ad 1f 40 00     P[E ..@...@...@.
  400010:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 1f 40 00 ad 1f 40 00 00 00 00 00 ad 1f 40 00     ..@...@.......@.
  40003c:	e1 1b 40 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ..@...@...@...@.
  40004c:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ..@...@...@...@.
  40005c:	ad 1f 40 00 ad 1f 40 00 00 00 00 00 e5 25 40 00     ..@...@......%@.
  40006c:	ad 1f 40 00 00 00 00 00 ad 1f 40 00 ad 1f 40 00     ..@.......@...@.
  40007c:	ad 1f 40 00 ad 1f 40 00 00 00 00 00 ad 1f 40 00     ..@...@.......@.
  40008c:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ..@...@...@...@.
  40009c:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ..@...@...@...@.
  4000c4:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 00 00 00 00     ..@...@...@.....
  4000d4:	ad 1f 40 00 00 00 00 00 ad 1f 40 00 ad 1f 40 00     ..@.......@...@.
  4000e4:	ad 1f 40 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ..@...@...@...@.
  4000f4:	ad 1f 40 00 ad 1f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400104:	00 00 00 00 ad 1f 40 00 ad 1f 40 00 ad 1f 40 00     ......@...@...@.
	...
  400120:	ad 1f 40 00 ad 1f 40 00 25 26 40 00 ad 1f 40 00     ..@...@.%&@...@.
  400130:	ad 1f 40 00 00 00 00 00 00 00 00 00 ad 1f 40 00     ..@...........@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400448 	.word	0x20400448
  40015c:	00000000 	.word	0x00000000
  400160:	00402ce4 	.word	0x00402ce4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402ce4 	.word	0x00402ce4
  4001a0:	2040044c 	.word	0x2040044c
  4001a4:	00402ce4 	.word	0x00402ce4
  4001a8:	00000000 	.word	0x00000000

004001ac <sd_mmc_configure_slot>:
  4001ac:	b510      	push	{r4, lr}
  4001ae:	4b06      	ldr	r3, [pc, #24]	; (4001c8 <sd_mmc_configure_slot+0x1c>)
  4001b0:	6819      	ldr	r1, [r3, #0]
  4001b2:	7f8b      	ldrb	r3, [r1, #30]
  4001b4:	3300      	adds	r3, #0
  4001b6:	bf18      	it	ne
  4001b8:	2301      	movne	r3, #1
  4001ba:	7b4a      	ldrb	r2, [r1, #13]
  4001bc:	6809      	ldr	r1, [r1, #0]
  4001be:	4803      	ldr	r0, [pc, #12]	; (4001cc <sd_mmc_configure_slot+0x20>)
  4001c0:	7800      	ldrb	r0, [r0, #0]
  4001c2:	4c03      	ldr	r4, [pc, #12]	; (4001d0 <sd_mmc_configure_slot+0x24>)
  4001c4:	47a0      	blx	r4
  4001c6:	bd10      	pop	{r4, pc}
  4001c8:	20400464 	.word	0x20400464
  4001cc:	2040048c 	.word	0x2040048c
  4001d0:	00400cc5 	.word	0x00400cc5

004001d4 <sd_mmc_select_slot>:
  4001d4:	b108      	cbz	r0, 4001da <sd_mmc_select_slot+0x6>
  4001d6:	2004      	movs	r0, #4
  4001d8:	4770      	bx	lr
  4001da:	b510      	push	{r4, lr}
  4001dc:	4b0e      	ldr	r3, [pc, #56]	; (400218 <sd_mmc_select_slot+0x44>)
  4001de:	7a9b      	ldrb	r3, [r3, #10]
  4001e0:	3b03      	subs	r3, #3
  4001e2:	b2db      	uxtb	r3, r3
  4001e4:	2b01      	cmp	r3, #1
  4001e6:	d90d      	bls.n	400204 <sd_mmc_select_slot+0x30>
  4001e8:	2200      	movs	r2, #0
  4001ea:	4b0c      	ldr	r3, [pc, #48]	; (40021c <sd_mmc_select_slot+0x48>)
  4001ec:	701a      	strb	r2, [r3, #0]
  4001ee:	4c0a      	ldr	r4, [pc, #40]	; (400218 <sd_mmc_select_slot+0x44>)
  4001f0:	4b0b      	ldr	r3, [pc, #44]	; (400220 <sd_mmc_select_slot+0x4c>)
  4001f2:	601c      	str	r4, [r3, #0]
  4001f4:	4b0b      	ldr	r3, [pc, #44]	; (400224 <sd_mmc_select_slot+0x50>)
  4001f6:	4798      	blx	r3
  4001f8:	7aa0      	ldrb	r0, [r4, #10]
  4001fa:	2802      	cmp	r0, #2
  4001fc:	bf14      	ite	ne
  4001fe:	2000      	movne	r0, #0
  400200:	2001      	moveq	r0, #1
  400202:	bd10      	pop	{r4, pc}
  400204:	4b04      	ldr	r3, [pc, #16]	; (400218 <sd_mmc_select_slot+0x44>)
  400206:	2202      	movs	r2, #2
  400208:	729a      	strb	r2, [r3, #10]
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <sd_mmc_select_slot+0x54>)
  40020c:	601a      	str	r2, [r3, #0]
  40020e:	2201      	movs	r2, #1
  400210:	735a      	strb	r2, [r3, #13]
  400212:	2200      	movs	r2, #0
  400214:	779a      	strb	r2, [r3, #30]
  400216:	e7e7      	b.n	4001e8 <sd_mmc_select_slot+0x14>
  400218:	20400468 	.word	0x20400468
  40021c:	2040048c 	.word	0x2040048c
  400220:	20400464 	.word	0x20400464
  400224:	004001ad 	.word	0x004001ad
  400228:	00061a80 	.word	0x00061a80

0040022c <sd_mmc_cmd9_mci>:
  40022c:	b510      	push	{r4, lr}
  40022e:	4b09      	ldr	r3, [pc, #36]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400230:	681b      	ldr	r3, [r3, #0]
  400232:	8919      	ldrh	r1, [r3, #8]
  400234:	0409      	lsls	r1, r1, #16
  400236:	f641 3009 	movw	r0, #6921	; 0x1b09
  40023a:	4b07      	ldr	r3, [pc, #28]	; (400258 <sd_mmc_cmd9_mci+0x2c>)
  40023c:	4798      	blx	r3
  40023e:	4604      	mov	r4, r0
  400240:	b908      	cbnz	r0, 400246 <sd_mmc_cmd9_mci+0x1a>
  400242:	4620      	mov	r0, r4
  400244:	bd10      	pop	{r4, pc}
  400246:	4b03      	ldr	r3, [pc, #12]	; (400254 <sd_mmc_cmd9_mci+0x28>)
  400248:	6818      	ldr	r0, [r3, #0]
  40024a:	300e      	adds	r0, #14
  40024c:	4b03      	ldr	r3, [pc, #12]	; (40025c <sd_mmc_cmd9_mci+0x30>)
  40024e:	4798      	blx	r3
  400250:	e7f7      	b.n	400242 <sd_mmc_cmd9_mci+0x16>
  400252:	bf00      	nop
  400254:	20400464 	.word	0x20400464
  400258:	00400d59 	.word	0x00400d59
  40025c:	00400d85 	.word	0x00400d85

00400260 <sd_mmc_deselect_slot>:
  400260:	b508      	push	{r3, lr}
  400262:	4b04      	ldr	r3, [pc, #16]	; (400274 <sd_mmc_deselect_slot+0x14>)
  400264:	781b      	ldrb	r3, [r3, #0]
  400266:	b103      	cbz	r3, 40026a <sd_mmc_deselect_slot+0xa>
  400268:	bd08      	pop	{r3, pc}
  40026a:	2000      	movs	r0, #0
  40026c:	4b02      	ldr	r3, [pc, #8]	; (400278 <sd_mmc_deselect_slot+0x18>)
  40026e:	4798      	blx	r3
  400270:	e7fa      	b.n	400268 <sd_mmc_deselect_slot+0x8>
  400272:	bf00      	nop
  400274:	2040048c 	.word	0x2040048c
  400278:	00400d35 	.word	0x00400d35

0040027c <sd_mmc_init>:
  40027c:	b508      	push	{r3, lr}
  40027e:	2204      	movs	r2, #4
  400280:	4b03      	ldr	r3, [pc, #12]	; (400290 <sd_mmc_init+0x14>)
  400282:	729a      	strb	r2, [r3, #10]
  400284:	22ff      	movs	r2, #255	; 0xff
  400286:	4b03      	ldr	r3, [pc, #12]	; (400294 <sd_mmc_init+0x18>)
  400288:	701a      	strb	r2, [r3, #0]
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <sd_mmc_init+0x1c>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	20400468 	.word	0x20400468
  400294:	2040048c 	.word	0x2040048c
  400298:	00400c89 	.word	0x00400c89

0040029c <sd_mmc_check>:
  40029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002a0:	b095      	sub	sp, #84	; 0x54
  4002a2:	4b8a      	ldr	r3, [pc, #552]	; (4004cc <sd_mmc_check+0x230>)
  4002a4:	4798      	blx	r3
  4002a6:	4604      	mov	r4, r0
  4002a8:	2801      	cmp	r0, #1
  4002aa:	d005      	beq.n	4002b8 <sd_mmc_check+0x1c>
  4002ac:	4b88      	ldr	r3, [pc, #544]	; (4004d0 <sd_mmc_check+0x234>)
  4002ae:	4798      	blx	r3
  4002b0:	4620      	mov	r0, r4
  4002b2:	b015      	add	sp, #84	; 0x54
  4002b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4002b8:	4b86      	ldr	r3, [pc, #536]	; (4004d4 <sd_mmc_check+0x238>)
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	2201      	movs	r2, #1
  4002be:	72da      	strb	r2, [r3, #11]
  4002c0:	2500      	movs	r5, #0
  4002c2:	731d      	strb	r5, [r3, #12]
  4002c4:	811d      	strh	r5, [r3, #8]
  4002c6:	4b84      	ldr	r3, [pc, #528]	; (4004d8 <sd_mmc_check+0x23c>)
  4002c8:	4798      	blx	r3
  4002ca:	4629      	mov	r1, r5
  4002cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d0:	4b82      	ldr	r3, [pc, #520]	; (4004dc <sd_mmc_check+0x240>)
  4002d2:	4798      	blx	r3
  4002d4:	b930      	cbnz	r0, 4002e4 <sd_mmc_check+0x48>
  4002d6:	4b7f      	ldr	r3, [pc, #508]	; (4004d4 <sd_mmc_check+0x238>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	2403      	movs	r4, #3
  4002dc:	729c      	strb	r4, [r3, #10]
  4002de:	4b7c      	ldr	r3, [pc, #496]	; (4004d0 <sd_mmc_check+0x234>)
  4002e0:	4798      	blx	r3
  4002e2:	e7e5      	b.n	4002b0 <sd_mmc_check+0x14>
  4002e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002e8:	f245 5008 	movw	r0, #21768	; 0x5508
  4002ec:	4b7b      	ldr	r3, [pc, #492]	; (4004dc <sd_mmc_check+0x240>)
  4002ee:	4798      	blx	r3
  4002f0:	2800      	cmp	r0, #0
  4002f2:	f040 8090 	bne.w	400416 <sd_mmc_check+0x17a>
  4002f6:	2200      	movs	r2, #0
  4002f8:	4b76      	ldr	r3, [pc, #472]	; (4004d4 <sd_mmc_check+0x238>)
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	7adb      	ldrb	r3, [r3, #11]
  4002fe:	f013 0f01 	tst.w	r3, #1
  400302:	f040 82a7 	bne.w	400854 <sd_mmc_check+0x5b8>
  400306:	2100      	movs	r1, #0
  400308:	f245 1003 	movw	r0, #20739	; 0x5103
  40030c:	4b73      	ldr	r3, [pc, #460]	; (4004dc <sd_mmc_check+0x240>)
  40030e:	4798      	blx	r3
  400310:	2800      	cmp	r0, #0
  400312:	d0e0      	beq.n	4002d6 <sd_mmc_check+0x3a>
  400314:	4d6f      	ldr	r5, [pc, #444]	; (4004d4 <sd_mmc_check+0x238>)
  400316:	682e      	ldr	r6, [r5, #0]
  400318:	4b71      	ldr	r3, [pc, #452]	; (4004e0 <sd_mmc_check+0x244>)
  40031a:	4798      	blx	r3
  40031c:	0c00      	lsrs	r0, r0, #16
  40031e:	8130      	strh	r0, [r6, #8]
  400320:	682b      	ldr	r3, [r5, #0]
  400322:	7adb      	ldrb	r3, [r3, #11]
  400324:	f013 0f01 	tst.w	r3, #1
  400328:	d034      	beq.n	400394 <sd_mmc_check+0xf8>
  40032a:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <sd_mmc_check+0x248>)
  40032c:	4798      	blx	r3
  40032e:	2800      	cmp	r0, #0
  400330:	d0d1      	beq.n	4002d6 <sd_mmc_check+0x3a>
  400332:	682b      	ldr	r3, [r5, #0]
  400334:	7c5a      	ldrb	r2, [r3, #17]
  400336:	f3c2 00c3 	ubfx	r0, r2, #3, #4
  40033a:	f002 0207 	and.w	r2, r2, #7
  40033e:	496a      	ldr	r1, [pc, #424]	; (4004e8 <sd_mmc_check+0x24c>)
  400340:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400348:	fb02 f201 	mul.w	r2, r2, r1
  40034c:	4967      	ldr	r1, [pc, #412]	; (4004ec <sd_mmc_check+0x250>)
  40034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400352:	fb02 f201 	mul.w	r2, r2, r1
  400356:	601a      	str	r2, [r3, #0]
  400358:	7b9a      	ldrb	r2, [r3, #14]
  40035a:	0992      	lsrs	r2, r2, #6
  40035c:	f040 81b3 	bne.w	4006c6 <sd_mmc_check+0x42a>
  400360:	7d99      	ldrb	r1, [r3, #22]
  400362:	7d58      	ldrb	r0, [r3, #21]
  400364:	7d1a      	ldrb	r2, [r3, #20]
  400366:	0292      	lsls	r2, r2, #10
  400368:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40036c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
  400370:	7e18      	ldrb	r0, [r3, #24]
  400372:	7dd9      	ldrb	r1, [r3, #23]
  400374:	0049      	lsls	r1, r1, #1
  400376:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
  40037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40037e:	3201      	adds	r2, #1
  400380:	f001 0107 	and.w	r1, r1, #7
  400384:	3102      	adds	r1, #2
  400386:	408a      	lsls	r2, r1
  400388:	7cd9      	ldrb	r1, [r3, #19]
  40038a:	f001 010f 	and.w	r1, r1, #15
  40038e:	408a      	lsls	r2, r1
  400390:	0a92      	lsrs	r2, r2, #10
  400392:	605a      	str	r2, [r3, #4]
  400394:	4b4f      	ldr	r3, [pc, #316]	; (4004d4 <sd_mmc_check+0x238>)
  400396:	681b      	ldr	r3, [r3, #0]
  400398:	8919      	ldrh	r1, [r3, #8]
  40039a:	0409      	lsls	r1, r1, #16
  40039c:	f243 1007 	movw	r0, #12551	; 0x3107
  4003a0:	4b4e      	ldr	r3, [pc, #312]	; (4004dc <sd_mmc_check+0x240>)
  4003a2:	4798      	blx	r3
  4003a4:	2800      	cmp	r0, #0
  4003a6:	d096      	beq.n	4002d6 <sd_mmc_check+0x3a>
  4003a8:	4b4a      	ldr	r3, [pc, #296]	; (4004d4 <sd_mmc_check+0x238>)
  4003aa:	681b      	ldr	r3, [r3, #0]
  4003ac:	7ada      	ldrb	r2, [r3, #11]
  4003ae:	f012 0f01 	tst.w	r2, #1
  4003b2:	f000 8199 	beq.w	4006e8 <sd_mmc_check+0x44c>
  4003b6:	8919      	ldrh	r1, [r3, #8]
  4003b8:	0409      	lsls	r1, r1, #16
  4003ba:	f241 1037 	movw	r0, #4407	; 0x1137
  4003be:	4b47      	ldr	r3, [pc, #284]	; (4004dc <sd_mmc_check+0x240>)
  4003c0:	4798      	blx	r3
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d087      	beq.n	4002d6 <sd_mmc_check+0x3a>
  4003c6:	2301      	movs	r3, #1
  4003c8:	9300      	str	r3, [sp, #0]
  4003ca:	2208      	movs	r2, #8
  4003cc:	2100      	movs	r1, #0
  4003ce:	4848      	ldr	r0, [pc, #288]	; (4004f0 <sd_mmc_check+0x254>)
  4003d0:	4d48      	ldr	r5, [pc, #288]	; (4004f4 <sd_mmc_check+0x258>)
  4003d2:	47a8      	blx	r5
  4003d4:	2800      	cmp	r0, #0
  4003d6:	f43f af7e 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4003da:	2101      	movs	r1, #1
  4003dc:	a804      	add	r0, sp, #16
  4003de:	4b46      	ldr	r3, [pc, #280]	; (4004f8 <sd_mmc_check+0x25c>)
  4003e0:	4798      	blx	r3
  4003e2:	2800      	cmp	r0, #0
  4003e4:	f43f af77 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4003e8:	4b44      	ldr	r3, [pc, #272]	; (4004fc <sd_mmc_check+0x260>)
  4003ea:	4798      	blx	r3
  4003ec:	2800      	cmp	r0, #0
  4003ee:	f43f af72 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4003f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4003f6:	f003 030f 	and.w	r3, r3, #15
  4003fa:	2b01      	cmp	r3, #1
  4003fc:	f000 81bb 	beq.w	400776 <sd_mmc_check+0x4da>
  400400:	2b00      	cmp	r3, #0
  400402:	f000 816d 	beq.w	4006e0 <sd_mmc_check+0x444>
  400406:	2b02      	cmp	r3, #2
  400408:	f000 81ba 	beq.w	400780 <sd_mmc_check+0x4e4>
  40040c:	4b31      	ldr	r3, [pc, #196]	; (4004d4 <sd_mmc_check+0x238>)
  40040e:	681b      	ldr	r3, [r3, #0]
  400410:	2210      	movs	r2, #16
  400412:	731a      	strb	r2, [r3, #12]
  400414:	e168      	b.n	4006e8 <sd_mmc_check+0x44c>
  400416:	4b32      	ldr	r3, [pc, #200]	; (4004e0 <sd_mmc_check+0x244>)
  400418:	4798      	blx	r3
  40041a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40041e:	f000 8217 	beq.w	400850 <sd_mmc_check+0x5b4>
  400422:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400426:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40042a:	f47f af54 	bne.w	4002d6 <sd_mmc_check+0x3a>
  40042e:	2201      	movs	r2, #1
  400430:	e762      	b.n	4002f8 <sd_mmc_check+0x5c>
  400432:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400436:	d005      	beq.n	400444 <sd_mmc_check+0x1a8>
  400438:	4b26      	ldr	r3, [pc, #152]	; (4004d4 <sd_mmc_check+0x238>)
  40043a:	681a      	ldr	r2, [r3, #0]
  40043c:	7ad3      	ldrb	r3, [r2, #11]
  40043e:	f043 0308 	orr.w	r3, r3, #8
  400442:	72d3      	strb	r3, [r2, #11]
  400444:	4b23      	ldr	r3, [pc, #140]	; (4004d4 <sd_mmc_check+0x238>)
  400446:	681b      	ldr	r3, [r3, #0]
  400448:	7adb      	ldrb	r3, [r3, #11]
  40044a:	f013 0f01 	tst.w	r3, #1
  40044e:	f43f af5a 	beq.w	400306 <sd_mmc_check+0x6a>
  400452:	2100      	movs	r1, #0
  400454:	f645 3002 	movw	r0, #23298	; 0x5b02
  400458:	4b20      	ldr	r3, [pc, #128]	; (4004dc <sd_mmc_check+0x240>)
  40045a:	4798      	blx	r3
  40045c:	2800      	cmp	r0, #0
  40045e:	f47f af52 	bne.w	400306 <sd_mmc_check+0x6a>
  400462:	e738      	b.n	4002d6 <sd_mmc_check+0x3a>
  400464:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40046c:	d027      	beq.n	4004be <sd_mmc_check+0x222>
  40046e:	2100      	movs	r1, #0
  400470:	f645 3002 	movw	r0, #23298	; 0x5b02
  400474:	4b19      	ldr	r3, [pc, #100]	; (4004dc <sd_mmc_check+0x240>)
  400476:	4798      	blx	r3
  400478:	2800      	cmp	r0, #0
  40047a:	f43f af2c 	beq.w	4002d6 <sd_mmc_check+0x3a>
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <sd_mmc_check+0x238>)
  400480:	681b      	ldr	r3, [r3, #0]
  400482:	2201      	movs	r2, #1
  400484:	811a      	strh	r2, [r3, #8]
  400486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40048a:	f241 1003 	movw	r0, #4355	; 0x1103
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <sd_mmc_check+0x240>)
  400490:	4798      	blx	r3
  400492:	2800      	cmp	r0, #0
  400494:	f43f af1f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400498:	4b12      	ldr	r3, [pc, #72]	; (4004e4 <sd_mmc_check+0x248>)
  40049a:	4798      	blx	r3
  40049c:	2800      	cmp	r0, #0
  40049e:	f43f af1a 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4004a2:	4b0c      	ldr	r3, [pc, #48]	; (4004d4 <sd_mmc_check+0x238>)
  4004a4:	681a      	ldr	r2, [r3, #0]
  4004a6:	7b93      	ldrb	r3, [r2, #14]
  4004a8:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4004ac:	3b01      	subs	r3, #1
  4004ae:	2b03      	cmp	r3, #3
  4004b0:	d826      	bhi.n	400500 <sd_mmc_check+0x264>
  4004b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4004b6:	00ef      	.short	0x00ef
  4004b8:	00f500f2 	.word	0x00f500f2
  4004bc:	00f8      	.short	0x00f8
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <sd_mmc_check+0x238>)
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	7ad3      	ldrb	r3, [r2, #11]
  4004c4:	f043 0308 	orr.w	r3, r3, #8
  4004c8:	72d3      	strb	r3, [r2, #11]
  4004ca:	e7d0      	b.n	40046e <sd_mmc_check+0x1d2>
  4004cc:	004001d5 	.word	0x004001d5
  4004d0:	00400261 	.word	0x00400261
  4004d4:	20400464 	.word	0x20400464
  4004d8:	00400d37 	.word	0x00400d37
  4004dc:	00400d59 	.word	0x00400d59
  4004e0:	00400d7d 	.word	0x00400d7d
  4004e4:	0040022d 	.word	0x0040022d
  4004e8:	00402c34 	.word	0x00402c34
  4004ec:	00402c50 	.word	0x00402c50
  4004f0:	00081133 	.word	0x00081133
  4004f4:	00400db5 	.word	0x00400db5
  4004f8:	00400ef1 	.word	0x00400ef1
  4004fc:	00400f55 	.word	0x00400f55
  400500:	2312      	movs	r3, #18
  400502:	7313      	strb	r3, [r2, #12]
  400504:	7c53      	ldrb	r3, [r2, #17]
  400506:	f3c3 00c3 	ubfx	r0, r3, #3, #4
  40050a:	f003 0307 	and.w	r3, r3, #7
  40050e:	49a1      	ldr	r1, [pc, #644]	; (400794 <sd_mmc_check+0x4f8>)
  400510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400518:	fb03 f301 	mul.w	r3, r3, r1
  40051c:	499e      	ldr	r1, [pc, #632]	; (400798 <sd_mmc_check+0x4fc>)
  40051e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400522:	fb03 f301 	mul.w	r3, r3, r1
  400526:	6013      	str	r3, [r2, #0]
  400528:	7d91      	ldrb	r1, [r2, #22]
  40052a:	7d50      	ldrb	r0, [r2, #21]
  40052c:	7d13      	ldrb	r3, [r2, #20]
  40052e:	029b      	lsls	r3, r3, #10
  400530:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  400534:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
  400538:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40053c:	f640 71ff 	movw	r1, #4095	; 0xfff
  400540:	428b      	cmp	r3, r1
  400542:	d00f      	beq.n	400564 <sd_mmc_check+0x2c8>
  400544:	7e10      	ldrb	r0, [r2, #24]
  400546:	7dd1      	ldrb	r1, [r2, #23]
  400548:	0049      	lsls	r1, r1, #1
  40054a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
  40054e:	3301      	adds	r3, #1
  400550:	f001 0107 	and.w	r1, r1, #7
  400554:	3102      	adds	r1, #2
  400556:	408b      	lsls	r3, r1
  400558:	7cd1      	ldrb	r1, [r2, #19]
  40055a:	f001 010f 	and.w	r1, r1, #15
  40055e:	408b      	lsls	r3, r1
  400560:	0a9b      	lsrs	r3, r3, #10
  400562:	6053      	str	r3, [r2, #4]
  400564:	8911      	ldrh	r1, [r2, #8]
  400566:	0409      	lsls	r1, r1, #16
  400568:	f243 1007 	movw	r0, #12551	; 0x3107
  40056c:	4b8b      	ldr	r3, [pc, #556]	; (40079c <sd_mmc_check+0x500>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb0 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400576:	4b8a      	ldr	r3, [pc, #552]	; (4007a0 <sd_mmc_check+0x504>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	7b1b      	ldrb	r3, [r3, #12]
  40057c:	2b3f      	cmp	r3, #63	; 0x3f
  40057e:	f240 809f 	bls.w	4006c0 <sd_mmc_check+0x424>
  400582:	2100      	movs	r1, #0
  400584:	9100      	str	r1, [sp, #0]
  400586:	2301      	movs	r3, #1
  400588:	f44f 7200 	mov.w	r2, #512	; 0x200
  40058c:	4885      	ldr	r0, [pc, #532]	; (4007a4 <sd_mmc_check+0x508>)
  40058e:	4d86      	ldr	r5, [pc, #536]	; (4007a8 <sd_mmc_check+0x50c>)
  400590:	47a8      	blx	r5
  400592:	2800      	cmp	r0, #0
  400594:	f43f ae9f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400598:	2500      	movs	r5, #0
  40059a:	4e84      	ldr	r6, [pc, #528]	; (4007ac <sd_mmc_check+0x510>)
  40059c:	a803      	add	r0, sp, #12
  40059e:	47b0      	blx	r6
  4005a0:	2800      	cmp	r0, #0
  4005a2:	f43f ae98 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4005a6:	3501      	adds	r5, #1
  4005a8:	b2ad      	uxth	r5, r5
  4005aa:	2d32      	cmp	r5, #50	; 0x32
  4005ac:	d1f6      	bne.n	40059c <sd_mmc_check+0x300>
  4005ae:	9e03      	ldr	r6, [sp, #12]
  4005b0:	f006 0602 	and.w	r6, r6, #2
  4005b4:	4b7a      	ldr	r3, [pc, #488]	; (4007a0 <sd_mmc_check+0x504>)
  4005b6:	681b      	ldr	r3, [r3, #0]
  4005b8:	7d9a      	ldrb	r2, [r3, #22]
  4005ba:	7d59      	ldrb	r1, [r3, #21]
  4005bc:	7d1b      	ldrb	r3, [r3, #20]
  4005be:	029b      	lsls	r3, r3, #10
  4005c0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4005c4:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
  4005c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4005cc:	f640 72ff 	movw	r2, #4095	; 0xfff
  4005d0:	4293      	cmp	r3, r2
  4005d2:	d10e      	bne.n	4005f2 <sd_mmc_check+0x356>
  4005d4:	4f75      	ldr	r7, [pc, #468]	; (4007ac <sd_mmc_check+0x510>)
  4005d6:	a804      	add	r0, sp, #16
  4005d8:	47b8      	blx	r7
  4005da:	2800      	cmp	r0, #0
  4005dc:	f43f ae7b 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4005e0:	3501      	adds	r5, #1
  4005e2:	b2ad      	uxth	r5, r5
  4005e4:	2d35      	cmp	r5, #53	; 0x35
  4005e6:	d9f6      	bls.n	4005d6 <sd_mmc_check+0x33a>
  4005e8:	4b6d      	ldr	r3, [pc, #436]	; (4007a0 <sd_mmc_check+0x504>)
  4005ea:	681a      	ldr	r2, [r3, #0]
  4005ec:	9b04      	ldr	r3, [sp, #16]
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6053      	str	r3, [r2, #4]
  4005f2:	4f6e      	ldr	r7, [pc, #440]	; (4007ac <sd_mmc_check+0x510>)
  4005f4:	2d7f      	cmp	r5, #127	; 0x7f
  4005f6:	d959      	bls.n	4006ac <sd_mmc_check+0x410>
  4005f8:	4b6d      	ldr	r3, [pc, #436]	; (4007b0 <sd_mmc_check+0x514>)
  4005fa:	7818      	ldrb	r0, [r3, #0]
  4005fc:	4b6d      	ldr	r3, [pc, #436]	; (4007b4 <sd_mmc_check+0x518>)
  4005fe:	4798      	blx	r3
  400600:	2803      	cmp	r0, #3
  400602:	d91d      	bls.n	400640 <sd_mmc_check+0x3a4>
  400604:	4b6a      	ldr	r3, [pc, #424]	; (4007b0 <sd_mmc_check+0x514>)
  400606:	7818      	ldrb	r0, [r3, #0]
  400608:	4b6a      	ldr	r3, [pc, #424]	; (4007b4 <sd_mmc_check+0x518>)
  40060a:	4798      	blx	r3
  40060c:	4605      	mov	r5, r0
  40060e:	2804      	cmp	r0, #4
  400610:	d054      	beq.n	4006bc <sd_mmc_check+0x420>
  400612:	4b69      	ldr	r3, [pc, #420]	; (4007b8 <sd_mmc_check+0x51c>)
  400614:	4969      	ldr	r1, [pc, #420]	; (4007bc <sd_mmc_check+0x520>)
  400616:	2808      	cmp	r0, #8
  400618:	bf18      	it	ne
  40061a:	4619      	movne	r1, r3
  40061c:	f243 1006 	movw	r0, #12550	; 0x3106
  400620:	4b5e      	ldr	r3, [pc, #376]	; (40079c <sd_mmc_check+0x500>)
  400622:	4798      	blx	r3
  400624:	2800      	cmp	r0, #0
  400626:	f43f ae56 	beq.w	4002d6 <sd_mmc_check+0x3a>
  40062a:	4b65      	ldr	r3, [pc, #404]	; (4007c0 <sd_mmc_check+0x524>)
  40062c:	4798      	blx	r3
  40062e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400632:	f47f ae50 	bne.w	4002d6 <sd_mmc_check+0x3a>
  400636:	4b5a      	ldr	r3, [pc, #360]	; (4007a0 <sd_mmc_check+0x504>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	735d      	strb	r5, [r3, #13]
  40063c:	4b61      	ldr	r3, [pc, #388]	; (4007c4 <sd_mmc_check+0x528>)
  40063e:	4798      	blx	r3
  400640:	4b61      	ldr	r3, [pc, #388]	; (4007c8 <sd_mmc_check+0x52c>)
  400642:	4798      	blx	r3
  400644:	b1b6      	cbz	r6, 400674 <sd_mmc_check+0x3d8>
  400646:	b1a8      	cbz	r0, 400674 <sd_mmc_check+0x3d8>
  400648:	4960      	ldr	r1, [pc, #384]	; (4007cc <sd_mmc_check+0x530>)
  40064a:	f243 1006 	movw	r0, #12550	; 0x3106
  40064e:	4b53      	ldr	r3, [pc, #332]	; (40079c <sd_mmc_check+0x500>)
  400650:	4798      	blx	r3
  400652:	2800      	cmp	r0, #0
  400654:	f43f ae3f 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400658:	4b59      	ldr	r3, [pc, #356]	; (4007c0 <sd_mmc_check+0x524>)
  40065a:	4798      	blx	r3
  40065c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400660:	f47f ae39 	bne.w	4002d6 <sd_mmc_check+0x3a>
  400664:	4b4e      	ldr	r3, [pc, #312]	; (4007a0 <sd_mmc_check+0x504>)
  400666:	681b      	ldr	r3, [r3, #0]
  400668:	2201      	movs	r2, #1
  40066a:	779a      	strb	r2, [r3, #30]
  40066c:	4a58      	ldr	r2, [pc, #352]	; (4007d0 <sd_mmc_check+0x534>)
  40066e:	601a      	str	r2, [r3, #0]
  400670:	4b54      	ldr	r3, [pc, #336]	; (4007c4 <sd_mmc_check+0x528>)
  400672:	4798      	blx	r3
  400674:	250a      	movs	r5, #10
  400676:	f44f 7800 	mov.w	r8, #512	; 0x200
  40067a:	f241 1710 	movw	r7, #4368	; 0x1110
  40067e:	4e47      	ldr	r6, [pc, #284]	; (40079c <sd_mmc_check+0x500>)
  400680:	4641      	mov	r1, r8
  400682:	4638      	mov	r0, r7
  400684:	47b0      	blx	r6
  400686:	2800      	cmp	r0, #0
  400688:	d16e      	bne.n	400768 <sd_mmc_check+0x4cc>
  40068a:	3d01      	subs	r5, #1
  40068c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400690:	d1f6      	bne.n	400680 <sd_mmc_check+0x3e4>
  400692:	e620      	b.n	4002d6 <sd_mmc_check+0x3a>
  400694:	2314      	movs	r3, #20
  400696:	7313      	strb	r3, [r2, #12]
  400698:	e734      	b.n	400504 <sd_mmc_check+0x268>
  40069a:	2322      	movs	r3, #34	; 0x22
  40069c:	7313      	strb	r3, [r2, #12]
  40069e:	e731      	b.n	400504 <sd_mmc_check+0x268>
  4006a0:	2330      	movs	r3, #48	; 0x30
  4006a2:	7313      	strb	r3, [r2, #12]
  4006a4:	e72e      	b.n	400504 <sd_mmc_check+0x268>
  4006a6:	2340      	movs	r3, #64	; 0x40
  4006a8:	7313      	strb	r3, [r2, #12]
  4006aa:	e72b      	b.n	400504 <sd_mmc_check+0x268>
  4006ac:	a804      	add	r0, sp, #16
  4006ae:	47b8      	blx	r7
  4006b0:	2800      	cmp	r0, #0
  4006b2:	f43f ae10 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4006b6:	3501      	adds	r5, #1
  4006b8:	b2ad      	uxth	r5, r5
  4006ba:	e79b      	b.n	4005f4 <sd_mmc_check+0x358>
  4006bc:	4945      	ldr	r1, [pc, #276]	; (4007d4 <sd_mmc_check+0x538>)
  4006be:	e7ad      	b.n	40061c <sd_mmc_check+0x380>
  4006c0:	4b40      	ldr	r3, [pc, #256]	; (4007c4 <sd_mmc_check+0x528>)
  4006c2:	4798      	blx	r3
  4006c4:	e7d6      	b.n	400674 <sd_mmc_check+0x3d8>
  4006c6:	7dd9      	ldrb	r1, [r3, #23]
  4006c8:	7d98      	ldrb	r0, [r3, #22]
  4006ca:	7d5a      	ldrb	r2, [r3, #21]
  4006cc:	0412      	lsls	r2, r2, #16
  4006ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4006d2:	430a      	orrs	r2, r1
  4006d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
  4006d8:	3201      	adds	r2, #1
  4006da:	0252      	lsls	r2, r2, #9
  4006dc:	605a      	str	r2, [r3, #4]
  4006de:	e659      	b.n	400394 <sd_mmc_check+0xf8>
  4006e0:	4b2f      	ldr	r3, [pc, #188]	; (4007a0 <sd_mmc_check+0x504>)
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2210      	movs	r2, #16
  4006e6:	731a      	strb	r2, [r3, #12]
  4006e8:	4b31      	ldr	r3, [pc, #196]	; (4007b0 <sd_mmc_check+0x514>)
  4006ea:	7818      	ldrb	r0, [r3, #0]
  4006ec:	4b31      	ldr	r3, [pc, #196]	; (4007b4 <sd_mmc_check+0x518>)
  4006ee:	4798      	blx	r3
  4006f0:	2803      	cmp	r0, #3
  4006f2:	d91c      	bls.n	40072e <sd_mmc_check+0x492>
  4006f4:	4b2a      	ldr	r3, [pc, #168]	; (4007a0 <sd_mmc_check+0x504>)
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	7ada      	ldrb	r2, [r3, #11]
  4006fa:	f012 0f01 	tst.w	r2, #1
  4006fe:	d014      	beq.n	40072a <sd_mmc_check+0x48e>
  400700:	8919      	ldrh	r1, [r3, #8]
  400702:	0409      	lsls	r1, r1, #16
  400704:	f241 1037 	movw	r0, #4407	; 0x1137
  400708:	4b24      	ldr	r3, [pc, #144]	; (40079c <sd_mmc_check+0x500>)
  40070a:	4798      	blx	r3
  40070c:	2800      	cmp	r0, #0
  40070e:	f43f ade2 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400712:	2102      	movs	r1, #2
  400714:	f241 1006 	movw	r0, #4358	; 0x1106
  400718:	4b20      	ldr	r3, [pc, #128]	; (40079c <sd_mmc_check+0x500>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f adda 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400722:	4b1f      	ldr	r3, [pc, #124]	; (4007a0 <sd_mmc_check+0x504>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	2204      	movs	r2, #4
  400728:	735a      	strb	r2, [r3, #13]
  40072a:	4b26      	ldr	r3, [pc, #152]	; (4007c4 <sd_mmc_check+0x528>)
  40072c:	4798      	blx	r3
  40072e:	4b26      	ldr	r3, [pc, #152]	; (4007c8 <sd_mmc_check+0x52c>)
  400730:	4798      	blx	r3
  400732:	b150      	cbz	r0, 40074a <sd_mmc_check+0x4ae>
  400734:	4b1a      	ldr	r3, [pc, #104]	; (4007a0 <sd_mmc_check+0x504>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	7ada      	ldrb	r2, [r3, #11]
  40073a:	f012 0f01 	tst.w	r2, #1
  40073e:	d002      	beq.n	400746 <sd_mmc_check+0x4aa>
  400740:	7b1b      	ldrb	r3, [r3, #12]
  400742:	2b10      	cmp	r3, #16
  400744:	d84a      	bhi.n	4007dc <sd_mmc_check+0x540>
  400746:	4b1f      	ldr	r3, [pc, #124]	; (4007c4 <sd_mmc_check+0x528>)
  400748:	4798      	blx	r3
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <sd_mmc_check+0x504>)
  40074c:	681b      	ldr	r3, [r3, #0]
  40074e:	7adb      	ldrb	r3, [r3, #11]
  400750:	f013 0f01 	tst.w	r3, #1
  400754:	d008      	beq.n	400768 <sd_mmc_check+0x4cc>
  400756:	f44f 7100 	mov.w	r1, #512	; 0x200
  40075a:	f241 1010 	movw	r0, #4368	; 0x1110
  40075e:	4b0f      	ldr	r3, [pc, #60]	; (40079c <sd_mmc_check+0x500>)
  400760:	4798      	blx	r3
  400762:	2800      	cmp	r0, #0
  400764:	f43f adb7 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400768:	4b0d      	ldr	r3, [pc, #52]	; (4007a0 <sd_mmc_check+0x504>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2200      	movs	r2, #0
  40076e:	729a      	strb	r2, [r3, #10]
  400770:	4b19      	ldr	r3, [pc, #100]	; (4007d8 <sd_mmc_check+0x53c>)
  400772:	4798      	blx	r3
  400774:	e59c      	b.n	4002b0 <sd_mmc_check+0x14>
  400776:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <sd_mmc_check+0x504>)
  400778:	681b      	ldr	r3, [r3, #0]
  40077a:	221a      	movs	r2, #26
  40077c:	731a      	strb	r2, [r3, #12]
  40077e:	e7b3      	b.n	4006e8 <sd_mmc_check+0x44c>
  400780:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400784:	09db      	lsrs	r3, r3, #7
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <sd_mmc_check+0x504>)
  400788:	681b      	ldr	r3, [r3, #0]
  40078a:	bf14      	ite	ne
  40078c:	2230      	movne	r2, #48	; 0x30
  40078e:	2220      	moveq	r2, #32
  400790:	731a      	strb	r2, [r3, #12]
  400792:	e7a9      	b.n	4006e8 <sd_mmc_check+0x44c>
  400794:	00402c34 	.word	0x00402c34
  400798:	00402bf4 	.word	0x00402bf4
  40079c:	00400d59 	.word	0x00400d59
  4007a0:	20400464 	.word	0x20400464
  4007a4:	00081108 	.word	0x00081108
  4007a8:	00400db5 	.word	0x00400db5
  4007ac:	00400e7d 	.word	0x00400e7d
  4007b0:	2040048c 	.word	0x2040048c
  4007b4:	00400cb5 	.word	0x00400cb5
  4007b8:	01b70000 	.word	0x01b70000
  4007bc:	01b70200 	.word	0x01b70200
  4007c0:	00400d7d 	.word	0x00400d7d
  4007c4:	004001ad 	.word	0x004001ad
  4007c8:	00400cbf 	.word	0x00400cbf
  4007cc:	03b90100 	.word	0x03b90100
  4007d0:	03197500 	.word	0x03197500
  4007d4:	01b70100 	.word	0x01b70100
  4007d8:	00400261 	.word	0x00400261
  4007dc:	2540      	movs	r5, #64	; 0x40
  4007de:	462a      	mov	r2, r5
  4007e0:	2100      	movs	r1, #0
  4007e2:	a804      	add	r0, sp, #16
  4007e4:	4b39      	ldr	r3, [pc, #228]	; (4008cc <sd_mmc_check+0x630>)
  4007e6:	4798      	blx	r3
  4007e8:	2301      	movs	r3, #1
  4007ea:	9300      	str	r3, [sp, #0]
  4007ec:	462a      	mov	r2, r5
  4007ee:	4938      	ldr	r1, [pc, #224]	; (4008d0 <sd_mmc_check+0x634>)
  4007f0:	4838      	ldr	r0, [pc, #224]	; (4008d4 <sd_mmc_check+0x638>)
  4007f2:	4d39      	ldr	r5, [pc, #228]	; (4008d8 <sd_mmc_check+0x63c>)
  4007f4:	47a8      	blx	r5
  4007f6:	2800      	cmp	r0, #0
  4007f8:	f43f ad6d 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4007fc:	2101      	movs	r1, #1
  4007fe:	a804      	add	r0, sp, #16
  400800:	4b36      	ldr	r3, [pc, #216]	; (4008dc <sd_mmc_check+0x640>)
  400802:	4798      	blx	r3
  400804:	2800      	cmp	r0, #0
  400806:	f43f ad66 	beq.w	4002d6 <sd_mmc_check+0x3a>
  40080a:	4b35      	ldr	r3, [pc, #212]	; (4008e0 <sd_mmc_check+0x644>)
  40080c:	4798      	blx	r3
  40080e:	2800      	cmp	r0, #0
  400810:	f43f ad61 	beq.w	4002d6 <sd_mmc_check+0x3a>
  400814:	4b33      	ldr	r3, [pc, #204]	; (4008e4 <sd_mmc_check+0x648>)
  400816:	4798      	blx	r3
  400818:	f010 0f80 	tst.w	r0, #128	; 0x80
  40081c:	f47f ad5b 	bne.w	4002d6 <sd_mmc_check+0x3a>
  400820:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400824:	f003 030f 	and.w	r3, r3, #15
  400828:	2b0f      	cmp	r3, #15
  40082a:	d08c      	beq.n	400746 <sd_mmc_check+0x4aa>
  40082c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
  400830:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  400834:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400838:	f47f ad4d 	bne.w	4002d6 <sd_mmc_check+0x3a>
  40083c:	4b2a      	ldr	r3, [pc, #168]	; (4008e8 <sd_mmc_check+0x64c>)
  40083e:	4798      	blx	r3
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <sd_mmc_check+0x650>)
  400842:	681b      	ldr	r3, [r3, #0]
  400844:	2201      	movs	r2, #1
  400846:	779a      	strb	r2, [r3, #30]
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	0052      	lsls	r2, r2, #1
  40084c:	601a      	str	r2, [r3, #0]
  40084e:	e77a      	b.n	400746 <sd_mmc_check+0x4aa>
  400850:	2200      	movs	r2, #0
  400852:	e551      	b.n	4002f8 <sd_mmc_check+0x5c>
  400854:	2a00      	cmp	r2, #0
  400856:	4f26      	ldr	r7, [pc, #152]	; (4008f0 <sd_mmc_check+0x654>)
  400858:	bf08      	it	eq
  40085a:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
  40085e:	f640 0535 	movw	r5, #2101	; 0x835
  400862:	f04f 0800 	mov.w	r8, #0
  400866:	4e23      	ldr	r6, [pc, #140]	; (4008f4 <sd_mmc_check+0x658>)
  400868:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4008e4 <sd_mmc_check+0x648>
  40086c:	4641      	mov	r1, r8
  40086e:	f241 1037 	movw	r0, #4407	; 0x1137
  400872:	47b0      	blx	r6
  400874:	b150      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
  400876:	4639      	mov	r1, r7
  400878:	f244 5029 	movw	r0, #17705	; 0x4529
  40087c:	47b0      	blx	r6
  40087e:	b128      	cbz	r0, 40088c <sd_mmc_check+0x5f0>
  400880:	47c8      	blx	r9
  400882:	2800      	cmp	r0, #0
  400884:	f6ff add5 	blt.w	400432 <sd_mmc_check+0x196>
  400888:	3d01      	subs	r5, #1
  40088a:	d1ef      	bne.n	40086c <sd_mmc_check+0x5d0>
  40088c:	4b17      	ldr	r3, [pc, #92]	; (4008ec <sd_mmc_check+0x650>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2202      	movs	r2, #2
  400892:	72da      	strb	r2, [r3, #11]
  400894:	2100      	movs	r1, #0
  400896:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x658>)
  40089c:	4798      	blx	r3
  40089e:	2800      	cmp	r0, #0
  4008a0:	f43f ad19 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008a4:	f241 0569 	movw	r5, #4201	; 0x1069
  4008a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4008f0 <sd_mmc_check+0x654>
  4008ac:	4f11      	ldr	r7, [pc, #68]	; (4008f4 <sd_mmc_check+0x658>)
  4008ae:	4e0d      	ldr	r6, [pc, #52]	; (4008e4 <sd_mmc_check+0x648>)
  4008b0:	4641      	mov	r1, r8
  4008b2:	f244 5001 	movw	r0, #17665	; 0x4501
  4008b6:	47b8      	blx	r7
  4008b8:	2800      	cmp	r0, #0
  4008ba:	f43f ad0c 	beq.w	4002d6 <sd_mmc_check+0x3a>
  4008be:	47b0      	blx	r6
  4008c0:	2800      	cmp	r0, #0
  4008c2:	f6ff adcf 	blt.w	400464 <sd_mmc_check+0x1c8>
  4008c6:	3d01      	subs	r5, #1
  4008c8:	d1f2      	bne.n	4008b0 <sd_mmc_check+0x614>
  4008ca:	e504      	b.n	4002d6 <sd_mmc_check+0x3a>
  4008cc:	00402a39 	.word	0x00402a39
  4008d0:	80ffff01 	.word	0x80ffff01
  4008d4:	00081106 	.word	0x00081106
  4008d8:	00400db5 	.word	0x00400db5
  4008dc:	00400ef1 	.word	0x00400ef1
  4008e0:	00400f55 	.word	0x00400f55
  4008e4:	00400d7d 	.word	0x00400d7d
  4008e8:	00400d37 	.word	0x00400d37
  4008ec:	20400464 	.word	0x20400464
  4008f0:	401f8000 	.word	0x401f8000
  4008f4:	00400d59 	.word	0x00400d59

004008f8 <sd_mmc_get_type>:
  4008f8:	b508      	push	{r3, lr}
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <sd_mmc_get_type+0x18>)
  4008fc:	4798      	blx	r3
  4008fe:	b108      	cbz	r0, 400904 <sd_mmc_get_type+0xc>
  400900:	2000      	movs	r0, #0
  400902:	bd08      	pop	{r3, pc}
  400904:	4b03      	ldr	r3, [pc, #12]	; (400914 <sd_mmc_get_type+0x1c>)
  400906:	4798      	blx	r3
  400908:	4b03      	ldr	r3, [pc, #12]	; (400918 <sd_mmc_get_type+0x20>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	7ad8      	ldrb	r0, [r3, #11]
  40090e:	bd08      	pop	{r3, pc}
  400910:	004001d5 	.word	0x004001d5
  400914:	00400261 	.word	0x00400261
  400918:	20400464 	.word	0x20400464

0040091c <sd_mmc_get_capacity>:
  40091c:	b508      	push	{r3, lr}
  40091e:	4b05      	ldr	r3, [pc, #20]	; (400934 <sd_mmc_get_capacity+0x18>)
  400920:	4798      	blx	r3
  400922:	b108      	cbz	r0, 400928 <sd_mmc_get_capacity+0xc>
  400924:	2000      	movs	r0, #0
  400926:	bd08      	pop	{r3, pc}
  400928:	4b03      	ldr	r3, [pc, #12]	; (400938 <sd_mmc_get_capacity+0x1c>)
  40092a:	4798      	blx	r3
  40092c:	4b03      	ldr	r3, [pc, #12]	; (40093c <sd_mmc_get_capacity+0x20>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	6858      	ldr	r0, [r3, #4]
  400932:	bd08      	pop	{r3, pc}
  400934:	004001d5 	.word	0x004001d5
  400938:	00400261 	.word	0x00400261
  40093c:	20400464 	.word	0x20400464

00400940 <sd_mmc_init_read_blocks>:
  400940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400944:	b082      	sub	sp, #8
  400946:	468a      	mov	sl, r1
  400948:	4691      	mov	r9, r2
  40094a:	4b26      	ldr	r3, [pc, #152]	; (4009e4 <sd_mmc_init_read_blocks+0xa4>)
  40094c:	4798      	blx	r3
  40094e:	4680      	mov	r8, r0
  400950:	b118      	cbz	r0, 40095a <sd_mmc_init_read_blocks+0x1a>
  400952:	4640      	mov	r0, r8
  400954:	b002      	add	sp, #8
  400956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40095a:	4c23      	ldr	r4, [pc, #140]	; (4009e8 <sd_mmc_init_read_blocks+0xa8>)
  40095c:	4e23      	ldr	r6, [pc, #140]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
  40095e:	4d24      	ldr	r5, [pc, #144]	; (4009f0 <sd_mmc_init_read_blocks+0xb0>)
  400960:	4f24      	ldr	r7, [pc, #144]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
  400962:	6833      	ldr	r3, [r6, #0]
  400964:	8919      	ldrh	r1, [r3, #8]
  400966:	0409      	lsls	r1, r1, #16
  400968:	f241 100d 	movw	r0, #4365	; 0x110d
  40096c:	47a8      	blx	r5
  40096e:	b128      	cbz	r0, 40097c <sd_mmc_init_read_blocks+0x3c>
  400970:	47b8      	blx	r7
  400972:	f410 7f80 	tst.w	r0, #256	; 0x100
  400976:	d117      	bne.n	4009a8 <sd_mmc_init_read_blocks+0x68>
  400978:	3c01      	subs	r4, #1
  40097a:	d1f2      	bne.n	400962 <sd_mmc_init_read_blocks+0x22>
  40097c:	4b1e      	ldr	r3, [pc, #120]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  40097e:	4798      	blx	r3
  400980:	f04f 0805 	mov.w	r8, #5
  400984:	e7e5      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  400986:	4b1b      	ldr	r3, [pc, #108]	; (4009f4 <sd_mmc_init_read_blocks+0xb4>)
  400988:	4798      	blx	r3
  40098a:	4b1c      	ldr	r3, [pc, #112]	; (4009fc <sd_mmc_init_read_blocks+0xbc>)
  40098c:	4003      	ands	r3, r0
  40098e:	b933      	cbnz	r3, 40099e <sd_mmc_init_read_blocks+0x5e>
  400990:	4b1b      	ldr	r3, [pc, #108]	; (400a00 <sd_mmc_init_read_blocks+0xc0>)
  400992:	f8a3 9000 	strh.w	r9, [r3]
  400996:	4b1b      	ldr	r3, [pc, #108]	; (400a04 <sd_mmc_init_read_blocks+0xc4>)
  400998:	f8a3 9000 	strh.w	r9, [r3]
  40099c:	e7d9      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  40099e:	4b16      	ldr	r3, [pc, #88]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009a0:	4798      	blx	r3
  4009a2:	f04f 0805 	mov.w	r8, #5
  4009a6:	e7d4      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  4009a8:	4b17      	ldr	r3, [pc, #92]	; (400a08 <sd_mmc_init_read_blocks+0xc8>)
  4009aa:	4818      	ldr	r0, [pc, #96]	; (400a0c <sd_mmc_init_read_blocks+0xcc>)
  4009ac:	f1b9 0f01 	cmp.w	r9, #1
  4009b0:	bf98      	it	ls
  4009b2:	4618      	movls	r0, r3
  4009b4:	4b0d      	ldr	r3, [pc, #52]	; (4009ec <sd_mmc_init_read_blocks+0xac>)
  4009b6:	681b      	ldr	r3, [r3, #0]
  4009b8:	7adb      	ldrb	r3, [r3, #11]
  4009ba:	f013 0f08 	tst.w	r3, #8
  4009be:	d101      	bne.n	4009c4 <sd_mmc_init_read_blocks+0x84>
  4009c0:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
  4009c4:	2301      	movs	r3, #1
  4009c6:	9300      	str	r3, [sp, #0]
  4009c8:	464b      	mov	r3, r9
  4009ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  4009ce:	4651      	mov	r1, sl
  4009d0:	4c0f      	ldr	r4, [pc, #60]	; (400a10 <sd_mmc_init_read_blocks+0xd0>)
  4009d2:	47a0      	blx	r4
  4009d4:	2800      	cmp	r0, #0
  4009d6:	d1d6      	bne.n	400986 <sd_mmc_init_read_blocks+0x46>
  4009d8:	4b07      	ldr	r3, [pc, #28]	; (4009f8 <sd_mmc_init_read_blocks+0xb8>)
  4009da:	4798      	blx	r3
  4009dc:	f04f 0805 	mov.w	r8, #5
  4009e0:	e7b7      	b.n	400952 <sd_mmc_init_read_blocks+0x12>
  4009e2:	bf00      	nop
  4009e4:	004001d5 	.word	0x004001d5
  4009e8:	00030d41 	.word	0x00030d41
  4009ec:	20400464 	.word	0x20400464
  4009f0:	00400d59 	.word	0x00400d59
  4009f4:	00400d7d 	.word	0x00400d7d
  4009f8:	00400261 	.word	0x00400261
  4009fc:	e4580000 	.word	0xe4580000
  400a00:	20400488 	.word	0x20400488
  400a04:	2040048a 	.word	0x2040048a
  400a08:	00081111 	.word	0x00081111
  400a0c:	00101112 	.word	0x00101112
  400a10:	00400db5 	.word	0x00400db5

00400a14 <sd_mmc_start_read_blocks>:
  400a14:	b510      	push	{r4, lr}
  400a16:	460c      	mov	r4, r1
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <sd_mmc_start_read_blocks+0x20>)
  400a1a:	4798      	blx	r3
  400a1c:	b920      	cbnz	r0, 400a28 <sd_mmc_start_read_blocks+0x14>
  400a1e:	2200      	movs	r2, #0
  400a20:	4b05      	ldr	r3, [pc, #20]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a22:	801a      	strh	r2, [r3, #0]
  400a24:	2005      	movs	r0, #5
  400a26:	bd10      	pop	{r4, pc}
  400a28:	4a03      	ldr	r2, [pc, #12]	; (400a38 <sd_mmc_start_read_blocks+0x24>)
  400a2a:	8813      	ldrh	r3, [r2, #0]
  400a2c:	1b1c      	subs	r4, r3, r4
  400a2e:	8014      	strh	r4, [r2, #0]
  400a30:	2000      	movs	r0, #0
  400a32:	bd10      	pop	{r4, pc}
  400a34:	00400ef1 	.word	0x00400ef1
  400a38:	20400488 	.word	0x20400488

00400a3c <sd_mmc_wait_end_of_read_blocks>:
  400a3c:	b510      	push	{r4, lr}
  400a3e:	4604      	mov	r4, r0
  400a40:	4b13      	ldr	r3, [pc, #76]	; (400a90 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400a42:	4798      	blx	r3
  400a44:	b908      	cbnz	r0, 400a4a <sd_mmc_wait_end_of_read_blocks+0xe>
  400a46:	2005      	movs	r0, #5
  400a48:	bd10      	pop	{r4, pc}
  400a4a:	b184      	cbz	r4, 400a6e <sd_mmc_wait_end_of_read_blocks+0x32>
  400a4c:	2200      	movs	r2, #0
  400a4e:	4b11      	ldr	r3, [pc, #68]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a50:	801a      	strh	r2, [r3, #0]
  400a52:	4b11      	ldr	r3, [pc, #68]	; (400a98 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400a54:	881b      	ldrh	r3, [r3, #0]
  400a56:	2b01      	cmp	r3, #1
  400a58:	d00f      	beq.n	400a7a <sd_mmc_wait_end_of_read_blocks+0x3e>
  400a5a:	2100      	movs	r1, #0
  400a5c:	f243 100c 	movw	r0, #12556	; 0x310c
  400a60:	4b0e      	ldr	r3, [pc, #56]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a62:	4798      	blx	r3
  400a64:	b168      	cbz	r0, 400a82 <sd_mmc_wait_end_of_read_blocks+0x46>
  400a66:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a68:	4798      	blx	r3
  400a6a:	2000      	movs	r0, #0
  400a6c:	bd10      	pop	{r4, pc}
  400a6e:	4b09      	ldr	r3, [pc, #36]	; (400a94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400a70:	881b      	ldrh	r3, [r3, #0]
  400a72:	2b00      	cmp	r3, #0
  400a74:	d0ed      	beq.n	400a52 <sd_mmc_wait_end_of_read_blocks+0x16>
  400a76:	2000      	movs	r0, #0
  400a78:	bd10      	pop	{r4, pc}
  400a7a:	4b09      	ldr	r3, [pc, #36]	; (400aa0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400a7c:	4798      	blx	r3
  400a7e:	2000      	movs	r0, #0
  400a80:	bd10      	pop	{r4, pc}
  400a82:	2100      	movs	r1, #0
  400a84:	f243 100c 	movw	r0, #12556	; 0x310c
  400a88:	4b04      	ldr	r3, [pc, #16]	; (400a9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400a8a:	4798      	blx	r3
  400a8c:	e7eb      	b.n	400a66 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400a8e:	bf00      	nop
  400a90:	00400f55 	.word	0x00400f55
  400a94:	20400488 	.word	0x20400488
  400a98:	2040048a 	.word	0x2040048a
  400a9c:	00400d59 	.word	0x00400d59
  400aa0:	00400261 	.word	0x00400261

00400aa4 <sd_mmc_init_write_blocks>:
  400aa4:	b570      	push	{r4, r5, r6, lr}
  400aa6:	b082      	sub	sp, #8
  400aa8:	460e      	mov	r6, r1
  400aaa:	4615      	mov	r5, r2
  400aac:	4b16      	ldr	r3, [pc, #88]	; (400b08 <sd_mmc_init_write_blocks+0x64>)
  400aae:	4798      	blx	r3
  400ab0:	4604      	mov	r4, r0
  400ab2:	b9b8      	cbnz	r0, 400ae4 <sd_mmc_init_write_blocks+0x40>
  400ab4:	4b15      	ldr	r3, [pc, #84]	; (400b0c <sd_mmc_init_write_blocks+0x68>)
  400ab6:	4816      	ldr	r0, [pc, #88]	; (400b10 <sd_mmc_init_write_blocks+0x6c>)
  400ab8:	2d01      	cmp	r5, #1
  400aba:	bf98      	it	ls
  400abc:	4618      	movls	r0, r3
  400abe:	4b15      	ldr	r3, [pc, #84]	; (400b14 <sd_mmc_init_write_blocks+0x70>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	7adb      	ldrb	r3, [r3, #11]
  400ac4:	f013 0f08 	tst.w	r3, #8
  400ac8:	bf08      	it	eq
  400aca:	0276      	lsleq	r6, r6, #9
  400acc:	2301      	movs	r3, #1
  400ace:	9300      	str	r3, [sp, #0]
  400ad0:	462b      	mov	r3, r5
  400ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400ad6:	4631      	mov	r1, r6
  400ad8:	4e0f      	ldr	r6, [pc, #60]	; (400b18 <sd_mmc_init_write_blocks+0x74>)
  400ada:	47b0      	blx	r6
  400adc:	b928      	cbnz	r0, 400aea <sd_mmc_init_write_blocks+0x46>
  400ade:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400ae0:	4798      	blx	r3
  400ae2:	2405      	movs	r4, #5
  400ae4:	4620      	mov	r0, r4
  400ae6:	b002      	add	sp, #8
  400ae8:	bd70      	pop	{r4, r5, r6, pc}
  400aea:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <sd_mmc_init_write_blocks+0x7c>)
  400aec:	4798      	blx	r3
  400aee:	4b0d      	ldr	r3, [pc, #52]	; (400b24 <sd_mmc_init_write_blocks+0x80>)
  400af0:	4003      	ands	r3, r0
  400af2:	b923      	cbnz	r3, 400afe <sd_mmc_init_write_blocks+0x5a>
  400af4:	4b0c      	ldr	r3, [pc, #48]	; (400b28 <sd_mmc_init_write_blocks+0x84>)
  400af6:	801d      	strh	r5, [r3, #0]
  400af8:	4b0c      	ldr	r3, [pc, #48]	; (400b2c <sd_mmc_init_write_blocks+0x88>)
  400afa:	801d      	strh	r5, [r3, #0]
  400afc:	e7f2      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
  400afe:	4b07      	ldr	r3, [pc, #28]	; (400b1c <sd_mmc_init_write_blocks+0x78>)
  400b00:	4798      	blx	r3
  400b02:	2405      	movs	r4, #5
  400b04:	e7ee      	b.n	400ae4 <sd_mmc_init_write_blocks+0x40>
  400b06:	bf00      	nop
  400b08:	004001d5 	.word	0x004001d5
  400b0c:	00089118 	.word	0x00089118
  400b10:	00109119 	.word	0x00109119
  400b14:	20400464 	.word	0x20400464
  400b18:	00400db5 	.word	0x00400db5
  400b1c:	00400261 	.word	0x00400261
  400b20:	00400d7d 	.word	0x00400d7d
  400b24:	e4580000 	.word	0xe4580000
  400b28:	20400488 	.word	0x20400488
  400b2c:	2040048a 	.word	0x2040048a

00400b30 <sd_mmc_start_write_blocks>:
  400b30:	b510      	push	{r4, lr}
  400b32:	460c      	mov	r4, r1
  400b34:	4b06      	ldr	r3, [pc, #24]	; (400b50 <sd_mmc_start_write_blocks+0x20>)
  400b36:	4798      	blx	r3
  400b38:	b920      	cbnz	r0, 400b44 <sd_mmc_start_write_blocks+0x14>
  400b3a:	2200      	movs	r2, #0
  400b3c:	4b05      	ldr	r3, [pc, #20]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b3e:	801a      	strh	r2, [r3, #0]
  400b40:	2005      	movs	r0, #5
  400b42:	bd10      	pop	{r4, pc}
  400b44:	4a03      	ldr	r2, [pc, #12]	; (400b54 <sd_mmc_start_write_blocks+0x24>)
  400b46:	8813      	ldrh	r3, [r2, #0]
  400b48:	1b1c      	subs	r4, r3, r4
  400b4a:	8014      	strh	r4, [r2, #0]
  400b4c:	2000      	movs	r0, #0
  400b4e:	bd10      	pop	{r4, pc}
  400b50:	00400fb9 	.word	0x00400fb9
  400b54:	20400488 	.word	0x20400488

00400b58 <sd_mmc_wait_end_of_write_blocks>:
  400b58:	b510      	push	{r4, lr}
  400b5a:	4604      	mov	r4, r0
  400b5c:	4b12      	ldr	r3, [pc, #72]	; (400ba8 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400b5e:	4798      	blx	r3
  400b60:	b908      	cbnz	r0, 400b66 <sd_mmc_wait_end_of_write_blocks+0xe>
  400b62:	2005      	movs	r0, #5
  400b64:	bd10      	pop	{r4, pc}
  400b66:	b184      	cbz	r4, 400b8a <sd_mmc_wait_end_of_write_blocks+0x32>
  400b68:	2200      	movs	r2, #0
  400b6a:	4b10      	ldr	r3, [pc, #64]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b6c:	801a      	strh	r2, [r3, #0]
  400b6e:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400b70:	881b      	ldrh	r3, [r3, #0]
  400b72:	2b01      	cmp	r3, #1
  400b74:	d00f      	beq.n	400b96 <sd_mmc_wait_end_of_write_blocks+0x3e>
  400b76:	2100      	movs	r1, #0
  400b78:	f243 100c 	movw	r0, #12556	; 0x310c
  400b7c:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400b7e:	4798      	blx	r3
  400b80:	b968      	cbnz	r0, 400b9e <sd_mmc_wait_end_of_write_blocks+0x46>
  400b82:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b84:	4798      	blx	r3
  400b86:	2005      	movs	r0, #5
  400b88:	bd10      	pop	{r4, pc}
  400b8a:	4b08      	ldr	r3, [pc, #32]	; (400bac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400b8c:	881b      	ldrh	r3, [r3, #0]
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d0ed      	beq.n	400b6e <sd_mmc_wait_end_of_write_blocks+0x16>
  400b92:	2000      	movs	r0, #0
  400b94:	bd10      	pop	{r4, pc}
  400b96:	4b08      	ldr	r3, [pc, #32]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400b98:	4798      	blx	r3
  400b9a:	2000      	movs	r0, #0
  400b9c:	bd10      	pop	{r4, pc}
  400b9e:	4b06      	ldr	r3, [pc, #24]	; (400bb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400ba0:	4798      	blx	r3
  400ba2:	2000      	movs	r0, #0
  400ba4:	bd10      	pop	{r4, pc}
  400ba6:	bf00      	nop
  400ba8:	0040101d 	.word	0x0040101d
  400bac:	20400488 	.word	0x20400488
  400bb0:	2040048a 	.word	0x2040048a
  400bb4:	00400d59 	.word	0x00400d59
  400bb8:	00400261 	.word	0x00400261

00400bbc <hsmci_reset>:
  400bbc:	b470      	push	{r4, r5, r6}
  400bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400bc2:	685d      	ldr	r5, [r3, #4]
  400bc4:	689c      	ldr	r4, [r3, #8]
  400bc6:	68d8      	ldr	r0, [r3, #12]
  400bc8:	69d9      	ldr	r1, [r3, #28]
  400bca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  400bcc:	2680      	movs	r6, #128	; 0x80
  400bce:	601e      	str	r6, [r3, #0]
  400bd0:	605d      	str	r5, [r3, #4]
  400bd2:	609c      	str	r4, [r3, #8]
  400bd4:	60d8      	str	r0, [r3, #12]
  400bd6:	61d9      	str	r1, [r3, #28]
  400bd8:	655a      	str	r2, [r3, #84]	; 0x54
  400bda:	2200      	movs	r2, #0
  400bdc:	651a      	str	r2, [r3, #80]	; 0x50
  400bde:	2205      	movs	r2, #5
  400be0:	601a      	str	r2, [r3, #0]
  400be2:	bc70      	pop	{r4, r5, r6}
  400be4:	4770      	bx	lr
	...

00400be8 <hsmci_send_cmd_execute>:
  400be8:	b508      	push	{r3, lr}
  400bea:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400bee:	4318      	orrs	r0, r3
  400bf0:	f411 7f80 	tst.w	r1, #256	; 0x100
  400bf4:	d004      	beq.n	400c00 <hsmci_send_cmd_execute+0x18>
  400bf6:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400bfa:	d00e      	beq.n	400c1a <hsmci_send_cmd_execute+0x32>
  400bfc:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  400c00:	f411 4f80 	tst.w	r1, #16384	; 0x4000
  400c04:	bf18      	it	ne
  400c06:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  400c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c0e:	611a      	str	r2, [r3, #16]
  400c10:	6158      	str	r0, [r3, #20]
  400c12:	4618      	mov	r0, r3
  400c14:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400c18:	e00d      	b.n	400c36 <hsmci_send_cmd_execute+0x4e>
  400c1a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400c1e:	bf14      	ite	ne
  400c20:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
  400c24:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400c28:	e7ea      	b.n	400c00 <hsmci_send_cmd_execute+0x18>
  400c2a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400c2e:	d10c      	bne.n	400c4a <hsmci_send_cmd_execute+0x62>
  400c30:	f013 0f01 	tst.w	r3, #1
  400c34:	d10d      	bne.n	400c52 <hsmci_send_cmd_execute+0x6a>
  400c36:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400c38:	2a00      	cmp	r2, #0
  400c3a:	d0f6      	beq.n	400c2a <hsmci_send_cmd_execute+0x42>
  400c3c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400c40:	d0f6      	beq.n	400c30 <hsmci_send_cmd_execute+0x48>
  400c42:	4b10      	ldr	r3, [pc, #64]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c44:	4798      	blx	r3
  400c46:	2000      	movs	r0, #0
  400c48:	bd08      	pop	{r3, pc}
  400c4a:	4b0e      	ldr	r3, [pc, #56]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c4c:	4798      	blx	r3
  400c4e:	2000      	movs	r0, #0
  400c50:	bd08      	pop	{r3, pc}
  400c52:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400c56:	d103      	bne.n	400c60 <hsmci_send_cmd_execute+0x78>
  400c58:	2001      	movs	r0, #1
  400c5a:	bd08      	pop	{r3, pc}
  400c5c:	2001      	movs	r0, #1
  400c5e:	bd08      	pop	{r3, pc}
  400c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c66:	f04f 32ff 	mov.w	r2, #4294967295
  400c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400c6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400c72:	2b20      	cmp	r3, #32
  400c74:	d0f2      	beq.n	400c5c <hsmci_send_cmd_execute+0x74>
  400c76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  400c78:	3a01      	subs	r2, #1
  400c7a:	d1f8      	bne.n	400c6e <hsmci_send_cmd_execute+0x86>
  400c7c:	4b01      	ldr	r3, [pc, #4]	; (400c84 <hsmci_send_cmd_execute+0x9c>)
  400c7e:	4798      	blx	r3
  400c80:	2000      	movs	r0, #0
  400c82:	bd08      	pop	{r3, pc}
  400c84:	00400bbd 	.word	0x00400bbd

00400c88 <hsmci_init>:
  400c88:	b510      	push	{r4, lr}
  400c8a:	2012      	movs	r0, #18
  400c8c:	4c08      	ldr	r4, [pc, #32]	; (400cb0 <hsmci_init+0x28>)
  400c8e:	47a0      	blx	r4
  400c90:	203a      	movs	r0, #58	; 0x3a
  400c92:	47a0      	blx	r4
  400c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400c98:	2272      	movs	r2, #114	; 0x72
  400c9a:	609a      	str	r2, [r3, #8]
  400c9c:	61da      	str	r2, [r3, #28]
  400c9e:	2211      	movs	r2, #17
  400ca0:	655a      	str	r2, [r3, #84]	; 0x54
  400ca2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400ca6:	605a      	str	r2, [r3, #4]
  400ca8:	2205      	movs	r2, #5
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	00401dcd 	.word	0x00401dcd

00400cb4 <hsmci_get_bus_width>:
  400cb4:	2800      	cmp	r0, #0
  400cb6:	bf0c      	ite	eq
  400cb8:	2004      	moveq	r0, #4
  400cba:	2000      	movne	r0, #0
  400cbc:	4770      	bx	lr

00400cbe <hsmci_is_high_speed_capable>:
  400cbe:	2001      	movs	r0, #1
  400cc0:	4770      	bx	lr
	...

00400cc4 <hsmci_select_device>:
  400cc4:	b19b      	cbz	r3, 400cee <hsmci_select_device+0x2a>
  400cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cca:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400cd0:	6543      	str	r3, [r0, #84]	; 0x54
  400cd2:	0049      	lsls	r1, r1, #1
  400cd4:	4b15      	ldr	r3, [pc, #84]	; (400d2c <hsmci_select_device+0x68>)
  400cd6:	4299      	cmp	r1, r3
  400cd8:	d810      	bhi.n	400cfc <hsmci_select_device+0x38>
  400cda:	4815      	ldr	r0, [pc, #84]	; (400d30 <hsmci_select_device+0x6c>)
  400cdc:	fbb0 f3f1 	udiv	r3, r0, r1
  400ce0:	fb01 0113 	mls	r1, r1, r3, r0
  400ce4:	b101      	cbz	r1, 400ce8 <hsmci_select_device+0x24>
  400ce6:	3301      	adds	r3, #1
  400ce8:	b14b      	cbz	r3, 400cfe <hsmci_select_device+0x3a>
  400cea:	3b01      	subs	r3, #1
  400cec:	e007      	b.n	400cfe <hsmci_select_device+0x3a>
  400cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400cf2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400cf8:	6543      	str	r3, [r0, #84]	; 0x54
  400cfa:	e7ea      	b.n	400cd2 <hsmci_select_device+0xe>
  400cfc:	2300      	movs	r3, #0
  400cfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400d02:	6848      	ldr	r0, [r1, #4]
  400d04:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400d08:	6048      	str	r0, [r1, #4]
  400d0a:	6848      	ldr	r0, [r1, #4]
  400d0c:	b2db      	uxtb	r3, r3
  400d0e:	4303      	orrs	r3, r0
  400d10:	604b      	str	r3, [r1, #4]
  400d12:	2a04      	cmp	r2, #4
  400d14:	d007      	beq.n	400d26 <hsmci_select_device+0x62>
  400d16:	2a08      	cmp	r2, #8
  400d18:	bf0c      	ite	eq
  400d1a:	22c0      	moveq	r2, #192	; 0xc0
  400d1c:	2200      	movne	r2, #0
  400d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d22:	60da      	str	r2, [r3, #12]
  400d24:	4770      	bx	lr
  400d26:	2280      	movs	r2, #128	; 0x80
  400d28:	e7f9      	b.n	400d1e <hsmci_select_device+0x5a>
  400d2a:	bf00      	nop
  400d2c:	089543ff 	.word	0x089543ff
  400d30:	08954400 	.word	0x08954400

00400d34 <hsmci_deselect_device>:
  400d34:	4770      	bx	lr

00400d36 <hsmci_send_clock>:
  400d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d3a:	685a      	ldr	r2, [r3, #4]
  400d3c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d40:	605a      	str	r2, [r3, #4]
  400d42:	2200      	movs	r2, #0
  400d44:	611a      	str	r2, [r3, #16]
  400d46:	f44f 6210 	mov.w	r2, #2304	; 0x900
  400d4a:	615a      	str	r2, [r3, #20]
  400d4c:	461a      	mov	r2, r3
  400d4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  400d50:	f013 0f01 	tst.w	r3, #1
  400d54:	d0fb      	beq.n	400d4e <hsmci_send_clock+0x18>
  400d56:	4770      	bx	lr

00400d58 <hsmci_send_cmd>:
  400d58:	b510      	push	{r4, lr}
  400d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d5e:	685a      	ldr	r2, [r3, #4]
  400d60:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  400d64:	605a      	str	r2, [r3, #4]
  400d66:	2400      	movs	r4, #0
  400d68:	651c      	str	r4, [r3, #80]	; 0x50
  400d6a:	619c      	str	r4, [r3, #24]
  400d6c:	460a      	mov	r2, r1
  400d6e:	4601      	mov	r1, r0
  400d70:	4620      	mov	r0, r4
  400d72:	4b01      	ldr	r3, [pc, #4]	; (400d78 <hsmci_send_cmd+0x20>)
  400d74:	4798      	blx	r3
  400d76:	bd10      	pop	{r4, pc}
  400d78:	00400be9 	.word	0x00400be9

00400d7c <hsmci_get_response>:
  400d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400d80:	6a18      	ldr	r0, [r3, #32]
  400d82:	4770      	bx	lr

00400d84 <hsmci_get_response_128>:
  400d84:	b410      	push	{r4}
  400d86:	1d03      	adds	r3, r0, #4
  400d88:	3014      	adds	r0, #20
  400d8a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400d8e:	6a22      	ldr	r2, [r4, #32]
  400d90:	0e11      	lsrs	r1, r2, #24
  400d92:	f803 1c04 	strb.w	r1, [r3, #-4]
  400d96:	0c11      	lsrs	r1, r2, #16
  400d98:	f803 1c03 	strb.w	r1, [r3, #-3]
  400d9c:	0a11      	lsrs	r1, r2, #8
  400d9e:	f803 1c02 	strb.w	r1, [r3, #-2]
  400da2:	f803 2c01 	strb.w	r2, [r3, #-1]
  400da6:	3304      	adds	r3, #4
  400da8:	4283      	cmp	r3, r0
  400daa:	d1f0      	bne.n	400d8e <hsmci_get_response_128+0xa>
  400dac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db0:	4770      	bx	lr
	...

00400db4 <hsmci_adtc_start>:
  400db4:	b570      	push	{r4, r5, r6, lr}
  400db6:	f89d 4010 	ldrb.w	r4, [sp, #16]
  400dba:	b384      	cbz	r4, 400e1e <hsmci_adtc_start+0x6a>
  400dbc:	f44f 7580 	mov.w	r5, #256	; 0x100
  400dc0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400dc4:	6525      	str	r5, [r4, #80]	; 0x50
  400dc6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400dca:	686c      	ldr	r4, [r5, #4]
  400dcc:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  400dd0:	606c      	str	r4, [r5, #4]
  400dd2:	f012 0f03 	tst.w	r2, #3
  400dd6:	d027      	beq.n	400e28 <hsmci_adtc_start+0x74>
  400dd8:	686c      	ldr	r4, [r5, #4]
  400dda:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  400dde:	606c      	str	r4, [r5, #4]
  400de0:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
  400de4:	2c00      	cmp	r4, #0
  400de6:	bf14      	ite	ne
  400de8:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  400dec:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
  400df0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400df4:	d11f      	bne.n	400e36 <hsmci_adtc_start+0x82>
  400df6:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  400dfa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400dfe:	61b5      	str	r5, [r6, #24]
  400e00:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  400e04:	d12b      	bne.n	400e5e <hsmci_adtc_start+0xaa>
  400e06:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  400e0a:	d12b      	bne.n	400e64 <hsmci_adtc_start+0xb0>
  400e0c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  400e10:	d118      	bne.n	400e44 <hsmci_adtc_start+0x90>
  400e12:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
  400e16:	bf18      	it	ne
  400e18:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  400e1c:	e012      	b.n	400e44 <hsmci_adtc_start+0x90>
  400e1e:	2500      	movs	r5, #0
  400e20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  400e24:	6525      	str	r5, [r4, #80]	; 0x50
  400e26:	e7ce      	b.n	400dc6 <hsmci_adtc_start+0x12>
  400e28:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400e2c:	686c      	ldr	r4, [r5, #4]
  400e2e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  400e32:	606c      	str	r4, [r5, #4]
  400e34:	e7d4      	b.n	400de0 <hsmci_adtc_start+0x2c>
  400e36:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  400e3a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  400e3e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  400e42:	61b5      	str	r5, [r6, #24]
  400e44:	2600      	movs	r6, #0
  400e46:	4d09      	ldr	r5, [pc, #36]	; (400e6c <hsmci_adtc_start+0xb8>)
  400e48:	602e      	str	r6, [r5, #0]
  400e4a:	4d09      	ldr	r5, [pc, #36]	; (400e70 <hsmci_adtc_start+0xbc>)
  400e4c:	802a      	strh	r2, [r5, #0]
  400e4e:	4a09      	ldr	r2, [pc, #36]	; (400e74 <hsmci_adtc_start+0xc0>)
  400e50:	8013      	strh	r3, [r2, #0]
  400e52:	460a      	mov	r2, r1
  400e54:	4601      	mov	r1, r0
  400e56:	4620      	mov	r0, r4
  400e58:	4b07      	ldr	r3, [pc, #28]	; (400e78 <hsmci_adtc_start+0xc4>)
  400e5a:	4798      	blx	r3
  400e5c:	bd70      	pop	{r4, r5, r6, pc}
  400e5e:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  400e62:	e7ef      	b.n	400e44 <hsmci_adtc_start+0x90>
  400e64:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  400e68:	e7ec      	b.n	400e44 <hsmci_adtc_start+0x90>
  400e6a:	bf00      	nop
  400e6c:	20400494 	.word	0x20400494
  400e70:	2040048e 	.word	0x2040048e
  400e74:	20400490 	.word	0x20400490
  400e78:	00400be9 	.word	0x00400be9

00400e7c <hsmci_read_word>:
  400e7c:	b508      	push	{r3, lr}
  400e7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400e82:	4a16      	ldr	r2, [pc, #88]	; (400edc <hsmci_read_word+0x60>)
  400e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  400e86:	4213      	tst	r3, r2
  400e88:	d11d      	bne.n	400ec6 <hsmci_read_word+0x4a>
  400e8a:	f013 0f02 	tst.w	r3, #2
  400e8e:	d0f9      	beq.n	400e84 <hsmci_read_word+0x8>
  400e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e96:	6003      	str	r3, [r0, #0]
  400e98:	4a11      	ldr	r2, [pc, #68]	; (400ee0 <hsmci_read_word+0x64>)
  400e9a:	6813      	ldr	r3, [r2, #0]
  400e9c:	3304      	adds	r3, #4
  400e9e:	6013      	str	r3, [r2, #0]
  400ea0:	4a10      	ldr	r2, [pc, #64]	; (400ee4 <hsmci_read_word+0x68>)
  400ea2:	8811      	ldrh	r1, [r2, #0]
  400ea4:	4a10      	ldr	r2, [pc, #64]	; (400ee8 <hsmci_read_word+0x6c>)
  400ea6:	8812      	ldrh	r2, [r2, #0]
  400ea8:	fb02 f201 	mul.w	r2, r2, r1
  400eac:	4293      	cmp	r3, r2
  400eae:	d312      	bcc.n	400ed6 <hsmci_read_word+0x5a>
  400eb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400eb4:	4a09      	ldr	r2, [pc, #36]	; (400edc <hsmci_read_word+0x60>)
  400eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  400eb8:	4213      	tst	r3, r2
  400eba:	d108      	bne.n	400ece <hsmci_read_word+0x52>
  400ebc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400ec0:	d0f9      	beq.n	400eb6 <hsmci_read_word+0x3a>
  400ec2:	2001      	movs	r0, #1
  400ec4:	bd08      	pop	{r3, pc}
  400ec6:	4b09      	ldr	r3, [pc, #36]	; (400eec <hsmci_read_word+0x70>)
  400ec8:	4798      	blx	r3
  400eca:	2000      	movs	r0, #0
  400ecc:	bd08      	pop	{r3, pc}
  400ece:	4b07      	ldr	r3, [pc, #28]	; (400eec <hsmci_read_word+0x70>)
  400ed0:	4798      	blx	r3
  400ed2:	2000      	movs	r0, #0
  400ed4:	bd08      	pop	{r3, pc}
  400ed6:	2001      	movs	r0, #1
  400ed8:	bd08      	pop	{r3, pc}
  400eda:	bf00      	nop
  400edc:	c0600000 	.word	0xc0600000
  400ee0:	20400494 	.word	0x20400494
  400ee4:	2040048e 	.word	0x2040048e
  400ee8:	20400490 	.word	0x20400490
  400eec:	00400bbd 	.word	0x00400bbd

00400ef0 <hsmci_start_read_blocks>:
  400ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ef2:	b089      	sub	sp, #36	; 0x24
  400ef4:	4607      	mov	r7, r0
  400ef6:	460c      	mov	r4, r1
  400ef8:	2220      	movs	r2, #32
  400efa:	2100      	movs	r1, #0
  400efc:	4668      	mov	r0, sp
  400efe:	4b0e      	ldr	r3, [pc, #56]	; (400f38 <hsmci_start_read_blocks+0x48>)
  400f00:	4798      	blx	r3
  400f02:	4e0e      	ldr	r6, [pc, #56]	; (400f3c <hsmci_start_read_blocks+0x4c>)
  400f04:	2501      	movs	r5, #1
  400f06:	6235      	str	r5, [r6, #32]
  400f08:	4b0d      	ldr	r3, [pc, #52]	; (400f40 <hsmci_start_read_blocks+0x50>)
  400f0a:	881b      	ldrh	r3, [r3, #0]
  400f0c:	fb04 f403 	mul.w	r4, r4, r3
  400f10:	4b0c      	ldr	r3, [pc, #48]	; (400f44 <hsmci_start_read_blocks+0x54>)
  400f12:	9303      	str	r3, [sp, #12]
  400f14:	08a3      	lsrs	r3, r4, #2
  400f16:	9300      	str	r3, [sp, #0]
  400f18:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <hsmci_start_read_blocks+0x58>)
  400f1a:	9301      	str	r3, [sp, #4]
  400f1c:	9702      	str	r7, [sp, #8]
  400f1e:	466a      	mov	r2, sp
  400f20:	2100      	movs	r1, #0
  400f22:	4630      	mov	r0, r6
  400f24:	4b09      	ldr	r3, [pc, #36]	; (400f4c <hsmci_start_read_blocks+0x5c>)
  400f26:	4798      	blx	r3
  400f28:	61f5      	str	r5, [r6, #28]
  400f2a:	4a09      	ldr	r2, [pc, #36]	; (400f50 <hsmci_start_read_blocks+0x60>)
  400f2c:	6813      	ldr	r3, [r2, #0]
  400f2e:	441c      	add	r4, r3
  400f30:	6014      	str	r4, [r2, #0]
  400f32:	4628      	mov	r0, r5
  400f34:	b009      	add	sp, #36	; 0x24
  400f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f38:	00402a39 	.word	0x00402a39
  400f3c:	40078000 	.word	0x40078000
  400f40:	2040048e 	.word	0x2040048e
  400f44:	00043001 	.word	0x00043001
  400f48:	40000200 	.word	0x40000200
  400f4c:	00401e9d 	.word	0x00401e9d
  400f50:	20400494 	.word	0x20400494

00400f54 <hsmci_wait_end_of_read_blocks>:
  400f54:	b570      	push	{r4, r5, r6, lr}
  400f56:	4b12      	ldr	r3, [pc, #72]	; (400fa0 <hsmci_wait_end_of_read_blocks+0x4c>)
  400f58:	881b      	ldrh	r3, [r3, #0]
  400f5a:	4a12      	ldr	r2, [pc, #72]	; (400fa4 <hsmci_wait_end_of_read_blocks+0x50>)
  400f5c:	8812      	ldrh	r2, [r2, #0]
  400f5e:	fb02 f203 	mul.w	r2, r2, r3
  400f62:	4b11      	ldr	r3, [pc, #68]	; (400fa8 <hsmci_wait_end_of_read_blocks+0x54>)
  400f64:	681c      	ldr	r4, [r3, #0]
  400f66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400f6a:	4910      	ldr	r1, [pc, #64]	; (400fac <hsmci_wait_end_of_read_blocks+0x58>)
  400f6c:	4e10      	ldr	r6, [pc, #64]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f6e:	e009      	b.n	400f84 <hsmci_wait_end_of_read_blocks+0x30>
  400f70:	4b10      	ldr	r3, [pc, #64]	; (400fb4 <hsmci_wait_end_of_read_blocks+0x60>)
  400f72:	4798      	blx	r3
  400f74:	2201      	movs	r2, #1
  400f76:	4b0e      	ldr	r3, [pc, #56]	; (400fb0 <hsmci_wait_end_of_read_blocks+0x5c>)
  400f78:	621a      	str	r2, [r3, #32]
  400f7a:	2000      	movs	r0, #0
  400f7c:	bd70      	pop	{r4, r5, r6, pc}
  400f7e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  400f82:	d10a      	bne.n	400f9a <hsmci_wait_end_of_read_blocks+0x46>
  400f84:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400f86:	420b      	tst	r3, r1
  400f88:	d1f2      	bne.n	400f70 <hsmci_wait_end_of_read_blocks+0x1c>
  400f8a:	42a2      	cmp	r2, r4
  400f8c:	d9f7      	bls.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
  400f8e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
  400f90:	f015 0f01 	tst.w	r5, #1
  400f94:	d0f3      	beq.n	400f7e <hsmci_wait_end_of_read_blocks+0x2a>
  400f96:	2001      	movs	r0, #1
  400f98:	bd70      	pop	{r4, r5, r6, pc}
  400f9a:	2001      	movs	r0, #1
  400f9c:	bd70      	pop	{r4, r5, r6, pc}
  400f9e:	bf00      	nop
  400fa0:	2040048e 	.word	0x2040048e
  400fa4:	20400490 	.word	0x20400490
  400fa8:	20400494 	.word	0x20400494
  400fac:	c0600000 	.word	0xc0600000
  400fb0:	40078000 	.word	0x40078000
  400fb4:	00400bbd 	.word	0x00400bbd

00400fb8 <hsmci_start_write_blocks>:
  400fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400fba:	b089      	sub	sp, #36	; 0x24
  400fbc:	4607      	mov	r7, r0
  400fbe:	460c      	mov	r4, r1
  400fc0:	2220      	movs	r2, #32
  400fc2:	2100      	movs	r1, #0
  400fc4:	4668      	mov	r0, sp
  400fc6:	4b0e      	ldr	r3, [pc, #56]	; (401000 <hsmci_start_write_blocks+0x48>)
  400fc8:	4798      	blx	r3
  400fca:	4e0e      	ldr	r6, [pc, #56]	; (401004 <hsmci_start_write_blocks+0x4c>)
  400fcc:	2501      	movs	r5, #1
  400fce:	6235      	str	r5, [r6, #32]
  400fd0:	4b0d      	ldr	r3, [pc, #52]	; (401008 <hsmci_start_write_blocks+0x50>)
  400fd2:	881b      	ldrh	r3, [r3, #0]
  400fd4:	fb04 f403 	mul.w	r4, r4, r3
  400fd8:	4b0c      	ldr	r3, [pc, #48]	; (40100c <hsmci_start_write_blocks+0x54>)
  400fda:	9303      	str	r3, [sp, #12]
  400fdc:	08a3      	lsrs	r3, r4, #2
  400fde:	9300      	str	r3, [sp, #0]
  400fe0:	9701      	str	r7, [sp, #4]
  400fe2:	4b0b      	ldr	r3, [pc, #44]	; (401010 <hsmci_start_write_blocks+0x58>)
  400fe4:	9302      	str	r3, [sp, #8]
  400fe6:	466a      	mov	r2, sp
  400fe8:	2100      	movs	r1, #0
  400fea:	4630      	mov	r0, r6
  400fec:	4b09      	ldr	r3, [pc, #36]	; (401014 <hsmci_start_write_blocks+0x5c>)
  400fee:	4798      	blx	r3
  400ff0:	61f5      	str	r5, [r6, #28]
  400ff2:	4a09      	ldr	r2, [pc, #36]	; (401018 <hsmci_start_write_blocks+0x60>)
  400ff4:	6813      	ldr	r3, [r2, #0]
  400ff6:	441c      	add	r4, r3
  400ff8:	6014      	str	r4, [r2, #0]
  400ffa:	4628      	mov	r0, r5
  400ffc:	b009      	add	sp, #36	; 0x24
  400ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401000:	00402a39 	.word	0x00402a39
  401004:	40078000 	.word	0x40078000
  401008:	2040048e 	.word	0x2040048e
  40100c:	00015011 	.word	0x00015011
  401010:	40000200 	.word	0x40000200
  401014:	00401e9d 	.word	0x00401e9d
  401018:	20400494 	.word	0x20400494

0040101c <hsmci_wait_end_of_write_blocks>:
  40101c:	b570      	push	{r4, r5, r6, lr}
  40101e:	4b12      	ldr	r3, [pc, #72]	; (401068 <hsmci_wait_end_of_write_blocks+0x4c>)
  401020:	881b      	ldrh	r3, [r3, #0]
  401022:	4a12      	ldr	r2, [pc, #72]	; (40106c <hsmci_wait_end_of_write_blocks+0x50>)
  401024:	8812      	ldrh	r2, [r2, #0]
  401026:	fb02 f203 	mul.w	r2, r2, r3
  40102a:	4b11      	ldr	r3, [pc, #68]	; (401070 <hsmci_wait_end_of_write_blocks+0x54>)
  40102c:	681c      	ldr	r4, [r3, #0]
  40102e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401032:	4910      	ldr	r1, [pc, #64]	; (401074 <hsmci_wait_end_of_write_blocks+0x58>)
  401034:	4e10      	ldr	r6, [pc, #64]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401036:	e009      	b.n	40104c <hsmci_wait_end_of_write_blocks+0x30>
  401038:	4b10      	ldr	r3, [pc, #64]	; (40107c <hsmci_wait_end_of_write_blocks+0x60>)
  40103a:	4798      	blx	r3
  40103c:	2201      	movs	r2, #1
  40103e:	4b0e      	ldr	r3, [pc, #56]	; (401078 <hsmci_wait_end_of_write_blocks+0x5c>)
  401040:	621a      	str	r2, [r3, #32]
  401042:	2000      	movs	r0, #0
  401044:	bd70      	pop	{r4, r5, r6, pc}
  401046:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40104a:	d10a      	bne.n	401062 <hsmci_wait_end_of_write_blocks+0x46>
  40104c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40104e:	420b      	tst	r3, r1
  401050:	d1f2      	bne.n	401038 <hsmci_wait_end_of_write_blocks+0x1c>
  401052:	42a2      	cmp	r2, r4
  401054:	d9f7      	bls.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
  401056:	6df5      	ldr	r5, [r6, #92]	; 0x5c
  401058:	f015 0f01 	tst.w	r5, #1
  40105c:	d0f3      	beq.n	401046 <hsmci_wait_end_of_write_blocks+0x2a>
  40105e:	2001      	movs	r0, #1
  401060:	bd70      	pop	{r4, r5, r6, pc}
  401062:	2001      	movs	r0, #1
  401064:	bd70      	pop	{r4, r5, r6, pc}
  401066:	bf00      	nop
  401068:	2040048e 	.word	0x2040048e
  40106c:	20400490 	.word	0x20400490
  401070:	20400494 	.word	0x20400494
  401074:	c0600000 	.word	0xc0600000
  401078:	40078000 	.word	0x40078000
  40107c:	00400bbd 	.word	0x00400bbd

00401080 <matrix_set_system_io>:
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <matrix_set_system_io+0x1c>)
  401082:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
  401086:	4a06      	ldr	r2, [pc, #24]	; (4010a0 <matrix_set_system_io+0x20>)
  401088:	400a      	ands	r2, r1
  40108a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  40108e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  401092:	b280      	uxth	r0, r0
  401094:	4310      	orrs	r0, r2
  401096:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
  40109a:	4770      	bx	lr
  40109c:	40088000 	.word	0x40088000
  4010a0:	ffff0000 	.word	0xffff0000

004010a4 <matrix_get_system_io>:
  4010a4:	4b02      	ldr	r3, [pc, #8]	; (4010b0 <matrix_get_system_io+0xc>)
  4010a6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
  4010aa:	b280      	uxth	r0, r0
  4010ac:	4770      	bx	lr
  4010ae:	bf00      	nop
  4010b0:	40088000 	.word	0x40088000

004010b4 <pwm_clocks_generate>:
  4010b4:	b4f0      	push	{r4, r5, r6, r7}
  4010b6:	b08c      	sub	sp, #48	; 0x30
  4010b8:	4607      	mov	r7, r0
  4010ba:	460e      	mov	r6, r1
  4010bc:	ac01      	add	r4, sp, #4
  4010be:	4d11      	ldr	r5, [pc, #68]	; (401104 <pwm_clocks_generate+0x50>)
  4010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4010d0:	aa01      	add	r2, sp, #4
  4010d2:	2300      	movs	r3, #0
  4010d4:	f852 0b04 	ldr.w	r0, [r2], #4
  4010d8:	fbb6 f0f0 	udiv	r0, r6, r0
  4010dc:	fbb0 f0f7 	udiv	r0, r0, r7
  4010e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4010e4:	d907      	bls.n	4010f6 <pwm_clocks_generate+0x42>
  4010e6:	3301      	adds	r3, #1
  4010e8:	2b0b      	cmp	r3, #11
  4010ea:	d1f3      	bne.n	4010d4 <pwm_clocks_generate+0x20>
  4010ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4010f0:	b00c      	add	sp, #48	; 0x30
  4010f2:	bcf0      	pop	{r4, r5, r6, r7}
  4010f4:	4770      	bx	lr
  4010f6:	2b0a      	cmp	r3, #10
  4010f8:	bf94      	ite	ls
  4010fa:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
  4010fe:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  401102:	e7f5      	b.n	4010f0 <pwm_clocks_generate+0x3c>
  401104:	00402c90 	.word	0x00402c90

00401108 <pwm_init>:
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	4606      	mov	r6, r0
  40110c:	460d      	mov	r5, r1
  40110e:	680c      	ldr	r4, [r1, #0]
  401110:	b144      	cbz	r4, 401124 <pwm_init+0x1c>
  401112:	6889      	ldr	r1, [r1, #8]
  401114:	4620      	mov	r0, r4
  401116:	4b0c      	ldr	r3, [pc, #48]	; (401148 <pwm_init+0x40>)
  401118:	4798      	blx	r3
  40111a:	4604      	mov	r4, r0
  40111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401120:	4298      	cmp	r0, r3
  401122:	d00c      	beq.n	40113e <pwm_init+0x36>
  401124:	6868      	ldr	r0, [r5, #4]
  401126:	b140      	cbz	r0, 40113a <pwm_init+0x32>
  401128:	68a9      	ldr	r1, [r5, #8]
  40112a:	4b07      	ldr	r3, [pc, #28]	; (401148 <pwm_init+0x40>)
  40112c:	4798      	blx	r3
  40112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401132:	4298      	cmp	r0, r3
  401134:	d005      	beq.n	401142 <pwm_init+0x3a>
  401136:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
  40113a:	6034      	str	r4, [r6, #0]
  40113c:	2400      	movs	r4, #0
  40113e:	4620      	mov	r0, r4
  401140:	bd70      	pop	{r4, r5, r6, pc}
  401142:	4604      	mov	r4, r0
  401144:	e7fb      	b.n	40113e <pwm_init+0x36>
  401146:	bf00      	nop
  401148:	004010b5 	.word	0x004010b5

0040114c <pwm_channel_init>:
  40114c:	b470      	push	{r4, r5, r6}
  40114e:	680a      	ldr	r2, [r1, #0]
  401150:	684b      	ldr	r3, [r1, #4]
  401152:	f003 030f 	and.w	r3, r3, #15
  401156:	8a8c      	ldrh	r4, [r1, #20]
  401158:	4323      	orrs	r3, r4
  40115a:	890c      	ldrh	r4, [r1, #8]
  40115c:	4323      	orrs	r3, r4
  40115e:	7a8c      	ldrb	r4, [r1, #10]
  401160:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
  401164:	7d8c      	ldrb	r4, [r1, #22]
  401166:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40116a:	7dcc      	ldrb	r4, [r1, #23]
  40116c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  401170:	7e0c      	ldrb	r4, [r1, #24]
  401172:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401176:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40117a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  40117e:	68cb      	ldr	r3, [r1, #12]
  401180:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
  401184:	690b      	ldr	r3, [r1, #16]
  401186:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  40118a:	7d8b      	ldrb	r3, [r1, #22]
  40118c:	b13b      	cbz	r3, 40119e <pwm_channel_init+0x52>
  40118e:	8b8c      	ldrh	r4, [r1, #28]
  401190:	8b4b      	ldrh	r3, [r1, #26]
  401192:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  401196:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40119a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  40119e:	6c85      	ldr	r5, [r0, #72]	; 0x48
  4011a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  4011a4:	4093      	lsls	r3, r2
  4011a6:	43db      	mvns	r3, r3
  4011a8:	401d      	ands	r5, r3
  4011aa:	7fcc      	ldrb	r4, [r1, #31]
  4011ac:	fa04 f602 	lsl.w	r6, r4, r2
  4011b0:	7f8c      	ldrb	r4, [r1, #30]
  4011b2:	4094      	lsls	r4, r2
  4011b4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4011b8:	432c      	orrs	r4, r5
  4011ba:	6484      	str	r4, [r0, #72]	; 0x48
  4011bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4011be:	4023      	ands	r3, r4
  4011c0:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4011c4:	fa04 f502 	lsl.w	r5, r4, r2
  4011c8:	f891 4020 	ldrb.w	r4, [r1, #32]
  4011cc:	4094      	lsls	r4, r2
  4011ce:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4011d2:	4323      	orrs	r3, r4
  4011d4:	6443      	str	r3, [r0, #68]	; 0x44
  4011d6:	2301      	movs	r3, #1
  4011d8:	4093      	lsls	r3, r2
  4011da:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4011de:	2c00      	cmp	r4, #0
  4011e0:	d04f      	beq.n	401282 <pwm_channel_init+0x136>
  4011e2:	6a04      	ldr	r4, [r0, #32]
  4011e4:	431c      	orrs	r4, r3
  4011e6:	6204      	str	r4, [r0, #32]
  4011e8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4011ec:	2c02      	cmp	r4, #2
  4011ee:	d04d      	beq.n	40128c <pwm_channel_init+0x140>
  4011f0:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  4011f4:	43dc      	mvns	r4, r3
  4011f6:	4025      	ands	r5, r4
  4011f8:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
  4011fc:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  401200:	2d01      	cmp	r5, #1
  401202:	d049      	beq.n	401298 <pwm_channel_init+0x14c>
  401204:	6e85      	ldr	r5, [r0, #104]	; 0x68
  401206:	402c      	ands	r4, r5
  401208:	6684      	str	r4, [r0, #104]	; 0x68
  40120a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  40120e:	2c02      	cmp	r4, #2
  401210:	d046      	beq.n	4012a0 <pwm_channel_init+0x154>
  401212:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  401216:	041b      	lsls	r3, r3, #16
  401218:	43dc      	mvns	r4, r3
  40121a:	4025      	ands	r5, r4
  40121c:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
  401220:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  401224:	2d01      	cmp	r5, #1
  401226:	d042      	beq.n	4012ae <pwm_channel_init+0x162>
  401228:	6e83      	ldr	r3, [r0, #104]	; 0x68
  40122a:	401c      	ands	r4, r3
  40122c:	6684      	str	r4, [r0, #104]	; 0x68
  40122e:	00d2      	lsls	r2, r2, #3
  401230:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  401232:	24ff      	movs	r4, #255	; 0xff
  401234:	4094      	lsls	r4, r2
  401236:	ea23 0404 	bic.w	r4, r3, r4
  40123a:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  40123e:	4093      	lsls	r3, r2
  401240:	4323      	orrs	r3, r4
  401242:	66c3      	str	r3, [r0, #108]	; 0x6c
  401244:	b952      	cbnz	r2, 40125c <pwm_channel_init+0x110>
  401246:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  40124a:	2b01      	cmp	r3, #1
  40124c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  40124e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401252:	bf08      	it	eq
  401254:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
  401258:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  40125c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
  401260:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  401264:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  401268:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  40126c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  401270:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  401272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  401276:	4313      	orrs	r3, r2
  401278:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  40127c:	2000      	movs	r0, #0
  40127e:	bc70      	pop	{r4, r5, r6}
  401280:	4770      	bx	lr
  401282:	6a04      	ldr	r4, [r0, #32]
  401284:	ea24 0403 	bic.w	r4, r4, r3
  401288:	6204      	str	r4, [r0, #32]
  40128a:	e7ad      	b.n	4011e8 <pwm_channel_init+0x9c>
  40128c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  401290:	431c      	orrs	r4, r3
  401292:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  401296:	e7b8      	b.n	40120a <pwm_channel_init+0xbe>
  401298:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40129a:	431c      	orrs	r4, r3
  40129c:	6684      	str	r4, [r0, #104]	; 0x68
  40129e:	e7b4      	b.n	40120a <pwm_channel_init+0xbe>
  4012a0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4012a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  4012a8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  4012ac:	e7bf      	b.n	40122e <pwm_channel_init+0xe2>
  4012ae:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4012b0:	4323      	orrs	r3, r4
  4012b2:	6683      	str	r3, [r0, #104]	; 0x68
  4012b4:	e7bb      	b.n	40122e <pwm_channel_init+0xe2>

004012b6 <pwm_channel_update_duty>:
  4012b6:	690b      	ldr	r3, [r1, #16]
  4012b8:	4293      	cmp	r3, r2
  4012ba:	d202      	bcs.n	4012c2 <pwm_channel_update_duty+0xc>
  4012bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4012c0:	4770      	bx	lr
  4012c2:	680b      	ldr	r3, [r1, #0]
  4012c4:	60ca      	str	r2, [r1, #12]
  4012c6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4012ca:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
  4012ce:	2000      	movs	r0, #0
  4012d0:	4770      	bx	lr

004012d2 <pwm_channel_enable>:
  4012d2:	2301      	movs	r3, #1
  4012d4:	fa03 f101 	lsl.w	r1, r3, r1
  4012d8:	6041      	str	r1, [r0, #4]
  4012da:	4770      	bx	lr

004012dc <pwm_channel_disable>:
  4012dc:	2301      	movs	r3, #1
  4012de:	fa03 f101 	lsl.w	r1, r3, r1
  4012e2:	6081      	str	r1, [r0, #8]
  4012e4:	4770      	bx	lr

004012e6 <pwm_channel_disable_interrupt>:
  4012e6:	3210      	adds	r2, #16
  4012e8:	2301      	movs	r3, #1
  4012ea:	fa03 f202 	lsl.w	r2, r3, r2
  4012ee:	fa03 f101 	lsl.w	r1, r3, r1
  4012f2:	430a      	orrs	r2, r1
  4012f4:	6142      	str	r2, [r0, #20]
  4012f6:	4770      	bx	lr

004012f8 <TWIHS_init>:
#include "definitions.h"



void TWIHS_init()
{	
  4012f8:	b500      	push	{lr}
  4012fa:	b085      	sub	sp, #20
	//Make sure you have the correct TWIHS
	twihs_options_t twihsOpt;
	twihsOpt.master_clk = sysclk_get_cpu_hz()/2; //make sure this is the correct clock to be checking
  4012fc:	4b1b      	ldr	r3, [pc, #108]	; (40136c <TWIHS_init+0x74>)
  4012fe:	9301      	str	r3, [sp, #4]
	twihsOpt.speed = 100000; //100kHz
  401300:	4b1b      	ldr	r3, [pc, #108]	; (401370 <TWIHS_init+0x78>)
  401302:	9302      	str	r3, [sp, #8]
	
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  401304:	4b1b      	ldr	r3, [pc, #108]	; (401374 <TWIHS_init+0x7c>)
  401306:	4798      	blx	r3
  401308:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  40130c:	4b1a      	ldr	r3, [pc, #104]	; (401378 <TWIHS_init+0x80>)
  40130e:	4798      	blx	r3
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401310:	4b1a      	ldr	r3, [pc, #104]	; (40137c <TWIHS_init+0x84>)
  401312:	2220      	movs	r2, #32
  401314:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40131a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40131c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40131e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401322:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401324:	f021 0120 	bic.w	r1, r1, #32
  401328:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40132a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40132c:	f021 0120 	bic.w	r1, r1, #32
  401330:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401332:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401334:	2210      	movs	r2, #16
  401336:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40133c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40133e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401344:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401346:	f021 0110 	bic.w	r1, r1, #16
  40134a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40134c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40134e:	f021 0110 	bic.w	r1, r1, #16
  401352:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401354:	605a      	str	r2, [r3, #4]
	ioport_disable_pin(TWCK_PIN);
	
	ioport_set_pin_mode(TWD_PIN,TWD_MODE);
	ioport_disable_pin(TWD_PIN);

	pmc_enable_periph_clk(ID_TWIHS1);
  401356:	2014      	movs	r0, #20
  401358:	4b09      	ldr	r3, [pc, #36]	; (401380 <TWIHS_init+0x88>)
  40135a:	4798      	blx	r3

	twihs_master_init(TWIHS1,&twihsOpt);
  40135c:	a901      	add	r1, sp, #4
  40135e:	4809      	ldr	r0, [pc, #36]	; (401384 <TWIHS_init+0x8c>)
  401360:	4b09      	ldr	r3, [pc, #36]	; (401388 <TWIHS_init+0x90>)
  401362:	4798      	blx	r3
}
  401364:	b005      	add	sp, #20
  401366:	f85d fb04 	ldr.w	pc, [sp], #4
  40136a:	bf00      	nop
  40136c:	044aa200 	.word	0x044aa200
  401370:	000186a0 	.word	0x000186a0
  401374:	004010a5 	.word	0x004010a5
  401378:	00401081 	.word	0x00401081
  40137c:	400e1000 	.word	0x400e1000
  401380:	00401dcd 	.word	0x00401dcd
  401384:	4001c000 	.word	0x4001c000
  401388:	00401e69 	.word	0x00401e69

0040138c <SPI_BitBang_init>:

void SPI_BitBang_init()
{
  40138c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_PIOB);
  40138e:	200b      	movs	r0, #11
  401390:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <SPI_BitBang_init+0x48>)
  401392:	4798      	blx	r3
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO4 | CCFG_SYSIO_SYSIO5);
  401394:	4b10      	ldr	r3, [pc, #64]	; (4013d8 <SPI_BitBang_init+0x4c>)
  401396:	4798      	blx	r3
  401398:	f040 0030 	orr.w	r0, r0, #48	; 0x30
  40139c:	4b0f      	ldr	r3, [pc, #60]	; (4013dc <SPI_BitBang_init+0x50>)
  40139e:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4013a0:	4b0f      	ldr	r3, [pc, #60]	; (4013e0 <SPI_BitBang_init+0x54>)
  4013a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4013a6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013ac:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4013ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4013b2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013b8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4013ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4013be:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013c4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4013c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4013ca:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4013d0:	631a      	str	r2, [r3, #48]	; 0x30
  4013d2:	bd08      	pop	{r3, pc}
  4013d4:	00401dcd 	.word	0x00401dcd
  4013d8:	004010a5 	.word	0x004010a5
  4013dc:	00401081 	.word	0x00401081
  4013e0:	400e1400 	.word	0x400e1400

004013e4 <PWM_Init>:



// ========== NOT IN USE ========= //
void PWM_Init()
{
  4013e4:	b570      	push	{r4, r5, r6, lr}
  4013e6:	b084      	sub	sp, #16
	// Power Management Controller (PMC) initiates the peripheral clock (PCLK) derived from master clock (MCK) for power width modulator (PWM)
	// <--> CPU clock (CCLK/HCLK): Generally faster (comes from on-board PLL or external clock/oscillator)
	// @ ID_PWM0: Peripheral ID Definition - Pulse Width Modulation 0
	pmc_enable_periph_clk(ID_PWM0);
  4013e8:	201f      	movs	r0, #31
  4013ea:	4b20      	ldr	r3, [pc, #128]	; (40146c <PWM_Init+0x88>)
  4013ec:	4798      	blx	r3
	//					   effect. However, the direction (input or output), pull-up, pull-down and other mode control is still managed
	//					   by the PIO controller. (0x1u << 12, so 2^12)
	//					   SYSIO12: PB12 or ERASE Assignment
	//								(=0) ERASE function selected.
	//								(=1) PB12 function selected.
	matrix_set_system_io(matrix_get_system_io() | CCFG_SYSIO_SYSIO12);	// Bitwise OR		// So what's the value of SYSIO12? When did I assign it a value?
  4013ee:	4b20      	ldr	r3, [pc, #128]	; (401470 <PWM_Init+0x8c>)
  4013f0:	4798      	blx	r3
  4013f2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  4013f6:	4b1f      	ldr	r3, [pc, #124]	; (401474 <PWM_Init+0x90>)
  4013f8:	4798      	blx	r3
		base->PIO_PUDR = mask;
  4013fa:	4b1f      	ldr	r3, [pc, #124]	; (401478 <PWM_Init+0x94>)
  4013fc:	2401      	movs	r4, #1
  4013fe:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401400:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401404:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401406:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401408:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40140c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40140e:	f022 0201 	bic.w	r2, r2, #1
  401412:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401414:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401416:	f022 0201 	bic.w	r2, r2, #1
  40141a:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40141c:	605c      	str	r4, [r3, #4]
	ioport_set_pin_mode(PWM_LED_PIN, PWM_LED_MODE);						// Sets GPIO PIN to PWM Peripheral
	ioport_disable_pin(PWM_LED_PIN);									// why are we disabling this pin? Are we waiting to actually start?

	pwm_channel_disable(PWM0, PWM_LED_CHANNEL);
  40141e:	4e17      	ldr	r6, [pc, #92]	; (40147c <PWM_Init+0x98>)
  401420:	2100      	movs	r1, #0
  401422:	4630      	mov	r0, r6
  401424:	4b16      	ldr	r3, [pc, #88]	; (401480 <PWM_Init+0x9c>)
  401426:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
  401428:	4b16      	ldr	r3, [pc, #88]	; (401484 <PWM_Init+0xa0>)
  40142a:	9301      	str	r3, [sp, #4]
  40142c:	2500      	movs	r5, #0
  40142e:	9502      	str	r5, [sp, #8]
  401430:	4b15      	ldr	r3, [pc, #84]	; (401488 <PWM_Init+0xa4>)
  401432:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PWM_PERIOD_VALUE,					// Clock A is...freq*period Hz??
		.ul_clkb = 0,													// Clock B is turned off
		.ul_mck = sysclk_get_cpu_hz()/2									// (Master Clock freq in Hz) Might need or not need to divide by 2 to get the correct clock
	};

	pwm_init(PWM0, &clock_setting);
  401434:	a901      	add	r1, sp, #4
  401436:	4630      	mov	r0, r6
  401438:	4b14      	ldr	r3, [pc, #80]	; (40148c <PWM_Init+0xa8>)
  40143a:	4798      	blx	r3

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  40143c:	4914      	ldr	r1, [pc, #80]	; (401490 <PWM_Init+0xac>)
  40143e:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  401440:	728c      	strb	r4, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401442:	230b      	movs	r3, #11
  401444:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PWM_PERIOD_VALUE;
  401446:	23ff      	movs	r3, #255	; 0xff
  401448:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  40144a:	2305      	movs	r3, #5
  40144c:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_led.channel = PWM_LED_CHANNEL;
  40144e:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  401450:	4630      	mov	r0, r6
  401452:	4b10      	ldr	r3, [pc, #64]	; (401494 <PWM_Init+0xb0>)
  401454:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PWM_LED_CHANNEL, 0);
  401456:	462a      	mov	r2, r5
  401458:	4629      	mov	r1, r5
  40145a:	4630      	mov	r0, r6
  40145c:	4b0e      	ldr	r3, [pc, #56]	; (401498 <PWM_Init+0xb4>)
  40145e:	4798      	blx	r3
	//Enable PWM output
	pwm_channel_enable(PWM0, PWM_LED_CHANNEL);
  401460:	4629      	mov	r1, r5
  401462:	4630      	mov	r0, r6
  401464:	4b0d      	ldr	r3, [pc, #52]	; (40149c <PWM_Init+0xb8>)
  401466:	4798      	blx	r3
}
  401468:	b004      	add	sp, #16
  40146a:	bd70      	pop	{r4, r5, r6, pc}
  40146c:	00401dcd 	.word	0x00401dcd
  401470:	004010a5 	.word	0x004010a5
  401474:	00401081 	.word	0x00401081
  401478:	400e0e00 	.word	0x400e0e00
  40147c:	40020000 	.word	0x40020000
  401480:	004012dd 	.word	0x004012dd
  401484:	0003e418 	.word	0x0003e418
  401488:	044aa200 	.word	0x044aa200
  40148c:	00401109 	.word	0x00401109
  401490:	204538cc 	.word	0x204538cc
  401494:	0040114d 	.word	0x0040114d
  401498:	004012e7 	.word	0x004012e7
  40149c:	004012d3 	.word	0x004012d3

004014a0 <Enable_Clock_Management1>:
#include "PYTHON480.h"


// Configure clock management blocks, activate clock generation and distribution circuits
void Enable_Clock_Management1() 
{
  4014a0:	b510      	push	{r4, lr}
	SPI_Write(2, 0x0000);	// Monochrome sensor
  4014a2:	2100      	movs	r1, #0
  4014a4:	2002      	movs	r0, #2
  4014a6:	4c0e      	ldr	r4, [pc, #56]	; (4014e0 <Enable_Clock_Management1+0x40>)
  4014a8:	47a0      	blx	r4
	SPI_Write(17, 0x2113);	// Configure PLL
  4014aa:	f242 1113 	movw	r1, #8467	; 0x2113
  4014ae:	2011      	movs	r0, #17
  4014b0:	47a0      	blx	r4
	SPI_Write(20, 0x0000);	// Configure clock management
  4014b2:	2100      	movs	r1, #0
  4014b4:	2014      	movs	r0, #20
  4014b6:	47a0      	blx	r4
	SPI_Write(26, 0x2280);	// Configure PLL lock detector
  4014b8:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  4014bc:	201a      	movs	r0, #26
  4014be:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);	// Configure PLL lock detector
  4014c0:	f643 512d 	movw	r1, #15661	; 0x3d2d
  4014c4:	201b      	movs	r0, #27
  4014c6:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7014|0x0008);	// SPI_Write(32, 0x2004); PLL input clock
  4014c8:	f247 011c 	movw	r1, #28700	; 0x701c
  4014cc:	2020      	movs	r0, #32
  4014ce:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7014);			// SPI_Write(32, 0x2004); PLL input clock
		SPI_Write(32, 0x7014|0x0008);			// SPI_Write(32, 0x2004); PLL input clock
	#endif
	
	SPI_Write(8, 0x0000);	// Release PLL soft reset
  4014d0:	2100      	movs	r1, #0
  4014d2:	2008      	movs	r0, #8
  4014d4:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(16, 0x0007);			// Disable PLL
  4014d6:	2107      	movs	r1, #7
  4014d8:	2010      	movs	r0, #16
  4014da:	47a0      	blx	r4
  4014dc:	bd10      	pop	{r4, pc}
  4014de:	bf00      	nop
  4014e0:	00401a25 	.word	0x00401a25

004014e4 <Enable_Clock_Management2>:
	#endif
}

// Enable internal clock distribution
void Enable_Clock_Management2() 
{
  4014e4:	b510      	push	{r4, lr}
	SPI_Write(9, 0x0000);	// Release clock generator Soft Reset
  4014e6:	2100      	movs	r1, #0
  4014e8:	2009      	movs	r0, #9
  4014ea:	4c05      	ldr	r4, [pc, #20]	; (401500 <Enable_Clock_Management2+0x1c>)
  4014ec:	47a0      	blx	r4

	// Why is it 0x7006 instead of 0x2006??
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7006|0x0008);		// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
  4014ee:	f247 010e 	movw	r1, #28686	; 0x700e
  4014f2:	2020      	movs	r0, #32
  4014f4:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7006);				// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
		SPI_Write(32, 0x7006|0x0008);				// SPI_Write(32, 0x7006); Enable logic clock. Changed this to 7006 to try
	#endif

	SPI_Write(34, 0x0001);	// Enable logic blocks
  4014f6:	2101      	movs	r1, #1
  4014f8:	2022      	movs	r0, #34	; 0x22
  4014fa:	47a0      	blx	r4
  4014fc:	bd10      	pop	{r4, pc}
  4014fe:	bf00      	nop
  401500:	00401a25 	.word	0x00401a25

00401504 <Required_Uploads>:
}

// Reserved register settings uploads
void Required_Uploads() 
{
  401504:	b510      	push	{r4, lr}
	SPI_Write(2, 0x0000);
  401506:	2100      	movs	r1, #0
  401508:	2002      	movs	r0, #2
  40150a:	4ccd      	ldr	r4, [pc, #820]	; (401840 <Required_Uploads+0x33c>)
  40150c:	47a0      	blx	r4
	SPI_Write(8, 0x0000);
  40150e:	2100      	movs	r1, #0
  401510:	2008      	movs	r0, #8
  401512:	47a0      	blx	r4
	SPI_Write(9, 0x0000);
  401514:	2100      	movs	r1, #0
  401516:	2009      	movs	r0, #9
  401518:	47a0      	blx	r4
	SPI_Write(10, 0x0000);
  40151a:	2100      	movs	r1, #0
  40151c:	200a      	movs	r0, #10
  40151e:	47a0      	blx	r4
	SPI_Write(20, 0x0000);
  401520:	2100      	movs	r1, #0
  401522:	2014      	movs	r0, #20
  401524:	47a0      	blx	r4
	// SPI_Write(24, 0x0001);
	SPI_Write(26, 0x2280);
  401526:	f44f 510a 	mov.w	r1, #8832	; 0x2280
  40152a:	201a      	movs	r0, #26
  40152c:	47a0      	blx	r4
	SPI_Write(27, 0x3D2D);
  40152e:	f643 512d 	movw	r1, #15661	; 0x3d2d
  401532:	201b      	movs	r0, #27
  401534:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);
  401536:	f247 010f 	movw	r1, #28687	; 0x700f
  40153a:	2020      	movs	r0, #32
  40153c:	47a0      	blx	r4
	#else
//		SPI_Write(32, 0x7007);
		SPI_Write(32, 0x7007|0x0008);
	#endif
	
	SPI_Write(34, 0x0001);
  40153e:	2101      	movs	r1, #1
  401540:	2022      	movs	r0, #34	; 0x22
  401542:	47a0      	blx	r4
	SPI_Write(40, 0x0007);		// 3rd bit enables bias. This was set to 0 (0x003).
  401544:	2107      	movs	r1, #7
  401546:	2028      	movs	r0, #40	; 0x28
  401548:	47a0      	blx	r4
	SPI_Write(41, 0x085F);
  40154a:	f640 015f 	movw	r1, #2143	; 0x85f
  40154e:	2029      	movs	r0, #41	; 0x29
  401550:	47a0      	blx	r4
	SPI_Write(42, 0x4103);
  401552:	f244 1103 	movw	r1, #16643	; 0x4103
  401556:	202a      	movs	r0, #42	; 0x2a
  401558:	47a0      	blx	r4
	SPI_Write(43, 0x0518);
  40155a:	f44f 61a3 	mov.w	r1, #1304	; 0x518
  40155e:	202b      	movs	r0, #43	; 0x2b
  401560:	47a0      	blx	r4
	SPI_Write(48, 0x0001);
  401562:	2101      	movs	r1, #1
  401564:	2030      	movs	r0, #48	; 0x30
  401566:	47a0      	blx	r4
	SPI_Write(64, 0x0001);
  401568:	2101      	movs	r1, #1
  40156a:	2040      	movs	r0, #64	; 0x40
  40156c:	47a0      	blx	r4
	SPI_Write(65, 0x382A);		// Bias block. SPI_Write(65, 0x382B)
  40156e:	f643 012a 	movw	r1, #14378	; 0x382a
  401572:	2041      	movs	r0, #65	; 0x41
  401574:	47a0      	blx	r4
	SPI_Write(66, 0x53C8);
  401576:	f245 31c8 	movw	r1, #21448	; 0x53c8
  40157a:	2042      	movs	r0, #66	; 0x42
  40157c:	47a0      	blx	r4
	SPI_Write(67, 0x0665);
  40157e:	f240 6165 	movw	r1, #1637	; 0x665
  401582:	2043      	movs	r0, #67	; 0x43
  401584:	47a0      	blx	r4
	SPI_Write(68, 0x0085);
  401586:	2185      	movs	r1, #133	; 0x85
  401588:	2044      	movs	r0, #68	; 0x44
  40158a:	47a0      	blx	r4
	SPI_Write(69, 0x0888);
  40158c:	f640 0188 	movw	r1, #2184	; 0x888
  401590:	2045      	movs	r0, #69	; 0x45
  401592:	47a0      	blx	r4
	SPI_Write(70, 0x4800);
  401594:	f44f 4190 	mov.w	r1, #18432	; 0x4800
  401598:	2046      	movs	r0, #70	; 0x46
  40159a:	47a0      	blx	r4
	SPI_Write(71, 0x8888);
  40159c:	f648 0188 	movw	r1, #34952	; 0x8888
  4015a0:	2047      	movs	r0, #71	; 0x47
  4015a2:	47a0      	blx	r4
	SPI_Write(72, 0x0117);
  4015a4:	f240 1117 	movw	r1, #279	; 0x117
  4015a8:	2048      	movs	r0, #72	; 0x48
  4015aa:	47a0      	blx	r4
	// SPI_Write(112, 0x0007);
	SPI_Write(112, 0x0000);		// LVDS power-down config
  4015ac:	2100      	movs	r1, #0
  4015ae:	2070      	movs	r0, #112	; 0x70
  4015b0:	47a0      	blx	r4
	SPI_Write(128, 0x470A);		//SPI_Write(128, 0x470A); SPI_Write(128, 0x4714); black offset
  4015b2:	f244 710a 	movw	r1, #18186	; 0x470a
  4015b6:	2080      	movs	r0, #128	; 0x80
  4015b8:	47a0      	blx	r4
	SPI_Write(129, 0x8001);
  4015ba:	f248 0101 	movw	r1, #32769	; 0x8001
  4015be:	2081      	movs	r0, #129	; 0x81
  4015c0:	47a0      	blx	r4
	// SPI_Write(130, 0x0001);	// Handles phase of pixel clock changed from 0x0001 to 0x0015

	// Test Pattern
	// SPI_Write(144,0x0003);

	SPI_Write(130, 0x0015);
  4015c2:	2115      	movs	r1, #21
  4015c4:	2082      	movs	r0, #130	; 0x82
  4015c6:	47a0      	blx	r4
	SPI_Write(192, 0x0801);		// Monitor select function
  4015c8:	f640 0101 	movw	r1, #2049	; 0x801
  4015cc:	20c0      	movs	r0, #192	; 0xc0
  4015ce:	47a0      	blx	r4
	SPI_Write(194, 0x03E4);		// reverse x and y enabled for demo kit compatibility
  4015d0:	f44f 7179 	mov.w	r1, #996	; 0x3e4
  4015d4:	20c2      	movs	r0, #194	; 0xc2
  4015d6:	47a0      	blx	r4
	SPI_Write(197, 0x0380);		// Num black lines SPI_Write(197, 0x030A);
  4015d8:	f44f 7160 	mov.w	r1, #896	; 0x380
  4015dc:	20c5      	movs	r0, #197	; 0xc5
  4015de:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(199, 167);		// Exposure/Frame rate config, SPI_Write(199, 0x0299);	// Why is this not 666?? --> Python divides input clock by 4 and then uses PLL to multiply by 4 again
  4015e0:	21a7      	movs	r1, #167	; 0xa7
  4015e2:	20c7      	movs	r0, #199	; 0xc7
  4015e4:	47a0      	blx	r4
		SPI_Write(200, 5000);	// Frame length, SPI_Write(200, 0x0350);
  4015e6:	f241 3188 	movw	r1, #5000	; 0x1388
  4015ea:	20c8      	movs	r0, #200	; 0xc8
  4015ec:	47a0      	blx	r4
		SPI_Write(201, 4900);	// SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
  4015ee:	f241 3124 	movw	r1, #4900	; 0x1324
  4015f2:	20c9      	movs	r0, #201	; 0xc9
  4015f4:	47a0      	blx	r4
		SPI_Write(199, 666);		// Exposure/Frame rate config, SPI_Write(199, 0x0299);
		SPI_Write(200, 3000);	// Frame length, SPI_Write(200, 0x0350);
		SPI_Write(201, 2900);	// SPI_Write(201, 2900); // Exposure time SPI_Write(201, 0x01F4);
	#endif
	
	SPI_Write(204, 0x0024); 	// (gain 1x : 0x00E1 // gain 2x : 0x00E4 // gain 3.5x : 0x0024)
  4015f6:	2124      	movs	r1, #36	; 0x24
  4015f8:	20cc      	movs	r0, #204	; 0xcc
  4015fa:	47a0      	blx	r4
	SPI_Write(207, 0x0014);
  4015fc:	2114      	movs	r1, #20
  4015fe:	20cf      	movs	r0, #207	; 0xcf
  401600:	47a0      	blx	r4
	SPI_Write(214, 0x0100);
  401602:	f44f 7180 	mov.w	r1, #256	; 0x100
  401606:	20d6      	movs	r0, #214	; 0xd6
  401608:	47a0      	blx	r4
	SPI_Write(215, 0x101F);
  40160a:	f241 011f 	movw	r1, #4127	; 0x101f
  40160e:	20d7      	movs	r0, #215	; 0xd7
  401610:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  401612:	2100      	movs	r1, #0
  401614:	20d8      	movs	r0, #216	; 0xd8
  401616:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  401618:	2123      	movs	r1, #35	; 0x23
  40161a:	20db      	movs	r0, #219	; 0xdb
  40161c:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  40161e:	f643 412b 	movw	r1, #15403	; 0x3c2b
  401622:	20dc      	movs	r0, #220	; 0xdc
  401624:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  401626:	f642 314d 	movw	r1, #11085	; 0x2b4d
  40162a:	20dd      	movs	r0, #221	; 0xdd
  40162c:	47a0      	blx	r4
	SPI_Write(224, 0x3E5E);
  40162e:	f643 615e 	movw	r1, #15966	; 0x3e5e
  401632:	20e0      	movs	r0, #224	; 0xe0
  401634:	47a0      	blx	r4
	SPI_Write(211, 0x0049);
  401636:	2149      	movs	r1, #73	; 0x49
  401638:	20d3      	movs	r0, #211	; 0xd3
  40163a:	47a0      	blx	r4
	SPI_Write(216, 0x0000);
  40163c:	2100      	movs	r1, #0
  40163e:	20d8      	movs	r0, #216	; 0xd8
  401640:	47a0      	blx	r4
	SPI_Write(219, 0x0023);
  401642:	2123      	movs	r1, #35	; 0x23
  401644:	20db      	movs	r0, #219	; 0xdb
  401646:	47a0      	blx	r4
	SPI_Write(220, 0x3C2B);
  401648:	f643 412b 	movw	r1, #15403	; 0x3c2b
  40164c:	20dc      	movs	r0, #220	; 0xdc
  40164e:	47a0      	blx	r4
	SPI_Write(221, 0x2B4D);
  401650:	f642 314d 	movw	r1, #11085	; 0x2b4d
  401654:	20dd      	movs	r0, #221	; 0xdd
  401656:	47a0      	blx	r4
	SPI_Write(230, 0x0299);
  401658:	f240 2199 	movw	r1, #665	; 0x299
  40165c:	20e6      	movs	r0, #230	; 0xe6
  40165e:	47a0      	blx	r4
	SPI_Write(231, 0x0350);
  401660:	f44f 7154 	mov.w	r1, #848	; 0x350
  401664:	20e7      	movs	r0, #231	; 0xe7
  401666:	47a0      	blx	r4
	SPI_Write(232, 0x01F4);
  401668:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  40166c:	20e8      	movs	r0, #232	; 0xe8
  40166e:	47a0      	blx	r4
	SPI_Write(235, 0x00E1);
  401670:	21e1      	movs	r1, #225	; 0xe1
  401672:	20eb      	movs	r0, #235	; 0xeb
  401674:	47a0      	blx	r4


	
	// PROGRAM SPACE //
	SPI_Write(384, 0xC800);
  401676:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40167a:	f44f 70c0 	mov.w	r0, #384	; 0x180
  40167e:	47a0      	blx	r4
	SPI_Write(385, 0xFB1F);
  401680:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  401684:	f240 1081 	movw	r0, #385	; 0x181
  401688:	47a0      	blx	r4
	SPI_Write(386, 0xFB1F);
  40168a:	f64f 311f 	movw	r1, #64287	; 0xfb1f
  40168e:	f44f 70c1 	mov.w	r0, #386	; 0x182
  401692:	47a0      	blx	r4
	SPI_Write(387, 0xFB12);
  401694:	f64f 3112 	movw	r1, #64274	; 0xfb12
  401698:	f240 1083 	movw	r0, #387	; 0x183
  40169c:	47a0      	blx	r4
	SPI_Write(388, 0xF912);
  40169e:	f64f 1112 	movw	r1, #63762	; 0xf912
  4016a2:	f44f 70c2 	mov.w	r0, #388	; 0x184
  4016a6:	47a0      	blx	r4
	SPI_Write(389, 0xF903);
  4016a8:	f64f 1103 	movw	r1, #63747	; 0xf903
  4016ac:	f240 1085 	movw	r0, #389	; 0x185
  4016b0:	47a0      	blx	r4
	SPI_Write(390, 0xF802);
  4016b2:	f64f 0102 	movw	r1, #63490	; 0xf802
  4016b6:	f44f 70c3 	mov.w	r0, #390	; 0x186
  4016ba:	47a0      	blx	r4
	SPI_Write(391, 0xF30F);
  4016bc:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4016c0:	f240 1087 	movw	r0, #391	; 0x187
  4016c4:	47a0      	blx	r4
	SPI_Write(392, 0xF30F);
  4016c6:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4016ca:	f44f 70c4 	mov.w	r0, #392	; 0x188
  4016ce:	47a0      	blx	r4
	SPI_Write(393, 0xF30F);
  4016d0:	f24f 310f 	movw	r1, #62223	; 0xf30f
  4016d4:	f240 1089 	movw	r0, #393	; 0x189
  4016d8:	47a0      	blx	r4
	SPI_Write(394, 0xF30A);
  4016da:	f24f 310a 	movw	r1, #62218	; 0xf30a
  4016de:	f44f 70c5 	mov.w	r0, #394	; 0x18a
  4016e2:	47a0      	blx	r4
	SPI_Write(395, 0xF101);
  4016e4:	f24f 1101 	movw	r1, #61697	; 0xf101
  4016e8:	f240 108b 	movw	r0, #395	; 0x18b
  4016ec:	47a0      	blx	r4
	SPI_Write(396, 0xF00A);
  4016ee:	f24f 010a 	movw	r1, #61450	; 0xf00a
  4016f2:	f44f 70c6 	mov.w	r0, #396	; 0x18c
  4016f6:	47a0      	blx	r4
	SPI_Write(397, 0xF24B);
  4016f8:	f24f 214b 	movw	r1, #62027	; 0xf24b
  4016fc:	f240 108d 	movw	r0, #397	; 0x18d
  401700:	47a0      	blx	r4
	SPI_Write(398, 0xF201);
  401702:	f24f 2101 	movw	r1, #61953	; 0xf201
  401706:	f44f 70c7 	mov.w	r0, #398	; 0x18e
  40170a:	47a0      	blx	r4
	SPI_Write(399, 0xF226);
  40170c:	f24f 2126 	movw	r1, #61990	; 0xf226
  401710:	f240 108f 	movw	r0, #399	; 0x18f
  401714:	47a0      	blx	r4
	SPI_Write(400, 0xF021);
  401716:	f24f 0121 	movw	r1, #61473	; 0xf021
  40171a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40171e:	47a0      	blx	r4
	SPI_Write(401, 0xF001);
  401720:	f24f 0101 	movw	r1, #61441	; 0xf001
  401724:	f240 1091 	movw	r0, #401	; 0x191
  401728:	47a0      	blx	r4
	SPI_Write(402, 0xF402);
  40172a:	f24f 4102 	movw	r1, #62466	; 0xf402
  40172e:	f44f 70c9 	mov.w	r0, #402	; 0x192
  401732:	47a0      	blx	r4
	SPI_Write(403, 0xF007);
  401734:	f24f 0107 	movw	r1, #61447	; 0xf007
  401738:	f240 1093 	movw	r0, #403	; 0x193
  40173c:	47a0      	blx	r4
	SPI_Write(404, 0xF20F);
  40173e:	f24f 210f 	movw	r1, #61967	; 0xf20f
  401742:	f44f 70ca 	mov.w	r0, #404	; 0x194
  401746:	47a0      	blx	r4
	SPI_Write(405, 0xF20F);
  401748:	f24f 210f 	movw	r1, #61967	; 0xf20f
  40174c:	f240 1095 	movw	r0, #405	; 0x195
  401750:	47a0      	blx	r4
	SPI_Write(406, 0xF202);
  401752:	f24f 2102 	movw	r1, #61954	; 0xf202
  401756:	f44f 70cb 	mov.w	r0, #406	; 0x196
  40175a:	47a0      	blx	r4
	SPI_Write(407, 0xF006);
  40175c:	f24f 0106 	movw	r1, #61446	; 0xf006
  401760:	f240 1097 	movw	r0, #407	; 0x197
  401764:	47a0      	blx	r4
	SPI_Write(408, 0xEC08);
  401766:	f64e 4108 	movw	r1, #60424	; 0xec08
  40176a:	f44f 70cc 	mov.w	r0, #408	; 0x198
  40176e:	47a0      	blx	r4
	SPI_Write(409, 0xC801);
  401770:	f64c 0101 	movw	r1, #51201	; 0xc801
  401774:	f240 1099 	movw	r0, #409	; 0x199
  401778:	47a0      	blx	r4
	SPI_Write(410, 0xC800);
  40177a:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  40177e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
  401782:	47a0      	blx	r4

	SPI_Write(419, 0xC800);
  401784:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  401788:	f240 10a3 	movw	r0, #419	; 0x1a3
  40178c:	47a0      	blx	r4
	SPI_Write(420, 0xCC02);
  40178e:	f64c 4102 	movw	r1, #52226	; 0xcc02
  401792:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
  401796:	47a0      	blx	r4
	SPI_Write(421, 0xCC01);
  401798:	f64c 4101 	movw	r1, #52225	; 0xcc01
  40179c:	f240 10a5 	movw	r0, #421	; 0x1a5
  4017a0:	47a0      	blx	r4
	SPI_Write(422, 0xCC02);
  4017a2:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4017a6:	f44f 70d3 	mov.w	r0, #422	; 0x1a6
  4017aa:	47a0      	blx	r4
	SPI_Write(423, 0xCC01);
  4017ac:	f64c 4101 	movw	r1, #52225	; 0xcc01
  4017b0:	f240 10a7 	movw	r0, #423	; 0x1a7
  4017b4:	47a0      	blx	r4
	SPI_Write(424, 0xCC02);
  4017b6:	f64c 4102 	movw	r1, #52226	; 0xcc02
  4017ba:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
  4017be:	47a0      	blx	r4
	SPI_Write(425, 0xC805);
  4017c0:	f64c 0105 	movw	r1, #51205	; 0xc805
  4017c4:	f240 10a9 	movw	r0, #425	; 0x1a9
  4017c8:	47a0      	blx	r4
	SPI_Write(426, 0xC800);
  4017ca:	f44f 4148 	mov.w	r1, #51200	; 0xc800
  4017ce:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
  4017d2:	47a0      	blx	r4

	SPI_Write(427, 0x0030);
  4017d4:	2130      	movs	r1, #48	; 0x30
  4017d6:	f240 10ab 	movw	r0, #427	; 0x1ab
  4017da:	47a0      	blx	r4
	SPI_Write(428, 0x207B);
  4017dc:	f242 017b 	movw	r1, #8315	; 0x207b
  4017e0:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
  4017e4:	47a0      	blx	r4
	SPI_Write(429, 0x2071);
  4017e6:	f242 0171 	movw	r1, #8305	; 0x2071
  4017ea:	f240 10ad 	movw	r0, #429	; 0x1ad
  4017ee:	47a0      	blx	r4
	SPI_Write(430, 0x0071);
  4017f0:	2171      	movs	r1, #113	; 0x71
  4017f2:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
  4017f6:	47a0      	blx	r4
	SPI_Write(431, 0x107F);
  4017f8:	f241 017f 	movw	r1, #4223	; 0x107f
  4017fc:	f240 10af 	movw	r0, #431	; 0x1af
  401800:	47a0      	blx	r4
	SPI_Write(432, 0x1072);
  401802:	f241 0172 	movw	r1, #4210	; 0x1072
  401806:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
  40180a:	47a0      	blx	r4
	SPI_Write(433, 0x1074);
  40180c:	f241 0174 	movw	r1, #4212	; 0x1074
  401810:	f240 10b1 	movw	r0, #433	; 0x1b1
  401814:	47a0      	blx	r4
	SPI_Write(434, 0x0071);
  401816:	2171      	movs	r1, #113	; 0x71
  401818:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
  40181c:	47a0      	blx	r4
	SPI_Write(435, 0x0031);
  40181e:	2131      	movs	r1, #49	; 0x31
  401820:	f240 10b3 	movw	r0, #435	; 0x1b3
  401824:	47a0      	blx	r4
	SPI_Write(436, 0x21BB);
  401826:	f242 11bb 	movw	r1, #8635	; 0x21bb
  40182a:	f44f 70da 	mov.w	r0, #436	; 0x1b4
  40182e:	47a0      	blx	r4
	SPI_Write(437, 0x20B1);
  401830:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401834:	f240 10b5 	movw	r0, #437	; 0x1b5
  401838:	47a0      	blx	r4
	SPI_Write(438, 0x00B1);
  40183a:	21b1      	movs	r1, #177	; 0xb1
  40183c:	e002      	b.n	401844 <Required_Uploads+0x340>
  40183e:	bf00      	nop
  401840:	00401a25 	.word	0x00401a25
  401844:	f44f 70db 	mov.w	r0, #438	; 0x1b6
  401848:	47a0      	blx	r4
	SPI_Write(439, 0x10BF);
  40184a:	f241 01bf 	movw	r1, #4287	; 0x10bf
  40184e:	f240 10b7 	movw	r0, #439	; 0x1b7
  401852:	47a0      	blx	r4
	SPI_Write(440, 0x10B2);
  401854:	f241 01b2 	movw	r1, #4274	; 0x10b2
  401858:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
  40185c:	47a0      	blx	r4
	SPI_Write(441, 0x10B4);
  40185e:	f241 01b4 	movw	r1, #4276	; 0x10b4
  401862:	f240 10b9 	movw	r0, #441	; 0x1b9
  401866:	47a0      	blx	r4
	SPI_Write(442, 0x00B1);
  401868:	21b1      	movs	r1, #177	; 0xb1
  40186a:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
  40186e:	47a0      	blx	r4
	SPI_Write(443, 0x0030);
  401870:	2130      	movs	r1, #48	; 0x30
  401872:	f240 10bb 	movw	r0, #443	; 0x1bb
  401876:	47a0      	blx	r4

	SPI_Write(444, 0x0030);
  401878:	2130      	movs	r1, #48	; 0x30
  40187a:	f44f 70de 	mov.w	r0, #444	; 0x1bc
  40187e:	47a0      	blx	r4
	SPI_Write(445, 0x217B);
  401880:	f242 117b 	movw	r1, #8571	; 0x217b
  401884:	f240 10bd 	movw	r0, #445	; 0x1bd
  401888:	47a0      	blx	r4
	SPI_Write(446, 0x2071);
  40188a:	f242 0171 	movw	r1, #8305	; 0x2071
  40188e:	f44f 70df 	mov.w	r0, #446	; 0x1be
  401892:	47a0      	blx	r4
	SPI_Write(447, 0x0071);
  401894:	2171      	movs	r1, #113	; 0x71
  401896:	f240 10bf 	movw	r0, #447	; 0x1bf
  40189a:	47a0      	blx	r4
	SPI_Write(448, 0x107F);
  40189c:	f241 017f 	movw	r1, #4223	; 0x107f
  4018a0:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
  4018a4:	47a0      	blx	r4
	SPI_Write(449, 0x1072);
  4018a6:	f241 0172 	movw	r1, #4210	; 0x1072
  4018aa:	f240 10c1 	movw	r0, #449	; 0x1c1
  4018ae:	47a0      	blx	r4
	SPI_Write(450, 0x1074);
  4018b0:	f241 0174 	movw	r1, #4212	; 0x1074
  4018b4:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
  4018b8:	47a0      	blx	r4
	SPI_Write(451, 0x0071);
  4018ba:	2171      	movs	r1, #113	; 0x71
  4018bc:	f240 10c3 	movw	r0, #451	; 0x1c3
  4018c0:	47a0      	blx	r4
	SPI_Write(452, 0x0031);
  4018c2:	2131      	movs	r1, #49	; 0x31
  4018c4:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
  4018c8:	47a0      	blx	r4
	SPI_Write(453, 0x21BB);
  4018ca:	f242 11bb 	movw	r1, #8635	; 0x21bb
  4018ce:	f240 10c5 	movw	r0, #453	; 0x1c5
  4018d2:	47a0      	blx	r4
	SPI_Write(454, 0x20B1);
  4018d4:	f242 01b1 	movw	r1, #8369	; 0x20b1
  4018d8:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
  4018dc:	47a0      	blx	r4
	SPI_Write(455, 0x00B1);
  4018de:	21b1      	movs	r1, #177	; 0xb1
  4018e0:	f240 10c7 	movw	r0, #455	; 0x1c7
  4018e4:	47a0      	blx	r4
	SPI_Write(456, 0x10BF);
  4018e6:	f241 01bf 	movw	r1, #4287	; 0x10bf
  4018ea:	f44f 70e4 	mov.w	r0, #456	; 0x1c8
  4018ee:	47a0      	blx	r4
	SPI_Write(457, 0x10B2);
  4018f0:	f241 01b2 	movw	r1, #4274	; 0x10b2
  4018f4:	f240 10c9 	movw	r0, #457	; 0x1c9
  4018f8:	47a0      	blx	r4
	SPI_Write(458, 0x10B4);
  4018fa:	f241 01b4 	movw	r1, #4276	; 0x10b4
  4018fe:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
  401902:	47a0      	blx	r4
	SPI_Write(459, 0x00B1);
  401904:	21b1      	movs	r1, #177	; 0xb1
  401906:	f240 10cb 	movw	r0, #459	; 0x1cb
  40190a:	47a0      	blx	r4
	SPI_Write(460, 0x0030);
  40190c:	2130      	movs	r1, #48	; 0x30
  40190e:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  401912:	47a0      	blx	r4

	SPI_Write(461, 0x0030);
  401914:	2130      	movs	r1, #48	; 0x30
  401916:	f240 10cd 	movw	r0, #461	; 0x1cd
  40191a:	47a0      	blx	r4
	SPI_Write(462, 0x217B);
  40191c:	f242 117b 	movw	r1, #8571	; 0x217b
  401920:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
  401924:	47a0      	blx	r4
	SPI_Write(463, 0x2071);
  401926:	f242 0171 	movw	r1, #8305	; 0x2071
  40192a:	f240 10cf 	movw	r0, #463	; 0x1cf
  40192e:	47a0      	blx	r4
	SPI_Write(464, 0x0071);
  401930:	2171      	movs	r1, #113	; 0x71
  401932:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
  401936:	47a0      	blx	r4
	SPI_Write(465, 0x1071);
  401938:	f241 0171 	movw	r1, #4209	; 0x1071
  40193c:	f240 10d1 	movw	r0, #465	; 0x1d1
  401940:	47a0      	blx	r4
	SPI_Write(466, 0x0071);
  401942:	2171      	movs	r1, #113	; 0x71
  401944:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
  401948:	47a0      	blx	r4
	SPI_Write(467, 0x0031);
  40194a:	2131      	movs	r1, #49	; 0x31
  40194c:	f240 10d3 	movw	r0, #467	; 0x1d3
  401950:	47a0      	blx	r4
	SPI_Write(468, 0x21BB);
  401952:	f242 11bb 	movw	r1, #8635	; 0x21bb
  401956:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
  40195a:	47a0      	blx	r4
	SPI_Write(469, 0x20B1);
  40195c:	f242 01b1 	movw	r1, #8369	; 0x20b1
  401960:	f240 10d5 	movw	r0, #469	; 0x1d5
  401964:	47a0      	blx	r4
	SPI_Write(470, 0x00B1);
  401966:	21b1      	movs	r1, #177	; 0xb1
  401968:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
  40196c:	47a0      	blx	r4
	SPI_Write(471, 0x10B3);
  40196e:	f241 01b3 	movw	r1, #4275	; 0x10b3
  401972:	f240 10d7 	movw	r0, #471	; 0x1d7
  401976:	47a0      	blx	r4
	SPI_Write(472, 0x10B1);
  401978:	f241 01b1 	movw	r1, #4273	; 0x10b1
  40197c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
  401980:	47a0      	blx	r4
	SPI_Write(473, 0x00B1);
  401982:	21b1      	movs	r1, #177	; 0xb1
  401984:	f240 10d9 	movw	r0, #473	; 0x1d9
  401988:	47a0      	blx	r4
	SPI_Write(474, 0x003F);
  40198a:	213f      	movs	r1, #63	; 0x3f
  40198c:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  401990:	47a0      	blx	r4
	SPI_Write(475, 0x0032);
  401992:	2132      	movs	r1, #50	; 0x32
  401994:	f240 10db 	movw	r0, #475	; 0x1db
  401998:	47a0      	blx	r4
	SPI_Write(476, 0x0030);
  40199a:	2130      	movs	r1, #48	; 0x30
  40199c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
  4019a0:	47a0      	blx	r4
  4019a2:	bd10      	pop	{r4, pc}

004019a4 <Soft_PowerUp>:
}

// Internal blocks are enabled and prepared to start processing the image data stream
void Soft_PowerUp() 
{
  4019a4:	b510      	push	{r4, lr}
	SPI_Write(10, 0x0000);		// Release soft reset state
  4019a6:	2100      	movs	r1, #0
  4019a8:	200a      	movs	r0, #10
  4019aa:	4c0d      	ldr	r4, [pc, #52]	; (4019e0 <Soft_PowerUp+0x3c>)
  4019ac:	47a0      	blx	r4
	
	#ifdef DISABLE_PLL
		SPI_Write(32, 0x7007|0x0008);	// Enable analog clock
  4019ae:	f247 010f 	movw	r1, #28687	; 0x700f
  4019b2:	2020      	movs	r0, #32
  4019b4:	47a0      	blx	r4
	#else
		SPI_Write(32, 0x7007);			// Enable analog clock
	#endif
	
	SPI_Write(40, 0x0007);		// Enable column multiplexer // 3rd bit endables bias. This was set to 0 (0x003).
  4019b6:	2107      	movs	r1, #7
  4019b8:	2028      	movs	r0, #40	; 0x28
  4019ba:	47a0      	blx	r4
	SPI_Write(42, 0x4113);		// SPI_Write(42, 0x4103); Configure image core
  4019bc:	f244 1113 	movw	r1, #16659	; 0x4113
  4019c0:	202a      	movs	r0, #42	; 0x2a
  4019c2:	47a0      	blx	r4
	SPI_Write(48, 0x0001);		// Enable AFE
  4019c4:	2101      	movs	r1, #1
  4019c6:	2030      	movs	r0, #48	; 0x30
  4019c8:	47a0      	blx	r4
	SPI_Write(64, 0x0001);		// Enable biasing block
  4019ca:	2101      	movs	r1, #1
  4019cc:	2040      	movs	r0, #64	; 0x40
  4019ce:	47a0      	blx	r4
	SPI_Write(72, 0x0127);		// SPI_Write(72, 0x0117); Enable charge pump.
  4019d0:	f240 1127 	movw	r1, #295	; 0x127
  4019d4:	2048      	movs	r0, #72	; 0x48
  4019d6:	47a0      	blx	r4
	//SPI_Write(112, 0x0007);	// Enable LVDS transmitters
	SPI_Write(112, 0x0000);		// Enable LVDS transmitters
  4019d8:	2100      	movs	r1, #0
  4019da:	2070      	movs	r0, #112	; 0x70
  4019dc:	47a0      	blx	r4
  4019de:	bd10      	pop	{r4, pc}
  4019e0:	00401a25 	.word	0x00401a25

004019e4 <Enable_Subsample>:
}

// Enable subsampling by taking every other pixel
void Enable_Subsample()
{
  4019e4:	b510      	push	{r4, lr}
	SPI_Write(192, 0x0803 | 0x0080);	// Subsampling
  4019e6:	f640 0183 	movw	r1, #2179	; 0x883
  4019ea:	20c0      	movs	r0, #192	; 0xc0
  4019ec:	4c03      	ldr	r4, [pc, #12]	; (4019fc <Enable_Subsample+0x18>)
  4019ee:	47a0      	blx	r4
	SPI_Write(194, 0x03E4 | 0x0C00);	// Subsampling mode in both x and y (Check VITA-compatibility)
  4019f0:	f640 71e4 	movw	r1, #4068	; 0xfe4
  4019f4:	20c2      	movs	r0, #194	; 0xc2
  4019f6:	47a0      	blx	r4
  4019f8:	bd10      	pop	{r4, pc}
  4019fa:	bf00      	nop
  4019fc:	00401a25 	.word	0x00401a25

00401a00 <ROI_Configuration>:
}

// Window Configuration
void ROI_Configuration()
	{
  401a00:	b510      	push	{r4, lr}
		
		// ROI0 config0
		// * default: 0xC900 (x_start 0x00, x_end 0xC9)
		// goes from 0 - 201
		// mind the subsampling
		SPI_Write(256, 0xC405);		// Take 20 pixels off from each side (each bit = 4 pxs) // Is it 8 pixels since subsampling??
  401a02:	f24c 4105 	movw	r1, #50181	; 0xc405
  401a06:	f44f 7080 	mov.w	r0, #256	; 0x100
  401a0a:	4c05      	ldr	r4, [pc, #20]	; (401a20 <ROI_Configuration+0x20>)
  401a0c:	47a0      	blx	r4
		
		// ROI0 config1
		// * default: 0x9700 (y_start 0x00, y_end 0x97)
		// goes from 0 - 151
		// mind the subsampling
		SPI_Write(257, 0x9502);		// take 8 pixels off from each side (each bit = 4 pxs)
  401a0e:	f249 5102 	movw	r1, #38146	; 0x9502
  401a12:	f240 1001 	movw	r0, #257	; 0x101
  401a16:	47a0      	blx	r4
		// bit 2 
		// SPI_Write(264, val);
		
		
		// Active ROI selection (195 vs 228??)
		SPI_Write(228, 0x0000);		// Choose ROI0
  401a18:	2100      	movs	r1, #0
  401a1a:	20e4      	movs	r0, #228	; 0xe4
  401a1c:	47a0      	blx	r4
  401a1e:	bd10      	pop	{r4, pc}
  401a20:	00401a25 	.word	0x00401a25

00401a24 <SPI_Write>:
#include "definitions.h"


// SPI_Write: writes value on a register of the slave
void SPI_Write(uint16_t reg, uint16_t val)
{
  401a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a28:	4604      	mov	r4, r0
  401a2a:	460d      	mov	r5, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a2c:	4f33      	ldr	r7, [pc, #204]	; (401afc <SPI_Write+0xd8>)
  401a2e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
  401a32:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	uint8_t count = 0;
	
	// ===== Open the communication line with Python480 ===== //

	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. Slave Select (SS) pin up
	delay_us(10);
  401a36:	20f3      	movs	r0, #243	; 0xf3
  401a38:	4e31      	ldr	r6, [pc, #196]	; (401b00 <SPI_Write+0xdc>)
  401a3a:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401a3c:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  401a40:	20f3      	movs	r0, #243	; 0xf3
  401a42:	47b0      	blx	r6
  401a44:	f04f 0b09 	mov.w	fp, #9
  401a48:	463e      	mov	r6, r7
  401a4a:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  401a4e:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  401a50:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  401a54:	4f2a      	ldr	r7, [pc, #168]	; (401b00 <SPI_Write+0xdc>)
  401a56:	e00f      	b.n	401a78 <SPI_Write+0x54>
  401a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401a5c:	6373      	str	r3, [r6, #52]	; 0x34
  401a5e:	4640      	mov	r0, r8
  401a60:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a62:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401a66:	4640      	mov	r0, r8
  401a68:	47b8      	blx	r7
		
		reg = reg << 1;							// 5. Move the next MSD to the top
  401a6a:	0064      	lsls	r4, r4, #1
  401a6c:	b2a4      	uxth	r4, r4
  401a6e:	f10b 33ff 	add.w	r3, fp, #4294967295
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD (Most Significant Digit) to LSD (Least)
  401a72:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
  401a76:	d008      	beq.n	401a8a <SPI_Write+0x66>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401a78:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  401a7c:	f414 7f80 	tst.w	r4, #256	; 0x100
  401a80:	d0ea      	beq.n	401a58 <SPI_Write+0x34>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401a86:	6333      	str	r3, [r6, #48]	; 0x30
  401a88:	e7e9      	b.n	401a5e <SPI_Write+0x3a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401a8a:	4c1c      	ldr	r4, [pc, #112]	; (401afc <SPI_Write+0xd8>)
  401a8c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  401a90:	6367      	str	r7, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401a92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401a96:	6323      	str	r3, [r4, #48]	; 0x30
	}
	
	// ===== Notify Python480 that it's a WRITE command ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 1);	// 2. MOSI up (Write Command)
	delay_us(10);
  401a98:	20f3      	movs	r0, #243	; 0xf3
  401a9a:	4e19      	ldr	r6, [pc, #100]	; (401b00 <SPI_Write+0xdc>)
  401a9c:	47b0      	blx	r6
  401a9e:	6327      	str	r7, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 3. Clock up
	delay_us(10);
  401aa0:	20f3      	movs	r0, #243	; 0xf3
  401aa2:	47b0      	blx	r6
  401aa4:	2410      	movs	r4, #16
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401aa6:	4e15      	ldr	r6, [pc, #84]	; (401afc <SPI_Write+0xd8>)
  401aa8:	46b9      	mov	r9, r7
  401aaa:	46ba      	mov	sl, r7
		}
		else										// If bit value 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  401aac:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  401ab0:	4f13      	ldr	r7, [pc, #76]	; (401b00 <SPI_Write+0xdc>)
  401ab2:	e00e      	b.n	401ad2 <SPI_Write+0xae>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ab4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401ab8:	6333      	str	r3, [r6, #48]	; 0x30
  401aba:	4640      	mov	r0, r8
  401abc:	47b8      	blx	r7
  401abe:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401ac2:	4640      	mov	r0, r8
  401ac4:	47b8      	blx	r7
		
		val = val << 1;							// 5. Move next MSD to the top
  401ac6:	006d      	lsls	r5, r5, #1
  401ac8:	b2ad      	uxth	r5, r5
  401aca:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
  401acc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401ad0:	d008      	beq.n	401ae4 <SPI_Write+0xc0>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401ad2:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (val & 0x8000)							// If bit value 1
  401ad6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401ada:	d1eb      	bne.n	401ab4 <SPI_Write+0x90>
  401adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401ae0:	6373      	str	r3, [r6, #52]	; 0x34
  401ae2:	e7ea      	b.n	401aba <SPI_Write+0x96>
  401ae4:	4c05      	ldr	r4, [pc, #20]	; (401afc <SPI_Write+0xd8>)
  401ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401aea:	6363      	str	r3, [r4, #52]	; 0x34
	}
	
	// ===== Shut down the communication line ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	delay_us(10);
  401aec:	20f3      	movs	r0, #243	; 0xf3
  401aee:	4b04      	ldr	r3, [pc, #16]	; (401b00 <SPI_Write+0xdc>)
  401af0:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401af6:	6323      	str	r3, [r4, #48]	; 0x30
  401af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401afc:	400e1400 	.word	0x400e1400
  401b00:	20400001 	.word	0x20400001

00401b04 <SPI_Read>:
	ioport_set_pin_level(SPI_BB_SS, 1);		// 2. Slave select high (de-select)
}


uint16_t SPI_Read(uint16_t reg)
{
  401b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b08:	4605      	mov	r5, r0
  401b0a:	4e33      	ldr	r6, [pc, #204]	; (401bd8 <SPI_Read+0xd4>)
  401b0c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  401b10:	6337      	str	r7, [r6, #48]	; 0x30
	uint8_t count = 0;
	uint16_t value = 0;
	
	// ===== Open the communication line with Python480 ===== //
	ioport_set_pin_level(SPI_BB_SS, 1);			// 1. Slave Select (SS) pin up
	delay_us(10);
  401b12:	20f3      	movs	r0, #243	; 0xf3
  401b14:	4c31      	ldr	r4, [pc, #196]	; (401bdc <SPI_Read+0xd8>)
  401b16:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b18:	6377      	str	r7, [r6, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SS, 0);			// 2. SS pin down (Open the channel)
	delay_us(10);
  401b1a:	20f3      	movs	r0, #243	; 0xf3
  401b1c:	47a0      	blx	r4
  401b1e:	2409      	movs	r4, #9
  401b20:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
  401b24:	46ca      	mov	sl, r9
		}
		else										// If 0
		{
			ioport_set_pin_level(SPI_BB_MOSI, 0);		// MOSI pin at 0
		}
		delay_us(10);
  401b26:	f04f 08f3 	mov.w	r8, #243	; 0xf3
  401b2a:	4f2c      	ldr	r7, [pc, #176]	; (401bdc <SPI_Read+0xd8>)
  401b2c:	e00e      	b.n	401b4c <SPI_Read+0x48>
  401b2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401b32:	6373      	str	r3, [r6, #52]	; 0x34
  401b34:	4640      	mov	r0, r8
  401b36:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b38:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30

		ioport_set_pin_level(SPI_BB_SCK, 1);	// 4. Clock up
		delay_us(10);
  401b3c:	4640      	mov	r0, r8
  401b3e:	47b8      	blx	r7

		reg = reg << 1;							// 5. Move the next MSD to the top
  401b40:	006d      	lsls	r5, r5, #1
  401b42:	b2ad      	uxth	r5, r5
  401b44:	1e63      	subs	r3, r4, #1
	for(count = 0; count < 9; ++count)			// 1. 9 bit address, going from MSD (Most Significant Digit) to LSD (Least)
  401b46:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401b4a:	d008      	beq.n	401b5e <SPI_Read+0x5a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b4c:	f8c6 a034 	str.w	sl, [r6, #52]	; 0x34
		if (reg & 0x100)							// If bit value 1 (0x100 is 1 0000 0000, so (if condition is 1 --> the MSD is 1))
  401b50:	f415 7f80 	tst.w	r5, #256	; 0x100
  401b54:	d0eb      	beq.n	401b2e <SPI_Read+0x2a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401b5a:	6333      	str	r3, [r6, #48]	; 0x30
  401b5c:	e7ea      	b.n	401b34 <SPI_Read+0x30>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b5e:	4c1e      	ldr	r4, [pc, #120]	; (401bd8 <SPI_Read+0xd4>)
  401b60:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  401b64:	6366      	str	r6, [r4, #52]	; 0x34
  401b66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401b6a:	6363      	str	r3, [r4, #52]	; 0x34
	}
	
	// ===== Notify Python480 that it's a READ command ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 1. Clock down
	ioport_set_pin_level(SPI_BB_MOSI, 0);	// 2. MOSI down (Read Command)
	delay_us(10);
  401b6c:	20f3      	movs	r0, #243	; 0xf3
  401b6e:	4d1b      	ldr	r5, [pc, #108]	; (401bdc <SPI_Read+0xd8>)
  401b70:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b72:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 3. Clock up
	delay_us(10);
  401b74:	20f3      	movs	r0, #243	; 0xf3
  401b76:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b78:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(SPI_BB_SCK, 0);	// 4. Clock down
	delay_us(10);
  401b7a:	20f3      	movs	r0, #243	; 0xf3
  401b7c:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b7e:	6326      	str	r6, [r4, #48]	; 0x30
	ioport_set_pin_level(SPI_BB_SCK, 1);	// 5. Clock up
	delay_us(10);
  401b80:	20f3      	movs	r0, #243	; 0xf3
  401b82:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b84:	6366      	str	r6, [r4, #52]	; 0x34
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	
	// ===== Receive the value coming in from Python480 ===== //
	for(count = 0; count < 16; ++count)			// 1. 16 bit value, going from MSD to LSD
	{
		ioport_set_pin_level(SPI_BB_SCK, 0);					// 2. Clock down
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  401b88:	f3c0 5800 	ubfx	r8, r0, #20, #1
		delay_us(10);
  401b8c:	20f3      	movs	r0, #243	; 0xf3
  401b8e:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b90:	6326      	str	r6, [r4, #48]	; 0x30
		
		ioport_set_pin_level(SPI_BB_SCK, 1);					// 4. Clock up
		delay_us(10);
  401b92:	20f3      	movs	r0, #243	; 0xf3
  401b94:	47a8      	blx	r5
  401b96:	240f      	movs	r4, #15
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b98:	4d0f      	ldr	r5, [pc, #60]	; (401bd8 <SPI_Read+0xd4>)
  401b9a:	4637      	mov	r7, r6
  401b9c:	636f      	str	r7, [r5, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401b9e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  401ba0:	f3c0 5000 	ubfx	r0, r0, #20, #1
		value |= (0x01 & ioport_get_pin_level(SPI_BB_MISO));	// 3. Put value into the next MSD (currently LSD)
  401ba4:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
  401ba8:	fa1f f880 	uxth.w	r8, r0
		delay_us(10);
  401bac:	20f3      	movs	r0, #243	; 0xf3
  401bae:	f8df 902c 	ldr.w	r9, [pc, #44]	; 401bdc <SPI_Read+0xd8>
  401bb2:	47c8      	blx	r9
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401bb4:	632e      	str	r6, [r5, #48]	; 0x30
		delay_us(10);
  401bb6:	20f3      	movs	r0, #243	; 0xf3
  401bb8:	47c8      	blx	r9
  401bba:	1e63      	subs	r3, r4, #1
		
		if (count == 15)						// 5. Don't move a bit up if we got all the data
  401bbc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  401bc0:	d1ec      	bne.n	401b9c <SPI_Read+0x98>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401bc2:	4b05      	ldr	r3, [pc, #20]	; (401bd8 <SPI_Read+0xd4>)
  401bc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401bc8:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401bce:	631a      	str	r2, [r3, #48]	; 0x30
	// ===== Finish communication with Python480 ===== //
	ioport_set_pin_level(SPI_BB_SCK, 0);		// 1. Clock down
	ioport_set_pin_level(SPI_BB_SS, 1);			// 2. Slave select up
	
	return value;
}
  401bd0:	4640      	mov	r0, r8
  401bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bd6:	bf00      	nop
  401bd8:	400e1400 	.word	0x400e1400
  401bdc:	20400001 	.word	0x20400001

00401be0 <SysTick_Handler>:
 * Process System Tick Event
 * Increments the g_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	g_ms_ticks++;
  401be0:	4a02      	ldr	r2, [pc, #8]	; (401bec <SysTick_Handler+0xc>)
  401be2:	6813      	ldr	r3, [r2, #0]
  401be4:	3301      	adds	r3, #1
  401be6:	6013      	str	r3, [r2, #0]
  401be8:	4770      	bx	lr
  401bea:	bf00      	nop
  401bec:	20400498 	.word	0x20400498

00401bf0 <time_tick_init>:
}

void time_tick_init(void)
{
	g_ms_ticks = 0;
  401bf0:	2200      	movs	r2, #0
  401bf2:	4b06      	ldr	r3, [pc, #24]	; (401c0c <time_tick_init+0x1c>)
  401bf4:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401bf6:	4b06      	ldr	r3, [pc, #24]	; (401c10 <time_tick_init+0x20>)
  401bf8:	4906      	ldr	r1, [pc, #24]	; (401c14 <time_tick_init+0x24>)
  401bfa:	6059      	str	r1, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401bfc:	20e0      	movs	r0, #224	; 0xe0
  401bfe:	4906      	ldr	r1, [pc, #24]	; (401c18 <time_tick_init+0x28>)
  401c00:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401c06:	2207      	movs	r2, #7
  401c08:	601a      	str	r2, [r3, #0]
  401c0a:	4770      	bx	lr
  401c0c:	20400498 	.word	0x20400498
  401c10:	e000e010 	.word	0xe000e010
  401c14:	0002327f 	.word	0x0002327f
  401c18:	e000ed00 	.word	0xe000ed00

00401c1c <time_tick_get>:
	}
}

uint32_t time_tick_get(void)
{
	return g_ms_ticks;
  401c1c:	4b01      	ldr	r3, [pc, #4]	; (401c24 <time_tick_get+0x8>)
  401c1e:	6818      	ldr	r0, [r3, #0]
}
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	20400498 	.word	0x20400498

00401c28 <time_tick_calc_delay>:

uint32_t time_tick_calc_delay(uint32_t tick_start, uint32_t tick_end)
{
	if (tick_end >= tick_start) {
  401c28:	4281      	cmp	r1, r0
  401c2a:	d202      	bcs.n	401c32 <time_tick_calc_delay+0xa>
		return (tick_end - tick_start) * (1000 / TICK_US);
	} else {
		/* In the case of 32-bit couter number overflow */
		return (tick_end + (0xFFFFFFFF - tick_start)) * (1000 / TICK_US);
  401c2c:	1a09      	subs	r1, r1, r0
  401c2e:	1e48      	subs	r0, r1, #1
	}
}
  401c30:	4770      	bx	lr
		return (tick_end - tick_start) * (1000 / TICK_US);
  401c32:	1a08      	subs	r0, r1, r0
  401c34:	4770      	bx	lr
	...

00401c38 <sysclk_init>:
  401c38:	b510      	push	{r4, lr}
  401c3a:	4810      	ldr	r0, [pc, #64]	; (401c7c <sysclk_init+0x44>)
  401c3c:	4b10      	ldr	r3, [pc, #64]	; (401c80 <sysclk_init+0x48>)
  401c3e:	4798      	blx	r3
  401c40:	213e      	movs	r1, #62	; 0x3e
  401c42:	2000      	movs	r0, #0
  401c44:	4b0f      	ldr	r3, [pc, #60]	; (401c84 <sysclk_init+0x4c>)
  401c46:	4798      	blx	r3
  401c48:	4c0f      	ldr	r4, [pc, #60]	; (401c88 <sysclk_init+0x50>)
  401c4a:	47a0      	blx	r4
  401c4c:	2800      	cmp	r0, #0
  401c4e:	d0fc      	beq.n	401c4a <sysclk_init+0x12>
  401c50:	4b0e      	ldr	r3, [pc, #56]	; (401c8c <sysclk_init+0x54>)
  401c52:	4798      	blx	r3
  401c54:	4a0e      	ldr	r2, [pc, #56]	; (401c90 <sysclk_init+0x58>)
  401c56:	4b0f      	ldr	r3, [pc, #60]	; (401c94 <sysclk_init+0x5c>)
  401c58:	629a      	str	r2, [r3, #40]	; 0x28
  401c5a:	4c0f      	ldr	r4, [pc, #60]	; (401c98 <sysclk_init+0x60>)
  401c5c:	47a0      	blx	r4
  401c5e:	2800      	cmp	r0, #0
  401c60:	d0fc      	beq.n	401c5c <sysclk_init+0x24>
  401c62:	2002      	movs	r0, #2
  401c64:	4b0d      	ldr	r3, [pc, #52]	; (401c9c <sysclk_init+0x64>)
  401c66:	4798      	blx	r3
  401c68:	2000      	movs	r0, #0
  401c6a:	4b0d      	ldr	r3, [pc, #52]	; (401ca0 <sysclk_init+0x68>)
  401c6c:	4798      	blx	r3
  401c6e:	4b0d      	ldr	r3, [pc, #52]	; (401ca4 <sysclk_init+0x6c>)
  401c70:	4798      	blx	r3
  401c72:	480d      	ldr	r0, [pc, #52]	; (401ca8 <sysclk_init+0x70>)
  401c74:	4b02      	ldr	r3, [pc, #8]	; (401c80 <sysclk_init+0x48>)
  401c76:	4798      	blx	r3
  401c78:	bd10      	pop	{r4, pc}
  401c7a:	bf00      	nop
  401c7c:	11e1a300 	.word	0x11e1a300
  401c80:	00402179 	.word	0x00402179
  401c84:	00401d49 	.word	0x00401d49
  401c88:	00401d9d 	.word	0x00401d9d
  401c8c:	00401dad 	.word	0x00401dad
  401c90:	200b3f01 	.word	0x200b3f01
  401c94:	400e0600 	.word	0x400e0600
  401c98:	00401dbd 	.word	0x00401dbd
  401c9c:	00401cad 	.word	0x00401cad
  401ca0:	00401ce5 	.word	0x00401ce5
  401ca4:	0040206d 	.word	0x0040206d
  401ca8:	08954400 	.word	0x08954400

00401cac <pmc_mck_set_division>:
  401cac:	2803      	cmp	r0, #3
  401cae:	d011      	beq.n	401cd4 <pmc_mck_set_division+0x28>
  401cb0:	2804      	cmp	r0, #4
  401cb2:	d012      	beq.n	401cda <pmc_mck_set_division+0x2e>
  401cb4:	2802      	cmp	r0, #2
  401cb6:	bf0c      	ite	eq
  401cb8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401cbc:	2100      	movne	r1, #0
  401cbe:	4a08      	ldr	r2, [pc, #32]	; (401ce0 <pmc_mck_set_division+0x34>)
  401cc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401cc6:	430b      	orrs	r3, r1
  401cc8:	6313      	str	r3, [r2, #48]	; 0x30
  401cca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ccc:	f013 0f08 	tst.w	r3, #8
  401cd0:	d0fb      	beq.n	401cca <pmc_mck_set_division+0x1e>
  401cd2:	4770      	bx	lr
  401cd4:	f44f 7140 	mov.w	r1, #768	; 0x300
  401cd8:	e7f1      	b.n	401cbe <pmc_mck_set_division+0x12>
  401cda:	f44f 7100 	mov.w	r1, #512	; 0x200
  401cde:	e7ee      	b.n	401cbe <pmc_mck_set_division+0x12>
  401ce0:	400e0600 	.word	0x400e0600

00401ce4 <pmc_switch_mck_to_pllack>:
  401ce4:	4a17      	ldr	r2, [pc, #92]	; (401d44 <pmc_switch_mck_to_pllack+0x60>)
  401ce6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401cec:	4318      	orrs	r0, r3
  401cee:	6310      	str	r0, [r2, #48]	; 0x30
  401cf0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401cf2:	f013 0f08 	tst.w	r3, #8
  401cf6:	d10a      	bne.n	401d0e <pmc_switch_mck_to_pllack+0x2a>
  401cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401cfc:	4911      	ldr	r1, [pc, #68]	; (401d44 <pmc_switch_mck_to_pllack+0x60>)
  401cfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401d00:	f012 0f08 	tst.w	r2, #8
  401d04:	d103      	bne.n	401d0e <pmc_switch_mck_to_pllack+0x2a>
  401d06:	3b01      	subs	r3, #1
  401d08:	d1f9      	bne.n	401cfe <pmc_switch_mck_to_pllack+0x1a>
  401d0a:	2001      	movs	r0, #1
  401d0c:	4770      	bx	lr
  401d0e:	4a0d      	ldr	r2, [pc, #52]	; (401d44 <pmc_switch_mck_to_pllack+0x60>)
  401d10:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d12:	f023 0303 	bic.w	r3, r3, #3
  401d16:	f043 0302 	orr.w	r3, r3, #2
  401d1a:	6313      	str	r3, [r2, #48]	; 0x30
  401d1c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401d1e:	f013 0f08 	tst.w	r3, #8
  401d22:	d10a      	bne.n	401d3a <pmc_switch_mck_to_pllack+0x56>
  401d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401d28:	4906      	ldr	r1, [pc, #24]	; (401d44 <pmc_switch_mck_to_pllack+0x60>)
  401d2a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401d2c:	f012 0f08 	tst.w	r2, #8
  401d30:	d105      	bne.n	401d3e <pmc_switch_mck_to_pllack+0x5a>
  401d32:	3b01      	subs	r3, #1
  401d34:	d1f9      	bne.n	401d2a <pmc_switch_mck_to_pllack+0x46>
  401d36:	2001      	movs	r0, #1
  401d38:	4770      	bx	lr
  401d3a:	2000      	movs	r0, #0
  401d3c:	4770      	bx	lr
  401d3e:	2000      	movs	r0, #0
  401d40:	4770      	bx	lr
  401d42:	bf00      	nop
  401d44:	400e0600 	.word	0x400e0600

00401d48 <pmc_switch_mainck_to_xtal>:
  401d48:	b9a0      	cbnz	r0, 401d74 <pmc_switch_mainck_to_xtal+0x2c>
  401d4a:	480e      	ldr	r0, [pc, #56]	; (401d84 <pmc_switch_mainck_to_xtal+0x3c>)
  401d4c:	6a03      	ldr	r3, [r0, #32]
  401d4e:	0209      	lsls	r1, r1, #8
  401d50:	b289      	uxth	r1, r1
  401d52:	4a0d      	ldr	r2, [pc, #52]	; (401d88 <pmc_switch_mainck_to_xtal+0x40>)
  401d54:	401a      	ands	r2, r3
  401d56:	4b0d      	ldr	r3, [pc, #52]	; (401d8c <pmc_switch_mainck_to_xtal+0x44>)
  401d58:	4313      	orrs	r3, r2
  401d5a:	4319      	orrs	r1, r3
  401d5c:	6201      	str	r1, [r0, #32]
  401d5e:	4602      	mov	r2, r0
  401d60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401d62:	f013 0f01 	tst.w	r3, #1
  401d66:	d0fb      	beq.n	401d60 <pmc_switch_mainck_to_xtal+0x18>
  401d68:	4a06      	ldr	r2, [pc, #24]	; (401d84 <pmc_switch_mainck_to_xtal+0x3c>)
  401d6a:	6a11      	ldr	r1, [r2, #32]
  401d6c:	4b08      	ldr	r3, [pc, #32]	; (401d90 <pmc_switch_mainck_to_xtal+0x48>)
  401d6e:	430b      	orrs	r3, r1
  401d70:	6213      	str	r3, [r2, #32]
  401d72:	4770      	bx	lr
  401d74:	4903      	ldr	r1, [pc, #12]	; (401d84 <pmc_switch_mainck_to_xtal+0x3c>)
  401d76:	6a0b      	ldr	r3, [r1, #32]
  401d78:	4a06      	ldr	r2, [pc, #24]	; (401d94 <pmc_switch_mainck_to_xtal+0x4c>)
  401d7a:	401a      	ands	r2, r3
  401d7c:	4b06      	ldr	r3, [pc, #24]	; (401d98 <pmc_switch_mainck_to_xtal+0x50>)
  401d7e:	4313      	orrs	r3, r2
  401d80:	620b      	str	r3, [r1, #32]
  401d82:	4770      	bx	lr
  401d84:	400e0600 	.word	0x400e0600
  401d88:	ffc8fffc 	.word	0xffc8fffc
  401d8c:	00370001 	.word	0x00370001
  401d90:	01370000 	.word	0x01370000
  401d94:	fec8fffc 	.word	0xfec8fffc
  401d98:	01370002 	.word	0x01370002

00401d9c <pmc_osc_is_ready_mainck>:
  401d9c:	4b02      	ldr	r3, [pc, #8]	; (401da8 <pmc_osc_is_ready_mainck+0xc>)
  401d9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401da0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401da4:	4770      	bx	lr
  401da6:	bf00      	nop
  401da8:	400e0600 	.word	0x400e0600

00401dac <pmc_disable_pllack>:
  401dac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401db0:	4b01      	ldr	r3, [pc, #4]	; (401db8 <pmc_disable_pllack+0xc>)
  401db2:	629a      	str	r2, [r3, #40]	; 0x28
  401db4:	4770      	bx	lr
  401db6:	bf00      	nop
  401db8:	400e0600 	.word	0x400e0600

00401dbc <pmc_is_locked_pllack>:
  401dbc:	4b02      	ldr	r3, [pc, #8]	; (401dc8 <pmc_is_locked_pllack+0xc>)
  401dbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401dc0:	f000 0002 	and.w	r0, r0, #2
  401dc4:	4770      	bx	lr
  401dc6:	bf00      	nop
  401dc8:	400e0600 	.word	0x400e0600

00401dcc <pmc_enable_periph_clk>:
  401dcc:	283f      	cmp	r0, #63	; 0x3f
  401dce:	d81e      	bhi.n	401e0e <pmc_enable_periph_clk+0x42>
  401dd0:	281f      	cmp	r0, #31
  401dd2:	d80c      	bhi.n	401dee <pmc_enable_periph_clk+0x22>
  401dd4:	4b11      	ldr	r3, [pc, #68]	; (401e1c <pmc_enable_periph_clk+0x50>)
  401dd6:	699a      	ldr	r2, [r3, #24]
  401dd8:	2301      	movs	r3, #1
  401dda:	4083      	lsls	r3, r0
  401ddc:	4393      	bics	r3, r2
  401dde:	d018      	beq.n	401e12 <pmc_enable_periph_clk+0x46>
  401de0:	2301      	movs	r3, #1
  401de2:	fa03 f000 	lsl.w	r0, r3, r0
  401de6:	4b0d      	ldr	r3, [pc, #52]	; (401e1c <pmc_enable_periph_clk+0x50>)
  401de8:	6118      	str	r0, [r3, #16]
  401dea:	2000      	movs	r0, #0
  401dec:	4770      	bx	lr
  401dee:	3820      	subs	r0, #32
  401df0:	4b0a      	ldr	r3, [pc, #40]	; (401e1c <pmc_enable_periph_clk+0x50>)
  401df2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401df6:	2301      	movs	r3, #1
  401df8:	4083      	lsls	r3, r0
  401dfa:	4393      	bics	r3, r2
  401dfc:	d00b      	beq.n	401e16 <pmc_enable_periph_clk+0x4a>
  401dfe:	2301      	movs	r3, #1
  401e00:	fa03 f000 	lsl.w	r0, r3, r0
  401e04:	4b05      	ldr	r3, [pc, #20]	; (401e1c <pmc_enable_periph_clk+0x50>)
  401e06:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  401e0a:	2000      	movs	r0, #0
  401e0c:	4770      	bx	lr
  401e0e:	2001      	movs	r0, #1
  401e10:	4770      	bx	lr
  401e12:	2000      	movs	r0, #0
  401e14:	4770      	bx	lr
  401e16:	2000      	movs	r0, #0
  401e18:	4770      	bx	lr
  401e1a:	bf00      	nop
  401e1c:	400e0600 	.word	0x400e0600

00401e20 <twihs_set_speed>:
  401e20:	4b10      	ldr	r3, [pc, #64]	; (401e64 <twihs_set_speed+0x44>)
  401e22:	4299      	cmp	r1, r3
  401e24:	d81b      	bhi.n	401e5e <twihs_set_speed+0x3e>
  401e26:	0049      	lsls	r1, r1, #1
  401e28:	fbb2 f2f1 	udiv	r2, r2, r1
  401e2c:	3a04      	subs	r2, #4
  401e2e:	2aff      	cmp	r2, #255	; 0xff
  401e30:	d913      	bls.n	401e5a <twihs_set_speed+0x3a>
  401e32:	2300      	movs	r3, #0
  401e34:	3301      	adds	r3, #1
  401e36:	0852      	lsrs	r2, r2, #1
  401e38:	2aff      	cmp	r2, #255	; 0xff
  401e3a:	d901      	bls.n	401e40 <twihs_set_speed+0x20>
  401e3c:	2b06      	cmp	r3, #6
  401e3e:	d9f9      	bls.n	401e34 <twihs_set_speed+0x14>
  401e40:	b2d1      	uxtb	r1, r2
  401e42:	f041 51e0 	orr.w	r1, r1, #469762048	; 0x1c000000
  401e46:	0212      	lsls	r2, r2, #8
  401e48:	b292      	uxth	r2, r2
  401e4a:	430a      	orrs	r2, r1
  401e4c:	041b      	lsls	r3, r3, #16
  401e4e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401e52:	4313      	orrs	r3, r2
  401e54:	6103      	str	r3, [r0, #16]
  401e56:	2000      	movs	r0, #0
  401e58:	4770      	bx	lr
  401e5a:	2300      	movs	r3, #0
  401e5c:	e7f0      	b.n	401e40 <twihs_set_speed+0x20>
  401e5e:	2001      	movs	r0, #1
  401e60:	4770      	bx	lr
  401e62:	bf00      	nop
  401e64:	00061a80 	.word	0x00061a80

00401e68 <twihs_master_init>:
  401e68:	b508      	push	{r3, lr}
  401e6a:	f04f 32ff 	mov.w	r2, #4294967295
  401e6e:	6282      	str	r2, [r0, #40]	; 0x28
  401e70:	6a02      	ldr	r2, [r0, #32]
  401e72:	2280      	movs	r2, #128	; 0x80
  401e74:	6002      	str	r2, [r0, #0]
  401e76:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401e78:	2208      	movs	r2, #8
  401e7a:	6002      	str	r2, [r0, #0]
  401e7c:	2220      	movs	r2, #32
  401e7e:	6002      	str	r2, [r0, #0]
  401e80:	2204      	movs	r2, #4
  401e82:	6002      	str	r2, [r0, #0]
  401e84:	680a      	ldr	r2, [r1, #0]
  401e86:	6849      	ldr	r1, [r1, #4]
  401e88:	4b03      	ldr	r3, [pc, #12]	; (401e98 <twihs_master_init+0x30>)
  401e8a:	4798      	blx	r3
  401e8c:	2801      	cmp	r0, #1
  401e8e:	bf14      	ite	ne
  401e90:	2000      	movne	r0, #0
  401e92:	2001      	moveq	r0, #1
  401e94:	bd08      	pop	{r3, pc}
  401e96:	bf00      	nop
  401e98:	00401e21 	.word	0x00401e21

00401e9c <xdmac_configure_transfer>:
  401e9c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401ea0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
  401ea2:	6853      	ldr	r3, [r2, #4]
  401ea4:	660b      	str	r3, [r1, #96]	; 0x60
  401ea6:	6893      	ldr	r3, [r2, #8]
  401ea8:	664b      	str	r3, [r1, #100]	; 0x64
  401eaa:	6813      	ldr	r3, [r2, #0]
  401eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401eb0:	670b      	str	r3, [r1, #112]	; 0x70
  401eb2:	6913      	ldr	r3, [r2, #16]
  401eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401eb8:	674b      	str	r3, [r1, #116]	; 0x74
  401eba:	6953      	ldr	r3, [r2, #20]
  401ebc:	67cb      	str	r3, [r1, #124]	; 0x7c
  401ebe:	6993      	ldr	r3, [r2, #24]
  401ec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ec4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  401ec8:	69d3      	ldr	r3, [r2, #28]
  401eca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  401ed2:	68d3      	ldr	r3, [r2, #12]
  401ed4:	678b      	str	r3, [r1, #120]	; 0x78
  401ed6:	4770      	bx	lr

00401ed8 <board_init>:
  401ed8:	4b33      	ldr	r3, [pc, #204]	; (401fa8 <board_init+0xd0>)
  401eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ede:	661a      	str	r2, [r3, #96]	; 0x60
  401ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401ee4:	655a      	str	r2, [r3, #84]	; 0x54
  401ee6:	625a      	str	r2, [r3, #36]	; 0x24
  401ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401eec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401eee:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  401ef2:	6719      	str	r1, [r3, #112]	; 0x70
  401ef4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401ef6:	4311      	orrs	r1, r2
  401ef8:	6759      	str	r1, [r3, #116]	; 0x74
  401efa:	605a      	str	r2, [r3, #4]
  401efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401f00:	661a      	str	r2, [r3, #96]	; 0x60
  401f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401f06:	655a      	str	r2, [r3, #84]	; 0x54
  401f08:	625a      	str	r2, [r3, #36]	; 0x24
  401f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f0e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f10:	4311      	orrs	r1, r2
  401f12:	6719      	str	r1, [r3, #112]	; 0x70
  401f14:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f16:	4311      	orrs	r1, r2
  401f18:	6759      	str	r1, [r3, #116]	; 0x74
  401f1a:	605a      	str	r2, [r3, #4]
  401f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401f20:	661a      	str	r2, [r3, #96]	; 0x60
  401f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401f26:	655a      	str	r2, [r3, #84]	; 0x54
  401f28:	625a      	str	r2, [r3, #36]	; 0x24
  401f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f2e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f30:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  401f34:	6719      	str	r1, [r3, #112]	; 0x70
  401f36:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f38:	4311      	orrs	r1, r2
  401f3a:	6759      	str	r1, [r3, #116]	; 0x74
  401f3c:	605a      	str	r2, [r3, #4]
  401f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401f42:	661a      	str	r2, [r3, #96]	; 0x60
  401f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401f48:	655a      	str	r2, [r3, #84]	; 0x54
  401f4a:	625a      	str	r2, [r3, #36]	; 0x24
  401f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f50:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401f56:	6719      	str	r1, [r3, #112]	; 0x70
  401f58:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f5a:	4311      	orrs	r1, r2
  401f5c:	6759      	str	r1, [r3, #116]	; 0x74
  401f5e:	605a      	str	r2, [r3, #4]
  401f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f64:	661a      	str	r2, [r3, #96]	; 0x60
  401f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401f6a:	655a      	str	r2, [r3, #84]	; 0x54
  401f6c:	625a      	str	r2, [r3, #36]	; 0x24
  401f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f72:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f74:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401f78:	6719      	str	r1, [r3, #112]	; 0x70
  401f7a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f7c:	4311      	orrs	r1, r2
  401f7e:	6759      	str	r1, [r3, #116]	; 0x74
  401f80:	605a      	str	r2, [r3, #4]
  401f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401f86:	661a      	str	r2, [r3, #96]	; 0x60
  401f88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401f8c:	655a      	str	r2, [r3, #84]	; 0x54
  401f8e:	625a      	str	r2, [r3, #36]	; 0x24
  401f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401f94:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f96:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  401f9a:	6719      	str	r1, [r3, #112]	; 0x70
  401f9c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f9e:	4311      	orrs	r1, r2
  401fa0:	6759      	str	r1, [r3, #116]	; 0x74
  401fa2:	605a      	str	r2, [r3, #4]
  401fa4:	4770      	bx	lr
  401fa6:	bf00      	nop
  401fa8:	400e0e00 	.word	0x400e0e00

00401fac <Dummy_Handler>:
  401fac:	e7fe      	b.n	401fac <Dummy_Handler>
	...

00401fb0 <Reset_Handler>:
  401fb0:	b508      	push	{r3, lr}
  401fb2:	4b23      	ldr	r3, [pc, #140]	; (402040 <Reset_Handler+0x90>)
  401fb4:	4a23      	ldr	r2, [pc, #140]	; (402044 <Reset_Handler+0x94>)
  401fb6:	429a      	cmp	r2, r3
  401fb8:	d010      	beq.n	401fdc <Reset_Handler+0x2c>
  401fba:	4b23      	ldr	r3, [pc, #140]	; (402048 <Reset_Handler+0x98>)
  401fbc:	4a20      	ldr	r2, [pc, #128]	; (402040 <Reset_Handler+0x90>)
  401fbe:	429a      	cmp	r2, r3
  401fc0:	d20c      	bcs.n	401fdc <Reset_Handler+0x2c>
  401fc2:	3b01      	subs	r3, #1
  401fc4:	1a9b      	subs	r3, r3, r2
  401fc6:	f023 0303 	bic.w	r3, r3, #3
  401fca:	3304      	adds	r3, #4
  401fcc:	4413      	add	r3, r2
  401fce:	491d      	ldr	r1, [pc, #116]	; (402044 <Reset_Handler+0x94>)
  401fd0:	f851 0b04 	ldr.w	r0, [r1], #4
  401fd4:	f842 0b04 	str.w	r0, [r2], #4
  401fd8:	429a      	cmp	r2, r3
  401fda:	d1f9      	bne.n	401fd0 <Reset_Handler+0x20>
  401fdc:	4b1b      	ldr	r3, [pc, #108]	; (40204c <Reset_Handler+0x9c>)
  401fde:	4a1c      	ldr	r2, [pc, #112]	; (402050 <Reset_Handler+0xa0>)
  401fe0:	429a      	cmp	r2, r3
  401fe2:	d20a      	bcs.n	401ffa <Reset_Handler+0x4a>
  401fe4:	3b01      	subs	r3, #1
  401fe6:	1a9b      	subs	r3, r3, r2
  401fe8:	f023 0303 	bic.w	r3, r3, #3
  401fec:	3304      	adds	r3, #4
  401fee:	4413      	add	r3, r2
  401ff0:	2100      	movs	r1, #0
  401ff2:	f842 1b04 	str.w	r1, [r2], #4
  401ff6:	4293      	cmp	r3, r2
  401ff8:	d1fb      	bne.n	401ff2 <Reset_Handler+0x42>
  401ffa:	4a16      	ldr	r2, [pc, #88]	; (402054 <Reset_Handler+0xa4>)
  401ffc:	4b16      	ldr	r3, [pc, #88]	; (402058 <Reset_Handler+0xa8>)
  401ffe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402002:	6093      	str	r3, [r2, #8]
  402004:	f3ef 8310 	mrs	r3, PRIMASK
  402008:	b672      	cpsid	i
  40200a:	f3bf 8f5f 	dmb	sy
  40200e:	2100      	movs	r1, #0
  402010:	4a12      	ldr	r2, [pc, #72]	; (40205c <Reset_Handler+0xac>)
  402012:	7011      	strb	r1, [r2, #0]
  402014:	4912      	ldr	r1, [pc, #72]	; (402060 <Reset_Handler+0xb0>)
  402016:	680a      	ldr	r2, [r1, #0]
  402018:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  40201c:	600a      	str	r2, [r1, #0]
  40201e:	f3bf 8f4f 	dsb	sy
  402022:	f3bf 8f6f 	isb	sy
  402026:	b92b      	cbnz	r3, 402034 <Reset_Handler+0x84>
  402028:	2201      	movs	r2, #1
  40202a:	4b0c      	ldr	r3, [pc, #48]	; (40205c <Reset_Handler+0xac>)
  40202c:	701a      	strb	r2, [r3, #0]
  40202e:	f3bf 8f5f 	dmb	sy
  402032:	b662      	cpsie	i
  402034:	4b0b      	ldr	r3, [pc, #44]	; (402064 <Reset_Handler+0xb4>)
  402036:	4798      	blx	r3
  402038:	4b0b      	ldr	r3, [pc, #44]	; (402068 <Reset_Handler+0xb8>)
  40203a:	4798      	blx	r3
  40203c:	e7fe      	b.n	40203c <Reset_Handler+0x8c>
  40203e:	bf00      	nop
  402040:	20400000 	.word	0x20400000
  402044:	00402ce4 	.word	0x00402ce4
  402048:	20400444 	.word	0x20400444
  40204c:	20453b50 	.word	0x20453b50
  402050:	20400448 	.word	0x20400448
  402054:	e000ed00 	.word	0xe000ed00
  402058:	00400000 	.word	0x00400000
  40205c:	2040000a 	.word	0x2040000a
  402060:	e000ed88 	.word	0xe000ed88
  402064:	004029e9 	.word	0x004029e9
  402068:	004026fd 	.word	0x004026fd

0040206c <SystemCoreClockUpdate>:
  40206c:	4b3b      	ldr	r3, [pc, #236]	; (40215c <SystemCoreClockUpdate+0xf0>)
  40206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402070:	f003 0303 	and.w	r3, r3, #3
  402074:	2b01      	cmp	r3, #1
  402076:	d01d      	beq.n	4020b4 <SystemCoreClockUpdate+0x48>
  402078:	b183      	cbz	r3, 40209c <SystemCoreClockUpdate+0x30>
  40207a:	2b02      	cmp	r3, #2
  40207c:	d036      	beq.n	4020ec <SystemCoreClockUpdate+0x80>
  40207e:	4b37      	ldr	r3, [pc, #220]	; (40215c <SystemCoreClockUpdate+0xf0>)
  402080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402082:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402086:	2b70      	cmp	r3, #112	; 0x70
  402088:	d05f      	beq.n	40214a <SystemCoreClockUpdate+0xde>
  40208a:	4b34      	ldr	r3, [pc, #208]	; (40215c <SystemCoreClockUpdate+0xf0>)
  40208c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40208e:	4934      	ldr	r1, [pc, #208]	; (402160 <SystemCoreClockUpdate+0xf4>)
  402090:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402094:	680b      	ldr	r3, [r1, #0]
  402096:	40d3      	lsrs	r3, r2
  402098:	600b      	str	r3, [r1, #0]
  40209a:	4770      	bx	lr
  40209c:	4b31      	ldr	r3, [pc, #196]	; (402164 <SystemCoreClockUpdate+0xf8>)
  40209e:	695b      	ldr	r3, [r3, #20]
  4020a0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4020a4:	bf14      	ite	ne
  4020a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  4020aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4020ae:	4b2c      	ldr	r3, [pc, #176]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020b0:	601a      	str	r2, [r3, #0]
  4020b2:	e7e4      	b.n	40207e <SystemCoreClockUpdate+0x12>
  4020b4:	4b29      	ldr	r3, [pc, #164]	; (40215c <SystemCoreClockUpdate+0xf0>)
  4020b6:	6a1b      	ldr	r3, [r3, #32]
  4020b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020bc:	d003      	beq.n	4020c6 <SystemCoreClockUpdate+0x5a>
  4020be:	4a2a      	ldr	r2, [pc, #168]	; (402168 <SystemCoreClockUpdate+0xfc>)
  4020c0:	4b27      	ldr	r3, [pc, #156]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020c2:	601a      	str	r2, [r3, #0]
  4020c4:	e7db      	b.n	40207e <SystemCoreClockUpdate+0x12>
  4020c6:	4a29      	ldr	r2, [pc, #164]	; (40216c <SystemCoreClockUpdate+0x100>)
  4020c8:	4b25      	ldr	r3, [pc, #148]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020ca:	601a      	str	r2, [r3, #0]
  4020cc:	4b23      	ldr	r3, [pc, #140]	; (40215c <SystemCoreClockUpdate+0xf0>)
  4020ce:	6a1b      	ldr	r3, [r3, #32]
  4020d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020d4:	2b10      	cmp	r3, #16
  4020d6:	d005      	beq.n	4020e4 <SystemCoreClockUpdate+0x78>
  4020d8:	2b20      	cmp	r3, #32
  4020da:	d1d0      	bne.n	40207e <SystemCoreClockUpdate+0x12>
  4020dc:	4a22      	ldr	r2, [pc, #136]	; (402168 <SystemCoreClockUpdate+0xfc>)
  4020de:	4b20      	ldr	r3, [pc, #128]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020e0:	601a      	str	r2, [r3, #0]
  4020e2:	e7cc      	b.n	40207e <SystemCoreClockUpdate+0x12>
  4020e4:	4a22      	ldr	r2, [pc, #136]	; (402170 <SystemCoreClockUpdate+0x104>)
  4020e6:	4b1e      	ldr	r3, [pc, #120]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020e8:	601a      	str	r2, [r3, #0]
  4020ea:	e7c8      	b.n	40207e <SystemCoreClockUpdate+0x12>
  4020ec:	4b1b      	ldr	r3, [pc, #108]	; (40215c <SystemCoreClockUpdate+0xf0>)
  4020ee:	6a1b      	ldr	r3, [r3, #32]
  4020f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020f4:	d016      	beq.n	402124 <SystemCoreClockUpdate+0xb8>
  4020f6:	4a1c      	ldr	r2, [pc, #112]	; (402168 <SystemCoreClockUpdate+0xfc>)
  4020f8:	4b19      	ldr	r3, [pc, #100]	; (402160 <SystemCoreClockUpdate+0xf4>)
  4020fa:	601a      	str	r2, [r3, #0]
  4020fc:	4b17      	ldr	r3, [pc, #92]	; (40215c <SystemCoreClockUpdate+0xf0>)
  4020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402100:	f003 0303 	and.w	r3, r3, #3
  402104:	2b02      	cmp	r3, #2
  402106:	d1ba      	bne.n	40207e <SystemCoreClockUpdate+0x12>
  402108:	4a14      	ldr	r2, [pc, #80]	; (40215c <SystemCoreClockUpdate+0xf0>)
  40210a:	6a91      	ldr	r1, [r2, #40]	; 0x28
  40210c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40210e:	4814      	ldr	r0, [pc, #80]	; (402160 <SystemCoreClockUpdate+0xf4>)
  402110:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402114:	6803      	ldr	r3, [r0, #0]
  402116:	fb01 3303 	mla	r3, r1, r3, r3
  40211a:	b2d2      	uxtb	r2, r2
  40211c:	fbb3 f3f2 	udiv	r3, r3, r2
  402120:	6003      	str	r3, [r0, #0]
  402122:	e7ac      	b.n	40207e <SystemCoreClockUpdate+0x12>
  402124:	4a11      	ldr	r2, [pc, #68]	; (40216c <SystemCoreClockUpdate+0x100>)
  402126:	4b0e      	ldr	r3, [pc, #56]	; (402160 <SystemCoreClockUpdate+0xf4>)
  402128:	601a      	str	r2, [r3, #0]
  40212a:	4b0c      	ldr	r3, [pc, #48]	; (40215c <SystemCoreClockUpdate+0xf0>)
  40212c:	6a1b      	ldr	r3, [r3, #32]
  40212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402132:	2b10      	cmp	r3, #16
  402134:	d005      	beq.n	402142 <SystemCoreClockUpdate+0xd6>
  402136:	2b20      	cmp	r3, #32
  402138:	d1e0      	bne.n	4020fc <SystemCoreClockUpdate+0x90>
  40213a:	4a0b      	ldr	r2, [pc, #44]	; (402168 <SystemCoreClockUpdate+0xfc>)
  40213c:	4b08      	ldr	r3, [pc, #32]	; (402160 <SystemCoreClockUpdate+0xf4>)
  40213e:	601a      	str	r2, [r3, #0]
  402140:	e7dc      	b.n	4020fc <SystemCoreClockUpdate+0x90>
  402142:	4a0b      	ldr	r2, [pc, #44]	; (402170 <SystemCoreClockUpdate+0x104>)
  402144:	4b06      	ldr	r3, [pc, #24]	; (402160 <SystemCoreClockUpdate+0xf4>)
  402146:	601a      	str	r2, [r3, #0]
  402148:	e7d8      	b.n	4020fc <SystemCoreClockUpdate+0x90>
  40214a:	4a05      	ldr	r2, [pc, #20]	; (402160 <SystemCoreClockUpdate+0xf4>)
  40214c:	6813      	ldr	r3, [r2, #0]
  40214e:	4909      	ldr	r1, [pc, #36]	; (402174 <SystemCoreClockUpdate+0x108>)
  402150:	fba1 1303 	umull	r1, r3, r1, r3
  402154:	085b      	lsrs	r3, r3, #1
  402156:	6013      	str	r3, [r2, #0]
  402158:	4770      	bx	lr
  40215a:	bf00      	nop
  40215c:	400e0600 	.word	0x400e0600
  402160:	2040000c 	.word	0x2040000c
  402164:	400e1810 	.word	0x400e1810
  402168:	00b71b00 	.word	0x00b71b00
  40216c:	003d0900 	.word	0x003d0900
  402170:	007a1200 	.word	0x007a1200
  402174:	aaaaaaab 	.word	0xaaaaaaab

00402178 <system_init_flash>:
  402178:	4b12      	ldr	r3, [pc, #72]	; (4021c4 <system_init_flash+0x4c>)
  40217a:	4298      	cmp	r0, r3
  40217c:	d911      	bls.n	4021a2 <system_init_flash+0x2a>
  40217e:	4b12      	ldr	r3, [pc, #72]	; (4021c8 <system_init_flash+0x50>)
  402180:	4298      	cmp	r0, r3
  402182:	d913      	bls.n	4021ac <system_init_flash+0x34>
  402184:	4b11      	ldr	r3, [pc, #68]	; (4021cc <system_init_flash+0x54>)
  402186:	4298      	cmp	r0, r3
  402188:	d914      	bls.n	4021b4 <system_init_flash+0x3c>
  40218a:	4b11      	ldr	r3, [pc, #68]	; (4021d0 <system_init_flash+0x58>)
  40218c:	4298      	cmp	r0, r3
  40218e:	d915      	bls.n	4021bc <system_init_flash+0x44>
  402190:	4b10      	ldr	r3, [pc, #64]	; (4021d4 <system_init_flash+0x5c>)
  402192:	4298      	cmp	r0, r3
  402194:	bf94      	ite	ls
  402196:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
  40219a:	4a0f      	ldrhi	r2, [pc, #60]	; (4021d8 <system_init_flash+0x60>)
  40219c:	4b0f      	ldr	r3, [pc, #60]	; (4021dc <system_init_flash+0x64>)
  40219e:	601a      	str	r2, [r3, #0]
  4021a0:	4770      	bx	lr
  4021a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021a6:	4b0d      	ldr	r3, [pc, #52]	; (4021dc <system_init_flash+0x64>)
  4021a8:	601a      	str	r2, [r3, #0]
  4021aa:	4770      	bx	lr
  4021ac:	4a0c      	ldr	r2, [pc, #48]	; (4021e0 <system_init_flash+0x68>)
  4021ae:	4b0b      	ldr	r3, [pc, #44]	; (4021dc <system_init_flash+0x64>)
  4021b0:	601a      	str	r2, [r3, #0]
  4021b2:	4770      	bx	lr
  4021b4:	4a0b      	ldr	r2, [pc, #44]	; (4021e4 <system_init_flash+0x6c>)
  4021b6:	4b09      	ldr	r3, [pc, #36]	; (4021dc <system_init_flash+0x64>)
  4021b8:	601a      	str	r2, [r3, #0]
  4021ba:	4770      	bx	lr
  4021bc:	4a0a      	ldr	r2, [pc, #40]	; (4021e8 <system_init_flash+0x70>)
  4021be:	4b07      	ldr	r3, [pc, #28]	; (4021dc <system_init_flash+0x64>)
  4021c0:	601a      	str	r2, [r3, #0]
  4021c2:	4770      	bx	lr
  4021c4:	01312cff 	.word	0x01312cff
  4021c8:	026259ff 	.word	0x026259ff
  4021cc:	039386ff 	.word	0x039386ff
  4021d0:	04c4b3ff 	.word	0x04c4b3ff
  4021d4:	05f5e0ff 	.word	0x05f5e0ff
  4021d8:	04000500 	.word	0x04000500
  4021dc:	400e0c00 	.word	0x400e0c00
  4021e0:	04000100 	.word	0x04000100
  4021e4:	04000200 	.word	0x04000200
  4021e8:	04000300 	.word	0x04000300

004021ec <enableSourceClk>:
		base->PIO_PUDR = mask;
  4021ec:	4b0b      	ldr	r3, [pc, #44]	; (40221c <enableSourceClk+0x30>)
  4021ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4021f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4021f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4021f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4021fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4021fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402200:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402202:	4311      	orrs	r1, r2
  402204:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402206:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402208:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  40220c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40220e:	605a      	str	r2, [r3, #4]
	//Sets PCK1 as clock output using Main Clocks
	//pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
	ioport_set_pin_mode(SCK1_PIN,IOPORT_MODE_MUX_B);
	ioport_disable_pin(SCK1_PIN);//Not sure if this is necessary

	PMC->PMC_SCER = (PMC_SCER_PCK1);
  402210:	f44f 7200 	mov.w	r2, #512	; 0x200
  402214:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
  402218:	601a      	str	r2, [r3, #0]
  40221a:	4770      	bx	lr
  40221c:	400e0e00 	.word	0x400e0e00

00402220 <imagingSensorParamInit>:
	
}

void imagingSensorParamInit() 
{
	PIOA->PIO_PCMR |= PIO_PCMR_DSIZE(D_SIZE);	// The reception data in PIO_PCRHR is a word (32-bit)
  402220:	4a03      	ldr	r2, [pc, #12]	; (402230 <imagingSensorParamInit+0x10>)
  402222:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  402226:	f043 0320 	orr.w	r3, r3, #32
  40222a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  40222e:	4770      	bx	lr
  402230:	400e0e00 	.word	0x400e0e00

00402234 <imagingSensorDMAInit>:
	if (FRSTS == 1)
	PIOA->PIO_PCMR |= PIO_PCMR_FRSTS;
}

void imagingSensorDMAInit()
{
  402234:	b508      	push	{r3, lr}
	//Single Block With Single Microblock Transfer
	uint32_t channelStatus = 0;
	/* Initialize and enable DMA controller */
	pmc_enable_periph_clk(ID_XDMAC);
  402236:	203a      	movs	r0, #58	; 0x3a
  402238:	4b05      	ldr	r3, [pc, #20]	; (402250 <imagingSensorDMAInit+0x1c>)
  40223a:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40223c:	4b05      	ldr	r3, [pc, #20]	; (402254 <imagingSensorDMAInit+0x20>)
  40223e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402242:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402246:	2120      	movs	r1, #32
  402248:	f883 133a 	strb.w	r1, [r3, #826]	; 0x33a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40224c:	605a      	str	r2, [r3, #4]
  40224e:	bd08      	pop	{r3, pc}
  402250:	00401dcd 	.word	0x00401dcd
  402254:	e000e100 	.word	0xe000e100

00402258 <imagingSensorStartDMA>:

void imagingSensorStartDMA() 
{	
	uint32_t channelStatus = 0;

	XDMAC->XDMAC_GD =(XDMAC_GD_DI0 << IMAGING_SENSOR_XDMAC_CH); //disables DMA channel
  402258:	4b23      	ldr	r3, [pc, #140]	; (4022e8 <imagingSensorStartDMA+0x90>)
  40225a:	2202      	movs	r2, #2
  40225c:	621a      	str	r2, [r3, #32]

	channelStatus = XDMAC->XDMAC_GS; //Global status of XDMAC channels. Should make sure IMAGING_SENSOR_XDMAC_CH is available
  40225e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;//clears interrupt status bit
  402260:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSA = (uint32_t)&(PIOA->PIO_PCRHR); //source address
  402264:	4a21      	ldr	r2, [pc, #132]	; (4022ec <imagingSensorStartDMA+0x94>)
  402266:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			break;
	}
	#endif
	
	#ifdef NOIP1SN0480A
	switch(frameNumber % 3)
  40226a:	4b21      	ldr	r3, [pc, #132]	; (4022f0 <imagingSensorStartDMA+0x98>)
  40226c:	681a      	ldr	r2, [r3, #0]
  40226e:	4b21      	ldr	r3, [pc, #132]	; (4022f4 <imagingSensorStartDMA+0x9c>)
  402270:	fba3 1302 	umull	r1, r3, r3, r2
  402274:	085b      	lsrs	r3, r3, #1
  402276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40227a:	1ad3      	subs	r3, r2, r3
  40227c:	2b01      	cmp	r3, #1
  40227e:	d029      	beq.n	4022d4 <imagingSensorStartDMA+0x7c>
  402280:	b31b      	cbz	r3, 4022ca <imagingSensorStartDMA+0x72>
  402282:	2b02      	cmp	r3, #2
  402284:	d02b      	beq.n	4022de <imagingSensorStartDMA+0x86>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
		break;
	}
	#endif

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CUBC = XDMAC_CUBC_UBLEN(NUM_PIXEL_WORDS);
  402286:	4b18      	ldr	r3, [pc, #96]	; (4022e8 <imagingSensorStartDMA+0x90>)
  402288:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
  40228c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CC = XDMAC_CC_TYPE_PER_TRAN |
  402290:	4a19      	ldr	r2, [pc, #100]	; (4022f8 <imagingSensorStartDMA+0xa0>)
  402292:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	XDMAC_CC_SAM_FIXED_AM | //fixed source memory
	XDMAC_CC_DAM_INCREMENTED_AM | //increment destination memory
	XDMAC_CC_PERID(XDAMC_CHANNEL_HWID_PIOA); // Peripheral ID for Parallel Capture

	//Clearing the following registers indicates that the linked list is disabled and that there is only 1 block
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CNDC = 0;
  402296:	2200      	movs	r2, #0
  402298:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CBC = 0;
  40229c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDS_MSP = 0;
  4022a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CSUS = 0;
  4022a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDUS = 0;
  4022a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIE |= XDMAC_CIE_BIE; //Enables end of block interrupt
  4022ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4022b0:	f042 0201 	orr.w	r2, r2, #1
  4022b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	XDMAC->XDMAC_GIE |= (XDMAC_GIE_IE0 <<IMAGING_SENSOR_XDMAC_CH); //Enables channel interrupt
  4022b8:	68da      	ldr	r2, [r3, #12]
  4022ba:	f042 0202 	orr.w	r2, r2, #2
  4022be:	60da      	str	r2, [r3, #12]
	XDMAC->XDMAC_GE |= (XDMAC_GE_EN0 << IMAGING_SENSOR_XDMAC_CH); //Enables DMA channel
  4022c0:	69da      	ldr	r2, [r3, #28]
  4022c2:	f042 0202 	orr.w	r2, r2, #2
  4022c6:	61da      	str	r2, [r3, #28]
  4022c8:	4770      	bx	lr
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer0;
  4022ca:	4b07      	ldr	r3, [pc, #28]	; (4022e8 <imagingSensorStartDMA+0x90>)
  4022cc:	4a0b      	ldr	r2, [pc, #44]	; (4022fc <imagingSensorStartDMA+0xa4>)
  4022ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  4022d2:	e7d8      	b.n	402286 <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer1;
  4022d4:	4b04      	ldr	r3, [pc, #16]	; (4022e8 <imagingSensorStartDMA+0x90>)
  4022d6:	4a0a      	ldr	r2, [pc, #40]	; (402300 <imagingSensorStartDMA+0xa8>)
  4022d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  4022dc:	e7d3      	b.n	402286 <imagingSensorStartDMA+0x2e>
		XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CDA = (uint32_t)imageBuffer2;
  4022de:	4b02      	ldr	r3, [pc, #8]	; (4022e8 <imagingSensorStartDMA+0x90>)
  4022e0:	4a08      	ldr	r2, [pc, #32]	; (402304 <imagingSensorStartDMA+0xac>)
  4022e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		break;
  4022e6:	e7ce      	b.n	402286 <imagingSensorStartDMA+0x2e>
  4022e8:	40078000 	.word	0x40078000
  4022ec:	400e0f64 	.word	0x400e0f64
  4022f0:	204004a0 	.word	0x204004a0
  4022f4:	aaaaaaab 	.word	0xaaaaaaab
  4022f8:	22043001 	.word	0x22043001
  4022fc:	204004a8 	.word	0x204004a8
  402300:	2041c0a8 	.word	0x2041c0a8
  402304:	20437ca8 	.word	0x20437ca8

00402308 <imagingSensorItInit>:
void imagingSensorItInit() {
	//PIOA->PIO_PCIER = PIO_PCISR_DRDY; //Enable Data Ready Interrupt
	//PIOA->PIO_PCIDR |= (PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled

	//PIOA->PIO_PCIER = (PIO_PCIDR_OVRE); //Enable Data Ready Interrupt
	PIOA->PIO_PCIDR |= (PIO_PCIDR_DRDY)|(PIO_PCIDR_RXBUFF)|(PIO_PCIDR_ENDRX)|(PIO_PCIDR_OVRE); //Makes sure other interrupts are disabled
  402308:	4a03      	ldr	r2, [pc, #12]	; (402318 <imagingSensorItInit+0x10>)
  40230a:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
  40230e:	f043 030f 	orr.w	r3, r3, #15
  402312:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
  402316:	4770      	bx	lr
  402318:	400e0e00 	.word	0x400e0e00

0040231c <imageSensorVSyncItInit>:
}

void imageSensorVSyncItInit() {
	PIOA->PIO_PER		|= VSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  40231c:	4b12      	ldr	r3, [pc, #72]	; (402368 <imageSensorVSyncItInit+0x4c>)
  40231e:	681a      	ldr	r2, [r3, #0]
  402320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402324:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= VSYNC_MASK; //Disables output on this pin.
  402326:	695a      	ldr	r2, [r3, #20]
  402328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40232c:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= VSYNC_MASK; //Enables pulldown resistor
  40232e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  402332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= VSYNC_MASK; //Enables the input change interrupt
  40233a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40233c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402340:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= VSYNC_MASK; //Enables additional Interrupt modes
  402342:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  402346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40234a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= VSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  40234e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  402352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402356:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR		|= VSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  40235a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  40235e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402362:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402366:	4770      	bx	lr
  402368:	400e0e00 	.word	0x400e0e00

0040236c <imageSensorHSyncItInit>:
	//		printf("VSync is set as input");
	
}

void imageSensorHSyncItInit() {
	PIOA->PIO_PER		|= HSYNC_MASK; //PIO Enable. Takes control away from peripheral (is this OK?)
  40236c:	4b12      	ldr	r3, [pc, #72]	; (4023b8 <imageSensorHSyncItInit+0x4c>)
  40236e:	681a      	ldr	r2, [r3, #0]
  402370:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402374:	601a      	str	r2, [r3, #0]
	PIOA->PIO_ODR		|= HSYNC_MASK; //Disables output on this pin.
  402376:	695a      	ldr	r2, [r3, #20]
  402378:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40237c:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PPDER		|= HSYNC_MASK; //Enables pulldown resistor
  40237e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  402382:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402386:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	PIOA->PIO_IER		|= HSYNC_MASK; //Enables the input change interrupt
  40238a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40238c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  402390:	641a      	str	r2, [r3, #64]	; 0x40
	PIOA->PIO_AIMER		|= HSYNC_MASK; //Enables additional Interrupt modes
  402392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  402396:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  40239a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	PIOA->PIO_ESR		|= HSYNC_MASK; //Enables edge detect. (Edge detect is on by default)
  40239e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  4023a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4023a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_FELLSR		|= HSYNC_MASK; //Edge detect is for falling edge (Falling edge is on by default)
  4023aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  4023ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4023b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4023b6:	4770      	bx	lr
  4023b8:	400e0e00 	.word	0x400e0e00

004023bc <imagingSensorLoadHeader>:
	
	
}

void imagingSensorLoadHeader(){
  4023bc:	b500      	push	{lr}
  4023be:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t headerTemp[SDMMC_BLOCK_SIZE] = {0};
  4023c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4023c6:	2100      	movs	r1, #0
  4023c8:	4668      	mov	r0, sp
  4023ca:	4b0e      	ldr	r3, [pc, #56]	; (402404 <imagingSensorLoadHeader+0x48>)
  4023cc:	4798      	blx	r3
	uint32_t *header = (uint32_t *)headerTemp;

	uint32_t writeKey[4] = {0};
	sd_mmc_init_read_blocks(SD_SLOT_NB,HEADER_SECTOR,1);
  4023ce:	2201      	movs	r2, #1
  4023d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
  4023d4:	2000      	movs	r0, #0
  4023d6:	4b0c      	ldr	r3, [pc, #48]	; (402408 <imagingSensorLoadHeader+0x4c>)
  4023d8:	4798      	blx	r3
	sd_mmc_start_read_blocks(headerTemp,1);
  4023da:	2101      	movs	r1, #1
  4023dc:	4668      	mov	r0, sp
  4023de:	4b0b      	ldr	r3, [pc, #44]	; (40240c <imagingSensorLoadHeader+0x50>)
  4023e0:	4798      	blx	r3
	sd_mmc_wait_end_of_read_blocks(false);
  4023e2:	2000      	movs	r0, #0
  4023e4:	4b0a      	ldr	r3, [pc, #40]	; (402410 <imagingSensorLoadHeader+0x54>)
  4023e6:	4798      	blx	r3

	gain				= header[HEADER_GAIN_POS];
  4023e8:	9a04      	ldr	r2, [sp, #16]
  4023ea:	4b0a      	ldr	r3, [pc, #40]	; (402414 <imagingSensorLoadHeader+0x58>)
  4023ec:	601a      	str	r2, [r3, #0]
	//ledValue			= ((100- header[HEADER_LED_POS])*0x0FFF)/100; //header should be between 0 and 100; Used for DAC
	ledValue			= header[HEADER_LED_POS]; //header should be between 0 and 255;
  4023ee:	9a05      	ldr	r2, [sp, #20]
  4023f0:	4b09      	ldr	r3, [pc, #36]	; (402418 <imagingSensorLoadHeader+0x5c>)
  4023f2:	601a      	str	r2, [r3, #0]
	numFramesToRecord	= header[HEADER_NUM_FRAMES_POS];
  4023f4:	9a06      	ldr	r2, [sp, #24]
  4023f6:	4b09      	ldr	r3, [pc, #36]	; (40241c <imagingSensorLoadHeader+0x60>)
  4023f8:	601a      	str	r2, [r3, #0]


}
  4023fa:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
  4023fe:	f85d fb04 	ldr.w	pc, [sp], #4
  402402:	bf00      	nop
  402404:	00402a39 	.word	0x00402a39
  402408:	00400941 	.word	0x00400941
  40240c:	00400a15 	.word	0x00400a15
  402410:	00400a3d 	.word	0x00400a3d
  402414:	20400010 	.word	0x20400010
  402418:	204538a8 	.word	0x204538a8
  40241c:	204538b0 	.word	0x204538b0

00402420 <imagingSensorCaptureEnable>:
void imagingSensorCaptureEnable() {
	PIOA->PIO_PCMR |= PIO_PCMR_PCEN ;
  402420:	4a03      	ldr	r2, [pc, #12]	; (402430 <imagingSensorCaptureEnable+0x10>)
  402422:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  402426:	f043 0301 	orr.w	r3, r3, #1
  40242a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  40242e:	4770      	bx	lr
  402430:	400e0e00 	.word	0x400e0e00

00402434 <imagingSensorCaptureDisable>:
	
}

void imagingSensorCaptureDisable() {
	PIOA->PIO_PCMR &= (uint32_t)(~PIO_PCMR_PCEN) ;
  402434:	4a03      	ldr	r2, [pc, #12]	; (402444 <imagingSensorCaptureDisable+0x10>)
  402436:	f8d2 3150 	ldr.w	r3, [r2, #336]	; 0x150
  40243a:	f023 0301 	bic.w	r3, r3, #1
  40243e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  402442:	4770      	bx	lr
  402444:	400e0e00 	.word	0x400e0e00

00402448 <imagingSensorSetup>:
void imagingSensorSetup() {
  402448:	b508      	push	{r3, lr}
	imagingSensorCaptureDisable();//makes sure PIo Capture is disabled
  40244a:	4b0f      	ldr	r3, [pc, #60]	; (402488 <imagingSensorSetup+0x40>)
  40244c:	4798      	blx	r3
	pmc_enable_periph_clk( ID_PIOA ); //Sets PIO clock
  40244e:	200a      	movs	r0, #10
  402450:	4b0e      	ldr	r3, [pc, #56]	; (40248c <imagingSensorSetup+0x44>)
  402452:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402454:	4b0e      	ldr	r3, [pc, #56]	; (402490 <imagingSensorSetup+0x48>)
  402456:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40245a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40245e:	2140      	movs	r1, #64	; 0x40
  402460:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402464:	601a      	str	r2, [r3, #0]
	imagingSensorItInit(); //Sets up interrupts //Might need to change interrupts for DMA transfer
  402466:	4b0b      	ldr	r3, [pc, #44]	; (402494 <imagingSensorSetup+0x4c>)
  402468:	4798      	blx	r3
	imagingSensorDMAInit();
  40246a:	4b0b      	ldr	r3, [pc, #44]	; (402498 <imagingSensorSetup+0x50>)
  40246c:	4798      	blx	r3
	imagingSensorParamInit(); //Configures PIO Capture settings
  40246e:	4b0b      	ldr	r3, [pc, #44]	; (40249c <imagingSensorSetup+0x54>)
  402470:	4798      	blx	r3
	imageSensorVSyncItInit();//Sets up VSync interrupt to detect end of frame
  402472:	4b0b      	ldr	r3, [pc, #44]	; (4024a0 <imagingSensorSetup+0x58>)
  402474:	4798      	blx	r3
	imageSensorHSyncItInit();
  402476:	4b0b      	ldr	r3, [pc, #44]	; (4024a4 <imagingSensorSetup+0x5c>)
  402478:	4798      	blx	r3
	packetCMOS.chip = IMAGING_SENSOR_ADR;
  40247a:	4b0b      	ldr	r3, [pc, #44]	; (4024a8 <imagingSensorSetup+0x60>)
  40247c:	2218      	movs	r2, #24
  40247e:	741a      	strb	r2, [r3, #16]
	packetCMOS.addr_length = 1;
  402480:	2201      	movs	r2, #1
  402482:	605a      	str	r2, [r3, #4]
  402484:	bd08      	pop	{r3, pc}
  402486:	bf00      	nop
  402488:	00402435 	.word	0x00402435
  40248c:	00401dcd 	.word	0x00401dcd
  402490:	e000e100 	.word	0xe000e100
  402494:	00402309 	.word	0x00402309
  402498:	00402235 	.word	0x00402235
  40249c:	00402221 	.word	0x00402221
  4024a0:	0040231d 	.word	0x0040231d
  4024a4:	0040236d 	.word	0x0040236d
  4024a8:	20453908 	.word	0x20453908

004024ac <checkVSync>:
}

void checkVSync() {
  4024ac:	b508      	push	{r3, lr}
	if (pcISR & VSYNC_MASK) 
  4024ae:	4b3b      	ldr	r3, [pc, #236]	; (40259c <checkVSync+0xf0>)
  4024b0:	681b      	ldr	r3, [r3, #0]
  4024b2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4024b6:	d009      	beq.n	4024cc <checkVSync+0x20>
		
		//frameNumber++;
		//if (frameNumber%10==1)
		//	ioport_toggle_pin_level(PIO_PD1_IDX);

		if (captureEnabled && startRecording) 
  4024b8:	4b39      	ldr	r3, [pc, #228]	; (4025a0 <checkVSync+0xf4>)
  4024ba:	781b      	ldrb	r3, [r3, #0]
  4024bc:	b113      	cbz	r3, 4024c4 <checkVSync+0x18>
  4024be:	4b39      	ldr	r3, [pc, #228]	; (4025a4 <checkVSync+0xf8>)
  4024c0:	781b      	ldrb	r3, [r3, #0]
  4024c2:	b923      	cbnz	r3, 4024ce <checkVSync+0x22>
			#endif
			
			//testPoint = 1;
			//------------------------------------------------
		}
		else if(startRecording) { //waits for the first VSync to start capture. This makes sure we capture a full first frame
  4024c4:	4b37      	ldr	r3, [pc, #220]	; (4025a4 <checkVSync+0xf8>)
  4024c6:	781b      	ldrb	r3, [r3, #0]
  4024c8:	2b00      	cmp	r3, #0
  4024ca:	d15a      	bne.n	402582 <checkVSync+0xd6>
  4024cc:	bd08      	pop	{r3, pc}
			captureEnabled = 0;
  4024ce:	2300      	movs	r3, #0
  4024d0:	4a33      	ldr	r2, [pc, #204]	; (4025a0 <checkVSync+0xf4>)
  4024d2:	7013      	strb	r3, [r2, #0]
			startRecording = 0;
  4024d4:	4a33      	ldr	r2, [pc, #204]	; (4025a4 <checkVSync+0xf8>)
  4024d6:	7013      	strb	r3, [r2, #0]
			imagingSensorCaptureDisable();
  4024d8:	4b33      	ldr	r3, [pc, #204]	; (4025a8 <checkVSync+0xfc>)
  4024da:	4798      	blx	r3
			switch (frameNumber % 3)
  4024dc:	4b33      	ldr	r3, [pc, #204]	; (4025ac <checkVSync+0x100>)
  4024de:	681a      	ldr	r2, [r3, #0]
  4024e0:	4b33      	ldr	r3, [pc, #204]	; (4025b0 <checkVSync+0x104>)
  4024e2:	fba3 1302 	umull	r1, r3, r3, r2
  4024e6:	085b      	lsrs	r3, r3, #1
  4024e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4024ec:	1ad3      	subs	r3, r2, r3
  4024ee:	2b01      	cmp	r3, #1
  4024f0:	d02b      	beq.n	40254a <checkVSync+0x9e>
  4024f2:	b1e3      	cbz	r3, 40252e <checkVSync+0x82>
  4024f4:	2b02      	cmp	r3, #2
  4024f6:	d036      	beq.n	402566 <checkVSync+0xba>
			lineCount = 0;
  4024f8:	2300      	movs	r3, #0
  4024fa:	4a2e      	ldr	r2, [pc, #184]	; (4025b4 <checkVSync+0x108>)
  4024fc:	6013      	str	r3, [r2, #0]
			frameNumber++;
  4024fe:	4a2b      	ldr	r2, [pc, #172]	; (4025ac <checkVSync+0x100>)
  402500:	6811      	ldr	r1, [r2, #0]
  402502:	3101      	adds	r1, #1
  402504:	6011      	str	r1, [r2, #0]
			overflowCount = 0;
  402506:	492c      	ldr	r1, [pc, #176]	; (4025b8 <checkVSync+0x10c>)
  402508:	600b      	str	r3, [r1, #0]
			xferDMAComplete = 0;
  40250a:	492c      	ldr	r1, [pc, #176]	; (4025bc <checkVSync+0x110>)
  40250c:	600b      	str	r3, [r1, #0]
			if (frameNumber <= sdImageWriteFrameNum + 2) 
  40250e:	4b2c      	ldr	r3, [pc, #176]	; (4025c0 <checkVSync+0x114>)
  402510:	681b      	ldr	r3, [r3, #0]
  402512:	6812      	ldr	r2, [r2, #0]
  402514:	3302      	adds	r3, #2
  402516:	4293      	cmp	r3, r2
  402518:	d3d8      	bcc.n	4024cc <checkVSync+0x20>
				startRecording = 1;
  40251a:	2301      	movs	r3, #1
  40251c:	4a21      	ldr	r2, [pc, #132]	; (4025a4 <checkVSync+0xf8>)
  40251e:	7013      	strb	r3, [r2, #0]
				captureEnabled = 1;
  402520:	4a1f      	ldr	r2, [pc, #124]	; (4025a0 <checkVSync+0xf4>)
  402522:	7013      	strb	r3, [r2, #0]
				imagingSensorStartDMA();
  402524:	4b27      	ldr	r3, [pc, #156]	; (4025c4 <checkVSync+0x118>)
  402526:	4798      	blx	r3
				imagingSensorCaptureEnable();
  402528:	4b27      	ldr	r3, [pc, #156]	; (4025c8 <checkVSync+0x11c>)
  40252a:	4798      	blx	r3
  40252c:	bd08      	pop	{r3, pc}
				imageBuffer0[buffSize - 1] = frameNumber;
  40252e:	4b1f      	ldr	r3, [pc, #124]	; (4025ac <checkVSync+0x100>)
  402530:	6819      	ldr	r1, [r3, #0]
  402532:	4b26      	ldr	r3, [pc, #152]	; (4025cc <checkVSync+0x120>)
  402534:	4a26      	ldr	r2, [pc, #152]	; (4025d0 <checkVSync+0x124>)
  402536:	5099      	str	r1, [r3, r2]
				imageBuffer0[buffSize - 3] = lineCount;
  402538:	4a1e      	ldr	r2, [pc, #120]	; (4025b4 <checkVSync+0x108>)
  40253a:	6811      	ldr	r1, [r2, #0]
  40253c:	4a25      	ldr	r2, [pc, #148]	; (4025d4 <checkVSync+0x128>)
  40253e:	5099      	str	r1, [r3, r2]
				imageBuffer0[buffSize - 4] = xferDMAComplete; //Overflow flag
  402540:	4a1e      	ldr	r2, [pc, #120]	; (4025bc <checkVSync+0x110>)
  402542:	6811      	ldr	r1, [r2, #0]
  402544:	4a24      	ldr	r2, [pc, #144]	; (4025d8 <checkVSync+0x12c>)
  402546:	5099      	str	r1, [r3, r2]
				break;
  402548:	e7d6      	b.n	4024f8 <checkVSync+0x4c>
				imageBuffer1[buffSize - 1] = frameNumber;
  40254a:	4b18      	ldr	r3, [pc, #96]	; (4025ac <checkVSync+0x100>)
  40254c:	6819      	ldr	r1, [r3, #0]
  40254e:	4b23      	ldr	r3, [pc, #140]	; (4025dc <checkVSync+0x130>)
  402550:	4a1f      	ldr	r2, [pc, #124]	; (4025d0 <checkVSync+0x124>)
  402552:	5099      	str	r1, [r3, r2]
				imageBuffer1[buffSize - 3] = lineCount;
  402554:	4a17      	ldr	r2, [pc, #92]	; (4025b4 <checkVSync+0x108>)
  402556:	6811      	ldr	r1, [r2, #0]
  402558:	4a1e      	ldr	r2, [pc, #120]	; (4025d4 <checkVSync+0x128>)
  40255a:	5099      	str	r1, [r3, r2]
				imageBuffer1[buffSize - 4] = xferDMAComplete; //Overflow flag
  40255c:	4a17      	ldr	r2, [pc, #92]	; (4025bc <checkVSync+0x110>)
  40255e:	6811      	ldr	r1, [r2, #0]
  402560:	4a1d      	ldr	r2, [pc, #116]	; (4025d8 <checkVSync+0x12c>)
  402562:	5099      	str	r1, [r3, r2]
				break;
  402564:	e7c8      	b.n	4024f8 <checkVSync+0x4c>
				imageBuffer2[buffSize - 1] = frameNumber;
  402566:	4b11      	ldr	r3, [pc, #68]	; (4025ac <checkVSync+0x100>)
  402568:	6819      	ldr	r1, [r3, #0]
  40256a:	4b1d      	ldr	r3, [pc, #116]	; (4025e0 <checkVSync+0x134>)
  40256c:	4a18      	ldr	r2, [pc, #96]	; (4025d0 <checkVSync+0x124>)
  40256e:	5099      	str	r1, [r3, r2]
				imageBuffer2[buffSize - 3] = lineCount;
  402570:	4a10      	ldr	r2, [pc, #64]	; (4025b4 <checkVSync+0x108>)
  402572:	6811      	ldr	r1, [r2, #0]
  402574:	4a17      	ldr	r2, [pc, #92]	; (4025d4 <checkVSync+0x128>)
  402576:	5099      	str	r1, [r3, r2]
				imageBuffer2[buffSize - 4] = xferDMAComplete; //Overflow flag
  402578:	4a10      	ldr	r2, [pc, #64]	; (4025bc <checkVSync+0x110>)
  40257a:	6811      	ldr	r1, [r2, #0]
  40257c:	4a16      	ldr	r2, [pc, #88]	; (4025d8 <checkVSync+0x12c>)
  40257e:	5099      	str	r1, [r3, r2]
				break;
  402580:	e7ba      	b.n	4024f8 <checkVSync+0x4c>
			captureEnabled = 1;
  402582:	2201      	movs	r2, #1
  402584:	4b06      	ldr	r3, [pc, #24]	; (4025a0 <checkVSync+0xf4>)
  402586:	701a      	strb	r2, [r3, #0]
			
			//frameNumber = 0;
			lineCount = 0;
  402588:	2300      	movs	r3, #0
  40258a:	4a0a      	ldr	r2, [pc, #40]	; (4025b4 <checkVSync+0x108>)
  40258c:	6013      	str	r3, [r2, #0]
			overflowCount = 0;
  40258e:	4a0a      	ldr	r2, [pc, #40]	; (4025b8 <checkVSync+0x10c>)
  402590:	6013      	str	r3, [r2, #0]
			imagingSensorStartDMA();
  402592:	4b0c      	ldr	r3, [pc, #48]	; (4025c4 <checkVSync+0x118>)
  402594:	4798      	blx	r3
			imagingSensorCaptureEnable();
  402596:	4b0c      	ldr	r3, [pc, #48]	; (4025c8 <checkVSync+0x11c>)
  402598:	4798      	blx	r3

		//Need to add an overflow check.
		//Added a check to make sure pixelWordCount == NUM_PIXEL/4
		//Consider adding HSync to label each row in case missing pixels is an issue
	}
}
  40259a:	e797      	b.n	4024cc <checkVSync+0x20>
  40259c:	204538b8 	.word	0x204538b8
  4025a0:	2040049c 	.word	0x2040049c
  4025a4:	204538c0 	.word	0x204538c0
  4025a8:	00402435 	.word	0x00402435
  4025ac:	204004a0 	.word	0x204004a0
  4025b0:	aaaaaaab 	.word	0xaaaaaaab
  4025b4:	204538ac 	.word	0x204538ac
  4025b8:	204538b4 	.word	0x204538b4
  4025bc:	204538c8 	.word	0x204538c8
  4025c0:	204538bc 	.word	0x204538bc
  4025c4:	00402259 	.word	0x00402259
  4025c8:	00402421 	.word	0x00402421
  4025cc:	204004a8 	.word	0x204004a8
  4025d0:	0001bbfc 	.word	0x0001bbfc
  4025d4:	0001bbf4 	.word	0x0001bbf4
  4025d8:	0001bbf0 	.word	0x0001bbf0
  4025dc:	2041c0a8 	.word	0x2041c0a8
  4025e0:	20437ca8 	.word	0x20437ca8

004025e4 <PIOA_Handler>:

void PIOA_Handler(void)
{
  4025e4:	b508      	push	{r3, lr}
	pcISR = PIOA->PIO_ISR;
  4025e6:	4b0a      	ldr	r3, [pc, #40]	; (402610 <PIOA_Handler+0x2c>)
  4025e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  4025ea:	4b0a      	ldr	r3, [pc, #40]	; (402614 <PIOA_Handler+0x30>)
  4025ec:	601a      	str	r2, [r3, #0]
	if (pcISR & HSYNC_MASK)
  4025ee:	681b      	ldr	r3, [r3, #0]
  4025f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4025f4:	d004      	beq.n	402600 <PIOA_Handler+0x1c>
	{
		if (captureEnabled == 1)
  4025f6:	4b08      	ldr	r3, [pc, #32]	; (402618 <PIOA_Handler+0x34>)
  4025f8:	781b      	ldrb	r3, [r3, #0]
  4025fa:	b2db      	uxtb	r3, r3
  4025fc:	2b01      	cmp	r3, #1
  4025fe:	d002      	beq.n	402606 <PIOA_Handler+0x22>
		{
			lineCount++;
		}
	}
	checkVSync();
  402600:	4b06      	ldr	r3, [pc, #24]	; (40261c <PIOA_Handler+0x38>)
  402602:	4798      	blx	r3
  402604:	bd08      	pop	{r3, pc}
			lineCount++;
  402606:	4a06      	ldr	r2, [pc, #24]	; (402620 <PIOA_Handler+0x3c>)
  402608:	6813      	ldr	r3, [r2, #0]
  40260a:	3301      	adds	r3, #1
  40260c:	6013      	str	r3, [r2, #0]
  40260e:	e7f7      	b.n	402600 <PIOA_Handler+0x1c>
  402610:	400e0e00 	.word	0x400e0e00
  402614:	204538b8 	.word	0x204538b8
  402618:	2040049c 	.word	0x2040049c
  40261c:	004024ad 	.word	0x004024ad
  402620:	204538ac 	.word	0x204538ac

00402624 <XDMAC_Handler>:

void XDMAC_Handler(void)
{
	uint32_t dma_status;

	dma_status = XDMAC->XDMAC_CHID[IMAGING_SENSOR_XDMAC_CH].XDMAC_CIS;
  402624:	4b04      	ldr	r3, [pc, #16]	; (402638 <XDMAC_Handler+0x14>)
  402626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c

	if (dma_status & XDMAC_CIS_BIS) 
  40262a:	f013 0f01 	tst.w	r3, #1
  40262e:	d002      	beq.n	402636 <XDMAC_Handler+0x12>
	{
		xferDMAComplete = 1;
  402630:	2201      	movs	r2, #1
  402632:	4b02      	ldr	r3, [pc, #8]	; (40263c <XDMAC_Handler+0x18>)
  402634:	601a      	str	r2, [r3, #0]
  402636:	4770      	bx	lr
  402638:	40078000 	.word	0x40078000
  40263c:	204538c8 	.word	0x204538c8

00402640 <PYTHON480_Init>:
/************************************************************************/
/*                           LOCAL FUNCTIONS                            */
/************************************************************************/

void PYTHON480_Init()
{
  402640:	b538      	push	{r3, r4, r5, lr}
	Enable_Clock_Management1();
  402642:	4b07      	ldr	r3, [pc, #28]	; (402660 <PYTHON480_Init+0x20>)
  402644:	4798      	blx	r3
	delay_ms(10);			// Small pause here for things to stabilize.
  402646:	4d07      	ldr	r5, [pc, #28]	; (402664 <PYTHON480_Init+0x24>)
  402648:	4628      	mov	r0, r5
  40264a:	4c07      	ldr	r4, [pc, #28]	; (402668 <PYTHON480_Init+0x28>)
  40264c:	47a0      	blx	r4
	Enable_Clock_Management2();
  40264e:	4b07      	ldr	r3, [pc, #28]	; (40266c <PYTHON480_Init+0x2c>)
  402650:	4798      	blx	r3
	delay_ms(10);
  402652:	4628      	mov	r0, r5
  402654:	47a0      	blx	r4
	Required_Uploads();
  402656:	4b06      	ldr	r3, [pc, #24]	; (402670 <PYTHON480_Init+0x30>)
  402658:	4798      	blx	r3
	Soft_PowerUp();
  40265a:	4b06      	ldr	r3, [pc, #24]	; (402674 <PYTHON480_Init+0x34>)
  40265c:	4798      	blx	r3
  40265e:	bd38      	pop	{r3, r4, r5, pc}
  402660:	004014a1 	.word	0x004014a1
  402664:	0003b440 	.word	0x0003b440
  402668:	20400001 	.word	0x20400001
  40266c:	004014e5 	.word	0x004014e5
  402670:	00401505 	.word	0x00401505
  402674:	004019a5 	.word	0x004019a5

00402678 <PYTHON480_Pin_Setup>:
	// Enable_Seq();			// Sequencer has already been enabled in Required Uploads..
}

void PYTHON480_Pin_Setup()
{
  402678:	b570      	push	{r4, r5, r6, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40267a:	4b1b      	ldr	r3, [pc, #108]	; (4026e8 <PYTHON480_Pin_Setup+0x70>)
  40267c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402680:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402682:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402686:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40268a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40268c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402690:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402694:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402696:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40269a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40269e:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026a0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026a4:	6319      	str	r1, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026a6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026a8:	2502      	movs	r5, #2
  4026aa:	611d      	str	r5, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026ac:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026b0:	635d      	str	r5, [r3, #52]	; 0x34
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026b2:	4e0e      	ldr	r6, [pc, #56]	; (4026ec <PYTHON480_Pin_Setup+0x74>)
  4026b4:	2301      	movs	r3, #1
  4026b6:	6133      	str	r3, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026b8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026bc:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026be:	4c0c      	ldr	r4, [pc, #48]	; (4026f0 <PYTHON480_Pin_Setup+0x78>)
  4026c0:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026c2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026c6:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LED_ENT_PIN, 1);
	
	// Set up RESET_N PIN
	ioport_set_pin_dir(RESET_N_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESET_N_PIN, 0);
	delay_ms(100);
  4026c8:	480a      	ldr	r0, [pc, #40]	; (4026f4 <PYTHON480_Pin_Setup+0x7c>)
  4026ca:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <PYTHON480_Pin_Setup+0x80>)
  4026cc:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026ce:	6325      	str	r5, [r4, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026d0:	2304      	movs	r3, #4
  4026d2:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026d8:	6363      	str	r3, [r4, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4026da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4026de:	6173      	str	r3, [r6, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026e0:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026e4:	6373      	str	r3, [r6, #52]	; 0x34
  4026e6:	bd70      	pop	{r4, r5, r6, pc}
  4026e8:	400e1400 	.word	0x400e1400
  4026ec:	400e0e00 	.word	0x400e0e00
  4026f0:	400e1000 	.word	0x400e1000
  4026f4:	00250a78 	.word	0x00250a78
  4026f8:	20400001 	.word	0x20400001

004026fc <main>:
/************************************************************************/
/*                            MAIN FUNCTION                             */
/************************************************************************/

int main (void)
{
  4026fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402700:	b083      	sub	sp, #12
	uint32_t writeNum = 0;
	uint32_t writeFrameNum = 0;
	
	
	// ========== Interrupt Managements ========== //	
	WDT->WDT_MR = WDT_MR_WDDIS;		// Disables WatchDog Timer
  402702:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402706:	4b8a      	ldr	r3, [pc, #552]	; (402930 <main+0x234>)
  402708:	605a      	str	r2, [r3, #4]
	//SCB_EnableICache();
	//SCB_EnableDCache();
	irq_initialize_vectors();		// IRQ: Interrupt Request Line
	cpu_irq_enable();
  40270a:	2201      	movs	r2, #1
  40270c:	4b89      	ldr	r3, [pc, #548]	; (402934 <main+0x238>)
  40270e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402710:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402714:	b662      	cpsie	i


	// ========== Microcontroller Initiation ========== //
	sysclk_init();
  402716:	4b88      	ldr	r3, [pc, #544]	; (402938 <main+0x23c>)
  402718:	4798      	blx	r3
	board_init();		// Sets up SD card slot pins
  40271a:	4b88      	ldr	r3, [pc, #544]	; (40293c <main+0x240>)
  40271c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40271e:	200a      	movs	r0, #10
  402720:	4c87      	ldr	r4, [pc, #540]	; (402940 <main+0x244>)
  402722:	47a0      	blx	r4
  402724:	200b      	movs	r0, #11
  402726:	47a0      	blx	r4
  402728:	2010      	movs	r0, #16
  40272a:	47a0      	blx	r4
	ioport_init();		// Turns on all peripheral clocks. could remove this to save power


	// ========== Clock Initiation ========== //
	enableSourceClk();	// Turns on SCK1 from MCU to drive CMOS sensor
  40272c:	4b85      	ldr	r3, [pc, #532]	; (402944 <main+0x248>)
  40272e:	4798      	blx	r3
	time_tick_init();
  402730:	4b85      	ldr	r3, [pc, #532]	; (402948 <main+0x24c>)
  402732:	4798      	blx	r3
	PWM_Init();
  402734:	4b85      	ldr	r3, [pc, #532]	; (40294c <main+0x250>)
  402736:	4798      	blx	r3
	//DACC_updateOutput(0x0FFF,1);
	
	
	// ========== Setup Microcontroller for PYTHON480 ========== //
	#ifdef NOIP1SN0480A
		PYTHON480_Pin_Setup();
  402738:	4b85      	ldr	r3, [pc, #532]	; (402950 <main+0x254>)
  40273a:	4798      	blx	r3
	
		// Python480 uses SPI, and lens & LED use I2C
		SPI_BitBang_init();
  40273c:	4b85      	ldr	r3, [pc, #532]	; (402954 <main+0x258>)
  40273e:	4798      	blx	r3
		TWIHS_init();
  402740:	4b85      	ldr	r3, [pc, #532]	; (402958 <main+0x25c>)
  402742:	4798      	blx	r3
	#endif
	
	
	// ========== Power Up PYTHON480 ========== //
	PYTHON480_Init();
  402744:	4b85      	ldr	r3, [pc, #532]	; (40295c <main+0x260>)
  402746:	4798      	blx	r3
	
	uint16_t Python_ID;
	Python_ID = SPI_Read(474);
  402748:	f44f 70ed 	mov.w	r0, #474	; 0x1da
  40274c:	4b84      	ldr	r3, [pc, #528]	; (402960 <main+0x264>)
  40274e:	4798      	blx	r3
	
	// Check SPI Communication: Read the Python480 register using the SPI connection
	if (Python_ID == 0x003F)
  402750:	283f      	cmp	r0, #63	; 0x3f
  402752:	d00d      	beq.n	402770 <main+0x74>

	//pmc_switch_pck_to_mck(ID_PIOA, 1);

	
	// ========== Configure PYHTON480 ========== //	
	ROI_Configuration();		// Check if 4 px vs 8px granularity
  402754:	4b83      	ldr	r3, [pc, #524]	; (402964 <main+0x268>)
  402756:	4798      	blx	r3
	
	Enable_Subsample();
  402758:	4b83      	ldr	r3, [pc, #524]	; (402968 <main+0x26c>)
  40275a:	4798      	blx	r3


	// ========== Micro SD Card Initialization ========== //
	sd_mmc_init();
  40275c:	4b83      	ldr	r3, [pc, #524]	; (40296c <main+0x270>)
  40275e:	4798      	blx	r3
	// Micro SD card slot connection check
	uint32_t SD_Check;
	
// 	while (sd_mmc_check(SD_SLOT_NB) != SD_MMC_OK)
// 	{}
	SD_Check = sd_mmc_check(SD_SLOT_NB);
  402760:	2000      	movs	r0, #0
  402762:	4b83      	ldr	r3, [pc, #524]	; (402970 <main+0x274>)
  402764:	4798      	blx	r3
	while (SD_Check != SD_MMC_OK) 
  402766:	b1f8      	cbz	r0, 4027a8 <main+0xac>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  402768:	4c82      	ldr	r4, [pc, #520]	; (402974 <main+0x278>)
 	{
		ioport_toggle_pin_level(LED_PIN);					// while the SD connection is NOT okay.. wait
		delay_ms(100);										// delete later when expansion PCB
  40276a:	4e83      	ldr	r6, [pc, #524]	; (402978 <main+0x27c>)
  40276c:	4d83      	ldr	r5, [pc, #524]	; (40297c <main+0x280>)
  40276e:	e014      	b.n	40279a <main+0x9e>
  402770:	4b80      	ldr	r3, [pc, #512]	; (402974 <main+0x278>)
  402772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402774:	f013 0f02 	tst.w	r3, #2
  402778:	d003      	beq.n	402782 <main+0x86>
		port->PIO_CODR = mask;
  40277a:	2202      	movs	r2, #2
  40277c:	4b7d      	ldr	r3, [pc, #500]	; (402974 <main+0x278>)
  40277e:	635a      	str	r2, [r3, #52]	; 0x34
  402780:	e7e8      	b.n	402754 <main+0x58>
	} else {
		port->PIO_SODR = mask;
  402782:	2202      	movs	r2, #2
  402784:	4b7b      	ldr	r3, [pc, #492]	; (402974 <main+0x278>)
  402786:	631a      	str	r2, [r3, #48]	; 0x30
  402788:	e7e4      	b.n	402754 <main+0x58>
  40278a:	2302      	movs	r3, #2
  40278c:	6323      	str	r3, [r4, #48]	; 0x30
  40278e:	4630      	mov	r0, r6
  402790:	47a8      	blx	r5
		SD_Check = sd_mmc_check(SD_SLOT_NB);
  402792:	2000      	movs	r0, #0
  402794:	4b76      	ldr	r3, [pc, #472]	; (402970 <main+0x274>)
  402796:	4798      	blx	r3
	while (SD_Check != SD_MMC_OK) 
  402798:	b130      	cbz	r0, 4027a8 <main+0xac>
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40279a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40279c:	f013 0f02 	tst.w	r3, #2
  4027a0:	d0f3      	beq.n	40278a <main+0x8e>
		port->PIO_CODR = mask;
  4027a2:	2302      	movs	r3, #2
  4027a4:	6363      	str	r3, [r4, #52]	; 0x34
  4027a6:	e7f2      	b.n	40278e <main+0x92>
	}
	
	if (sd_mmc_get_type(SD_SLOT_NB) == (CARD_TYPE_SD|CARD_TYPE_HC))
  4027a8:	2000      	movs	r0, #0
  4027aa:	4b75      	ldr	r3, [pc, #468]	; (402980 <main+0x284>)
  4027ac:	4798      	blx	r3
  4027ae:	2809      	cmp	r0, #9
  4027b0:	d04e      	beq.n	402850 <main+0x154>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4027b2:	2202      	movs	r2, #2
  4027b4:	4b6f      	ldr	r3, [pc, #444]	; (402974 <main+0x278>)
  4027b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	
	
//	#ifdef MSD
	// ========== Micro SD Card Data Transfer ========== //
	uint32_t sdCapacity = sd_mmc_get_capacity(SD_SLOT_NB);	// in KB
  4027b8:	2000      	movs	r0, #0
  4027ba:	4b72      	ldr	r3, [pc, #456]	; (402984 <main+0x288>)
  4027bc:	4798      	blx	r3
//	SD_Card_Write_Test();

	// ========== Stream Data from Imaging Sensor to SD Card ========= //
	imagingSensorLoadHeader();
  4027be:	4b72      	ldr	r3, [pc, #456]	; (402988 <main+0x28c>)
  4027c0:	4798      	blx	r3
	
	if (ledValue >= PWM_PERIOD_VALUE)
  4027c2:	4b72      	ldr	r3, [pc, #456]	; (40298c <main+0x290>)
  4027c4:	681b      	ldr	r3, [r3, #0]
  4027c6:	2bfe      	cmp	r3, #254	; 0xfe
  4027c8:	d902      	bls.n	4027d0 <main+0xd4>
		ledValue = 0;
  4027ca:	2200      	movs	r2, #0
  4027cc:	4b6f      	ldr	r3, [pc, #444]	; (40298c <main+0x290>)
  4027ce:	601a      	str	r2, [r3, #0]
	pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ledValue);
  4027d0:	4b6e      	ldr	r3, [pc, #440]	; (40298c <main+0x290>)
  4027d2:	681a      	ldr	r2, [r3, #0]
  4027d4:	496e      	ldr	r1, [pc, #440]	; (402990 <main+0x294>)
  4027d6:	486f      	ldr	r0, [pc, #444]	; (402994 <main+0x298>)
  4027d8:	4b6f      	ldr	r3, [pc, #444]	; (402998 <main+0x29c>)
  4027da:	4798      	blx	r3
	
	// ========== Try This ========== //
	numFramesToRecord = 600;		// More like number of seconds to record.. so # frames = numFramesToRecord * fps (20)
  4027dc:	f44f 7216 	mov.w	r2, #600	; 0x258
  4027e0:	4b6e      	ldr	r3, [pc, #440]	; (40299c <main+0x2a0>)
  4027e2:	601a      	str	r2, [r3, #0]

	imagingSensorSetup(); //sets interrupts, configures IO pins for DMA CMOS sensor
  4027e4:	4b6e      	ldr	r3, [pc, #440]	; (4029a0 <main+0x2a4>)
  4027e6:	4798      	blx	r3

	tick_start = time_tick_get();
  4027e8:	4b6e      	ldr	r3, [pc, #440]	; (4029a4 <main+0x2a8>)
  4027ea:	4798      	blx	r3
  4027ec:	4b6e      	ldr	r3, [pc, #440]	; (4029a8 <main+0x2ac>)
  4027ee:	6018      	str	r0, [r3, #0]
	while (time_tick_calc_delay(tick_start, time_tick_get()) < 5000)
  4027f0:	461e      	mov	r6, r3
  4027f2:	4d6c      	ldr	r5, [pc, #432]	; (4029a4 <main+0x2a8>)
  4027f4:	4c6d      	ldr	r4, [pc, #436]	; (4029ac <main+0x2b0>)
  4027f6:	6837      	ldr	r7, [r6, #0]
  4027f8:	47a8      	blx	r5
  4027fa:	4601      	mov	r1, r0
  4027fc:	4638      	mov	r0, r7
  4027fe:	47a0      	blx	r4
  402800:	f241 3387 	movw	r3, #4999	; 0x1387
  402804:	4298      	cmp	r0, r3
  402806:	d9f6      	bls.n	4027f6 <main+0xfa>
	{}
	
	sd_mmc_init_write_blocks(SD_SLOT_NB, STARTING_BLOCK, 50 * NB_BLOCKS_PER_FRAME);	
  402808:	f642 325c 	movw	r2, #11100	; 0x2b5c
  40280c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402810:	2000      	movs	r0, #0
  402812:	4b67      	ldr	r3, [pc, #412]	; (4029b0 <main+0x2b4>)
  402814:	4798      	blx	r3
	
	uint32_t curBlock = STARTING_BLOCK;
	uint32_t writeLineCount = 0;
	uint32_t writeCount = 0;
	
	tick_start = time_tick_get();
  402816:	4b63      	ldr	r3, [pc, #396]	; (4029a4 <main+0x2a8>)
  402818:	4798      	blx	r3
  40281a:	4b63      	ldr	r3, [pc, #396]	; (4029a8 <main+0x2ac>)
  40281c:	6018      	str	r0, [r3, #0]
	
	startRecording = 1;
  40281e:	2301      	movs	r3, #1
  402820:	4a64      	ldr	r2, [pc, #400]	; (4029b4 <main+0x2b8>)
  402822:	7013      	strb	r3, [r2, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402824:	2104      	movs	r1, #4
  402826:	4a64      	ldr	r2, [pc, #400]	; (4029b8 <main+0x2bc>)
  402828:	6311      	str	r1, [r2, #48]	; 0x30
  40282a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
  40282e:	6313      	str	r3, [r2, #48]	; 0x30
  402830:	2202      	movs	r2, #2
  402832:	4b50      	ldr	r3, [pc, #320]	; (402974 <main+0x278>)
  402834:	631a      	str	r2, [r3, #48]	; 0x30
	uint32_t curBlock = STARTING_BLOCK;
  402836:	f44f 6980 	mov.w	r9, #1024	; 0x400
	uint32_t writeFrameNum = 0;
  40283a:	2400      	movs	r4, #0
				imageBuffer0[buffSize - 2] = time_tick_calc_delay(tick_start, time_tick_get());
				sd_mmc_start_write_blocks(&imageBuffer0[0], NB_BLOCKS_PER_WRITE);
				break;
				
				case (1):
				imageBuffer1[buffSize - 2] = time_tick_calc_delay(tick_start, time_tick_get());
  40283c:	4f5a      	ldr	r7, [pc, #360]	; (4029a8 <main+0x2ac>)
  40283e:	4e59      	ldr	r6, [pc, #356]	; (4029a4 <main+0x2a8>)
  402840:	4d5a      	ldr	r5, [pc, #360]	; (4029ac <main+0x2b0>)
  402842:	f8df a19c 	ldr.w	sl, [pc, #412]	; 4029e0 <main+0x2e4>
  402846:	f8df 819c 	ldr.w	r8, [pc, #412]	; 4029e4 <main+0x2e8>
  40284a:	eb0a 0b08 	add.w	fp, sl, r8
  40284e:	e033      	b.n	4028b8 <main+0x1bc>
  402850:	2202      	movs	r2, #2
  402852:	4b48      	ldr	r3, [pc, #288]	; (402974 <main+0x278>)
  402854:	631a      	str	r2, [r3, #48]	; 0x30
  402856:	e7af      	b.n	4027b8 <main+0xbc>
				imageBuffer0[buffSize - 2] = time_tick_calc_delay(tick_start, time_tick_get());
  402858:	683b      	ldr	r3, [r7, #0]
  40285a:	9301      	str	r3, [sp, #4]
  40285c:	47b0      	blx	r6
  40285e:	4601      	mov	r1, r0
  402860:	9801      	ldr	r0, [sp, #4]
  402862:	47a8      	blx	r5
  402864:	4b55      	ldr	r3, [pc, #340]	; (4029bc <main+0x2c0>)
  402866:	f843 0008 	str.w	r0, [r3, r8]
				sd_mmc_start_write_blocks(&imageBuffer0[0], NB_BLOCKS_PER_WRITE);
  40286a:	21de      	movs	r1, #222	; 0xde
  40286c:	4618      	mov	r0, r3
  40286e:	4b54      	ldr	r3, [pc, #336]	; (4029c0 <main+0x2c4>)
  402870:	4798      	blx	r3
					sd_mmc_start_write_blocks(&imageBuffer2[0],NB_BLOCKS_PER_WRITE);//NB_BLOCKS_PER_WRITE
					break;
				}			
			#endif

			sd_mmc_wait_end_of_write_blocks(false);
  402872:	2000      	movs	r0, #0
  402874:	4b53      	ldr	r3, [pc, #332]	; (4029c4 <main+0x2c8>)
  402876:	4798      	blx	r3
			writeFrameNum++;	
  402878:	3401      	adds	r4, #1
			sdImageWriteFrameNum = writeFrameNum;
  40287a:	4b53      	ldr	r3, [pc, #332]	; (4029c8 <main+0x2cc>)
  40287c:	601c      	str	r4, [r3, #0]
					startRecording = 1;
				//}
			#endif
			
			#ifdef NOIP1SN0480A
				startRecording = 1;
  40287e:	2201      	movs	r2, #1
  402880:	4b4c      	ldr	r3, [pc, #304]	; (4029b4 <main+0x2b8>)
  402882:	701a      	strb	r2, [r3, #0]
			
			#ifdef EV76C454
				startRecording = 1;
			#endif
			
			if (writeFrameNum % 50 == 0) 
  402884:	4b51      	ldr	r3, [pc, #324]	; (4029cc <main+0x2d0>)
  402886:	fba3 2304 	umull	r2, r3, r3, r4
  40288a:	091b      	lsrs	r3, r3, #4
  40288c:	2232      	movs	r2, #50	; 0x32
  40288e:	fb02 4313 	mls	r3, r2, r3, r4
  402892:	2b00      	cmp	r3, #0
  402894:	d03c      	beq.n	402910 <main+0x214>
		//valueLED = (valueLED+400)&0x0FFF; //higher value less bright
		//DACC_updateOutput(valueLED,1);

		//if (frameNumber>=numFramesToRecord)
		//{ //end at number of frames
		if (time_tick_calc_delay(tick_start, time_tick_get()) >= numFramesToRecord * 1000)
  402896:	683b      	ldr	r3, [r7, #0]
  402898:	9301      	str	r3, [sp, #4]
  40289a:	47b0      	blx	r6
  40289c:	4601      	mov	r1, r0
  40289e:	9801      	ldr	r0, [sp, #4]
  4028a0:	47a8      	blx	r5
  4028a2:	4b3e      	ldr	r3, [pc, #248]	; (40299c <main+0x2a0>)
  4028a4:	681a      	ldr	r2, [r3, #0]
  4028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4028aa:	fb03 f302 	mul.w	r3, r3, r2
  4028ae:	4298      	cmp	r0, r3
  4028b0:	d236      	bcs.n	402920 <main+0x224>
			
			while(1)
			{}
		}
//		startRecording = 1;
		testPoint = 0;				
  4028b2:	2200      	movs	r2, #0
  4028b4:	4b46      	ldr	r3, [pc, #280]	; (4029d0 <main+0x2d4>)
  4028b6:	601a      	str	r2, [r3, #0]
		if (frameNumber > writeFrameNum)
  4028b8:	4b46      	ldr	r3, [pc, #280]	; (4029d4 <main+0x2d8>)
  4028ba:	681b      	ldr	r3, [r3, #0]
  4028bc:	429c      	cmp	r4, r3
  4028be:	d2ea      	bcs.n	402896 <main+0x19a>
			switch (writeFrameNum % 3)
  4028c0:	4b45      	ldr	r3, [pc, #276]	; (4029d8 <main+0x2dc>)
  4028c2:	fba3 2304 	umull	r2, r3, r3, r4
  4028c6:	085b      	lsrs	r3, r3, #1
  4028c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4028cc:	1ae3      	subs	r3, r4, r3
  4028ce:	2b01      	cmp	r3, #1
  4028d0:	d011      	beq.n	4028f6 <main+0x1fa>
  4028d2:	2b00      	cmp	r3, #0
  4028d4:	d0c0      	beq.n	402858 <main+0x15c>
  4028d6:	2b02      	cmp	r3, #2
  4028d8:	d1cb      	bne.n	402872 <main+0x176>
				imageBuffer2[buffSize - 2] = time_tick_calc_delay(tick_start, time_tick_get());
  4028da:	683b      	ldr	r3, [r7, #0]
  4028dc:	9301      	str	r3, [sp, #4]
  4028de:	47b0      	blx	r6
  4028e0:	4601      	mov	r1, r0
  4028e2:	9801      	ldr	r0, [sp, #4]
  4028e4:	47a8      	blx	r5
  4028e6:	4b3d      	ldr	r3, [pc, #244]	; (4029dc <main+0x2e0>)
  4028e8:	f843 0008 	str.w	r0, [r3, r8]
				sd_mmc_start_write_blocks(&imageBuffer2[0], NB_BLOCKS_PER_WRITE);
  4028ec:	21de      	movs	r1, #222	; 0xde
  4028ee:	4618      	mov	r0, r3
  4028f0:	4b33      	ldr	r3, [pc, #204]	; (4029c0 <main+0x2c4>)
  4028f2:	4798      	blx	r3
				break;
  4028f4:	e7bd      	b.n	402872 <main+0x176>
				imageBuffer1[buffSize - 2] = time_tick_calc_delay(tick_start, time_tick_get());
  4028f6:	683b      	ldr	r3, [r7, #0]
  4028f8:	9301      	str	r3, [sp, #4]
  4028fa:	47b0      	blx	r6
  4028fc:	4601      	mov	r1, r0
  4028fe:	9801      	ldr	r0, [sp, #4]
  402900:	47a8      	blx	r5
  402902:	f8cb 0000 	str.w	r0, [fp]
				sd_mmc_start_write_blocks(&imageBuffer1[0], NB_BLOCKS_PER_WRITE);
  402906:	21de      	movs	r1, #222	; 0xde
  402908:	4650      	mov	r0, sl
  40290a:	4b2d      	ldr	r3, [pc, #180]	; (4029c0 <main+0x2c4>)
  40290c:	4798      	blx	r3
				break;
  40290e:	e7b0      	b.n	402872 <main+0x176>
				curBlock += 50 * NB_BLOCKS_PER_FRAME;
  402910:	f642 325c 	movw	r2, #11100	; 0x2b5c
  402914:	4491      	add	r9, r2
				sd_mmc_init_write_blocks(SD_SLOT_NB, curBlock, 50 * NB_BLOCKS_PER_FRAME);
  402916:	4649      	mov	r1, r9
  402918:	2000      	movs	r0, #0
  40291a:	4b25      	ldr	r3, [pc, #148]	; (4029b0 <main+0x2b4>)
  40291c:	4798      	blx	r3
  40291e:	e7ba      	b.n	402896 <main+0x19a>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402920:	2202      	movs	r2, #2
  402922:	4b14      	ldr	r3, [pc, #80]	; (402974 <main+0x278>)
  402924:	635a      	str	r2, [r3, #52]	; 0x34
  402926:	2201      	movs	r2, #1
  402928:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40292c:	635a      	str	r2, [r3, #52]	; 0x34
  40292e:	e7fe      	b.n	40292e <main+0x232>
  402930:	400e1850 	.word	0x400e1850
  402934:	2040000a 	.word	0x2040000a
  402938:	00401c39 	.word	0x00401c39
  40293c:	00401ed9 	.word	0x00401ed9
  402940:	00401dcd 	.word	0x00401dcd
  402944:	004021ed 	.word	0x004021ed
  402948:	00401bf1 	.word	0x00401bf1
  40294c:	004013e5 	.word	0x004013e5
  402950:	00402679 	.word	0x00402679
  402954:	0040138d 	.word	0x0040138d
  402958:	004012f9 	.word	0x004012f9
  40295c:	00402641 	.word	0x00402641
  402960:	00401b05 	.word	0x00401b05
  402964:	00401a01 	.word	0x00401a01
  402968:	004019e5 	.word	0x004019e5
  40296c:	0040027d 	.word	0x0040027d
  402970:	0040029d 	.word	0x0040029d
  402974:	400e1400 	.word	0x400e1400
  402978:	00250a78 	.word	0x00250a78
  40297c:	20400001 	.word	0x20400001
  402980:	004008f9 	.word	0x004008f9
  402984:	0040091d 	.word	0x0040091d
  402988:	004023bd 	.word	0x004023bd
  40298c:	204538a8 	.word	0x204538a8
  402990:	204538cc 	.word	0x204538cc
  402994:	40020000 	.word	0x40020000
  402998:	004012b7 	.word	0x004012b7
  40299c:	204538b0 	.word	0x204538b0
  4029a0:	00402449 	.word	0x00402449
  4029a4:	00401c1d 	.word	0x00401c1d
  4029a8:	20453920 	.word	0x20453920
  4029ac:	00401c29 	.word	0x00401c29
  4029b0:	00400aa5 	.word	0x00400aa5
  4029b4:	204538c0 	.word	0x204538c0
  4029b8:	400e1000 	.word	0x400e1000
  4029bc:	204004a8 	.word	0x204004a8
  4029c0:	00400b31 	.word	0x00400b31
  4029c4:	00400b59 	.word	0x00400b59
  4029c8:	204538bc 	.word	0x204538bc
  4029cc:	51eb851f 	.word	0x51eb851f
  4029d0:	204538c4 	.word	0x204538c4
  4029d4:	204004a0 	.word	0x204004a0
  4029d8:	aaaaaaab 	.word	0xaaaaaaab
  4029dc:	20437ca8 	.word	0x20437ca8
  4029e0:	2041c0a8 	.word	0x2041c0a8
  4029e4:	0001bbf8 	.word	0x0001bbf8

004029e8 <__libc_init_array>:
  4029e8:	b570      	push	{r4, r5, r6, lr}
  4029ea:	4e0f      	ldr	r6, [pc, #60]	; (402a28 <__libc_init_array+0x40>)
  4029ec:	4d0f      	ldr	r5, [pc, #60]	; (402a2c <__libc_init_array+0x44>)
  4029ee:	1b76      	subs	r6, r6, r5
  4029f0:	10b6      	asrs	r6, r6, #2
  4029f2:	bf18      	it	ne
  4029f4:	2400      	movne	r4, #0
  4029f6:	d005      	beq.n	402a04 <__libc_init_array+0x1c>
  4029f8:	3401      	adds	r4, #1
  4029fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4029fe:	4798      	blx	r3
  402a00:	42a6      	cmp	r6, r4
  402a02:	d1f9      	bne.n	4029f8 <__libc_init_array+0x10>
  402a04:	4e0a      	ldr	r6, [pc, #40]	; (402a30 <__libc_init_array+0x48>)
  402a06:	4d0b      	ldr	r5, [pc, #44]	; (402a34 <__libc_init_array+0x4c>)
  402a08:	1b76      	subs	r6, r6, r5
  402a0a:	f000 f959 	bl	402cc0 <_init>
  402a0e:	10b6      	asrs	r6, r6, #2
  402a10:	bf18      	it	ne
  402a12:	2400      	movne	r4, #0
  402a14:	d006      	beq.n	402a24 <__libc_init_array+0x3c>
  402a16:	3401      	adds	r4, #1
  402a18:	f855 3b04 	ldr.w	r3, [r5], #4
  402a1c:	4798      	blx	r3
  402a1e:	42a6      	cmp	r6, r4
  402a20:	d1f9      	bne.n	402a16 <__libc_init_array+0x2e>
  402a22:	bd70      	pop	{r4, r5, r6, pc}
  402a24:	bd70      	pop	{r4, r5, r6, pc}
  402a26:	bf00      	nop
  402a28:	00402ccc 	.word	0x00402ccc
  402a2c:	00402ccc 	.word	0x00402ccc
  402a30:	00402cd4 	.word	0x00402cd4
  402a34:	00402ccc 	.word	0x00402ccc

00402a38 <memset>:
  402a38:	b470      	push	{r4, r5, r6}
  402a3a:	0786      	lsls	r6, r0, #30
  402a3c:	d046      	beq.n	402acc <memset+0x94>
  402a3e:	1e54      	subs	r4, r2, #1
  402a40:	2a00      	cmp	r2, #0
  402a42:	d041      	beq.n	402ac8 <memset+0x90>
  402a44:	b2ca      	uxtb	r2, r1
  402a46:	4603      	mov	r3, r0
  402a48:	e002      	b.n	402a50 <memset+0x18>
  402a4a:	f114 34ff 	adds.w	r4, r4, #4294967295
  402a4e:	d33b      	bcc.n	402ac8 <memset+0x90>
  402a50:	f803 2b01 	strb.w	r2, [r3], #1
  402a54:	079d      	lsls	r5, r3, #30
  402a56:	d1f8      	bne.n	402a4a <memset+0x12>
  402a58:	2c03      	cmp	r4, #3
  402a5a:	d92e      	bls.n	402aba <memset+0x82>
  402a5c:	b2cd      	uxtb	r5, r1
  402a5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402a62:	2c0f      	cmp	r4, #15
  402a64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402a68:	d919      	bls.n	402a9e <memset+0x66>
  402a6a:	f103 0210 	add.w	r2, r3, #16
  402a6e:	4626      	mov	r6, r4
  402a70:	3e10      	subs	r6, #16
  402a72:	2e0f      	cmp	r6, #15
  402a74:	f842 5c10 	str.w	r5, [r2, #-16]
  402a78:	f842 5c0c 	str.w	r5, [r2, #-12]
  402a7c:	f842 5c08 	str.w	r5, [r2, #-8]
  402a80:	f842 5c04 	str.w	r5, [r2, #-4]
  402a84:	f102 0210 	add.w	r2, r2, #16
  402a88:	d8f2      	bhi.n	402a70 <memset+0x38>
  402a8a:	f1a4 0210 	sub.w	r2, r4, #16
  402a8e:	f022 020f 	bic.w	r2, r2, #15
  402a92:	f004 040f 	and.w	r4, r4, #15
  402a96:	3210      	adds	r2, #16
  402a98:	2c03      	cmp	r4, #3
  402a9a:	4413      	add	r3, r2
  402a9c:	d90d      	bls.n	402aba <memset+0x82>
  402a9e:	461e      	mov	r6, r3
  402aa0:	4622      	mov	r2, r4
  402aa2:	3a04      	subs	r2, #4
  402aa4:	2a03      	cmp	r2, #3
  402aa6:	f846 5b04 	str.w	r5, [r6], #4
  402aaa:	d8fa      	bhi.n	402aa2 <memset+0x6a>
  402aac:	1f22      	subs	r2, r4, #4
  402aae:	f022 0203 	bic.w	r2, r2, #3
  402ab2:	3204      	adds	r2, #4
  402ab4:	4413      	add	r3, r2
  402ab6:	f004 0403 	and.w	r4, r4, #3
  402aba:	b12c      	cbz	r4, 402ac8 <memset+0x90>
  402abc:	b2c9      	uxtb	r1, r1
  402abe:	441c      	add	r4, r3
  402ac0:	f803 1b01 	strb.w	r1, [r3], #1
  402ac4:	429c      	cmp	r4, r3
  402ac6:	d1fb      	bne.n	402ac0 <memset+0x88>
  402ac8:	bc70      	pop	{r4, r5, r6}
  402aca:	4770      	bx	lr
  402acc:	4614      	mov	r4, r2
  402ace:	4603      	mov	r3, r0
  402ad0:	e7c2      	b.n	402a58 <memset+0x20>
  402ad2:	bf00      	nop

00402ad4 <register_fini>:
  402ad4:	4b02      	ldr	r3, [pc, #8]	; (402ae0 <register_fini+0xc>)
  402ad6:	b113      	cbz	r3, 402ade <register_fini+0xa>
  402ad8:	4802      	ldr	r0, [pc, #8]	; (402ae4 <register_fini+0x10>)
  402ada:	f000 b805 	b.w	402ae8 <atexit>
  402ade:	4770      	bx	lr
  402ae0:	00000000 	.word	0x00000000
  402ae4:	00402af5 	.word	0x00402af5

00402ae8 <atexit>:
  402ae8:	2300      	movs	r3, #0
  402aea:	4601      	mov	r1, r0
  402aec:	461a      	mov	r2, r3
  402aee:	4618      	mov	r0, r3
  402af0:	f000 b81e 	b.w	402b30 <__register_exitproc>

00402af4 <__libc_fini_array>:
  402af4:	b538      	push	{r3, r4, r5, lr}
  402af6:	4c0a      	ldr	r4, [pc, #40]	; (402b20 <__libc_fini_array+0x2c>)
  402af8:	4d0a      	ldr	r5, [pc, #40]	; (402b24 <__libc_fini_array+0x30>)
  402afa:	1b64      	subs	r4, r4, r5
  402afc:	10a4      	asrs	r4, r4, #2
  402afe:	d00a      	beq.n	402b16 <__libc_fini_array+0x22>
  402b00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402b04:	3b01      	subs	r3, #1
  402b06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402b0a:	3c01      	subs	r4, #1
  402b0c:	f855 3904 	ldr.w	r3, [r5], #-4
  402b10:	4798      	blx	r3
  402b12:	2c00      	cmp	r4, #0
  402b14:	d1f9      	bne.n	402b0a <__libc_fini_array+0x16>
  402b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402b1a:	f000 b8db 	b.w	402cd4 <_fini>
  402b1e:	bf00      	nop
  402b20:	00402ce4 	.word	0x00402ce4
  402b24:	00402ce0 	.word	0x00402ce0

00402b28 <__retarget_lock_acquire_recursive>:
  402b28:	4770      	bx	lr
  402b2a:	bf00      	nop

00402b2c <__retarget_lock_release_recursive>:
  402b2c:	4770      	bx	lr
  402b2e:	bf00      	nop

00402b30 <__register_exitproc>:
  402b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402b34:	4d2c      	ldr	r5, [pc, #176]	; (402be8 <__register_exitproc+0xb8>)
  402b36:	4606      	mov	r6, r0
  402b38:	6828      	ldr	r0, [r5, #0]
  402b3a:	4698      	mov	r8, r3
  402b3c:	460f      	mov	r7, r1
  402b3e:	4691      	mov	r9, r2
  402b40:	f7ff fff2 	bl	402b28 <__retarget_lock_acquire_recursive>
  402b44:	4b29      	ldr	r3, [pc, #164]	; (402bec <__register_exitproc+0xbc>)
  402b46:	681c      	ldr	r4, [r3, #0]
  402b48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402b4c:	2b00      	cmp	r3, #0
  402b4e:	d03e      	beq.n	402bce <__register_exitproc+0x9e>
  402b50:	685a      	ldr	r2, [r3, #4]
  402b52:	2a1f      	cmp	r2, #31
  402b54:	dc1c      	bgt.n	402b90 <__register_exitproc+0x60>
  402b56:	f102 0e01 	add.w	lr, r2, #1
  402b5a:	b176      	cbz	r6, 402b7a <__register_exitproc+0x4a>
  402b5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402b60:	2401      	movs	r4, #1
  402b62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402b66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402b6a:	4094      	lsls	r4, r2
  402b6c:	4320      	orrs	r0, r4
  402b6e:	2e02      	cmp	r6, #2
  402b70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402b74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402b78:	d023      	beq.n	402bc2 <__register_exitproc+0x92>
  402b7a:	3202      	adds	r2, #2
  402b7c:	f8c3 e004 	str.w	lr, [r3, #4]
  402b80:	6828      	ldr	r0, [r5, #0]
  402b82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402b86:	f7ff ffd1 	bl	402b2c <__retarget_lock_release_recursive>
  402b8a:	2000      	movs	r0, #0
  402b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b90:	4b17      	ldr	r3, [pc, #92]	; (402bf0 <__register_exitproc+0xc0>)
  402b92:	b30b      	cbz	r3, 402bd8 <__register_exitproc+0xa8>
  402b94:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402b98:	f3af 8000 	nop.w
  402b9c:	4603      	mov	r3, r0
  402b9e:	b1d8      	cbz	r0, 402bd8 <__register_exitproc+0xa8>
  402ba0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402ba4:	6002      	str	r2, [r0, #0]
  402ba6:	2100      	movs	r1, #0
  402ba8:	6041      	str	r1, [r0, #4]
  402baa:	460a      	mov	r2, r1
  402bac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402bb0:	f04f 0e01 	mov.w	lr, #1
  402bb4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402bb8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402bbc:	2e00      	cmp	r6, #0
  402bbe:	d0dc      	beq.n	402b7a <__register_exitproc+0x4a>
  402bc0:	e7cc      	b.n	402b5c <__register_exitproc+0x2c>
  402bc2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402bc6:	430c      	orrs	r4, r1
  402bc8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402bcc:	e7d5      	b.n	402b7a <__register_exitproc+0x4a>
  402bce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402bd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402bd6:	e7bb      	b.n	402b50 <__register_exitproc+0x20>
  402bd8:	6828      	ldr	r0, [r5, #0]
  402bda:	f7ff ffa7 	bl	402b2c <__retarget_lock_release_recursive>
  402bde:	f04f 30ff 	mov.w	r0, #4294967295
  402be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402be6:	bf00      	nop
  402be8:	20400440 	.word	0x20400440
  402bec:	00402cbc 	.word	0x00402cbc
  402bf0:	00000000 	.word	0x00000000

00402bf4 <mmc_trans_multipliers>:
  402bf4:	00000000 0000000a 0000000c 0000000d     ................
  402c04:	0000000f 00000014 0000001a 0000001e     ................
  402c14:	00000023 00000028 0000002d 00000034     #...(...-...4...
  402c24:	00000037 0000003c 00000046 00000050     7...<...F...P...

00402c34 <sd_mmc_trans_units>:
  402c34:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00402c50 <sd_trans_multipliers>:
  402c50:	00000000 0000000a 0000000c 0000000d     ................
  402c60:	0000000f 00000014 00000019 0000001e     ................
  402c70:	00000023 00000028 0000002d 00000032     #...(...-...2...
  402c80:	00000037 0000003c 00000046 00000050     7...<...F...P...
  402c90:	00000001 00000002 00000004 00000008     ................
  402ca0:	00000010 00000020 00000040 00000080     .... ...@.......
  402cb0:	00000100 00000200 00000400              ............

00402cbc <_global_impure_ptr>:
  402cbc:	20400018                                ..@ 

00402cc0 <_init>:
  402cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cc2:	bf00      	nop
  402cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cc6:	bc08      	pop	{r3}
  402cc8:	469e      	mov	lr, r3
  402cca:	4770      	bx	lr

00402ccc <__init_array_start>:
  402ccc:	00402ad5 	.word	0x00402ad5

00402cd0 <__frame_dummy_init_array_entry>:
  402cd0:	00400165                                e.@.

00402cd4 <_fini>:
  402cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cd6:	bf00      	nop
  402cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cda:	bc08      	pop	{r3}
  402cdc:	469e      	mov	lr, r3
  402cde:	4770      	bx	lr

00402ce0 <__fini_array_start>:
  402ce0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <gain>:
20400010:	0001 0000 0000 0000                         ........

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__atexit_recursive_mutex>:
20400440:	3b2c 2045                                   ,;E 
